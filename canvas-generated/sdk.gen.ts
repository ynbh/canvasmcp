// This file is auto-generated by @hey-api/openapi-ts

import { type Options as ClientOptions, type TDataShape, type Client, urlSearchParamsBodySerializer } from '@hey-api/client-axios';
import type { GetSingleAssignmentLtiData, GetSingleAssignmentLtiResponse, ShowOriginalityReportFilesData, ShowOriginalityReportFilesResponse, EditOriginalityReportFilesData, EditOriginalityReportFilesResponse, GetSingleSubmissionData, GetHistoryOfSingleSubmissionData, CreateOriginalityReportData, CreateOriginalityReportResponse, ShowOriginalityReportSubmissionsData, ShowOriginalityReportSubmissionsResponse, EditOriginalityReportSubmissionsData, EditOriginalityReportSubmissionsResponse, GetAllUsersInGroupLtiData, GetAllUsersInGroupLtiResponse, ListAllWebhookSubscriptionForToolProxyData, CreateWebhookSubscriptionData, DeleteWebhookSubscriptionData, ShowSingleWebhookSubscriptionData, UpdateWebhookSubscriptionData, GetSingleUserLtiData, GetSingleUserLtiResponse, RetrieveAssignmentsEnabledForGradeExportToSisAccountsData, RetrieveAssignmentsEnabledForGradeExportToSisCoursesData, DisableAssignmentsCurrentlyEnabledForGradeExportToSisData, ListAccountsData, ListAccountsResponse, SearchAccountDomainsData, IndexOfActiveGlobalNotificationForUserData, IndexOfActiveGlobalNotificationForUserResponse, CreateGlobalNotificationData, CloseNotificationForUserData, CloseNotificationForUserResponse, ShowGlobalNotificationData, ShowGlobalNotificationResponse, UpdateGlobalNotificationData, ListAccountAdminsData, ListAccountAdminsResponse, MakeAccountAdminData, MakeAccountAdminResponse, RemoveAccountAdminData, RemoveAccountAdminResponse, GetDepartmentLevelParticipationDataCompletedData, GetDepartmentLevelGradeDataCompletedData, GetDepartmentLevelStatisticsCompletedData, GetDepartmentLevelParticipationDataCurrentData, GetDepartmentLevelGradeDataCurrentData, GetDepartmentLevelStatisticsCurrentData, GetDepartmentLevelParticipationDataTermsData, GetDepartmentLevelGradeDataTermsData, GetDepartmentLevelStatisticsTermsData, ListAuthenticationProvidersData, ListAuthenticationProvidersResponse, AddAuthenticationProviderData, AddAuthenticationProviderResponse, DeleteAuthenticationProviderData, GetAuthenticationProviderData, GetAuthenticationProviderResponse, UpdateAuthenticationProviderData, UpdateAuthenticationProviderResponse, ListContentMigrationsAccountsData, ListContentMigrationsAccountsResponse, CreateContentMigrationAccountsData, CreateContentMigrationAccountsResponse, ListMigrationSystemsAccountsData, ListMigrationSystemsAccountsResponse, ListMigrationIssuesAccountsData, ListMigrationIssuesAccountsResponse, GetMigrationIssueAccountsData, GetMigrationIssueAccountsResponse, UpdateMigrationIssueAccountsData, UpdateMigrationIssueAccountsResponse, GetContentMigrationAccountsData, GetContentMigrationAccountsResponse, UpdateContentMigrationAccountsData, UpdateContentMigrationAccountsResponse, GetAllCoursesAccountsData, GetAllCoursesAccountsResponse, CreateNewCourseData, CreateNewCourseResponse, UpdateCoursesData, UpdateCoursesResponse, GetSingleCourseAccountsData, GetSingleCourseAccountsResponse, CreateToolFromToolconfigurationAccountsData, CreateToolFromToolconfigurationAccountsResponse, EnrollmentByIdData, EnrollmentByIdResponse, ListExternalToolsAccountsData, CreateExternalToolAccountsData, GetSessionlessLaunchUrlForExternalToolAccountsData, DeleteExternalToolAccountsData, GetSingleExternalToolAccountsData, EditExternalToolAccountsData, ListFeaturesAccountsData, ListFeaturesAccountsResponse, ListEnabledFeaturesAccountsData, RemoveFeatureFlagAccountsData, RemoveFeatureFlagAccountsResponse, GetFeatureFlagAccountsData, GetFeatureFlagAccountsResponse, SetFeatureFlagAccountsData, SetFeatureFlagAccountsResponse, ListGradingPeriodsAccountsData, ListGradingPeriodsAccountsResponse, DeleteGradingPeriodAccountsData, ListGradingStandardsAvailableInContextAccountsData, ListGradingStandardsAvailableInContextAccountsResponse, CreateNewGradingStandardAccountsData, CreateNewGradingStandardAccountsResponse, GetSingleGradingStandardInContextAccountsData, GetSingleGradingStandardInContextAccountsResponse, ListGroupCategoriesForContextAccountsData, ListGroupCategoriesForContextAccountsResponse, CreateGroupCategoryAccountsData, CreateGroupCategoryAccountsResponse, ListGroupsAvailableInContextAccountsData, ListGroupsAvailableInContextAccountsResponse, GetHelpLinksData, GetHelpLinksResponse, ListUserLoginsAccountsData, CreateUserLoginData, EditUserLoginData, GetAllOutcomeLinksForContextAccountsData, GetAllOutcomeLinksForContextAccountsResponse, GetAllOutcomeGroupsForContextAccountsData, GetAllOutcomeGroupsForContextAccountsResponse, DeleteOutcomeGroupAccountsData, DeleteOutcomeGroupAccountsResponse, ShowOutcomeGroupAccountsData, ShowOutcomeGroupAccountsResponse, UpdateOutcomeGroupAccountsData, UpdateOutcomeGroupAccountsResponse, ImportOutcomeGroupAccountsData, ImportOutcomeGroupAccountsResponse, ListLinkedOutcomesAccountsData, ListLinkedOutcomesAccountsResponse, CreateLinkOutcomeAccountsData, CreateLinkOutcomeAccountsResponse, UnlinkOutcomeAccountsData, UnlinkOutcomeAccountsResponse, CreateLinkOutcomeAccountsOutcomeIdData, CreateLinkOutcomeAccountsOutcomeIdResponse, ListSubgroupsAccountsData, ListSubgroupsAccountsResponse, CreateSubgroupAccountsData, CreateSubgroupAccountsResponse, ImportOutcomesAccountsData, ImportOutcomesAccountsResponse, GetOutcomeImportStatusAccountsData, GetOutcomeImportStatusAccountsResponse, GetProficiencyRatingsData, GetProficiencyRatingsResponse, CreateUpdateProficiencyRatingsData, CreateUpdateProficiencyRatingsResponse, AccountPermissionsData, ListAvailableReportsData, IndexOfReportsData, IndexOfReportsResponse, StartReportData, StartReportResponse, DeleteReportData, DeleteReportResponse, StatusOfReportData, StatusOfReportResponse, ListRolesData, ListRolesResponse, CreateNewRoleData, CreateNewRoleResponse, DeactivateRoleData, DeactivateRoleResponse, GetSingleRoleData, GetSingleRoleResponse, UpdateRoleData, UpdateRoleResponse, ActivateRoleData, ActivateRoleResponse, RedirectToRootOutcomeGroupForContextAccountsData, ListRubricsAccountsData, ListRubricsAccountsResponse, GetSingleRubricAccountsData, GetSingleRubricAccountsResponse, ListScopesData, ListScopesResponse, SelfRegisterUserData, SelfRegisterUserResponse, ShareBrandconfigThemeData, ShareBrandconfigThemeResponse, UpdateSharedThemeData, UpdateSharedThemeResponse, GetSisImportErrorListSisImportErrorsData, GetSisImportErrorListSisImportErrorsResponse, GetSisImportListData, GetSisImportListResponse, ImportSisDataData, ImportSisDataResponse, AbortAllPendingSisImportsData, AbortAllPendingSisImportsResponse, GetSisImportStatusData, GetSisImportStatusResponse, AbortSisImportData, AbortSisImportResponse, GetSisImportErrorListSisImportsData, GetSisImportErrorListSisImportsResponse, RestoreWorkflowStatesOfSisImportedItemsData, RestoreWorkflowStatesOfSisImportedItemsResponse, ShowAccountAuthSettingsData, ShowAccountAuthSettingsResponse, UpdateAccountAuthSettingsData, UpdateAccountAuthSettingsResponse, GetSubAccountsOfAccountData, GetSubAccountsOfAccountResponse, CreateNewSubAccountData, CreateNewSubAccountResponse, DeleteSubAccountData, DeleteSubAccountResponse, ListEnrollmentTermsData, ListEnrollmentTermsResponse, CreateEnrollmentTermData, CreateEnrollmentTermResponse, DeleteEnrollmentTermData, DeleteEnrollmentTermResponse, UpdateEnrollmentTermData, UpdateEnrollmentTermResponse, GetTermsOfServiceData, GetTermsOfServiceResponse, ListUsersInAccountData, ListUsersInAccountResponse, CreateUserData, CreateUserResponse, DeleteUserFromRootAccountData, DeleteUserFromRootAccountResponse, GetSingleAccountData, GetSingleAccountResponse, UpdateAccountData, UpdateAccountResponse, ListAnnouncementsData, ListAnnouncementsResponse, ListAppointmentGroupsData, CreateAppointmentGroupData, GetNextAppointmentData, GetNextAppointmentResponse, DeleteAppointmentGroupData, GetSingleAppointmentGroupData, UpdateAppointmentGroupData, ListStudentGroupParticipantsData, ListUserParticipantsData, QueryByAccountData, QueryByLoginData, QueryByUserData, QueryByCourseData, QueryByCourseResponse, QueryByAssignmentData, QueryByAssignmentResponse, QueryByCourseGradeChangeData, QueryByCourseGradeChangeResponse, QueryByGraderData, QueryByGraderResponse, QueryByStudentData, QueryByStudentResponse, GetBrandConfigVariablesThatShouldBeUsedForThisDomainData, ListCalendarEventsData, ListCalendarEventsResponse, CreateCalendarEventData, DeleteCalendarEventData, GetSingleCalendarEventOrAssignmentData, GetSingleCalendarEventOrAssignmentResponse, UpdateCalendarEventData, ReserveTimeSlotData, ReserveTimeSlotParticipantIdData, ListMembersOfCollaborationData, ListMembersOfCollaborationResponse, ListOfCommmessagesForUserData, ListOfCommmessagesForUserResponse, ListConversationsData, ListConversationsResponse, CreateConversationData, BatchUpdateConversationsData, BatchUpdateConversationsResponse, GetRunningBatchesData, FindRecipientsConversationsData, MarkAllAsReadData, UnreadCountData, DeleteConversationData, GetSingleConversationData, EditConversationData, AddMessageData, AddRecipientsData, DeleteMessageData, ListAccountsForCourseAdminsData, ListAccountsForCourseAdminsResponse, ListYourCoursesData, ListYourCoursesResponse, CourseActivityStreamData, CourseActivityStreamSummaryData, GetCourseLevelParticipationDataData, GetCourseLevelAssignmentDataData, GetCourseLevelStudentSummaryDataData, GetUserInACourseLevelParticipationDataData, GetUserInACourseLevelAssignmentDataData, GetUserInACourseLevelAssignmentDataResponse, GetUserInACourseLevelMessagingDataData, ListAssignmentGroupsData, ListAssignmentGroupsResponse, CreateAssignmentGroupData, CreateAssignmentGroupResponse, DestroyAssignmentGroupData, DestroyAssignmentGroupResponse, GetAssignmentGroupData, GetAssignmentGroupResponse, EditAssignmentGroupData, EditAssignmentGroupResponse, ListAssignmentsData, ListAssignmentsResponse, CreateAssignmentData, CreateAssignmentResponse, ListMultipleAssignmentsGradeableStudentsData, BatchRetrieveOverridesInCourseData, BatchRetrieveOverridesInCourseResponse, BatchCreateOverridesInCourseData, BatchCreateOverridesInCourseResponse, BatchUpdateOverridesInCourseData, BatchUpdateOverridesInCourseResponse, ShowProvisionalGradeStatusForStudentAnonymousData, ListGradeableStudentsData, ListGradeableStudentsResponse, ListStudentsSelectedForModerationData, ListStudentsSelectedForModerationResponse, SelectStudentsForModerationData, SelectStudentsForModerationResponse, ListAssignmentOverridesData, ListAssignmentOverridesResponse, CreateAssignmentOverrideData, CreateAssignmentOverrideResponse, DeleteAssignmentOverrideData, DeleteAssignmentOverrideResponse, GetSingleAssignmentOverrideData, GetSingleAssignmentOverrideResponse, UpdateAssignmentOverrideData, UpdateAssignmentOverrideResponse, GetAllPeerReviewsCoursesPeerReviewsData, GetAllPeerReviewsCoursesPeerReviewsResponse, BulkSelectProvisionalGradesData, PublishProvisionalGradesForAssignmentData, ShowProvisionalGradeStatusForStudentData, CopyProvisionalGradeData, CopyProvisionalGradeResponse, SelectProvisionalGradeData, SubmissionSummaryCoursesData, ListAssignmentSubmissionsCoursesData, ListAssignmentSubmissionsCoursesResponse, SubmitAssignmentCoursesData, GradeOrCommentOnMultipleSubmissionsCoursesAssignmentsData, GradeOrCommentOnMultipleSubmissionsCoursesAssignmentsResponse, DeletePeerReviewCoursesData, DeletePeerReviewCoursesResponse, GetAllPeerReviewsCoursesSubmissionsData, GetAllPeerReviewsCoursesSubmissionsResponse, CreatePeerReviewCoursesData, CreatePeerReviewCoursesResponse, GetSingleSubmissionCoursesData, GetSingleSubmissionCoursesResponse, GradeOrCommentOnSubmissionCoursesData, GradeOrCommentOnSubmissionCoursesResponse, UploadFileToSubmissionData, UploadFileCoursesData, MarkSubmissionAsUnreadCoursesData, MarkSubmissionAsReadCoursesData, DeleteAssignmentData, DeleteAssignmentResponse, GetSingleAssignmentData, GetSingleAssignmentResponse, EditAssignmentData, EditAssignmentResponse, ListBlueprintSubscriptionsData, ListBlueprintSubscriptionsResponse, ListBlueprintImportsData, ListBlueprintImportsResponse, ShowBlueprintImportData, ShowBlueprintImportResponse, GetImportDetailsData, GetImportDetailsResponse, GetBlueprintInformationData, GetBlueprintInformationResponse, GetAssociatedCourseInformationData, GetAssociatedCourseInformationResponse, ListBlueprintMigrationsData, ListBlueprintMigrationsResponse, BeginMigrationToPushToAssociatedCoursesData, BeginMigrationToPushToAssociatedCoursesResponse, ShowBlueprintMigrationData, ShowBlueprintMigrationResponse, GetMigrationDetailsData, GetMigrationDetailsResponse, SetOrRemoveRestrictionsOnBlueprintCourseObjectData, GetUnsyncedChangesData, GetUnsyncedChangesResponse, UpdateAssociatedCoursesData, GetCourseTimetableData, SetCourseTimetableData, CreateOrUpdateEventsDirectlyForCourseTimetableData, ListCollaborationsCoursesData, ListCollaborationsCoursesResponse, ListConferencesCoursesData, ListConferencesCoursesResponse, ListContentExportsCoursesData, ListContentExportsCoursesResponse, ExportContentCoursesData, ExportContentCoursesResponse, ShowContentExportCoursesData, ShowContentExportCoursesResponse, ListLicensesCoursesData, ListLicensesCoursesResponse, ListContentMigrationsCoursesData, ListContentMigrationsCoursesResponse, CreateContentMigrationCoursesData, CreateContentMigrationCoursesResponse, ListMigrationSystemsCoursesData, ListMigrationSystemsCoursesResponse, ListMigrationIssuesCoursesData, ListMigrationIssuesCoursesResponse, GetMigrationIssueCoursesData, GetMigrationIssueCoursesResponse, UpdateMigrationIssueCoursesData, UpdateMigrationIssueCoursesResponse, GetContentMigrationCoursesData, GetContentMigrationCoursesResponse, UpdateContentMigrationCoursesData, UpdateContentMigrationCoursesResponse, CopyCourseContentData, GetCourseCopyStatusData, BulkUpdateColumnDataData, BulkUpdateColumnDataResponse, ListCustomGradebookColumnsData, ListCustomGradebookColumnsResponse, CreateCustomGradebookColumnData, CreateCustomGradebookColumnResponse, ReorderCustomColumnsData, DeleteCustomGradebookColumnData, DeleteCustomGradebookColumnResponse, UpdateCustomGradebookColumnData, UpdateCustomGradebookColumnResponse, ListEntriesForColumnData, ListEntriesForColumnResponse, UpdateColumnDataData, UpdateColumnDataResponse, CreateToolFromToolconfigurationCoursesData, CreateToolFromToolconfigurationCoursesResponse, ListDiscussionTopicsCoursesData, ListDiscussionTopicsCoursesResponse, CreateNewDiscussionTopicCoursesData, ReorderPinnedTopicsCoursesData, DeleteTopicCoursesData, GetSingleTopicCoursesData, UpdateTopicCoursesData, ListTopicEntriesCoursesData, PostEntryCoursesData, RateEntryCoursesData, MarkEntryAsUnreadCoursesData, MarkEntryAsReadCoursesData, ListEntryRepliesCoursesData, PostReplyCoursesData, DeleteEntryCoursesData, UpdateEntryCoursesData, ListEntriesCoursesData, MarkTopicAsUnreadCoursesData, MarkTopicAsReadCoursesData, MarkAllEntriesAsUnreadCoursesData, MarkAllEntriesAsReadCoursesData, UnsubscribeFromTopicCoursesData, SubscribeToTopicCoursesData, GetFullTopicCoursesData, GetEffectiveDueDatesData, ListEnrollmentsCoursesData, ListEnrollmentsCoursesResponse, EnrollUserCoursesData, EnrollUserCoursesResponse, ConcludeDeactivateOrDeleteEnrollmentData, ConcludeDeactivateOrDeleteEnrollmentResponse, AcceptCourseInvitationData, ReActivateEnrollmentData, ReActivateEnrollmentResponse, RejectCourseInvitationData, CreateEpubExportData, CreateEpubExportResponse, ShowEpubExportData, ShowEpubExportResponse, ListExternalFeedsCoursesData, ListExternalFeedsCoursesResponse, CreateExternalFeedCoursesData, CreateExternalFeedCoursesResponse, DeleteExternalFeedCoursesData, DeleteExternalFeedCoursesResponse, ListExternalToolsCoursesData, CreateExternalToolCoursesData, GetSessionlessLaunchUrlForExternalToolCoursesData, DeleteExternalToolCoursesData, GetSingleExternalToolCoursesData, EditExternalToolCoursesData, ListFeaturesCoursesData, ListFeaturesCoursesResponse, ListEnabledFeaturesCoursesData, RemoveFeatureFlagCoursesData, RemoveFeatureFlagCoursesResponse, GetFeatureFlagCoursesData, GetFeatureFlagCoursesResponse, SetFeatureFlagCoursesData, SetFeatureFlagCoursesResponse, ListFilesCoursesData, ListFilesCoursesResponse, GetQuotaInformationCoursesData, GetFileCoursesData, GetFileCoursesResponse, ListAllFoldersCoursesData, ListAllFoldersCoursesResponse, CreateFolderCoursesData, CreateFolderCoursesResponse, ResolvePathCoursesData, ResolvePathCoursesResponse, ResolvePathCoursesFullPathData, ResolvePathCoursesFullPathResponse, GetFolderCoursesData, GetFolderCoursesResponse, ShowFrontPageCoursesData, ShowFrontPageCoursesResponse, UpdateCreateFrontPageCoursesData, UpdateCreateFrontPageCoursesResponse, DaysInGradebookHistoryForThisCourseData, DaysInGradebookHistoryForThisCourseResponse, ListUncollatedSubmissionVersionsData, ListUncollatedSubmissionVersionsResponse, DetailsForGivenDateInGradebookHistoryForThisCourseData, DetailsForGivenDateInGradebookHistoryForThisCourseResponse, ListsSubmissionsData, ListsSubmissionsResponse, ListGradingPeriodsCoursesData, ListGradingPeriodsCoursesResponse, DeleteGradingPeriodCoursesData, GetSingleGradingPeriodData, UpdateSingleGradingPeriodData, ListGradingStandardsAvailableInContextCoursesData, ListGradingStandardsAvailableInContextCoursesResponse, CreateNewGradingStandardCoursesData, CreateNewGradingStandardCoursesResponse, GetSingleGradingStandardInContextCoursesData, GetSingleGradingStandardInContextCoursesResponse, ListGroupCategoriesForContextCoursesData, ListGroupCategoriesForContextCoursesResponse, CreateGroupCategoryCoursesData, CreateGroupCategoryCoursesResponse, ListGroupsAvailableInContextCoursesData, ListGroupsAvailableInContextCoursesResponse, ListLiveAssessmentsData, CreateOrFindLiveAssessmentData, ListLiveAssessmentResultsData, CreateLiveAssessmentResultsData, GetModuleItemSequenceData, GetModuleItemSequenceResponse, ListModulesData, ListModulesResponse, CreateModuleData, CreateModuleResponse, DeleteModuleData, DeleteModuleResponse, ShowModuleData, ShowModuleResponse, UpdateModuleData, UpdateModuleResponse, ReLockModuleProgressionsData, ReLockModuleProgressionsResponse, ListModuleItemsData, ListModuleItemsResponse, CreateModuleItemData, CreateModuleItemResponse, DeleteModuleItemData, DeleteModuleItemResponse, ShowModuleItemData, ShowModuleItemResponse, UpdateModuleItemData, UpdateModuleItemResponse, MarkModuleItemAsDoneNotDoneData, MarkModuleItemReadData, SelectMasteryPathData, GetAlignedAssignmentsForOutcomeInCourseForParticularStudentData, GetAlignedAssignmentsForOutcomeInCourseForParticularStudentResponse, GetAllOutcomeLinksForContextCoursesData, GetAllOutcomeLinksForContextCoursesResponse, GetAllOutcomeGroupsForContextCoursesData, GetAllOutcomeGroupsForContextCoursesResponse, DeleteOutcomeGroupCoursesData, DeleteOutcomeGroupCoursesResponse, ShowOutcomeGroupCoursesData, ShowOutcomeGroupCoursesResponse, UpdateOutcomeGroupCoursesData, UpdateOutcomeGroupCoursesResponse, ImportOutcomeGroupCoursesData, ImportOutcomeGroupCoursesResponse, ListLinkedOutcomesCoursesData, ListLinkedOutcomesCoursesResponse, CreateLinkOutcomeCoursesData, CreateLinkOutcomeCoursesResponse, UnlinkOutcomeCoursesData, UnlinkOutcomeCoursesResponse, CreateLinkOutcomeCoursesOutcomeIdData, CreateLinkOutcomeCoursesOutcomeIdResponse, ListSubgroupsCoursesData, ListSubgroupsCoursesResponse, CreateSubgroupCoursesData, CreateSubgroupCoursesResponse, ImportOutcomesCoursesData, ImportOutcomesCoursesResponse, GetOutcomeImportStatusCoursesData, GetOutcomeImportStatusCoursesResponse, GetOutcomeResultsData, GetOutcomeResultsResponse, GetOutcomeResultRollupsData, GetOutcomeResultRollupsResponse, ListPagesCoursesData, ListPagesCoursesResponse, CreatePageCoursesData, CreatePageCoursesResponse, DeletePageCoursesData, DeletePageCoursesResponse, ShowPageCoursesData, ShowPageCoursesResponse, UpdateCreatePageCoursesData, UpdateCreatePageCoursesResponse, DuplicatePageData, DuplicatePageResponse, ListRevisionsCoursesData, ListRevisionsCoursesResponse, ShowRevisionCoursesLatestData, ShowRevisionCoursesLatestResponse, ShowRevisionCoursesRevisionIdData, ShowRevisionCoursesRevisionIdResponse, RevertToRevisionCoursesData, RevertToRevisionCoursesResponse, CoursePermissionData, CoursePermissionResponse, ListPotentialMembersCoursesData, ListPotentialMembersCoursesResponse, PreviewProcessedHtmlCourseData, SetExtensionsForStudentQuizSubmissionsData, ListQuizzesInCourseData, ListQuizzesInCourseResponse, CreateQuizData, CreateQuizResponse, RetrieveAssignmentOverriddenDatesForQuizzesData, RetrieveAssignmentOverriddenDatesForQuizzesResponse, DeleteQuizData, DeleteQuizResponse, GetSingleQuizData, GetSingleQuizResponse, EditQuizData, EditQuizResponse, ReorderQuizItemsData, SendMessageToUnsubmittedOrSubmittedUsersForQuizData, ValidateQuizAccessCodeData, ValidateQuizAccessCodeResponse, SetExtensionsForStudentQuizData, CreateQuestionGroupData, DeleteQuestionGroupData, GetSingleQuizGroupData, GetSingleQuizGroupResponse, UpdateQuestionGroupData, ReorderQuestionGroupsData, GetAvailableQuizIpFiltersData, ListQuestionsInQuizOrSubmissionData, ListQuestionsInQuizOrSubmissionResponse, CreateSingleQuizQuestionData, CreateSingleQuizQuestionResponse, DeleteQuizQuestionData, GetSingleQuizQuestionData, GetSingleQuizQuestionResponse, UpdateExistingQuizQuestionData, UpdateExistingQuizQuestionResponse, RetrieveAllQuizReportsData, RetrieveAllQuizReportsResponse, CreateQuizReportData, CreateQuizReportResponse, AbortGenerationOfReportOrRemovePreviouslyGeneratedOneData, GetQuizReportData, GetQuizReportResponse, FetchingLatestQuizStatisticsData, GetQuizSubmissionData, GetAllQuizSubmissionsData, CreateQuizSubmissionStartQuizTakingSessionData, UploadFileQuizSubmissionData, GetSingleQuizSubmissionData, UpdateStudentQuestionScoresAndCommentsData, CompleteQuizSubmissionTurnItInData, RetrieveCapturedEventsData, SubmitCapturedEventsData, GetCurrentQuizSubmissionTimesData, ListRecentlyLoggedInStudentsData, ListRecentlyLoggedInStudentsResponse, ResetCourseData, ResetCourseResponse, RedirectToRootOutcomeGroupForContextCoursesData, ListRubricsCoursesData, GetSingleRubricCoursesData, GetSingleRubricCoursesResponse, ListUsersInCourseSearchUsersData, ListUsersInCourseSearchUsersResponse, ListCourseSectionsData, ListCourseSectionsResponse, CreateCourseSectionData, CreateCourseSectionResponse, GetSectionInformationCoursesData, GetSectionInformationCoursesResponse, GetCourseSettingsData, UpdateCourseSettingsData, ListStudentsData, ListStudentsResponse, ListSubmissionsForMultipleAssignmentsCoursesData, ListSubmissionsForMultipleAssignmentsCoursesResponse, GradeOrCommentOnMultipleSubmissionsCoursesSubmissionsData, GradeOrCommentOnMultipleSubmissionsCoursesSubmissionsResponse, ListAvailableTabsForCourseOrGroupCoursesData, UpdateTabForCourseData, UpdateTabForCourseResponse, CourseTodoItemsData, RemoveUsageRightsCoursesData, SetUsageRightsCoursesData, SetUsageRightsCoursesResponse, ListUsersInCourseUsersData, ListUsersInCourseUsersResponse, GetSingleUserData, GetSingleUserResponse, AddsLastAttendedDateToStudentEnrollmentInCourseData, AddsLastAttendedDateToStudentEnrollmentInCourseResponse, DeleteConcludeCourseData, GetSingleCourseCoursesData, GetSingleCourseCoursesResponse, UpdateCourseData, GetLatePolicyData, PatchLatePolicyData, CreateLatePolicyData, ListCoursesWithTheirLatestEpubExportData, ListCoursesWithTheirLatestEpubExportResponse, CreateErrorReportData, DeleteFileData, DeleteFileResponse, GetFileFilesData, GetFileFilesResponse, UpdateFileData, UpdateFileResponse, GetPublicInlinePreviewUrlData, CopyFileData, CopyFileResponse, CopyFolderData, CopyFolderResponse, UploadFileToFolderData, CreateFolderFoldersData, CreateFolderFoldersResponse, DeleteFolderData, GetFolderFoldersData, GetFolderFoldersResponse, UpdateFolderData, UpdateFolderResponse, ListFilesFoldersData, ListFilesFoldersResponse, ListFoldersData, ListFoldersResponse, DeleteOutcomeGroupGlobalData, DeleteOutcomeGroupGlobalResponse, ShowOutcomeGroupGlobalData, ShowOutcomeGroupGlobalResponse, UpdateOutcomeGroupGlobalData, UpdateOutcomeGroupGlobalResponse, ImportOutcomeGroupGlobalData, ImportOutcomeGroupGlobalResponse, ListLinkedOutcomesGlobalData, ListLinkedOutcomesGlobalResponse, CreateLinkOutcomeGlobalData, CreateLinkOutcomeGlobalResponse, UnlinkOutcomeGlobalData, UnlinkOutcomeGlobalResponse, CreateLinkOutcomeGlobalOutcomeIdData, CreateLinkOutcomeGlobalOutcomeIdResponse, ListSubgroupsGlobalData, ListSubgroupsGlobalResponse, CreateSubgroupGlobalData, CreateSubgroupGlobalResponse, RedirectToRootOutcomeGroupForContextGlobalData, DeleteGroupCategoryData, GetSingleGroupCategoryData, GetSingleGroupCategoryResponse, UpdateGroupCategoryData, UpdateGroupCategoryResponse, AssignUnassignedMembersData, AssignUnassignedMembersResponse, CreateGroupGroupCategoriesData, CreateGroupGroupCategoriesResponse, ListUsersInGroupCategoryData, ListUsersInGroupCategoryResponse, CreateGroupGroupsData, CreateGroupGroupsResponse, DeleteGroupData, DeleteGroupResponse, GetSingleGroupData, GetSingleGroupResponse, EditGroupData, EditGroupResponse, GroupActivityStreamData, GroupActivityStreamSummaryData, RedirectToAssignmentOverrideForGroupData, ListCollaborationsGroupsData, ListCollaborationsGroupsResponse, ListConferencesGroupsData, ListConferencesGroupsResponse, ListContentExportsGroupsData, ListContentExportsGroupsResponse, ExportContentGroupsData, ExportContentGroupsResponse, ShowContentExportGroupsData, ShowContentExportGroupsResponse, ListLicensesGroupsData, ListLicensesGroupsResponse, ListContentMigrationsGroupsData, ListContentMigrationsGroupsResponse, CreateContentMigrationGroupsData, CreateContentMigrationGroupsResponse, ListMigrationSystemsGroupsData, ListMigrationSystemsGroupsResponse, ListMigrationIssuesGroupsData, ListMigrationIssuesGroupsResponse, GetMigrationIssueGroupsData, GetMigrationIssueGroupsResponse, UpdateMigrationIssueGroupsData, UpdateMigrationIssueGroupsResponse, GetContentMigrationGroupsData, GetContentMigrationGroupsResponse, UpdateContentMigrationGroupsData, UpdateContentMigrationGroupsResponse, ListDiscussionTopicsGroupsData, ListDiscussionTopicsGroupsResponse, CreateNewDiscussionTopicGroupsData, ReorderPinnedTopicsGroupsData, DeleteTopicGroupsData, GetSingleTopicGroupsData, UpdateTopicGroupsData, ListTopicEntriesGroupsData, PostEntryGroupsData, RateEntryGroupsData, MarkEntryAsUnreadGroupsData, MarkEntryAsReadGroupsData, ListEntryRepliesGroupsData, PostReplyGroupsData, DeleteEntryGroupsData, UpdateEntryGroupsData, ListEntriesGroupsData, MarkTopicAsUnreadGroupsData, MarkTopicAsReadGroupsData, MarkAllEntriesAsUnreadGroupsData, MarkAllEntriesAsReadGroupsData, UnsubscribeFromTopicGroupsData, SubscribeToTopicGroupsData, GetFullTopicGroupsData, ListExternalFeedsGroupsData, ListExternalFeedsGroupsResponse, CreateExternalFeedGroupsData, CreateExternalFeedGroupsResponse, DeleteExternalFeedGroupsData, DeleteExternalFeedGroupsResponse, ListExternalToolsGroupsData, UploadFileToGroupData, GetQuotaInformationGroupsData, GetFileGroupsData, GetFileGroupsResponse, ListAllFoldersGroupsData, ListAllFoldersGroupsResponse, CreateFolderGroupsData, CreateFolderGroupsResponse, ResolvePathGroupsData, ResolvePathGroupsResponse, ResolvePathGroupsFullPathData, ResolvePathGroupsFullPathResponse, GetFolderGroupsData, GetFolderGroupsResponse, ShowFrontPageGroupsData, ShowFrontPageGroupsResponse, UpdateCreateFrontPageGroupsData, UpdateCreateFrontPageGroupsResponse, InviteOthersToGroupData, ListGroupMembershipsData, ListGroupMembershipsResponse, CreateMembershipData, CreateMembershipResponse, LeaveGroupMembershipsData, GetSingleGroupMembershipMembershipsData, GetSingleGroupMembershipMembershipsResponse, UpdateMembershipMembershipsData, UpdateMembershipMembershipsResponse, ListPagesGroupsData, ListPagesGroupsResponse, CreatePageGroupsData, CreatePageGroupsResponse, DeletePageGroupsData, DeletePageGroupsResponse, ShowPageGroupsData, ShowPageGroupsResponse, UpdateCreatePageGroupsData, UpdateCreatePageGroupsResponse, ListRevisionsGroupsData, ListRevisionsGroupsResponse, ShowRevisionGroupsLatestData, ShowRevisionGroupsLatestResponse, ShowRevisionGroupsRevisionIdData, ShowRevisionGroupsRevisionIdResponse, RevertToRevisionGroupsData, RevertToRevisionGroupsResponse, GroupPermissionData, ListPotentialMembersGroupsData, ListPotentialMembersGroupsResponse, PreviewProcessedHtmlGroupData, ListAvailableTabsForCourseOrGroupGroupsData, RemoveUsageRightsGroupsData, SetUsageRightsGroupsData, SetUsageRightsGroupsResponse, ListGroupSusersData, ListGroupSusersResponse, LeaveGroupUsersData, GetSingleGroupMembershipUsersData, GetSingleGroupMembershipUsersResponse, UpdateMembershipUsersData, UpdateMembershipUsersResponse, CreateJwtData, CreateJwtResponse, RefreshJwtData, RefreshJwtResponse, ShowOutcomeData, ShowOutcomeResponse, UpdateOutcomeData, UpdateOutcomeResponse, ListPlannerItemsData, ListPlannerOverridesData, ListPlannerOverridesResponse, CreatePlannerOverrideData, CreatePlannerOverrideResponse, DeletePlannerOverrideData, DeletePlannerOverrideResponse, ShowPlannerOverrideData, ShowPlannerOverrideResponse, UpdatePlannerOverrideData, UpdatePlannerOverrideResponse, ListPlannerNotesData, ListPlannerNotesResponse, CreatePlannerNoteData, CreatePlannerNoteResponse, DeletePlannerNoteData, DeletePlannerNoteResponse, ShowPlannernoteData, ShowPlannernoteResponse, UpdatePlannernoteData, UpdatePlannernoteResponse, ListClosedPollSessionsData, ListOpenedPollSessionsData, ListPollsData, CreateSinglePollData, DeletePollData, GetSinglePollData, UpdateSinglePollData, ListPollChoicesInPollData, CreateSinglePollChoiceData, DeletePollChoiceData, GetSinglePollChoiceData, UpdateSinglePollChoiceData, ListPollSessionsForPollData, CreateSinglePollSessionData, DeletePollSessionData, GetResultsForSinglePollSessionData, UpdateSinglePollSessionData, CloseOpenedPollSessionData, OpenPollSessionData, CreateSinglePollSubmissionData, GetSinglePollSubmissionData, QueryProgressData, QueryProgressResponse, GetAllQuizSubmissionQuestionsData, AnsweringQuestionsData, AnsweringQuestionsResponse, FlaggingQuestionData, UnflaggingQuestionData, ListAllCoursesData, ListAllCoursesResponse, FindRecipientsSearchData, RedirectToAssignmentOverrideForSectionData, DeleteSectionData, DeleteSectionResponse, GetSectionInformationSectionsData, GetSectionInformationSectionsResponse, EditSectionData, EditSectionResponse, DeCrossListSectionData, DeCrossListSectionResponse, CrossListSectionData, CrossListSectionResponse, GetAllPeerReviewsSectionsPeerReviewsData, GetAllPeerReviewsSectionsPeerReviewsResponse, SubmissionSummarySectionsData, ListAssignmentSubmissionsSectionsData, ListAssignmentSubmissionsSectionsResponse, SubmitAssignmentSectionsData, GradeOrCommentOnMultipleSubmissionsSectionsAssignmentsData, GradeOrCommentOnMultipleSubmissionsSectionsAssignmentsResponse, DeletePeerReviewSectionsData, DeletePeerReviewSectionsResponse, GetAllPeerReviewsSectionsSubmissionsData, GetAllPeerReviewsSectionsSubmissionsResponse, CreatePeerReviewSectionsData, CreatePeerReviewSectionsResponse, GetSingleSubmissionSectionsData, GradeOrCommentOnSubmissionSectionsData, GradeOrCommentOnSubmissionSectionsResponse, UploadFileSectionsData, MarkSubmissionAsUnreadSectionsData, MarkSubmissionAsReadSectionsData, ListEnrollmentsSectionsData, ListEnrollmentsSectionsResponse, EnrollUserSectionsData, EnrollUserSectionsResponse, ListSubmissionsForMultipleAssignmentsSectionsData, GradeOrCommentOnMultipleSubmissionsSectionsSubmissionsData, GradeOrCommentOnMultipleSubmissionsSectionsSubmissionsResponse, GetKalturaConfigData, StartKalturaSessionData, UnShareBrandconfigThemeData, UnShareBrandconfigThemeResponse, ListActivityStreamActivityStreamData, ListActivityStreamActivityStreamResponse, HideAllStreamItemsData, ListActivityStreamSelfData, ActivityStreamSummaryData, HideStreamItemData, ListBookmarksData, ListBookmarksResponse, CreateBookmarkData, CreateBookmarkResponse, DeleteBookmarkData, GetBookmarkData, GetBookmarkResponse, UpdateBookmarkData, UpdateBookmarkResponse, DeletePushNotificationEndpointData, DeletePushNotificationEndpointResponse, UpdatePreferencesByCategoryData, UpdateMultiplePreferencesCommunicationChannelIdData, UpdatePreferenceCommunicationChannelIdData, UpdateMultiplePreferencesTypeData, UpdatePreferenceTypeData, ClearCourseNicknamesData, ListCourseNicknamesData, ListCourseNicknamesResponse, RemoveCourseNicknameData, RemoveCourseNicknameResponse, GetCourseNicknameData, GetCourseNicknameResponse, SetCourseNicknameData, SetCourseNicknameResponse, ResetCourseFavoritesData, ListFavoriteCoursesData, ListFavoriteCoursesResponse, RemoveCourseFromFavoritesData, RemoveCourseFromFavoritesResponse, AddCourseToFavoritesData, AddCourseToFavoritesResponse, ResetGroupFavoritesData, ListFavoriteGroupsData, ListFavoriteGroupsResponse, RemoveGroupFromFavoritesData, RemoveGroupFromFavoritesResponse, AddGroupToFavoritesData, AddGroupToFavoritesResponse, ListYourGroupsData, ListYourGroupsResponse, GetPandataEventsJwtTokenAndItsExpirationDateData, ListTodoItemsData, ListCountsForTodoItemsData, ListUpcomingAssignmentsCalendarEventsData, ShowUserDetailsData, ShowUserDetailsResponse, EditUserData, EditUserResponse, GetCustomColorsData, GetCustomColorsResponse, GetCustomColorData, UpdateCustomColorData, GetDashboardPositionsData, UpdateDashboardPositionsData, MergeUserIntoAnotherUserAccountsData, MergeUserIntoAnotherUserAccountsResponse, MergeUserIntoAnotherUserDestinationUserIdData, MergeUserIntoAnotherUserDestinationUserIdResponse, UpdateUserSettingsData, SplitMergedUsersIntoSeparateUsersData, SplitMergedUsersIntoSeparateUsersResponse, ListAvatarOptionsData, ListAvatarOptionsResponse, ListCalendarEventsForUserData, ListCalendarEventsForUserResponse, ListUserCommunicationChannelsData, ListUserCommunicationChannelsResponse, CreateCommunicationChannelData, CreateCommunicationChannelResponse, ListOfPreferenceCategoriesData, ListPreferencesCommunicationChannelIdData, ListPreferencesCommunicationChannelIdResponse, GetPreferenceCommunicationChannelIdData, GetPreferenceCommunicationChannelIdResponse, DeleteCommunicationChannelIdData, DeleteCommunicationChannelIdResponse, DeleteCommunicationChannelTypeData, DeleteCommunicationChannelTypeResponse, ListPreferencesTypeData, ListPreferencesTypeResponse, GetPreferenceTypeData, GetPreferenceTypeResponse, ListContentExportsUsersData, ListContentExportsUsersResponse, ExportContentUsersData, ExportContentUsersResponse, ShowContentExportUsersData, ShowContentExportUsersResponse, ListLicensesUsersData, ListLicensesUsersResponse, ListContentMigrationsUsersData, ListContentMigrationsUsersResponse, CreateContentMigrationUsersData, CreateContentMigrationUsersResponse, ListMigrationSystemsUsersData, ListMigrationSystemsUsersResponse, ListMigrationIssuesUsersData, ListMigrationIssuesUsersResponse, GetMigrationIssueUsersData, GetMigrationIssueUsersResponse, UpdateMigrationIssueUsersData, UpdateMigrationIssueUsersResponse, GetContentMigrationUsersData, GetContentMigrationUsersResponse, UpdateContentMigrationUsersData, UpdateContentMigrationUsersResponse, ListCoursesForUserData, ListCoursesForUserResponse, ListAssignmentsForUserData, ListAssignmentsForUserResponse, DeleteCustomDataData, LoadCustomDataData, StoreCustomDataData, ListEnrollmentsUsersData, ListEnrollmentsUsersResponse, ListFeaturesUsersData, ListFeaturesUsersResponse, ListEnabledFeaturesUsersData, RemoveFeatureFlagUsersData, RemoveFeatureFlagUsersResponse, GetFeatureFlagUsersData, GetFeatureFlagUsersResponse, SetFeatureFlagUsersData, SetFeatureFlagUsersResponse, UploadFileToUsersFilesData, GetQuotaInformationUsersData, GetFileUsersData, GetFileUsersResponse, ListAllFoldersUsersData, ListAllFoldersUsersResponse, CreateFolderUsersData, CreateFolderUsersResponse, ResolvePathUsersData, ResolvePathUsersResponse, ResolvePathUsersFullPathData, ResolvePathUsersFullPathResponse, GetFolderUsersData, GetFolderUsersResponse, ListUserLoginsUsersData, DeleteUserLoginData, ListMissingSubmissionsData, ListMissingSubmissionsResponse, ListObserveesData, ListObserveesResponse, AddObserveeWithCredentialsData, AddObserveeWithCredentialsResponse, RemoveObserveeData, RemoveObserveeResponse, ShowObserveeData, ShowObserveeResponse, AddObserveeData, AddObserveeResponse, ListUserPageViewsData, ListUserPageViewsResponse, GetUserProfileData, GetUserProfileResponse, RemoveUsageRightsUsersData, SetUsageRightsUsersData, SetUsageRightsUsersResponse } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Get a single assignment (lti)
 * Get a single Canvas assignment by Canvas id or LTI id. Tool providers may only access
 * assignments that are associated with their tool.
 */
export const getSingleAssignmentLti = <ThrowOnError extends boolean = false>(options: Options<GetSingleAssignmentLtiData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetSingleAssignmentLtiResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/lti/assignments/{assignment_id}',
        ...options
    });
};

/**
 * Show an Originality Report
 * Get a single originality report
 */
export const showOriginalityReportFiles = <ThrowOnError extends boolean = false>(options: Options<ShowOriginalityReportFilesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ShowOriginalityReportFilesResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/lti/assignments/{assignment_id}/files/{file_id}/originality_report',
        ...options
    });
};

/**
 * Edit an Originality Report
 * Modify an existing originality report. An alternative to this endpoint is
 * to POST the same parameters listed below to the CREATE endpoint.
 */
export const editOriginalityReportFiles = <ThrowOnError extends boolean = false>(options: Options<EditOriginalityReportFilesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<EditOriginalityReportFilesResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/lti/assignments/{assignment_id}/files/{file_id}/originality_report',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get a single submission
 * Get a single submission, based on submission id.
 */
export const getSingleSubmission = <ThrowOnError extends boolean = false>(options: Options<GetSingleSubmissionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/lti/assignments/{assignment_id}/submissions/{submission_id}',
        ...options
    });
};

/**
 * Get the history of a single submission
 * Get a list of all attempts made for a submission, based on submission id.
 */
export const getHistoryOfSingleSubmission = <ThrowOnError extends boolean = false>(options: Options<GetHistoryOfSingleSubmissionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/lti/assignments/{assignment_id}/submissions/{submission_id}/history',
        ...options
    });
};

/**
 * Create an Originality Report
 * Create a new OriginalityReport for the specified file
 */
export const createOriginalityReport = <ThrowOnError extends boolean = false>(options: Options<CreateOriginalityReportData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateOriginalityReportResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/lti/assignments/{assignment_id}/submissions/{submission_id}/originality_report',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Show an Originality Report
 * Get a single originality report
 */
export const showOriginalityReportSubmissions = <ThrowOnError extends boolean = false>(options: Options<ShowOriginalityReportSubmissionsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ShowOriginalityReportSubmissionsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/lti/assignments/{assignment_id}/submissions/{submission_id}/originality_report/{id}',
        ...options
    });
};

/**
 * Edit an Originality Report
 * Modify an existing originality report. An alternative to this endpoint is
 * to POST the same parameters listed below to the CREATE endpoint.
 */
export const editOriginalityReportSubmissions = <ThrowOnError extends boolean = false>(options: Options<EditOriginalityReportSubmissionsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<EditOriginalityReportSubmissionsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/lti/assignments/{assignment_id}/submissions/{submission_id}/originality_report/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get all users in a group (lti)
 * Get all Canvas users in a group. Tool providers may only access
 * groups that belong to the context the tool is installed in.
 */
export const getAllUsersInGroupLti = <ThrowOnError extends boolean = false>(options: Options<GetAllUsersInGroupLtiData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetAllUsersInGroupLtiResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/lti/groups/{group_id}/users',
        ...options
    });
};

/**
 * List all Webhook Subscription for a tool proxy
 * This endpoint returns a paginated list with a default limit of 100 items per result set.
 * You can retrieve the next result set by setting a 'StartKey' header in your next request
 * with the value of the 'EndKey' header in the response.
 *
 * Example use of a 'StartKey' header object:
 * { "Id":"71d6dfba-0547-477d-b41d-db8cb528c6d1","DeveloperKey":"10000000000001" }
 */
export const listAllWebhookSubscriptionForToolProxy = <ThrowOnError extends boolean = false>(options?: Options<ListAllWebhookSubscriptionForToolProxyData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/lti/subscriptions',
        ...options
    });
};

/**
 * Create a Webhook Subscription
 * Creates a webook subscription for the specified event type and
 * context.
 */
export const createWebhookSubscription = <ThrowOnError extends boolean = false>(options: Options<CreateWebhookSubscriptionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/lti/subscriptions',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

/**
 * Delete a Webhook Subscription
 */
export const deleteWebhookSubscription = <ThrowOnError extends boolean = false>(options: Options<DeleteWebhookSubscriptionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/lti/subscriptions/{id}',
        ...options
    });
};

/**
 * Show a single Webhook Subscription
 */
export const showSingleWebhookSubscription = <ThrowOnError extends boolean = false>(options: Options<ShowSingleWebhookSubscriptionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/lti/subscriptions/{id}',
        ...options
    });
};

/**
 * Update a Webhook Subscription
 * This endpoint uses the same parameters as the create endpoint
 */
export const updateWebhookSubscription = <ThrowOnError extends boolean = false>(options: Options<UpdateWebhookSubscriptionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/lti/subscriptions/{id}',
        ...options
    });
};

/**
 * Get a single user (lti)
 * Get a single Canvas user by Canvas id or LTI id. Tool providers may only access
 * users that have been assigned an assignment associated with their tool.
 */
export const getSingleUserLti = <ThrowOnError extends boolean = false>(options: Options<GetSingleUserLtiData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetSingleUserLtiResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/lti/users/{id}',
        ...options
    });
};

/**
 * Retrieve assignments enabled for grade export to SIS
 * Retrieve a list of published assignments flagged as "post_to_sis".
 * See the Assignments API for more details on assignments.
 * Assignment group and section information are included for convenience.
 *
 * Each section includes course information for the origin course and the
 * cross-listed course, if applicable. The `origin_course` is the course to
 * which the section belongs or the course from which the section was
 * cross-listed. Generally, the `origin_course` should be preferred when
 * performing integration work. The `xlist_course` is provided for consistency
 * and is only present when the section has been cross-listed.
 * See Sections API and Courses Api for me details.
 *
 * The `override` is only provided if the Differentiated Assignments course
 * feature is turned on and the assignment has an override for that section.
 * When there is an override for the assignment the override object's
 * keys/values can be merged with the top level assignment object to create a
 * view of the assignment object specific to that section.
 * See Assignments api for more information on assignment overrides.
 *
 * restricts to courses that start before this date (if they have a start date)
 * restricts to courses that end after this date (if they have an end date)
 * information to include.
 *
 * "student_overrides":: returns individual student override information
 */
export const retrieveAssignmentsEnabledForGradeExportToSisAccounts = <ThrowOnError extends boolean = false>(options: Options<RetrieveAssignmentsEnabledForGradeExportToSisAccountsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/sis/accounts/{account_id}/assignments',
        ...options
    });
};

/**
 * Retrieve assignments enabled for grade export to SIS
 * Retrieve a list of published assignments flagged as "post_to_sis".
 * See the Assignments API for more details on assignments.
 * Assignment group and section information are included for convenience.
 *
 * Each section includes course information for the origin course and the
 * cross-listed course, if applicable. The `origin_course` is the course to
 * which the section belongs or the course from which the section was
 * cross-listed. Generally, the `origin_course` should be preferred when
 * performing integration work. The `xlist_course` is provided for consistency
 * and is only present when the section has been cross-listed.
 * See Sections API and Courses Api for me details.
 *
 * The `override` is only provided if the Differentiated Assignments course
 * feature is turned on and the assignment has an override for that section.
 * When there is an override for the assignment the override object's
 * keys/values can be merged with the top level assignment object to create a
 * view of the assignment object specific to that section.
 * See Assignments api for more information on assignment overrides.
 *
 * restricts to courses that start before this date (if they have a start date)
 * restricts to courses that end after this date (if they have an end date)
 * information to include.
 *
 * "student_overrides":: returns individual student override information
 */
export const retrieveAssignmentsEnabledForGradeExportToSisCourses = <ThrowOnError extends boolean = false>(options: Options<RetrieveAssignmentsEnabledForGradeExportToSisCoursesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/sis/courses/{course_id}/assignments',
        ...options
    });
};

/**
 * Disable assignments currently enabled for grade export to SIS
 * Disable all assignments flagged as "post_to_sis", with the option of making it
 * specific to a grading period, in a course.
 *
 * On success, the response will be 204 No Content with an empty body.
 *
 * On failure, the response will be 400 Bad Request with a body of a specific
 * message.
 *
 * For disabling assignments in a specific grading period
 */
export const disableAssignmentsCurrentlyEnabledForGradeExportToSis = <ThrowOnError extends boolean = false>(options: Options<DisableAssignmentsCurrentlyEnabledForGradeExportToSisData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/sis/courses/{course_id}/disable_post_to_sis',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List accounts
 * A paginated list of accounts that the current user can view or manage.
 * Typically, students and even teachers will get an empty list in response,
 * only account admins can view the accounts that they are in.
 */
export const listAccounts = <ThrowOnError extends boolean = false>(options?: Options<ListAccountsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListAccountsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/accounts',
        ...options
    });
};

/**
 * Search account domains
 * Returns a list of up to 5 matching account domains
 *
 * Partial match on name / domain are supported
 */
export const searchAccountDomains = <ThrowOnError extends boolean = false>(options?: Options<SearchAccountDomainsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/accounts/search',
        ...options
    });
};

/**
 * Index of active global notification for the user
 * Returns a list of all global notifications in the account for the current user
 * Any notifications that have been closed by the user will not be returned
 */
export const indexOfActiveGlobalNotificationForUser = <ThrowOnError extends boolean = false>(options: Options<IndexOfActiveGlobalNotificationForUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<IndexOfActiveGlobalNotificationForUserResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/accounts/{account_id}/account_notifications',
        ...options
    });
};

/**
 * Create a global notification
 * Create and return a new global notification for an account.
 */
export const createGlobalNotification = <ThrowOnError extends boolean = false>(options: Options<CreateGlobalNotificationData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/accounts/{account_id}/account_notifications',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

/**
 * Close notification for user
 * If the current user no long wants to see this notification it can be excused with this call
 */
export const closeNotificationForUser = <ThrowOnError extends boolean = false>(options: Options<CloseNotificationForUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<CloseNotificationForUserResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/accounts/{account_id}/account_notifications/{id}',
        ...options
    });
};

/**
 * Show a global notification
 * Returns a global notification for the current user
 * A notification that has been closed by the user will not be returned
 */
export const showGlobalNotification = <ThrowOnError extends boolean = false>(options: Options<ShowGlobalNotificationData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ShowGlobalNotificationResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/accounts/{account_id}/account_notifications/{id}',
        ...options
    });
};

/**
 * Update a global notification
 * Update global notification for an account.
 */
export const updateGlobalNotification = <ThrowOnError extends boolean = false>(options: Options<UpdateGlobalNotificationData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/accounts/{account_id}/account_notifications/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List account admins
 * A paginated list of the admins in the account
 */
export const listAccountAdmins = <ThrowOnError extends boolean = false>(options: Options<ListAccountAdminsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListAccountAdminsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/accounts/{account_id}/admins',
        ...options
    });
};

/**
 * Make an account admin
 * Flag an existing user as an admin within the account.
 */
export const makeAccountAdmin = <ThrowOnError extends boolean = false>(options: Options<MakeAccountAdminData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MakeAccountAdminResponse, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/accounts/{account_id}/admins',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

/**
 * Remove account admin
 * Remove the rights associated with an account admin role from a user.
 */
export const removeAccountAdmin = <ThrowOnError extends boolean = false>(options: Options<RemoveAccountAdminData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<RemoveAccountAdminResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/accounts/{account_id}/admins/{user_id}',
        ...options
    });
};

/**
 * Get department-level participation data
 * Returns page view hits summed across all courses in the department. Two
 * groupings of these counts are returned; one by day (+by_date+), the other
 * by category (+by_category+). The possible categories are announcements,
 * assignments, collaborations, conferences, discussions, files, general,
 * grades, groups, modules, other, pages, and quizzes.
 *
 * This and the other department-level endpoints have three variations which
 * all return the same style of data but for different subsets of courses. All
 * share the prefix /api/v1/accounts/<account_id>/analytics. The possible
 * suffixes are:
 *
 * * /current: includes all available courses in the default term
 * * /completed: includes all concluded courses in the default term
 * * /terms/<term_id>: includes all available or concluded courses in the
 * given term.
 *
 * Courses not yet offered or which have been deleted are never included.
 *
 * /current and /completed are intended for use when the account has only one
 * term. /terms/<term_id> is intended for use when the account has multiple
 * terms.
 *
 * The action follows the suffix.
 */
export const getDepartmentLevelParticipationDataCompleted = <ThrowOnError extends boolean = false>(options: Options<GetDepartmentLevelParticipationDataCompletedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/accounts/{account_id}/analytics/completed/activity',
        ...options
    });
};

/**
 * Get department-level grade data
 * Returns the distribution of grades for students in courses in the
 * department.  Each data point is one student's current grade in one course;
 * if a student is in multiple courses, he contributes one value per course,
 * but if he's enrolled multiple times in the same course (e.g. a lecture
 * section and a lab section), he only constributes on value for that course.
 *
 * Grades are binned to the nearest integer score; anomalous grades outside
 * the 0 to 100 range are ignored. The raw counts are returned, not yet
 * normalized by the total count.
 *
 * Shares the same variations on endpoint as the participation data.
 */
export const getDepartmentLevelGradeDataCompleted = <ThrowOnError extends boolean = false>(options: Options<GetDepartmentLevelGradeDataCompletedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/accounts/{account_id}/analytics/completed/grades',
        ...options
    });
};

/**
 * Get department-level statistics
 * Returns numeric statistics about the department and term (or filter).
 *
 * Shares the same variations on endpoint as the participation data.
 */
export const getDepartmentLevelStatisticsCompleted = <ThrowOnError extends boolean = false>(options: Options<GetDepartmentLevelStatisticsCompletedData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/accounts/{account_id}/analytics/completed/statistics',
        ...options
    });
};

/**
 * Get department-level participation data
 * Returns page view hits summed across all courses in the department. Two
 * groupings of these counts are returned; one by day (+by_date+), the other
 * by category (+by_category+). The possible categories are announcements,
 * assignments, collaborations, conferences, discussions, files, general,
 * grades, groups, modules, other, pages, and quizzes.
 *
 * This and the other department-level endpoints have three variations which
 * all return the same style of data but for different subsets of courses. All
 * share the prefix /api/v1/accounts/<account_id>/analytics. The possible
 * suffixes are:
 *
 * * /current: includes all available courses in the default term
 * * /completed: includes all concluded courses in the default term
 * * /terms/<term_id>: includes all available or concluded courses in the
 * given term.
 *
 * Courses not yet offered or which have been deleted are never included.
 *
 * /current and /completed are intended for use when the account has only one
 * term. /terms/<term_id> is intended for use when the account has multiple
 * terms.
 *
 * The action follows the suffix.
 */
export const getDepartmentLevelParticipationDataCurrent = <ThrowOnError extends boolean = false>(options: Options<GetDepartmentLevelParticipationDataCurrentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/accounts/{account_id}/analytics/current/activity',
        ...options
    });
};

/**
 * Get department-level grade data
 * Returns the distribution of grades for students in courses in the
 * department.  Each data point is one student's current grade in one course;
 * if a student is in multiple courses, he contributes one value per course,
 * but if he's enrolled multiple times in the same course (e.g. a lecture
 * section and a lab section), he only constributes on value for that course.
 *
 * Grades are binned to the nearest integer score; anomalous grades outside
 * the 0 to 100 range are ignored. The raw counts are returned, not yet
 * normalized by the total count.
 *
 * Shares the same variations on endpoint as the participation data.
 */
export const getDepartmentLevelGradeDataCurrent = <ThrowOnError extends boolean = false>(options: Options<GetDepartmentLevelGradeDataCurrentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/accounts/{account_id}/analytics/current/grades',
        ...options
    });
};

/**
 * Get department-level statistics
 * Returns numeric statistics about the department and term (or filter).
 *
 * Shares the same variations on endpoint as the participation data.
 */
export const getDepartmentLevelStatisticsCurrent = <ThrowOnError extends boolean = false>(options: Options<GetDepartmentLevelStatisticsCurrentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/accounts/{account_id}/analytics/current/statistics',
        ...options
    });
};

/**
 * Get department-level participation data
 * Returns page view hits summed across all courses in the department. Two
 * groupings of these counts are returned; one by day (+by_date+), the other
 * by category (+by_category+). The possible categories are announcements,
 * assignments, collaborations, conferences, discussions, files, general,
 * grades, groups, modules, other, pages, and quizzes.
 *
 * This and the other department-level endpoints have three variations which
 * all return the same style of data but for different subsets of courses. All
 * share the prefix /api/v1/accounts/<account_id>/analytics. The possible
 * suffixes are:
 *
 * * /current: includes all available courses in the default term
 * * /completed: includes all concluded courses in the default term
 * * /terms/<term_id>: includes all available or concluded courses in the
 * given term.
 *
 * Courses not yet offered or which have been deleted are never included.
 *
 * /current and /completed are intended for use when the account has only one
 * term. /terms/<term_id> is intended for use when the account has multiple
 * terms.
 *
 * The action follows the suffix.
 */
export const getDepartmentLevelParticipationDataTerms = <ThrowOnError extends boolean = false>(options: Options<GetDepartmentLevelParticipationDataTermsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/accounts/{account_id}/analytics/terms/{term_id}/activity',
        ...options
    });
};

/**
 * Get department-level grade data
 * Returns the distribution of grades for students in courses in the
 * department.  Each data point is one student's current grade in one course;
 * if a student is in multiple courses, he contributes one value per course,
 * but if he's enrolled multiple times in the same course (e.g. a lecture
 * section and a lab section), he only constributes on value for that course.
 *
 * Grades are binned to the nearest integer score; anomalous grades outside
 * the 0 to 100 range are ignored. The raw counts are returned, not yet
 * normalized by the total count.
 *
 * Shares the same variations on endpoint as the participation data.
 */
export const getDepartmentLevelGradeDataTerms = <ThrowOnError extends boolean = false>(options: Options<GetDepartmentLevelGradeDataTermsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/accounts/{account_id}/analytics/terms/{term_id}/grades',
        ...options
    });
};

/**
 * Get department-level statistics
 * Returns numeric statistics about the department and term (or filter).
 *
 * Shares the same variations on endpoint as the participation data.
 */
export const getDepartmentLevelStatisticsTerms = <ThrowOnError extends boolean = false>(options: Options<GetDepartmentLevelStatisticsTermsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/accounts/{account_id}/analytics/terms/{term_id}/statistics',
        ...options
    });
};

/**
 * List authentication providers
 * Returns a paginated list of authentication providers
 */
export const listAuthenticationProviders = <ThrowOnError extends boolean = false>(options: Options<ListAuthenticationProvidersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListAuthenticationProvidersResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/accounts/{account_id}/authentication_providers',
        ...options
    });
};

/**
 * Add authentication provider
 * Add external authentication provider(s) for the account.
 * Services may be CAS, Facebook, GitHub, Google, LDAP, LinkedIn,
 * Microsoft, OpenID Connect, SAML, or Twitter.
 *
 * Each authentication provider is specified as a set of parameters as
 * described below. A provider specification must include an 'auth_type'
 * parameter with a value of 'canvas', 'cas', 'clever', 'facebook', 'github', 'google',
 * 'ldap', 'linkedin', 'microsoft', 'openid_connect', 'saml', or 'twitter'. The other
 * recognized parameters depend on this auth_type; unrecognized parameters are discarded.
 * Provider specifications not specifying a valid auth_type are ignored.
 *
 * You can set the 'position' for any configuration. The config in the 1st position
 * is considered the default. You can set 'jit_provisioning' for any configuration
 * besides Canvas.
 *
 * For Canvas, the additional recognized parameter is:
 *
 * - self_registration
 *
 * 'all', 'none', or 'observer' - who is allowed to register as a new user
 *
 * For CAS, the additional recognized parameters are:
 *
 * - auth_base
 *
 * The CAS server's URL.
 *
 * - log_in_url [Optional]
 *
 * An alternate SSO URL for logging into CAS. You probably should not set
 * this.
 *
 * For Clever, the additional recognized parameters are:
 *
 * - client_id [Required]
 *
 * The Clever application's Client ID. Not available if configured globally
 * for Canvas.
 *
 * - client_secret [Required]
 *
 * The Clever application's Client Secret. Not available if configured
 * globally for Canvas.
 *
 * - district_id [Optional]
 *
 * A district's Clever ID. Leave this blank to let Clever handle the details
 * with its District Picker. This is required for Clever Instant Login to
 * work in a multi-tenant environment.
 *
 * - login_attribute [Optional]
 *
 * The attribute to use to look up the user's login in Canvas. Either
 * 'id' (the default), 'sis_id', 'email', 'student_number', or
 * 'teacher_number'. Note that some fields may not be populated for
 * all users at Clever.
 *
 * - federated_attributes [Optional]
 *
 * See FederatedAttributesConfig. Valid provider attributes are 'id',
 * 'sis_id', 'email', 'student_number', and 'teacher_number'.
 *
 * For Facebook, the additional recognized parameters are:
 *
 * - app_id [Required]
 *
 * The Facebook App ID. Not available if configured globally for Canvas.
 *
 * - app_secret [Required]
 *
 * The Facebook App Secret. Not available if configured globally for Canvas.
 *
 * - login_attribute [Optional]
 *
 * The attribute to use to look up the user's login in Canvas. Either
 * 'id' (the default), or 'email'
 *
 * - federated_attributes [Optional]
 *
 * See FederatedAttributesConfig. Valid provider attributes are 'email',
 * 'first_name', 'id', 'last_name', 'locale', and 'name'.
 *
 * For GitHub, the additional recognized parameters are:
 *
 * - domain [Optional]
 *
 * The domain of a GitHub Enterprise installation. I.e.
 * github.mycompany.com. If not set, it will default to the public
 * github.com.
 *
 * - client_id [Required]
 *
 * The GitHub application's Client ID. Not available if configured globally
 * for Canvas.
 *
 * - client_secret [Required]
 *
 * The GitHub application's Client Secret. Not available if configured
 * globally for Canvas.
 *
 * - login_attribute [Optional]
 *
 * The attribute to use to look up the user's login in Canvas. Either
 * 'id' (the default), or 'login'
 *
 * - federated_attributes [Optional]
 *
 * See FederatedAttributesConfig. Valid provider attributes are 'email',
 * 'id', 'login', and 'name'.
 *
 * For Google, the additional recognized parameters are:
 *
 * - client_id [Required]
 *
 * The Google application's Client ID. Not available if configured globally
 * for Canvas.
 *
 * - client_secret [Required]
 *
 * The Google application's Client Secret. Not available if configured
 * globally for Canvas.
 *
 * - hosted_domain [Optional]
 *
 * A Google Apps domain to restrict logins to. See
 * https://developers.google.com/identity/protocols/OpenIDConnect?hl=en#hd-param
 *
 * - login_attribute [Optional]
 *
 * The attribute to use to look up the user's login in Canvas. Either
 * 'sub' (the default), or 'email'
 *
 * - federated_attributes [Optional]
 *
 * See FederatedAttributesConfig. Valid provider attributes are 'email',
 * 'family_name', 'given_name', 'locale', 'name', and 'sub'.
 *
 * For LDAP, the additional recognized parameters are:
 *
 * - auth_host
 *
 * The LDAP server's URL.
 *
 * - auth_port [Optional, Integer]
 *
 * The LDAP server's TCP port. (default: 389)
 *
 * - auth_over_tls [Optional]
 *
 * Whether to use TLS. Can be 'simple_tls', or 'start_tls'. For backwards
 * compatibility, booleans are also accepted, with true meaning simple_tls.
 * If not provided, it will default to start_tls.
 *
 * - auth_base [Optional]
 *
 * A default treebase parameter for searches performed against the LDAP
 * server.
 *
 * - auth_filter
 *
 * LDAP search filter. Use !{{login}} as a placeholder for the username
 * supplied by the user. For example: "(sAMAccountName=!{{login}})".
 *
 * - identifier_format [Optional]
 *
 * The LDAP attribute to use to look up the Canvas login. Omit to use
 * the username supplied by the user.
 *
 * - auth_username
 *
 * Username
 *
 * - auth_password
 *
 * Password
 *
 * For LinkedIn, the additional recognized parameters are:
 *
 * - client_id [Required]
 *
 * The LinkedIn application's Client ID. Not available if configured globally
 * for Canvas.
 *
 * - client_secret [Required]
 *
 * The LinkedIn application's Client Secret. Not available if configured
 * globally for Canvas.
 *
 * - login_attribute [Optional]
 *
 * The attribute to use to look up the user's login in Canvas. Either
 * 'id' (the default), or 'emailAddress'
 *
 * - federated_attributes [Optional]
 *
 * See FederatedAttributesConfig. Valid provider attributes are 'emailAddress',
 * 'firstName', 'id', 'formattedName', and 'lastName'.
 *
 * For Microsoft, the additional recognized parameters are:
 *
 * - application_id [Required]
 *
 * The application's ID.
 *
 * - application_secret [Required]
 *
 * The application's Client Secret (Password)
 *
 * - tenant [Optional]
 *
 * See https://azure.microsoft.com/en-us/documentation/articles/active-directory-v2-protocols/
 * Valid values are 'common', 'organizations', 'consumers', or an Azure Active Directory Tenant
 * (as either a UUID or domain, such as contoso.onmicrosoft.com). Defaults to 'common'
 *
 * - login_attribute [Optional]
 *
 * See https://azure.microsoft.com/en-us/documentation/articles/active-directory-v2-tokens/#idtokens
 * Valid values are 'sub', 'email', 'oid', or 'preferred_username'. Note
 * that email may not always be populated in the user's profile at
 * Microsoft. Oid will not be populated for personal Microsoft accounts.
 * Defaults to 'sub'
 *
 * - federated_attributes [Optional]
 *
 * See FederatedAttributesConfig. Valid provider attributes are 'email',
 * 'name', 'preferred_username', 'oid', and 'sub'.
 *
 * For OpenID Connect, the additional recognized parameters are:
 *
 * - client_id [Required]
 *
 * The application's Client ID.
 *
 * - client_secret [Required]
 *
 * The application's Client Secret.
 *
 * - authorize_url [Required]
 *
 * The URL for getting starting the OAuth 2.0 web flow
 *
 * - token_url [Required]
 *
 * The URL for exchanging the OAuth 2.0 authorization code for an Access
 * Token and ID Token
 *
 * - scope [Optional]
 *
 * Space separated additional scopes to request for the token. Note that
 * you need not specify the 'openid' scope, or any scopes that can be
 * automatically inferred by the rules defined at
 * http://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims
 *
 * - end_session_endpoint [Optional]
 *
 * URL to send the end user to after logging out of Canvas. See
 * https://openid.net/specs/openid-connect-session-1_0.html#RPLogout
 *
 * - userinfo_endpoint [Optional]
 *
 * URL to request additional claims from. If the initial ID Token received
 * from the provider cannot be used to satisfy the login_attribute and
 * all federated_attributes, this endpoint will be queried for additional
 * information.
 *
 * - login_attribute [Optional]
 *
 * The attribute of the ID Token to look up the user's login in Canvas.
 * Defaults to 'sub'.
 *
 * - federated_attributes [Optional]
 *
 * See FederatedAttributesConfig. Any value is allowed for the provider
 * attribute names, but standard claims are listed at
 * http://openid.net/specs/openid-connect-core-1_0.html#StandardClaims
 *
 * For SAML, the additional recognized parameters are:
 *
 * - metadata [Optional]
 *
 * An XML document to parse as SAML metadata, and automatically populate idp_entity_id,
 * log_in_url, log_out_url, certificate_fingerprint, and identifier_format
 *
 * - metadata_uri [Optional]
 *
 * A URI to download the SAML metadata from, and automatically populate idp_entity_id,
 * log_in_url, log_out_url, certificate_fingerprint, and identifier_format. This URI
 * will also be saved, and the metadata periodically refreshed, automatically. If
 * the metadata contains multiple entities, also supply idp_entity_id to distinguish
 * which one you want (otherwise the only entity in the metadata will be inferred).
 * If you provide the URI 'urn:mace:incommon' or 'http://ukfederation.org.uk',
 * the InCommon or UK Access Management Federation metadata aggregate, respectively,
 * will be used instead, and additional validation checks will happen (including
 * validating that the metadata has been properly signed with the
 * appropriate key).
 *
 * - idp_entity_id
 *
 * The SAML IdP's entity ID
 *
 * - log_in_url
 *
 * The SAML service's SSO target URL
 *
 * - log_out_url [Optional]
 *
 * The SAML service's SLO target URL
 *
 * - certificate_fingerprint
 *
 * The SAML service's certificate fingerprint.
 *
 * - identifier_format
 *
 * The SAML service's identifier format. Must be one of:
 *
 * - urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress
 * - urn:oasis:names:tc:SAML:2.0:nameid-format:entity
 * - urn:oasis:names:tc:SAML:2.0:nameid-format:kerberos
 * - urn:oasis:names:tc:SAML:2.0:nameid-format:persistent
 * - urn:oasis:names:tc:SAML:2.0:nameid-format:transient
 * - urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified
 * - urn:oasis:names:tc:SAML:1.1:nameid-format:WindowsDomainQualifiedName
 * - urn:oasis:names:tc:SAML:1.1:nameid-format:X509SubjectName
 *
 * - requested_authn_context [Optional]
 *
 * The SAML AuthnContext
 *
 * - sig_alg [Optional]
 *
 * If set, +AuthnRequest+, +LogoutRequest+, and +LogoutResponse+ messages
 * are signed with the corresponding algorithm. Supported algorithms are:
 *
 * - {http://www.w3.org/2000/09/xmldsig#rsa-sha1}
 * - {http://www.w3.org/2001/04/xmldsig-more#rsa-sha256}
 *
 * RSA-SHA1 and RSA-SHA256 are acceptable aliases.
 *
 * - federated_attributes [Optional]
 *
 * See FederatedAttributesConfig. Any value is allowed for the provider attribute names.
 *
 * For Twitter, the additional recognized parameters are:
 *
 * - consumer_key [Required]
 *
 * The Twitter Consumer Key. Not available if configured globally for Canvas.
 *
 * - consumer_secret [Required]
 *
 * The Twitter Consumer Secret. Not available if configured globally for Canvas.
 *
 * - login_attribute [Optional]
 *
 * The attribute to use to look up the user's login in Canvas. Either
 * 'user_id' (the default), or 'screen_name'
 *
 * - parent_registration [Optional] - DEPRECATED 2017-11-03
 *
 * Accepts a boolean value, true designates the authentication service
 * for use on parent registrations.  Only one service can be selected
 * at a time so if set to true all others will be set to false
 *
 * - federated_attributes [Optional]
 *
 * See FederatedAttributesConfig. Valid provider attributes are 'name',
 * 'screen_name', 'time_zone', and 'user_id'.
 */
export const addAuthenticationProvider = <ThrowOnError extends boolean = false>(options: Options<AddAuthenticationProviderData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AddAuthenticationProviderResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/accounts/{account_id}/authentication_providers',
        ...options
    });
};

/**
 * Delete authentication provider
 * Delete the config
 */
export const deleteAuthenticationProvider = <ThrowOnError extends boolean = false>(options: Options<DeleteAuthenticationProviderData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/accounts/{account_id}/authentication_providers/{id}',
        ...options
    });
};

/**
 * Get authentication provider
 * Get the specified authentication provider
 */
export const getAuthenticationProvider = <ThrowOnError extends boolean = false>(options: Options<GetAuthenticationProviderData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetAuthenticationProviderResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/accounts/{account_id}/authentication_providers/{id}',
        ...options
    });
};

/**
 * Update authentication provider
 * Update an authentication provider using the same options as the create endpoint.
 * You can not update an existing provider to a new authentication type.
 */
export const updateAuthenticationProvider = <ThrowOnError extends boolean = false>(options: Options<UpdateAuthenticationProviderData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateAuthenticationProviderResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/accounts/{account_id}/authentication_providers/{id}',
        ...options
    });
};

/**
 * List content migrations
 * Returns paginated content migrations
 */
export const listContentMigrationsAccounts = <ThrowOnError extends boolean = false>(options: Options<ListContentMigrationsAccountsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListContentMigrationsAccountsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/accounts/{account_id}/content_migrations',
        ...options
    });
};

/**
 * Create a content migration
 * Create a content migration. If the migration requires a file to be uploaded
 * the actual processing of the file will start once the file upload process is completed.
 * File uploading works as described in the {file:file_uploads.html File Upload Documentation}
 * except that the values are set on a *pre_attachment* sub-hash.
 *
 * For migrations that don't require a file to be uploaded, like course copy, the
 * processing will begin as soon as the migration is created.
 *
 * You can use the {api:ProgressController#show Progress API} to track the
 * progress of the migration. The migration's progress is linked to with the
 * _progress_url_ value.
 *
 * The two general workflows are:
 *
 * If no file upload is needed:
 *
 * 1. POST to create
 * 2. Use the {api:ProgressController#show Progress} specified in _progress_url_ to monitor progress
 *
 * For file uploading:
 *
 * 1. POST to create with file info in *pre_attachment*
 * 2. Do {file:file_uploads.html file upload processing} using the data in the *pre_attachment* data
 * 3. {api:ContentMigrationsController#show GET} the ContentMigration
 * 4. Use the {api:ProgressController#show Progress} specified in _progress_url_ to monitor progress
 *
 * (required if doing .zip file upload)
 */
export const createContentMigrationAccounts = <ThrowOnError extends boolean = false>(options: Options<CreateContentMigrationAccountsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateContentMigrationAccountsResponse, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/accounts/{account_id}/content_migrations',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

/**
 * List Migration Systems
 * Lists the currently available migration types. These values may change.
 */
export const listMigrationSystemsAccounts = <ThrowOnError extends boolean = false>(options: Options<ListMigrationSystemsAccountsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListMigrationSystemsAccountsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/accounts/{account_id}/content_migrations/migrators',
        ...options
    });
};

/**
 * List migration issues
 * Returns paginated migration issues
 */
export const listMigrationIssuesAccounts = <ThrowOnError extends boolean = false>(options: Options<ListMigrationIssuesAccountsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListMigrationIssuesAccountsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/accounts/{account_id}/content_migrations/{content_migration_id}/migration_issues',
        ...options
    });
};

/**
 * Get a migration issue
 * Returns data on an individual migration issue
 */
export const getMigrationIssueAccounts = <ThrowOnError extends boolean = false>(options: Options<GetMigrationIssueAccountsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetMigrationIssueAccountsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/accounts/{account_id}/content_migrations/{content_migration_id}/migration_issues/{id}',
        ...options
    });
};

/**
 * Update a migration issue
 * Update the workflow_state of a migration issue
 */
export const updateMigrationIssueAccounts = <ThrowOnError extends boolean = false>(options: Options<UpdateMigrationIssueAccountsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateMigrationIssueAccountsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/accounts/{account_id}/content_migrations/{content_migration_id}/migration_issues/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get a content migration
 * Returns data on an individual content migration
 */
export const getContentMigrationAccounts = <ThrowOnError extends boolean = false>(options: Options<GetContentMigrationAccountsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetContentMigrationAccountsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/accounts/{account_id}/content_migrations/{id}',
        ...options
    });
};

/**
 * Update a content migration
 * Update a content migration. Takes same arguments as create except that you
 * can't change the migration type. However, changing most settings after the
 * migration process has started will not do anything. Generally updating the
 * content migration will be used when there is a file upload problem. If the
 * first upload has a problem you can supply new _pre_attachment_ values to
 * start the process again.
 */
export const updateContentMigrationAccounts = <ThrowOnError extends boolean = false>(options: Options<UpdateContentMigrationAccountsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateContentMigrationAccountsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/accounts/{account_id}/content_migrations/{id}',
        ...options
    });
};

/**
 * Retrieve a paginated list of courses in this account.
 */
export const getAllCoursesAccounts = <ThrowOnError extends boolean = false>(options: Options<GetAllCoursesAccountsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetAllCoursesAccountsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/accounts/{account_id}/courses',
        ...options
    });
};

/**
 * Create a new course
 * Create a new course
 */
export const createNewCourse = <ThrowOnError extends boolean = false>(options: Options<CreateNewCourseData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateNewCourseResponse, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/accounts/{account_id}/courses',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

/**
 * Update courses
 * Update multiple courses in an account.  Operates asynchronously; use the {api:ProgressController#show progress endpoint}
 * to query the status of an operation.
 *
 * The action to take on each course.  Must be one of 'offer', 'conclude', 'delete', or 'undelete'.
 * * 'offer' makes a course visible to students. This action is also called "publish" on the web site.
 * * 'conclude' prevents future enrollments and makes a course read-only for all participants. The course still appears
 * in prior-enrollment lists.
 * * 'delete' completely removes the course from the web site (including course menus and prior-enrollment lists).
 * All enrollments are deleted. Course content may be physically deleted at a future date.
 * * 'undelete' attempts to recover a course that has been deleted. (Recovery is not guaranteed; please conclude
 * rather than delete a course if there is any possibility the course will be used again.) The recovered course
 * will be unpublished. Deleted enrollments will not be recovered.
 */
export const updateCourses = <ThrowOnError extends boolean = false>(options: Options<UpdateCoursesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateCoursesResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/accounts/{account_id}/courses',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get a single course
 * Return information on a single course. Accepts the same include[] parameters as the list action plus:
 */
export const getSingleCourseAccounts = <ThrowOnError extends boolean = false>(options: Options<GetSingleCourseAccountsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetSingleCourseAccountsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/accounts/{account_id}/courses/{id}',
        ...options
    });
};

/**
 * Create Tool from ToolConfiguration
 * Creates context_external_tool from attached tool_configuration of
 * the provided developer_key if not already present in context.
 * DeveloperKey must have a ToolConfiguration to create tool or 404 will be raised.
 * Will return an existing ContextExternalTool if one already exists.
 */
export const createToolFromToolconfigurationAccounts = <ThrowOnError extends boolean = false>(options: Options<CreateToolFromToolconfigurationAccountsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateToolFromToolconfigurationAccountsResponse, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/accounts/{account_id}/developer_keys/{developer_key_id}/create_tool',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

/**
 * Enrollment by ID
 * Get an Enrollment object by Enrollment ID
 */
export const enrollmentById = <ThrowOnError extends boolean = false>(options: Options<EnrollmentByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<EnrollmentByIdResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/accounts/{account_id}/enrollments/{id}',
        ...options
    });
};

/**
 * List external tools
 * Returns the paginated list of external tools for the current context.
 * See the get request docs for a single tool for a list of properties on an external tool.
 */
export const listExternalToolsAccounts = <ThrowOnError extends boolean = false>(options: Options<ListExternalToolsAccountsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/accounts/{account_id}/external_tools',
        ...options
    });
};

/**
 * Create an external tool
 * Create an external tool in the specified course/account.
 * The created tool will be returned, see the "show" endpoint for an example.
 */
export const createExternalToolAccounts = <ThrowOnError extends boolean = false>(options: Options<CreateExternalToolAccountsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/accounts/{account_id}/external_tools',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

/**
 * Get a sessionless launch url for an external tool.
 * Returns a sessionless launch url for an external tool.
 *
 * NOTE: Either the id or url must be provided unless launch_type is assessment or module_item.
 */
export const getSessionlessLaunchUrlForExternalToolAccounts = <ThrowOnError extends boolean = false>(options: Options<GetSessionlessLaunchUrlForExternalToolAccountsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/accounts/{account_id}/external_tools/sessionless_launch',
        ...options
    });
};

/**
 * Delete an external tool
 * Remove the specified external tool
 */
export const deleteExternalToolAccounts = <ThrowOnError extends boolean = false>(options: Options<DeleteExternalToolAccountsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/accounts/{account_id}/external_tools/{external_tool_id}',
        ...options
    });
};

/**
 * Get a single external tool
 * Returns the specified external tool.
 */
export const getSingleExternalToolAccounts = <ThrowOnError extends boolean = false>(options: Options<GetSingleExternalToolAccountsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/accounts/{account_id}/external_tools/{external_tool_id}',
        ...options
    });
};

/**
 * Edit an external tool
 * Update the specified external tool. Uses same parameters as create
 */
export const editExternalToolAccounts = <ThrowOnError extends boolean = false>(options: Options<EditExternalToolAccountsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/accounts/{account_id}/external_tools/{external_tool_id}',
        ...options
    });
};

/**
 * List features
 * A paginated list of all features that apply to a given Account, Course, or User.
 */
export const listFeaturesAccounts = <ThrowOnError extends boolean = false>(options: Options<ListFeaturesAccountsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListFeaturesAccountsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/accounts/{account_id}/features',
        ...options
    });
};

/**
 * List enabled features
 * A paginated list of all features that are enabled on a given Account, Course, or User.
 * Only the feature names are returned.
 */
export const listEnabledFeaturesAccounts = <ThrowOnError extends boolean = false>(options: Options<ListEnabledFeaturesAccountsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/accounts/{account_id}/features/enabled',
        ...options
    });
};

/**
 * Remove feature flag
 * Remove feature flag for a given Account, Course, or User.  (Note that the flag must
 * be defined on the Account, Course, or User directly.)  The object will then inherit
 * the feature flags from a higher account, if any exist.  If this flag was 'on' or 'off',
 * then lower-level account flags that were masked by this one will apply again.
 */
export const removeFeatureFlagAccounts = <ThrowOnError extends boolean = false>(options: Options<RemoveFeatureFlagAccountsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<RemoveFeatureFlagAccountsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/accounts/{account_id}/features/flags/{feature}',
        ...options
    });
};

/**
 * Get feature flag
 * Get the feature flag that applies to a given Account, Course, or User.
 * The flag may be defined on the object, or it may be inherited from a parent
 * account. You can look at the context_id and context_type of the returned object
 * to determine which is the case. If these fields are missing, then the object
 * is the global Canvas default.
 */
export const getFeatureFlagAccounts = <ThrowOnError extends boolean = false>(options: Options<GetFeatureFlagAccountsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetFeatureFlagAccountsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/accounts/{account_id}/features/flags/{feature}',
        ...options
    });
};

/**
 * Set feature flag
 * Set a feature flag for a given Account, Course, or User. This call will fail if a parent account sets
 * a feature flag for the same feature in any state other than "allowed".
 */
export const setFeatureFlagAccounts = <ThrowOnError extends boolean = false>(options: Options<SetFeatureFlagAccountsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<SetFeatureFlagAccountsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/accounts/{account_id}/features/flags/{feature}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List grading periods
 * Returns the paginated list of grading periods for the current course.
 */
export const listGradingPeriodsAccounts = <ThrowOnError extends boolean = false>(options: Options<ListGradingPeriodsAccountsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListGradingPeriodsAccountsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/accounts/{account_id}/grading_periods',
        ...options
    });
};

/**
 * Delete a grading period
 * <b>204 No Content</b> response code is returned if the deletion was
 * successful.
 */
export const deleteGradingPeriodAccounts = <ThrowOnError extends boolean = false>(options: Options<DeleteGradingPeriodAccountsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/accounts/{account_id}/grading_periods/{id}',
        ...options
    });
};

/**
 * List the grading standards available in a context.
 * Returns the paginated list of grading standards for the given context that are visible to the user.
 */
export const listGradingStandardsAvailableInContextAccounts = <ThrowOnError extends boolean = false>(options: Options<ListGradingStandardsAvailableInContextAccountsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListGradingStandardsAvailableInContextAccountsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/accounts/{account_id}/grading_standards',
        ...options
    });
};

/**
 * Create a new grading standard
 * Create a new grading standard
 *
 * If grading_scheme_entry arguments are omitted, then a default grading scheme
 * will be set. The default scheme is as follows:
 * "A" : 94,
 * "A-" : 90,
 * "B+" : 87,
 * "B" : 84,
 * "B-" : 80,
 * "C+" : 77,
 * "C" : 74,
 * "C-" : 70,
 * "D+" : 67,
 * "D" : 64,
 * "D-" : 61,
 * "F" : 0,
 */
export const createNewGradingStandardAccounts = <ThrowOnError extends boolean = false>(options: Options<CreateNewGradingStandardAccountsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateNewGradingStandardAccountsResponse, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/accounts/{account_id}/grading_standards',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

/**
 * Get a single grading standard in a context.
 * Returns a grading standard for the given context that is visible to the user.
 */
export const getSingleGradingStandardInContextAccounts = <ThrowOnError extends boolean = false>(options: Options<GetSingleGradingStandardInContextAccountsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetSingleGradingStandardInContextAccountsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/accounts/{account_id}/grading_standards/{grading_standard_id}',
        ...options
    });
};

/**
 * List group categories for a context
 * Returns a paginated list of group categories in a context
 */
export const listGroupCategoriesForContextAccounts = <ThrowOnError extends boolean = false>(options: Options<ListGroupCategoriesForContextAccountsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListGroupCategoriesForContextAccountsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/accounts/{account_id}/group_categories',
        ...options
    });
};

/**
 * Create a Group Category
 * Create a new group category
 */
export const createGroupCategoryAccounts = <ThrowOnError extends boolean = false>(options: Options<CreateGroupCategoryAccountsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateGroupCategoryAccountsResponse, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/accounts/{account_id}/group_categories',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

/**
 * List the groups available in a context.
 * Returns the paginated list of active groups in the given context that are visible to user.
 */
export const listGroupsAvailableInContextAccounts = <ThrowOnError extends boolean = false>(options: Options<ListGroupsAvailableInContextAccountsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListGroupsAvailableInContextAccountsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/accounts/{account_id}/groups',
        ...options
    });
};

/**
 * Get help links
 * Returns the help links for that account
 */
export const getHelpLinks = <ThrowOnError extends boolean = false>(options: Options<GetHelpLinksData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetHelpLinksResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/accounts/{account_id}/help_links',
        ...options
    });
};

/**
 * List user logins
 * Given a user ID, return a paginated list of that user's logins for the given account.
 */
export const listUserLoginsAccounts = <ThrowOnError extends boolean = false>(options: Options<ListUserLoginsAccountsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/accounts/{account_id}/logins',
        ...options
    });
};

/**
 * Create a user login
 * Create a new login for an existing user in the given account.
 */
export const createUserLogin = <ThrowOnError extends boolean = false>(options: Options<CreateUserLoginData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/accounts/{account_id}/logins',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

/**
 * Edit a user login
 * Update an existing login for a user in the given account.
 */
export const editUserLogin = <ThrowOnError extends boolean = false>(options: Options<EditUserLoginData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/accounts/{account_id}/logins/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get all outcome links for context
 */
export const getAllOutcomeLinksForContextAccounts = <ThrowOnError extends boolean = false>(options: Options<GetAllOutcomeLinksForContextAccountsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetAllOutcomeLinksForContextAccountsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/accounts/{account_id}/outcome_group_links',
        ...options
    });
};

/**
 * Get all outcome groups for context
 */
export const getAllOutcomeGroupsForContextAccounts = <ThrowOnError extends boolean = false>(options: Options<GetAllOutcomeGroupsForContextAccountsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetAllOutcomeGroupsForContextAccountsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/accounts/{account_id}/outcome_groups',
        ...options
    });
};

/**
 * Delete an outcome group
 * Deleting an outcome group deletes descendant outcome groups and outcome
 * links. The linked outcomes themselves are only deleted if all links to the
 * outcome were deleted.
 *
 * Aligned outcomes cannot be deleted; as such, if all remaining links to an
 * aligned outcome are included in this group's descendants, the group
 * deletion will fail.
 */
export const deleteOutcomeGroupAccounts = <ThrowOnError extends boolean = false>(options: Options<DeleteOutcomeGroupAccountsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteOutcomeGroupAccountsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/accounts/{account_id}/outcome_groups/{id}',
        ...options
    });
};

/**
 * Show an outcome group
 */
export const showOutcomeGroupAccounts = <ThrowOnError extends boolean = false>(options: Options<ShowOutcomeGroupAccountsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ShowOutcomeGroupAccountsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/accounts/{account_id}/outcome_groups/{id}',
        ...options
    });
};

/**
 * Update an outcome group
 * Modify an existing outcome group. Fields not provided are left as is;
 * unrecognized fields are ignored.
 *
 * When changing the parent outcome group, the new parent group must belong to
 * the same context as this outcome group, and must not be a descendant of
 * this outcome group (i.e. no cycles allowed).
 */
export const updateOutcomeGroupAccounts = <ThrowOnError extends boolean = false>(options: Options<UpdateOutcomeGroupAccountsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateOutcomeGroupAccountsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/accounts/{account_id}/outcome_groups/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Import an outcome group
 * Creates a new subgroup of the outcome group with the same title and
 * description as the source group, then creates links in that new subgroup to
 * the same outcomes that are linked in the source group. Recurses on the
 * subgroups of the source group, importing them each in turn into the new
 * subgroup.
 *
 * Allows you to copy organizational structure, but does not create copies of
 * the outcomes themselves, only new links.
 *
 * The source group must be either global, from the same context as this
 * outcome group, or from an associated account. The source group cannot be
 * the root outcome group of its context.
 */
export const importOutcomeGroupAccounts = <ThrowOnError extends boolean = false>(options: Options<ImportOutcomeGroupAccountsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ImportOutcomeGroupAccountsResponse, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/accounts/{account_id}/outcome_groups/{id}/import',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

/**
 * List linked outcomes
 * A paginated list of the immediate OutcomeLink children of the outcome group.
 */
export const listLinkedOutcomesAccounts = <ThrowOnError extends boolean = false>(options: Options<ListLinkedOutcomesAccountsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListLinkedOutcomesAccountsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/accounts/{account_id}/outcome_groups/{id}/outcomes',
        ...options
    });
};

/**
 * Create/link an outcome
 * Link an outcome into the outcome group. The outcome to link can either be
 * specified by a PUT to the link URL for a specific outcome (the outcome_id
 * in the PUT URLs) or by supplying the information for a new outcome (title,
 * description, ratings, mastery_points) in a POST to the collection.
 *
 * If linking an existing outcome, the outcome_id must identify an outcome
 * available to this context; i.e. an outcome owned by this group's context,
 * an outcome owned by an associated account, or a global outcome. With
 * outcome_id present, any other parameters (except move_from) are ignored.
 *
 * If defining a new outcome, the outcome is created in the outcome group's
 * context using the provided title, description, ratings, and mastery points;
 * the title is required but all other fields are optional. The new outcome
 * is then linked into the outcome group.
 *
 * If ratings are provided when creating a new outcome, an embedded rubric
 * criterion is included in the new outcome. This criterion's mastery_points
 * default to the maximum points in the highest rating if not specified in the
 * mastery_points parameter. Any ratings lacking a description are given a
 * default of "No description". Any ratings lacking a point value are given a
 * default of 0. If no ratings are provided, the mastery_points parameter is
 * ignored.
 */
export const createLinkOutcomeAccounts = <ThrowOnError extends boolean = false>(options: Options<CreateLinkOutcomeAccountsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateLinkOutcomeAccountsResponse, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/accounts/{account_id}/outcome_groups/{id}/outcomes',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

/**
 * Unlink an outcome
 * Unlinking an outcome only deletes the outcome itself if this was the last
 * link to the outcome in any group in any context. Aligned outcomes cannot be
 * deleted; as such, if this is the last link to an aligned outcome, the
 * unlinking will fail.
 */
export const unlinkOutcomeAccounts = <ThrowOnError extends boolean = false>(options: Options<UnlinkOutcomeAccountsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<UnlinkOutcomeAccountsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/accounts/{account_id}/outcome_groups/{id}/outcomes/{outcome_id}',
        ...options
    });
};

/**
 * Create/link an outcome
 * Link an outcome into the outcome group. The outcome to link can either be
 * specified by a PUT to the link URL for a specific outcome (the outcome_id
 * in the PUT URLs) or by supplying the information for a new outcome (title,
 * description, ratings, mastery_points) in a POST to the collection.
 *
 * If linking an existing outcome, the outcome_id must identify an outcome
 * available to this context; i.e. an outcome owned by this group's context,
 * an outcome owned by an associated account, or a global outcome. With
 * outcome_id present, any other parameters (except move_from) are ignored.
 *
 * If defining a new outcome, the outcome is created in the outcome group's
 * context using the provided title, description, ratings, and mastery points;
 * the title is required but all other fields are optional. The new outcome
 * is then linked into the outcome group.
 *
 * If ratings are provided when creating a new outcome, an embedded rubric
 * criterion is included in the new outcome. This criterion's mastery_points
 * default to the maximum points in the highest rating if not specified in the
 * mastery_points parameter. Any ratings lacking a description are given a
 * default of "No description". Any ratings lacking a point value are given a
 * default of 0. If no ratings are provided, the mastery_points parameter is
 * ignored.
 */
export const createLinkOutcomeAccountsOutcomeId = <ThrowOnError extends boolean = false>(options: Options<CreateLinkOutcomeAccountsOutcomeIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<CreateLinkOutcomeAccountsOutcomeIdResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/accounts/{account_id}/outcome_groups/{id}/outcomes/{outcome_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List subgroups
 * A paginated list of the immediate OutcomeGroup children of the outcome group.
 */
export const listSubgroupsAccounts = <ThrowOnError extends boolean = false>(options: Options<ListSubgroupsAccountsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListSubgroupsAccountsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/accounts/{account_id}/outcome_groups/{id}/subgroups',
        ...options
    });
};

/**
 * Create a subgroup
 * Creates a new empty subgroup under the outcome group with the given title
 * and description.
 */
export const createSubgroupAccounts = <ThrowOnError extends boolean = false>(options: Options<CreateSubgroupAccountsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateSubgroupAccountsResponse, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/accounts/{account_id}/outcome_groups/{id}/subgroups',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

/**
 * Import Outcomes
 * Import outcomes into Canvas.
 *
 * For more information on the format that's expected here, please see the
 * "Outcomes CSV" section in the API docs.
 */
export const importOutcomesAccounts = <ThrowOnError extends boolean = false>(options: Options<ImportOutcomesAccountsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ImportOutcomesAccountsResponse, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/accounts/{account_id}/outcome_imports',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

/**
 * Get Outcome import status
 * Get the status of an already created Outcome import. Pass 'latest' for the outcome import id
 * for the latest import.
 *
 * Examples:
 * curl 'https://<canvas>/api/v1/accounts/<account_id>/outcome_imports/<outcome_import_id>' \
 * -H "Authorization: Bearer <token>"
 * curl 'https://<canvas>/api/v1/courses/<course_id>/outcome_imports/<outcome_import_id>' \
 * -H "Authorization: Bearer <token>"
 */
export const getOutcomeImportStatusAccounts = <ThrowOnError extends boolean = false>(options: Options<GetOutcomeImportStatusAccountsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetOutcomeImportStatusAccountsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/accounts/{account_id}/outcome_imports/{id}',
        ...options
    });
};

/**
 * Get proficiency ratings
 * Get account-level proficiency ratings. If not defined for this account,
 * it will return proficiency ratings for the nearest super-account with ratings defined.
 * Will return 404 if none found.
 *
 * Examples:
 * curl https://<canvas>/api/v1/accounts/<account_id>/outcome_proficiency \
 * -H 'Authorization: Bearer <token>'
 */
export const getProficiencyRatings = <ThrowOnError extends boolean = false>(options: Options<GetProficiencyRatingsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetProficiencyRatingsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/accounts/{account_id}/outcome_proficiency',
        ...options
    });
};

/**
 * Create/update proficiency ratings
 * Create or update account-level proficiency ratings. These ratings will apply to all
 * sub-accounts, unless they have their own account-level proficiency ratings defined.
 */
export const createUpdateProficiencyRatings = <ThrowOnError extends boolean = false>(options: Options<CreateUpdateProficiencyRatingsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateUpdateProficiencyRatingsResponse, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/accounts/{account_id}/outcome_proficiency',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

/**
 * Permissions
 * Returns permission information for the calling user and the given account.
 * You may use `self` as the account id to check permissions against the domain root account.
 * The caller must have an account role or admin (teacher/TA/designer) enrollment in a course
 * in the account.
 *
 * See also the {api:CoursesController#permissions Course} and {api:GroupsController#permissions Group}
 * counterparts.
 */
export const accountPermissions = <ThrowOnError extends boolean = false>(options: Options<AccountPermissionsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/accounts/{account_id}/permissions',
        ...options
    });
};

/**
 * List Available Reports
 * Returns a paginated list of reports for the current context.
 */
export const listAvailableReports = <ThrowOnError extends boolean = false>(options: Options<ListAvailableReportsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/accounts/{account_id}/reports',
        ...options
    });
};

/**
 * Index of Reports
 * Shows all reports that have been run for the account of a specific type.
 */
export const indexOfReports = <ThrowOnError extends boolean = false>(options: Options<IndexOfReportsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<IndexOfReportsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/accounts/{account_id}/reports/{report}',
        ...options
    });
};

/**
 * Start a Report
 * Generates a report instance for the account. Note that "report" in the
 * request must match one of the available report names. To fetch a list of
 * available report names and parameters for each report (including whether or
 * not those parameters are required), see
 * {api:AccountReportsController#available_reports List Available Reports}.
 */
export const startReport = <ThrowOnError extends boolean = false>(options: Options<StartReportData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<StartReportResponse, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/accounts/{account_id}/reports/{report}',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

/**
 * Delete a Report
 * Deletes a generated report instance.
 */
export const deleteReport = <ThrowOnError extends boolean = false>(options: Options<DeleteReportData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteReportResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/accounts/{account_id}/reports/{report}/{id}',
        ...options
    });
};

/**
 * Status of a Report
 * Returns the status of a report.
 */
export const statusOfReport = <ThrowOnError extends boolean = false>(options: Options<StatusOfReportData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<StatusOfReportResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/accounts/{account_id}/reports/{report}/{id}',
        ...options
    });
};

/**
 * List roles
 * A paginated list of the roles available to an account.
 */
export const listRoles = <ThrowOnError extends boolean = false>(options: Options<ListRolesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListRolesResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/accounts/{account_id}/roles',
        ...options
    });
};

/**
 * Create a new role
 * Create a new course-level or account-level role.
 */
export const createNewRole = <ThrowOnError extends boolean = false>(options: Options<CreateNewRoleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateNewRoleResponse, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/accounts/{account_id}/roles',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

/**
 * Deactivate a role
 * Deactivates a custom role.  This hides it in the user interface and prevents it
 * from being assigned to new users.  Existing users assigned to the role will
 * continue to function with the same permissions they had previously.
 * Built-in roles cannot be deactivated.
 */
export const deactivateRole = <ThrowOnError extends boolean = false>(options: Options<DeactivateRoleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeactivateRoleResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/accounts/{account_id}/roles/{id}',
        ...options
    });
};

/**
 * Get a single role
 * Retrieve information about a single role
 */
export const getSingleRole = <ThrowOnError extends boolean = false>(options: Options<GetSingleRoleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetSingleRoleResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/accounts/{account_id}/roles/{id}',
        ...options
    });
};

/**
 * Update a role
 * Update permissions for an existing role.
 *
 * Recognized roles are:
 * * TeacherEnrollment
 * * StudentEnrollment
 * * TaEnrollment
 * * ObserverEnrollment
 * * DesignerEnrollment
 * * AccountAdmin
 * * Any previously created custom role
 */
export const updateRole = <ThrowOnError extends boolean = false>(options: Options<UpdateRoleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateRoleResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/accounts/{account_id}/roles/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Activate a role
 * Re-activates an inactive role (allowing it to be assigned to new users)
 */
export const activateRole = <ThrowOnError extends boolean = false>(options: Options<ActivateRoleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ActivateRoleResponse, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/accounts/{account_id}/roles/{id}/activate',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

/**
 * Redirect to root outcome group for context
 * Convenience redirect to find the root outcome group for a particular
 * context. Will redirect to the appropriate outcome group's URL.
 */
export const redirectToRootOutcomeGroupForContextAccounts = <ThrowOnError extends boolean = false>(options: Options<RedirectToRootOutcomeGroupForContextAccountsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/accounts/{account_id}/root_outcome_group',
        ...options
    });
};

/**
 * List rubrics
 * Returns the paginated list of active rubrics for the current context.
 */
export const listRubricsAccounts = <ThrowOnError extends boolean = false>(options: Options<ListRubricsAccountsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListRubricsAccountsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/accounts/{account_id}/rubrics',
        ...options
    });
};

/**
 * Get a single rubric
 * Returns the rubric with the given id.
 */
export const getSingleRubricAccounts = <ThrowOnError extends boolean = false>(options: Options<GetSingleRubricAccountsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetSingleRubricAccountsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/accounts/{account_id}/rubrics/{id}',
        ...options
    });
};

/**
 * List scopes
 * A list of scopes that can be applied to developer keys and access tokens.
 */
export const listScopes = <ThrowOnError extends boolean = false>(options: Options<ListScopesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListScopesResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/accounts/{account_id}/scopes',
        ...options
    });
};

/**
 * Self register a user
 * Self register and return a new user and pseudonym for an account.
 *
 * If self-registration is enabled on the account, you can use this
 * endpoint to self register new users.
 */
export const selfRegisterUser = <ThrowOnError extends boolean = false>(options: Options<SelfRegisterUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SelfRegisterUserResponse, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/accounts/{account_id}/self_registration',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

/**
 * Share a BrandConfig (Theme)
 * Create a SharedBrandConfig, which will give the given brand_config a name
 * and make it available to other users of this account.
 */
export const shareBrandconfigTheme = <ThrowOnError extends boolean = false>(options: Options<ShareBrandconfigThemeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ShareBrandconfigThemeResponse, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/accounts/{account_id}/shared_brand_configs',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

/**
 * Update a shared theme
 * Update the specified shared_brand_config with a new name or to point to a new brand_config.
 * Uses same parameters as create.
 */
export const updateSharedTheme = <ThrowOnError extends boolean = false>(options: Options<UpdateSharedThemeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateSharedThemeResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/accounts/{account_id}/shared_brand_configs/{id}',
        ...options
    });
};

/**
 * Get SIS import error list
 * Returns the list of SIS import errors for an account or a SIS import. Import
 * errors are only stored for 30 days.
 *
 * Example:
 * curl 'https://<canvas>/api/v1/accounts/<account_id>/sis_imports/<id>/sis_import_errors' \
 * -H "Authorization: Bearer <token>"
 *
 * Example:
 * curl 'https://<canvas>/api/v1/accounts/<account_id>/sis_import_errors' \
 * -H "Authorization: Bearer <token>"
 */
export const getSisImportErrorListSisImportErrors = <ThrowOnError extends boolean = false>(options: Options<GetSisImportErrorListSisImportErrorsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetSisImportErrorListSisImportErrorsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/accounts/{account_id}/sis_import_errors',
        ...options
    });
};

/**
 * Get SIS import list
 * Returns the list of SIS imports for an account
 *
 * Example:
 * curl https://<canvas>/api/v1/accounts/<account_id>/sis_imports \
 * -H 'Authorization: Bearer <token>'
 */
export const getSisImportList = <ThrowOnError extends boolean = false>(options: Options<GetSisImportListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetSisImportListResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/accounts/{account_id}/sis_imports',
        ...options
    });
};

/**
 * Import SIS data
 * Import SIS data into Canvas. Must be on a root account with SIS imports
 * enabled.
 *
 * For more information on the format that's expected here, please see the
 * "SIS CSV" section in the API docs.
 */
export const importSisData = <ThrowOnError extends boolean = false>(options: Options<ImportSisDataData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ImportSisDataResponse, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/accounts/{account_id}/sis_imports',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

/**
 * Abort all pending SIS imports
 * Abort already created but not processed or processing SIS imports.
 */
export const abortAllPendingSisImports = <ThrowOnError extends boolean = false>(options: Options<AbortAllPendingSisImportsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<AbortAllPendingSisImportsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/accounts/{account_id}/sis_imports/abort_all_pending',
        ...options
    });
};

/**
 * Get SIS import status
 * Get the status of an already created SIS import.
 *
 * Examples:
 * curl https://<canvas>/api/v1/accounts/<account_id>/sis_imports/<sis_import_id> \
 * -H 'Authorization: Bearer <token>'
 */
export const getSisImportStatus = <ThrowOnError extends boolean = false>(options: Options<GetSisImportStatusData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetSisImportStatusResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/accounts/{account_id}/sis_imports/{id}',
        ...options
    });
};

/**
 * Abort SIS import
 * Abort a SIS import that has not completed.
 */
export const abortSisImport = <ThrowOnError extends boolean = false>(options: Options<AbortSisImportData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<AbortSisImportResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/accounts/{account_id}/sis_imports/{id}/abort',
        ...options
    });
};

/**
 * Get SIS import error list
 * Returns the list of SIS import errors for an account or a SIS import. Import
 * errors are only stored for 30 days.
 *
 * Example:
 * curl 'https://<canvas>/api/v1/accounts/<account_id>/sis_imports/<id>/sis_import_errors' \
 * -H "Authorization: Bearer <token>"
 *
 * Example:
 * curl 'https://<canvas>/api/v1/accounts/<account_id>/sis_import_errors' \
 * -H "Authorization: Bearer <token>"
 */
export const getSisImportErrorListSisImports = <ThrowOnError extends boolean = false>(options: Options<GetSisImportErrorListSisImportsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetSisImportErrorListSisImportsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/accounts/{account_id}/sis_imports/{id}/errors',
        ...options
    });
};

/**
 * Restore workflow_states of SIS imported items
 * This will restore the the workflow_state for all the items that changed
 * their workflow_state during the import being restored.
 * This will restore states for items imported with the following importers:
 * accounts.csv terms.csv courses.csv sections.csv group_categories.csv
 * groups.csv users.csv admins.csv
 * This also restores states for other items that changed during the import.
 * An example would be if an enrollment was deleted from a sis import and the
 * group_membership was also deleted as a result of the enrollment deletion,
 * both items would be restored when the sis batch is restored.
 */
export const restoreWorkflowStatesOfSisImportedItems = <ThrowOnError extends boolean = false>(options: Options<RestoreWorkflowStatesOfSisImportedItemsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<RestoreWorkflowStatesOfSisImportedItemsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/accounts/{account_id}/sis_imports/{id}/restore_states',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * show account auth settings
 * The way to get the current state of each account level setting
 * that's relevant to Single Sign On configuration
 *
 * You can list the current state of each setting with "update_sso_settings"
 */
export const showAccountAuthSettings = <ThrowOnError extends boolean = false>(options: Options<ShowAccountAuthSettingsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ShowAccountAuthSettingsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/accounts/{account_id}/sso_settings',
        ...options
    });
};

/**
 * update account auth settings
 * For various cases of mixed SSO configurations, you may need to set some
 * configuration at the account level to handle the particulars of your
 * setup.
 *
 * This endpoint accepts a PUT request to set several possible account
 * settings. All setting are optional on each request, any that are not
 * provided at all are simply retained as is.  Any that provide the key but
 * a null-ish value (blank string, null, undefined) will be UN-set.
 *
 * You can list the current state of each setting with "show_sso_settings"
 */
export const updateAccountAuthSettings = <ThrowOnError extends boolean = false>(options: Options<UpdateAccountAuthSettingsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateAccountAuthSettingsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/accounts/{account_id}/sso_settings',
        ...options
    });
};

/**
 * Get the sub-accounts of an account
 * List accounts that are sub-accounts of the given account.
 */
export const getSubAccountsOfAccount = <ThrowOnError extends boolean = false>(options: Options<GetSubAccountsOfAccountData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetSubAccountsOfAccountResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/accounts/{account_id}/sub_accounts',
        ...options
    });
};

/**
 * Create a new sub-account
 * Add a new sub-account to a given account.
 */
export const createNewSubAccount = <ThrowOnError extends boolean = false>(options: Options<CreateNewSubAccountData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateNewSubAccountResponse, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/accounts/{account_id}/sub_accounts',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

/**
 * Delete a sub-account
 * Cannot delete an account with active courses or active sub_accounts.
 * Cannot delete a root_account
 */
export const deleteSubAccount = <ThrowOnError extends boolean = false>(options: Options<DeleteSubAccountData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteSubAccountResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/accounts/{account_id}/sub_accounts/{id}',
        ...options
    });
};

/**
 * List enrollment terms
 * A paginated list of all of the terms in the account.
 */
export const listEnrollmentTerms = <ThrowOnError extends boolean = false>(options: Options<ListEnrollmentTermsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListEnrollmentTermsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/accounts/{account_id}/terms',
        ...options
    });
};

/**
 * Create enrollment term
 * Create a new enrollment term for the specified account.
 */
export const createEnrollmentTerm = <ThrowOnError extends boolean = false>(options: Options<CreateEnrollmentTermData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateEnrollmentTermResponse, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/accounts/{account_id}/terms',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

/**
 * Delete enrollment term
 * Delete the specified enrollment term.
 */
export const deleteEnrollmentTerm = <ThrowOnError extends boolean = false>(options: Options<DeleteEnrollmentTermData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteEnrollmentTermResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/accounts/{account_id}/terms/{id}',
        ...options
    });
};

/**
 * Update enrollment term
 * Update an existing enrollment term for the specified account.
 */
export const updateEnrollmentTerm = <ThrowOnError extends boolean = false>(options: Options<UpdateEnrollmentTermData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateEnrollmentTermResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/accounts/{account_id}/terms/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get the Terms of Service
 * Returns the terms of service for that account
 */
export const getTermsOfService = <ThrowOnError extends boolean = false>(options: Options<GetTermsOfServiceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetTermsOfServiceResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/accounts/{account_id}/terms_of_service',
        ...options
    });
};

/**
 * List users in account
 * A paginated list of of users associated with this account.
 *
 * @example_request
 * curl https://<canvas>/api/v1/accounts/self/users?search_term=<search value> \
 * -X GET \
 * -H 'Authorization: Bearer <token>'
 */
export const listUsersInAccount = <ThrowOnError extends boolean = false>(options: Options<ListUsersInAccountData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListUsersInAccountResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/accounts/{account_id}/users',
        ...options
    });
};

/**
 * Create a user
 * Create and return a new user and pseudonym for an account.
 *
 * If you don't have the "Modify login details for users" permission, but
 * self-registration is enabled on the account, you can still use this
 * endpoint to register new users. Certain fields will be required, and
 * others will be ignored (see below).
 */
export const createUser = <ThrowOnError extends boolean = false>(options: Options<CreateUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateUserResponse, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/accounts/{account_id}/users',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

/**
 * Delete a user from the root account
 * Delete a user record from a Canvas root account. If a user is associated
 * with multiple root accounts (in a multi-tenant instance of Canvas), this
 * action will NOT remove them from the other accounts.
 *
 * WARNING: This API will allow a user to remove themselves from the account.
 * If they do this, they won't be able to make API calls or log into Canvas at
 * that account.
 */
export const deleteUserFromRootAccount = <ThrowOnError extends boolean = false>(options: Options<DeleteUserFromRootAccountData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteUserFromRootAccountResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/accounts/{account_id}/users/{user_id}',
        ...options
    });
};

/**
 * Get a single account
 * Retrieve information on an individual account, given by id or sis
 * sis_account_id.
 */
export const getSingleAccount = <ThrowOnError extends boolean = false>(options: Options<GetSingleAccountData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetSingleAccountResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/accounts/{id}',
        ...options
    });
};

/**
 * Update an account
 * Update an existing account.
 */
export const updateAccount = <ThrowOnError extends boolean = false>(options: Options<UpdateAccountData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateAccountResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/accounts/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List announcements
 * Returns the paginated list of announcements for the given courses and date range.  Note that
 * a +context_code+ field is added to the responses so you can tell which course each announcement
 * belongs to.
 */
export const listAnnouncements = <ThrowOnError extends boolean = false>(options: Options<ListAnnouncementsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListAnnouncementsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/announcements',
        ...options
    });
};

/**
 * List appointment groups
 * Retrieve the paginated list of appointment groups that can be reserved or
 * managed by the current user.
 */
export const listAppointmentGroups = <ThrowOnError extends boolean = false>(options?: Options<ListAppointmentGroupsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/appointment_groups',
        ...options
    });
};

/**
 * Create an appointment group
 * Create and return a new appointment group. If new_appointments are
 * specified, the response will return a new_appointments array (same format
 * as appointments array, see "List appointment groups" action)
 */
export const createAppointmentGroup = <ThrowOnError extends boolean = false>(options: Options<CreateAppointmentGroupData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/appointment_groups',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

/**
 * Get next appointment
 * Return the next appointment available to sign up for. The appointment
 * is returned in a one-element array. If no future appointments are
 * available, an empty array is returned.
 */
export const getNextAppointment = <ThrowOnError extends boolean = false>(options?: Options<GetNextAppointmentData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetNextAppointmentResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/appointment_groups/next_appointment',
        ...options
    });
};

/**
 * Delete an appointment group
 * Delete an appointment group (and associated time slots and reservations)
 * and return the deleted group
 */
export const deleteAppointmentGroup = <ThrowOnError extends boolean = false>(options: Options<DeleteAppointmentGroupData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/appointment_groups/{id}',
        ...options
    });
};

/**
 * Get a single appointment group
 * Returns information for a single appointment group
 */
export const getSingleAppointmentGroup = <ThrowOnError extends boolean = false>(options: Options<GetSingleAppointmentGroupData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/appointment_groups/{id}',
        ...options
    });
};

/**
 * Update an appointment group
 * Update and return an appointment group. If new_appointments are specified,
 * the response will return a new_appointments array (same format as
 * appointments array, see "List appointment groups" action).
 */
export const updateAppointmentGroup = <ThrowOnError extends boolean = false>(options: Options<UpdateAppointmentGroupData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/appointment_groups/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List student group participants
 * A paginated list of student groups that are (or may be) participating in
 * this appointment group. Refer to the Groups API for the response fields.
 * Returns no results for appointment groups with the "User" participant_type.
 */
export const listStudentGroupParticipants = <ThrowOnError extends boolean = false>(options: Options<ListStudentGroupParticipantsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/appointment_groups/{id}/groups',
        ...options
    });
};

/**
 * List user participants
 * A paginated list of users that are (or may be) participating in this
 * appointment group.  Refer to the Users API for the response fields. Returns
 * no results for appointment groups with the "Group" participant_type.
 */
export const listUserParticipants = <ThrowOnError extends boolean = false>(options: Options<ListUserParticipantsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/appointment_groups/{id}/users',
        ...options
    });
};

/**
 * Query by account.
 * List authentication events for a given account.
 */
export const queryByAccount = <ThrowOnError extends boolean = false>(options: Options<QueryByAccountData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/audit/authentication/accounts/{account_id}',
        ...options
    });
};

/**
 * Query by login.
 * List authentication events for a given login.
 */
export const queryByLogin = <ThrowOnError extends boolean = false>(options: Options<QueryByLoginData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/audit/authentication/logins/{login_id}',
        ...options
    });
};

/**
 * Query by user.
 * List authentication events for a given user.
 */
export const queryByUser = <ThrowOnError extends boolean = false>(options: Options<QueryByUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/audit/authentication/users/{user_id}',
        ...options
    });
};

/**
 * Query by course.
 * List course change events for a given course.
 */
export const queryByCourse = <ThrowOnError extends boolean = false>(options: Options<QueryByCourseData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<QueryByCourseResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/audit/course/courses/{course_id}',
        ...options
    });
};

/**
 * Query by assignment.
 * List grade change events for a given assignment.
 */
export const queryByAssignment = <ThrowOnError extends boolean = false>(options: Options<QueryByAssignmentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<QueryByAssignmentResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/audit/grade_change/assignments/{assignment_id}',
        ...options
    });
};

/**
 * Query by course.
 * List grade change events for a given course.
 */
export const queryByCourseGradeChange = <ThrowOnError extends boolean = false>(options: Options<QueryByCourseGradeChangeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<QueryByCourseGradeChangeResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/audit/grade_change/courses/{course_id}',
        ...options
    });
};

/**
 * Query by grader.
 * List grade change events for a given grader.
 */
export const queryByGrader = <ThrowOnError extends boolean = false>(options: Options<QueryByGraderData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<QueryByGraderResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/audit/grade_change/graders/{grader_id}',
        ...options
    });
};

/**
 * Query by student.
 * List grade change events for a given student.
 */
export const queryByStudent = <ThrowOnError extends boolean = false>(options: Options<QueryByStudentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<QueryByStudentResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/audit/grade_change/students/{student_id}',
        ...options
    });
};

/**
 * Get the brand config variables that should be used for this domain
 * Will redirect to a static json file that has all of the brand
 * variables used by this account. Even though this is a redirect,
 * do not store the redirected url since if the account makes any changes
 * it will redirect to a new url. Needs no authentication.
 */
export const getBrandConfigVariablesThatShouldBeUsedForThisDomain = <ThrowOnError extends boolean = false>(options?: Options<GetBrandConfigVariablesThatShouldBeUsedForThisDomainData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/brand_variables',
        ...options
    });
};

/**
 * List calendar events
 * Retrieve the paginated list of calendar events or assignments for the current user
 */
export const listCalendarEvents = <ThrowOnError extends boolean = false>(options?: Options<ListCalendarEventsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListCalendarEventsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/calendar_events',
        ...options
    });
};

/**
 * Create a calendar event
 * Create and return a new calendar event
 */
export const createCalendarEvent = <ThrowOnError extends boolean = false>(options: Options<CreateCalendarEventData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/calendar_events',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

/**
 * Delete a calendar event
 * Delete an event from the calendar and return the deleted event
 */
export const deleteCalendarEvent = <ThrowOnError extends boolean = false>(options: Options<DeleteCalendarEventData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/calendar_events/{id}',
        ...options
    });
};

/**
 * Get a single calendar event or assignment
 */
export const getSingleCalendarEventOrAssignment = <ThrowOnError extends boolean = false>(options: Options<GetSingleCalendarEventOrAssignmentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetSingleCalendarEventOrAssignmentResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/calendar_events/{id}',
        ...options
    });
};

/**
 * Update a calendar event
 * Update and return a calendar event
 */
export const updateCalendarEvent = <ThrowOnError extends boolean = false>(options: Options<UpdateCalendarEventData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/calendar_events/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Reserve a time slot
 * Reserves a particular time slot and return the new reservation
 */
export const reserveTimeSlot = <ThrowOnError extends boolean = false>(options: Options<ReserveTimeSlotData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/calendar_events/{id}/reservations',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

/**
 * Reserve a time slot
 * Reserves a particular time slot and return the new reservation
 */
export const reserveTimeSlotParticipantId = <ThrowOnError extends boolean = false>(options: Options<ReserveTimeSlotParticipantIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/calendar_events/{id}/reservations/{participant_id}',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

/**
 * List members of a collaboration.
 * A paginated list of the collaborators of a given collaboration
 */
export const listMembersOfCollaboration = <ThrowOnError extends boolean = false>(options: Options<ListMembersOfCollaborationData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListMembersOfCollaborationResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/collaborations/{id}/members',
        ...options
    });
};

/**
 * List of CommMessages for a user
 * Retrieve a paginated list of messages sent to a user.
 */
export const listOfCommmessagesForUser = <ThrowOnError extends boolean = false>(options: Options<ListOfCommmessagesForUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListOfCommmessagesForUserResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/comm_messages',
        ...options
    });
};

/**
 * List conversations
 * Returns the paginated list of conversations for the current user, most
 * recent ones first.
 */
export const listConversations = <ThrowOnError extends boolean = false>(options?: Options<ListConversationsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListConversationsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/conversations',
        ...options
    });
};

/**
 * Create a conversation
 * Create a new conversation with one or more recipients. If there is already
 * an existing private conversation with the given recipients, it will be
 * reused.
 */
export const createConversation = <ThrowOnError extends boolean = false>(options: Options<CreateConversationData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/conversations',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

/**
 * Batch update conversations
 * Perform a change on a set of conversations. Operates asynchronously; use the {api:ProgressController#show progress endpoint}
 * to query the status of an operation.
 */
export const batchUpdateConversations = <ThrowOnError extends boolean = false>(options: Options<BatchUpdateConversationsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<BatchUpdateConversationsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/conversations',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get running batches
 * Returns any currently running conversation batches for the current user.
 * Conversation batches are created when a bulk private message is sent
 * asynchronously (see the mode argument to the {api:ConversationsController#create create API action}).
 */
export const getRunningBatches = <ThrowOnError extends boolean = false>(options?: Options<GetRunningBatchesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/conversations/batches',
        ...options
    });
};

/**
 * Find recipients
 * Find valid recipients (users, courses and groups) that the current user
 * can send messages to. The /api/v1/search/recipients path is the preferred
 * endpoint, /api/v1/conversations/find_recipients is deprecated.
 *
 * Pagination is supported.
 */
export const findRecipientsConversations = <ThrowOnError extends boolean = false>(options?: Options<FindRecipientsConversationsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/conversations/find_recipients',
        ...options
    });
};

/**
 * Mark all as read
 * Mark all conversations as read.
 */
export const markAllAsRead = <ThrowOnError extends boolean = false>(options?: Options<MarkAllAsReadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/conversations/mark_all_as_read',
        ...options
    });
};

/**
 * Unread count
 * Get the number of unread conversations for the current user
 */
export const unreadCount = <ThrowOnError extends boolean = false>(options?: Options<UnreadCountData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/conversations/unread_count',
        ...options
    });
};

/**
 * Delete a conversation
 * Delete this conversation and its messages. Note that this only deletes
 * this user's view of the conversation.
 *
 * Response includes same fields as UPDATE action
 */
export const deleteConversation = <ThrowOnError extends boolean = false>(options: Options<DeleteConversationData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/conversations/{id}',
        ...options
    });
};

/**
 * Get a single conversation
 * Returns information for a single conversation for the current user. Response includes all
 * fields that are present in the list/index action as well as messages
 * and extended participant information.
 */
export const getSingleConversation = <ThrowOnError extends boolean = false>(options: Options<GetSingleConversationData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/conversations/{id}',
        ...options
    });
};

/**
 * Edit a conversation
 * Updates attributes for a single conversation.
 */
export const editConversation = <ThrowOnError extends boolean = false>(options: Options<EditConversationData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/conversations/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Add a message
 * Add a message to an existing conversation. Response is similar to the
 * GET/show action, except that only includes the
 * latest message (i.e. what we just sent)
 *
 * An array of user ids. Defaults to all of the current conversation
 * recipients. To explicitly send a message to no other recipients,
 * this array should consist of the logged-in user id.
 *
 * An array of message ids from this conversation to send to recipients
 * of the new message. Recipients who already had a copy of included
 * messages will not be affected.
 */
export const addMessage = <ThrowOnError extends boolean = false>(options: Options<AddMessageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/conversations/{id}/add_message',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

/**
 * Add recipients
 * Add recipients to an existing group conversation. Response is similar to
 * the GET/show action, except that only includes the
 * latest message (e.g. "joe was added to the conversation by bob")
 */
export const addRecipients = <ThrowOnError extends boolean = false>(options: Options<AddRecipientsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/conversations/{id}/add_recipients',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

/**
 * Delete a message
 * Delete messages from this conversation. Note that this only affects this
 * user's view of the conversation. If all messages are deleted, the
 * conversation will be as well (equivalent to DELETE)
 */
export const deleteMessage = <ThrowOnError extends boolean = false>(options: Options<DeleteMessageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/conversations/{id}/remove_messages',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

/**
 * List accounts for course admins
 * A paginated list of accounts that the current user can view through their
 * admin course enrollments. (Teacher, TA, or designer enrollments).
 * Only returns "id", "name", "workflow_state", "root_account_id" and "parent_account_id"
 */
export const listAccountsForCourseAdmins = <ThrowOnError extends boolean = false>(options?: Options<ListAccountsForCourseAdminsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListAccountsForCourseAdminsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/course_accounts',
        ...options
    });
};

import JSONbig from 'json-bigint';

/**
 * List your courses
 * Returns the paginated list of active courses for the current user.
 */
export const listYourCourses = <ThrowOnError extends boolean = false>(options?: Options<ListYourCoursesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListYourCoursesResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },

        url: '/v1/courses',
        transformResponse: (raw: string) =>
            JSONbig({ storeAsString: true }).parse(raw),
        ...options
    });
};

/**
 * Course activity stream
 * Returns the current user's course-specific activity stream, paginated.
 *
 * For full documentation, see the API documentation for the user activity
 * stream, in the user api.
 */
export const courseActivityStream = <ThrowOnError extends boolean = false>(options: Options<CourseActivityStreamData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/activity_stream',
        ...options
    });
};

/**
 * Course activity stream summary
 * Returns a summary of the current user's course-specific activity stream.
 *
 * For full documentation, see the API documentation for the user activity
 * stream summary, in the user api.
 */
export const courseActivityStreamSummary = <ThrowOnError extends boolean = false>(options: Options<CourseActivityStreamSummaryData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/activity_stream/summary',
        ...options
    });
};

/**
 * Get course-level participation data
 * Returns page view hits and participation numbers grouped by day through the
 * entire history of the course. Page views is returned as a hash, where the
 * hash keys are dates in the format "YYYY-MM-DD". The page_views result set
 * includes page views broken out by access category. Participations is
 * returned as an array of dates in the format "YYYY-MM-DD".
 */
export const getCourseLevelParticipationData = <ThrowOnError extends boolean = false>(options: Options<GetCourseLevelParticipationDataData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/analytics/activity',
        ...options
    });
};

/**
 * Get course-level assignment data
 * Returns a list of assignments for the course sorted by due date. For
 * each assignment returns basic assignment information, the grade breakdown,
 * and a breakdown of on-time/late status of homework submissions.
 */
export const getCourseLevelAssignmentData = <ThrowOnError extends boolean = false>(options: Options<GetCourseLevelAssignmentDataData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/analytics/assignments',
        ...options
    });
};

/**
 * Get course-level student summary data
 * Returns a summary of per-user access information for all students in
 * a course. This includes total page views, total participations, and a
 * breakdown of on-time/late status for all homework submissions in the course.
 *
 * Each student's summary also includes the maximum number of page views and
 * participations by any student in the course, which may be useful for some
 * visualizations (since determining maximums client side can be tricky with
 * pagination).
 */
export const getCourseLevelStudentSummaryData = <ThrowOnError extends boolean = false>(options: Options<GetCourseLevelStudentSummaryDataData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/analytics/student_summaries',
        ...options
    });
};

/**
 * Get user-in-a-course-level participation data
 * Returns page view hits grouped by hour, and participation details through the
 * entire history of the course.
 *
 * `page_views` are returned as a hash, where the keys are iso8601 dates, bucketed by the hour.
 * `participations` are returned as an array of hashes, sorted oldest to newest.
 */
export const getUserInACourseLevelParticipationData = <ThrowOnError extends boolean = false>(options: Options<GetUserInACourseLevelParticipationDataData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/analytics/users/{student_id}/activity',
        ...options
    });
};

/**
 * Get user-in-a-course-level assignment data
 * Returns a list of assignments for the course sorted by due date. For
 * each assignment returns basic assignment information, the grade breakdown
 * (including the student's actual grade), and the basic submission
 * information for the student's submission if it exists.
 */
export const getUserInACourseLevelAssignmentData = <ThrowOnError extends boolean = false>(options: Options<GetUserInACourseLevelAssignmentDataData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetUserInACourseLevelAssignmentDataResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/analytics/users/{student_id}/assignments',
        ...options
    });
};

/**
 * Get user-in-a-course-level messaging data
 * Returns messaging "hits" grouped by day through the entire history of the
 * course. Returns a hash containing the number of instructor-to-student messages,
 * and student-to-instructor messages, where the hash keys are dates
 * in the format "YYYY-MM-DD". Message hits include Conversation messages and
 * comments on homework submissions.
 */
export const getUserInACourseLevelMessagingData = <ThrowOnError extends boolean = false>(options: Options<GetUserInACourseLevelMessagingDataData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/analytics/users/{student_id}/communication',
        ...options
    });
};

/**
 * List assignment groups
 * Returns the paginated list of assignment groups for the current context.
 * The returned groups are sorted by their position field.
 */
export const listAssignmentGroups = <ThrowOnError extends boolean = false>(options: Options<ListAssignmentGroupsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListAssignmentGroupsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/courses/{course_id}/assignment_groups',
        ...options
    });
};

/**
 * Create an Assignment Group
 * Create a new assignment group for this course.
 */
export const createAssignmentGroup = <ThrowOnError extends boolean = false>(options: Options<CreateAssignmentGroupData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateAssignmentGroupResponse, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/assignment_groups',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

/**
 * Destroy an Assignment Group
 * Deletes the assignment group with the given id.
 */
export const destroyAssignmentGroup = <ThrowOnError extends boolean = false>(options: Options<DestroyAssignmentGroupData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DestroyAssignmentGroupResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/assignment_groups/{assignment_group_id}',
        ...options
    });
};

/**
 * Get an Assignment Group
 * Returns the assignment group with the given id.
 */
export const getAssignmentGroup = <ThrowOnError extends boolean = false>(options: Options<GetAssignmentGroupData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetAssignmentGroupResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/courses/{course_id}/assignment_groups/{assignment_group_id}',
        ...options
    });
};

/**
 * Edit an Assignment Group
 * Modify an existing Assignment Group.
 * Accepts the same parameters as Assignment Group creation
 */
export const editAssignmentGroup = <ThrowOnError extends boolean = false>(options: Options<EditAssignmentGroupData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<EditAssignmentGroupResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/assignment_groups/{assignment_group_id}',
        ...options
    });
};

/**
 * List assignments
 * Returns the paginated list of assignments for the current context.
 */
export const listAssignments = <ThrowOnError extends boolean = false>(options: Options<ListAssignmentsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListAssignmentsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/courses/{course_id}/assignments',
        ...options
    });
};


// /**
//  * List Assignment IDs
//  * Returns a paginated list of assignment IDs for the current context.  
//  */
// export const listAssignmentIDs = <ThrowOnError extends boolean = false>(options: Options<ListAssignmentsData, ThrowOnError>) => {
//     return (options.client ?? _heyApiClient).get<ListAssignmentsResponse, unknown, ThrowOnError>({
//         security: [
//             {
//                 scheme: 'bearer',
//                 type: 'http'
//             }
//         ],
//         querySerializer: {
//             array: {
//                 explode: false,
//                 style: 'form'
//             }
//         },
//         url: '/v1/courses/{course_id}/assignments',
//         transformResponse: (raw: string) =>
//             JSONbig({ storeAsString: true }).parse(raw),
//         ...options
//     });
// };

/**
 * Create an assignment
 * Create a new assignment for this course. The assignment is created in the
 * active state.
 */
export const createAssignment = <ThrowOnError extends boolean = false>(options: Options<CreateAssignmentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateAssignmentResponse, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/assignments',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

/**
 * List multiple assignments gradeable students
 * A paginated list of students eligible to submit a list of assignments. The caller must have
 * permission to view grades for the requested course.
 *
 * Section-limited instructors will only see students in their own sections.
 */
export const listMultipleAssignmentsGradeableStudents = <ThrowOnError extends boolean = false>(options: Options<ListMultipleAssignmentsGradeableStudentsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/courses/{course_id}/assignments/gradeable_students',
        ...options
    });
};

/**
 * Batch retrieve overrides in a course
 * Returns a list of specified overrides in this course, providing
 * they target sections/groups/students visible to the current user.
 * Returns null elements in the list for requests that were not found.
 */
export const batchRetrieveOverridesInCourse = <ThrowOnError extends boolean = false>(options: Options<BatchRetrieveOverridesInCourseData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<BatchRetrieveOverridesInCourseResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/courses/{course_id}/assignments/overrides',
        ...options
    });
};

/**
 * Batch create overrides in a course
 * Creates the specified overrides for each assignment.  Handles creation in a
 * transaction, so all records are created or none are.
 *
 * One of student_ids, group_id, or course_section_id must be present. At most
 * one should be present; if multiple are present only the most specific
 * (student_ids first, then group_id, then course_section_id) is used and any
 * others are ignored.
 *
 * Errors are reported in an errors attribute, an array of errors corresponding
 * to inputs.  Global errors will be reported as a single element errors array
 */
export const batchCreateOverridesInCourse = <ThrowOnError extends boolean = false>(options: Options<BatchCreateOverridesInCourseData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<BatchCreateOverridesInCourseResponse, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/assignments/overrides',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

/**
 * Batch update overrides in a course
 * Updates a list of specified overrides for each assignment.  Handles overrides
 * in a transaction, so either all updates are applied or none.
 * See {api:AssignmentOverridesController#update Update an assignment override} for
 * available attributes.
 *
 * All current overridden values must be supplied if they are to be retained;
 * e.g. if due_at was overridden, but this PUT omits a value for due_at,
 * due_at will no longer be overridden. If the override is adhoc and
 * student_ids is not supplied, the target override set is unchanged. Target
 * override sets cannot be changed for group or section overrides.
 *
 * Errors are reported in an errors attribute, an array of errors corresponding
 * to inputs.  Global errors will be reported as a single element errors array
 */
export const batchUpdateOverridesInCourse = <ThrowOnError extends boolean = false>(options: Options<BatchUpdateOverridesInCourseData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<BatchUpdateOverridesInCourseResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/assignments/overrides',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Show provisional grade status for a student
 * Determine whether or not the student's submission needs one or more provisional grades.
 */
export const showProvisionalGradeStatusForStudentAnonymous = <ThrowOnError extends boolean = false>(options: Options<ShowProvisionalGradeStatusForStudentAnonymousData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/assignments/{assignment_id}/anonymous_provisional_grades/status',
        ...options
    });
};

/**
 * List gradeable students
 * A paginated list of students eligible to submit the assignment. The caller must have permission to view grades.
 *
 * Section-limited instructors will only see students in their own sections.
 *
 * returns [UserDisplay]
 */
export const listGradeableStudents = <ThrowOnError extends boolean = false>(options: Options<ListGradeableStudentsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListGradeableStudentsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/assignments/{assignment_id}/gradeable_students',
        ...options
    });
};

/**
 * List students selected for moderation
 * Returns a paginated list of students selected for moderation
 */
export const listStudentsSelectedForModeration = <ThrowOnError extends boolean = false>(options: Options<ListStudentsSelectedForModerationData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListStudentsSelectedForModerationResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/assignments/{assignment_id}/moderated_students',
        ...options
    });
};

/**
 * Select students for moderation
 * Returns an array of users that were selected for moderation
 */
export const selectStudentsForModeration = <ThrowOnError extends boolean = false>(options: Options<SelectStudentsForModerationData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SelectStudentsForModerationResponse, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/assignments/{assignment_id}/moderated_students',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

/**
 * List assignment overrides
 * Returns the paginated list of overrides for this assignment that target
 * sections/groups/students visible to the current user.
 */
export const listAssignmentOverrides = <ThrowOnError extends boolean = false>(options: Options<ListAssignmentOverridesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListAssignmentOverridesResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/assignments/{assignment_id}/overrides',
        ...options
    });
};

/**
 * Create an assignment override
 * One of student_ids, group_id, or course_section_id must be present. At most
 * one should be present; if multiple are present only the most specific
 * (student_ids first, then group_id, then course_section_id) is used and any
 * others are ignored.
 */
export const createAssignmentOverride = <ThrowOnError extends boolean = false>(options: Options<CreateAssignmentOverrideData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateAssignmentOverrideResponse, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/assignments/{assignment_id}/overrides',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

/**
 * Delete an assignment override
 * Deletes an override and returns its former details.
 */
export const deleteAssignmentOverride = <ThrowOnError extends boolean = false>(options: Options<DeleteAssignmentOverrideData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteAssignmentOverrideResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/assignments/{assignment_id}/overrides/{id}',
        ...options
    });
};

/**
 * Get a single assignment override
 * Returns details of the the override with the given id.
 */
export const getSingleAssignmentOverride = <ThrowOnError extends boolean = false>(options: Options<GetSingleAssignmentOverrideData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetSingleAssignmentOverrideResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/assignments/{assignment_id}/overrides/{id}',
        ...options
    });
};

/**
 * Update an assignment override
 * All current overridden values must be supplied if they are to be retained;
 * e.g. if due_at was overridden, but this PUT omits a value for due_at,
 * due_at will no longer be overridden. If the override is adhoc and
 * student_ids is not supplied, the target override set is unchanged. Target
 * override sets cannot be changed for group or section overrides.
 */
export const updateAssignmentOverride = <ThrowOnError extends boolean = false>(options: Options<UpdateAssignmentOverrideData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateAssignmentOverrideResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/assignments/{assignment_id}/overrides/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get all Peer Reviews
 * Get a list of all Peer Reviews for this assignment
 */
export const getAllPeerReviewsCoursesPeerReviews = <ThrowOnError extends boolean = false>(options: Options<GetAllPeerReviewsCoursesPeerReviewsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetAllPeerReviewsCoursesPeerReviewsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/courses/{course_id}/assignments/{assignment_id}/peer_reviews',
        ...options
    });
};

/**
 * Bulk select provisional grades
 * Choose which provisional grades will be received by associated students for an assignment.
 * The caller must be the final grader for the assignment or an admin with :select_final_grade rights.
 */
export const bulkSelectProvisionalGrades = <ThrowOnError extends boolean = false>(options: Options<BulkSelectProvisionalGradesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/assignments/{assignment_id}/provisional_grades/bulk_select',
        ...options
    });
};

/**
 * Publish provisional grades for an assignment
 * Publish the selected provisional grade for all submissions to an assignment.
 * Use the "Select provisional grade" endpoint to choose which provisional grade to publish
 * for a particular submission.
 *
 * Students not in the moderation set will have their one and only provisional grade published.
 *
 * WARNING: This is irreversible. This will overwrite existing grades in the gradebook.
 */
export const publishProvisionalGradesForAssignment = <ThrowOnError extends boolean = false>(options: Options<PublishProvisionalGradesForAssignmentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/assignments/{assignment_id}/provisional_grades/publish',
        ...options
    });
};

/**
 * Show provisional grade status for a student
 * Tell whether the student's submission needs one or more provisional grades.
 */
export const showProvisionalGradeStatusForStudent = <ThrowOnError extends boolean = false>(options: Options<ShowProvisionalGradeStatusForStudentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/assignments/{assignment_id}/provisional_grades/status',
        ...options
    });
};

/**
 * Copy provisional grade
 * Given a provisional grade, copy the grade (and associated submission comments and rubric assessments)
 * to a "final" mark which can be edited or commented upon by a moderator prior to publication of grades.
 *
 * Notes:
 * * The student must be in the moderation set for the assignment.
 * * The newly created grade will be selected.
 * * The caller must have "Moderate Grades" rights in the course.
 */
export const copyProvisionalGrade = <ThrowOnError extends boolean = false>(options: Options<CopyProvisionalGradeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CopyProvisionalGradeResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/assignments/{assignment_id}/provisional_grades/{provisional_grade_id}/copy_to_final_mark',
        ...options
    });
};

/**
 * Select provisional grade
 * Choose which provisional grade the student should receive for a submission.
 * The caller must be the final grader for the assignment or an admin with :select_final_grade rights.
 */
export const selectProvisionalGrade = <ThrowOnError extends boolean = false>(options: Options<SelectProvisionalGradeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/assignments/{assignment_id}/provisional_grades/{provisional_grade_id}/select',
        ...options
    });
};

/**
 * Submission Summary
 * Returns the number of submissions for the given assignment based on gradeable students
 * that fall into three categories: graded, ungraded, not submitted.
 */
export const submissionSummaryCourses = <ThrowOnError extends boolean = false>(options: Options<SubmissionSummaryCoursesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/assignments/{assignment_id}/submission_summary',
        ...options
    });
};

/**
 * List assignment submissions
 * A paginated list of all existing submissions for an assignment.
 */
export const listAssignmentSubmissionsCourses = <ThrowOnError extends boolean = false>(options: Options<ListAssignmentSubmissionsCoursesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListAssignmentSubmissionsCoursesResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/courses/{course_id}/assignments/{assignment_id}/submissions',
        ...options
    });
};

/**
 * Submit an assignment
 * Make a submission for an assignment. You must be enrolled as a student in
 * the course/section to do this.
 *
 * All online turn-in submission types are supported in this API. However,
 * there are a few things that are not yet supported:
 *
 * * Files can be submitted based on a file ID of a user or group file. However, there is no API yet for listing the user and group files, or uploading new files via the API. A file upload API is coming soon.
 * * Media comments can be submitted, however, there is no API yet for creating a media comment to submit.
 * * Integration with Google Docs is not yet supported.
 */
export const submitAssignmentCourses = <ThrowOnError extends boolean = false>(options: Options<SubmitAssignmentCoursesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/assignments/{assignment_id}/submissions',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

/**
 * Grade or comment on multiple submissions
 * Update the grading and comments on multiple student's assignment
 * submissions in an asynchronous job.
 *
 * The user must have permission to manage grades in the appropriate context
 * (course or section).
 */
export const gradeOrCommentOnMultipleSubmissionsCoursesAssignments = <ThrowOnError extends boolean = false>(options: Options<GradeOrCommentOnMultipleSubmissionsCoursesAssignmentsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<GradeOrCommentOnMultipleSubmissionsCoursesAssignmentsResponse, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/assignments/{assignment_id}/submissions/update_grades',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

/**
 * Delete Peer Review
 * Delete a peer review for the assignment
 */
export const deletePeerReviewCourses = <ThrowOnError extends boolean = false>(options: Options<DeletePeerReviewCoursesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeletePeerReviewCoursesResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/assignments/{assignment_id}/submissions/{submission_id}/peer_reviews',
        ...options
    });
};

/**
 * Get all Peer Reviews
 * Get a list of all Peer Reviews for this assignment
 */
export const getAllPeerReviewsCoursesSubmissions = <ThrowOnError extends boolean = false>(options: Options<GetAllPeerReviewsCoursesSubmissionsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetAllPeerReviewsCoursesSubmissionsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/courses/{course_id}/assignments/{assignment_id}/submissions/{submission_id}/peer_reviews',
        ...options
    });
};

/**
 * Create Peer Review
 * Create a peer review for the assignment
 */
export const createPeerReviewCourses = <ThrowOnError extends boolean = false>(options: Options<CreatePeerReviewCoursesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreatePeerReviewCoursesResponse, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/assignments/{assignment_id}/submissions/{submission_id}/peer_reviews',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

/**
 * Get a single submission
 * Get a single submission, based on user id.
 */
export const getSingleSubmissionCourses = <ThrowOnError extends boolean = false>(options: Options<GetSingleSubmissionCoursesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetSingleSubmissionCoursesResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/courses/{course_id}/assignments/{assignment_id}/submissions/{user_id}',
        ...options
    });
};

/**
 * Grade or comment on a submission
 * Comment on and/or update the grading for a student's assignment submission. If any submission or rubric_assessment arguments are provided, the user must have permission to manage grades in the appropriate context (course or section).
 */
export const gradeOrCommentOnSubmissionCourses = <ThrowOnError extends boolean = false>(options: Options<GradeOrCommentOnSubmissionCoursesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<GradeOrCommentOnSubmissionCoursesResponse, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/assignments/{assignment_id}/submissions/{user_id}',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

/**
 * Upload a file
 * Upload a file to attach to a submission comment
 *
 * See the {file:file_uploads.html File Upload Documentation} for details on the file upload workflow.
 *
 * The final step of the file upload workflow will return the attachment data,
 * including the new file id. The caller can then PUT the file_id to the
 * submission API to attach it to a comment
 */
export const uploadFileToSubmission = <ThrowOnError extends boolean = false>(options: Options<UploadFileToSubmissionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/assignments/{assignment_id}/submissions/{user_id}/comments/files',
        ...options
    });
};

/**
 * Upload a file
 * Upload a file to a submission.
 *
 * This API endpoint is the first step in uploading a file to a submission as a student.
 * See the {file:file_uploads.html File Upload Documentation} for details on the file upload workflow.
 *
 * The final step of the file upload workflow will return the attachment data,
 * including the new file id. The caller can then POST to submit the
 * +online_upload+ assignment with these file ids.
 */
export const uploadFileCourses = <ThrowOnError extends boolean = false>(options: Options<UploadFileCoursesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/assignments/{assignment_id}/submissions/{user_id}/files',
        ...options
    });
};

/**
 * Mark submission as unread
 * No request fields are necessary.
 *
 * On success, the response will be 204 No Content with an empty body.
 */
export const markSubmissionAsUnreadCourses = <ThrowOnError extends boolean = false>(options: Options<MarkSubmissionAsUnreadCoursesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/assignments/{assignment_id}/submissions/{user_id}/read',
        ...options
    });
};

/**
 * Mark submission as read
 * No request fields are necessary.
 *
 * On success, the response will be 204 No Content with an empty body.
 */
export const markSubmissionAsReadCourses = <ThrowOnError extends boolean = false>(options: Options<MarkSubmissionAsReadCoursesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/assignments/{assignment_id}/submissions/{user_id}/read',
        ...options
    });
};

/**
 * Delete an assignment
 * Delete the given assignment.
 */
export const deleteAssignment = <ThrowOnError extends boolean = false>(options: Options<DeleteAssignmentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteAssignmentResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/assignments/{id}',
        ...options
    });
};

/**
 * Get a single assignment
 * Returns the assignment with the given id.
 */
export const getSingleAssignment = <ThrowOnError extends boolean = false>(options: Options<GetSingleAssignmentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetSingleAssignmentResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/courses/{course_id}/assignments/{id}',
        ...options
    });
};

/**
 * Edit an assignment
 * Modify an existing assignment.
 *
 * If the assignment [assignment_overrides] key is absent, any existing
 * overrides are kept as is. If the assignment [assignment_overrides] key is
 * present, existing overrides are updated or deleted (and new ones created,
 * as necessary) to match the provided list.
 */
export const editAssignment = <ThrowOnError extends boolean = false>(options: Options<EditAssignmentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<EditAssignmentResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/assignments/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List blueprint subscriptions
 * Returns a list of blueprint subscriptions for the given course. (Currently a course may have no more than one.)
 */
export const listBlueprintSubscriptions = <ThrowOnError extends boolean = false>(options: Options<ListBlueprintSubscriptionsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListBlueprintSubscriptionsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/blueprint_subscriptions',
        ...options
    });
};

/**
 * List blueprint imports
 * Shows a paginated list of migrations imported into a course associated with a blueprint, starting with the most recent. See also
 * {api:MasterCourses::MasterTemplatesController#migrations_index the blueprint course side}.
 *
 * Use 'default' as the subscription_id to use the currently active blueprint subscription.
 */
export const listBlueprintImports = <ThrowOnError extends boolean = false>(options: Options<ListBlueprintImportsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListBlueprintImportsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/blueprint_subscriptions/{subscription_id}/migrations',
        ...options
    });
};

/**
 * Show a blueprint import
 * Shows the status of an import into a course associated with a blueprint. See also
 * {api:MasterCourses::MasterTemplatesController#migrations_show the blueprint course side}.
 */
export const showBlueprintImport = <ThrowOnError extends boolean = false>(options: Options<ShowBlueprintImportData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ShowBlueprintImportResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/blueprint_subscriptions/{subscription_id}/migrations/{id}',
        ...options
    });
};

/**
 * Get import details
 * Show the changes that were propagated to a course associated with a blueprint.  See also
 * {api:MasterCourses::MasterTemplatesController#migration_details the blueprint course side}.
 */
export const getImportDetails = <ThrowOnError extends boolean = false>(options: Options<GetImportDetailsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetImportDetailsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/blueprint_subscriptions/{subscription_id}/migrations/{id}/details',
        ...options
    });
};

/**
 * Get blueprint information
 * Using 'default' as the template_id should suffice for the current implmentation (as there should be only one template per course).
 * However, using specific template ids may become necessary in the future
 */
export const getBlueprintInformation = <ThrowOnError extends boolean = false>(options: Options<GetBlueprintInformationData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetBlueprintInformationResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/blueprint_templates/{template_id}',
        ...options
    });
};

/**
 * Get associated course information
 * Returns a list of courses that are configured to receive updates from this blueprint
 */
export const getAssociatedCourseInformation = <ThrowOnError extends boolean = false>(options: Options<GetAssociatedCourseInformationData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetAssociatedCourseInformationResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/blueprint_templates/{template_id}/associated_courses',
        ...options
    });
};

/**
 * List blueprint migrations
 * Shows a paginated list of migrations for the template, starting with the most recent. This endpoint can be called on a
 * blueprint course. See also {api:MasterCourses::MasterTemplatesController#imports_index the associated course side}.
 */
export const listBlueprintMigrations = <ThrowOnError extends boolean = false>(options: Options<ListBlueprintMigrationsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListBlueprintMigrationsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/blueprint_templates/{template_id}/migrations',
        ...options
    });
};

/**
 * Begin a migration to push to associated courses
 * Begins a migration to push recently updated content to all associated courses.
 * Only one migration can be running at a time.
 */
export const beginMigrationToPushToAssociatedCourses = <ThrowOnError extends boolean = false>(options: Options<BeginMigrationToPushToAssociatedCoursesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<BeginMigrationToPushToAssociatedCoursesResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/blueprint_templates/{template_id}/migrations',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Show a blueprint migration
 * Shows the status of a migration. This endpoint can be called on a blueprint course. See also
 * {api:MasterCourses::MasterTemplatesController#imports_show the associated course side}.
 */
export const showBlueprintMigration = <ThrowOnError extends boolean = false>(options: Options<ShowBlueprintMigrationData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ShowBlueprintMigrationResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/blueprint_templates/{template_id}/migrations/{id}',
        ...options
    });
};

/**
 * Get migration details
 * Show the changes that were propagated in a blueprint migration. This endpoint can be called on a
 * blueprint course. See also {api:MasterCourses::MasterTemplatesController#import_details the associated course side}.
 */
export const getMigrationDetails = <ThrowOnError extends boolean = false>(options: Options<GetMigrationDetailsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetMigrationDetailsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/blueprint_templates/{template_id}/migrations/{id}/details',
        ...options
    });
};

/**
 * Set or remove restrictions on a blueprint course object
 * If a blueprint course object is restricted, editing will be limited for copies in associated courses.
 */
export const setOrRemoveRestrictionsOnBlueprintCourseObject = <ThrowOnError extends boolean = false>(options: Options<SetOrRemoveRestrictionsOnBlueprintCourseObjectData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/blueprint_templates/{template_id}/restrict_item',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get unsynced changes
 * Retrieve a list of learning objects that have changed since the last blueprint sync operation.
 */
export const getUnsyncedChanges = <ThrowOnError extends boolean = false>(options: Options<GetUnsyncedChangesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetUnsyncedChangesResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/blueprint_templates/{template_id}/unsynced_changes',
        ...options
    });
};

/**
 * Update associated courses
 * Send a list of course ids to add or remove new associations for the template.
 * Cannot add courses that do not belong to the blueprint course's account. Also cannot add
 * other blueprint courses or courses that already have an association with another blueprint course.
 */
export const updateAssociatedCourses = <ThrowOnError extends boolean = false>(options: Options<UpdateAssociatedCoursesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/blueprint_templates/{template_id}/update_associations',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get course timetable
 * Returns the last timetable set by the
 * {api:CalendarEventsApiController#set_course_timetable Set a course timetable} endpoint
 */
export const getCourseTimetable = <ThrowOnError extends boolean = false>(options: Options<GetCourseTimetableData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/calendar_events/timetable',
        ...options
    });
};

/**
 * Set a course timetable
 * Creates and updates "timetable" events for a course.
 * Can automaticaly generate a series of calendar events based on simple schedules
 * (e.g. "Monday and Wednesday at 2:00pm" )
 *
 * Existing timetable events for the course and course sections
 * will be updated if they still are part of the timetable.
 * Otherwise, they will be deleted.
 */
export const setCourseTimetable = <ThrowOnError extends boolean = false>(options: Options<SetCourseTimetableData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/calendar_events/timetable',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

/**
 * Create or update events directly for a course timetable
 * Creates and updates "timetable" events for a course or course section.
 * Similar to {api:CalendarEventsApiController#set_course_timetable setting a course timetable},
 * but instead of generating a list of events based on a timetable schedule,
 * this endpoint expects a complete list of events.
 */
export const createOrUpdateEventsDirectlyForCourseTimetable = <ThrowOnError extends boolean = false>(options: Options<CreateOrUpdateEventsDirectlyForCourseTimetableData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/calendar_events/timetable_events',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

/**
 * List collaborations
 * A paginated list of collaborations the current user has access to in the
 * context of the course provided in the url. NOTE: this only returns
 * ExternalToolCollaboration type collaborations.
 *
 * curl https://<canvas>/api/v1/courses/1/collaborations/
 */
export const listCollaborationsCourses = <ThrowOnError extends boolean = false>(options: Options<ListCollaborationsCoursesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListCollaborationsCoursesResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/collaborations',
        ...options
    });
};

/**
 * List conferences
 * Retrieve the paginated list of conferences for this context
 *
 * This API returns a JSON object containing the list of conferences,
 * the key for the list of conferences is "conferences"
 */
export const listConferencesCourses = <ThrowOnError extends boolean = false>(options: Options<ListConferencesCoursesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListConferencesCoursesResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/conferences',
        ...options
    });
};

/**
 * List content exports
 * A paginated list of the past and pending content export jobs for a course,
 * group, or user. Exports are returned newest first.
 */
export const listContentExportsCourses = <ThrowOnError extends boolean = false>(options: Options<ListContentExportsCoursesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListContentExportsCoursesResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/content_exports',
        ...options
    });
};

/**
 * Export content
 * Begin a content export job for a course, group, or user.
 *
 * You can use the {api:ProgressController#show Progress API} to track the
 * progress of the export. The migration's progress is linked to with the
 * _progress_url_ value.
 *
 * When the export completes, use the {api:ContentExportsApiController#show Show content export} endpoint
 * to retrieve a download URL for the exported content.
 */
export const exportContentCourses = <ThrowOnError extends boolean = false>(options: Options<ExportContentCoursesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ExportContentCoursesResponse, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/content_exports',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

/**
 * Show content export
 * Get information about a single content export.
 */
export const showContentExportCourses = <ThrowOnError extends boolean = false>(options: Options<ShowContentExportCoursesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ShowContentExportCoursesResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/content_exports/{id}',
        ...options
    });
};

/**
 * List licenses
 * A paginated list of licenses that can be applied
 */
export const listLicensesCourses = <ThrowOnError extends boolean = false>(options: Options<ListLicensesCoursesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListLicensesCoursesResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/content_licenses',
        ...options
    });
};

/**
 * List content migrations
 * Returns paginated content migrations
 */
export const listContentMigrationsCourses = <ThrowOnError extends boolean = false>(options: Options<ListContentMigrationsCoursesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListContentMigrationsCoursesResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/content_migrations',
        ...options
    });
};

/**
 * Create a content migration
 * Create a content migration. If the migration requires a file to be uploaded
 * the actual processing of the file will start once the file upload process is completed.
 * File uploading works as described in the {file:file_uploads.html File Upload Documentation}
 * except that the values are set on a *pre_attachment* sub-hash.
 *
 * For migrations that don't require a file to be uploaded, like course copy, the
 * processing will begin as soon as the migration is created.
 *
 * You can use the {api:ProgressController#show Progress API} to track the
 * progress of the migration. The migration's progress is linked to with the
 * _progress_url_ value.
 *
 * The two general workflows are:
 *
 * If no file upload is needed:
 *
 * 1. POST to create
 * 2. Use the {api:ProgressController#show Progress} specified in _progress_url_ to monitor progress
 *
 * For file uploading:
 *
 * 1. POST to create with file info in *pre_attachment*
 * 2. Do {file:file_uploads.html file upload processing} using the data in the *pre_attachment* data
 * 3. {api:ContentMigrationsController#show GET} the ContentMigration
 * 4. Use the {api:ProgressController#show Progress} specified in _progress_url_ to monitor progress
 *
 * (required if doing .zip file upload)
 */
export const createContentMigrationCourses = <ThrowOnError extends boolean = false>(options: Options<CreateContentMigrationCoursesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateContentMigrationCoursesResponse, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/content_migrations',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

/**
 * List Migration Systems
 * Lists the currently available migration types. These values may change.
 */
export const listMigrationSystemsCourses = <ThrowOnError extends boolean = false>(options: Options<ListMigrationSystemsCoursesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListMigrationSystemsCoursesResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/content_migrations/migrators',
        ...options
    });
};

/**
 * List migration issues
 * Returns paginated migration issues
 */
export const listMigrationIssuesCourses = <ThrowOnError extends boolean = false>(options: Options<ListMigrationIssuesCoursesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListMigrationIssuesCoursesResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/content_migrations/{content_migration_id}/migration_issues',
        ...options
    });
};

/**
 * Get a migration issue
 * Returns data on an individual migration issue
 */
export const getMigrationIssueCourses = <ThrowOnError extends boolean = false>(options: Options<GetMigrationIssueCoursesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetMigrationIssueCoursesResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/content_migrations/{content_migration_id}/migration_issues/{id}',
        ...options
    });
};

/**
 * Update a migration issue
 * Update the workflow_state of a migration issue
 */
export const updateMigrationIssueCourses = <ThrowOnError extends boolean = false>(options: Options<UpdateMigrationIssueCoursesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateMigrationIssueCoursesResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/content_migrations/{content_migration_id}/migration_issues/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get a content migration
 * Returns data on an individual content migration
 */
export const getContentMigrationCourses = <ThrowOnError extends boolean = false>(options: Options<GetContentMigrationCoursesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetContentMigrationCoursesResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/content_migrations/{id}',
        ...options
    });
};

/**
 * Update a content migration
 * Update a content migration. Takes same arguments as create except that you
 * can't change the migration type. However, changing most settings after the
 * migration process has started will not do anything. Generally updating the
 * content migration will be used when there is a file upload problem. If the
 * first upload has a problem you can supply new _pre_attachment_ values to
 * start the process again.
 */
export const updateContentMigrationCourses = <ThrowOnError extends boolean = false>(options: Options<UpdateContentMigrationCoursesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateContentMigrationCoursesResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/content_migrations/{id}',
        ...options
    });
};

/**
 * Copy course content
 * DEPRECATED: Please use the {api:ContentMigrationsController#create Content Migrations API}
 *
 * Copies content from one course into another. The default is to copy all course
 * content. You can control specific types to copy by using either the 'except' option
 * or the 'only' option.
 *
 * The response is the same as the course copy status endpoint
 */
export const copyCourseContent = <ThrowOnError extends boolean = false>(options: Options<CopyCourseContentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/course_copy',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

/**
 * Get course copy status
 * DEPRECATED: Please use the {api:ContentMigrationsController#create Content Migrations API}
 *
 * Retrieve the status of a course copy
 */
export const getCourseCopyStatus = <ThrowOnError extends boolean = false>(options: Options<GetCourseCopyStatusData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/course_copy/{id}',
        ...options
    });
};

/**
 * Bulk update column data
 * Set the content of custom columns
 *
 * {
 * "column_data": [
 * {
 * "column_id": example_column_id,
 * "user_id": example_student_id,
 * "content": example_content
 * },
 * {
 * "column_id": example_column_id,
 * "user_id": example_student_id,
 * "content: example_content
 * }
 * ]
 * }
 */
export const bulkUpdateColumnData = <ThrowOnError extends boolean = false>(options: Options<BulkUpdateColumnDataData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<BulkUpdateColumnDataResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/custom_gradebook_column_data',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List custom gradebook columns
 * A paginated list of all custom gradebook columns for a course
 */
export const listCustomGradebookColumns = <ThrowOnError extends boolean = false>(options: Options<ListCustomGradebookColumnsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListCustomGradebookColumnsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/custom_gradebook_columns',
        ...options
    });
};

/**
 * Create a custom gradebook column
 * Create a custom gradebook column
 */
export const createCustomGradebookColumn = <ThrowOnError extends boolean = false>(options: Options<CreateCustomGradebookColumnData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateCustomGradebookColumnResponse, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/custom_gradebook_columns',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

/**
 * Reorder custom columns
 * Puts the given columns in the specified order
 *
 * <b>200 OK</b> is returned if successful
 */
export const reorderCustomColumns = <ThrowOnError extends boolean = false>(options: Options<ReorderCustomColumnsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/custom_gradebook_columns/reorder',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

/**
 * Delete a custom gradebook column
 * Permanently deletes a custom column and its associated data
 */
export const deleteCustomGradebookColumn = <ThrowOnError extends boolean = false>(options: Options<DeleteCustomGradebookColumnData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteCustomGradebookColumnResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/custom_gradebook_columns/{id}',
        ...options
    });
};

/**
 * Update a custom gradebook column
 * Accepts the same parameters as custom gradebook column creation
 */
export const updateCustomGradebookColumn = <ThrowOnError extends boolean = false>(options: Options<UpdateCustomGradebookColumnData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateCustomGradebookColumnResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/custom_gradebook_columns/{id}',
        ...options
    });
};

/**
 * List entries for a column
 * This does not list entries for students without associated data.
 */
export const listEntriesForColumn = <ThrowOnError extends boolean = false>(options: Options<ListEntriesForColumnData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListEntriesForColumnResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/custom_gradebook_columns/{id}/data',
        ...options
    });
};

/**
 * Update column data
 * Set the content of a custom column
 */
export const updateColumnData = <ThrowOnError extends boolean = false>(options: Options<UpdateColumnDataData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateColumnDataResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/custom_gradebook_columns/{id}/data/{user_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Create Tool from ToolConfiguration
 * Creates context_external_tool from attached tool_configuration of
 * the provided developer_key if not already present in context.
 * DeveloperKey must have a ToolConfiguration to create tool or 404 will be raised.
 * Will return an existing ContextExternalTool if one already exists.
 */
export const createToolFromToolconfigurationCourses = <ThrowOnError extends boolean = false>(options: Options<CreateToolFromToolconfigurationCoursesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateToolFromToolconfigurationCoursesResponse, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/developer_keys/{developer_key_id}/create_tool',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

/**
 * List discussion topics
 * Returns the paginated list of discussion topics for this course or group.
 */
export const listDiscussionTopicsCourses = <ThrowOnError extends boolean = false>(options: Options<ListDiscussionTopicsCoursesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListDiscussionTopicsCoursesResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/courses/{course_id}/discussion_topics',
        ...options
    });
};

/**
 * Create a new discussion topic
 * Create an new discussion topic for the course or group.
 */
export const createNewDiscussionTopicCourses = <ThrowOnError extends boolean = false>(options: Options<CreateNewDiscussionTopicCoursesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/discussion_topics',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

/**
 * Reorder pinned topics
 * Puts the pinned discussion topics in the specified order.
 * All pinned topics should be included.
 */
export const reorderPinnedTopicsCourses = <ThrowOnError extends boolean = false>(options: Options<ReorderPinnedTopicsCoursesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/discussion_topics/reorder',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

/**
 * Delete a topic
 * Deletes the discussion topic. This will also delete the assignment, if it's
 * an assignment discussion.
 */
export const deleteTopicCourses = <ThrowOnError extends boolean = false>(options: Options<DeleteTopicCoursesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/discussion_topics/{topic_id}',
        ...options
    });
};

/**
 * Get a single topic
 * Returns data on an individual discussion topic. See the List action for the response formatting.
 */
export const getSingleTopicCourses = <ThrowOnError extends boolean = false>(options: Options<GetSingleTopicCoursesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/courses/{course_id}/discussion_topics/{topic_id}',
        ...options
    });
};

/**
 * Update a topic
 * Update an existing discussion topic for the course or group.
 */
export const updateTopicCourses = <ThrowOnError extends boolean = false>(options: Options<UpdateTopicCoursesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/discussion_topics/{topic_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List topic entries
 * Retrieve the (paginated) top-level entries in a discussion topic.
 *
 * May require (depending on the topic) that the user has posted in the topic.
 * If it is required, and the user has not posted, will respond with a 403
 * Forbidden status and the body 'require_initial_post'.
 *
 * Will include the 10 most recent replies, if any, for each entry returned.
 *
 * If the topic is a root topic with children corresponding to groups of a
 * group assignment, entries from those subtopics for which the user belongs
 * to the corresponding group will be returned.
 *
 * Ordering of returned entries is newest-first by posting timestamp (reply
 * activity is ignored).
 */
export const listTopicEntriesCourses = <ThrowOnError extends boolean = false>(options: Options<ListTopicEntriesCoursesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/discussion_topics/{topic_id}/entries',
        ...options
    });
};

/**
 * Post an entry
 * Create a new entry in a discussion topic. Returns a json representation of
 * the created entry (see documentation for 'entries' method) on success.
 */
export const postEntryCourses = <ThrowOnError extends boolean = false>(options: Options<PostEntryCoursesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/discussion_topics/{topic_id}/entries',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

/**
 * Rate entry
 * Rate a discussion entry.
 *
 * On success, the response will be 204 No Content with an empty body.
 */
export const rateEntryCourses = <ThrowOnError extends boolean = false>(options: Options<RateEntryCoursesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/discussion_topics/{topic_id}/entries/{entry_id}/rating',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

/**
 * Mark entry as unread
 * Mark a discussion entry as unread.
 *
 * No request fields are necessary.
 *
 * On success, the response will be 204 No Content with an empty body.
 */
export const markEntryAsUnreadCourses = <ThrowOnError extends boolean = false>(options: Options<MarkEntryAsUnreadCoursesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/discussion_topics/{topic_id}/entries/{entry_id}/read',
        ...options
    });
};

/**
 * Mark entry as read
 * Mark a discussion entry as read.
 *
 * No request fields are necessary.
 *
 * On success, the response will be 204 No Content with an empty body.
 */
export const markEntryAsReadCourses = <ThrowOnError extends boolean = false>(options: Options<MarkEntryAsReadCoursesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/discussion_topics/{topic_id}/entries/{entry_id}/read',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List entry replies
 * Retrieve the (paginated) replies to a top-level entry in a discussion
 * topic.
 *
 * May require (depending on the topic) that the user has posted in the topic.
 * If it is required, and the user has not posted, will respond with a 403
 * Forbidden status and the body 'require_initial_post'.
 *
 * Ordering of returned entries is newest-first by creation timestamp.
 */
export const listEntryRepliesCourses = <ThrowOnError extends boolean = false>(options: Options<ListEntryRepliesCoursesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/discussion_topics/{topic_id}/entries/{entry_id}/replies',
        ...options
    });
};

/**
 * Post a reply
 * Add a reply to an entry in a discussion topic. Returns a json
 * representation of the created reply (see documentation for 'replies'
 * method) on success.
 *
 * May require (depending on the topic) that the user has posted in the topic.
 * If it is required, and the user has not posted, will respond with a 403
 * Forbidden status and the body 'require_initial_post'.
 */
export const postReplyCourses = <ThrowOnError extends boolean = false>(options: Options<PostReplyCoursesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/discussion_topics/{topic_id}/entries/{entry_id}/replies',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

/**
 * Delete an entry
 * Delete a discussion entry.
 *
 * The entry must have been created by the current user, or the current user
 * must have admin rights to the discussion. If the delete is not allowed, a 401 will be returned.
 *
 * The discussion will be marked deleted, and the user_id and message will be cleared out.
 */
export const deleteEntryCourses = <ThrowOnError extends boolean = false>(options: Options<DeleteEntryCoursesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/discussion_topics/{topic_id}/entries/{id}',
        ...options
    });
};

/**
 * Update an entry
 * Update an existing discussion entry.
 *
 * The entry must have been created by the current user, or the current user
 * must have admin rights to the discussion. If the edit is not allowed, a 401 will be returned.
 */
export const updateEntryCourses = <ThrowOnError extends boolean = false>(options: Options<UpdateEntryCoursesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/discussion_topics/{topic_id}/entries/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List entries
 * Retrieve a paginated list of discussion entries, given a list of ids.
 *
 * May require (depending on the topic) that the user has posted in the topic.
 * If it is required, and the user has not posted, will respond with a 403
 * Forbidden status and the body 'require_initial_post'.
 */
export const listEntriesCourses = <ThrowOnError extends boolean = false>(options: Options<ListEntriesCoursesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/courses/{course_id}/discussion_topics/{topic_id}/entry_list',
        ...options
    });
};

/**
 * Mark topic as unread
 * Mark the initial text of the discussion topic as unread.
 *
 * No request fields are necessary.
 *
 * On success, the response will be 204 No Content with an empty body.
 */
export const markTopicAsUnreadCourses = <ThrowOnError extends boolean = false>(options: Options<MarkTopicAsUnreadCoursesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/discussion_topics/{topic_id}/read',
        ...options
    });
};

/**
 * Mark topic as read
 * Mark the initial text of the discussion topic as read.
 *
 * No request fields are necessary.
 *
 * On success, the response will be 204 No Content with an empty body.
 */
export const markTopicAsReadCourses = <ThrowOnError extends boolean = false>(options: Options<MarkTopicAsReadCoursesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/discussion_topics/{topic_id}/read',
        ...options
    });
};

/**
 * Mark all entries as unread
 * Mark the discussion topic and all its entries as unread.
 *
 * No request fields are necessary.
 *
 * On success, the response will be 204 No Content with an empty body.
 */
export const markAllEntriesAsUnreadCourses = <ThrowOnError extends boolean = false>(options: Options<MarkAllEntriesAsUnreadCoursesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/discussion_topics/{topic_id}/read_all',
        ...options
    });
};

/**
 * Mark all entries as read
 * Mark the discussion topic and all its entries as read.
 *
 * No request fields are necessary.
 *
 * On success, the response will be 204 No Content with an empty body.
 */
export const markAllEntriesAsReadCourses = <ThrowOnError extends boolean = false>(options: Options<MarkAllEntriesAsReadCoursesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/discussion_topics/{topic_id}/read_all',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Unsubscribe from a topic
 * Unsubscribe from a topic to stop receiving notifications about new entries
 *
 * On success, the response will be 204 No Content with an empty body
 */
export const unsubscribeFromTopicCourses = <ThrowOnError extends boolean = false>(options: Options<UnsubscribeFromTopicCoursesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/discussion_topics/{topic_id}/subscribed',
        ...options
    });
};

/**
 * Subscribe to a topic
 * Subscribe to a topic to receive notifications about new entries
 *
 * On success, the response will be 204 No Content with an empty body
 */
export const subscribeToTopicCourses = <ThrowOnError extends boolean = false>(options: Options<SubscribeToTopicCoursesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/discussion_topics/{topic_id}/subscribed',
        ...options
    });
};

/**
 * Get the full topic
 * Return a cached structure of the discussion topic, containing all entries,
 * their authors, and their message bodies.
 *
 * May require (depending on the topic) that the user has posted in the topic.
 * If it is required, and the user has not posted, will respond with a 403
 * Forbidden status and the body 'require_initial_post'.
 *
 * In some rare situations, this cached structure may not be available yet. In
 * that case, the server will respond with a 503 error, and the caller should
 * try again soon.
 *
 * The response is an object containing the following keys:
 * * "participants": A list of summary information on users who have posted to
 * the discussion. Each value is an object containing their id, display_name,
 * and avatar_url.
 * * "unread_entries": A list of entry ids that are unread by the current
 * user. this implies that any entry not in this list is read.
 * * "entry_ratings": A map of entry ids to ratings by the current user. Entries
 * not in this list have no rating. Only populated if rating is enabled.
 * * "forced_entries": A list of entry ids that have forced_read_state set to
 * true. This flag is meant to indicate the entry's read_state has been
 * manually set to 'unread' by the user, so the entry should not be
 * automatically marked as read.
 * * "view": A threaded view of all the entries in the discussion, containing
 * the id, user_id, and message.
 * * "new_entries": Because this view is eventually consistent, it's possible
 * that newly created or updated entries won't yet be reflected in the view.
 * If the application wants to also get a flat list of all entries not yet
 * reflected in the view, pass include_new_entries=1 to the request and this
 * array of entries will be returned. These entries are returned in a flat
 * array, in ascending created_at order.
 */
export const getFullTopicCourses = <ThrowOnError extends boolean = false>(options: Options<GetFullTopicCoursesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/discussion_topics/{topic_id}/view',
        ...options
    });
};

/**
 * Get effective due dates
 * For each assignment in the course, returns each assigned student's ID
 * and their corresponding due date along with some grading period data.
 * Returns a collection with keys representing assignment IDs and values as a
 * collection containing keys representing student IDs and values representing
 * the student's effective due_at, the grading_period_id of which the due_at falls
 * in, and whether or not the grading period is closed (in_closed_grading_period)
 *
 * The list of assignment IDs for which effective student due dates are
 * requested. If not provided, all assignments in the course will be used.
 */
export const getEffectiveDueDates = <ThrowOnError extends boolean = false>(options: Options<GetEffectiveDueDatesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/courses/{course_id}/effective_due_dates',
        ...options
    });
};

/**
 * List enrollments
 * Depending on the URL given, return a paginated list of either (1) all of the enrollments in a course, (2) all of the enrollments in a section or (3) all of a user's enrollments. This includes student, teacher, TA, and
 * observer enrollments.
 *
 * If a user has multiple enrollments in a context (e.g. as a teacher
 * and a student or in multiple course sections), each enrollment will be
 * listed separately.
 *
 * note: Currently, only a root level admin user can return other users' enrollments. A
 * user can, however, return his/her own enrollments.
 */
export const listEnrollmentsCourses = <ThrowOnError extends boolean = false>(options: Options<ListEnrollmentsCoursesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListEnrollmentsCoursesResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/courses/{course_id}/enrollments',
        ...options
    });
};

/**
 * Enroll a user
 * Create a new user enrollment for a course or section.
 */
export const enrollUserCourses = <ThrowOnError extends boolean = false>(options: Options<EnrollUserCoursesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<EnrollUserCoursesResponse, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/enrollments',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

/**
 * Conclude, deactivate, or delete an enrollment
 * Conclude, deactivate, or delete an enrollment. If the +task+ argument isn't given, the enrollment
 * will be concluded.
 */
export const concludeDeactivateOrDeleteEnrollment = <ThrowOnError extends boolean = false>(options: Options<ConcludeDeactivateOrDeleteEnrollmentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<ConcludeDeactivateOrDeleteEnrollmentResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/enrollments/{id}',
        ...options
    });
};

/**
 * Accept Course Invitation
 * accepts a pending course invitation for the current user
 */
export const acceptCourseInvitation = <ThrowOnError extends boolean = false>(options: Options<AcceptCourseInvitationData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/enrollments/{id}/accept',
        ...options
    });
};

/**
 * Re-activate an enrollment
 * Activates an inactive enrollment
 */
export const reActivateEnrollment = <ThrowOnError extends boolean = false>(options: Options<ReActivateEnrollmentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<ReActivateEnrollmentResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/enrollments/{id}/reactivate',
        ...options
    });
};

/**
 * Reject Course Invitation
 * rejects a pending course invitation for the current user
 */
export const rejectCourseInvitation = <ThrowOnError extends boolean = false>(options: Options<RejectCourseInvitationData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/enrollments/{id}/reject',
        ...options
    });
};

/**
 * Create ePub Export
 * Begin an ePub export for a course.
 *
 * You can use the {api:ProgressController#show Progress API} to track the
 * progress of the export. The export's progress is linked to with the
 * _progress_url_ value.
 *
 * When the export completes, use the {api:EpubExportsController#show Show content export} endpoint
 * to retrieve a download URL for the exported content.
 */
export const createEpubExport = <ThrowOnError extends boolean = false>(options: Options<CreateEpubExportData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateEpubExportResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/epub_exports',
        ...options
    });
};

/**
 * Show ePub export
 * Get information about a single ePub export.
 */
export const showEpubExport = <ThrowOnError extends boolean = false>(options: Options<ShowEpubExportData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ShowEpubExportResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/epub_exports/{id}',
        ...options
    });
};

/**
 * List external feeds
 * Returns the paginated list of External Feeds this course or group.
 */
export const listExternalFeedsCourses = <ThrowOnError extends boolean = false>(options: Options<ListExternalFeedsCoursesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListExternalFeedsCoursesResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/external_feeds',
        ...options
    });
};

/**
 * Create an external feed
 * Create a new external feed for the course or group.
 */
export const createExternalFeedCourses = <ThrowOnError extends boolean = false>(options: Options<CreateExternalFeedCoursesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateExternalFeedCoursesResponse, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/external_feeds',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

/**
 * Delete an external feed
 * Deletes the external feed.
 */
export const deleteExternalFeedCourses = <ThrowOnError extends boolean = false>(options: Options<DeleteExternalFeedCoursesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteExternalFeedCoursesResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/external_feeds/{external_feed_id}',
        ...options
    });
};

/**
 * List external tools
 * Returns the paginated list of external tools for the current context.
 * See the get request docs for a single tool for a list of properties on an external tool.
 */
export const listExternalToolsCourses = <ThrowOnError extends boolean = false>(options: Options<ListExternalToolsCoursesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/external_tools',
        ...options
    });
};

/**
 * Create an external tool
 * Create an external tool in the specified course/account.
 * The created tool will be returned, see the "show" endpoint for an example.
 */
export const createExternalToolCourses = <ThrowOnError extends boolean = false>(options: Options<CreateExternalToolCoursesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/external_tools',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

/**
 * Get a sessionless launch url for an external tool.
 * Returns a sessionless launch url for an external tool.
 *
 * NOTE: Either the id or url must be provided unless launch_type is assessment or module_item.
 */
export const getSessionlessLaunchUrlForExternalToolCourses = <ThrowOnError extends boolean = false>(options: Options<GetSessionlessLaunchUrlForExternalToolCoursesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/external_tools/sessionless_launch',
        ...options
    });
};

/**
 * Delete an external tool
 * Remove the specified external tool
 */
export const deleteExternalToolCourses = <ThrowOnError extends boolean = false>(options: Options<DeleteExternalToolCoursesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/external_tools/{external_tool_id}',
        ...options
    });
};

/**
 * Get a single external tool
 * Returns the specified external tool.
 */
export const getSingleExternalToolCourses = <ThrowOnError extends boolean = false>(options: Options<GetSingleExternalToolCoursesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/external_tools/{external_tool_id}',
        ...options
    });
};

/**
 * Edit an external tool
 * Update the specified external tool. Uses same parameters as create
 */
export const editExternalToolCourses = <ThrowOnError extends boolean = false>(options: Options<EditExternalToolCoursesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/external_tools/{external_tool_id}',
        ...options
    });
};

/**
 * List features
 * A paginated list of all features that apply to a given Account, Course, or User.
 */
export const listFeaturesCourses = <ThrowOnError extends boolean = false>(options: Options<ListFeaturesCoursesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListFeaturesCoursesResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/features',
        ...options
    });
};

/**
 * List enabled features
 * A paginated list of all features that are enabled on a given Account, Course, or User.
 * Only the feature names are returned.
 */
export const listEnabledFeaturesCourses = <ThrowOnError extends boolean = false>(options: Options<ListEnabledFeaturesCoursesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/features/enabled',
        ...options
    });
};

/**
 * Remove feature flag
 * Remove feature flag for a given Account, Course, or User.  (Note that the flag must
 * be defined on the Account, Course, or User directly.)  The object will then inherit
 * the feature flags from a higher account, if any exist.  If this flag was 'on' or 'off',
 * then lower-level account flags that were masked by this one will apply again.
 */
export const removeFeatureFlagCourses = <ThrowOnError extends boolean = false>(options: Options<RemoveFeatureFlagCoursesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<RemoveFeatureFlagCoursesResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/features/flags/{feature}',
        ...options
    });
};

/**
 * Get feature flag
 * Get the feature flag that applies to a given Account, Course, or User.
 * The flag may be defined on the object, or it may be inherited from a parent
 * account. You can look at the context_id and context_type of the returned object
 * to determine which is the case. If these fields are missing, then the object
 * is the global Canvas default.
 */
export const getFeatureFlagCourses = <ThrowOnError extends boolean = false>(options: Options<GetFeatureFlagCoursesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetFeatureFlagCoursesResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/features/flags/{feature}',
        ...options
    });
};

/**
 * Set feature flag
 * Set a feature flag for a given Account, Course, or User. This call will fail if a parent account sets
 * a feature flag for the same feature in any state other than "allowed".
 */
export const setFeatureFlagCourses = <ThrowOnError extends boolean = false>(options: Options<SetFeatureFlagCoursesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<SetFeatureFlagCoursesResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/features/flags/{feature}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List files
 * Returns the paginated list of files for the folder or course.
 */
export const listFilesCourses = <ThrowOnError extends boolean = false>(options: Options<ListFilesCoursesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListFilesCoursesResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/courses/{course_id}/files',
        ...options
    });
};

/**
 * Get quota information
 * Returns the total and used storage quota for the course, group, or user.
 */
export const getQuotaInformationCourses = <ThrowOnError extends boolean = false>(options: Options<GetQuotaInformationCoursesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/files/quota',
        ...options
    });
};

/**
 * Get file
 * Returns the standard attachment json object
 */
export const getFileCourses = <ThrowOnError extends boolean = false>(options: Options<GetFileCoursesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetFileCoursesResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/courses/{course_id}/files/{id}',
        ...options
    });
};

/**
 * List all folders
 * Returns the paginated list of all folders for the given context. This will
 * be returned as a flat list containing all subfolders as well.
 */
export const listAllFoldersCourses = <ThrowOnError extends boolean = false>(options: Options<ListAllFoldersCoursesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListAllFoldersCoursesResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/folders',
        ...options
    });
};

/**
 * Create folder
 * Creates a folder in the specified context
 */
export const createFolderCourses = <ThrowOnError extends boolean = false>(options: Options<CreateFolderCoursesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateFolderCoursesResponse, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/folders',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

/**
 * Resolve path
 * Given the full path to a folder, returns a list of all Folders in the path hierarchy,
 * starting at the root folder, and ending at the requested folder. The given path is
 * relative to the context's root folder and does not include the root folder's name
 * (e.g., "course files"). If an empty path is given, the context's root folder alone
 * is returned. Otherwise, if no folder exists with the given full path, a Not Found
 * error is returned.
 */
export const resolvePathCourses = <ThrowOnError extends boolean = false>(options: Options<ResolvePathCoursesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ResolvePathCoursesResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/folders/by_path',
        ...options
    });
};

/**
 * Resolve path
 * Given the full path to a folder, returns a list of all Folders in the path hierarchy,
 * starting at the root folder, and ending at the requested folder. The given path is
 * relative to the context's root folder and does not include the root folder's name
 * (e.g., "course files"). If an empty path is given, the context's root folder alone
 * is returned. Otherwise, if no folder exists with the given full path, a Not Found
 * error is returned.
 */
export const resolvePathCoursesFullPath = <ThrowOnError extends boolean = false>(options: Options<ResolvePathCoursesFullPathData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ResolvePathCoursesFullPathResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/folders/by_path/*full_path',
        ...options
    });
};

/**
 * Get folder
 * Returns the details for a folder
 *
 * You can get the root folder from a context by using 'root' as the :id.
 * For example, you could get the root folder for a course like:
 */
export const getFolderCourses = <ThrowOnError extends boolean = false>(options: Options<GetFolderCoursesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetFolderCoursesResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/folders/{id}',
        ...options
    });
};

/**
 * Show front page
 * Retrieve the content of the front page
 */
export const showFrontPageCourses = <ThrowOnError extends boolean = false>(options: Options<ShowFrontPageCoursesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ShowFrontPageCoursesResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/front_page',
        ...options
    });
};

/**
 * Update/create front page
 * Update the title or contents of the front page
 */
export const updateCreateFrontPageCourses = <ThrowOnError extends boolean = false>(options: Options<UpdateCreateFrontPageCoursesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateCreateFrontPageCoursesResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/front_page',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Days in gradebook history for this course
 * Returns a map of dates to grader/assignment groups
 */
export const daysInGradebookHistoryForThisCourse = <ThrowOnError extends boolean = false>(options: Options<DaysInGradebookHistoryForThisCourseData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<DaysInGradebookHistoryForThisCourseResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/gradebook_history/days',
        ...options
    });
};

/**
 * List uncollated submission versions
 * Gives a paginated, uncollated list of submission versions for all matching
 * submissions in the context. This SubmissionVersion objects will not include
 * the +new_grade+ or +previous_grade+ keys, only the +grade+; same for
 * +graded_at+ and +grader+.
 */
export const listUncollatedSubmissionVersions = <ThrowOnError extends boolean = false>(options: Options<ListUncollatedSubmissionVersionsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListUncollatedSubmissionVersionsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/gradebook_history/feed',
        ...options
    });
};

/**
 * Details for a given date in gradebook history for this course
 * Returns the graders who worked on this day, along with the assignments they worked on.
 * More details can be obtained by selecting a grader and assignment and calling the
 * 'submissions' api endpoint for a given date.
 */
export const detailsForGivenDateInGradebookHistoryForThisCourse = <ThrowOnError extends boolean = false>(options: Options<DetailsForGivenDateInGradebookHistoryForThisCourseData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<DetailsForGivenDateInGradebookHistoryForThisCourseResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/gradebook_history/{date}',
        ...options
    });
};

/**
 * Lists submissions
 * Gives a nested list of submission versions
 */
export const listsSubmissions = <ThrowOnError extends boolean = false>(options: Options<ListsSubmissionsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListsSubmissionsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/gradebook_history/{date}/graders/{grader_id}/assignments/{assignment_id}/submissions',
        ...options
    });
};

/**
 * List grading periods
 * Returns the paginated list of grading periods for the current course.
 */
export const listGradingPeriodsCourses = <ThrowOnError extends boolean = false>(options: Options<ListGradingPeriodsCoursesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListGradingPeriodsCoursesResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/grading_periods',
        ...options
    });
};

/**
 * Delete a grading period
 * <b>204 No Content</b> response code is returned if the deletion was
 * successful.
 */
export const deleteGradingPeriodCourses = <ThrowOnError extends boolean = false>(options: Options<DeleteGradingPeriodCoursesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/grading_periods/{id}',
        ...options
    });
};

/**
 * Get a single grading period
 * Returns the grading period with the given id
 */
export const getSingleGradingPeriod = <ThrowOnError extends boolean = false>(options: Options<GetSingleGradingPeriodData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/grading_periods/{id}',
        ...options
    });
};

/**
 * Update a single grading period
 * Update an existing grading period.
 */
export const updateSingleGradingPeriod = <ThrowOnError extends boolean = false>(options: Options<UpdateSingleGradingPeriodData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/grading_periods/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List the grading standards available in a context.
 * Returns the paginated list of grading standards for the given context that are visible to the user.
 */
export const listGradingStandardsAvailableInContextCourses = <ThrowOnError extends boolean = false>(options: Options<ListGradingStandardsAvailableInContextCoursesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListGradingStandardsAvailableInContextCoursesResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/grading_standards',
        ...options
    });
};

/**
 * Create a new grading standard
 * Create a new grading standard
 *
 * If grading_scheme_entry arguments are omitted, then a default grading scheme
 * will be set. The default scheme is as follows:
 * "A" : 94,
 * "A-" : 90,
 * "B+" : 87,
 * "B" : 84,
 * "B-" : 80,
 * "C+" : 77,
 * "C" : 74,
 * "C-" : 70,
 * "D+" : 67,
 * "D" : 64,
 * "D-" : 61,
 * "F" : 0,
 */
export const createNewGradingStandardCourses = <ThrowOnError extends boolean = false>(options: Options<CreateNewGradingStandardCoursesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateNewGradingStandardCoursesResponse, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/grading_standards',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

/**
 * Get a single grading standard in a context.
 * Returns a grading standard for the given context that is visible to the user.
 */
export const getSingleGradingStandardInContextCourses = <ThrowOnError extends boolean = false>(options: Options<GetSingleGradingStandardInContextCoursesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetSingleGradingStandardInContextCoursesResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/grading_standards/{grading_standard_id}',
        ...options
    });
};

/**
 * List group categories for a context
 * Returns a paginated list of group categories in a context
 */
export const listGroupCategoriesForContextCourses = <ThrowOnError extends boolean = false>(options: Options<ListGroupCategoriesForContextCoursesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListGroupCategoriesForContextCoursesResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/group_categories',
        ...options
    });
};

/**
 * Create a Group Category
 * Create a new group category
 */
export const createGroupCategoryCourses = <ThrowOnError extends boolean = false>(options: Options<CreateGroupCategoryCoursesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateGroupCategoryCoursesResponse, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/group_categories',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

/**
 * List the groups available in a context.
 * Returns the paginated list of active groups in the given context that are visible to user.
 */
export const listGroupsAvailableInContextCourses = <ThrowOnError extends boolean = false>(options: Options<ListGroupsAvailableInContextCoursesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListGroupsAvailableInContextCoursesResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/courses/{course_id}/groups',
        ...options
    });
};

/**
 * List live assessments
 * Returns a paginated list of live assessments.
 */
export const listLiveAssessments = <ThrowOnError extends boolean = false>(options: Options<ListLiveAssessmentsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/live_assessments',
        ...options
    });
};

/**
 * Create or find a live assessment
 * Creates or finds an existing live assessment with the given key and aligns it with
 * the linked outcome
 */
export const createOrFindLiveAssessment = <ThrowOnError extends boolean = false>(options: Options<CreateOrFindLiveAssessmentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/live_assessments',
        ...options
    });
};

/**
 * List live assessment results
 * Returns a paginated list of live assessment results
 */
export const listLiveAssessmentResults = <ThrowOnError extends boolean = false>(options: Options<ListLiveAssessmentResultsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/live_assessments/{assessment_id}/results',
        ...options
    });
};

/**
 * Create live assessment results
 * Creates live assessment results and adds them to a live assessment
 */
export const createLiveAssessmentResults = <ThrowOnError extends boolean = false>(options: Options<CreateLiveAssessmentResultsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/live_assessments/{assessment_id}/results',
        ...options
    });
};

/**
 * Get module item sequence
 * Given an asset in a course, find the ModuleItem it belongs to, the previous and next Module Items
 * in the course sequence, and also any applicable mastery path rules
 */
export const getModuleItemSequence = <ThrowOnError extends boolean = false>(options: Options<GetModuleItemSequenceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetModuleItemSequenceResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/module_item_sequence',
        ...options
    });
};

/**
 * List modules
 * A paginated list of the modules in a course
 */
export const listModules = <ThrowOnError extends boolean = false>(options: Options<ListModulesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListModulesResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/courses/{course_id}/modules',
        ...options
    });
};

/**
 * Create a module
 * Create and return a new module
 */
export const createModule = <ThrowOnError extends boolean = false>(options: Options<CreateModuleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateModuleResponse, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/modules',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

/**
 * Delete module
 * Delete a module
 */
export const deleteModule = <ThrowOnError extends boolean = false>(options: Options<DeleteModuleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteModuleResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/modules/{id}',
        ...options
    });
};

/**
 * Show module
 * Get information about a single module
 */
export const showModule = <ThrowOnError extends boolean = false>(options: Options<ShowModuleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ShowModuleResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/courses/{course_id}/modules/{id}',
        ...options
    });
};

/**
 * Update a module
 * Update and return an existing module
 */
export const updateModule = <ThrowOnError extends boolean = false>(options: Options<UpdateModuleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateModuleResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/modules/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Re-lock module progressions
 * Resets module progressions to their default locked state and
 * recalculates them based on the current requirements.
 *
 * Adding progression requirements to an active course will not lock students
 * out of modules they have already unlocked unless this action is called.
 */
export const reLockModuleProgressions = <ThrowOnError extends boolean = false>(options: Options<ReLockModuleProgressionsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<ReLockModuleProgressionsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/modules/{id}/relock',
        ...options
    });
};

/**
 * List module items
 * A paginated list of the items in a module
 */
export const listModuleItems = <ThrowOnError extends boolean = false>(options: Options<ListModuleItemsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListModuleItemsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/courses/{course_id}/modules/{module_id}/items',
        ...options
    });
};

/**
 * Create a module item
 * Create and return a new module item
 */
export const createModuleItem = <ThrowOnError extends boolean = false>(options: Options<CreateModuleItemData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateModuleItemResponse, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/modules/{module_id}/items',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

/**
 * Delete module item
 * Delete a module item
 */
export const deleteModuleItem = <ThrowOnError extends boolean = false>(options: Options<DeleteModuleItemData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteModuleItemResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/modules/{module_id}/items/{id}',
        ...options
    });
};

/**
 * Show module item
 * Get information about a single module item
 */
export const showModuleItem = <ThrowOnError extends boolean = false>(options: Options<ShowModuleItemData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ShowModuleItemResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/courses/{course_id}/modules/{module_id}/items/{id}',
        ...options
    });
};

/**
 * Update a module item
 * Update and return an existing module item
 */
export const updateModuleItem = <ThrowOnError extends boolean = false>(options: Options<UpdateModuleItemData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateModuleItemResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/modules/{module_id}/items/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Mark module item as done/not done
 * Mark a module item as done/not done. Use HTTP method PUT to mark as done,
 * and DELETE to mark as not done.
 */
export const markModuleItemAsDoneNotDone = <ThrowOnError extends boolean = false>(options: Options<MarkModuleItemAsDoneNotDoneData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/modules/{module_id}/items/{id}/done',
        ...options
    });
};

/**
 * Mark module item read
 * Fulfills "must view" requirement for a module item. It is generally not necessary to do this explicitly,
 * but it is provided for applications that need to access external content directly (bypassing the html_url
 * redirect that normally allows Canvas to fulfill "must view" requirements).
 *
 * This endpoint cannot be used to complete requirements on locked or unpublished module items.
 */
export const markModuleItemRead = <ThrowOnError extends boolean = false>(options: Options<MarkModuleItemReadData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/modules/{module_id}/items/{id}/mark_read',
        ...options
    });
};

/**
 * Select a mastery path
 * Select a mastery path when module item includes several possible paths.
 * Requires Mastery Paths feature to be enabled.  Returns a compound document
 * with the assignments included in the given path and any module items
 * related to those assignments
 */
export const selectMasteryPath = <ThrowOnError extends boolean = false>(options: Options<SelectMasteryPathData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/modules/{module_id}/items/{id}/select_mastery_path',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

/**
 * Get aligned assignments for an outcome in a course for a particular student
 */
export const getAlignedAssignmentsForOutcomeInCourseForParticularStudent = <ThrowOnError extends boolean = false>(options: Options<GetAlignedAssignmentsForOutcomeInCourseForParticularStudentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetAlignedAssignmentsForOutcomeInCourseForParticularStudentResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/outcome_alignments',
        ...options
    });
};

/**
 * Get all outcome links for context
 */
export const getAllOutcomeLinksForContextCourses = <ThrowOnError extends boolean = false>(options: Options<GetAllOutcomeLinksForContextCoursesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetAllOutcomeLinksForContextCoursesResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/outcome_group_links',
        ...options
    });
};

/**
 * Get all outcome groups for context
 */
export const getAllOutcomeGroupsForContextCourses = <ThrowOnError extends boolean = false>(options: Options<GetAllOutcomeGroupsForContextCoursesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetAllOutcomeGroupsForContextCoursesResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/outcome_groups',
        ...options
    });
};

/**
 * Delete an outcome group
 * Deleting an outcome group deletes descendant outcome groups and outcome
 * links. The linked outcomes themselves are only deleted if all links to the
 * outcome were deleted.
 *
 * Aligned outcomes cannot be deleted; as such, if all remaining links to an
 * aligned outcome are included in this group's descendants, the group
 * deletion will fail.
 */
export const deleteOutcomeGroupCourses = <ThrowOnError extends boolean = false>(options: Options<DeleteOutcomeGroupCoursesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteOutcomeGroupCoursesResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/outcome_groups/{id}',
        ...options
    });
};

/**
 * Show an outcome group
 */
export const showOutcomeGroupCourses = <ThrowOnError extends boolean = false>(options: Options<ShowOutcomeGroupCoursesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ShowOutcomeGroupCoursesResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/outcome_groups/{id}',
        ...options
    });
};

/**
 * Update an outcome group
 * Modify an existing outcome group. Fields not provided are left as is;
 * unrecognized fields are ignored.
 *
 * When changing the parent outcome group, the new parent group must belong to
 * the same context as this outcome group, and must not be a descendant of
 * this outcome group (i.e. no cycles allowed).
 */
export const updateOutcomeGroupCourses = <ThrowOnError extends boolean = false>(options: Options<UpdateOutcomeGroupCoursesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateOutcomeGroupCoursesResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/outcome_groups/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Import an outcome group
 * Creates a new subgroup of the outcome group with the same title and
 * description as the source group, then creates links in that new subgroup to
 * the same outcomes that are linked in the source group. Recurses on the
 * subgroups of the source group, importing them each in turn into the new
 * subgroup.
 *
 * Allows you to copy organizational structure, but does not create copies of
 * the outcomes themselves, only new links.
 *
 * The source group must be either global, from the same context as this
 * outcome group, or from an associated account. The source group cannot be
 * the root outcome group of its context.
 */
export const importOutcomeGroupCourses = <ThrowOnError extends boolean = false>(options: Options<ImportOutcomeGroupCoursesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ImportOutcomeGroupCoursesResponse, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/outcome_groups/{id}/import',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

/**
 * List linked outcomes
 * A paginated list of the immediate OutcomeLink children of the outcome group.
 */
export const listLinkedOutcomesCourses = <ThrowOnError extends boolean = false>(options: Options<ListLinkedOutcomesCoursesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListLinkedOutcomesCoursesResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/outcome_groups/{id}/outcomes',
        ...options
    });
};

/**
 * Create/link an outcome
 * Link an outcome into the outcome group. The outcome to link can either be
 * specified by a PUT to the link URL for a specific outcome (the outcome_id
 * in the PUT URLs) or by supplying the information for a new outcome (title,
 * description, ratings, mastery_points) in a POST to the collection.
 *
 * If linking an existing outcome, the outcome_id must identify an outcome
 * available to this context; i.e. an outcome owned by this group's context,
 * an outcome owned by an associated account, or a global outcome. With
 * outcome_id present, any other parameters (except move_from) are ignored.
 *
 * If defining a new outcome, the outcome is created in the outcome group's
 * context using the provided title, description, ratings, and mastery points;
 * the title is required but all other fields are optional. The new outcome
 * is then linked into the outcome group.
 *
 * If ratings are provided when creating a new outcome, an embedded rubric
 * criterion is included in the new outcome. This criterion's mastery_points
 * default to the maximum points in the highest rating if not specified in the
 * mastery_points parameter. Any ratings lacking a description are given a
 * default of "No description". Any ratings lacking a point value are given a
 * default of 0. If no ratings are provided, the mastery_points parameter is
 * ignored.
 */
export const createLinkOutcomeCourses = <ThrowOnError extends boolean = false>(options: Options<CreateLinkOutcomeCoursesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateLinkOutcomeCoursesResponse, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/outcome_groups/{id}/outcomes',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

/**
 * Unlink an outcome
 * Unlinking an outcome only deletes the outcome itself if this was the last
 * link to the outcome in any group in any context. Aligned outcomes cannot be
 * deleted; as such, if this is the last link to an aligned outcome, the
 * unlinking will fail.
 */
export const unlinkOutcomeCourses = <ThrowOnError extends boolean = false>(options: Options<UnlinkOutcomeCoursesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<UnlinkOutcomeCoursesResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/outcome_groups/{id}/outcomes/{outcome_id}',
        ...options
    });
};

/**
 * Create/link an outcome
 * Link an outcome into the outcome group. The outcome to link can either be
 * specified by a PUT to the link URL for a specific outcome (the outcome_id
 * in the PUT URLs) or by supplying the information for a new outcome (title,
 * description, ratings, mastery_points) in a POST to the collection.
 *
 * If linking an existing outcome, the outcome_id must identify an outcome
 * available to this context; i.e. an outcome owned by this group's context,
 * an outcome owned by an associated account, or a global outcome. With
 * outcome_id present, any other parameters (except move_from) are ignored.
 *
 * If defining a new outcome, the outcome is created in the outcome group's
 * context using the provided title, description, ratings, and mastery points;
 * the title is required but all other fields are optional. The new outcome
 * is then linked into the outcome group.
 *
 * If ratings are provided when creating a new outcome, an embedded rubric
 * criterion is included in the new outcome. This criterion's mastery_points
 * default to the maximum points in the highest rating if not specified in the
 * mastery_points parameter. Any ratings lacking a description are given a
 * default of "No description". Any ratings lacking a point value are given a
 * default of 0. If no ratings are provided, the mastery_points parameter is
 * ignored.
 */
export const createLinkOutcomeCoursesOutcomeId = <ThrowOnError extends boolean = false>(options: Options<CreateLinkOutcomeCoursesOutcomeIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<CreateLinkOutcomeCoursesOutcomeIdResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/outcome_groups/{id}/outcomes/{outcome_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List subgroups
 * A paginated list of the immediate OutcomeGroup children of the outcome group.
 */
export const listSubgroupsCourses = <ThrowOnError extends boolean = false>(options: Options<ListSubgroupsCoursesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListSubgroupsCoursesResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/outcome_groups/{id}/subgroups',
        ...options
    });
};

/**
 * Create a subgroup
 * Creates a new empty subgroup under the outcome group with the given title
 * and description.
 */
export const createSubgroupCourses = <ThrowOnError extends boolean = false>(options: Options<CreateSubgroupCoursesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateSubgroupCoursesResponse, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/outcome_groups/{id}/subgroups',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

/**
 * Import Outcomes
 * Import outcomes into Canvas.
 *
 * For more information on the format that's expected here, please see the
 * "Outcomes CSV" section in the API docs.
 */
export const importOutcomesCourses = <ThrowOnError extends boolean = false>(options: Options<ImportOutcomesCoursesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ImportOutcomesCoursesResponse, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/outcome_imports',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

/**
 * Get Outcome import status
 * Get the status of an already created Outcome import. Pass 'latest' for the outcome import id
 * for the latest import.
 *
 * Examples:
 * curl 'https://<canvas>/api/v1/accounts/<account_id>/outcome_imports/<outcome_import_id>' \
 * -H "Authorization: Bearer <token>"
 * curl 'https://<canvas>/api/v1/courses/<course_id>/outcome_imports/<outcome_import_id>' \
 * -H "Authorization: Bearer <token>"
 */
export const getOutcomeImportStatusCourses = <ThrowOnError extends boolean = false>(options: Options<GetOutcomeImportStatusCoursesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetOutcomeImportStatusCoursesResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/outcome_imports/{id}',
        ...options
    });
};

/**
 * Get outcome results
 * Gets the outcome results for users and outcomes in the specified context.
 */
export const getOutcomeResults = <ThrowOnError extends boolean = false>(options: Options<GetOutcomeResultsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetOutcomeResultsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/courses/{course_id}/outcome_results',
        ...options
    });
};

/**
 * Get outcome result rollups
 * Gets the outcome rollups for the users and outcomes in the specified context.
 */
export const getOutcomeResultRollups = <ThrowOnError extends boolean = false>(options: Options<GetOutcomeResultRollupsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetOutcomeResultRollupsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/courses/{course_id}/outcome_rollups',
        ...options
    });
};

/**
 * List pages
 * A paginated list of the wiki pages associated with a course or group
 */
export const listPagesCourses = <ThrowOnError extends boolean = false>(options: Options<ListPagesCoursesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListPagesCoursesResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/pages',
        ...options
    });
};

/**
 * Create page
 * Create a new wiki page
 */
export const createPageCourses = <ThrowOnError extends boolean = false>(options: Options<CreatePageCoursesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreatePageCoursesResponse, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/pages',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

/**
 * Delete page
 * Delete a wiki page
 */
export const deletePageCourses = <ThrowOnError extends boolean = false>(options: Options<DeletePageCoursesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeletePageCoursesResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/pages/{url}',
        ...options
    });
};

/**
 * Show page
 * Retrieve the content of a wiki page
 */
export const showPageCourses = <ThrowOnError extends boolean = false>(options: Options<ShowPageCoursesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ShowPageCoursesResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/pages/{url}',
        ...options
    });
};

/**
 * Update/create page
 * Update the title or contents of a wiki page
 */
export const updateCreatePageCourses = <ThrowOnError extends boolean = false>(options: Options<UpdateCreatePageCoursesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateCreatePageCoursesResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/pages/{url}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Duplicate page
 * Duplicate a wiki page
 */
export const duplicatePage = <ThrowOnError extends boolean = false>(options: Options<DuplicatePageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<DuplicatePageResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/pages/{url}/duplicate',
        ...options
    });
};

/**
 * List revisions
 * A paginated list of the revisions of a page. Callers must have update rights on the page in order to see page history.
 */
export const listRevisionsCourses = <ThrowOnError extends boolean = false>(options: Options<ListRevisionsCoursesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListRevisionsCoursesResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/pages/{url}/revisions',
        ...options
    });
};

/**
 * Show revision
 * Retrieve the metadata and optionally content of a revision of the page.
 * Note that retrieving historic versions of pages requires edit rights.
 */
export const showRevisionCoursesLatest = <ThrowOnError extends boolean = false>(options: Options<ShowRevisionCoursesLatestData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ShowRevisionCoursesLatestResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/pages/{url}/revisions/latest',
        ...options
    });
};

/**
 * Show revision
 * Retrieve the metadata and optionally content of a revision of the page.
 * Note that retrieving historic versions of pages requires edit rights.
 */
export const showRevisionCoursesRevisionId = <ThrowOnError extends boolean = false>(options: Options<ShowRevisionCoursesRevisionIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ShowRevisionCoursesRevisionIdResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/pages/{url}/revisions/{revision_id}',
        ...options
    });
};

/**
 * Revert to revision
 * Revert a page to a prior revision.
 */
export const revertToRevisionCourses = <ThrowOnError extends boolean = false>(options: Options<RevertToRevisionCoursesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RevertToRevisionCoursesResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/pages/{url}/revisions/{revision_id}',
        ...options
    });
};

/**
 * Permissions
 * Returns permission information for the calling user in the given course.
 * See also the {api:AccountsController#permissions Account} and
 * {api:GroupsController#permissions Group} counterparts.
 */
export const coursePermission = <ThrowOnError extends boolean = false>(options: Options<CoursePermissionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<CoursePermissionResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/courses/{course_id}/permissions',
        ...options
    });
};

/**
 * List potential members
 * A paginated list of the users who can potentially be added to a
 * collaboration in the given context.
 *
 * For courses, this consists of all enrolled users.  For groups, it is comprised of the
 * group members plus the admins of the course containing the group.
 */
export const listPotentialMembersCourses = <ThrowOnError extends boolean = false>(options: Options<ListPotentialMembersCoursesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListPotentialMembersCoursesResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/potential_collaborators',
        ...options
    });
};

/**
 * Preview processed html
 * Preview html content processed for this course
 */
export const previewProcessedHtmlCourse = <ThrowOnError extends boolean = false>(options: Options<PreviewProcessedHtmlCourseData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/preview_html',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

/**
 * Set extensions for student quiz submissions
 * <b>Responses</b>
 *
 * * <b>200 OK</b> if the request was successful
 * * <b>403 Forbidden</b> if you are not allowed to extend quizzes for this course
 */
export const setExtensionsForStudentQuizSubmissions = <ThrowOnError extends boolean = false>(options: Options<SetExtensionsForStudentQuizSubmissionsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/quiz_extensions',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

/**
 * List quizzes in a course
 * Returns the paginated list of Quizzes in this course.
 */
export const listQuizzesInCourse = <ThrowOnError extends boolean = false>(options: Options<ListQuizzesInCourseData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListQuizzesInCourseResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/quizzes',
        ...options
    });
};

/**
 * Create a quiz
 * Create a new quiz for this course.
 */
export const createQuiz = <ThrowOnError extends boolean = false>(options: Options<CreateQuizData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateQuizResponse, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/quizzes',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

/**
 * Retrieve assignment-overridden dates for quizzes
 * Retrieve the actual due-at, unlock-at, and available-at dates for quizzes
 * based on the assignment overrides active for the current API user.
 */
export const retrieveAssignmentOverriddenDatesForQuizzes = <ThrowOnError extends boolean = false>(options: Options<RetrieveAssignmentOverriddenDatesForQuizzesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RetrieveAssignmentOverriddenDatesForQuizzesResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/courses/{course_id}/quizzes/assignment_overrides',
        ...options
    });
};

/**
 * Delete a quiz
 */
export const deleteQuiz = <ThrowOnError extends boolean = false>(options: Options<DeleteQuizData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteQuizResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/quizzes/{id}',
        ...options
    });
};

/**
 * Get a single quiz
 * Returns the quiz with the given id.
 */
export const getSingleQuiz = <ThrowOnError extends boolean = false>(options: Options<GetSingleQuizData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetSingleQuizResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/quizzes/{id}',
        ...options
    });
};

/**
 * Edit a quiz
 * Modify an existing quiz. See the documentation for quiz creation.
 *
 * Additional arguments:
 */
export const editQuiz = <ThrowOnError extends boolean = false>(options: Options<EditQuizData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<EditQuizResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/quizzes/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Reorder quiz items
 * Change order of the quiz questions or groups within the quiz
 *
 * <b>204 No Content</b> response code is returned if the reorder was successful.
 */
export const reorderQuizItems = <ThrowOnError extends boolean = false>(options: Options<ReorderQuizItemsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/quizzes/{id}/reorder',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

/**
 * Send a message to unsubmitted or submitted users for the quiz
 * {
 * "body": {
 * "type": "string",
 * "description": "message body of the conversation to be created",
 * "example": "Please take the quiz."
 * },
 * "recipients": {
 * "type": "string",
 * "description": "Who to send the message to. May be either 'submitted' or 'unsubmitted'",
 * "example": "submitted"
 * },
 * "subject": {
 * "type": "string",
 * "description": "Subject of the new Conversation created",
 * "example": "ATTN: Quiz 101 Students"
 * }
 * }
 */
export const sendMessageToUnsubmittedOrSubmittedUsersForQuiz = <ThrowOnError extends boolean = false>(options: Options<SendMessageToUnsubmittedOrSubmittedUsersForQuizData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/quizzes/{id}/submission_users/message',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

/**
 * Validate quiz access code
 * Accepts an access code and returns a boolean indicating whether that access code is correct
 */
export const validateQuizAccessCode = <ThrowOnError extends boolean = false>(options: Options<ValidateQuizAccessCodeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ValidateQuizAccessCodeResponse, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/quizzes/{id}/validate_access_code',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

/**
 * Set extensions for student quiz submissions
 * <b>Responses</b>
 *
 * * <b>200 OK</b> if the request was successful
 * * <b>403 Forbidden</b> if you are not allowed to extend quizzes for this course
 */
export const setExtensionsForStudentQuiz = <ThrowOnError extends boolean = false>(options: Options<SetExtensionsForStudentQuizData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/quizzes/{quiz_id}/extensions',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

/**
 * Create a question group
 * Create a new question group for this quiz
 *
 * <b>201 Created</b> response code is returned if the creation was successful.
 */
export const createQuestionGroup = <ThrowOnError extends boolean = false>(options: Options<CreateQuestionGroupData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/quizzes/{quiz_id}/groups',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

/**
 * Delete a question group
 * Delete a question group
 *
 * <b>204 No Content<b> response code is returned if the deletion was successful.
 */
export const deleteQuestionGroup = <ThrowOnError extends boolean = false>(options: Options<DeleteQuestionGroupData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/quizzes/{quiz_id}/groups/{id}',
        ...options
    });
};

/**
 * Get a single quiz group
 * Returns details of the quiz group with the given id.
 */
export const getSingleQuizGroup = <ThrowOnError extends boolean = false>(options: Options<GetSingleQuizGroupData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetSingleQuizGroupResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/quizzes/{quiz_id}/groups/{id}',
        ...options
    });
};

/**
 * Update a question group
 * Update a question group
 */
export const updateQuestionGroup = <ThrowOnError extends boolean = false>(options: Options<UpdateQuestionGroupData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/quizzes/{quiz_id}/groups/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Reorder question groups
 * Change the order of the quiz questions within the group
 *
 * <b>204 No Content<b> response code is returned if the reorder was successful.
 */
export const reorderQuestionGroups = <ThrowOnError extends boolean = false>(options: Options<ReorderQuestionGroupsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/quizzes/{quiz_id}/groups/{id}/reorder',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

/**
 * Get available quiz IP filters.
 * Get a list of available IP filters for this Quiz.
 *
 * <b>200 OK</b> response code is returned if the request was successful.
 */
export const getAvailableQuizIpFilters = <ThrowOnError extends boolean = false>(options: Options<GetAvailableQuizIpFiltersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/quizzes/{quiz_id}/ip_filters',
        ...options
    });
};

/**
 * List questions in a quiz or a submission
 * Returns the paginated list of QuizQuestions in this quiz.
 */
export const listQuestionsInQuizOrSubmission = <ThrowOnError extends boolean = false>(options: Options<ListQuestionsInQuizOrSubmissionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListQuestionsInQuizOrSubmissionResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/quizzes/{quiz_id}/questions',
        ...options
    });
};

/**
 * Create a single quiz question
 * Create a new quiz question for this quiz
 */
export const createSingleQuizQuestion = <ThrowOnError extends boolean = false>(options: Options<CreateSingleQuizQuestionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateSingleQuizQuestionResponse, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/quizzes/{quiz_id}/questions',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

/**
 * Delete a quiz question
 * <b>204 No Content</b> response code is returned if the deletion was successful.
 */
export const deleteQuizQuestion = <ThrowOnError extends boolean = false>(options: Options<DeleteQuizQuestionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/quizzes/{quiz_id}/questions/{id}',
        ...options
    });
};

/**
 * Get a single quiz question
 * Returns the quiz question with the given id
 */
export const getSingleQuizQuestion = <ThrowOnError extends boolean = false>(options: Options<GetSingleQuizQuestionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetSingleQuizQuestionResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/quizzes/{quiz_id}/questions/{id}',
        ...options
    });
};

/**
 * Update an existing quiz question
 * Updates an existing quiz question for this quiz
 */
export const updateExistingQuizQuestion = <ThrowOnError extends boolean = false>(options: Options<UpdateExistingQuizQuestionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateExistingQuizQuestionResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/quizzes/{quiz_id}/questions/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Retrieve all quiz reports
 * Returns a list of all available reports.
 */
export const retrieveAllQuizReports = <ThrowOnError extends boolean = false>(options: Options<RetrieveAllQuizReportsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RetrieveAllQuizReportsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/quizzes/{quiz_id}/reports',
        ...options
    });
};

/**
 * Create a quiz report
 * Create and return a new report for this quiz. If a previously
 * generated report matches the arguments and is still current (i.e.
 * there have been no new submissions), it will be returned.
 *
 * *Responses*
 *
 * * <code>400 Bad Request</code> if the specified report type is invalid
 * * <code>409 Conflict</code> if a quiz report of the specified type is already being
 * generated
 */
export const createQuizReport = <ThrowOnError extends boolean = false>(options: Options<CreateQuizReportData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateQuizReportResponse, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/quizzes/{quiz_id}/reports',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

/**
 * Abort the generation of a report, or remove a previously generated one
 * This API allows you to cancel a previous request you issued for a report to
 * be generated. Or in the case of an already generated report, you'd like to
 * remove it, perhaps to generate it another time with an updated version that
 * provides new features.
 *
 * You must check the report's generation status before attempting to use this
 * interface. See the "workflow_state" property of the QuizReport's Progress
 * object for more information. Only when the progress reports itself in a
 * "queued" state can the generation be aborted.
 *
 * *Responses*
 *
 * - <code>204 No Content</code> if your request was accepted
 * - <code>422 Unprocessable Entity</code> if the report is not being generated
 * or can not be aborted at this stage
 */
export const abortGenerationOfReportOrRemovePreviouslyGeneratedOne = <ThrowOnError extends boolean = false>(options: Options<AbortGenerationOfReportOrRemovePreviouslyGeneratedOneData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/quizzes/{quiz_id}/reports/{id}',
        ...options
    });
};

/**
 * Get a quiz report
 * Returns the data for a single quiz report.
 */
export const getQuizReport = <ThrowOnError extends boolean = false>(options: Options<GetQuizReportData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetQuizReportResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/quizzes/{quiz_id}/reports/{id}',
        ...options
    });
};

/**
 * Fetching the latest quiz statistics
 * This endpoint provides statistics for all quiz versions, or for a specific
 * quiz version, in which case the output is guaranteed to represent the
 * _latest_ and most current version of the quiz.
 *
 * <b>200 OK</b> response code is returned if the request was successful.
 */
export const fetchingLatestQuizStatistics = <ThrowOnError extends boolean = false>(options: Options<FetchingLatestQuizStatisticsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/quizzes/{quiz_id}/statistics',
        ...options
    });
};

/**
 * Get the quiz submission.
 * Get the submission for this quiz for the current user.
 *
 * <b>200 OK</b> response code is returned if the request was successful.
 */
export const getQuizSubmission = <ThrowOnError extends boolean = false>(options: Options<GetQuizSubmissionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/courses/{course_id}/quizzes/{quiz_id}/submission',
        ...options
    });
};

/**
 * Get all quiz submissions.
 * Get a list of all submissions for this quiz. Users who can view or manage
 * grades for a course will have submissions from multiple users returned. A
 * user who can only submit will have only their own submissions returned. When
 * a user has an in-progress submission, only that submission is returned. When
 * there isn't an in-progress quiz_submission, all completed submissions,
 * including previous attempts, are returned.
 *
 * <b>200 OK</b> response code is returned if the request was successful.
 */
export const getAllQuizSubmissions = <ThrowOnError extends boolean = false>(options: Options<GetAllQuizSubmissionsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/courses/{course_id}/quizzes/{quiz_id}/submissions',
        ...options
    });
};

/**
 * Create the quiz submission (start a quiz-taking session)
 * Start taking a Quiz by creating a QuizSubmission which you can use to answer
 * questions and submit your answers.
 *
 * <b>Responses</b>
 *
 * * <b>200 OK</b> if the request was successful
 * * <b>400 Bad Request</b> if the quiz is locked
 * * <b>403 Forbidden</b> if an invalid access code is specified
 * * <b>403 Forbidden</b> if the Quiz's IP filter restriction does not pass
 * * <b>409 Conflict</b> if a QuizSubmission already exists for this user and quiz
 */
export const createQuizSubmissionStartQuizTakingSession = <ThrowOnError extends boolean = false>(options: Options<CreateQuizSubmissionStartQuizTakingSessionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/quizzes/{quiz_id}/submissions',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

/**
 * Upload a file
 * Associate a new quiz submission file
 *
 * This API endpoint is the first step in uploading a quiz submission file.
 * See the {file:file_uploads.html File Upload Documentation} for details on
 * the file upload workflow as these parameters are interpreted as per the
 * documentation there.
 */
export const uploadFileQuizSubmission = <ThrowOnError extends boolean = false>(options: Options<UploadFileQuizSubmissionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/quizzes/{quiz_id}/submissions/self/files',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

/**
 * Get a single quiz submission.
 * Get a single quiz submission.
 *
 * <b>200 OK</b> response code is returned if the request was successful.
 */
export const getSingleQuizSubmission = <ThrowOnError extends boolean = false>(options: Options<GetSingleQuizSubmissionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/courses/{course_id}/quizzes/{quiz_id}/submissions/{id}',
        ...options
    });
};

/**
 * Update student question scores and comments.
 * Update the amount of points a student has scored for questions they've
 * answered, provide comments for the student about their answer(s), or simply
 * fudge the total score by a specific amount of points.
 *
 * <b>Responses</b>
 *
 * * <b>200 OK</b> if the request was successful
 * * <b>403 Forbidden</b> if you are not a teacher in this course
 * * <b>400 Bad Request</b> if the attempt parameter is missing or invalid
 * * <b>400 Bad Request</b> if the specified QS attempt is not yet complete
 */
export const updateStudentQuestionScoresAndComments = <ThrowOnError extends boolean = false>(options: Options<UpdateStudentQuestionScoresAndCommentsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/quizzes/{quiz_id}/submissions/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Complete the quiz submission (turn it in).
 * Complete the quiz submission by marking it as complete and grading it. When
 * the quiz submission has been marked as complete, no further modifications
 * will be allowed.
 *
 * <b>Responses</b>
 *
 * * <b>200 OK</b> if the request was successful
 * * <b>403 Forbidden</b> if an invalid access code is specified
 * * <b>403 Forbidden</b> if the Quiz's IP filter restriction does not pass
 * * <b>403 Forbidden</b> if an invalid token is specified
 * * <b>400 Bad Request</b> if the QS is already complete
 * * <b>400 Bad Request</b> if the attempt parameter is missing
 * * <b>400 Bad Request</b> if the attempt parameter is not the latest attempt
 */
export const completeQuizSubmissionTurnItIn = <ThrowOnError extends boolean = false>(options: Options<CompleteQuizSubmissionTurnItInData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/quizzes/{quiz_id}/submissions/{id}/complete',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

/**
 * Retrieve captured events
 * Retrieve the set of events captured during a specific submission attempt.
 */
export const retrieveCapturedEvents = <ThrowOnError extends boolean = false>(options: Options<RetrieveCapturedEventsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/quizzes/{quiz_id}/submissions/{id}/events',
        ...options
    });
};

/**
 * Submit captured events
 * Store a set of events which were captured during a quiz taking session.
 *
 * On success, the response will be 204 No Content with an empty body.
 */
export const submitCapturedEvents = <ThrowOnError extends boolean = false>(options: Options<SubmitCapturedEventsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/quizzes/{quiz_id}/submissions/{id}/events',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

/**
 * Get current quiz submission times.
 * Get the current timing data for the quiz attempt, both the end_at timestamp
 * and the time_left parameter.
 *
 * <b>Responses</b>
 *
 * * <b>200 OK</b> if the request was successful
 */
export const getCurrentQuizSubmissionTimes = <ThrowOnError extends boolean = false>(options: Options<GetCurrentQuizSubmissionTimesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/quizzes/{quiz_id}/submissions/{id}/time',
        ...options
    });
};

/**
 * List recently logged in students
 * Returns the paginated list of users in this course, ordered by how recently they have
 * logged in. The records include the 'last_login' field which contains
 * a timestamp of the last time that user logged into canvas.  The querying
 * user must have the 'View usage reports' permission.
 */
export const listRecentlyLoggedInStudents = <ThrowOnError extends boolean = false>(options: Options<ListRecentlyLoggedInStudentsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListRecentlyLoggedInStudentsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/recent_students',
        ...options
    });
};

/**
 * Reset a course
 * Deletes the current course, and creates a new equivalent course with
 * no content, but all sections and users moved over.
 */
export const resetCourse = <ThrowOnError extends boolean = false>(options: Options<ResetCourseData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ResetCourseResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/reset_content',
        ...options
    });
};

/**
 * Redirect to root outcome group for context
 * Convenience redirect to find the root outcome group for a particular
 * context. Will redirect to the appropriate outcome group's URL.
 */
export const redirectToRootOutcomeGroupForContextCourses = <ThrowOnError extends boolean = false>(options: Options<RedirectToRootOutcomeGroupForContextCoursesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/root_outcome_group',
        ...options
    });
};

/**
 * List rubrics
 * Returns the paginated list of active rubrics for the current context.
 */
export const listRubricsCourses = <ThrowOnError extends boolean = false>(options: Options<ListRubricsCoursesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/rubrics',
        ...options
    });
};

/**
 * Get a single rubric
 * Returns the rubric with the given id.
 */
export const getSingleRubricCourses = <ThrowOnError extends boolean = false>(options: Options<GetSingleRubricCoursesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetSingleRubricCoursesResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/rubrics/{id}',
        ...options
    });
};

/**
 * List users in course
 * Returns the paginated list of users in this course. And optionally the user's enrollments in the course.
 */
export const listUsersInCourseSearchUsers = <ThrowOnError extends boolean = false>(options: Options<ListUsersInCourseSearchUsersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListUsersInCourseSearchUsersResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/courses/{course_id}/search_users',
        ...options
    });
};

/**
 * List course sections
 * A paginated list of the list of sections for this course.
 */
export const listCourseSections = <ThrowOnError extends boolean = false>(options: Options<ListCourseSectionsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListCourseSectionsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/courses/{course_id}/sections',
        ...options
    });
};

/**
 * Create course section
 * Creates a new section for this course.
 */
export const createCourseSection = <ThrowOnError extends boolean = false>(options: Options<CreateCourseSectionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateCourseSectionResponse, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/sections',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

/**
 * Get section information
 * Gets details about a specific section
 */
export const getSectionInformationCourses = <ThrowOnError extends boolean = false>(options: Options<GetSectionInformationCoursesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetSectionInformationCoursesResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/courses/{course_id}/sections/{id}',
        ...options
    });
};

/**
 * Get course settings
 * Returns some of a course's settings.
 */
export const getCourseSettings = <ThrowOnError extends boolean = false>(options: Options<GetCourseSettingsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/settings',
        ...options
    });
};

/**
 * Update course settings
 * Can update the following course settings:
 */
export const updateCourseSettings = <ThrowOnError extends boolean = false>(options: Options<UpdateCourseSettingsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/settings',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * @deprecated
 * List students
 * Returns the paginated list of students enrolled in this course.
 *
 * DEPRECATED: Please use the {api:CoursesController#users course users} endpoint
 * and pass "student" as the enrollment_type.
 */
export const listStudents = <ThrowOnError extends boolean = false>(options: Options<ListStudentsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListStudentsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/students',
        ...options
    });
};

/**
 * List submissions for multiple assignments
 * A paginated list of all existing submissions for a given set of students and assignments.
 */
export const listSubmissionsForMultipleAssignmentsCourses = <ThrowOnError extends boolean = false>(options: Options<ListSubmissionsForMultipleAssignmentsCoursesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListSubmissionsForMultipleAssignmentsCoursesResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/courses/{course_id}/students/submissions',
        ...options
    });
};

/**
 * Grade or comment on multiple submissions
 * Update the grading and comments on multiple student's assignment
 * submissions in an asynchronous job.
 *
 * The user must have permission to manage grades in the appropriate context
 * (course or section).
 */
export const gradeOrCommentOnMultipleSubmissionsCoursesSubmissions = <ThrowOnError extends boolean = false>(options: Options<GradeOrCommentOnMultipleSubmissionsCoursesSubmissionsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<GradeOrCommentOnMultipleSubmissionsCoursesSubmissionsResponse, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/submissions/update_grades',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

/**
 * List available tabs for a course or group
 * Returns a paginated list of navigation tabs available in the current context.
 */
export const listAvailableTabsForCourseOrGroupCourses = <ThrowOnError extends boolean = false>(options: Options<ListAvailableTabsForCourseOrGroupCoursesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/courses/{course_id}/tabs',
        ...options
    });
};

/**
 * Update a tab for a course
 * Home and Settings tabs are not manageable, and can't be hidden or moved
 *
 * Returns a tab object
 */
export const updateTabForCourse = <ThrowOnError extends boolean = false>(options: Options<UpdateTabForCourseData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateTabForCourseResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/tabs/{tab_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Course TODO items
 * Returns the current user's course-specific todo items.
 *
 * For full documentation, see the API documentation for the user todo items, in the user api.
 */
export const courseTodoItems = <ThrowOnError extends boolean = false>(options: Options<CourseTodoItemsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/todo',
        ...options
    });
};

/**
 * Remove usage rights
 * Removes copyright and license information associated with one or more files
 */
export const removeUsageRightsCourses = <ThrowOnError extends boolean = false>(options: Options<RemoveUsageRightsCoursesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/courses/{course_id}/usage_rights',
        ...options
    });
};

/**
 * Set usage rights
 * Sets copyright and license information for one or more files
 */
export const setUsageRightsCourses = <ThrowOnError extends boolean = false>(options: Options<SetUsageRightsCoursesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<SetUsageRightsCoursesResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/usage_rights',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List users in course
 * Returns the paginated list of users in this course. And optionally the user's enrollments in the course.
 */
export const listUsersInCourseUsers = <ThrowOnError extends boolean = false>(options: Options<ListUsersInCourseUsersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListUsersInCourseUsersResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/courses/{course_id}/users',
        ...options
    });
};

/**
 * Get single user
 * Return information on a single user.
 *
 * Accepts the same include[] parameters as the :users: action, and returns a
 * single user with the same fields as that action.
 */
export const getSingleUser = <ThrowOnError extends boolean = false>(options: Options<GetSingleUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetSingleUserResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/users/{id}',
        ...options
    });
};

/**
 * Adds last attended date to student enrollment in course
 */
export const addsLastAttendedDateToStudentEnrollmentInCourse = <ThrowOnError extends boolean = false>(options: Options<AddsLastAttendedDateToStudentEnrollmentInCourseData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<AddsLastAttendedDateToStudentEnrollmentInCourseResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{course_id}/users/{user_id}/last_attended',
        ...options
    });
};

/**
 * Delete/Conclude a course
 * Delete or conclude an existing course
 */
export const deleteConcludeCourse = <ThrowOnError extends boolean = false>(options: Options<DeleteConcludeCourseData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{id}',
        ...options
    });
};

/**
 * Get a single course
 * Return information on a single course.
 *
 * Accepts the same include[] parameters as the list action plus:
 */
export const getSingleCourseCourses = <ThrowOnError extends boolean = false>(options: Options<GetSingleCourseCoursesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetSingleCourseCoursesResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/courses/{id}',
        ...options
    });
};

/**
 * Update a course
 * Update an existing course.
 *
 * Arguments are the same as Courses#create, with a few exceptions (enroll_me).
 *
 * If a user has content management rights, but not full course editing rights, the only attribute
 * editable through this endpoint will be "syllabus_body"
 */
export const updateCourse = <ThrowOnError extends boolean = false>(options: Options<UpdateCourseData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get a late policy
 * Returns the late policy for a course.
 */
export const getLatePolicy = <ThrowOnError extends boolean = false>(options: Options<GetLatePolicyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{id}/late_policy',
        ...options
    });
};

/**
 * Patch a late policy
 * Patch a late policy. No body is returned upon success.
 */
export const patchLatePolicy = <ThrowOnError extends boolean = false>(options: Options<PatchLatePolicyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<unknown, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{id}/late_policy',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

/**
 * Create a late policy
 * Create a late policy. If the course already has a late policy, a
 * bad_request is returned since there can only be one late policy
 * per course.
 */
export const createLatePolicy = <ThrowOnError extends boolean = false>(options: Options<CreateLatePolicyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/courses/{id}/late_policy',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

/**
 * List courses with their latest ePub export
 * A paginated list of all courses a user is actively participating in, and
 * the latest ePub export associated with the user & course.
 */
export const listCoursesWithTheirLatestEpubExport = <ThrowOnError extends boolean = false>(options?: Options<ListCoursesWithTheirLatestEpubExportData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListCoursesWithTheirLatestEpubExportResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/epub_exports',
        ...options
    });
};

/**
 * Create Error Report
 * Create a new error report documenting an experienced problem
 *
 * Performs the same action as when a user uses the "help -> report a problem"
 * dialog.
 */
export const createErrorReport = <ThrowOnError extends boolean = false>(options: Options<CreateErrorReportData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/error_reports',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

/**
 * Delete file
 * Remove the specified file
 */
export const deleteFile = <ThrowOnError extends boolean = false>(options: Options<DeleteFileData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteFileResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/files/{id}',
        ...options
    });
};

/**
 * Get file
 * Returns the standard attachment json object
 */
export const getFileFiles = <ThrowOnError extends boolean = false>(options: Options<GetFileFilesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetFileFilesResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/files/{id}',
        ...options
    });
};

/**
 * Update file
 * Update some settings on the specified file
 */
export const updateFile = <ThrowOnError extends boolean = false>(options: Options<UpdateFileData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateFileResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/files/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get public inline preview url
 * Determine the URL that should be used for inline preview of the file.
 */
export const getPublicInlinePreviewUrl = <ThrowOnError extends boolean = false>(options: Options<GetPublicInlinePreviewUrlData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/files/{id}/public_url',
        ...options
    });
};

/**
 * Copy a file
 * Copy a file from elsewhere in Canvas into a folder.
 *
 * Copying a file across contexts (between courses and users) is permitted,
 * but the source and destination must belong to the same institution.
 */
export const copyFile = <ThrowOnError extends boolean = false>(options: Options<CopyFileData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CopyFileResponse, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/folders/{dest_folder_id}/copy_file',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

/**
 * Copy a folder
 * Copy a folder (and its contents) from elsewhere in Canvas into a folder.
 *
 * Copying a folder across contexts (between courses and users) is permitted,
 * but the source and destination must belong to the same institution.
 * If the source and destination folders are in the same context, the
 * source folder may not contain the destination folder. A folder will be
 * renamed at its destination if another folder with the same name already
 * exists.
 */
export const copyFolder = <ThrowOnError extends boolean = false>(options: Options<CopyFolderData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CopyFolderResponse, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/folders/{dest_folder_id}/copy_folder',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

/**
 * Upload a file
 * Upload a file to a folder.
 *
 * This API endpoint is the first step in uploading a file.
 * See the {file:file_uploads.html File Upload Documentation} for details on
 * the file upload workflow.
 *
 * Only those with the "Manage Files" permission on a course or group can
 * upload files to a folder in that course or group.
 */
export const uploadFileToFolder = <ThrowOnError extends boolean = false>(options: Options<UploadFileToFolderData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/folders/{folder_id}/files',
        ...options
    });
};

/**
 * Create folder
 * Creates a folder in the specified context
 */
export const createFolderFolders = <ThrowOnError extends boolean = false>(options: Options<CreateFolderFoldersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateFolderFoldersResponse, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/folders/{folder_id}/folders',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

/**
 * Delete folder
 * Remove the specified folder. You can only delete empty folders unless you
 * set the 'force' flag
 */
export const deleteFolder = <ThrowOnError extends boolean = false>(options: Options<DeleteFolderData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/folders/{id}',
        ...options
    });
};

/**
 * Get folder
 * Returns the details for a folder
 *
 * You can get the root folder from a context by using 'root' as the :id.
 * For example, you could get the root folder for a course like:
 */
export const getFolderFolders = <ThrowOnError extends boolean = false>(options: Options<GetFolderFoldersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetFolderFoldersResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/folders/{id}',
        ...options
    });
};

/**
 * Update folder
 * Updates a folder
 */
export const updateFolder = <ThrowOnError extends boolean = false>(options: Options<UpdateFolderData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateFolderResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/folders/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List files
 * Returns the paginated list of files for the folder or course.
 */
export const listFilesFolders = <ThrowOnError extends boolean = false>(options: Options<ListFilesFoldersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListFilesFoldersResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/folders/{id}/files',
        ...options
    });
};

/**
 * List folders
 * Returns the paginated list of folders in the folder.
 */
export const listFolders = <ThrowOnError extends boolean = false>(options: Options<ListFoldersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListFoldersResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/folders/{id}/folders',
        ...options
    });
};

/**
 * Delete an outcome group
 * Deleting an outcome group deletes descendant outcome groups and outcome
 * links. The linked outcomes themselves are only deleted if all links to the
 * outcome were deleted.
 *
 * Aligned outcomes cannot be deleted; as such, if all remaining links to an
 * aligned outcome are included in this group's descendants, the group
 * deletion will fail.
 */
export const deleteOutcomeGroupGlobal = <ThrowOnError extends boolean = false>(options: Options<DeleteOutcomeGroupGlobalData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteOutcomeGroupGlobalResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/global/outcome_groups/{id}',
        ...options
    });
};

/**
 * Show an outcome group
 */
export const showOutcomeGroupGlobal = <ThrowOnError extends boolean = false>(options: Options<ShowOutcomeGroupGlobalData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ShowOutcomeGroupGlobalResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/global/outcome_groups/{id}',
        ...options
    });
};

/**
 * Update an outcome group
 * Modify an existing outcome group. Fields not provided are left as is;
 * unrecognized fields are ignored.
 *
 * When changing the parent outcome group, the new parent group must belong to
 * the same context as this outcome group, and must not be a descendant of
 * this outcome group (i.e. no cycles allowed).
 */
export const updateOutcomeGroupGlobal = <ThrowOnError extends boolean = false>(options: Options<UpdateOutcomeGroupGlobalData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateOutcomeGroupGlobalResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/global/outcome_groups/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Import an outcome group
 * Creates a new subgroup of the outcome group with the same title and
 * description as the source group, then creates links in that new subgroup to
 * the same outcomes that are linked in the source group. Recurses on the
 * subgroups of the source group, importing them each in turn into the new
 * subgroup.
 *
 * Allows you to copy organizational structure, but does not create copies of
 * the outcomes themselves, only new links.
 *
 * The source group must be either global, from the same context as this
 * outcome group, or from an associated account. The source group cannot be
 * the root outcome group of its context.
 */
export const importOutcomeGroupGlobal = <ThrowOnError extends boolean = false>(options: Options<ImportOutcomeGroupGlobalData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ImportOutcomeGroupGlobalResponse, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/global/outcome_groups/{id}/import',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

/**
 * List linked outcomes
 * A paginated list of the immediate OutcomeLink children of the outcome group.
 */
export const listLinkedOutcomesGlobal = <ThrowOnError extends boolean = false>(options: Options<ListLinkedOutcomesGlobalData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListLinkedOutcomesGlobalResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/global/outcome_groups/{id}/outcomes',
        ...options
    });
};

/**
 * Create/link an outcome
 * Link an outcome into the outcome group. The outcome to link can either be
 * specified by a PUT to the link URL for a specific outcome (the outcome_id
 * in the PUT URLs) or by supplying the information for a new outcome (title,
 * description, ratings, mastery_points) in a POST to the collection.
 *
 * If linking an existing outcome, the outcome_id must identify an outcome
 * available to this context; i.e. an outcome owned by this group's context,
 * an outcome owned by an associated account, or a global outcome. With
 * outcome_id present, any other parameters (except move_from) are ignored.
 *
 * If defining a new outcome, the outcome is created in the outcome group's
 * context using the provided title, description, ratings, and mastery points;
 * the title is required but all other fields are optional. The new outcome
 * is then linked into the outcome group.
 *
 * If ratings are provided when creating a new outcome, an embedded rubric
 * criterion is included in the new outcome. This criterion's mastery_points
 * default to the maximum points in the highest rating if not specified in the
 * mastery_points parameter. Any ratings lacking a description are given a
 * default of "No description". Any ratings lacking a point value are given a
 * default of 0. If no ratings are provided, the mastery_points parameter is
 * ignored.
 */
export const createLinkOutcomeGlobal = <ThrowOnError extends boolean = false>(options: Options<CreateLinkOutcomeGlobalData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateLinkOutcomeGlobalResponse, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/global/outcome_groups/{id}/outcomes',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

/**
 * Unlink an outcome
 * Unlinking an outcome only deletes the outcome itself if this was the last
 * link to the outcome in any group in any context. Aligned outcomes cannot be
 * deleted; as such, if this is the last link to an aligned outcome, the
 * unlinking will fail.
 */
export const unlinkOutcomeGlobal = <ThrowOnError extends boolean = false>(options: Options<UnlinkOutcomeGlobalData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<UnlinkOutcomeGlobalResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/global/outcome_groups/{id}/outcomes/{outcome_id}',
        ...options
    });
};

/**
 * Create/link an outcome
 * Link an outcome into the outcome group. The outcome to link can either be
 * specified by a PUT to the link URL for a specific outcome (the outcome_id
 * in the PUT URLs) or by supplying the information for a new outcome (title,
 * description, ratings, mastery_points) in a POST to the collection.
 *
 * If linking an existing outcome, the outcome_id must identify an outcome
 * available to this context; i.e. an outcome owned by this group's context,
 * an outcome owned by an associated account, or a global outcome. With
 * outcome_id present, any other parameters (except move_from) are ignored.
 *
 * If defining a new outcome, the outcome is created in the outcome group's
 * context using the provided title, description, ratings, and mastery points;
 * the title is required but all other fields are optional. The new outcome
 * is then linked into the outcome group.
 *
 * If ratings are provided when creating a new outcome, an embedded rubric
 * criterion is included in the new outcome. This criterion's mastery_points
 * default to the maximum points in the highest rating if not specified in the
 * mastery_points parameter. Any ratings lacking a description are given a
 * default of "No description". Any ratings lacking a point value are given a
 * default of 0. If no ratings are provided, the mastery_points parameter is
 * ignored.
 */
export const createLinkOutcomeGlobalOutcomeId = <ThrowOnError extends boolean = false>(options: Options<CreateLinkOutcomeGlobalOutcomeIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<CreateLinkOutcomeGlobalOutcomeIdResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/global/outcome_groups/{id}/outcomes/{outcome_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List subgroups
 * A paginated list of the immediate OutcomeGroup children of the outcome group.
 */
export const listSubgroupsGlobal = <ThrowOnError extends boolean = false>(options: Options<ListSubgroupsGlobalData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListSubgroupsGlobalResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/global/outcome_groups/{id}/subgroups',
        ...options
    });
};

/**
 * Create a subgroup
 * Creates a new empty subgroup under the outcome group with the given title
 * and description.
 */
export const createSubgroupGlobal = <ThrowOnError extends boolean = false>(options: Options<CreateSubgroupGlobalData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateSubgroupGlobalResponse, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/global/outcome_groups/{id}/subgroups',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

/**
 * Redirect to root outcome group for context
 * Convenience redirect to find the root outcome group for a particular
 * context. Will redirect to the appropriate outcome group's URL.
 */
export const redirectToRootOutcomeGroupForContextGlobal = <ThrowOnError extends boolean = false>(options?: Options<RedirectToRootOutcomeGroupForContextGlobalData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/global/root_outcome_group',
        ...options
    });
};

/**
 * Delete a Group Category
 * Deletes a group category and all groups under it. Protected group
 * categories can not be deleted, i.e. "communities" and "student_organized".
 */
export const deleteGroupCategory = <ThrowOnError extends boolean = false>(options: Options<DeleteGroupCategoryData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/group_categories/{group_category_id}',
        ...options
    });
};

/**
 * Get a single group category
 * Returns the data for a single group category, or a 401 if the caller doesn't have
 * the rights to see it.
 */
export const getSingleGroupCategory = <ThrowOnError extends boolean = false>(options: Options<GetSingleGroupCategoryData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetSingleGroupCategoryResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/group_categories/{group_category_id}',
        ...options
    });
};

/**
 * Update a Group Category
 * Modifies an existing group category.
 */
export const updateGroupCategory = <ThrowOnError extends boolean = false>(options: Options<UpdateGroupCategoryData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateGroupCategoryResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/group_categories/{group_category_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Assign unassigned members
 * Assign all unassigned members as evenly as possible among the existing
 * student groups.
 */
export const assignUnassignedMembers = <ThrowOnError extends boolean = false>(options: Options<AssignUnassignedMembersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AssignUnassignedMembersResponse, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/group_categories/{group_category_id}/assign_unassigned_members',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

/**
 * Create a group
 * Creates a new group. Groups created using the "/api/v1/groups/"
 * endpoint will be community groups.
 */
export const createGroupGroupCategories = <ThrowOnError extends boolean = false>(options: Options<CreateGroupGroupCategoriesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateGroupGroupCategoriesResponse, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/group_categories/{group_category_id}/groups',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

/**
 * List users in group category
 * Returns a paginated list of users in the group category.
 */
export const listUsersInGroupCategory = <ThrowOnError extends boolean = false>(options: Options<ListUsersInGroupCategoryData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListUsersInGroupCategoryResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/group_categories/{group_category_id}/users',
        ...options
    });
};

/**
 * Create a group
 * Creates a new group. Groups created using the "/api/v1/groups/"
 * endpoint will be community groups.
 */
export const createGroupGroups = <ThrowOnError extends boolean = false>(options?: Options<CreateGroupGroupsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CreateGroupGroupsResponse, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/groups',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

/**
 * Delete a group
 * Deletes a group and removes all members.
 */
export const deleteGroup = <ThrowOnError extends boolean = false>(options: Options<DeleteGroupData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteGroupResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/groups/{group_id}',
        ...options
    });
};

/**
 * Get a single group
 * Returns the data for a single group, or a 401 if the caller doesn't have
 * the rights to see it.
 */
export const getSingleGroup = <ThrowOnError extends boolean = false>(options: Options<GetSingleGroupData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetSingleGroupResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/groups/{group_id}',
        ...options
    });
};

/**
 * Edit a group
 * Modifies an existing group.  Note that to set an avatar image for the
 * group, you must first upload the image file to the group, and the use the
 * id in the response as the argument to this function.  See the
 * {file:file_uploads.html File Upload Documentation} for details on the file
 * upload workflow.
 */
export const editGroup = <ThrowOnError extends boolean = false>(options: Options<EditGroupData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<EditGroupResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/groups/{group_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Group activity stream
 * Returns the current user's group-specific activity stream, paginated.
 *
 * For full documentation, see the API documentation for the user activity
 * stream, in the user api.
 */
export const groupActivityStream = <ThrowOnError extends boolean = false>(options: Options<GroupActivityStreamData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/groups/{group_id}/activity_stream',
        ...options
    });
};

/**
 * Group activity stream summary
 * Returns a summary of the current user's group-specific activity stream.
 *
 * For full documentation, see the API documentation for the user activity
 * stream summary, in the user api.
 */
export const groupActivityStreamSummary = <ThrowOnError extends boolean = false>(options: Options<GroupActivityStreamSummaryData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/groups/{group_id}/activity_stream/summary',
        ...options
    });
};

/**
 * Redirect to the assignment override for a group
 * Responds with a redirect to the override for the given group, if any
 * (404 otherwise).
 */
export const redirectToAssignmentOverrideForGroup = <ThrowOnError extends boolean = false>(options: Options<RedirectToAssignmentOverrideForGroupData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/groups/{group_id}/assignments/{assignment_id}/override',
        ...options
    });
};

/**
 * List collaborations
 * A paginated list of collaborations the current user has access to in the
 * context of the course provided in the url. NOTE: this only returns
 * ExternalToolCollaboration type collaborations.
 *
 * curl https://<canvas>/api/v1/courses/1/collaborations/
 */
export const listCollaborationsGroups = <ThrowOnError extends boolean = false>(options: Options<ListCollaborationsGroupsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListCollaborationsGroupsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/groups/{group_id}/collaborations',
        ...options
    });
};

/**
 * List conferences
 * Retrieve the paginated list of conferences for this context
 *
 * This API returns a JSON object containing the list of conferences,
 * the key for the list of conferences is "conferences"
 */
export const listConferencesGroups = <ThrowOnError extends boolean = false>(options: Options<ListConferencesGroupsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListConferencesGroupsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/groups/{group_id}/conferences',
        ...options
    });
};

/**
 * List content exports
 * A paginated list of the past and pending content export jobs for a course,
 * group, or user. Exports are returned newest first.
 */
export const listContentExportsGroups = <ThrowOnError extends boolean = false>(options: Options<ListContentExportsGroupsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListContentExportsGroupsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/groups/{group_id}/content_exports',
        ...options
    });
};

/**
 * Export content
 * Begin a content export job for a course, group, or user.
 *
 * You can use the {api:ProgressController#show Progress API} to track the
 * progress of the export. The migration's progress is linked to with the
 * _progress_url_ value.
 *
 * When the export completes, use the {api:ContentExportsApiController#show Show content export} endpoint
 * to retrieve a download URL for the exported content.
 */
export const exportContentGroups = <ThrowOnError extends boolean = false>(options: Options<ExportContentGroupsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ExportContentGroupsResponse, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/groups/{group_id}/content_exports',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

/**
 * Show content export
 * Get information about a single content export.
 */
export const showContentExportGroups = <ThrowOnError extends boolean = false>(options: Options<ShowContentExportGroupsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ShowContentExportGroupsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/groups/{group_id}/content_exports/{id}',
        ...options
    });
};

/**
 * List licenses
 * A paginated list of licenses that can be applied
 */
export const listLicensesGroups = <ThrowOnError extends boolean = false>(options: Options<ListLicensesGroupsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListLicensesGroupsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/groups/{group_id}/content_licenses',
        ...options
    });
};

/**
 * List content migrations
 * Returns paginated content migrations
 */
export const listContentMigrationsGroups = <ThrowOnError extends boolean = false>(options: Options<ListContentMigrationsGroupsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListContentMigrationsGroupsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/groups/{group_id}/content_migrations',
        ...options
    });
};

/**
 * Create a content migration
 * Create a content migration. If the migration requires a file to be uploaded
 * the actual processing of the file will start once the file upload process is completed.
 * File uploading works as described in the {file:file_uploads.html File Upload Documentation}
 * except that the values are set on a *pre_attachment* sub-hash.
 *
 * For migrations that don't require a file to be uploaded, like course copy, the
 * processing will begin as soon as the migration is created.
 *
 * You can use the {api:ProgressController#show Progress API} to track the
 * progress of the migration. The migration's progress is linked to with the
 * _progress_url_ value.
 *
 * The two general workflows are:
 *
 * If no file upload is needed:
 *
 * 1. POST to create
 * 2. Use the {api:ProgressController#show Progress} specified in _progress_url_ to monitor progress
 *
 * For file uploading:
 *
 * 1. POST to create with file info in *pre_attachment*
 * 2. Do {file:file_uploads.html file upload processing} using the data in the *pre_attachment* data
 * 3. {api:ContentMigrationsController#show GET} the ContentMigration
 * 4. Use the {api:ProgressController#show Progress} specified in _progress_url_ to monitor progress
 *
 * (required if doing .zip file upload)
 */
export const createContentMigrationGroups = <ThrowOnError extends boolean = false>(options: Options<CreateContentMigrationGroupsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateContentMigrationGroupsResponse, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/groups/{group_id}/content_migrations',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

/**
 * List Migration Systems
 * Lists the currently available migration types. These values may change.
 */
export const listMigrationSystemsGroups = <ThrowOnError extends boolean = false>(options: Options<ListMigrationSystemsGroupsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListMigrationSystemsGroupsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/groups/{group_id}/content_migrations/migrators',
        ...options
    });
};

/**
 * List migration issues
 * Returns paginated migration issues
 */
export const listMigrationIssuesGroups = <ThrowOnError extends boolean = false>(options: Options<ListMigrationIssuesGroupsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListMigrationIssuesGroupsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/groups/{group_id}/content_migrations/{content_migration_id}/migration_issues',
        ...options
    });
};

/**
 * Get a migration issue
 * Returns data on an individual migration issue
 */
export const getMigrationIssueGroups = <ThrowOnError extends boolean = false>(options: Options<GetMigrationIssueGroupsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetMigrationIssueGroupsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/groups/{group_id}/content_migrations/{content_migration_id}/migration_issues/{id}',
        ...options
    });
};

/**
 * Update a migration issue
 * Update the workflow_state of a migration issue
 */
export const updateMigrationIssueGroups = <ThrowOnError extends boolean = false>(options: Options<UpdateMigrationIssueGroupsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateMigrationIssueGroupsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/groups/{group_id}/content_migrations/{content_migration_id}/migration_issues/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get a content migration
 * Returns data on an individual content migration
 */
export const getContentMigrationGroups = <ThrowOnError extends boolean = false>(options: Options<GetContentMigrationGroupsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetContentMigrationGroupsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/groups/{group_id}/content_migrations/{id}',
        ...options
    });
};

/**
 * Update a content migration
 * Update a content migration. Takes same arguments as create except that you
 * can't change the migration type. However, changing most settings after the
 * migration process has started will not do anything. Generally updating the
 * content migration will be used when there is a file upload problem. If the
 * first upload has a problem you can supply new _pre_attachment_ values to
 * start the process again.
 */
export const updateContentMigrationGroups = <ThrowOnError extends boolean = false>(options: Options<UpdateContentMigrationGroupsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateContentMigrationGroupsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/groups/{group_id}/content_migrations/{id}',
        ...options
    });
};

/**
 * List discussion topics
 * Returns the paginated list of discussion topics for this course or group.
 */
export const listDiscussionTopicsGroups = <ThrowOnError extends boolean = false>(options: Options<ListDiscussionTopicsGroupsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListDiscussionTopicsGroupsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/groups/{group_id}/discussion_topics',
        ...options
    });
};

/**
 * Create a new discussion topic
 * Create an new discussion topic for the course or group.
 */
export const createNewDiscussionTopicGroups = <ThrowOnError extends boolean = false>(options: Options<CreateNewDiscussionTopicGroupsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/groups/{group_id}/discussion_topics',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

/**
 * Reorder pinned topics
 * Puts the pinned discussion topics in the specified order.
 * All pinned topics should be included.
 */
export const reorderPinnedTopicsGroups = <ThrowOnError extends boolean = false>(options: Options<ReorderPinnedTopicsGroupsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/groups/{group_id}/discussion_topics/reorder',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

/**
 * Delete a topic
 * Deletes the discussion topic. This will also delete the assignment, if it's
 * an assignment discussion.
 */
export const deleteTopicGroups = <ThrowOnError extends boolean = false>(options: Options<DeleteTopicGroupsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/groups/{group_id}/discussion_topics/{topic_id}',
        ...options
    });
};

/**
 * Get a single topic
 * Returns data on an individual discussion topic. See the List action for the response formatting.
 */
export const getSingleTopicGroups = <ThrowOnError extends boolean = false>(options: Options<GetSingleTopicGroupsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/groups/{group_id}/discussion_topics/{topic_id}',
        ...options
    });
};

/**
 * Update a topic
 * Update an existing discussion topic for the course or group.
 */
export const updateTopicGroups = <ThrowOnError extends boolean = false>(options: Options<UpdateTopicGroupsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/groups/{group_id}/discussion_topics/{topic_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List topic entries
 * Retrieve the (paginated) top-level entries in a discussion topic.
 *
 * May require (depending on the topic) that the user has posted in the topic.
 * If it is required, and the user has not posted, will respond with a 403
 * Forbidden status and the body 'require_initial_post'.
 *
 * Will include the 10 most recent replies, if any, for each entry returned.
 *
 * If the topic is a root topic with children corresponding to groups of a
 * group assignment, entries from those subtopics for which the user belongs
 * to the corresponding group will be returned.
 *
 * Ordering of returned entries is newest-first by posting timestamp (reply
 * activity is ignored).
 */
export const listTopicEntriesGroups = <ThrowOnError extends boolean = false>(options: Options<ListTopicEntriesGroupsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/groups/{group_id}/discussion_topics/{topic_id}/entries',
        ...options
    });
};

/**
 * Post an entry
 * Create a new entry in a discussion topic. Returns a json representation of
 * the created entry (see documentation for 'entries' method) on success.
 */
export const postEntryGroups = <ThrowOnError extends boolean = false>(options: Options<PostEntryGroupsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/groups/{group_id}/discussion_topics/{topic_id}/entries',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

/**
 * Rate entry
 * Rate a discussion entry.
 *
 * On success, the response will be 204 No Content with an empty body.
 */
export const rateEntryGroups = <ThrowOnError extends boolean = false>(options: Options<RateEntryGroupsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/groups/{group_id}/discussion_topics/{topic_id}/entries/{entry_id}/rating',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

/**
 * Mark entry as unread
 * Mark a discussion entry as unread.
 *
 * No request fields are necessary.
 *
 * On success, the response will be 204 No Content with an empty body.
 */
export const markEntryAsUnreadGroups = <ThrowOnError extends boolean = false>(options: Options<MarkEntryAsUnreadGroupsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/groups/{group_id}/discussion_topics/{topic_id}/entries/{entry_id}/read',
        ...options
    });
};

/**
 * Mark entry as read
 * Mark a discussion entry as read.
 *
 * No request fields are necessary.
 *
 * On success, the response will be 204 No Content with an empty body.
 */
export const markEntryAsReadGroups = <ThrowOnError extends boolean = false>(options: Options<MarkEntryAsReadGroupsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/groups/{group_id}/discussion_topics/{topic_id}/entries/{entry_id}/read',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List entry replies
 * Retrieve the (paginated) replies to a top-level entry in a discussion
 * topic.
 *
 * May require (depending on the topic) that the user has posted in the topic.
 * If it is required, and the user has not posted, will respond with a 403
 * Forbidden status and the body 'require_initial_post'.
 *
 * Ordering of returned entries is newest-first by creation timestamp.
 */
export const listEntryRepliesGroups = <ThrowOnError extends boolean = false>(options: Options<ListEntryRepliesGroupsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/groups/{group_id}/discussion_topics/{topic_id}/entries/{entry_id}/replies',
        ...options
    });
};

/**
 * Post a reply
 * Add a reply to an entry in a discussion topic. Returns a json
 * representation of the created reply (see documentation for 'replies'
 * method) on success.
 *
 * May require (depending on the topic) that the user has posted in the topic.
 * If it is required, and the user has not posted, will respond with a 403
 * Forbidden status and the body 'require_initial_post'.
 */
export const postReplyGroups = <ThrowOnError extends boolean = false>(options: Options<PostReplyGroupsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/groups/{group_id}/discussion_topics/{topic_id}/entries/{entry_id}/replies',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

/**
 * Delete an entry
 * Delete a discussion entry.
 *
 * The entry must have been created by the current user, or the current user
 * must have admin rights to the discussion. If the delete is not allowed, a 401 will be returned.
 *
 * The discussion will be marked deleted, and the user_id and message will be cleared out.
 */
export const deleteEntryGroups = <ThrowOnError extends boolean = false>(options: Options<DeleteEntryGroupsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/groups/{group_id}/discussion_topics/{topic_id}/entries/{id}',
        ...options
    });
};

/**
 * Update an entry
 * Update an existing discussion entry.
 *
 * The entry must have been created by the current user, or the current user
 * must have admin rights to the discussion. If the edit is not allowed, a 401 will be returned.
 */
export const updateEntryGroups = <ThrowOnError extends boolean = false>(options: Options<UpdateEntryGroupsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/groups/{group_id}/discussion_topics/{topic_id}/entries/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List entries
 * Retrieve a paginated list of discussion entries, given a list of ids.
 *
 * May require (depending on the topic) that the user has posted in the topic.
 * If it is required, and the user has not posted, will respond with a 403
 * Forbidden status and the body 'require_initial_post'.
 */
export const listEntriesGroups = <ThrowOnError extends boolean = false>(options: Options<ListEntriesGroupsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/groups/{group_id}/discussion_topics/{topic_id}/entry_list',
        ...options
    });
};

/**
 * Mark topic as unread
 * Mark the initial text of the discussion topic as unread.
 *
 * No request fields are necessary.
 *
 * On success, the response will be 204 No Content with an empty body.
 */
export const markTopicAsUnreadGroups = <ThrowOnError extends boolean = false>(options: Options<MarkTopicAsUnreadGroupsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/groups/{group_id}/discussion_topics/{topic_id}/read',
        ...options
    });
};

/**
 * Mark topic as read
 * Mark the initial text of the discussion topic as read.
 *
 * No request fields are necessary.
 *
 * On success, the response will be 204 No Content with an empty body.
 */
export const markTopicAsReadGroups = <ThrowOnError extends boolean = false>(options: Options<MarkTopicAsReadGroupsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/groups/{group_id}/discussion_topics/{topic_id}/read',
        ...options
    });
};

/**
 * Mark all entries as unread
 * Mark the discussion topic and all its entries as unread.
 *
 * No request fields are necessary.
 *
 * On success, the response will be 204 No Content with an empty body.
 */
export const markAllEntriesAsUnreadGroups = <ThrowOnError extends boolean = false>(options: Options<MarkAllEntriesAsUnreadGroupsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/groups/{group_id}/discussion_topics/{topic_id}/read_all',
        ...options
    });
};

/**
 * Mark all entries as read
 * Mark the discussion topic and all its entries as read.
 *
 * No request fields are necessary.
 *
 * On success, the response will be 204 No Content with an empty body.
 */
export const markAllEntriesAsReadGroups = <ThrowOnError extends boolean = false>(options: Options<MarkAllEntriesAsReadGroupsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/groups/{group_id}/discussion_topics/{topic_id}/read_all',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Unsubscribe from a topic
 * Unsubscribe from a topic to stop receiving notifications about new entries
 *
 * On success, the response will be 204 No Content with an empty body
 */
export const unsubscribeFromTopicGroups = <ThrowOnError extends boolean = false>(options: Options<UnsubscribeFromTopicGroupsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/groups/{group_id}/discussion_topics/{topic_id}/subscribed',
        ...options
    });
};

/**
 * Subscribe to a topic
 * Subscribe to a topic to receive notifications about new entries
 *
 * On success, the response will be 204 No Content with an empty body
 */
export const subscribeToTopicGroups = <ThrowOnError extends boolean = false>(options: Options<SubscribeToTopicGroupsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/groups/{group_id}/discussion_topics/{topic_id}/subscribed',
        ...options
    });
};

/**
 * Get the full topic
 * Return a cached structure of the discussion topic, containing all entries,
 * their authors, and their message bodies.
 *
 * May require (depending on the topic) that the user has posted in the topic.
 * If it is required, and the user has not posted, will respond with a 403
 * Forbidden status and the body 'require_initial_post'.
 *
 * In some rare situations, this cached structure may not be available yet. In
 * that case, the server will respond with a 503 error, and the caller should
 * try again soon.
 *
 * The response is an object containing the following keys:
 * * "participants": A list of summary information on users who have posted to
 * the discussion. Each value is an object containing their id, display_name,
 * and avatar_url.
 * * "unread_entries": A list of entry ids that are unread by the current
 * user. this implies that any entry not in this list is read.
 * * "entry_ratings": A map of entry ids to ratings by the current user. Entries
 * not in this list have no rating. Only populated if rating is enabled.
 * * "forced_entries": A list of entry ids that have forced_read_state set to
 * true. This flag is meant to indicate the entry's read_state has been
 * manually set to 'unread' by the user, so the entry should not be
 * automatically marked as read.
 * * "view": A threaded view of all the entries in the discussion, containing
 * the id, user_id, and message.
 * * "new_entries": Because this view is eventually consistent, it's possible
 * that newly created or updated entries won't yet be reflected in the view.
 * If the application wants to also get a flat list of all entries not yet
 * reflected in the view, pass include_new_entries=1 to the request and this
 * array of entries will be returned. These entries are returned in a flat
 * array, in ascending created_at order.
 */
export const getFullTopicGroups = <ThrowOnError extends boolean = false>(options: Options<GetFullTopicGroupsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/groups/{group_id}/discussion_topics/{topic_id}/view',
        ...options
    });
};

/**
 * List external feeds
 * Returns the paginated list of External Feeds this course or group.
 */
export const listExternalFeedsGroups = <ThrowOnError extends boolean = false>(options: Options<ListExternalFeedsGroupsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListExternalFeedsGroupsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/groups/{group_id}/external_feeds',
        ...options
    });
};

/**
 * Create an external feed
 * Create a new external feed for the course or group.
 */
export const createExternalFeedGroups = <ThrowOnError extends boolean = false>(options: Options<CreateExternalFeedGroupsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateExternalFeedGroupsResponse, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/groups/{group_id}/external_feeds',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

/**
 * Delete an external feed
 * Deletes the external feed.
 */
export const deleteExternalFeedGroups = <ThrowOnError extends boolean = false>(options: Options<DeleteExternalFeedGroupsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteExternalFeedGroupsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/groups/{group_id}/external_feeds/{external_feed_id}',
        ...options
    });
};

/**
 * List external tools
 * Returns the paginated list of external tools for the current context.
 * See the get request docs for a single tool for a list of properties on an external tool.
 */
export const listExternalToolsGroups = <ThrowOnError extends boolean = false>(options: Options<ListExternalToolsGroupsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/groups/{group_id}/external_tools',
        ...options
    });
};

/**
 * Upload a file
 * Upload a file to the group.
 *
 * This API endpoint is the first step in uploading a file to a group.
 * See the {file:file_uploads.html File Upload Documentation} for details on
 * the file upload workflow.
 *
 * Only those with the "Manage Files" permission on a group can upload files
 * to the group. By default, this is anybody participating in the
 * group, or any admin over the group.
 */
export const uploadFileToGroup = <ThrowOnError extends boolean = false>(options: Options<UploadFileToGroupData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/groups/{group_id}/files',
        ...options
    });
};

/**
 * Get quota information
 * Returns the total and used storage quota for the course, group, or user.
 */
export const getQuotaInformationGroups = <ThrowOnError extends boolean = false>(options: Options<GetQuotaInformationGroupsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/groups/{group_id}/files/quota',
        ...options
    });
};

/**
 * Get file
 * Returns the standard attachment json object
 */
export const getFileGroups = <ThrowOnError extends boolean = false>(options: Options<GetFileGroupsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetFileGroupsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/groups/{group_id}/files/{id}',
        ...options
    });
};

/**
 * List all folders
 * Returns the paginated list of all folders for the given context. This will
 * be returned as a flat list containing all subfolders as well.
 */
export const listAllFoldersGroups = <ThrowOnError extends boolean = false>(options: Options<ListAllFoldersGroupsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListAllFoldersGroupsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/groups/{group_id}/folders',
        ...options
    });
};

/**
 * Create folder
 * Creates a folder in the specified context
 */
export const createFolderGroups = <ThrowOnError extends boolean = false>(options: Options<CreateFolderGroupsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateFolderGroupsResponse, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/groups/{group_id}/folders',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

/**
 * Resolve path
 * Given the full path to a folder, returns a list of all Folders in the path hierarchy,
 * starting at the root folder, and ending at the requested folder. The given path is
 * relative to the context's root folder and does not include the root folder's name
 * (e.g., "course files"). If an empty path is given, the context's root folder alone
 * is returned. Otherwise, if no folder exists with the given full path, a Not Found
 * error is returned.
 */
export const resolvePathGroups = <ThrowOnError extends boolean = false>(options: Options<ResolvePathGroupsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ResolvePathGroupsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/groups/{group_id}/folders/by_path',
        ...options
    });
};

/**
 * Resolve path
 * Given the full path to a folder, returns a list of all Folders in the path hierarchy,
 * starting at the root folder, and ending at the requested folder. The given path is
 * relative to the context's root folder and does not include the root folder's name
 * (e.g., "course files"). If an empty path is given, the context's root folder alone
 * is returned. Otherwise, if no folder exists with the given full path, a Not Found
 * error is returned.
 */
export const resolvePathGroupsFullPath = <ThrowOnError extends boolean = false>(options: Options<ResolvePathGroupsFullPathData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ResolvePathGroupsFullPathResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/groups/{group_id}/folders/by_path/*full_path',
        ...options
    });
};

/**
 * Get folder
 * Returns the details for a folder
 *
 * You can get the root folder from a context by using 'root' as the :id.
 * For example, you could get the root folder for a course like:
 */
export const getFolderGroups = <ThrowOnError extends boolean = false>(options: Options<GetFolderGroupsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetFolderGroupsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/groups/{group_id}/folders/{id}',
        ...options
    });
};

/**
 * Show front page
 * Retrieve the content of the front page
 */
export const showFrontPageGroups = <ThrowOnError extends boolean = false>(options: Options<ShowFrontPageGroupsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ShowFrontPageGroupsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/groups/{group_id}/front_page',
        ...options
    });
};

/**
 * Update/create front page
 * Update the title or contents of the front page
 */
export const updateCreateFrontPageGroups = <ThrowOnError extends boolean = false>(options: Options<UpdateCreateFrontPageGroupsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateCreateFrontPageGroupsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/groups/{group_id}/front_page',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Invite others to a group
 * Sends an invitation to all supplied email addresses which will allow the
 * receivers to join the group.
 */
export const inviteOthersToGroup = <ThrowOnError extends boolean = false>(options: Options<InviteOthersToGroupData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/groups/{group_id}/invite',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

/**
 * List group memberships
 * A paginated list of the members of a group.
 */
export const listGroupMemberships = <ThrowOnError extends boolean = false>(options: Options<ListGroupMembershipsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListGroupMembershipsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/groups/{group_id}/memberships',
        ...options
    });
};

/**
 * Create a membership
 * Join, or request to join, a group, depending on the join_level of the
 * group.  If the membership or join request already exists, then it is simply
 * returned
 */
export const createMembership = <ThrowOnError extends boolean = false>(options: Options<CreateMembershipData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateMembershipResponse, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/groups/{group_id}/memberships',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

/**
 * Leave a group
 * Leave a group if you are allowed to leave (some groups, such as sets of
 * course groups created by teachers, cannot be left). You may also use 'self'
 * in place of a membership_id.
 */
export const leaveGroupMemberships = <ThrowOnError extends boolean = false>(options: Options<LeaveGroupMembershipsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/groups/{group_id}/memberships/{membership_id}',
        ...options
    });
};

/**
 * Get a single group membership
 * Returns the group membership with the given membership id or user id.
 */
export const getSingleGroupMembershipMemberships = <ThrowOnError extends boolean = false>(options: Options<GetSingleGroupMembershipMembershipsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetSingleGroupMembershipMembershipsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/groups/{group_id}/memberships/{membership_id}',
        ...options
    });
};

/**
 * Update a membership
 * Accept a membership request, or add/remove moderator rights.
 */
export const updateMembershipMemberships = <ThrowOnError extends boolean = false>(options: Options<UpdateMembershipMembershipsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateMembershipMembershipsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/groups/{group_id}/memberships/{membership_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List pages
 * A paginated list of the wiki pages associated with a course or group
 */
export const listPagesGroups = <ThrowOnError extends boolean = false>(options: Options<ListPagesGroupsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListPagesGroupsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/groups/{group_id}/pages',
        ...options
    });
};

/**
 * Create page
 * Create a new wiki page
 */
export const createPageGroups = <ThrowOnError extends boolean = false>(options: Options<CreatePageGroupsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreatePageGroupsResponse, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/groups/{group_id}/pages',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

/**
 * Delete page
 * Delete a wiki page
 */
export const deletePageGroups = <ThrowOnError extends boolean = false>(options: Options<DeletePageGroupsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeletePageGroupsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/groups/{group_id}/pages/{url}',
        ...options
    });
};

/**
 * Show page
 * Retrieve the content of a wiki page
 */
export const showPageGroups = <ThrowOnError extends boolean = false>(options: Options<ShowPageGroupsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ShowPageGroupsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/groups/{group_id}/pages/{url}',
        ...options
    });
};

/**
 * Update/create page
 * Update the title or contents of a wiki page
 */
export const updateCreatePageGroups = <ThrowOnError extends boolean = false>(options: Options<UpdateCreatePageGroupsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateCreatePageGroupsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/groups/{group_id}/pages/{url}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List revisions
 * A paginated list of the revisions of a page. Callers must have update rights on the page in order to see page history.
 */
export const listRevisionsGroups = <ThrowOnError extends boolean = false>(options: Options<ListRevisionsGroupsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListRevisionsGroupsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/groups/{group_id}/pages/{url}/revisions',
        ...options
    });
};

/**
 * Show revision
 * Retrieve the metadata and optionally content of a revision of the page.
 * Note that retrieving historic versions of pages requires edit rights.
 */
export const showRevisionGroupsLatest = <ThrowOnError extends boolean = false>(options: Options<ShowRevisionGroupsLatestData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ShowRevisionGroupsLatestResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/groups/{group_id}/pages/{url}/revisions/latest',
        ...options
    });
};

/**
 * Show revision
 * Retrieve the metadata and optionally content of a revision of the page.
 * Note that retrieving historic versions of pages requires edit rights.
 */
export const showRevisionGroupsRevisionId = <ThrowOnError extends boolean = false>(options: Options<ShowRevisionGroupsRevisionIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ShowRevisionGroupsRevisionIdResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/groups/{group_id}/pages/{url}/revisions/{revision_id}',
        ...options
    });
};

/**
 * Revert to revision
 * Revert a page to a prior revision.
 */
export const revertToRevisionGroups = <ThrowOnError extends boolean = false>(options: Options<RevertToRevisionGroupsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RevertToRevisionGroupsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/groups/{group_id}/pages/{url}/revisions/{revision_id}',
        ...options
    });
};

/**
 * Permissions
 * Returns permission information for the calling user in the given group.
 * See also the {api:AccountsController#permissions Account} and
 * {api:CoursesController#permissions Course} counterparts.
 */
export const groupPermission = <ThrowOnError extends boolean = false>(options: Options<GroupPermissionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/groups/{group_id}/permissions',
        ...options
    });
};

/**
 * List potential members
 * A paginated list of the users who can potentially be added to a
 * collaboration in the given context.
 *
 * For courses, this consists of all enrolled users.  For groups, it is comprised of the
 * group members plus the admins of the course containing the group.
 */
export const listPotentialMembersGroups = <ThrowOnError extends boolean = false>(options: Options<ListPotentialMembersGroupsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListPotentialMembersGroupsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/groups/{group_id}/potential_collaborators',
        ...options
    });
};

/**
 * Preview processed html
 * Preview html content processed for this group
 */
export const previewProcessedHtmlGroup = <ThrowOnError extends boolean = false>(options: Options<PreviewProcessedHtmlGroupData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/groups/{group_id}/preview_html',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

/**
 * List available tabs for a course or group
 * Returns a paginated list of navigation tabs available in the current context.
 */
export const listAvailableTabsForCourseOrGroupGroups = <ThrowOnError extends boolean = false>(options: Options<ListAvailableTabsForCourseOrGroupGroupsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/groups/{group_id}/tabs',
        ...options
    });
};

/**
 * Remove usage rights
 * Removes copyright and license information associated with one or more files
 */
export const removeUsageRightsGroups = <ThrowOnError extends boolean = false>(options: Options<RemoveUsageRightsGroupsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/groups/{group_id}/usage_rights',
        ...options
    });
};

/**
 * Set usage rights
 * Sets copyright and license information for one or more files
 */
export const setUsageRightsGroups = <ThrowOnError extends boolean = false>(options: Options<SetUsageRightsGroupsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<SetUsageRightsGroupsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/groups/{group_id}/usage_rights',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List group's users
 * Returns a paginated list of users in the group.
 */
export const listGroupSUsers = <ThrowOnError extends boolean = false>(options: Options<ListGroupSusersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListGroupSusersResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/groups/{group_id}/users',
        ...options
    });
};

/**
 * Leave a group
 * Leave a group if you are allowed to leave (some groups, such as sets of
 * course groups created by teachers, cannot be left). You may also use 'self'
 * in place of a membership_id.
 */
export const leaveGroupUsers = <ThrowOnError extends boolean = false>(options: Options<LeaveGroupUsersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/groups/{group_id}/users/{user_id}',
        ...options
    });
};

/**
 * Get a single group membership
 * Returns the group membership with the given membership id or user id.
 */
export const getSingleGroupMembershipUsers = <ThrowOnError extends boolean = false>(options: Options<GetSingleGroupMembershipUsersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetSingleGroupMembershipUsersResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/groups/{group_id}/users/{user_id}',
        ...options
    });
};

/**
 * Update a membership
 * Accept a membership request, or add/remove moderator rights.
 */
export const updateMembershipUsers = <ThrowOnError extends boolean = false>(options: Options<UpdateMembershipUsersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateMembershipUsersResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/groups/{group_id}/users/{user_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Create JWT
 * Create a unique jwt for using with other canvas services
 *
 * Generates a different JWT each time it's called, each one expires
 * after a short window (1 hour)
 */
export const createJwt = <ThrowOnError extends boolean = false>(options?: Options<CreateJwtData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CreateJwtResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/jwts',
        ...options
    });
};

/**
 * Refresh JWT
 * Refresh a JWT for use with other canvas services
 *
 * Generates a different JWT each time it's called, each one expires
 * after a short window (1 hour).
 */
export const refreshJwt = <ThrowOnError extends boolean = false>(options: Options<RefreshJwtData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RefreshJwtResponse, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/jwts/refresh',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

/**
 * Show an outcome
 * Returns the details of the outcome with the given id.
 */
export const showOutcome = <ThrowOnError extends boolean = false>(options: Options<ShowOutcomeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ShowOutcomeResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/outcomes/{id}',
        ...options
    });
};

/**
 * Update an outcome
 * Modify an existing outcome. Fields not provided are left as is;
 * unrecognized fields are ignored.
 *
 * If any new ratings are provided, the combination of all new ratings
 * provided completely replace any existing embedded rubric criterion; it is
 * not possible to tweak the ratings of the embedded rubric criterion.
 *
 * A new embedded rubric criterion's mastery_points default to the maximum
 * points in the highest rating if not specified in the mastery_points
 * parameter. Any new ratings lacking a description are given a default of "No
 * description". Any new ratings lacking a point value are given a default of
 * 0.
 */
export const updateOutcome = <ThrowOnError extends boolean = false>(options: Options<UpdateOutcomeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateOutcomeResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/outcomes/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List planner items
 * Retrieve the paginated list of objects to be shown on the planner for the
 * current user with the associated planner override to override an item's
 * visibility if set.
 *
 * [
 * {
 * "context_type": "Course",
 * "course_id": 1,
 * "visible_in_planner": true, // Whether or not it is displayed on the student planner
 * "planner_override": { ... planner override object ... }, // Associated PlannerOverride object if user has toggled visibility for the object on the planner
 * "submissions": false, // The statuses of the user's submissions for this object
 * "plannable_id": "123",
 * "plannable_type": "discussion_topic",
 * "plannable": { ... discussion topic object },
 * "html_url": "/courses/1/discussion_topics/8"
 * },
 * {
 * "context_type": "Course",
 * "course_id": 1,
 * "visible_in_planner": true,
 * "planner_override": {
 * "id": 3,
 * "plannable_type": "Assignment",
 * "plannable_id": 1,
 * "user_id": 2,
 * "workflow_state": "active",
 * "marked_complete": true, // A user-defined setting for marking items complete in the planner
 * "dismissed": false, // A user-defined setting for hiding items from the opportunities list
 * "deleted_at": null,
 * "created_at": "2017-05-18T18:35:55Z",
 * "updated_at": "2017-05-18T18:35:55Z"
 * },
 * "submissions": { // The status as it pertains to the current user
 * "excused": false,
 * "graded": false,
 * "late": false,
 * "missing": true,
 * "needs_grading": false,
 * "with_feedback": false
 * },
 * "plannable_id": "456",
 * "plannable_type": "assignment",
 * "plannable": { ... assignment object ...  },
 * "html_url": "http://canvas.instructure.com/courses/1/assignments/1#submit"
 * },
 * {
 * "visible_in_planner": true,
 * "planner_override": null,
 * "submissions": false, // false if no associated assignment exists for the plannable item
 * "plannable_id": "789",
 * "plannable_type": "planner_note",
 * "plannable": {
 * "id": 1,
 * "todo_date": "2017-05-30T06:00:00Z",
 * "title": "hello",
 * "details": "world",
 * "user_id": 2,
 * "course_id": null,
 * "workflow_state": "active",
 * "created_at": "2017-05-30T16:29:04Z",
 * "updated_at": "2017-05-30T16:29:15Z"
 * },
 * "html_url": "http://canvas.instructure.com/api/v1/planner_notes.1"
 * }
 * ]
 */
export const listPlannerItems = <ThrowOnError extends boolean = false>(options?: Options<ListPlannerItemsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/planner/items',
        ...options
    });
};

/**
 * List planner overrides
 * Retrieve a planner override for the current user
 */
export const listPlannerOverrides = <ThrowOnError extends boolean = false>(options?: Options<ListPlannerOverridesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListPlannerOverridesResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/planner/overrides',
        ...options
    });
};

/**
 * Create a planner override
 * Create a planner override for the current user
 */
export const createPlannerOverride = <ThrowOnError extends boolean = false>(options?: Options<CreatePlannerOverrideData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CreatePlannerOverrideResponse, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/planner/overrides',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

/**
 * Delete a planner override
 * Delete a planner override for the current user
 */
export const deletePlannerOverride = <ThrowOnError extends boolean = false>(options: Options<DeletePlannerOverrideData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeletePlannerOverrideResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/planner/overrides/{id}',
        ...options
    });
};

/**
 * Show a planner override
 * Retrieve a planner override for the current user
 */
export const showPlannerOverride = <ThrowOnError extends boolean = false>(options: Options<ShowPlannerOverrideData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ShowPlannerOverrideResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/planner/overrides/{id}',
        ...options
    });
};

/**
 * Update a planner override
 * Update a planner override's visibilty for the current user
 */
export const updatePlannerOverride = <ThrowOnError extends boolean = false>(options: Options<UpdatePlannerOverrideData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdatePlannerOverrideResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/planner/overrides/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List planner notes
 * Retrieve the paginated list of planner notes
 *
 * Retrieve planner note for a user
 */
export const listPlannerNotes = <ThrowOnError extends boolean = false>(options?: Options<ListPlannerNotesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListPlannerNotesResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/planner_notes',
        ...options
    });
};

/**
 * Create a planner note
 * Create a planner note for the current user
 */
export const createPlannerNote = <ThrowOnError extends boolean = false>(options?: Options<CreatePlannerNoteData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CreatePlannerNoteResponse, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/planner_notes',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

/**
 * Delete a planner note
 * Delete a planner note for the current user
 */
export const deletePlannerNote = <ThrowOnError extends boolean = false>(options: Options<DeletePlannerNoteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeletePlannerNoteResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/planner_notes/{id}',
        ...options
    });
};

/**
 * Show a PlannerNote
 * Retrieve a planner note for the current user
 */
export const showPlannernote = <ThrowOnError extends boolean = false>(options: Options<ShowPlannernoteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ShowPlannernoteResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/planner_notes/{id}',
        ...options
    });
};

/**
 * Update a PlannerNote
 * Update a planner note for the current user
 */
export const updatePlannernote = <ThrowOnError extends boolean = false>(options: Options<UpdatePlannernoteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdatePlannernoteResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/planner_notes/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List closed poll sessions
 * A paginated list of all closed poll sessions available to the current user.
 */
export const listClosedPollSessions = <ThrowOnError extends boolean = false>(options?: Options<ListClosedPollSessionsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/poll_sessions/closed',
        ...options
    });
};

/**
 * List opened poll sessions
 * A paginated list of all opened poll sessions available to the current user.
 */
export const listOpenedPollSessions = <ThrowOnError extends boolean = false>(options?: Options<ListOpenedPollSessionsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/poll_sessions/opened',
        ...options
    });
};

/**
 * List polls
 * Returns the paginated list of polls for the current user.
 */
export const listPolls = <ThrowOnError extends boolean = false>(options?: Options<ListPollsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/polls',
        ...options
    });
};

/**
 * Create a single poll
 * Create a new poll for the current user
 */
export const createSinglePoll = <ThrowOnError extends boolean = false>(options: Options<CreateSinglePollData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/polls',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

/**
 * Delete a poll
 * <b>204 No Content</b> response code is returned if the deletion was successful.
 */
export const deletePoll = <ThrowOnError extends boolean = false>(options: Options<DeletePollData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/polls/{id}',
        ...options
    });
};

/**
 * Get a single poll
 * Returns the poll with the given id
 */
export const getSinglePoll = <ThrowOnError extends boolean = false>(options: Options<GetSinglePollData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/polls/{id}',
        ...options
    });
};

/**
 * Update a single poll
 * Update an existing poll belonging to the current user
 */
export const updateSinglePoll = <ThrowOnError extends boolean = false>(options: Options<UpdateSinglePollData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/polls/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List poll choices in a poll
 * Returns the paginated list of PollChoices in this poll.
 */
export const listPollChoicesInPoll = <ThrowOnError extends boolean = false>(options: Options<ListPollChoicesInPollData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/polls/{poll_id}/poll_choices',
        ...options
    });
};

/**
 * Create a single poll choice
 * Create a new poll choice for this poll
 */
export const createSinglePollChoice = <ThrowOnError extends boolean = false>(options: Options<CreateSinglePollChoiceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/polls/{poll_id}/poll_choices',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

/**
 * Delete a poll choice
 * <b>204 No Content</b> response code is returned if the deletion was successful.
 */
export const deletePollChoice = <ThrowOnError extends boolean = false>(options: Options<DeletePollChoiceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/polls/{poll_id}/poll_choices/{id}',
        ...options
    });
};

/**
 * Get a single poll choice
 * Returns the poll choice with the given id
 */
export const getSinglePollChoice = <ThrowOnError extends boolean = false>(options: Options<GetSinglePollChoiceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/polls/{poll_id}/poll_choices/{id}',
        ...options
    });
};

/**
 * Update a single poll choice
 * Update an existing poll choice for this poll
 */
export const updateSinglePollChoice = <ThrowOnError extends boolean = false>(options: Options<UpdateSinglePollChoiceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/polls/{poll_id}/poll_choices/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List poll sessions for a poll
 * Returns the paginated list of PollSessions in this poll.
 */
export const listPollSessionsForPoll = <ThrowOnError extends boolean = false>(options: Options<ListPollSessionsForPollData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/polls/{poll_id}/poll_sessions',
        ...options
    });
};

/**
 * Create a single poll session
 * Create a new poll session for this poll
 */
export const createSinglePollSession = <ThrowOnError extends boolean = false>(options: Options<CreateSinglePollSessionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/polls/{poll_id}/poll_sessions',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

/**
 * Delete a poll session
 * <b>204 No Content</b> response code is returned if the deletion was successful.
 */
export const deletePollSession = <ThrowOnError extends boolean = false>(options: Options<DeletePollSessionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/polls/{poll_id}/poll_sessions/{id}',
        ...options
    });
};

/**
 * Get the results for a single poll session
 * Returns the poll session with the given id
 */
export const getResultsForSinglePollSession = <ThrowOnError extends boolean = false>(options: Options<GetResultsForSinglePollSessionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/polls/{poll_id}/poll_sessions/{id}',
        ...options
    });
};

/**
 * Update a single poll session
 * Update an existing poll session for this poll
 */
export const updateSinglePollSession = <ThrowOnError extends boolean = false>(options: Options<UpdateSinglePollSessionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/polls/{poll_id}/poll_sessions/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Close an opened poll session
 */
export const closeOpenedPollSession = <ThrowOnError extends boolean = false>(options: Options<CloseOpenedPollSessionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/polls/{poll_id}/poll_sessions/{id}/close',
        ...options
    });
};

/**
 * Open a poll session
 */
export const openPollSession = <ThrowOnError extends boolean = false>(options: Options<OpenPollSessionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/polls/{poll_id}/poll_sessions/{id}/open',
        ...options
    });
};

/**
 * Create a single poll submission
 * Create a new poll submission for this poll session
 */
export const createSinglePollSubmission = <ThrowOnError extends boolean = false>(options: Options<CreateSinglePollSubmissionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/polls/{poll_id}/poll_sessions/{poll_session_id}/poll_submissions',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

/**
 * Get a single poll submission
 * Returns the poll submission with the given id
 */
export const getSinglePollSubmission = <ThrowOnError extends boolean = false>(options: Options<GetSinglePollSubmissionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/polls/{poll_id}/poll_sessions/{poll_session_id}/poll_submissions/{id}',
        ...options
    });
};

/**
 * Query progress
 * Return completion and status information about an asynchronous job
 */
export const queryProgress = <ThrowOnError extends boolean = false>(options: Options<QueryProgressData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<QueryProgressResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/progress/{id}',
        ...options
    });
};

/**
 * Get all quiz submission questions.
 * Get a list of all the question records for this quiz submission.
 *
 * <b>200 OK</b> response code is returned if the request was successful.
 */
export const getAllQuizSubmissionQuestions = <ThrowOnError extends boolean = false>(options: Options<GetAllQuizSubmissionQuestionsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/quiz_submissions/{quiz_submission_id}/questions',
        ...options
    });
};

/**
 * Answering questions
 * Provide or update an answer to one or more QuizQuestions.
 */
export const answeringQuestions = <ThrowOnError extends boolean = false>(options: Options<AnsweringQuestionsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AnsweringQuestionsResponse, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/quiz_submissions/{quiz_submission_id}/questions',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

/**
 * Flagging a question.
 * Set a flag on a quiz question to indicate that you want to return to it
 * later.
 */
export const flaggingQuestion = <ThrowOnError extends boolean = false>(options: Options<FlaggingQuestionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/quiz_submissions/{quiz_submission_id}/questions/{id}/flag',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Unflagging a question.
 * Remove the flag that you previously set on a quiz question after you've
 * returned to it.
 */
export const unflaggingQuestion = <ThrowOnError extends boolean = false>(options: Options<UnflaggingQuestionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/quiz_submissions/{quiz_submission_id}/questions/{id}/unflag',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List all courses
 * A paginated list of all courses visible in the public index
 */
export const listAllCourses = <ThrowOnError extends boolean = false>(options?: Options<ListAllCoursesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListAllCoursesResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/search/all_courses',
        ...options
    });
};

/**
 * Find recipients
 * Find valid recipients (users, courses and groups) that the current user
 * can send messages to. The /api/v1/search/recipients path is the preferred
 * endpoint, /api/v1/conversations/find_recipients is deprecated.
 *
 * Pagination is supported.
 */
export const findRecipientsSearch = <ThrowOnError extends boolean = false>(options?: Options<FindRecipientsSearchData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/search/recipients',
        ...options
    });
};

/**
 * Redirect to the assignment override for a section
 * Responds with a redirect to the override for the given section, if any
 * (404 otherwise).
 */
export const redirectToAssignmentOverrideForSection = <ThrowOnError extends boolean = false>(options: Options<RedirectToAssignmentOverrideForSectionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/sections/{course_section_id}/assignments/{assignment_id}/override',
        ...options
    });
};

/**
 * Delete a section
 * Delete an existing section.  Returns the former Section.
 */
export const deleteSection = <ThrowOnError extends boolean = false>(options: Options<DeleteSectionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteSectionResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/sections/{id}',
        ...options
    });
};

/**
 * Get section information
 * Gets details about a specific section
 */
export const getSectionInformationSections = <ThrowOnError extends boolean = false>(options: Options<GetSectionInformationSectionsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetSectionInformationSectionsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/sections/{id}',
        ...options
    });
};

/**
 * Edit a section
 * Modify an existing section.
 */
export const editSection = <ThrowOnError extends boolean = false>(options: Options<EditSectionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<EditSectionResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/sections/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * De-cross-list a Section
 * Undo cross-listing of a Section, returning it to its original course.
 */
export const deCrossListSection = <ThrowOnError extends boolean = false>(options: Options<DeCrossListSectionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeCrossListSectionResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/sections/{id}/crosslist',
        ...options
    });
};

/**
 * Cross-list a Section
 * Move the Section to another course.  The new course may be in a different account (department),
 * but must belong to the same root account (institution).
 */
export const crossListSection = <ThrowOnError extends boolean = false>(options: Options<CrossListSectionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CrossListSectionResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/sections/{id}/crosslist/{new_course_id}',
        ...options
    });
};

/**
 * Get all Peer Reviews
 * Get a list of all Peer Reviews for this assignment
 */
export const getAllPeerReviewsSectionsPeerReviews = <ThrowOnError extends boolean = false>(options: Options<GetAllPeerReviewsSectionsPeerReviewsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetAllPeerReviewsSectionsPeerReviewsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/sections/{section_id}/assignments/{assignment_id}/peer_reviews',
        ...options
    });
};

/**
 * Submission Summary
 * Returns the number of submissions for the given assignment based on gradeable students
 * that fall into three categories: graded, ungraded, not submitted.
 */
export const submissionSummarySections = <ThrowOnError extends boolean = false>(options: Options<SubmissionSummarySectionsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/sections/{section_id}/assignments/{assignment_id}/submission_summary',
        ...options
    });
};

/**
 * List assignment submissions
 * A paginated list of all existing submissions for an assignment.
 */
export const listAssignmentSubmissionsSections = <ThrowOnError extends boolean = false>(options: Options<ListAssignmentSubmissionsSectionsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListAssignmentSubmissionsSectionsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/sections/{section_id}/assignments/{assignment_id}/submissions',
        ...options
    });
};

/**
 * Submit an assignment
 * Make a submission for an assignment. You must be enrolled as a student in
 * the course/section to do this.
 *
 * All online turn-in submission types are supported in this API. However,
 * there are a few things that are not yet supported:
 *
 * * Files can be submitted based on a file ID of a user or group file. However, there is no API yet for listing the user and group files, or uploading new files via the API. A file upload API is coming soon.
 * * Media comments can be submitted, however, there is no API yet for creating a media comment to submit.
 * * Integration with Google Docs is not yet supported.
 */
export const submitAssignmentSections = <ThrowOnError extends boolean = false>(options: Options<SubmitAssignmentSectionsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/sections/{section_id}/assignments/{assignment_id}/submissions',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

/**
 * Grade or comment on multiple submissions
 * Update the grading and comments on multiple student's assignment
 * submissions in an asynchronous job.
 *
 * The user must have permission to manage grades in the appropriate context
 * (course or section).
 */
export const gradeOrCommentOnMultipleSubmissionsSectionsAssignments = <ThrowOnError extends boolean = false>(options: Options<GradeOrCommentOnMultipleSubmissionsSectionsAssignmentsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<GradeOrCommentOnMultipleSubmissionsSectionsAssignmentsResponse, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/sections/{section_id}/assignments/{assignment_id}/submissions/update_grades',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

/**
 * Delete Peer Review
 * Delete a peer review for the assignment
 */
export const deletePeerReviewSections = <ThrowOnError extends boolean = false>(options: Options<DeletePeerReviewSectionsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeletePeerReviewSectionsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/sections/{section_id}/assignments/{assignment_id}/submissions/{submission_id}/peer_reviews',
        ...options
    });
};

/**
 * Get all Peer Reviews
 * Get a list of all Peer Reviews for this assignment
 */
export const getAllPeerReviewsSectionsSubmissions = <ThrowOnError extends boolean = false>(options: Options<GetAllPeerReviewsSectionsSubmissionsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetAllPeerReviewsSectionsSubmissionsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/sections/{section_id}/assignments/{assignment_id}/submissions/{submission_id}/peer_reviews',
        ...options
    });
};

/**
 * Create Peer Review
 * Create a peer review for the assignment
 */
export const createPeerReviewSections = <ThrowOnError extends boolean = false>(options: Options<CreatePeerReviewSectionsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreatePeerReviewSectionsResponse, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/sections/{section_id}/assignments/{assignment_id}/submissions/{submission_id}/peer_reviews',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

/**
 * Get a single submission
 * Get a single submission, based on user id.
 */
export const getSingleSubmissionSections = <ThrowOnError extends boolean = false>(options: Options<GetSingleSubmissionSectionsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/sections/{section_id}/assignments/{assignment_id}/submissions/{user_id}',
        ...options
    });
};

/**
 * Grade or comment on a submission
 * Comment on and/or update the grading for a student's assignment submission.
 * If any submission or rubric_assessment arguments are provided, the user
 * must have permission to manage grades in the appropriate context (course or
 * section).
 */
export const gradeOrCommentOnSubmissionSections = <ThrowOnError extends boolean = false>(options: Options<GradeOrCommentOnSubmissionSectionsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<GradeOrCommentOnSubmissionSectionsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/sections/{section_id}/assignments/{assignment_id}/submissions/{user_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Upload a file
 * Upload a file to a submission.
 *
 * This API endpoint is the first step in uploading a file to a submission as a student.
 * See the {file:file_uploads.html File Upload Documentation} for details on the file upload workflow.
 *
 * The final step of the file upload workflow will return the attachment data,
 * including the new file id. The caller can then POST to submit the
 * +online_upload+ assignment with these file ids.
 */
export const uploadFileSections = <ThrowOnError extends boolean = false>(options: Options<UploadFileSectionsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/sections/{section_id}/assignments/{assignment_id}/submissions/{user_id}/files',
        ...options
    });
};

/**
 * Mark submission as unread
 * No request fields are necessary.
 *
 * On success, the response will be 204 No Content with an empty body.
 */
export const markSubmissionAsUnreadSections = <ThrowOnError extends boolean = false>(options: Options<MarkSubmissionAsUnreadSectionsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/sections/{section_id}/assignments/{assignment_id}/submissions/{user_id}/read',
        ...options
    });
};

/**
 * Mark submission as read
 * No request fields are necessary.
 *
 * On success, the response will be 204 No Content with an empty body.
 */
export const markSubmissionAsReadSections = <ThrowOnError extends boolean = false>(options: Options<MarkSubmissionAsReadSectionsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/sections/{section_id}/assignments/{assignment_id}/submissions/{user_id}/read',
        ...options
    });
};

/**
 * List enrollments
 * Depending on the URL given, return a paginated list of either (1) all of
 * the enrollments in a course, (2) all of the enrollments in a section or (3)
 * all of a user's enrollments. This includes student, teacher, TA, and
 * observer enrollments.
 *
 * If a user has multiple enrollments in a context (e.g. as a teacher
 * and a student or in multiple course sections), each enrollment will be
 * listed separately.
 *
 * note: Currently, only a root level admin user can return other users' enrollments. A
 * user can, however, return his/her own enrollments.
 */
export const listEnrollmentsSections = <ThrowOnError extends boolean = false>(options: Options<ListEnrollmentsSectionsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListEnrollmentsSectionsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/sections/{section_id}/enrollments',
        ...options
    });
};

/**
 * Enroll a user
 * Create a new user enrollment for a course or section.
 */
export const enrollUserSections = <ThrowOnError extends boolean = false>(options: Options<EnrollUserSectionsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<EnrollUserSectionsResponse, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/sections/{section_id}/enrollments',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

/**
 * List submissions for multiple assignments
 * A paginated list of all existing submissions for a given set of students and assignments.
 */
export const listSubmissionsForMultipleAssignmentsSections = <ThrowOnError extends boolean = false>(options: Options<ListSubmissionsForMultipleAssignmentsSectionsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/sections/{section_id}/students/submissions',
        ...options
    });
};

/**
 * Grade or comment on multiple submissions
 * Update the grading and comments on multiple student's assignment
 * submissions in an asynchronous job.
 *
 * The user must have permission to manage grades in the appropriate context
 * (course or section).
 */
export const gradeOrCommentOnMultipleSubmissionsSectionsSubmissions = <ThrowOnError extends boolean = false>(options: Options<GradeOrCommentOnMultipleSubmissionsSectionsSubmissionsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<GradeOrCommentOnMultipleSubmissionsSectionsSubmissionsResponse, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/sections/{section_id}/submissions/update_grades',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

/**
 * Get Kaltura config
 * Return the config information for the Kaltura plugin in json format.
 */
export const getKalturaConfig = <ThrowOnError extends boolean = false>(options?: Options<GetKalturaConfigData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/services/kaltura',
        ...options
    });
};

/**
 * Start Kaltura session
 * Start a new Kaltura session, so that new media can be recorded and uploaded
 * to this Canvas instance's Kaltura instance.
 */
export const startKalturaSession = <ThrowOnError extends boolean = false>(options?: Options<StartKalturaSessionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/services/kaltura_session',
        ...options
    });
};

/**
 * Un-share a BrandConfig (Theme)
 * Delete a SharedBrandConfig, which will unshare it so you nor anyone else in
 * your account will see it as an option to pick from.
 */
export const unShareBrandconfigTheme = <ThrowOnError extends boolean = false>(options: Options<UnShareBrandconfigThemeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<UnShareBrandconfigThemeResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/shared_brand_configs/{id}',
        ...options
    });
};

/**
 * List the activity stream
 * Returns the current user's global activity stream, paginated.
 *
 * There are many types of objects that can be returned in the activity
 * stream. All object types have the same basic set of shared attributes:
 * !!!javascript
 * {
 * 'created_at': '2011-07-13T09:12:00Z',
 * 'updated_at': '2011-07-25T08:52:41Z',
 * 'id': 1234,
 * 'title': 'Stream Item Subject',
 * 'message': 'This is the body text of the activity stream item. It is plain-text, and can be multiple paragraphs.',
 * 'type': 'DiscussionTopic|Conversation|Message|Submission|Conference|Collaboration|AssessmentRequest...',
 * 'read_state': false,
 * 'context_type': 'course', // course|group
 * 'course_id': 1,
 * 'group_id': null,
 * 'html_url': "http://..." // URL to the Canvas web UI for this stream item
 * }
 * In addition, each item type has its own set of attributes available.
 * DiscussionTopic:
 * 'type': 'DiscussionTopic',
 * 'discussion_topic_id': 1234,
 * 'total_root_discussion_entries': 5,
 * 'require_initial_post': true,
 * 'user_has_posted': true,
 * 'root_discussion_entries': {
 * ...
 * }
 * For DiscussionTopic, the message is truncated at 4kb.
 * Announcement:
 * 'type': 'Announcement',
 * 'announcement_id': 1234,
 * 'total_root_discussion_entries': 5,
 * 'require_initial_post': true,
 * 'user_has_posted': null,
 * 'root_discussion_entries': {
 * ...
 * For Announcement, the message is truncated at 4kb.
 * Conversation:
 * 'type': 'Conversation',
 * 'conversation_id': 1234,
 * 'private': false,
 * 'participant_count': 3,
 * Message:
 * 'type': 'Message',
 * 'message_id': 1234,
 * 'notification_category': 'Assignment Graded'
 * Submission:
 * Returns an {api:Submissions:Submission Submission} with its Course and Assignment data.
 * Conference:
 * 'type': 'Conference',
 * 'web_conference_id': 1234
 * Collaboration:
 * 'type': 'Collaboration',
 * 'collaboration_id': 1234
 * AssessmentRequest:
 * 'type': 'AssessmentRequest',
 * 'assessment_request_id': 1234
 */
export const listActivityStreamActivityStream = <ThrowOnError extends boolean = false>(options?: Options<ListActivityStreamActivityStreamData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListActivityStreamActivityStreamResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/users/activity_stream',
        ...options
    });
};

/**
 * Hide all stream items
 * Hide all stream items for the user
 */
export const hideAllStreamItems = <ThrowOnError extends boolean = false>(options?: Options<HideAllStreamItemsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/users/self/activity_stream',
        ...options
    });
};

/**
 * List the activity stream
 * Returns the current user's global activity stream, paginated.
 *
 * There are many types of objects that can be returned in the activity
 * stream. All object types have the same basic set of shared attributes:
 * !!!javascript
 * {
 * 'created_at': '2011-07-13T09:12:00Z',
 * 'updated_at': '2011-07-25T08:52:41Z',
 * 'id': 1234,
 * 'title': 'Stream Item Subject',
 * 'message': 'This is the body text of the activity stream item. It is plain-text, and can be multiple paragraphs.',
 * 'type': 'DiscussionTopic|Conversation|Message|Submission|Conference|Collaboration|AssessmentRequest...',
 * 'read_state': false,
 * 'context_type': 'course', // course|group
 * 'course_id': 1,
 * 'group_id': null,
 * 'html_url': "http://..." // URL to the Canvas web UI for this stream item
 * }
 *
 * In addition, each item type has its own set of attributes available.
 *
 * DiscussionTopic:
 *
 * !!!javascript
 * {
 * 'type': 'DiscussionTopic',
 * 'discussion_topic_id': 1234,
 * 'total_root_discussion_entries': 5,
 * 'require_initial_post': true,
 * 'user_has_posted': true,
 * 'root_discussion_entries': {
 * ...
 * }
 * }
 *
 * For DiscussionTopic, the message is truncated at 4kb.
 *
 * Announcement:
 *
 * !!!javascript
 * {
 * 'type': 'Announcement',
 * 'announcement_id': 1234,
 * 'total_root_discussion_entries': 5,
 * 'require_initial_post': true,
 * 'user_has_posted': null,
 * 'root_discussion_entries': {
 * ...
 * }
 * }
 *
 * For Announcement, the message is truncated at 4kb.
 *
 * Conversation:
 *
 * !!!javascript
 * {
 * 'type': 'Conversation',
 * 'conversation_id': 1234,
 * 'private': false,
 * 'participant_count': 3,
 * }
 *
 * Message:
 *
 * !!!javascript
 * {
 * 'type': 'Message',
 * 'message_id': 1234,
 * 'notification_category': 'Assignment Graded'
 * }
 *
 * Submission:
 *
 * Returns an {api:Submissions:Submission Submission} with its Course and Assignment data.
 *
 * Conference:
 *
 * !!!javascript
 * {
 * 'type': 'Conference',
 * 'web_conference_id': 1234
 * }
 *
 * Collaboration:
 *
 * !!!javascript
 * {
 * 'type': 'Collaboration',
 * 'collaboration_id': 1234
 * }
 *
 * AssessmentRequest:
 *
 * !!!javascript
 * {
 * 'type': 'AssessmentRequest',
 * 'assessment_request_id': 1234
 * }
 */
export const listActivityStreamSelf = <ThrowOnError extends boolean = false>(options?: Options<ListActivityStreamSelfData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/users/self/activity_stream',
        ...options
    });
};

/**
 * Activity stream summary
 * Returns a summary of the current user's global activity stream.
 */
export const activityStreamSummary = <ThrowOnError extends boolean = false>(options?: Options<ActivityStreamSummaryData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/users/self/activity_stream/summary',
        ...options
    });
};

/**
 * Hide a stream item
 * Hide the given stream item.
 */
export const hideStreamItem = <ThrowOnError extends boolean = false>(options: Options<HideStreamItemData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/users/self/activity_stream/{id}',
        ...options
    });
};

/**
 * List bookmarks
 * Returns the paginated list of bookmarks.
 */
export const listBookmarks = <ThrowOnError extends boolean = false>(options?: Options<ListBookmarksData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListBookmarksResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/users/self/bookmarks',
        ...options
    });
};

/**
 * Create bookmark
 * Creates a bookmark.
 */
export const createBookmark = <ThrowOnError extends boolean = false>(options?: Options<CreateBookmarkData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CreateBookmarkResponse, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/users/self/bookmarks',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

/**
 * Delete bookmark
 * Deletes a bookmark
 */
export const deleteBookmark = <ThrowOnError extends boolean = false>(options: Options<DeleteBookmarkData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/users/self/bookmarks/{id}',
        ...options
    });
};

/**
 * Get bookmark
 * Returns the details for a bookmark.
 */
export const getBookmark = <ThrowOnError extends boolean = false>(options: Options<GetBookmarkData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetBookmarkResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/users/self/bookmarks/{id}',
        ...options
    });
};

/**
 * Update bookmark
 * Updates a bookmark
 */
export const updateBookmark = <ThrowOnError extends boolean = false>(options: Options<UpdateBookmarkData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateBookmarkResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/users/self/bookmarks/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete a push notification endpoint
 */
export const deletePushNotificationEndpoint = <ThrowOnError extends boolean = false>(options?: Options<DeletePushNotificationEndpointData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).delete<DeletePushNotificationEndpointResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/users/self/communication_channels/push',
        ...options
    });
};

/**
 * Update preferences by category
 * Change the preferences for multiple notifications based on the category for a single communication channel
 */
export const updatePreferencesByCategory = <ThrowOnError extends boolean = false>(options: Options<UpdatePreferencesByCategoryData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/users/self/communication_channels/{communication_channel_id}/notification_preference_categories/{category}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Update multiple preferences
 * Change the preferences for multiple notifications for a single communication channel at once
 */
export const updateMultiplePreferencesCommunicationChannelId = <ThrowOnError extends boolean = false>(options: Options<UpdateMultiplePreferencesCommunicationChannelIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/users/self/communication_channels/{communication_channel_id}/notification_preferences',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Update a preference
 * Change the preference for a single notification for a single communication channel
 */
export const updatePreferenceCommunicationChannelId = <ThrowOnError extends boolean = false>(options: Options<UpdatePreferenceCommunicationChannelIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/users/self/communication_channels/{communication_channel_id}/notification_preferences/{notification}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Update multiple preferences
 * Change the preferences for multiple notifications for a single communication channel at once
 */
export const updateMultiplePreferencesType = <ThrowOnError extends boolean = false>(options: Options<UpdateMultiplePreferencesTypeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/users/self/communication_channels/{type}/{address}/notification_preferences',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Update a preference
 * Change the preference for a single notification for a single communication channel
 */
export const updatePreferenceType = <ThrowOnError extends boolean = false>(options: Options<UpdatePreferenceTypeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/users/self/communication_channels/{type}/{address}/notification_preferences/{notification}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Clear course nicknames
 * Remove all stored course nicknames.
 */
export const clearCourseNicknames = <ThrowOnError extends boolean = false>(options?: Options<ClearCourseNicknamesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/users/self/course_nicknames',
        ...options
    });
};

/**
 * List course nicknames
 * Returns all course nicknames you have set.
 */
export const listCourseNicknames = <ThrowOnError extends boolean = false>(options?: Options<ListCourseNicknamesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListCourseNicknamesResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/users/self/course_nicknames',
        ...options
    });
};

/**
 * Remove course nickname
 * Remove the nickname for the given course.
 * Subsequent course API calls will return the actual name for the course.
 */
export const removeCourseNickname = <ThrowOnError extends boolean = false>(options: Options<RemoveCourseNicknameData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<RemoveCourseNicknameResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/users/self/course_nicknames/{course_id}',
        ...options
    });
};

/**
 * Get course nickname
 * Returns the nickname for a specific course.
 */
export const getCourseNickname = <ThrowOnError extends boolean = false>(options: Options<GetCourseNicknameData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetCourseNicknameResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/users/self/course_nicknames/{course_id}',
        ...options
    });
};

/**
 * Set course nickname
 * Set a nickname for the given course. This will replace the course's name
 * in output of API calls you make subsequently, as well as in selected
 * places in the Canvas web user interface.
 */
export const setCourseNickname = <ThrowOnError extends boolean = false>(options: Options<SetCourseNicknameData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<SetCourseNicknameResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/users/self/course_nicknames/{course_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Reset course favorites
 * Reset the current user's course favorites to the default
 * automatically generated list of enrolled courses
 */
export const resetCourseFavorites = <ThrowOnError extends boolean = false>(options?: Options<ResetCourseFavoritesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/users/self/favorites/courses',
        ...options
    });
};

/**
 * List favorite courses
 * Retrieve the paginated list of favorite courses for the current user. If the user has not chosen
 * any favorites, then a selection of currently enrolled courses will be returned.
 *
 * See the {api:CoursesController#index List courses API} for details on accepted include[] parameters.
 */
export const listFavoriteCourses = <ThrowOnError extends boolean = false>(options?: Options<ListFavoriteCoursesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListFavoriteCoursesResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/users/self/favorites/courses',
        // fix bug where IDs dont get parsed correctly since they are big ints
        transformResponse: (raw: string) =>
            JSONbig({ storeAsString: true }).parse(raw),
        ...options
    });
};

/**
 * Remove course from favorites
 * Remove a course from the current user's favorites.
 */
export const removeCourseFromFavorites = <ThrowOnError extends boolean = false>(options: Options<RemoveCourseFromFavoritesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<RemoveCourseFromFavoritesResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/users/self/favorites/courses/{id}',
        ...options
    });
};

/**
 * Add course to favorites
 * Add a course to the current user's favorites.  If the course is already
 * in the user's favorites, nothing happens.
 */
export const addCourseToFavorites = <ThrowOnError extends boolean = false>(options: Options<AddCourseToFavoritesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AddCourseToFavoritesResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/users/self/favorites/courses/{id}',
        ...options
    });
};

/**
 * Reset group favorites
 * Reset the current user's group favorites to the default
 * automatically generated list of enrolled group
 */
export const resetGroupFavorites = <ThrowOnError extends boolean = false>(options?: Options<ResetGroupFavoritesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/users/self/favorites/groups',
        ...options
    });
};

/**
 * List favorite groups
 * Retrieve the paginated list of favorite groups for the current user. If the user has not chosen
 * any favorites, then a selection of groups that the user is a member of will be returned.
 */
export const listFavoriteGroups = <ThrowOnError extends boolean = false>(options?: Options<ListFavoriteGroupsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListFavoriteGroupsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/users/self/favorites/groups',
        ...options
    });
};

/**
 * Remove group from favorites
 * Remove a group from the current user's favorites.
 */
export const removeGroupFromFavorites = <ThrowOnError extends boolean = false>(options: Options<RemoveGroupFromFavoritesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<RemoveGroupFromFavoritesResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/users/self/favorites/groups/{id}',
        ...options
    });
};

/**
 * Add group to favorites
 * Add a group to the current user's favorites.  If the group is already
 * in the user's favorites, nothing happens.
 */
export const addGroupToFavorites = <ThrowOnError extends boolean = false>(options: Options<AddGroupToFavoritesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AddGroupToFavoritesResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/users/self/favorites/groups/{id}',
        ...options
    });
};

/**
 * List your groups
 * Returns a paginated list of active groups for the current user.
 */
export const listYourGroups = <ThrowOnError extends boolean = false>(options?: Options<ListYourGroupsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListYourGroupsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/users/self/groups',
        ...options
    });
};

/**
 * Get a Pandata Events jwt token and its expiration date
 * Returns a jwt auth and props token that can be used to send events to
 * Pandata.
 *
 * NOTE: This is currently only available to the mobile developer keys.
 */
export const getPandataEventsJwtTokenAndItsExpirationDate = <ThrowOnError extends boolean = false>(options?: Options<GetPandataEventsJwtTokenAndItsExpirationDateData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/users/self/pandata_events_token',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

/**
 * List the TODO items
 * A paginated list of the current user's list of todo items, as seen on the user dashboard.
 *
 * There is a limit to the number of items returned.
 *
 * The `ignore` and `ignore_permanently` URLs can be used to update the user's
 * preferences on what items will be displayed.
 * Performing a DELETE request against the `ignore` URL will hide that item
 * from future todo item requests, until the item changes.
 * Performing a DELETE request against the `ignore_permanently` URL will hide
 * that item forever.
 */
export const listTodoItems = <ThrowOnError extends boolean = false>(options?: Options<ListTodoItemsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/users/self/todo',
        ...options
    });
};

/**
 * List counts for todo items
 * Counts of different todo items such as the number of assignments needing grading as well as the number of assignments needing submitting.
 *
 * There is a limit to the number of todo items this endpoint will count.
 * It will only look at the first 100 todo items for the user. If the user has more than 100 todo items this count may not be reliable.
 * The largest reliable number for both counts is 100.
 */
export const listCountsForTodoItems = <ThrowOnError extends boolean = false>(options?: Options<ListCountsForTodoItemsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/users/self/todo_item_count',
        ...options
    });
};

/**
 * List upcoming assignments, calendar events
 * A paginated list of the current user's upcoming events.
 */
export const listUpcomingAssignmentsCalendarEvents = <ThrowOnError extends boolean = false>(options?: Options<ListUpcomingAssignmentsCalendarEventsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/users/self/upcoming_events',
        ...options
    });
};

/**
 * Show user details
 * Shows details for user.
 *
 * Also includes an attribute "permissions", a non-comprehensive list of permissions for the user.
 * Example:
 * !!!javascript
 * "permissions": {
 * "can_update_name": true, // Whether the user can update their name.
 * "can_update_avatar": false // Whether the user can update their avatar.
 * }
 */
export const showUserDetails = <ThrowOnError extends boolean = false>(options: Options<ShowUserDetailsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ShowUserDetailsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/users/{id}',
        ...options
    });
};

/**
 * Edit a user
 * Modify an existing user. To modify a user's login, see the documentation for logins.
 */
export const editUser = <ThrowOnError extends boolean = false>(options: Options<EditUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<EditUserResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/users/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get custom colors
 * Returns all custom colors that have been saved for a user.
 */
export const getCustomColors = <ThrowOnError extends boolean = false>(options: Options<GetCustomColorsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetCustomColorsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/users/{id}/colors',
        ...options
    });
};

/**
 * Get custom color
 * Returns the custom colors that have been saved for a user for a given context.
 *
 * The asset_string parameter should be in the format 'context_id', for example
 * 'course_42'.
 */
export const getCustomColor = <ThrowOnError extends boolean = false>(options: Options<GetCustomColorData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/users/{id}/colors/{asset_string}',
        ...options
    });
};

/**
 * Update custom color
 * Updates a custom color for a user for a given context.  This allows
 * colors for the calendar and elsewhere to be customized on a user basis.
 *
 * The asset string parameter should be in the format 'context_id', for example
 * 'course_42'
 */
export const updateCustomColor = <ThrowOnError extends boolean = false>(options: Options<UpdateCustomColorData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/users/{id}/colors/{asset_string}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get dashboard positions
 * Returns all dashboard positions that have been saved for a user.
 */
export const getDashboardPositions = <ThrowOnError extends boolean = false>(options: Options<GetDashboardPositionsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/users/{id}/dashboard_positions',
        ...options
    });
};

/**
 * Update dashboard positions
 * Updates the dashboard positions for a user for a given context.  This allows
 * positions for the dashboard cards and elsewhere to be customized on a per
 * user basis.
 *
 * The asset string parameter should be in the format 'context_id', for example
 * 'course_42'
 */
export const updateDashboardPositions = <ThrowOnError extends boolean = false>(options: Options<UpdateDashboardPositionsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/users/{id}/dashboard_positions',
        ...options
    });
};

/**
 * Merge user into another user
 * Merge a user into another user.
 * To merge users, the caller must have permissions to manage both users. This
 * should be considered irreversible. This will delete the user and move all
 * the data into the destination user.
 *
 * When finding users by SIS ids in different accounts the
 * destination_account_id is required.
 *
 * The account can also be identified by passing the domain in destination_account_id.
 */
export const mergeUserIntoAnotherUserAccounts = <ThrowOnError extends boolean = false>(options: Options<MergeUserIntoAnotherUserAccountsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<MergeUserIntoAnotherUserAccountsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/users/{id}/merge_into/accounts/{destination_account_id}/users/{destination_user_id}',
        ...options
    });
};

/**
 * Merge user into another user
 * Merge a user into another user.
 * To merge users, the caller must have permissions to manage both users. This
 * should be considered irreversible. This will delete the user and move all
 * the data into the destination user.
 *
 * When finding users by SIS ids in different accounts the
 * destination_account_id is required.
 *
 * The account can also be identified by passing the domain in destination_account_id.
 */
export const mergeUserIntoAnotherUserDestinationUserId = <ThrowOnError extends boolean = false>(options: Options<MergeUserIntoAnotherUserDestinationUserIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<MergeUserIntoAnotherUserDestinationUserIdResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/users/{id}/merge_into/{destination_user_id}',
        ...options
    });
};

/**
 * Update user settings.
 * Update an existing user's settings.
 */
export const updateUserSettings = <ThrowOnError extends boolean = false>(options: Options<UpdateUserSettingsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/users/{id}/settings',
        ...options
    });
};

/**
 * Split merged users into separate users
 * Merged users cannot be fully restored to their previous state, but this will
 * attempt to split as much as possible to the previous state.
 * To split a merged user, the caller must have permissions to manage all of
 * the users logins. If there are multiple users that have been merged into one
 * user it will split each merge into a separate user.
 * A split can only happen within 180 days of a user merge. A user merge deletes
 * the previous user and may be permanently deleted. In this scenario we create
 * a new user object and proceed to move as much as possible to the new user.
 * The user object will not have preserved the name or settings from the
 * previous user. Some items may have been deleted during a user_merge that
 * cannot be restored, and/or the data has become stale because of other
 * changes to the objects since the time of the user_merge.
 */
export const splitMergedUsersIntoSeparateUsers = <ThrowOnError extends boolean = false>(options: Options<SplitMergedUsersIntoSeparateUsersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SplitMergedUsersIntoSeparateUsersResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/users/{id}/split',
        ...options
    });
};

/**
 * List avatar options
 * A paginated list of the possible user avatar options that can be set with the user update endpoint. The response will be an array of avatar records. If the 'type' field is 'attachment', the record will include all the normal attachment json fields; otherwise it will include only the 'url' and 'display_name' fields. Additionally, all records will include a 'type' field and a 'token' field. The following explains each field in more detail
 * type:: ["gravatar"|"attachment"|"no_pic"] The type of avatar record, for categorization purposes.
 * url:: The url of the avatar
 * token:: A unique representation of the avatar record which can be used to set the avatar with the user update endpoint. Note: this is an internal representation and is subject to change without notice. It should be consumed with this api endpoint and used in the user update endpoint, and should not be constructed by the client.
 * display_name:: A textual description of the avatar record
 * id:: ['attachment' type only] the internal id of the attachment
 * content-type:: ['attachment' type only] the content-type of the attachment
 * filename:: ['attachment' type only] the filename of the attachment
 * size:: ['attachment' type only] the size of the attachment
 */
export const listAvatarOptions = <ThrowOnError extends boolean = false>(options: Options<ListAvatarOptionsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListAvatarOptionsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/users/{user_id}/avatars',
        ...options
    });
};

/**
 * List calendar events for a user
 * Retrieve the paginated list of calendar events or assignments for the specified user.
 * To view calendar events for a user other than yourself,
 * you must either be an observer of that user or an administrator.
 */
export const listCalendarEventsForUser = <ThrowOnError extends boolean = false>(options: Options<ListCalendarEventsForUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListCalendarEventsForUserResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/users/{user_id}/calendar_events',
        ...options
    });
};

/**
 * List user communication channels
 * Returns a paginated list of communication channels for the specified user,
 * sorted by position.
 */
export const listUserCommunicationChannels = <ThrowOnError extends boolean = false>(options: Options<ListUserCommunicationChannelsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListUserCommunicationChannelsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/users/{user_id}/communication_channels',
        ...options
    });
};

/**
 * Create a communication channel
 * Creates a new communication channel for the specified user.
 */
export const createCommunicationChannel = <ThrowOnError extends boolean = false>(options: Options<CreateCommunicationChannelData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateCommunicationChannelResponse, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/users/{user_id}/communication_channels',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

/**
 * List of preference categories
 * Fetch all notification preference categories for the given communication channel
 */
export const listOfPreferenceCategories = <ThrowOnError extends boolean = false>(options: Options<ListOfPreferenceCategoriesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/users/{user_id}/communication_channels/{communication_channel_id}/notification_preference_categories',
        ...options
    });
};

/**
 * List preferences
 * Fetch all preferences for the given communication channel
 */
export const listPreferencesCommunicationChannelId = <ThrowOnError extends boolean = false>(options: Options<ListPreferencesCommunicationChannelIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListPreferencesCommunicationChannelIdResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/users/{user_id}/communication_channels/{communication_channel_id}/notification_preferences',
        ...options
    });
};

/**
 * Get a preference
 * Fetch the preference for the given notification for the given communicaiton channel
 */
export const getPreferenceCommunicationChannelId = <ThrowOnError extends boolean = false>(options: Options<GetPreferenceCommunicationChannelIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetPreferenceCommunicationChannelIdResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/users/{user_id}/communication_channels/{communication_channel_id}/notification_preferences/{notification}',
        ...options
    });
};

/**
 * Delete a communication channel
 * Delete an existing communication channel.
 */
export const deleteCommunicationChannelId = <ThrowOnError extends boolean = false>(options: Options<DeleteCommunicationChannelIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteCommunicationChannelIdResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/users/{user_id}/communication_channels/{id}',
        ...options
    });
};

/**
 * Delete a communication channel
 * Delete an existing communication channel.
 */
export const deleteCommunicationChannelType = <ThrowOnError extends boolean = false>(options: Options<DeleteCommunicationChannelTypeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteCommunicationChannelTypeResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/users/{user_id}/communication_channels/{type}/{address}',
        ...options
    });
};

/**
 * List preferences
 * Fetch all preferences for the given communication channel
 */
export const listPreferencesType = <ThrowOnError extends boolean = false>(options: Options<ListPreferencesTypeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListPreferencesTypeResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/users/{user_id}/communication_channels/{type}/{address}/notification_preferences',
        ...options
    });
};

/**
 * Get a preference
 * Fetch the preference for the given notification for the given communicaiton channel
 */
export const getPreferenceType = <ThrowOnError extends boolean = false>(options: Options<GetPreferenceTypeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetPreferenceTypeResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/users/{user_id}/communication_channels/{type}/{address}/notification_preferences/{notification}',
        ...options
    });
};

/**
 * List content exports
 * A paginated list of the past and pending content export jobs for a course,
 * group, or user. Exports are returned newest first.
 */
export const listContentExportsUsers = <ThrowOnError extends boolean = false>(options: Options<ListContentExportsUsersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListContentExportsUsersResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/users/{user_id}/content_exports',
        ...options
    });
};

/**
 * Export content
 * Begin a content export job for a course, group, or user.
 *
 * You can use the {api:ProgressController#show Progress API} to track the
 * progress of the export. The migration's progress is linked to with the
 * _progress_url_ value.
 *
 * When the export completes, use the {api:ContentExportsApiController#show Show content export} endpoint
 * to retrieve a download URL for the exported content.
 */
export const exportContentUsers = <ThrowOnError extends boolean = false>(options: Options<ExportContentUsersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ExportContentUsersResponse, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/users/{user_id}/content_exports',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

/**
 * Show content export
 * Get information about a single content export.
 */
export const showContentExportUsers = <ThrowOnError extends boolean = false>(options: Options<ShowContentExportUsersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ShowContentExportUsersResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/users/{user_id}/content_exports/{id}',
        ...options
    });
};

/**
 * List licenses
 * A paginated list of licenses that can be applied
 */
export const listLicensesUsers = <ThrowOnError extends boolean = false>(options: Options<ListLicensesUsersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListLicensesUsersResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/users/{user_id}/content_licenses',
        ...options
    });
};

/**
 * List content migrations
 * Returns paginated content migrations
 */
export const listContentMigrationsUsers = <ThrowOnError extends boolean = false>(options: Options<ListContentMigrationsUsersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListContentMigrationsUsersResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/users/{user_id}/content_migrations',
        ...options
    });
};

/**
 * Create a content migration
 * Create a content migration. If the migration requires a file to be uploaded
 * the actual processing of the file will start once the file upload process is completed.
 * File uploading works as described in the {file:file_uploads.html File Upload Documentation}
 * except that the values are set on a *pre_attachment* sub-hash.
 *
 * For migrations that don't require a file to be uploaded, like course copy, the
 * processing will begin as soon as the migration is created.
 *
 * You can use the {api:ProgressController#show Progress API} to track the
 * progress of the migration. The migration's progress is linked to with the
 * _progress_url_ value.
 *
 * The two general workflows are:
 *
 * If no file upload is needed:
 *
 * 1. POST to create
 * 2. Use the {api:ProgressController#show Progress} specified in _progress_url_ to monitor progress
 *
 * For file uploading:
 *
 * 1. POST to create with file info in *pre_attachment*
 * 2. Do {file:file_uploads.html file upload processing} using the data in the *pre_attachment* data
 * 3. {api:ContentMigrationsController#show GET} the ContentMigration
 * 4. Use the {api:ProgressController#show Progress} specified in _progress_url_ to monitor progress
 *
 * (required if doing .zip file upload)
 */
export const createContentMigrationUsers = <ThrowOnError extends boolean = false>(options: Options<CreateContentMigrationUsersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateContentMigrationUsersResponse, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/users/{user_id}/content_migrations',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

/**
 * List Migration Systems
 * Lists the currently available migration types. These values may change.
 */
export const listMigrationSystemsUsers = <ThrowOnError extends boolean = false>(options: Options<ListMigrationSystemsUsersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListMigrationSystemsUsersResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/users/{user_id}/content_migrations/migrators',
        ...options
    });
};

/**
 * List migration issues
 * Returns paginated migration issues
 */
export const listMigrationIssuesUsers = <ThrowOnError extends boolean = false>(options: Options<ListMigrationIssuesUsersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListMigrationIssuesUsersResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/users/{user_id}/content_migrations/{content_migration_id}/migration_issues',
        ...options
    });
};

/**
 * Get a migration issue
 * Returns data on an individual migration issue
 */
export const getMigrationIssueUsers = <ThrowOnError extends boolean = false>(options: Options<GetMigrationIssueUsersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetMigrationIssueUsersResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/users/{user_id}/content_migrations/{content_migration_id}/migration_issues/{id}',
        ...options
    });
};

/**
 * Update a migration issue
 * Update the workflow_state of a migration issue
 */
export const updateMigrationIssueUsers = <ThrowOnError extends boolean = false>(options: Options<UpdateMigrationIssueUsersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateMigrationIssueUsersResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/users/{user_id}/content_migrations/{content_migration_id}/migration_issues/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get a content migration
 * Returns data on an individual content migration
 */
export const getContentMigrationUsers = <ThrowOnError extends boolean = false>(options: Options<GetContentMigrationUsersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetContentMigrationUsersResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/users/{user_id}/content_migrations/{id}',
        ...options
    });
};

/**
 * Update a content migration
 * Update a content migration. Takes same arguments as create except that you
 * can't change the migration type. However, changing most settings after the
 * migration process has started will not do anything. Generally updating the
 * content migration will be used when there is a file upload problem. If the
 * first upload has a problem you can supply new _pre_attachment_ values to
 * start the process again.
 */
export const updateContentMigrationUsers = <ThrowOnError extends boolean = false>(options: Options<UpdateContentMigrationUsersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateContentMigrationUsersResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/users/{user_id}/content_migrations/{id}',
        ...options
    });
};

/**
 * List courses for a user
 * Returns a paginated list of active courses for this user. To view the course list for a user other than yourself, you must be either an observer of that user or an administrator.
 */
export const listCoursesForUser = <ThrowOnError extends boolean = false>(options: Options<ListCoursesForUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListCoursesForUserResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/users/{user_id}/courses',
        ...options
    });
};

/**
 * List assignments for user
 * Returns the paginated list of assignments for the specified user if the current user has rights to view. See {api:AssignmentsApiController#index List assignments} for valid arguments.
 */
export const listAssignmentsForUser = <ThrowOnError extends boolean = false>(options: Options<ListAssignmentsForUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListAssignmentsForUserResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/users/{user_id}/courses/{course_id}/assignments',
        ...options
    });
};

/**
 * Delete custom data
 * Delete custom user data.
 *
 * Arbitrary JSON data can be stored for a User.  This API call
 * deletes that data for a given scope.  Without a scope, all custom_data is deleted.
 * See {api:UsersController#set_custom_data Store Custom Data} for details and
 * examples of storage and retrieval.
 *
 * As an example, we'll store some data, then delete a subset of it.
 *
 * Example {api:UsersController#set_custom_data PUT} with valid JSON data:
 * curl 'https://<canvas>/api/v1/users/<user_id>/custom_data' \
 * -X PUT \
 * -F 'ns=com.my-organization.canvas-app' \
 * -F 'data[fruit][apple]=so tasty' \
 * -F 'data[fruit][kiwi]=a bit sour' \
 * -F 'data[veggies][root][onion]=tear-jerking' \
 * -H 'Authorization: Bearer <token>'
 *
 * Response:
 * !!!javascript
 * {
 * "data": {
 * "fruit": {
 * "apple": "so tasty",
 * "kiwi": "a bit sour"
 * },
 * "veggies": {
 * "root": {
 * "onion": "tear-jerking"
 * }
 * }
 * }
 * }
 *
 * Example DELETE:
 * curl 'https://<canvas>/api/v1/users/<user_id>/custom_data/fruit/kiwi' \
 * -X DELETE \
 * -F 'ns=com.my-organization.canvas-app' \
 * -H 'Authorization: Bearer <token>'
 *
 * Response:
 * !!!javascript
 * {
 * "data": "a bit sour"
 * }
 *
 * Example {api:UsersController#get_custom_data GET} following the above DELETE:
 * curl 'https://<canvas>/api/v1/users/<user_id>/custom_data' \
 * -X GET \
 * -F 'ns=com.my-organization.canvas-app' \
 * -H 'Authorization: Bearer <token>'
 *
 * Response:
 * !!!javascript
 * {
 * "data": {
 * "fruit": {
 * "apple": "so tasty"
 * },
 * "veggies": {
 * "root": {
 * "onion": "tear-jerking"
 * }
 * }
 * }
 * }
 *
 * Note that hashes left empty after a DELETE will get removed from the custom_data store.
 * For example, following the previous commands, if we delete /custom_data/veggies/root/onion,
 * then the entire /custom_data/veggies scope will be removed.
 *
 * Example DELETE that empties a parent scope:
 * curl 'https://<canvas>/api/v1/users/<user_id>/custom_data/veggies/root/onion' \
 * -X DELETE \
 * -F 'ns=com.my-organization.canvas-app' \
 * -H 'Authorization: Bearer <token>'
 *
 * Response:
 * !!!javascript
 * {
 * "data": "tear-jerking"
 * }
 *
 * Example {api:UsersController#get_custom_data GET} following the above DELETE:
 * curl 'https://<canvas>/api/v1/users/<user_id>/custom_data' \
 * -X GET \
 * -F 'ns=com.my-organization.canvas-app' \
 * -H 'Authorization: Bearer <token>'
 *
 * Response:
 * !!!javascript
 * {
 * "data": {
 * "fruit": {
 * "apple": "so tasty"
 * }
 * }
 * }
 *
 * On success, this endpoint returns an object containing the data that was deleted.
 *
 * Responds with status code 400 if the namespace parameter, +ns+, is missing or invalid,
 * or if the specified scope does not contain any data.
 */
export const deleteCustomData = <ThrowOnError extends boolean = false>(options: Options<DeleteCustomDataData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/users/{user_id}/custom_data',
        ...options
    });
};

/**
 * Load custom data
 * Load custom user data.
 *
 * Arbitrary JSON data can be stored for a User.  This API call
 * retrieves that data for a (optional) given scope.
 * See {api:UsersController#set_custom_data Store Custom Data} for details and
 * examples.
 *
 * On success, this endpoint returns an object containing the data that was requested.
 *
 * Responds with status code 400 if the namespace parameter, +ns+, is missing or invalid,
 * or if the specified scope does not contain any data.
 */
export const loadCustomData = <ThrowOnError extends boolean = false>(options: Options<LoadCustomDataData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/users/{user_id}/custom_data',
        ...options
    });
};

/**
 * Store custom data
 * Store arbitrary user data as JSON.
 *
 * Arbitrary JSON data can be stored for a User.
 * A typical scenario would be an external site/service that registers users in Canvas
 * and wants to capture additional info about them.  The part of the URL that follows
 * +/custom_data/+ defines the scope of the request, and it reflects the structure of
 * the JSON data to be stored or retrieved.
 *
 * The value +self+ may be used for +user_id+ to store data associated with the calling user.
 * In order to access another user's custom data, you must be an account administrator with
 * permission to manage users.
 *
 * A namespace parameter, +ns+, is used to prevent custom_data collisions between
 * different apps.  This parameter is required for all custom_data requests.
 *
 * A request with Content-Type application/x-www-form-urlencoded or Content-Type
 * application/x-www-form-urlencoded can only be used to store strings.
 *
 * Example PUT with application/x-www-form-urlencoded data:
 * curl 'https://<canvas>/api/v1/users/<user_id>/custom_data/telephone' \
 * -X PUT \
 * -F 'ns=com.my-organization.canvas-app' \
 * -F 'data=555-1234' \
 * -H 'Authorization: Bearer <token>'
 *
 * Response:
 * !!!javascript
 * {
 * "data": "555-1234"
 * }
 *
 * Subscopes (or, generated scopes) can also be specified by passing values to
 * +data+[+subscope+].
 *
 * Example PUT specifying subscopes:
 * curl 'https://<canvas>/api/v1/users/<user_id>/custom_data/body/measurements' \
 * -X PUT \
 * -F 'ns=com.my-organization.canvas-app' \
 * -F 'data[waist]=32in' \
 * -F 'data[inseam]=34in' \
 * -F 'data[chest]=40in' \
 * -H 'Authorization: Bearer <token>'
 *
 * Response:
 * !!!javascript
 * {
 * "data": {
 * "chest": "40in",
 * "waist": "32in",
 * "inseam": "34in"
 * }
 * }
 *
 * Following such a request, subsets of the stored data to be retrieved directly from a subscope.
 *
 * Example {api:UsersController#get_custom_data GET} from a generated scope
 * curl 'https://<canvas>/api/v1/users/<user_id>/custom_data/body/measurements/chest' \
 * -X GET \
 * -F 'ns=com.my-organization.canvas-app' \
 * -H 'Authorization: Bearer <token>'
 *
 * Response:
 * !!!javascript
 * {
 * "data": "40in"
 * }
 *
 * If you want to store more than just strings (i.e. numbers, arrays, hashes, true, false,
 * and/or null), you must make a request with Content-Type application/json as in the following
 * example.
 *
 * Example PUT with JSON data:
 * curl 'https://<canvas>/api/v1/users/<user_id>/custom_data' \
 * -H 'Content-Type: application/json' \
 * -X PUT \
 * -d '{
 * "ns": "com.my-organization.canvas-app",
 * "data": {
 * "a-number": 6.02e23,
 * "a-bool": true,
 * "a-string": "true",
 * "a-hash": {"a": {"b": "ohai"}},
 * "an-array": [1, "two", null, false]
 * }
 * }' \
 * -H 'Authorization: Bearer <token>'
 *
 * Response:
 * !!!javascript
 * {
 * "data": {
 * "a-number": 6.02e+23,
 * "a-bool": true,
 * "a-string": "true",
 * "a-hash": {
 * "a": {
 * "b": "ohai"
 * }
 * },
 * "an-array": [1, "two", null, false]
 * }
 * }
 *
 * If the data is an Object (as it is in the above example), then subsets of the data can
 * be accessed by including the object's (possibly nested) keys in the scope of a GET request.
 *
 * Example {api:UsersController#get_custom_data GET} with a generated scope:
 * curl 'https://<canvas>/api/v1/users/<user_id>/custom_data/a-hash/a/b' \
 * -X GET \
 * -F 'ns=com.my-organization.canvas-app' \
 * -H 'Authorization: Bearer <token>'
 *
 * Response:
 * !!!javascript
 * {
 * "data": "ohai"
 * }
 *
 *
 * On success, this endpoint returns an object containing the data that was stored.
 *
 * Responds with status code 200 if the scope already contained data, and it was overwritten
 * by the data specified in the request.
 *
 * Responds with status code 201 if the scope was previously empty, and the data specified
 * in the request was successfully stored there.
 *
 * Responds with status code 400 if the namespace parameter, +ns+, is missing or invalid, or if
 * the +data+ parameter is missing.
 *
 * Responds with status code 409 if the requested scope caused a conflict and data was not stored.
 * This happens when storing data at the requested scope would cause data at an outer scope
 * to be lost.  e.g., if +/custom_data+ was +{"fashion_app": {"hair": "blonde"}}+, but
 * you tried to +`PUT /custom_data/fashion_app/hair/style -F data=buzz`+, then for the request
 * to succeed,the value of +/custom_data/fashion_app/hair+ would have to become a hash, and its
 * old string value would be lost.  In this situation, an error object is returned with the
 * following format:
 *
 * !!!javascript
 * {
 * "message": "write conflict for custom_data hash",
 * "conflict_scope": "fashion_app/hair",
 * "type_at_conflict": "String",
 * "value_at_conflict": "blonde"
 * }
 */
export const storeCustomData = <ThrowOnError extends boolean = false>(options: Options<StoreCustomDataData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/users/{user_id}/custom_data',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List enrollments
 * Depending on the URL given, return a paginated list of Either (1) all of the enrollments in a course, (2) all of the enrollments in a section or (3) all of a user's enrollments. This includes student, teacher, TA, and observer enrollments. If a user has multiple enrollments in a context (e.g. as a teacher and a student or in multiple course sections), each enrollment will be listed separately. note: Currently, only a root level admin user can return other users' enrollments. A user can, however, return his/her own enrollments.
 */
export const listEnrollmentsUsers = <ThrowOnError extends boolean = false>(options: Options<ListEnrollmentsUsersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListEnrollmentsUsersResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/users/{user_id}/enrollments',
        ...options
    });
};

/**
 * List features
 * A paginated list of all features that apply to a given Account, Course, or User.
 */
export const listFeaturesUsers = <ThrowOnError extends boolean = false>(options: Options<ListFeaturesUsersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListFeaturesUsersResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/users/{user_id}/features',
        ...options
    });
};

/**
 * List enabled features
 * A paginated list of all features that are enabled on a given Account, Course, or User.
 * Only the feature names are returned.
 */
export const listEnabledFeaturesUsers = <ThrowOnError extends boolean = false>(options: Options<ListEnabledFeaturesUsersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/users/{user_id}/features/enabled',
        ...options
    });
};

/**
 * Remove feature flag
 * Remove feature flag for a given Account, Course, or User.  (Note that the flag must
 * be defined on the Account, Course, or User directly.)  The object will then inherit
 * the feature flags from a higher account, if any exist.  If this flag was 'on' or 'off',
 * then lower-level account flags that were masked by this one will apply again.
 */
export const removeFeatureFlagUsers = <ThrowOnError extends boolean = false>(options: Options<RemoveFeatureFlagUsersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<RemoveFeatureFlagUsersResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/users/{user_id}/features/flags/{feature}',
        ...options
    });
};

/**
 * Get feature flag
 * Get the feature flag that applies to a given Account, Course, or User.
 * The flag may be defined on the object, or it may be inherited from a parent
 * account. You can look at the context_id and context_type of the returned object
 * to determine which is the case. If these fields are missing, then the object
 * is the global Canvas default.
 */
export const getFeatureFlagUsers = <ThrowOnError extends boolean = false>(options: Options<GetFeatureFlagUsersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetFeatureFlagUsersResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/users/{user_id}/features/flags/{feature}',
        ...options
    });
};

/**
 * Set feature flag
 * Set a feature flag for a given Account, Course, or User. This call will fail if a parent account sets
 * a feature flag for the same feature in any state other than "allowed".
 */
export const setFeatureFlagUsers = <ThrowOnError extends boolean = false>(options: Options<SetFeatureFlagUsersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<SetFeatureFlagUsersResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/users/{user_id}/features/flags/{feature}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Upload a file
 * Upload a file to the user's personal files section. This API endpoint is the first step in uploading a file to a user's files. See the {file:file_uploads.html File Upload Documentation} for details on the file upload workflow. Note that typically users will only be able to upload files to their own files section. Passing a user_id of +self+ is an easy shortcut to specify the current user.
 */
export const uploadFileToUsersFiles = <ThrowOnError extends boolean = false>(options: Options<UploadFileToUsersFilesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/users/{user_id}/files',
        ...options
    });
};

/**
 * Get quota information
 * Returns the total and used storage quota for the course, group, or user.
 */
export const getQuotaInformationUsers = <ThrowOnError extends boolean = false>(options: Options<GetQuotaInformationUsersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/users/{user_id}/files/quota',
        ...options
    });
};

/**
 * Get file
 * Returns the standard attachment json object
 */
export const getFileUsers = <ThrowOnError extends boolean = false>(options: Options<GetFileUsersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetFileUsersResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/users/{user_id}/files/{id}',
        ...options
    });
};

/**
 * List all folders
 * Returns the paginated list of all folders for the given context. This will
 * be returned as a flat list containing all subfolders as well.
 */
export const listAllFoldersUsers = <ThrowOnError extends boolean = false>(options: Options<ListAllFoldersUsersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListAllFoldersUsersResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/users/{user_id}/folders',
        ...options
    });
};

/**
 * Create folder
 * Creates a folder in the specified context
 */
export const createFolderUsers = <ThrowOnError extends boolean = false>(options: Options<CreateFolderUsersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateFolderUsersResponse, unknown, ThrowOnError>({
        ...urlSearchParamsBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/users/{user_id}/folders',
        ...options,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        }
    });
};

/**
 * Resolve path
 * Given the full path to a folder, returns a list of all Folders in the path hierarchy,
 * starting at the root folder, and ending at the requested folder. The given path is
 * relative to the context's root folder and does not include the root folder's name
 * (e.g., "course files"). If an empty path is given, the context's root folder alone
 * is returned. Otherwise, if no folder exists with the given full path, a Not Found
 * error is returned.
 */
export const resolvePathUsers = <ThrowOnError extends boolean = false>(options: Options<ResolvePathUsersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ResolvePathUsersResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/users/{user_id}/folders/by_path',
        ...options
    });
};

/**
 * Resolve path
 * Given the full path to a folder, returns a list of all Folders in the path hierarchy,
 * starting at the root folder, and ending at the requested folder. The given path is
 * relative to the context's root folder and does not include the root folder's name
 * (e.g., "course files"). If an empty path is given, the context's root folder alone
 * is returned. Otherwise, if no folder exists with the given full path, a Not Found
 * error is returned.
 */
export const resolvePathUsersFullPath = <ThrowOnError extends boolean = false>(options: Options<ResolvePathUsersFullPathData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ResolvePathUsersFullPathResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/users/{user_id}/folders/by_path/*full_path',
        ...options
    });
};

/**
 * Get folder
 * Returns the details for a folder
 *
 * You can get the root folder from a context by using 'root' as the :id.
 * For example, you could get the root folder for a course like:
 */
export const getFolderUsers = <ThrowOnError extends boolean = false>(options: Options<GetFolderUsersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetFolderUsersResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/users/{user_id}/folders/{id}',
        ...options
    });
};

/**
 * List user logins
 * Given a user ID, return a paginated list of that user's logins for the given account.
 */
export const listUserLoginsUsers = <ThrowOnError extends boolean = false>(options: Options<ListUserLoginsUsersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/users/{user_id}/logins',
        ...options
    });
};

/**
 * Delete a user login
 * Delete an existing login.
 */
export const deleteUserLogin = <ThrowOnError extends boolean = false>(options: Options<DeleteUserLoginData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/users/{user_id}/logins/{id}',
        ...options
    });
};

/**
 * List Missing Submissions
 * A paginated list of past-due assignments for which the student does not have a submission.
 * The user sending the request must either be the student, an admin or a parent observer using the parent app
 */
export const listMissingSubmissions = <ThrowOnError extends boolean = false>(options: Options<ListMissingSubmissionsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListMissingSubmissionsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/users/{user_id}/missing_submissions',
        ...options
    });
};

/**
 * List observees
 * A paginated list of the users that the given user is observing.
 *
 * *Note:* all users are allowed to list their own observees. Administrators can list
 * other users' observees.
 *
 * The returned observees will include an attribute "observation_link_root_account_ids", a list
 * of ids for the root accounts the observer and observee are linked on. The observer will only be able to
 * observe in courses associated with these root accounts.
 */
export const listObservees = <ThrowOnError extends boolean = false>(options: Options<ListObserveesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListObserveesResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/users/{user_id}/observees',
        ...options
    });
};

/**
 * Add an observee with credentials
 * Register the given user to observe another user, given the observee's credentials.
 *
 * *Note:* all users are allowed to add their own observees, given the observee's
 * credentials or access token are provided. Administrators can add observees given credentials, access token or
 * the {api:UserObserveesController#update observee's id}.
 */
export const addObserveeWithCredentials = <ThrowOnError extends boolean = false>(options: Options<AddObserveeWithCredentialsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AddObserveeWithCredentialsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/users/{user_id}/observees',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Remove an observee
 * Unregisters a user as being observed by the given user.
 */
export const removeObservee = <ThrowOnError extends boolean = false>(options: Options<RemoveObserveeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<RemoveObserveeResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/users/{user_id}/observees/{observee_id}',
        ...options
    });
};

/**
 * Show an observee
 * Gets information about an observed user.
 *
 * *Note:* all users are allowed to view their own observees.
 */
export const showObservee = <ThrowOnError extends boolean = false>(options: Options<ShowObserveeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ShowObserveeResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/users/{user_id}/observees/{observee_id}',
        ...options
    });
};

/**
 * Add an observee
 * Registers a user as being observed by the given user.
 */
export const addObservee = <ThrowOnError extends boolean = false>(options: Options<AddObserveeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<AddObserveeResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/users/{user_id}/observees/{observee_id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List user page views
 * Return a paginated list of the user's page view history in json format,
 * similar to the available CSV download. Page views are returned in
 * descending order, newest to oldest.
 */
export const listUserPageViews = <ThrowOnError extends boolean = false>(options: Options<ListUserPageViewsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListUserPageViewsResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/users/{user_id}/page_views',
        ...options
    });
};

/**
 * Get user profile
 * Returns user profile data, including user id, name, and profile pic.
 *
 * When requesting the profile for the user accessing the API, the user's
 * calendar feed URL and LTI user id will be returned as well.
 */
export const getUserProfile = <ThrowOnError extends boolean = false>(options: Options<GetUserProfileData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetUserProfileResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/users/{user_id}/profile',
        ...options
    });
};

/**
 * Remove usage rights
 * Removes copyright and license information associated with one or more files
 */
export const removeUsageRightsUsers = <ThrowOnError extends boolean = false>(options: Options<RemoveUsageRightsUsersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        querySerializer: {
            array: {
                explode: false,
                style: 'form'
            }
        },
        url: '/v1/users/{user_id}/usage_rights',
        ...options
    });
};

/**
 * Set usage rights
 * Sets copyright and license information for one or more files
 */
export const setUsageRightsUsers = <ThrowOnError extends boolean = false>(options: Options<SetUsageRightsUsersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<SetUsageRightsUsersResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/users/{user_id}/usage_rights',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};