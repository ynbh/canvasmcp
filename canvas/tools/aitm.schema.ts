// Generated by ts-to-zod
import { z } from "zod";
import { type OutcomeGroupNullable, type Admin, type User, type Assignment, type SubmissionNullable, type AssignmentNullable, type Course, type Enrollment, type CourseWithIncludes, type UserNullable, type OutcomeImport, type OutcomeResultResponse, type OutcomeRollupResponse, type Page, type PageRevision, type SisImport, type Submission, type GetAllUsersInGroupLtiResponses, type GetAllUsersInGroupLtiResponse, type GetSingleUserLtiResponses, type GetSingleUserLtiResponse, type ListAccountAdminsResponses, type ListAccountAdminsResponse, type MakeAccountAdminResponses, type MakeAccountAdminResponse, type RemoveAccountAdminResponses, type RemoveAccountAdminResponse, type GetAllCoursesAccountsResponses, type GetAllCoursesAccountsResponse, type CreateNewCourseResponses, type CreateNewCourseResponse, type GetSingleCourseAccountsResponses, type GetSingleCourseAccountsResponse, type EnrollmentByIdResponses, type EnrollmentByIdResponse, type ImportOutcomesAccountsResponses, type ImportOutcomesAccountsResponse, type GetOutcomeImportStatusAccountsResponses, type GetOutcomeImportStatusAccountsResponse, type SelfRegisterUserResponses, type SelfRegisterUserResponse, type GetSisImportListResponses, type GetSisImportListResponse, type ImportSisDataResponses, type ImportSisDataResponse, type GetSisImportStatusResponses, type GetSisImportStatusResponse, type AbortSisImportResponses, type AbortSisImportResponse, type ListUsersInAccountResponses, type ListUsersInAccountResponse, type CreateUserResponses, type CreateUserResponse, type DeleteUserFromRootAccountResponses, type DeleteUserFromRootAccountResponse, type ListYourCoursesResponses, type ListYourCoursesResponse, type GetUserInACourseLevelAssignmentDataResponses, type GetUserInACourseLevelAssignmentDataResponse, type ListAssignmentsResponses, type ListAssignmentsResponse, type CreateAssignmentResponses, type CreateAssignmentResponse, type ListStudentsSelectedForModerationResponses, type ListStudentsSelectedForModerationResponse, type SelectStudentsForModerationResponses, type SelectStudentsForModerationResponse, type ListAssignmentSubmissionsCoursesResponses, type ListAssignmentSubmissionsCoursesResponse, type GetSingleSubmissionCoursesResponses, type GetSingleSubmissionCoursesResponse, type GradeOrCommentOnSubmissionCoursesResponses, type GradeOrCommentOnSubmissionCoursesResponse, type DeleteAssignmentResponses, type DeleteAssignmentResponse, type GetSingleAssignmentResponses, type GetSingleAssignmentResponse, type EditAssignmentResponses, type EditAssignmentResponse, type GetAssociatedCourseInformationResponses, type GetAssociatedCourseInformationResponse, type ListEnrollmentsCoursesResponses, type ListEnrollmentsCoursesResponse, type EnrollUserCoursesResponses, type EnrollUserCoursesResponse, type ConcludeDeactivateOrDeleteEnrollmentResponses, type ConcludeDeactivateOrDeleteEnrollmentResponse, type ReActivateEnrollmentResponses, type ReActivateEnrollmentResponse, type ShowFrontPageCoursesResponses, type ShowFrontPageCoursesResponse, type UpdateCreateFrontPageCoursesResponses, type UpdateCreateFrontPageCoursesResponse, type ImportOutcomesCoursesResponses, type ImportOutcomesCoursesResponse, type GetOutcomeImportStatusCoursesResponses, type GetOutcomeImportStatusCoursesResponse, type GetOutcomeResultsResponses, type GetOutcomeResultsResponse, type GetOutcomeResultRollupsResponses, type GetOutcomeResultRollupsResponse, type ListPagesCoursesResponses, type ListPagesCoursesResponse, type CreatePageCoursesResponses, type CreatePageCoursesResponse, type DeletePageCoursesResponses, type DeletePageCoursesResponse, type ShowPageCoursesResponses, type ShowPageCoursesResponse, type UpdateCreatePageCoursesResponses, type UpdateCreatePageCoursesResponse, type DuplicatePageResponses, type DuplicatePageResponse, type ListRevisionsCoursesResponses, type ListRevisionsCoursesResponse, type ShowRevisionCoursesLatestResponses, type ShowRevisionCoursesLatestResponse, type ShowRevisionCoursesRevisionIdResponses, type ShowRevisionCoursesRevisionIdResponse, type RevertToRevisionCoursesResponses, type RevertToRevisionCoursesResponse, type ListPotentialMembersCoursesResponses, type ListPotentialMembersCoursesResponse, type ListRecentlyLoggedInStudentsResponses, type ListRecentlyLoggedInStudentsResponse, type ResetCourseResponses, type ResetCourseResponse, type ListUsersInCourseSearchUsersResponses, type ListUsersInCourseSearchUsersResponse, type ListStudentsResponses, type ListStudentsResponse, type ListSubmissionsForMultipleAssignmentsCoursesResponses, type ListSubmissionsForMultipleAssignmentsCoursesResponse, type ListUsersInCourseUsersResponses, type ListUsersInCourseUsersResponse, type GetSingleUserResponses, type GetSingleUserResponse, type AddsLastAttendedDateToStudentEnrollmentInCourseResponses, type AddsLastAttendedDateToStudentEnrollmentInCourseResponse, type GetSingleCourseCoursesResponses, type GetSingleCourseCoursesResponse, type ListUsersInGroupCategoryResponses, type ListUsersInGroupCategoryResponse, type ShowFrontPageGroupsResponses, type ShowFrontPageGroupsResponse, type UpdateCreateFrontPageGroupsResponses, type UpdateCreateFrontPageGroupsResponse, type ListPagesGroupsResponses, type ListPagesGroupsResponse, type CreatePageGroupsResponses, type CreatePageGroupsResponse, type DeletePageGroupsResponses, type DeletePageGroupsResponse, type ShowPageGroupsResponses, type ShowPageGroupsResponse, type UpdateCreatePageGroupsResponses, type UpdateCreatePageGroupsResponse, type ListRevisionsGroupsResponses, type ListRevisionsGroupsResponse, type ShowRevisionGroupsLatestResponses, type ShowRevisionGroupsLatestResponse, type ShowRevisionGroupsRevisionIdResponses, type ShowRevisionGroupsRevisionIdResponse, type RevertToRevisionGroupsResponses, type RevertToRevisionGroupsResponse, type ListPotentialMembersGroupsResponses, type ListPotentialMembersGroupsResponse, type ListGroupSusersResponses, type ListGroupSusersResponse, type ListAllCoursesResponses, type ListAllCoursesResponse, type ListAssignmentSubmissionsSectionsResponses, type ListAssignmentSubmissionsSectionsResponse, type GradeOrCommentOnSubmissionSectionsResponses, type GradeOrCommentOnSubmissionSectionsResponse, type ListEnrollmentsSectionsResponses, type ListEnrollmentsSectionsResponse, type EnrollUserSectionsResponses, type EnrollUserSectionsResponse, type ListFavoriteCoursesResponses, type ListFavoriteCoursesResponse, type ShowUserDetailsResponses, type ShowUserDetailsResponse, type EditUserResponses, type EditUserResponse, type MergeUserIntoAnotherUserAccountsResponses, type MergeUserIntoAnotherUserAccountsResponse, type MergeUserIntoAnotherUserDestinationUserIdResponses, type MergeUserIntoAnotherUserDestinationUserIdResponse, type SplitMergedUsersIntoSeparateUsersResponses, type SplitMergedUsersIntoSeparateUsersResponse, type ListCoursesForUserResponses, type ListCoursesForUserResponse, type ListAssignmentsForUserResponses, type ListAssignmentsForUserResponse, type ListEnrollmentsUsersResponses, type ListEnrollmentsUsersResponse, type ListMissingSubmissionsResponses, type ListMissingSubmissionsResponse, type ListObserveesResponses, type ListObserveesResponse, type AddObserveeWithCredentialsResponses, type AddObserveeWithCredentialsResponse, type RemoveObserveeResponses, type RemoveObserveeResponse, type ShowObserveeResponses, type ShowObserveeResponse, type AddObserveeResponses, type AddObserveeResponse } from "..";

export const accountSchema = z.object({
    default_group_storage_quota_mb: z.number().optional().nullable(),
    default_storage_quota_mb: z.number().optional().nullable(),
    default_time_zone: z.string().optional().nullable(),
    default_user_storage_quota_mb: z.number().optional().nullable(),
    id: z.number().optional().nullable(),
    integration_id: z.string().optional().nullable(),
    lti_guid: z.string().optional().nullable(),
    name: z.string().optional().nullable(),
    parent_account_id: z.number().optional().nullable(),
    root_account_id: z.number().optional().nullable(),
    sis_account_id: z.string().optional().nullable(),
    sis_import_id: z.number().optional().nullable(),
    uuid: z.string().optional().nullable(),
    workflow_state: z.string().optional().nullable()
});

export const accountNotificationSchema = z.object({
    end_at: z.string().optional().nullable(),
    icon: z.string().optional().nullable(),
    message: z.string().optional().nullable(),
    role_ids: z.array(z.number()).optional().nullable(),
    roles: z.array(z.string()).optional().nullable(),
    start_at: z.string().optional().nullable(),
    subject: z.string().optional().nullable()
});

export const activityStreamSchema = z.object({
    created_at: z.string().optional(),
    updated_at: z.string().optional(),
    id: z.number().optional(),
    title: z.string().optional(),
    message: z.string().optional(),
    type: z.string().optional(),
    read_state: z.boolean().optional(),
    context_type: z.string().optional(),
    course_id: z.number().optional(),
    group_id: z.number().optional(),
    html_url: z.string().optional()
});

export const answerSchema = z.object({
    answer_comments: z.string().optional().nullable(),
    answer_match_left: z.string().optional().nullable(),
    answer_match_right: z.string().optional().nullable(),
    answer_text: z.string(),
    answer_weight: z.number(),
    approximate: z.number().optional().nullable(),
    blank_id: z.number().optional().nullable(),
    end: z.number().optional().nullable(),
    exact: z.number().optional().nullable(),
    id: z.number().optional().nullable(),
    margin: z.number().optional().nullable(),
    matching_answer_incorrect_matches: z.string().optional().nullable(),
    numerical_answer_type: z.string().optional().nullable(),
    precision: z.number().optional().nullable(),
    start: z.number().optional().nullable(),
    text_after_answers: z.string().optional().nullable()
});

export const assignmentDateSchema = z.object({
    base: z.boolean().optional().nullable(),
    due_at: z.string().optional().nullable(),
    id: z.number().optional().nullable(),
    lock_at: z.string().optional().nullable(),
    title: z.string().optional().nullable(),
    unlock_at: z.string().optional().nullable()
});

export const externalToolTagAttributesSchema = z.object({
    new_tab: z.boolean().optional().nullable(),
    resource_link_id: z.string().optional().nullable(),
    url: z.string().optional().nullable()
}).nullable();

export const lockInfoSchema = z.object({
    asset_string: z.string().optional().nullable(),
    context_module: z.string().optional().nullable(),
    lock_at: z.string().optional().nullable(),
    manually_locked: z.boolean().optional().nullable(),
    unlock_at: z.string().optional().nullable()
}).nullable();

export const needsGradingCountSchema = z.object({
    needs_grading_count: z.number().optional().nullable(),
    section_id: z.string().optional().nullable()
});

export const assignmentOverrideSchema = z.object({
    all_day: z.number().optional().nullable(),
    all_day_date: z.string().optional().nullable(),
    assignment_id: z.number().optional().nullable(),
    course_section_id: z.number().optional().nullable(),
    due_at: z.string().optional().nullable(),
    group_id: z.number().optional().nullable(),
    id: z.number().optional().nullable(),
    lock_at: z.string().optional().nullable(),
    student_ids: z.array(z.number()).optional().nullable(),
    title: z.string().optional().nullable(),
    unlock_at: z.string().optional().nullable()
});

export const rubricSettingsSchema = z.object({
    id: z.number().optional().nullable(),
    title: z.string().optional().nullable(),
    points_possible: z.number().optional().nullable(),
    free_form_criterion_comments: z.boolean().optional().nullable(),
    hide_score_total: z.boolean().optional().nullable(),
    hide_points: z.boolean().optional().nullable()
}).nullable();

export const turnitinSettingsSchema = z.object({
    exclude_biblio: z.boolean().optional().nullable(),
    exclude_quoted: z.boolean().optional().nullable(),
    exclude_small_matches_type: z.string().optional().nullable(),
    exclude_small_matches_value: z.number().optional().nullable(),
    internet_check: z.boolean().optional().nullable(),
    journal_check: z.boolean().optional().nullable(),
    originality_report_visibility: z.string().optional().nullable(),
    s_paper_check: z.boolean().optional().nullable()
}).nullable();

export const gradingRulesSchema = z.object({
    drop_highest: z.number().optional().nullable(),
    drop_lowest: z.number().optional().nullable(),
    never_drop: z.array(z.number()).optional().nullable()
}).nullable();

export const federatedAttributesConfigSchema = z.object({
    admin_roles: z.string().optional().nullable(),
    display_name: z.string().optional().nullable(),
    email: z.string().optional().nullable(),
    given_name: z.string().optional().nullable(),
    integration_id: z.string().optional().nullable(),
    locale: z.string().optional().nullable(),
    name: z.string().optional().nullable(),
    sis_user_id: z.string().optional().nullable(),
    sortable_name: z.string().optional().nullable(),
    surname: z.string().optional().nullable(),
    timezone: z.string().optional().nullable()
}).nullable();

export const avatarSchema = z.object({
    "content-type": z.string().optional().nullable(),
    display_name: z.string(),
    filename: z.string().optional().nullable(),
    id: z.number().optional().nullable(),
    size: z.number().optional().nullable(),
    token: z.string(),
    type: z.string(),
    url: z.string()
});

export const blueprintMigrationSchema = z.object({
    comment: z.string().optional().nullable(),
    created_at: z.string().optional().nullable(),
    exports_started_at: z.string().optional().nullable(),
    id: z.number().optional().nullable(),
    imports_completed_at: z.string().optional().nullable(),
    imports_queued_at: z.string().optional().nullable(),
    subscription_id: z.number().optional().nullable(),
    template_id: z.number().optional().nullable(),
    user_id: z.number().optional().nullable(),
    workflow_state: z.string().optional().nullable()
});

export const blueprintMigrationNullableSchema = z.object({
    comment: z.string().optional().nullable(),
    created_at: z.string().optional().nullable(),
    exports_started_at: z.string().optional().nullable(),
    id: z.number().optional().nullable(),
    imports_completed_at: z.string().optional().nullable(),
    imports_queued_at: z.string().optional().nullable(),
    subscription_id: z.number().optional().nullable(),
    template_id: z.number().optional().nullable(),
    user_id: z.number().optional().nullable(),
    workflow_state: z.string().optional().nullable()
}).nullable();

export const blueprintSubscriptionSchema = z.object({
    blueprint_course: z.record(z.unknown()).optional().nullable(),
    id: z.number().optional().nullable(),
    template_id: z.number().optional().nullable()
});

export const blueprintTemplateSchema = z.object({
    associated_course_count: z.number().optional().nullable(),
    course_id: z.number().optional().nullable(),
    id: z.number().optional().nullable(),
    last_export_completed_at: z.string().optional().nullable(),
    latest_migration: blueprintMigrationNullableSchema.optional()
});

export const bookmarkSchema = z.object({
    data: z.record(z.unknown()).optional().nullable(),
    id: z.number().optional().nullable(),
    name: z.string().optional().nullable(),
    position: z.number().optional().nullable(),
    url: z.string().optional()
});

export const calendarEventSchema = z.object({
    all_context_codes: z.string().optional().nullable(),
    all_day: z.boolean().optional().nullable(),
    all_day_date: z.string().optional().nullable(),
    appointment_group_id: z.number().optional().nullable(),
    appointment_group_url: z.string().optional().nullable(),
    available_slots: z.number().optional().nullable(),
    child_events: z.array(z.number()).optional().nullable(),
    child_events_count: z.number().optional().nullable(),
    context_code: z.string().optional().nullable(),
    created_at: z.string().optional().nullable(),
    description: z.string().optional().nullable(),
    effective_context_code: z.string().optional().nullable(),
    end_at: z.string().optional().nullable(),
    group: z.string().optional().nullable(),
    hidden: z.boolean().optional().nullable(),
    html_url: z.string().optional().nullable(),
    id: z.number().optional().nullable(),
    location_address: z.string().optional().nullable(),
    location_name: z.string().optional().nullable(),
    own_reservation: z.boolean().optional().nullable(),
    parent_event_id: z.number().optional().nullable(),
    participant_type: z.string().optional().nullable(),
    participants_per_appointment: z.number().optional().nullable(),
    reserve_url: z.string().optional().nullable(),
    reserved: z.boolean().optional().nullable(),
    start_at: z.string().optional().nullable(),
    title: z.string().optional().nullable(),
    updated_at: z.string().optional().nullable(),
    url: z.string().optional(),
    user: z.string().optional().nullable(),
    workflow_state: z.string().optional().nullable()
});

export const calendarLinkSchema = z.object({
    ics: z.string().optional().nullable()
}).nullable();

export const changeRecordSchema = z.object({
    asset_id: z.number().optional().nullable(),
    asset_name: z.string().optional().nullable(),
    asset_type: z.string().optional().nullable(),
    change_type: z.string().optional().nullable(),
    exceptions: z.array(z.record(z.unknown())).optional().nullable(),
    html_url: z.string().optional().nullable(),
    locked: z.boolean().optional().nullable()
});

export const collaborationSchema = z.object({
    collaboration_type: z.string().optional().nullable(),
    context_id: z.number().optional().nullable(),
    context_type: z.string().optional().nullable(),
    created_at: z.string().optional().nullable(),
    description: z.string().optional().nullable(),
    document_id: z.string().optional().nullable(),
    id: z.number().optional().nullable(),
    title: z.string().optional().nullable(),
    type: z.string().optional(),
    update_url: z.string().optional().nullable(),
    updated_at: z.string().optional().nullable(),
    url: z.string().optional(),
    user_id: z.number().optional().nullable(),
    user_name: z.string().optional().nullable()
});

export const collaboratorSchema = z.object({
    id: z.number(),
    name: z.string().optional().nullable(),
    type: z.string().optional().nullable()
});

export const columnDatumSchema = z.object({
    content: z.string().optional().nullable(),
    user_id: z.number().optional().nullable()
});

export const commMessageSchema = z.object({
    body: z.string().optional().nullable(),
    created_at: z.string().optional().nullable(),
    from: z.string().optional().nullable(),
    from_name: z.string().optional().nullable(),
    html_body: z.string().optional().nullable(),
    id: z.number().optional(),
    reply_to: z.string().optional().nullable(),
    sent_at: z.string().optional().nullable(),
    subject: z.string().optional().nullable(),
    to: z.string().optional().nullable(),
    workflow_state: z.string().optional().nullable()
});

export const communicationChannelSchema = z.object({
    address: z.string().optional().nullable(),
    id: z.number().optional(),
    position: z.number().optional().nullable(),
    type: z.string().optional().nullable(),
    user_id: z.number().optional().nullable(),
    workflow_state: z.string().optional().nullable()
});

export const completionRequirementSchema = z.object({
    completed: z.boolean().optional().nullable(),
    min_score: z.number().optional().nullable(),
    type: z.string().optional().nullable()
}).nullable();

export const conferenceRecordingSchema = z.object({
    created_at: z.string().optional().nullable(),
    duration_minutes: z.number().optional().nullable(),
    playback_url: z.string().optional().nullable(),
    title: z.string().optional().nullable(),
    updated_at: z.string().optional().nullable()
});

export const contentDetailsSchema = z.object({
    due_at: z.string().optional().nullable(),
    lock_at: z.string().optional().nullable(),
    lock_explanation: z.string().optional().nullable(),
    lock_info: lockInfoSchema.optional(),
    locked_for_user: z.boolean().optional().nullable(),
    points_possible: z.number().optional().nullable(),
    unlock_at: z.string().optional().nullable()
}).nullable();

export const fileNullableSchema = z.object({
    "content-type": z.string().optional().nullable(),
    created_at: z.string().optional().nullable(),
    display_name: z.string().optional().nullable(),
    id: z.number().optional(),
    size: z.number().optional().nullable(),
    updated_at: z.string().optional().nullable(),
    url: z.string().optional().nullable()
}).nullable();

export const contentMigrationSchema = z.object({
    attachment: z.string().optional().nullable(),
    finished_at: z.string().optional().nullable(),
    id: z.number().optional(),
    migration_issues_url: z.string().optional().nullable(),
    migration_type: z.string().optional().nullable(),
    migration_type_title: z.string().optional().nullable(),
    pre_attachment: z.string().optional().nullable(),
    progress_url: z.string().optional().nullable(),
    started_at: z.string().optional().nullable(),
    user_id: z.number().optional().nullable(),
    workflow_state: z.string().optional().nullable()
});

export const contextExternalToolSchema = z.object({
    consumer_key: z.string().optional().nullable(),
    domain: z.string().optional().nullable(),
    id: z.number().optional(),
    name: z.string().optional().nullable(),
    url: z.string().optional().nullable()
});

export const conversationParticipantSchema = z.object({
    avatar_url: z.string().optional().nullable(),
    full_name: z.string().optional().nullable(),
    id: z.number().optional(),
    name: z.string().optional().nullable()
});

export const courseProgressSchema = z.object({
    completed_at: z.string().optional().nullable(),
    next_requirement_url: z.string().optional().nullable(),
    requirement_completed_count: z.number().optional().nullable(),
    requirement_count: z.number().optional().nullable()
}).nullable();

export const gradingPeriodSchema = z.object({
    close_date: z.string().optional().nullable(),
    end_date: z.string().optional().nullable(),
    id: z.number().optional(),
    is_closed: z.boolean().optional().nullable(),
    start_date: z.string().optional().nullable(),
    title: z.string().optional().nullable(),
    weight: z.number().optional().nullable()
});

export const termSchema = z.object({
    end_at: z.string().optional().nullable(),
    id: z.number().optional(),
    name: z.string().optional().nullable(),
    start_at: z.string().optional().nullable()
}).nullable();

export const epubExportNullableSchema = z.object({
    attachment: fileNullableSchema.optional(),
    created_at: z.string().optional().nullable(),
    id: z.number().optional(),
    progress_url: z.string().optional().nullable(),
    user_id: z.number().optional().nullable(),
    workflow_state: z.string().optional().nullable()
}).nullable();

export const courseEventLinkSchema = z.object({
    copied_from: z.number().optional().nullable(),
    copied_to: z.number().optional().nullable(),
    course: z.number().optional().nullable(),
    page_view: z.string().optional().nullable(),
    sis_batch: z.number().optional().nullable(),
    user: z.number().optional().nullable()
}).nullable();

export const courseNicknameSchema = z.object({
    course_id: z.number().optional().nullable(),
    name: z.string().optional().nullable(),
    nickname: z.string().optional().nullable()
});

export const customColorsSchema = z.object({
    custom_colors: z.record(z.string()).optional().nullable()
});

export const customColumnSchema = z.object({
    hidden: z.boolean().optional().nullable(),
    id: z.number().optional(),
    position: z.number().optional().nullable(),
    read_only: z.boolean().optional().nullable(),
    teacher_notes: z.boolean().optional().nullable(),
    title: z.string().optional().nullable()
});

export const daySchema = z.object({
    date: z.string().optional().nullable(),
    graders: z.number().optional().nullable()
});

export const fileAttachmentSchema = z.object({
    "content-type": z.string().optional().nullable(),
    display_name: z.string().optional().nullable(),
    filename: z.string().optional().nullable(),
    url: z.string().optional().nullable()
});

export const discussionTopicNullableSchema = z.object({
    allow_rating: z.boolean().optional().nullable(),
    assignment_id: z.number().optional().nullable(),
    attachments: z.array(fileAttachmentSchema).optional().nullable(),
    delayed_post_at: z.string().optional().nullable(),
    discussion_subentry_count: z.number().optional().nullable(),
    discussion_type: z.string().optional().nullable(),
    group_category_id: z.number().optional().nullable(),
    group_topic_children: z.array(z.record(z.unknown())).optional().nullable(),
    html_url: z.string().optional().nullable(),
    id: z.number().optional(),
    last_reply_at: z.string().optional().nullable(),
    lock_at: z.string().optional().nullable(),
    lock_explanation: z.string().optional().nullable(),
    lock_info: lockInfoSchema.optional(),
    locked: z.boolean().optional().nullable(),
    locked_for_user: z.boolean().optional().nullable(),
    message: z.string().optional().nullable(),
    only_graders_can_rate: z.boolean().optional().nullable(),
    permissions: z.record(z.unknown()).optional().nullable(),
    pinned: z.boolean().optional().nullable(),
    podcast_url: z.string().optional().nullable(),
    posted_at: z.string().optional().nullable(),
    published: z.boolean().optional().nullable(),
    read_state: z.string().optional().nullable(),
    require_initial_post: z.boolean().optional().nullable(),
    root_topic_id: z.number().optional().nullable(),
    sort_by_rating: z.boolean().optional().nullable(),
    subscribed: z.boolean().optional().nullable(),
    subscription_hold: z.string().optional().nullable(),
    title: z.string().optional().nullable(),
    topic_children: z.array(z.number()).optional().nullable(),
    unread_count: z.number().optional().nullable(),
    user_can_see_posts: z.boolean().optional().nullable(),
    user_name: z.string().optional().nullable()
}).nullable();

export const gradeSchema = z.object({
    current_grade: z.string().optional().nullable(),
    current_score: z.number().optional().nullable(),
    final_grade: z.string().optional().nullable(),
    final_score: z.number().optional().nullable(),
    html_url: z.string().optional().nullable(),
    unposted_current_grade: z.string().optional().nullable(),
    unposted_current_score: z.number().optional().nullable(),
    unposted_final_grade: z.string().optional().nullable(),
    unposted_final_score: z.number().optional().nullable()
}).nullable();

export const enrollmentTermSchema = z.object({
    end_at: z.string().optional().nullable(),
    id: z.number().optional(),
    name: z.string().optional().nullable(),
    overrides: z.record(z.unknown()).optional().nullable(),
    sis_import_id: z.number().optional().nullable(),
    sis_term_id: z.string().optional().nullable(),
    start_at: z.string().optional().nullable(),
    workflow_state: z.string().optional().nullable()
});

export const epubExportSchema = z.object({
    attachment: fileNullableSchema.optional(),
    created_at: z.string().optional().nullable(),
    id: z.number().optional(),
    progress_url: z.string().optional().nullable(),
    user_id: z.number().optional().nullable(),
    workflow_state: z.string().optional().nullable()
});

export const externalFeedSchema = z.object({
    created_at: z.string().optional().nullable(),
    display_name: z.string().optional().nullable(),
    header_match: z.string().optional().nullable(),
    id: z.number().optional(),
    url: z.string().optional().nullable(),
    verbosity: z.string().optional().nullable()
});

export const favoriteSchema = z.object({
    context_id: z.number().optional().nullable(),
    context_type: z.string().optional().nullable()
});

export const featureFlagNullableSchema = z.object({
    context_id: z.number().optional().nullable(),
    context_type: z.string().optional().nullable(),
    feature: z.string().optional().nullable(),
    locked: z.boolean().optional().nullable(),
    state: z.string().optional().nullable()
}).nullable();

export const featureFlagSchema = z.object({
    context_id: z.number().optional().nullable(),
    context_type: z.string().optional().nullable(),
    feature: z.string().optional().nullable(),
    locked: z.boolean().optional().nullable(),
    state: z.string().optional().nullable()
});

export const fileSchema = z.object({
    "content-type": z.string().optional().nullable(),
    created_at: z.string().optional().nullable(),
    display_name: z.string().optional().nullable(),
    id: z.number().optional(),
    size: z.number().optional().nullable(),
    updated_at: z.string().optional().nullable(),
    url: z.string().optional().nullable()
});

export const folderSchema = z.object({
    context_id: z.number().optional().nullable(),
    context_type: z.string().optional().nullable(),
    created_at: z.string().optional().nullable(),
    files_count: z.number().optional().nullable(),
    files_url: z.string().optional().nullable(),
    folders_count: z.number().optional().nullable(),
    folders_url: z.string().optional().nullable(),
    for_submissions: z.boolean().optional().nullable(),
    full_name: z.string().optional().nullable(),
    hidden: z.boolean().optional().nullable(),
    hidden_for_user: z.boolean().optional().nullable(),
    id: z.number().optional(),
    lock_at: z.string().optional().nullable(),
    locked: z.boolean().optional().nullable(),
    locked_for_user: z.boolean().optional().nullable(),
    name: z.string().optional().nullable(),
    parent_folder_id: z.number().optional().nullable(),
    position: z.number().optional().nullable(),
    unlock_at: z.string().optional().nullable(),
    updated_at: z.string().optional().nullable()
});

export const gradeChangeEventLinksSchema = z.object({
    assignment: z.number().optional().nullable(),
    course: z.number().optional().nullable(),
    grader: z.number().optional().nullable(),
    page_view: z.string().optional().nullable(),
    student: z.number().optional().nullable()
}).nullable();

export const graderSchema = z.object({
    assignments: z.array(z.number()).optional().nullable(),
    id: z.number().optional(),
    name: z.string().optional().nullable()
});

export const gradingSchemeEntrySchema = z.object({
    name: z.string().optional().nullable(),
    value: z.number().optional().nullable()
});

export const gradingStandardSchema = z.object({
    context_id: z.number().optional().nullable(),
    context_type: z.string().optional().nullable(),
    grading_scheme: z.array(gradingSchemeEntrySchema).optional().nullable(),
    id: z.number().optional(),
    title: z.string().optional().nullable()
});

export const groupSchema = z.object({
    avatar_url: z.string().optional().nullable(),
    context_type: z.string().optional().nullable(),
    course_id: z.number().optional().nullable(),
    description: z.string().optional().nullable(),
    followed_by_user: z.boolean().optional().nullable(),
    group_category_id: z.number().optional().nullable(),
    id: z.number().optional(),
    is_public: z.boolean().optional().nullable(),
    join_level: z.string().optional().nullable(),
    members_count: z.number().optional().nullable(),
    name: z.string().optional().nullable(),
    permissions: z.record(z.unknown()).optional().nullable(),
    role: z.string().optional().nullable(),
    sis_group_id: z.string().optional().nullable(),
    sis_import_id: z.number().optional().nullable(),
    storage_quota_mb: z.number().optional().nullable()
});

export const progressNullableSchema = z.object({
    completion: z.number().optional().nullable(),
    context_id: z.number().optional().nullable(),
    context_type: z.string().optional().nullable(),
    created_at: z.string().optional().nullable(),
    id: z.number().optional(),
    message: z.string().optional().nullable(),
    results: z.record(z.unknown()).optional().nullable(),
    tag: z.string().optional().nullable(),
    updated_at: z.string().optional().nullable(),
    url: z.string().optional().nullable(),
    user_id: z.number().optional().nullable(),
    workflow_state: z.string().optional().nullable()
}).nullable();

export const groupMembershipSchema = z.object({
    group_id: z.number().optional().nullable(),
    id: z.number().optional(),
    just_created: z.boolean().optional().nullable(),
    moderator: z.boolean().optional().nullable(),
    sis_import_id: z.number().optional().nullable(),
    user_id: z.number().optional().nullable(),
    workflow_state: z.string().optional().nullable()
});

export const helpLinkSchema = z.object({
    available_to: z.array(z.string()).optional().nullable(),
    id: z.string().optional(),
    subtext: z.string().optional().nullable(),
    text: z.string().optional().nullable(),
    type: z.union([z.literal("default"), z.literal("custom")]).optional(),
    url: z.string().optional().nullable()
});

export const helpLinksSchema = z.object({
    custom_help_links: z.array(helpLinkSchema).optional().nullable(),
    default_help_links: z.array(helpLinkSchema).optional().nullable(),
    help_link_icon: z.string().optional().nullable(),
    help_link_name: z.string().optional().nullable()
});

export const jwtSchema = z.object({
    token: z.string().optional().nullable()
});

export const licenseSchema = z.object({
    id: z.string().optional(),
    name: z.string().optional().nullable(),
    url: z.string().optional().nullable()
});

export const ltiAssignmentSchema = z.object({
    course_id: z.number().optional().nullable(),
    description: z.string().optional().nullable(),
    due_at: z.string().optional().nullable(),
    id: z.number().optional(),
    lti_course_id: z.string().optional().nullable(),
    lti_id: z.string().optional().nullable(),
    name: z.string().optional().nullable(),
    points_possible: z.number().optional().nullable()
});

export const mediaCommentSchema = z.object({
    "content-type": z.string().optional().nullable(),
    display_name: z.string().optional().nullable(),
    media_id: z.string().optional().nullable(),
    media_type: z.string().optional().nullable(),
    url: z.string().optional().nullable()
}).nullable();

export const migrationIssueSchema = z.object({
    content_migration_url: z.string().optional().nullable(),
    created_at: z.string().optional().nullable(),
    description: z.string().optional().nullable(),
    error_message: z.string().optional().nullable(),
    error_report_html_url: z.string().optional().nullable(),
    fix_issue_html_url: z.string().optional().nullable(),
    id: z.number().optional(),
    issue_type: z.string().optional().nullable(),
    updated_at: z.string().optional().nullable(),
    workflow_state: z.string().optional().nullable()
});

export const migratorSchema = z.object({
    name: z.string().optional().nullable(),
    required_settings: z.array(z.string()).optional().nullable(),
    requires_file_upload: z.boolean().optional().nullable(),
    type: z.string().optional().nullable()
});

export const moduleItemSchema = z.object({
    completion_requirement: completionRequirementSchema.optional(),
    content_details: contentDetailsSchema.optional(),
    content_id: z.number().optional().nullable(),
    external_url: z.string().optional().nullable(),
    html_url: z.string().optional().nullable(),
    id: z.number().optional(),
    indent: z.number().optional().nullable(),
    module_id: z.number().optional().nullable(),
    new_tab: z.boolean().optional().nullable(),
    page_url: z.string().optional().nullable(),
    position: z.number().optional().nullable(),
    published: z.boolean().optional().nullable(),
    title: z.string().optional().nullable(),
    type: z.string().optional().nullable(),
    url: z.string().optional().nullable()
});

export const moduleItemNullableSchema = z.object({
    completion_requirement: completionRequirementSchema.optional(),
    content_details: contentDetailsSchema.optional(),
    content_id: z.number().optional().nullable(),
    external_url: z.string().optional().nullable(),
    html_url: z.string().optional().nullable(),
    id: z.number().optional(),
    indent: z.number().optional().nullable(),
    module_id: z.number().optional().nullable(),
    new_tab: z.boolean().optional().nullable(),
    page_url: z.string().optional().nullable(),
    position: z.number().optional().nullable(),
    published: z.boolean().optional().nullable(),
    title: z.string().optional().nullable(),
    type: z.string().optional().nullable(),
    url: z.string().optional().nullable()
}).nullable();

export const moduleItemSequenceNodeSchema = z.object({
    current: moduleItemNullableSchema.optional(),
    mastery_path: z.record(z.unknown()).optional().nullable(),
    next: moduleItemNullableSchema.optional(),
    prev: moduleItemNullableSchema.optional()
});

export const moduleSchema = z.object({
    completed_at: z.string().optional().nullable(),
    id: z.number().optional(),
    items: z.array(moduleItemSchema).optional().nullable(),
    items_count: z.number().optional().nullable(),
    items_url: z.string().optional().nullable(),
    name: z.string().optional().nullable(),
    position: z.number().optional().nullable(),
    prerequisite_module_ids: z.array(z.number()).optional().nullable(),
    publish_final_grade: z.boolean().optional().nullable(),
    published: z.boolean().optional().nullable(),
    require_sequential_progress: z.boolean().optional().nullable(),
    state: z.string().optional().nullable(),
    unlock_at: z.string().optional().nullable(),
    workflow_state: z.string().optional().nullable()
});

export const notificationPreferenceSchema = z.object({
    category: z.string().optional().nullable(),
    frequency: z.string().optional().nullable(),
    href: z.string().optional().nullable(),
    notification: z.string().optional().nullable()
});

export const toolSettingSchema = z.object({
    resource_type_code: z.string().optional().nullable(),
    resource_url: z.string().optional().nullable()
}).nullable();

export const rubricRatingSchema = z.object({
    description: z.string().optional().nullable(),
    id: z.string().optional(),
    long_description: z.string().optional().nullable(),
    points: z.number().optional().nullable()
});

export const outcomeNullableSchema = z.object({
    assessed: z.boolean().optional().nullable(),
    calculation_int: z.number().optional().nullable(),
    calculation_method: z.string().optional().nullable(),
    can_edit: z.boolean().optional().nullable(),
    can_unlink: z.boolean().optional().nullable(),
    context_id: z.number().optional().nullable(),
    context_type: z.string().optional().nullable(),
    description: z.string().optional().nullable(),
    display_name: z.string().optional().nullable(),
    has_updateable_rubrics: z.boolean().optional().nullable(),
    id: z.number().optional(),
    mastery_points: z.number().optional().nullable(),
    points_possible: z.number().optional().nullable(),
    ratings: z.array(rubricRatingSchema).optional().nullable(),
    title: z.string().optional().nullable(),
    url: z.string().optional().nullable(),
    vendor_guid: z.string().optional().nullable()
}).nullable();

export const outcomeAlignmentSchema = z.object({
    assignment_id: z.number().optional().nullable(),
    id: z.number().optional(),
    submission_types: z.string().optional().nullable(),
    title: z.string().optional().nullable(),
    url: z.string().optional().nullable()
});

export const outcomeGroupNullableSchema: z.ZodSchema<OutcomeGroupNullable> = z.lazy(() => z.object({
    can_edit: z.boolean().optional().nullable(),
    context_id: z.number().optional().nullable(),
    context_type: z.string().optional().nullable(),
    description: z.string().optional().nullable(),
    id: z.number().optional(),
    import_url: z.string().optional().nullable(),
    outcomes_url: z.string().optional().nullable(),
    parent_outcome_group: outcomeGroupNullableSchema.optional(),
    subgroups_url: z.string().optional().nullable(),
    title: z.string().optional().nullable(),
    url: z.string().optional().nullable(),
    vendor_guid: z.string().optional().nullable()
}).nullable());

export const outcomeImportDataSchema = z.object({
    import_type: z.string().optional().nullable()
}).nullable();

export const outcomeLinkSchema = z.object({
    assessed: z.boolean().optional().nullable(),
    can_unlink: z.boolean().optional().nullable(),
    context_id: z.number().optional().nullable(),
    context_type: z.string().optional().nullable(),
    outcome: outcomeNullableSchema.optional(),
    outcome_group: outcomeGroupNullableSchema.optional(),
    url: z.string().optional().nullable()
});

export const outcomeResultSchema = z.object({
    id: z.number().optional(),
    mastery: z.boolean().optional(),
    score: z.number().optional(),
    possible: z.number().optional(),
    submitted_or_assessed_at: z.string().optional(),
    links: z.record(z.unknown()).optional(),
    percent: z.number().optional(),
    hidden: z.boolean().optional(),
    hide_points: z.boolean().optional()
});

export const outcomeSchema = z.object({
    assessed: z.boolean().optional().nullable(),
    calculation_int: z.number().optional().nullable(),
    calculation_method: z.string().optional().nullable(),
    can_edit: z.boolean().optional().nullable(),
    can_unlink: z.boolean().optional().nullable(),
    context_id: z.number().optional().nullable(),
    context_type: z.string().optional().nullable(),
    description: z.string().optional().nullable(),
    display_name: z.string().optional().nullable(),
    has_updateable_rubrics: z.boolean().optional().nullable(),
    id: z.number().optional(),
    mastery_points: z.number().optional().nullable(),
    points_possible: z.number().optional().nullable(),
    ratings: z.array(rubricRatingSchema).optional().nullable(),
    title: z.string().optional().nullable(),
    url: z.string().optional().nullable(),
    vendor_guid: z.string().optional().nullable()
});

export const outcomeGroupSchema = z.object({
    can_edit: z.boolean().optional().nullable(),
    context_id: z.number().optional().nullable(),
    context_type: z.string().optional().nullable(),
    description: z.string().optional().nullable(),
    id: z.number().optional(),
    import_url: z.string().optional().nullable(),
    outcomes_url: z.string().optional().nullable(),
    parent_outcome_group: outcomeGroupNullableSchema.optional(),
    subgroups_url: z.string().optional().nullable(),
    title: z.string().optional().nullable(),
    url: z.string().optional().nullable(),
    vendor_guid: z.string().optional().nullable()
});

export const outcomeRollupScoreLinksSchema = z.object({
    outcome: z.number().optional()
});

export const outcomeRollupScoreSchema = z.object({
    score: z.number().optional(),
    count: z.number().optional(),
    links: outcomeRollupScoreLinksSchema.optional()
});

export const outcomeRollupLinksSchema = z.object({
    course: z.number().optional(),
    user: z.number().optional(),
    section: z.number().optional()
});

export const outcomeRollupSchema = z.object({
    scores: z.array(outcomeRollupScoreSchema).optional(),
    links: outcomeRollupLinksSchema.optional()
});

export const outcomePathPartSchema = z.object({
    name: z.string().optional()
});

export const pageViewLinksSchema = z.object({
    account: z.number().optional().nullable(),
    asset: z.number().optional().nullable(),
    context: z.number().optional().nullable(),
    real_user: z.number().optional().nullable(),
    user: z.number().optional().nullable()
}).nullable();

export const peerReviewSchema = z.object({
    assessor: z.string().optional().nullable(),
    assessor_id: z.number().optional().nullable(),
    asset_id: z.number().optional().nullable(),
    asset_type: z.string().optional().nullable(),
    id: z.number().optional(),
    submission_comments: z.string().optional().nullable(),
    user: z.string().optional().nullable(),
    user_id: z.number().optional().nullable(),
    workflow_state: z.string().optional().nullable()
});

export const permissionSchema = z.object({
    add_course_template: z.boolean().optional().nullable(),
    add_designer_to_course: z.boolean().optional().nullable(),
    add_observer_to_course: z.boolean().optional().nullable(),
    add_student_to_course: z.boolean().optional().nullable(),
    add_ta_to_course: z.boolean().optional().nullable(),
    add_teacher_to_course: z.boolean().optional().nullable(),
    allow_course_admin_actions: z.boolean().optional().nullable(),
    become_user: z.boolean().optional().nullable(),
    change_course_state: z.boolean().optional().nullable(),
    create_accounts: z.boolean().optional().nullable(),
    create_collaborations: z.boolean().optional().nullable(),
    create_conferences: z.boolean().optional().nullable(),
    create_forum: z.boolean().optional().nullable(),
    create_tool_manually: z.boolean().optional().nullable(),
    delete: z.boolean().optional().nullable(),
    delete_course_template: z.boolean().optional().nullable(),
    direct_share: z.boolean().optional().nullable(),
    edit_course_template: z.boolean().optional().nullable(),
    generate_observer_pairing_code: z.boolean().optional().nullable(),
    import_outcomes: z.boolean().optional().nullable(),
    import_sis: z.boolean().optional().nullable(),
    lti_add_edit: z.boolean().optional().nullable(),
    manage: z.boolean().optional().nullable(),
    manage_account_banks: z.boolean().optional().nullable(),
    manage_account_calendar_events: z.boolean().optional().nullable(),
    manage_account_calendar_visibility: z.boolean().optional().nullable(),
    manage_account_memberships: z.boolean().optional().nullable(),
    manage_account_settings: z.boolean().optional().nullable(),
    manage_admin_users: z.boolean().optional().nullable(),
    manage_alerts: z.boolean().optional().nullable(),
    manage_assignments: z.boolean().optional().nullable(),
    manage_assignments_add: z.boolean().optional().nullable(),
    manage_assignments_delete: z.boolean().optional().nullable(),
    manage_assignments_edit: z.boolean().optional().nullable(),
    manage_calendar: z.boolean().optional().nullable(),
    manage_canvasnet_courses: z.boolean().optional().nullable(),
    manage_catalog: z.boolean().optional().nullable(),
    manage_content: z.boolean().optional().nullable(),
    manage_course_content_add: z.boolean().optional().nullable(),
    manage_course_content_delete: z.boolean().optional().nullable(),
    manage_course_content_edit: z.boolean().optional().nullable(),
    manage_course_visibility: z.boolean().optional().nullable(),
    manage_courses: z.boolean().optional().nullable(),
    manage_courses_add: z.boolean().optional().nullable(),
    manage_courses_admin: z.boolean().optional().nullable(),
    manage_courses_conclude: z.boolean().optional().nullable(),
    manage_courses_delete: z.boolean().optional().nullable(),
    manage_courses_publish: z.boolean().optional().nullable(),
    manage_courses_reset: z.boolean().optional().nullable(),
    manage_data_services: z.boolean().optional().nullable(),
    manage_demos: z.boolean().optional().nullable(),
    manage_developer_keys: z.boolean().optional().nullable(),
    manage_feature_flags: z.boolean().optional().nullable(),
    manage_files_add: z.boolean().optional().nullable(),
    manage_files_delete: z.boolean().optional().nullable(),
    manage_files_edit: z.boolean().optional().nullable(),
    manage_frozen_assignments: z.boolean().optional().nullable(),
    manage_global_outcomes: z.boolean().optional().nullable(),
    manage_grades: z.boolean().optional().nullable(),
    manage_groups: z.boolean().optional().nullable(),
    manage_groups_add: z.boolean().optional().nullable(),
    manage_groups_delete: z.boolean().optional().nullable(),
    manage_groups_manage: z.boolean().optional().nullable(),
    manage_interaction_alerts: z.boolean().optional().nullable(),
    manage_internal_analytics: z.boolean().optional().nullable(),
    manage_internal_settings: z.boolean().optional().nullable(),
    manage_jobs: z.boolean().optional().nullable(),
    manage_links: z.boolean().optional().nullable(),
    manage_lti_add: z.boolean().optional().nullable(),
    manage_lti_delete: z.boolean().optional().nullable(),
    manage_lti_edit: z.boolean().optional().nullable(),
    manage_master_courses: z.boolean().optional().nullable(),
    manage_outcomes: z.boolean().optional().nullable(),
    manage_proficiency_calculations: z.boolean().optional().nullable(),
    manage_proficiency_scales: z.boolean().optional().nullable(),
    manage_release_notes: z.boolean().optional().nullable(),
    manage_role_overrides: z.boolean().optional().nullable(),
    manage_rubrics: z.boolean().optional().nullable(),
    manage_sections_add: z.boolean().optional().nullable(),
    manage_sections_delete: z.boolean().optional().nullable(),
    manage_sections_edit: z.boolean().optional().nullable(),
    manage_sftp_user_settings: z.boolean().optional().nullable(),
    manage_sis: z.boolean().optional().nullable(),
    manage_site_settings: z.boolean().optional().nullable(),
    manage_storage_quotas: z.boolean().optional().nullable(),
    manage_students: z.boolean().optional().nullable(),
    manage_user_logins: z.boolean().optional().nullable(),
    manage_user_notes: z.boolean().optional().nullable(),
    manage_user_observers: z.boolean().optional().nullable(),
    manage_wiki_create: z.boolean().optional().nullable(),
    manage_wiki_delete: z.boolean().optional().nullable(),
    manage_wiki_update: z.boolean().optional().nullable(),
    moderate_forum: z.boolean().optional().nullable(),
    moderate_user_content: z.boolean().optional().nullable(),
    participate_as_student: z.boolean().optional().nullable(),
    post_to_forum: z.boolean().optional().nullable(),
    provision_catalog: z.boolean().optional().nullable(),
    proxy_assignment_submission: z.boolean().optional().nullable(),
    read: z.boolean().optional().nullable(),
    read_announcements: z.boolean().optional().nullable(),
    read_as_admin: z.boolean().optional().nullable(),
    read_as_member: z.boolean().optional().nullable(),
    read_course_content: z.boolean().optional().nullable(),
    read_course_list: z.boolean().optional().nullable(),
    read_email_addresses: z.boolean().optional().nullable(),
    read_files: z.boolean().optional().nullable(),
    read_forum: z.boolean().optional().nullable(),
    read_grades: z.boolean().optional().nullable(),
    read_messages: z.boolean().optional().nullable(),
    read_outcomes: z.boolean().optional().nullable(),
    read_prior_roster: z.boolean().optional().nullable(),
    read_question_banks: z.boolean().optional().nullable(),
    read_reports: z.boolean().optional().nullable(),
    read_roster: z.boolean().optional().nullable(),
    read_rubrics: z.boolean().optional().nullable(),
    read_sis: z.boolean().optional().nullable(),
    read_syllabus: z.boolean().optional().nullable(),
    remove_designer_from_course: z.boolean().optional().nullable(),
    remove_observer_from_course: z.boolean().optional().nullable(),
    remove_student_from_course: z.boolean().optional().nullable(),
    remove_ta_from_course: z.boolean().optional().nullable(),
    remove_teacher_from_course: z.boolean().optional().nullable(),
    reset_any_mfa: z.boolean().optional().nullable(),
    reset_content: z.boolean().optional().nullable(),
    ruby_profile: z.boolean().optional().nullable(),
    select_final_grade: z.boolean().optional().nullable(),
    send_messages: z.boolean().optional().nullable(),
    send_messages_all: z.boolean().optional().nullable(),
    suspend_accounts: z.boolean().optional().nullable(),
    undelete_courses: z.boolean().optional().nullable(),
    update: z.boolean().optional().nullable(),
    use_student_view: z.boolean().optional().nullable(),
    view_all_grades: z.boolean().optional().nullable(),
    view_analytics: z.boolean().optional().nullable(),
    view_audit_trail: z.boolean().optional().nullable(),
    view_course_changes: z.boolean().optional().nullable(),
    view_error_reports: z.boolean().optional().nullable(),
    view_feature_flags: z.boolean().optional().nullable(),
    view_grade_changes: z.boolean().optional().nullable(),
    view_group_pages: z.boolean().optional().nullable(),
    view_jobs: z.boolean().optional().nullable(),
    view_notifications: z.boolean().optional().nullable(),
    view_quiz_answer_audits: z.boolean().optional().nullable(),
    view_statistics: z.boolean().optional().nullable(),
    view_unpublished_items: z.boolean().optional().nullable(),
    view_user_logins: z.boolean().optional().nullable()
});

export const plannerNoteSchema = z.object({
    course_id: z.number().optional().nullable(),
    description: z.string().optional().nullable(),
    id: z.number().optional(),
    linked_object_html_url: z.string().optional().nullable(),
    linked_object_id: z.number().optional().nullable(),
    linked_object_type: z.string().optional().nullable(),
    linked_object_url: z.string().optional().nullable(),
    title: z.string().optional().nullable(),
    todo_date: z.string().optional().nullable(),
    user_id: z.number().optional().nullable(),
    workflow_state: z.string().optional().nullable()
});

export const plannerOverrideSchema = z.object({
    assignment_id: z.number().optional().nullable(),
    created_at: z.string().optional().nullable(),
    deleted_at: z.string().optional().nullable(),
    dismissed: z.boolean().optional().nullable(),
    id: z.number().optional(),
    marked_complete: z.boolean().optional().nullable(),
    plannable_id: z.number().optional().nullable(),
    plannable_type: z.string().optional().nullable(),
    updated_at: z.string().optional().nullable(),
    user_id: z.number().optional().nullable(),
    workflow_state: z.string().optional().nullable()
});

export const pollSchema = z.object({
    id: z.number().optional(),
    question: z.string().optional(),
    description: z.string().optional(),
    created_at: z.string().optional(),
    user_id: z.number().optional(),
    total_results: z.record(z.unknown()).optional()
});

export const proficiencySchema = z.object({
    ratings: z.array(z.record(z.unknown())).optional().nullable()
});

export const profileSchema = z.object({
    avatar_url: z.string().optional().nullable(),
    bio: z.string().optional().nullable(),
    calendar: calendarLinkSchema.optional(),
    effective_locale: z.string().optional().nullable(),
    id: z.number().optional(),
    integration_id: z.string().optional().nullable(),
    locale: z.string().optional().nullable(),
    login_id: z.string().optional().nullable(),
    lti_user_id: z.string().optional().nullable(),
    name: z.string().optional().nullable(),
    primary_email: z.string().optional().nullable(),
    pronouns: z.string().optional().nullable(),
    short_name: z.string().optional().nullable(),
    sis_user_id: z.string().optional().nullable(),
    sortable_name: z.string().optional().nullable(),
    time_zone: z.string().optional().nullable(),
    title: z.string().optional().nullable()
});

export const progressSchema = z.object({
    completion: z.number().optional().nullable(),
    context_id: z.number().optional().nullable(),
    context_type: z.string().optional().nullable(),
    created_at: z.string().optional().nullable(),
    id: z.number().optional(),
    message: z.string().optional().nullable(),
    results: z.record(z.unknown()).optional().nullable(),
    tag: z.string().optional().nullable(),
    updated_at: z.string().optional().nullable(),
    url: z.string().optional().nullable(),
    user_id: z.number().optional().nullable(),
    workflow_state: z.string().optional().nullable()
});

export const provisionalGradeSchema = z.object({
    final: z.boolean().optional().nullable(),
    grade: z.string().optional().nullable(),
    grade_matches_current_submission: z.boolean().optional().nullable(),
    graded_at: z.string().optional().nullable(),
    provisional_grade_id: z.number().optional().nullable(),
    score: z.number().optional().nullable(),
    speedgrader_url: z.string().optional().nullable()
});

export const quizPermissionsSchema = z.object({
    create: z.boolean().optional().nullable(),
    manage: z.boolean().optional().nullable(),
    read: z.boolean().optional().nullable(),
    read_statistics: z.boolean().optional().nullable(),
    review_grades: z.boolean().optional().nullable(),
    submit: z.boolean().optional().nullable(),
    update: z.boolean().optional().nullable()
}).nullable();

export const quizAssignmentOverrideSchema = z.object({
    base: z.boolean().optional().nullable(),
    due_at: z.string().optional().nullable(),
    id: z.number().optional(),
    lock_at: z.string().optional().nullable(),
    title: z.string().optional().nullable(),
    unlock_at: z.string().optional().nullable()
}).nullable();

export const quizAssignmentOverrideSetSchema = z.object({
    all_dates: quizAssignmentOverrideSchema.optional(),
    due_dates: quizAssignmentOverrideSchema.optional(),
    quiz_id: z.string().optional().nullable()
});

export const quizAssignmentOverrideSetContainerSchema = z.object({
    quiz_assignment_overrides: z.array(quizAssignmentOverrideSetSchema).optional().nullable()
});

export const quizGroupSchema = z.object({
    assessment_question_bank_id: z.number().optional().nullable(),
    id: z.number(),
    name: z.string().optional().nullable(),
    pick_count: z.number().optional().nullable(),
    position: z.number().optional().nullable(),
    question_points: z.number().optional().nullable(),
    quiz_id: z.number()
});

export const quizQuestionSchema = z.object({
    answers: z.array(answerSchema).optional().nullable(),
    correct_comments: z.string().optional().nullable(),
    id: z.number(),
    incorrect_comments: z.string().optional().nullable(),
    neutral_comments: z.string().optional().nullable(),
    points_possible: z.number().optional().nullable(),
    position: z.number().optional().nullable(),
    question_name: z.string().optional().nullable(),
    question_text: z.string().optional().nullable(),
    question_type: z.string().optional().nullable(),
    quiz_id: z.number()
});

export const quizReportSchema = z.object({
    anonymous: z.boolean().optional().nullable(),
    created_at: z.string().optional().nullable(),
    file: fileNullableSchema.optional(),
    generatable: z.boolean().optional().nullable(),
    id: z.number().optional(),
    includes_all_versions: z.boolean().optional().nullable(),
    progress: progressNullableSchema.optional(),
    progress_url: z.string().optional().nullable(),
    quiz_id: z.number().optional(),
    readable_type: z.string().optional().nullable(),
    report_type: z.string().optional().nullable(),
    updated_at: z.string().optional().nullable(),
    url: z.string().optional().nullable()
});

export const quizSubmissionSchema = z.object({
    attempt: z.number().optional().nullable(),
    end_at: z.string().optional().nullable(),
    extra_attempts: z.number().optional().nullable(),
    extra_time: z.number().optional().nullable(),
    finished_at: z.string().optional().nullable(),
    fudge_points: z.number().optional().nullable(),
    has_seen_results: z.boolean().optional().nullable(),
    id: z.number(),
    kept_score: z.number().optional().nullable(),
    manually_unlocked: z.boolean().optional().nullable(),
    overdue_and_needs_submission: z.boolean().optional().nullable(),
    quiz_id: z.number(),
    score: z.number().optional().nullable(),
    score_before_regrade: z.number().optional().nullable(),
    started_at: z.string().optional().nullable(),
    submission_id: z.number().optional().nullable(),
    time_spent: z.number().optional().nullable(),
    user_id: z.number().optional().nullable(),
    workflow_state: z.string().optional().nullable()
});

export const quizSubmissionQuestionSchema = z.object({
    answer: z.string().optional().nullable(),
    answers: z.array(z.string()).optional().nullable(),
    flagged: z.boolean().optional().nullable(),
    id: z.number()
});

export const reportParametersSchema = z.object({
    accounts: z.boolean().optional().nullable(),
    course_id: z.number().optional().nullable(),
    courses: z.boolean().optional().nullable(),
    end_at: z.string().optional().nullable(),
    enrollment_state: z.array(z.string()).optional().nullable(),
    enrollment_term_id: z.number().optional().nullable(),
    enrollments: z.boolean().optional().nullable(),
    groups: z.boolean().optional().nullable(),
    include_deleted: z.boolean().optional().nullable(),
    include_enrollment_state: z.boolean().optional().nullable(),
    order: z.string().optional().nullable(),
    sections: z.boolean().optional().nullable(),
    sis_accounts_csv: z.number().optional().nullable(),
    sis_terms_csv: z.number().optional().nullable(),
    start_at: z.string().optional().nullable(),
    terms: z.boolean().optional().nullable(),
    users: z.boolean().optional().nullable(),
    xlist: z.boolean().optional().nullable()
}).nullable();

export const roleSchema = z.object({
    account: z.record(z.unknown()).optional().nullable(),
    base_role_type: z.string().optional().nullable(),
    label: z.string().optional().nullable(),
    permissions: z.record(z.unknown()).optional().nullable(),
    role: z.string().optional().nullable(),
    workflow_state: z.string().optional().nullable()
});

export const rubricAssessmentSchema = z.object({
    artifact_attempt: z.number().optional().nullable(),
    artifact_id: z.number().optional().nullable(),
    artifact_type: z.string().optional().nullable(),
    assessment_type: z.string().optional().nullable(),
    assessor_id: z.number().optional().nullable(),
    comments: z.array(z.string()).optional().nullable(),
    data: z.array(z.record(z.unknown())).optional().nullable(),
    id: z.number().optional(),
    rubric_association_id: z.number().optional().nullable(),
    rubric_id: z.number().optional().nullable(),
    score: z.number().optional().nullable()
});

export const rubricCriteriaSchema = z.object({
    criterion_use_range: z.boolean().optional().nullable(),
    description: z.string().optional().nullable(),
    id: z.string().optional(),
    learning_outcome_id: z.string().optional().nullable(),
    long_description: z.string().optional().nullable(),
    points: z.number().optional().nullable(),
    ratings: z.array(rubricRatingSchema).optional().nullable(),
    vendor_guid: z.string().optional().nullable()
});

export const ssoSettingsSchema = z.object({
    auth_discovery_url: z.string().optional().nullable(),
    change_password_url: z.string().optional().nullable(),
    login_handle_name: z.string().optional().nullable(),
    unknown_user_url: z.string().optional().nullable()
});

export const scopeSchema = z.object({
    action: z.string().optional().nullable(),
    controller: z.string().optional().nullable(),
    resource: z.string().optional().nullable(),
    resource_name: z.string().optional().nullable(),
    scope: z.string().optional().nullable(),
    verb: z.string().optional().nullable()
});

export const userSectionIncludeSchema = z.object({
    created_at: z.string().optional().nullable(),
    id: z.number(),
    integration_id: z.string().optional().nullable(),
    login_id: z.string().optional().nullable(),
    name: z.string().optional().nullable(),
    short_name: z.string().optional().nullable(),
    sis_import_id: z.number().optional().nullable(),
    sis_user_id: z.string().optional().nullable(),
    sortable_name: z.string().optional().nullable()
});

export const sharedBrandConfigSchema = z.object({
    account_id: z.string().optional().nullable(),
    brand_config_md5: z.string().optional().nullable(),
    created_at: z.string().optional().nullable(),
    id: z.number().optional(),
    name: z.string().optional().nullable(),
    updated_at: z.string().optional().nullable()
});

export const sisImportCountsSchema = z.object({
    abstract_courses: z.number().optional().nullable(),
    accounts: z.number().optional().nullable(),
    batch_courses_deleted: z.number().optional().nullable(),
    batch_enrollments_deleted: z.number().optional().nullable(),
    batch_sections_deleted: z.number().optional().nullable(),
    courses: z.number().optional().nullable(),
    enrollments: z.number().optional().nullable(),
    error_count: z.number().optional().nullable(),
    grade_publishing_results: z.number().optional().nullable(),
    group_memberships: z.number().optional().nullable(),
    groups: z.number().optional().nullable(),
    sections: z.number().optional().nullable(),
    terms: z.number().optional().nullable(),
    users: z.number().optional().nullable(),
    warning_count: z.number().optional().nullable(),
    xlists: z.number().optional().nullable()
}).nullable();

export const sisImportDataSchema = z.object({
    counts: sisImportCountsSchema.optional(),
    import_type: z.string().optional().nullable(),
    supplied_batches: z.array(z.string()).optional().nullable()
}).nullable();

export const sisImportErrorSchema = z.object({
    file: z.string().optional().nullable(),
    message: z.string().optional().nullable(),
    row: z.number().optional().nullable(),
    sis_import_id: z.number().optional().nullable()
});

export const userDisplaySchema = z.object({
    id: z.number().optional().nullable(),
    anonymous_id: z.string().optional().nullable(),
    display_name: z.string().optional().nullable(),
    avatar_image_url: z.string().optional().nullable(),
    pronouns: z.string().optional().nullable()
}).nullable();

export const submissionVersionSchema = z.object({
    assignment_id: z.number().optional().nullable(),
    assignment_name: z.string().optional().nullable(),
    body: z.string().optional().nullable(),
    current_grade: z.string().optional().nullable(),
    current_graded_at: z.string().optional().nullable(),
    current_grader: z.string().optional().nullable(),
    grade_matches_current_submission: z.boolean().optional().nullable(),
    graded_at: z.string().optional().nullable(),
    grader: z.string().optional().nullable(),
    grader_id: z.number().optional().nullable(),
    id: z.number().optional(),
    new_grade: z.string().optional().nullable(),
    new_graded_at: z.string().optional().nullable(),
    new_grader: z.string().optional().nullable(),
    previous_grade: z.string().optional().nullable(),
    previous_graded_at: z.string().optional().nullable(),
    previous_grader: z.string().optional().nullable(),
    score: z.number().optional().nullable(),
    submission_type: z.string().optional().nullable(),
    url: z.string().optional().nullable(),
    user_id: z.number().optional().nullable(),
    user_name: z.string().optional().nullable(),
    workflow_state: z.string().optional().nullable()
});

export const successTrueSchema = z.object({
    success: z.boolean().optional().nullable()
});

export const tabSchema = z.object({
    hidden: z.boolean().optional().nullable(),
    html_url: z.string().optional().nullable(),
    id: z.string().optional(),
    label: z.string().optional().nullable(),
    position: z.number().optional().nullable(),
    type: z.string().optional().nullable(),
    visibility: z.string().optional().nullable()
});

export const termsOfServiceSchema = z.object({
    account_id: z.number().optional().nullable(),
    content: z.string().optional().nullable(),
    id: z.number().optional(),
    passive: z.boolean().optional().nullable(),
    terms_type: z.union([z.literal("default"), z.literal("custom"), z.literal("no_terms")]).optional()
});

export const usageRightsSchema = z.object({
    file_ids: z.array(z.number()).optional().nullable(),
    legal_copyright: z.string().optional().nullable(),
    license: z.string().optional().nullable(),
    license_name: z.string().optional().nullable(),
    message: z.string().optional().nullable(),
    use_justification: z.string().optional().nullable()
});

export const pageParamSchema = z.string();

export const perPageParamSchema = z.number();

export const getSingleAssignmentLtiDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        assignment_id: z.string()
    }),
    query: z.object({
        user_id: z.string().optional()
    }).optional(),
    url: z.literal("/lti/assignments/{assignment_id}")
});

export const getSingleAssignmentLtiResponsesSchema = z.object({
    200: ltiAssignmentSchema
});

export const getSingleAssignmentLtiResponseSchema = getSingleAssignmentLtiResponsesSchema.shape["keyof GetSingleAssignmentLtiResponses"];

export const showOriginalityReportFilesDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        assignment_id: z.string(),
        file_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/lti/assignments/{assignment_id}/files/{file_id}/originality_report")
});

export const originalityReportSchema = z.object({
    file_id: z.number().optional().nullable(),
    id: z.number().optional(),
    originality_report_file_id: z.number().optional().nullable(),
    originality_report_url: z.string().optional().nullable(),
    originality_score: z.number().optional().nullable(),
    tool_setting: toolSettingSchema.optional()
});

export const showOriginalityReportFilesResponsesSchema = z.object({
    200: originalityReportSchema
});

export const editOriginalityReportFilesDataSchema = z.object({
    body: z.object({
        "originality_report[originality_report_file_id]": z.number().optional(),
        "originality_report[originality_report_url]": z.string().optional(),
        "originality_report[originality_score]": z.number().optional(),
        "originality_report[tool_setting][resource_type_code]": z.string().optional(),
        "originality_report[tool_setting][resource_url]": z.string().optional(),
        "originality_report[workflow_state]": z.string().optional()
    }).optional(),
    path: z.object({
        assignment_id: z.string(),
        file_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/lti/assignments/{assignment_id}/files/{file_id}/originality_report")
});

export const editOriginalityReportFilesResponsesSchema = z.object({
    200: originalityReportSchema
});

export const editOriginalityReportFilesResponseSchema = editOriginalityReportFilesResponsesSchema.shape["keyof EditOriginalityReportFilesResponses"];

export const getSingleSubmissionDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        assignment_id: z.string(),
        submission_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/lti/assignments/{assignment_id}/submissions/{submission_id}")
});

export const getSingleSubmissionResponsesSchema = z.object({
    200: z.unknown()
});

export const getHistoryOfSingleSubmissionDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        assignment_id: z.string(),
        submission_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/lti/assignments/{assignment_id}/submissions/{submission_id}/history")
});

export const getHistoryOfSingleSubmissionResponsesSchema = z.object({
    200: z.unknown()
});

export const createOriginalityReportDataSchema = z.object({
    body: z.object({
        "originality_report[file_id]": z.number().optional(),
        "originality_report[originality_report_file_id]": z.number().optional(),
        "originality_report[originality_report_url]": z.string().optional(),
        "originality_report[originality_score]": z.number(),
        "originality_report[tool_setting][resource_type_code]": z.string().optional(),
        "originality_report[tool_setting][resource_url]": z.string().optional(),
        "originality_report[workflow_state]": z.string().optional()
    }),
    path: z.object({
        assignment_id: z.string(),
        submission_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/lti/assignments/{assignment_id}/submissions/{submission_id}/originality_report")
});

export const createOriginalityReportResponsesSchema = z.object({
    200: originalityReportSchema
});

export const createOriginalityReportResponseSchema = createOriginalityReportResponsesSchema.shape["keyof CreateOriginalityReportResponses"];

export const showOriginalityReportSubmissionsDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        assignment_id: z.string(),
        submission_id: z.string(),
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/lti/assignments/{assignment_id}/submissions/{submission_id}/originality_report/{id}")
});

export const showOriginalityReportSubmissionsResponsesSchema = z.object({
    200: originalityReportSchema
});

export const showOriginalityReportSubmissionsResponseSchema = showOriginalityReportSubmissionsResponsesSchema.shape["keyof ShowOriginalityReportSubmissionsResponses"];

export const editOriginalityReportSubmissionsDataSchema = z.object({
    body: z.object({
        "originality_report[originality_report_file_id]": z.number().optional(),
        "originality_report[originality_report_url]": z.string().optional(),
        "originality_report[originality_score]": z.number().optional(),
        "originality_report[tool_setting][resource_type_code]": z.string().optional(),
        "originality_report[tool_setting][resource_url]": z.string().optional(),
        "originality_report[workflow_state]": z.string().optional()
    }).optional(),
    path: z.object({
        assignment_id: z.string(),
        submission_id: z.string(),
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/lti/assignments/{assignment_id}/submissions/{submission_id}/originality_report/{id}")
});

export const editOriginalityReportSubmissionsResponsesSchema = z.object({
    200: originalityReportSchema
});

export const editOriginalityReportSubmissionsResponseSchema = editOriginalityReportSubmissionsResponsesSchema.shape["keyof EditOriginalityReportSubmissionsResponses"];

export const getAllUsersInGroupLtiDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        group_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/lti/groups/{group_id}/users")
});

export const listAllWebhookSubscriptionForToolProxyDataSchema = z.object({
    body: z.never().optional(),
    path: z.never().optional(),
    query: z.never().optional(),
    url: z.literal("/lti/subscriptions")
});

export const listAllWebhookSubscriptionForToolProxyResponsesSchema = z.object({
    200: z.unknown()
});

export const createWebhookSubscriptionDataSchema = z.object({
    body: z.object({
        "submission[ContextId]": z.string(),
        "subscription[ContextType]": z.string(),
        "subscription[EventTypes]": z.array(z.string()),
        "subscription[Format]": z.string(),
        "subscription[TransportMetadata]": z.record(z.unknown()),
        "subscription[TransportType]": z.string()
    }),
    path: z.never().optional(),
    query: z.never().optional(),
    url: z.literal("/lti/subscriptions")
});

export const createWebhookSubscriptionResponsesSchema = z.object({
    200: z.unknown()
});

export const deleteWebhookSubscriptionDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/lti/subscriptions/{id}")
});

export const deleteWebhookSubscriptionResponsesSchema = z.object({
    200: z.unknown()
});

export const showSingleWebhookSubscriptionDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/lti/subscriptions/{id}")
});

export const showSingleWebhookSubscriptionResponsesSchema = z.object({
    200: z.unknown()
});

export const updateWebhookSubscriptionDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/lti/subscriptions/{id}")
});

export const updateWebhookSubscriptionResponsesSchema = z.object({
    200: z.unknown()
});

export const getSingleUserLtiDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/lti/users/{id}")
});

export const retrieveAssignmentsEnabledForGradeExportToSisAccountsDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        account_id: z.number()
    }),
    query: z.object({
        course_id: z.number().optional(),
        starts_before: z.string().optional(),
        ends_after: z.string().optional(),
        include: z.literal("student_overrides").optional()
    }).optional(),
    url: z.literal("/sis/accounts/{account_id}/assignments")
});

export const retrieveAssignmentsEnabledForGradeExportToSisAccountsResponsesSchema = z.object({
    200: z.unknown()
});

export const retrieveAssignmentsEnabledForGradeExportToSisCoursesDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.number()
    }),
    query: z.object({
        account_id: z.number().optional(),
        starts_before: z.string().optional(),
        ends_after: z.string().optional(),
        include: z.literal("student_overrides").optional()
    }).optional(),
    url: z.literal("/sis/courses/{course_id}/assignments")
});

export const retrieveAssignmentsEnabledForGradeExportToSisCoursesResponsesSchema = z.object({
    200: z.unknown()
});

export const disableAssignmentsCurrentlyEnabledForGradeExportToSisDataSchema = z.object({
    body: z.object({
        grading_period_id: z.number().optional()
    }).optional(),
    path: z.object({
        course_id: z.number()
    }),
    query: z.never().optional(),
    url: z.literal("/sis/courses/{course_id}/disable_post_to_sis")
});

export const disableAssignmentsCurrentlyEnabledForGradeExportToSisResponsesSchema = z.object({
    200: z.unknown()
});

export const listAccountsDataSchema = z.object({
    body: z.never().optional(),
    path: z.never().optional(),
    query: z.object({
        include: z.array(z.union([z.literal("lti_guid"), z.literal("registration_settings"), z.literal("services")])).optional(),
        page: z.string().optional(),
        per_page: z.number().optional()
    }).optional(),
    url: z.literal("/v1/accounts")
});

export const listAccountsResponsesSchema = z.object({
    200: z.array(accountSchema)
});

export const listAccountsResponseSchema = listAccountsResponsesSchema.shape["keyof ListAccountsResponses"];

export const searchAccountDomainsDataSchema = z.object({
    body: z.never().optional(),
    path: z.never().optional(),
    query: z.object({
        name: z.string().optional(),
        domain: z.string().optional(),
        latitude: z.number().optional(),
        longitude: z.number().optional()
    }).optional(),
    url: z.literal("/v1/accounts/search")
});

export const searchAccountDomainsResponsesSchema = z.object({
    200: z.unknown()
});

export const indexOfActiveGlobalNotificationForUserDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        account_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/accounts/{account_id}/account_notifications")
});

export const indexOfActiveGlobalNotificationForUserResponsesSchema = z.object({
    200: z.array(accountNotificationSchema)
});

export const indexOfActiveGlobalNotificationForUserResponseSchema = indexOfActiveGlobalNotificationForUserResponsesSchema.shape["keyof IndexOfActiveGlobalNotificationForUserResponses"];

export const createGlobalNotificationDataSchema = z.object({
    body: z.object({
        "account_notification[end_at]": z.string(),
        "account_notification[icon]": z.union([z.literal("warning"), z.literal("information"), z.literal("question"), z.literal("error"), z.literal("calendar")]).optional(),
        "account_notification[message]": z.string(),
        "account_notification[start_at]": z.string(),
        "account_notification[subject]": z.string(),
        account_notification_roles: z.array(z.string()).optional()
    }),
    path: z.object({
        account_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/accounts/{account_id}/account_notifications")
});

export const createGlobalNotificationResponsesSchema = z.object({
    200: z.unknown()
});

export const closeNotificationForUserDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        account_id: z.string(),
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/accounts/{account_id}/account_notifications/{id}")
});

export const closeNotificationForUserResponsesSchema = z.object({
    200: accountNotificationSchema
});

export const closeNotificationForUserResponseSchema = closeNotificationForUserResponsesSchema.shape["keyof CloseNotificationForUserResponses"];

export const showGlobalNotificationDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        account_id: z.string(),
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/accounts/{account_id}/account_notifications/{id}")
});

export const showGlobalNotificationResponsesSchema = z.object({
    200: accountNotificationSchema
});

export const showGlobalNotificationResponseSchema = showGlobalNotificationResponsesSchema.shape["keyof ShowGlobalNotificationResponses"];

export const updateGlobalNotificationDataSchema = z.object({
    body: z.object({
        "account_notification[end_at]": z.string().optional(),
        "account_notification[icon]": z.union([z.literal("warning"), z.literal("information"), z.literal("question"), z.literal("error"), z.literal("calendar")]).optional(),
        "account_notification[message]": z.string().optional(),
        "account_notification[start_at]": z.string().optional(),
        "account_notification[subject]": z.string().optional(),
        account_notification_roles: z.array(z.string()).optional()
    }).optional(),
    path: z.object({
        account_id: z.string(),
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/accounts/{account_id}/account_notifications/{id}")
});

export const updateGlobalNotificationResponsesSchema = z.object({
    200: z.unknown()
});

export const listAccountAdminsDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        account_id: z.string()
    }),
    query: z.object({
        user_id: z.string().optional(),
        page: z.string().optional(),
        per_page: z.number().optional()
    }).optional(),
    url: z.literal("/v1/accounts/{account_id}/admins")
});

export const makeAccountAdminDataSchema = z.object({
    body: z.object({
        role: z.string().optional(),
        role_id: z.number().optional(),
        send_confirmation: z.boolean().optional(),
        user_id: z.number()
    }),
    path: z.object({
        account_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/accounts/{account_id}/admins")
});

export const removeAccountAdminDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        account_id: z.string(),
        user_id: z.string()
    }),
    query: z.object({
        role: z.string().optional(),
        role_id: z.number().optional()
    }).optional(),
    url: z.literal("/v1/accounts/{account_id}/admins/{user_id}")
});

export const getDepartmentLevelParticipationDataCompletedDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        account_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/accounts/{account_id}/analytics/completed/activity")
});

export const getDepartmentLevelParticipationDataCompletedResponsesSchema = z.object({
    200: z.unknown()
});

export const getDepartmentLevelGradeDataCompletedDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        account_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/accounts/{account_id}/analytics/completed/grades")
});

export const getDepartmentLevelGradeDataCompletedResponsesSchema = z.object({
    200: z.unknown()
});

export const getDepartmentLevelStatisticsCompletedDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        account_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/accounts/{account_id}/analytics/completed/statistics")
});

export const getDepartmentLevelStatisticsCompletedResponsesSchema = z.object({
    200: z.unknown()
});

export const getDepartmentLevelParticipationDataCurrentDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        account_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/accounts/{account_id}/analytics/current/activity")
});

export const getDepartmentLevelParticipationDataCurrentResponsesSchema = z.object({
    200: z.unknown()
});

export const getDepartmentLevelGradeDataCurrentDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        account_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/accounts/{account_id}/analytics/current/grades")
});

export const getDepartmentLevelGradeDataCurrentResponsesSchema = z.object({
    200: z.unknown()
});

export const getDepartmentLevelStatisticsCurrentDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        account_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/accounts/{account_id}/analytics/current/statistics")
});

export const getDepartmentLevelStatisticsCurrentResponsesSchema = z.object({
    200: z.unknown()
});

export const getDepartmentLevelParticipationDataTermsDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        account_id: z.string(),
        term_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/accounts/{account_id}/analytics/terms/{term_id}/activity")
});

export const getDepartmentLevelParticipationDataTermsResponsesSchema = z.object({
    200: z.unknown()
});

export const getDepartmentLevelGradeDataTermsDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        account_id: z.string(),
        term_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/accounts/{account_id}/analytics/terms/{term_id}/grades")
});

export const getDepartmentLevelGradeDataTermsResponsesSchema = z.object({
    200: z.unknown()
});

export const getDepartmentLevelStatisticsTermsDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        account_id: z.string(),
        term_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/accounts/{account_id}/analytics/terms/{term_id}/statistics")
});

export const getDepartmentLevelStatisticsTermsResponsesSchema = z.object({
    200: z.unknown()
});

export const listAuthenticationProvidersDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        account_id: z.string()
    }),
    query: z.object({
        page: z.string().optional(),
        per_page: z.number().optional()
    }).optional(),
    url: z.literal("/v1/accounts/{account_id}/authentication_providers")
});

export const authenticationProviderSchema = z.object({
    auth_base: z.string().optional().nullable(),
    auth_filter: z.string().optional().nullable(),
    auth_host: z.string().optional().nullable(),
    auth_over_tls: z.number().optional().nullable(),
    auth_port: z.number().optional().nullable(),
    auth_type: z.string().optional().nullable(),
    auth_username: z.string().optional().nullable(),
    certificate_fingerprint: z.string().optional().nullable(),
    federated_attributes: federatedAttributesConfigSchema.optional(),
    id: z.number().optional().nullable(),
    identifier_format: z.string().optional().nullable(),
    idp_entity_id: z.string().optional().nullable(),
    jit_provisioning: z.boolean().optional().nullable(),
    log_in_url: z.string().optional().nullable(),
    log_out_url: z.string().optional().nullable(),
    login_attribute: z.string().optional().nullable(),
    position: z.number().optional().nullable(),
    requested_authn_context: z.string().optional().nullable(),
    sig_alg: z.string().optional().nullable()
});

export const listAuthenticationProvidersResponsesSchema = z.object({
    200: z.array(authenticationProviderSchema)
});

export const addAuthenticationProviderDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        account_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/accounts/{account_id}/authentication_providers")
});

export const addAuthenticationProviderResponsesSchema = z.object({
    200: authenticationProviderSchema
});

export const addAuthenticationProviderResponseSchema = addAuthenticationProviderResponsesSchema.shape["keyof AddAuthenticationProviderResponses"];

export const deleteAuthenticationProviderDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        account_id: z.string(),
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/accounts/{account_id}/authentication_providers/{id}")
});

export const deleteAuthenticationProviderResponsesSchema = z.object({
    200: z.unknown()
});

export const getAuthenticationProviderDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        account_id: z.string(),
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/accounts/{account_id}/authentication_providers/{id}")
});

export const getAuthenticationProviderResponsesSchema = z.object({
    200: authenticationProviderSchema
});

export const getAuthenticationProviderResponseSchema = getAuthenticationProviderResponsesSchema.shape["keyof GetAuthenticationProviderResponses"];

export const updateAuthenticationProviderDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        account_id: z.string(),
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/accounts/{account_id}/authentication_providers/{id}")
});

export const updateAuthenticationProviderResponsesSchema = z.object({
    200: authenticationProviderSchema
});

export const updateAuthenticationProviderResponseSchema = updateAuthenticationProviderResponsesSchema.shape["keyof UpdateAuthenticationProviderResponses"];

export const listContentMigrationsAccountsDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        account_id: z.string()
    }),
    query: z.object({
        page: z.string().optional(),
        per_page: z.number().optional()
    }).optional(),
    url: z.literal("/v1/accounts/{account_id}/content_migrations")
});

export const listContentMigrationsAccountsResponsesSchema = z.object({
    200: z.array(contentMigrationSchema)
});

export const listContentMigrationsAccountsResponseSchema = listContentMigrationsAccountsResponsesSchema.shape["keyof ListContentMigrationsAccountsResponses"];

export const createContentMigrationAccountsDataSchema = z.object({
    body: z.object({
        "date_shift_options[day_substitutions][X]": z.number().optional(),
        "date_shift_options[new_end_date]": z.string().optional(),
        "date_shift_options[new_start_date]": z.string().optional(),
        "date_shift_options[old_end_date]": z.string().optional(),
        "date_shift_options[old_start_date]": z.string().optional(),
        "date_shift_options[remove_dates]": z.boolean().optional(),
        "date_shift_options[shift_dates]": z.boolean().optional(),
        migration_type: z.string(),
        "pre_attachment[name]": z.string().optional(),
        "pre_attachment[todo]": z.string().optional(),
        "settings[file_url]": z.string().optional(),
        "settings[folder_id]": z.string().optional(),
        "settings[overwrite_quizzes]": z.boolean().optional(),
        "settings[question_bank_id]": z.number().optional(),
        "settings[question_bank_name]": z.string().optional(),
        "settings[source_course_id]": z.string().optional()
    }),
    path: z.object({
        account_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/accounts/{account_id}/content_migrations")
});

export const createContentMigrationAccountsResponsesSchema = z.object({
    200: contentMigrationSchema
});

export const createContentMigrationAccountsResponseSchema = createContentMigrationAccountsResponsesSchema.shape["keyof CreateContentMigrationAccountsResponses"];

export const listMigrationSystemsAccountsDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        account_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/accounts/{account_id}/content_migrations/migrators")
});

export const listMigrationSystemsAccountsResponsesSchema = z.object({
    200: z.array(migratorSchema)
});

export const listMigrationSystemsAccountsResponseSchema = listMigrationSystemsAccountsResponsesSchema.shape["keyof ListMigrationSystemsAccountsResponses"];

export const listMigrationIssuesAccountsDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        account_id: z.string(),
        content_migration_id: z.string()
    }),
    query: z.object({
        page: z.string().optional(),
        per_page: z.number().optional()
    }).optional(),
    url: z.literal("/v1/accounts/{account_id}/content_migrations/{content_migration_id}/migration_issues")
});

export const listMigrationIssuesAccountsResponsesSchema = z.object({
    200: z.array(migrationIssueSchema)
});

export const listMigrationIssuesAccountsResponseSchema = listMigrationIssuesAccountsResponsesSchema.shape["keyof ListMigrationIssuesAccountsResponses"];

export const getMigrationIssueAccountsDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        account_id: z.string(),
        content_migration_id: z.string(),
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/accounts/{account_id}/content_migrations/{content_migration_id}/migration_issues/{id}")
});

export const getMigrationIssueAccountsResponsesSchema = z.object({
    200: migrationIssueSchema
});

export const getMigrationIssueAccountsResponseSchema = getMigrationIssueAccountsResponsesSchema.shape["keyof GetMigrationIssueAccountsResponses"];

export const updateMigrationIssueAccountsDataSchema = z.object({
    body: z.object({
        workflow_state: z.union([z.literal("active"), z.literal("resolved")])
    }),
    path: z.object({
        account_id: z.string(),
        content_migration_id: z.string(),
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/accounts/{account_id}/content_migrations/{content_migration_id}/migration_issues/{id}")
});

export const updateMigrationIssueAccountsResponsesSchema = z.object({
    200: migrationIssueSchema
});

export const updateMigrationIssueAccountsResponseSchema = updateMigrationIssueAccountsResponsesSchema.shape["keyof UpdateMigrationIssueAccountsResponses"];

export const getContentMigrationAccountsDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        account_id: z.string(),
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/accounts/{account_id}/content_migrations/{id}")
});

export const getContentMigrationAccountsResponsesSchema = z.object({
    200: contentMigrationSchema
});

export const getContentMigrationAccountsResponseSchema = getContentMigrationAccountsResponsesSchema.shape["keyof GetContentMigrationAccountsResponses"];

export const updateContentMigrationAccountsDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        account_id: z.string(),
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/accounts/{account_id}/content_migrations/{id}")
});

export const updateContentMigrationAccountsResponsesSchema = z.object({
    200: contentMigrationSchema
});

export const updateContentMigrationAccountsResponseSchema = updateContentMigrationAccountsResponsesSchema.shape["keyof UpdateContentMigrationAccountsResponses"];

export const getAllCoursesAccountsDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        account_id: z.string()
    }),
    query: z.object({
        with_enrollments: z.boolean().optional(),
        "enrollment_type[]": z.array(z.union([z.literal("teacher"), z.literal("student"), z.literal("ta"), z.literal("observer"), z.literal("designer")])).optional(),
        published: z.boolean().optional(),
        completed: z.boolean().optional(),
        blueprint: z.boolean().optional(),
        blueprint_associated: z.boolean().optional(),
        public: z.boolean().optional(),
        "by_teachers[]": z.array(z.number()).optional(),
        "by_subaccounts[]": z.array(z.number()).optional(),
        hide_enrollmentless_courses: z.boolean().optional(),
        "state[]": z.array(z.union([z.literal("created"), z.literal("claimed"), z.literal("available"), z.literal("completed"), z.literal("deleted"), z.literal("all")])).optional(),
        enrollment_term_id: z.number().optional(),
        search_term: z.string().optional(),
        "include[]": z.array(z.union([z.literal("syllabus_body"), z.literal("term"), z.literal("course_progress"), z.literal("storage_quota_used_mb"), z.literal("total_students"), z.literal("teachers"), z.literal("account_name"), z.literal("concluded"), z.literal("post_manually")])).optional(),
        sort: z.union([z.literal("course_status"), z.literal("course_name"), z.literal("sis_course_id"), z.literal("teacher"), z.literal("account_name")]).optional(),
        order: z.union([z.literal("asc"), z.literal("desc")]).optional(),
        search_by: z.union([z.literal("course"), z.literal("teacher")]).optional(),
        starts_before: z.string().optional(),
        ends_after: z.string().optional(),
        homeroom: z.boolean().optional()
    }).optional(),
    url: z.literal("/v1/accounts/{account_id}/courses")
});

export const createNewCourseDataSchema = z.object({
    body: z.object({
        "course[allow_student_forum_attachments]": z.boolean().optional(),
        "course[allow_student_wiki_edits]": z.boolean().optional(),
        "course[allow_wiki_comments]": z.boolean().optional(),
        "course[apply_assignment_group_weights]": z.boolean().optional(),
        "course[course_code]": z.string().optional(),
        "course[course_format]": z.string().optional(),
        "course[default_view]": z.union([z.literal("feed"), z.literal("wiki"), z.literal("modules"), z.literal("syllabus"), z.literal("assignments")]).optional(),
        "course[end_at]": z.string().optional(),
        "course[grading_standard_id]": z.number().optional(),
        "course[hide_final_grades]": z.boolean().optional(),
        "course[integration_id]": z.string().optional(),
        "course[is_public]": z.boolean().optional(),
        "course[is_public_to_auth_users]": z.boolean().optional(),
        "course[license]": z.string().optional(),
        "course[name]": z.string().optional(),
        "course[open_enrollment]": z.boolean().optional(),
        "course[public_description]": z.string().optional(),
        "course[public_syllabus]": z.boolean().optional(),
        "course[public_syllabus_to_auth]": z.boolean().optional(),
        "course[restrict_enrollments_to_course_dates]": z.boolean().optional(),
        "course[self_enrollment]": z.boolean().optional(),
        "course[sis_course_id]": z.string().optional(),
        "course[start_at]": z.string().optional(),
        "course[syllabus_body]": z.string().optional(),
        "course[term_id]": z.number().optional(),
        "course[time_zone]": z.string().optional(),
        enable_sis_reactivation: z.boolean().optional(),
        enroll_me: z.boolean().optional(),
        offer: z.boolean().optional()
    }).optional(),
    path: z.object({
        account_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/accounts/{account_id}/courses")
});

export const updateCoursesDataSchema = z.object({
    body: z.object({
        course_ids: z.array(z.string()),
        event: z.union([z.literal("offer"), z.literal("conclude"), z.literal("delete"), z.literal("undelete")])
    }),
    path: z.object({
        account_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/accounts/{account_id}/courses")
});

export const updateCoursesResponsesSchema = z.object({
    200: progressSchema
});

export const updateCoursesResponseSchema = updateCoursesResponsesSchema.shape["keyof UpdateCoursesResponses"];

export const getSingleCourseAccountsDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        account_id: z.string(),
        id: z.string()
    }),
    query: z.object({
        include: z.array(z.union([z.literal("needs_grading_count"), z.literal("syllabus_body"), z.literal("public_description"), z.literal("total_scores"), z.literal("current_grading_period_scores"), z.literal("term"), z.literal("account"), z.literal("course_progress"), z.literal("sections"), z.literal("storage_quota_used_mb"), z.literal("total_students"), z.literal("passback_status"), z.literal("favorites"), z.literal("teachers"), z.literal("observed_users"), z.literal("all_courses"), z.literal("permissions"), z.literal("course_image")])).optional()
    }).optional(),
    url: z.literal("/v1/accounts/{account_id}/courses/{id}")
});

export const createToolFromToolconfigurationAccountsDataSchema = z.object({
    body: z.object({
        course_id: z.string().optional()
    }).optional(),
    path: z.object({
        account_id: z.string(),
        developer_key_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/accounts/{account_id}/developer_keys/{developer_key_id}/create_tool")
});

export const createToolFromToolconfigurationAccountsResponsesSchema = z.object({
    200: contextExternalToolSchema
});

export const createToolFromToolconfigurationAccountsResponseSchema = createToolFromToolconfigurationAccountsResponsesSchema.shape["keyof CreateToolFromToolconfigurationAccountsResponses"];

export const enrollmentByIdDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        account_id: z.string(),
        id: z.number()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/accounts/{account_id}/enrollments/{id}")
});

export const listExternalToolsAccountsDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        account_id: z.string()
    }),
    query: z.object({
        search_term: z.string().optional(),
        selectable: z.boolean().optional(),
        include_parents: z.boolean().optional(),
        page: z.string().optional(),
        per_page: z.number().optional()
    }).optional(),
    url: z.literal("/v1/accounts/{account_id}/external_tools")
});

export const listExternalToolsAccountsResponsesSchema = z.object({
    200: z.unknown()
});

export const createExternalToolAccountsDataSchema = z.object({
    body: z.object({
        "account_navigation[display_type]": z.string().optional(),
        "account_navigation[enabled]": z.boolean().optional(),
        "account_navigation[selection_height]": z.string().optional(),
        "account_navigation[selection_width]": z.string().optional(),
        "account_navigation[text]": z.string().optional(),
        "account_navigation[url]": z.string().optional(),
        config_type: z.string().optional(),
        config_url: z.string().optional(),
        config_xml: z.string().optional(),
        consumer_key: z.string(),
        "course_home_sub_navigation[enabled]": z.boolean().optional(),
        "course_home_sub_navigation[icon_url]": z.string().optional(),
        "course_home_sub_navigation[text]": z.string().optional(),
        "course_home_sub_navigation[url]": z.string().optional(),
        "course_navigation[default]": z.boolean().optional(),
        "course_navigation[display_type]": z.string().optional(),
        "course_navigation[enabled]": z.boolean().optional(),
        "course_navigation[text]": z.string().optional(),
        "course_navigation[visibility]": z.union([z.literal("admins"), z.literal("members")]).optional(),
        "course_navigation[windowTarget]": z.union([z.literal("_blank"), z.literal("_self")]).optional(),
        "custom_fields[field_name]": z.string().optional(),
        description: z.string().optional(),
        domain: z.string().optional(),
        "editor_button[enabled]": z.boolean().optional(),
        "editor_button[icon_url]": z.string().optional(),
        "editor_button[message_type]": z.string().optional(),
        "editor_button[selection_height]": z.string().optional(),
        "editor_button[selection_width]": z.string().optional(),
        "editor_button[url]": z.string().optional(),
        "homework_submission[enabled]": z.boolean().optional(),
        "homework_submission[message_type]": z.string().optional(),
        "homework_submission[text]": z.string().optional(),
        "homework_submission[url]": z.string().optional(),
        icon_url: z.string().optional(),
        "link_selection[enabled]": z.boolean().optional(),
        "link_selection[message_type]": z.string().optional(),
        "link_selection[text]": z.string().optional(),
        "link_selection[url]": z.string().optional(),
        "migration_selection[enabled]": z.boolean().optional(),
        "migration_selection[message_type]": z.string().optional(),
        "migration_selection[url]": z.string().optional(),
        name: z.string(),
        not_selectable: z.boolean().optional(),
        oauth_compliant: z.boolean().optional(),
        privacy_level: z.union([z.literal("anonymous"), z.literal("name_only"), z.literal("public")]),
        "resource_selection[enabled]": z.boolean().optional(),
        "resource_selection[icon_url]": z.string().optional(),
        "resource_selection[selection_height]": z.string().optional(),
        "resource_selection[selection_width]": z.string().optional(),
        "resource_selection[url]": z.string().optional(),
        shared_secret: z.string(),
        text: z.string().optional(),
        "tool_configuration[enabled]": z.boolean().optional(),
        "tool_configuration[message_type]": z.string().optional(),
        "tool_configuration[prefer_sis_email]": z.boolean().optional(),
        "tool_configuration[url]": z.string().optional(),
        url: z.string().optional(),
        "user_navigation[enabled]": z.boolean().optional(),
        "user_navigation[text]": z.string().optional(),
        "user_navigation[url]": z.string().optional(),
        "user_navigation[visibility]": z.union([z.literal("admins"), z.literal("members"), z.literal("public")]).optional()
    }),
    path: z.object({
        account_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/accounts/{account_id}/external_tools")
});

export const createExternalToolAccountsResponsesSchema = z.object({
    200: z.unknown()
});

export const getSessionlessLaunchUrlForExternalToolAccountsDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        account_id: z.string()
    }),
    query: z.object({
        id: z.string().optional(),
        url: z.string().optional(),
        assignment_id: z.string().optional(),
        module_item_id: z.string().optional(),
        launch_type: z.union([z.literal("assessment"), z.literal("module_item")]).optional()
    }).optional(),
    url: z.literal("/v1/accounts/{account_id}/external_tools/sessionless_launch")
});

export const getSessionlessLaunchUrlForExternalToolAccountsResponsesSchema = z.object({
    200: z.unknown()
});

export const deleteExternalToolAccountsDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        account_id: z.string(),
        external_tool_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/accounts/{account_id}/external_tools/{external_tool_id}")
});

export const deleteExternalToolAccountsResponsesSchema = z.object({
    200: z.unknown()
});

export const getSingleExternalToolAccountsDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        account_id: z.string(),
        external_tool_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/accounts/{account_id}/external_tools/{external_tool_id}")
});

export const getSingleExternalToolAccountsResponsesSchema = z.object({
    200: z.unknown()
});

export const editExternalToolAccountsDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        account_id: z.string(),
        external_tool_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/accounts/{account_id}/external_tools/{external_tool_id}")
});

export const editExternalToolAccountsResponsesSchema = z.object({
    200: z.unknown()
});

export const listFeaturesAccountsDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        account_id: z.string()
    }),
    query: z.object({
        page: z.string().optional(),
        per_page: z.number().optional()
    }).optional(),
    url: z.literal("/v1/accounts/{account_id}/features")
});

export const featureSchema = z.object({
    applies_to: z.string().optional().nullable(),
    autoexpand: z.boolean().optional().nullable(),
    beta: z.boolean().optional().nullable(),
    development: z.boolean().optional().nullable(),
    display_name: z.string().optional().nullable(),
    enable_at: z.string().optional().nullable(),
    feature_flag: featureFlagNullableSchema.optional(),
    name: z.string().optional().nullable(),
    release_notes_url: z.string().optional().nullable(),
    root_opt_in: z.boolean().optional().nullable()
});

export const listFeaturesAccountsResponsesSchema = z.object({
    200: z.array(featureSchema)
});

export const listEnabledFeaturesAccountsDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        account_id: z.string()
    }),
    query: z.object({
        page: z.string().optional(),
        per_page: z.number().optional()
    }).optional(),
    url: z.literal("/v1/accounts/{account_id}/features/enabled")
});

export const listEnabledFeaturesAccountsResponsesSchema = z.object({
    200: z.unknown()
});

export const removeFeatureFlagAccountsDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        account_id: z.string(),
        feature: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/accounts/{account_id}/features/flags/{feature}")
});

export const removeFeatureFlagAccountsResponsesSchema = z.object({
    200: featureFlagSchema
});

export const removeFeatureFlagAccountsResponseSchema = removeFeatureFlagAccountsResponsesSchema.shape["keyof RemoveFeatureFlagAccountsResponses"];

export const getFeatureFlagAccountsDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        account_id: z.string(),
        feature: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/accounts/{account_id}/features/flags/{feature}")
});

export const getFeatureFlagAccountsResponsesSchema = z.object({
    200: featureFlagSchema
});

export const getFeatureFlagAccountsResponseSchema = getFeatureFlagAccountsResponsesSchema.shape["keyof GetFeatureFlagAccountsResponses"];

export const setFeatureFlagAccountsDataSchema = z.object({
    body: z.object({
        state: z.union([z.literal(false), z.literal("allowed"), z.literal(true)]).optional()
    }).optional(),
    path: z.object({
        account_id: z.string(),
        feature: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/accounts/{account_id}/features/flags/{feature}")
});

export const setFeatureFlagAccountsResponsesSchema = z.object({
    200: featureFlagSchema
});

export const setFeatureFlagAccountsResponseSchema = setFeatureFlagAccountsResponsesSchema.shape["keyof SetFeatureFlagAccountsResponses"];

export const listGradingPeriodsAccountsDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        account_id: z.string()
    }),
    query: z.object({
        page: z.string().optional(),
        per_page: z.number().optional()
    }).optional(),
    url: z.literal("/v1/accounts/{account_id}/grading_periods")
});

export const listGradingPeriodsAccountsResponsesSchema = z.object({
    200: z.array(gradingPeriodSchema)
});

export const listGradingPeriodsAccountsResponseSchema = listGradingPeriodsAccountsResponsesSchema.shape["keyof ListGradingPeriodsAccountsResponses"];

export const deleteGradingPeriodAccountsDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        account_id: z.string(),
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/accounts/{account_id}/grading_periods/{id}")
});

export const deleteGradingPeriodAccountsResponsesSchema = z.object({
    200: z.unknown()
});

export const listGradingStandardsAvailableInContextAccountsDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        account_id: z.string()
    }),
    query: z.object({
        page: z.string().optional(),
        per_page: z.number().optional()
    }).optional(),
    url: z.literal("/v1/accounts/{account_id}/grading_standards")
});

export const listGradingStandardsAvailableInContextAccountsResponsesSchema = z.object({
    200: z.array(gradingStandardSchema)
});

export const listGradingStandardsAvailableInContextAccountsResponseSchema = listGradingStandardsAvailableInContextAccountsResponsesSchema.shape["keyof ListGradingStandardsAvailableInContextAccountsResponses"];

export const createNewGradingStandardAccountsDataSchema = z.object({
    body: z.object({
        "grading_scheme_entry[name]": z.array(z.string()),
        "grading_scheme_entry[value]": z.array(z.number()),
        title: z.string()
    }),
    path: z.object({
        account_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/accounts/{account_id}/grading_standards")
});

export const createNewGradingStandardAccountsResponsesSchema = z.object({
    200: gradingStandardSchema
});

export const createNewGradingStandardAccountsResponseSchema = createNewGradingStandardAccountsResponsesSchema.shape["keyof CreateNewGradingStandardAccountsResponses"];

export const getSingleGradingStandardInContextAccountsDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        account_id: z.string(),
        grading_standard_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/accounts/{account_id}/grading_standards/{grading_standard_id}")
});

export const getSingleGradingStandardInContextAccountsResponsesSchema = z.object({
    200: gradingStandardSchema
});

export const getSingleGradingStandardInContextAccountsResponseSchema = getSingleGradingStandardInContextAccountsResponsesSchema.shape["keyof GetSingleGradingStandardInContextAccountsResponses"];

export const listGroupCategoriesForContextAccountsDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        account_id: z.string()
    }),
    query: z.object({
        page: z.string().optional(),
        per_page: z.number().optional()
    }).optional(),
    url: z.literal("/v1/accounts/{account_id}/group_categories")
});

export const groupCategorySchema = z.object({
    account_id: z.number().optional().nullable(),
    auto_leader: z.string().optional().nullable(),
    context_type: z.string().optional().nullable(),
    group_limit: z.number().optional().nullable(),
    id: z.number().optional(),
    name: z.string().optional().nullable(),
    progress: progressNullableSchema.optional(),
    role: z.string().optional().nullable(),
    self_signup: z.string().optional().nullable(),
    sis_group_category_id: z.string().optional().nullable(),
    sis_import_id: z.number().optional().nullable()
});

export const listGroupCategoriesForContextAccountsResponsesSchema = z.object({
    200: z.array(groupCategorySchema)
});

export const createGroupCategoryAccountsDataSchema = z.object({
    body: z.object({
        auto_leader: z.union([z.literal("first"), z.literal("random")]).optional(),
        create_group_count: z.number().optional(),
        group_limit: z.number().optional(),
        name: z.string(),
        self_signup: z.union([z.literal("enabled"), z.literal("restricted")]).optional(),
        sis_group_category_id: z.string().optional(),
        split_group_count: z.string().optional()
    }),
    path: z.object({
        account_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/accounts/{account_id}/group_categories")
});

export const createGroupCategoryAccountsResponsesSchema = z.object({
    200: groupCategorySchema
});

export const createGroupCategoryAccountsResponseSchema = createGroupCategoryAccountsResponsesSchema.shape["keyof CreateGroupCategoryAccountsResponses"];

export const listGroupsAvailableInContextAccountsDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        account_id: z.string()
    }),
    query: z.object({
        only_own_groups: z.boolean().optional(),
        include: z.array(z.literal("tabs")).optional(),
        page: z.string().optional(),
        per_page: z.number().optional()
    }).optional(),
    url: z.literal("/v1/accounts/{account_id}/groups")
});

export const listGroupsAvailableInContextAccountsResponsesSchema = z.object({
    200: z.array(groupSchema)
});

export const listGroupsAvailableInContextAccountsResponseSchema = listGroupsAvailableInContextAccountsResponsesSchema.shape["keyof ListGroupsAvailableInContextAccountsResponses"];

export const getHelpLinksDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        account_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/accounts/{account_id}/help_links")
});

export const getHelpLinksResponsesSchema = z.object({
    200: helpLinksSchema
});

export const getHelpLinksResponseSchema = getHelpLinksResponsesSchema.shape["keyof GetHelpLinksResponses"];

export const listUserLoginsAccountsDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        account_id: z.string()
    }),
    query: z.object({
        page: z.string().optional(),
        per_page: z.number().optional()
    }).optional(),
    url: z.literal("/v1/accounts/{account_id}/logins")
});

export const listUserLoginsAccountsResponsesSchema = z.object({
    200: z.unknown()
});

export const createUserLoginDataSchema = z.object({
    body: z.object({
        "login[authentication_provider_id]": z.string().optional(),
        "login[integration_id]": z.string().optional(),
        "login[password]": z.string().optional(),
        "login[sis_user_id]": z.string().optional(),
        "login[unique_id]": z.string(),
        "user[id]": z.string()
    }),
    path: z.object({
        account_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/accounts/{account_id}/logins")
});

export const createUserLoginResponsesSchema = z.object({
    200: z.unknown()
});

export const editUserLoginDataSchema = z.object({
    body: z.object({
        "login[integration_id]": z.string().optional(),
        "login[password]": z.string().optional(),
        "login[sis_user_id]": z.string().optional(),
        "login[unique_id]": z.string().optional()
    }).optional(),
    path: z.object({
        account_id: z.string(),
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/accounts/{account_id}/logins/{id}")
});

export const editUserLoginResponsesSchema = z.object({
    200: z.unknown()
});

export const getAllOutcomeLinksForContextAccountsDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        account_id: z.string()
    }),
    query: z.object({
        outcome_style: z.string().optional(),
        outcome_group_style: z.string().optional()
    }).optional(),
    url: z.literal("/v1/accounts/{account_id}/outcome_group_links")
});

export const getAllOutcomeLinksForContextAccountsResponsesSchema = z.object({
    200: z.array(outcomeLinkSchema)
});

export const getAllOutcomeLinksForContextAccountsResponseSchema = getAllOutcomeLinksForContextAccountsResponsesSchema.shape["keyof GetAllOutcomeLinksForContextAccountsResponses"];

export const getAllOutcomeGroupsForContextAccountsDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        account_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/accounts/{account_id}/outcome_groups")
});

export const getAllOutcomeGroupsForContextAccountsResponsesSchema = z.object({
    200: z.array(outcomeGroupSchema)
});

export const getAllOutcomeGroupsForContextAccountsResponseSchema = getAllOutcomeGroupsForContextAccountsResponsesSchema.shape["keyof GetAllOutcomeGroupsForContextAccountsResponses"];

export const deleteOutcomeGroupAccountsDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        account_id: z.string(),
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/accounts/{account_id}/outcome_groups/{id}")
});

export const deleteOutcomeGroupAccountsResponsesSchema = z.object({
    200: outcomeGroupSchema
});

export const deleteOutcomeGroupAccountsResponseSchema = deleteOutcomeGroupAccountsResponsesSchema.shape["keyof DeleteOutcomeGroupAccountsResponses"];

export const showOutcomeGroupAccountsDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        account_id: z.string(),
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/accounts/{account_id}/outcome_groups/{id}")
});

export const showOutcomeGroupAccountsResponsesSchema = z.object({
    200: outcomeGroupSchema
});

export const showOutcomeGroupAccountsResponseSchema = showOutcomeGroupAccountsResponsesSchema.shape["keyof ShowOutcomeGroupAccountsResponses"];

export const updateOutcomeGroupAccountsDataSchema = z.object({
    body: z.object({
        description: z.string().optional(),
        parent_outcome_group_id: z.number().optional(),
        title: z.string().optional(),
        vendor_guid: z.string().optional()
    }).optional(),
    path: z.object({
        account_id: z.string(),
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/accounts/{account_id}/outcome_groups/{id}")
});

export const updateOutcomeGroupAccountsResponsesSchema = z.object({
    200: outcomeGroupSchema
});

export const updateOutcomeGroupAccountsResponseSchema = updateOutcomeGroupAccountsResponsesSchema.shape["keyof UpdateOutcomeGroupAccountsResponses"];

export const importOutcomeGroupAccountsDataSchema = z.object({
    body: z.object({
        async: z.boolean().optional(),
        source_outcome_group_id: z.number()
    }),
    path: z.object({
        account_id: z.string(),
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/accounts/{account_id}/outcome_groups/{id}/import")
});

export const importOutcomeGroupAccountsResponsesSchema = z.object({
    200: outcomeGroupSchema
});

export const importOutcomeGroupAccountsResponseSchema = importOutcomeGroupAccountsResponsesSchema.shape["keyof ImportOutcomeGroupAccountsResponses"];

export const listLinkedOutcomesAccountsDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        account_id: z.string(),
        id: z.string()
    }),
    query: z.object({
        outcome_style: z.string().optional(),
        page: z.string().optional(),
        per_page: z.number().optional()
    }).optional(),
    url: z.literal("/v1/accounts/{account_id}/outcome_groups/{id}/outcomes")
});

export const listLinkedOutcomesAccountsResponsesSchema = z.object({
    200: z.array(outcomeLinkSchema)
});

export const listLinkedOutcomesAccountsResponseSchema = listLinkedOutcomesAccountsResponsesSchema.shape["keyof ListLinkedOutcomesAccountsResponses"];

export const createLinkOutcomeAccountsDataSchema = z.object({
    body: z.object({
        calculation_int: z.number().optional(),
        calculation_method: z.union([z.literal("decaying_average"), z.literal("n_mastery"), z.literal("latest"), z.literal("highest")]).optional(),
        description: z.string().optional(),
        display_name: z.string().optional(),
        mastery_points: z.number().optional(),
        move_from: z.number().optional(),
        outcome_id: z.number().optional(),
        "ratings[description]": z.array(z.string()).optional(),
        "ratings[points]": z.array(z.number()).optional(),
        title: z.string().optional(),
        vendor_guid: z.string().optional()
    }).optional(),
    path: z.object({
        account_id: z.string(),
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/accounts/{account_id}/outcome_groups/{id}/outcomes")
});

export const createLinkOutcomeAccountsResponsesSchema = z.object({
    200: outcomeLinkSchema
});

export const createLinkOutcomeAccountsResponseSchema = createLinkOutcomeAccountsResponsesSchema.shape["keyof CreateLinkOutcomeAccountsResponses"];

export const unlinkOutcomeAccountsDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        account_id: z.string(),
        id: z.string(),
        outcome_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/accounts/{account_id}/outcome_groups/{id}/outcomes/{outcome_id}")
});

export const unlinkOutcomeAccountsResponsesSchema = z.object({
    200: outcomeLinkSchema
});

export const unlinkOutcomeAccountsResponseSchema = unlinkOutcomeAccountsResponsesSchema.shape["keyof UnlinkOutcomeAccountsResponses"];

export const createLinkOutcomeAccountsOutcomeIdDataSchema = z.object({
    body: z.object({
        calculation_int: z.number().optional(),
        calculation_method: z.union([z.literal("decaying_average"), z.literal("n_mastery"), z.literal("latest"), z.literal("highest")]).optional(),
        description: z.string().optional(),
        display_name: z.string().optional(),
        mastery_points: z.number().optional(),
        move_from: z.number().optional(),
        "ratings[description]": z.array(z.string()).optional(),
        "ratings[points]": z.array(z.number()).optional(),
        title: z.string().optional(),
        vendor_guid: z.string().optional()
    }).optional(),
    path: z.object({
        account_id: z.string(),
        id: z.string(),
        outcome_id: z.number()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/accounts/{account_id}/outcome_groups/{id}/outcomes/{outcome_id}")
});

export const createLinkOutcomeAccountsOutcomeIdResponsesSchema = z.object({
    200: outcomeLinkSchema
});

export const createLinkOutcomeAccountsOutcomeIdResponseSchema = createLinkOutcomeAccountsOutcomeIdResponsesSchema.shape["keyof CreateLinkOutcomeAccountsOutcomeIdResponses"];

export const listSubgroupsAccountsDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        account_id: z.string(),
        id: z.string()
    }),
    query: z.object({
        page: z.string().optional(),
        per_page: z.number().optional()
    }).optional(),
    url: z.literal("/v1/accounts/{account_id}/outcome_groups/{id}/subgroups")
});

export const listSubgroupsAccountsResponsesSchema = z.object({
    200: z.array(outcomeGroupSchema)
});

export const listSubgroupsAccountsResponseSchema = listSubgroupsAccountsResponsesSchema.shape["keyof ListSubgroupsAccountsResponses"];

export const createSubgroupAccountsDataSchema = z.object({
    body: z.object({
        description: z.string().optional(),
        title: z.string(),
        vendor_guid: z.string().optional()
    }),
    path: z.object({
        account_id: z.string(),
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/accounts/{account_id}/outcome_groups/{id}/subgroups")
});

export const createSubgroupAccountsResponsesSchema = z.object({
    200: outcomeGroupSchema
});

export const createSubgroupAccountsResponseSchema = createSubgroupAccountsResponsesSchema.shape["keyof CreateSubgroupAccountsResponses"];

export const importOutcomesAccountsDataSchema = z.object({
    body: z.object({
        attachment: z.string().optional(),
        extension: z.string().optional(),
        import_type: z.string().optional()
    }).optional(),
    path: z.object({
        account_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/accounts/{account_id}/outcome_imports")
});

export const getOutcomeImportStatusAccountsDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        account_id: z.string(),
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/accounts/{account_id}/outcome_imports/{id}")
});

export const getProficiencyRatingsDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        account_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/accounts/{account_id}/outcome_proficiency")
});

export const getProficiencyRatingsResponsesSchema = z.object({
    200: proficiencySchema
});

export const getProficiencyRatingsResponseSchema = getProficiencyRatingsResponsesSchema.shape["keyof GetProficiencyRatingsResponses"];

export const createUpdateProficiencyRatingsDataSchema = z.object({
    body: z.object({
        "ratings[color]": z.array(z.number()).optional(),
        "ratings[description]": z.array(z.string()).optional(),
        "ratings[mastery]": z.array(z.number()).optional(),
        "ratings[points]": z.array(z.number()).optional()
    }).optional(),
    path: z.object({
        account_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/accounts/{account_id}/outcome_proficiency")
});

export const createUpdateProficiencyRatingsResponsesSchema = z.object({
    200: proficiencySchema
});

export const createUpdateProficiencyRatingsResponseSchema = createUpdateProficiencyRatingsResponsesSchema.shape["keyof CreateUpdateProficiencyRatingsResponses"];

export const accountPermissionsDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        account_id: z.string()
    }),
    query: z.object({
        permissions: z.array(z.string()).optional()
    }).optional(),
    url: z.literal("/v1/accounts/{account_id}/permissions")
});

export const accountPermissionsResponsesSchema = z.object({
    200: z.unknown()
});

export const listAvailableReportsDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        account_id: z.string()
    }),
    query: z.object({
        page: z.string().optional(),
        per_page: z.number().optional()
    }).optional(),
    url: z.literal("/v1/accounts/{account_id}/reports")
});

export const listAvailableReportsResponsesSchema = z.object({
    200: z.unknown()
});

export const indexOfReportsDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        account_id: z.string(),
        report: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/accounts/{account_id}/reports/{report}")
});

export const reportSchema = z.object({
    attachment: fileNullableSchema.optional(),
    created_at: z.string().optional().nullable(),
    current_line: z.number().optional().nullable(),
    ended_at: z.string().optional().nullable(),
    file_url: z.string().optional().nullable(),
    id: z.number().optional(),
    parameters: reportParametersSchema.optional(),
    progress: z.number().optional().nullable(),
    report: z.string().optional().nullable(),
    started_at: z.string().optional().nullable(),
    status: z.string().optional().nullable()
});

export const indexOfReportsResponsesSchema = z.object({
    200: z.array(reportSchema)
});

export const startReportDataSchema = z.object({
    body: z.object({
        parameters: z.string().optional(),
        "parameters[course_id]": z.number().optional(),
        "parameters[users]": z.boolean().optional()
    }).optional(),
    path: z.object({
        account_id: z.string(),
        report: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/accounts/{account_id}/reports/{report}")
});

export const startReportResponsesSchema = z.object({
    200: reportSchema
});

export const startReportResponseSchema = startReportResponsesSchema.shape["keyof StartReportResponses"];

export const deleteReportDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        account_id: z.string(),
        report: z.string(),
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/accounts/{account_id}/reports/{report}/{id}")
});

export const deleteReportResponsesSchema = z.object({
    200: reportSchema
});

export const deleteReportResponseSchema = deleteReportResponsesSchema.shape["keyof DeleteReportResponses"];

export const statusOfReportDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        account_id: z.string(),
        report: z.string(),
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/accounts/{account_id}/reports/{report}/{id}")
});

export const statusOfReportResponsesSchema = z.object({
    200: reportSchema
});

export const statusOfReportResponseSchema = statusOfReportResponsesSchema.shape["keyof StatusOfReportResponses"];

export const listRolesDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        account_id: z.string()
    }),
    query: z.object({
        state: z.array(z.union([z.literal("active"), z.literal("inactive")])).optional(),
        show_inherited: z.boolean().optional(),
        page: z.string().optional(),
        per_page: z.number().optional()
    }).optional(),
    url: z.literal("/v1/accounts/{account_id}/roles")
});

export const listRolesResponsesSchema = z.object({
    200: z.array(roleSchema)
});

export const listRolesResponseSchema = listRolesResponsesSchema.shape["keyof ListRolesResponses"];

export const createNewRoleDataSchema = z.object({
    body: z.object({
        base_role_type: z.union([z.literal("AccountMembership"), z.literal("StudentEnrollment"), z.literal("TeacherEnrollment"), z.literal("TaEnrollment"), z.literal("ObserverEnrollment"), z.literal("DesignerEnrollment")]).optional(),
        label: z.string(),
        "permissions[X][applies_to_descendants]": z.boolean().optional(),
        "permissions[X][applies_to_self]": z.boolean().optional(),
        "permissions[X][enabled]": z.boolean().optional(),
        "permissions[X][explicit]": z.boolean().optional(),
        "permissions[X][locked]": z.boolean().optional(),
        role: z.string().optional()
    }),
    path: z.object({
        account_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/accounts/{account_id}/roles")
});

export const createNewRoleResponsesSchema = z.object({
    200: roleSchema
});

export const createNewRoleResponseSchema = createNewRoleResponsesSchema.shape["keyof CreateNewRoleResponses"];

export const deactivateRoleDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        account_id: z.string(),
        id: z.string()
    }),
    query: z.object({
        role_id: z.number(),
        role: z.string().optional()
    }),
    url: z.literal("/v1/accounts/{account_id}/roles/{id}")
});

export const deactivateRoleResponsesSchema = z.object({
    200: roleSchema
});

export const deactivateRoleResponseSchema = deactivateRoleResponsesSchema.shape["keyof DeactivateRoleResponses"];

export const getSingleRoleDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        id: z.string(),
        account_id: z.string()
    }),
    query: z.object({
        role_id: z.number(),
        role: z.string().optional()
    }),
    url: z.literal("/v1/accounts/{account_id}/roles/{id}")
});

export const getSingleRoleResponsesSchema = z.object({
    200: roleSchema
});

export const getSingleRoleResponseSchema = getSingleRoleResponsesSchema.shape["keyof GetSingleRoleResponses"];

export const updateRoleDataSchema = z.object({
    body: z.object({
        label: z.string().optional(),
        "permissions[X][applies_to_descendants]": z.boolean().optional(),
        "permissions[X][applies_to_self]": z.boolean().optional(),
        "permissions[X][enabled]": z.boolean().optional(),
        "permissions[X][explicit]": z.boolean().optional()
    }).optional(),
    path: z.object({
        account_id: z.string(),
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/accounts/{account_id}/roles/{id}")
});

export const updateRoleResponsesSchema = z.object({
    200: roleSchema
});

export const updateRoleResponseSchema = updateRoleResponsesSchema.shape["keyof UpdateRoleResponses"];

export const activateRoleDataSchema = z.object({
    body: z.object({
        role: z.unknown().optional(),
        role_id: z.number()
    }),
    path: z.object({
        account_id: z.string(),
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/accounts/{account_id}/roles/{id}/activate")
});

export const activateRoleResponsesSchema = z.object({
    200: roleSchema
});

export const activateRoleResponseSchema = activateRoleResponsesSchema.shape["keyof ActivateRoleResponses"];

export const redirectToRootOutcomeGroupForContextAccountsDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        account_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/accounts/{account_id}/root_outcome_group")
});

export const redirectToRootOutcomeGroupForContextAccountsResponsesSchema = z.object({
    200: z.unknown()
});

export const listRubricsAccountsDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        account_id: z.string()
    }),
    query: z.object({
        page: z.string().optional(),
        per_page: z.number().optional()
    }).optional(),
    url: z.literal("/v1/accounts/{account_id}/rubrics")
});

export const rubricSchema = z.object({
    assessments: z.array(rubricAssessmentSchema).optional().nullable(),
    context_id: z.number().optional().nullable(),
    context_type: z.string().optional().nullable(),
    free_form_criterion_comments: z.boolean().optional().nullable(),
    hide_score_total: z.boolean().optional().nullable(),
    id: z.number().optional(),
    points_possible: z.number().optional().nullable(),
    read_only: z.boolean().optional().nullable(),
    reusable: z.boolean().optional().nullable(),
    title: z.string().optional().nullable()
});

export const listRubricsAccountsResponsesSchema = z.object({
    200: rubricSchema
});

export const getSingleRubricAccountsDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        account_id: z.string(),
        id: z.string()
    }),
    query: z.object({
        include: z.union([z.literal("assessments"), z.literal("graded_assessments"), z.literal("peer_assessments")]).optional(),
        style: z.union([z.literal("full"), z.literal("comments_only")]).optional()
    }).optional(),
    url: z.literal("/v1/accounts/{account_id}/rubrics/{id}")
});

export const getSingleRubricAccountsResponsesSchema = z.object({
    200: rubricSchema
});

export const getSingleRubricAccountsResponseSchema = getSingleRubricAccountsResponsesSchema.shape["keyof GetSingleRubricAccountsResponses"];

export const listScopesDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        account_id: z.string()
    }),
    query: z.object({
        group_by: z.literal("resource_name").optional()
    }).optional(),
    url: z.literal("/v1/accounts/{account_id}/scopes")
});

export const listScopesResponsesSchema = z.object({
    200: z.array(scopeSchema)
});

export const listScopesResponseSchema = listScopesResponsesSchema.shape["keyof ListScopesResponses"];

export const selfRegisterUserDataSchema = z.object({
    body: z.object({
        "communication_channel[address]": z.string().optional(),
        "communication_channel[type]": z.string().optional(),
        "pseudonym[unique_id]": z.string(),
        "user[birthdate]": z.string().optional(),
        "user[locale]": z.string().optional(),
        "user[name]": z.string(),
        "user[short_name]": z.string().optional(),
        "user[sortable_name]": z.string().optional(),
        "user[terms_of_use]": z.boolean(),
        "user[time_zone]": z.string().optional()
    }),
    path: z.object({
        account_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/accounts/{account_id}/self_registration")
});

export const shareBrandconfigThemeDataSchema = z.object({
    body: z.object({
        "shared_brand_config[brand_config_md5]": z.string(),
        "shared_brand_config[name]": z.string()
    }),
    path: z.object({
        account_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/accounts/{account_id}/shared_brand_configs")
});

export const shareBrandconfigThemeResponsesSchema = z.object({
    200: sharedBrandConfigSchema
});

export const shareBrandconfigThemeResponseSchema = shareBrandconfigThemeResponsesSchema.shape["keyof ShareBrandconfigThemeResponses"];

export const updateSharedThemeDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        account_id: z.string(),
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/accounts/{account_id}/shared_brand_configs/{id}")
});

export const updateSharedThemeResponsesSchema = z.object({
    200: sharedBrandConfigSchema
});

export const updateSharedThemeResponseSchema = updateSharedThemeResponsesSchema.shape["keyof UpdateSharedThemeResponses"];

export const getSisImportErrorListSisImportErrorsDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        account_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/accounts/{account_id}/sis_import_errors")
});

export const getSisImportErrorListSisImportErrorsResponsesSchema = z.object({
    200: z.array(sisImportErrorSchema)
});

export const getSisImportErrorListSisImportErrorsResponseSchema = getSisImportErrorListSisImportErrorsResponsesSchema.shape["keyof GetSisImportErrorListSisImportErrorsResponses"];

export const getSisImportListDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        account_id: z.string()
    }),
    query: z.object({
        created_since: z.string().optional()
    }).optional(),
    url: z.literal("/v1/accounts/{account_id}/sis_imports")
});

export const importSisDataDataSchema = z.object({
    body: z.object({
        add_sis_stickiness: z.boolean().optional(),
        attachment: z.string().optional(),
        batch_mode: z.boolean().optional(),
        batch_mode_term_id: z.string().optional(),
        change_threshold: z.number().optional(),
        clear_sis_stickiness: z.boolean().optional(),
        diffing_data_set_identifier: z.string().optional(),
        diffing_drop_status: z.union([z.literal("deleted"), z.literal("completed"), z.literal("inactive")]).optional(),
        diffing_remaster_data_set: z.boolean().optional(),
        extension: z.string().optional(),
        import_type: z.string().optional(),
        multi_term_batch_mode: z.boolean().optional(),
        override_sis_stickiness: z.boolean().optional(),
        skip_deletes: z.boolean().optional()
    }).optional(),
    path: z.object({
        account_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/accounts/{account_id}/sis_imports")
});

export const abortAllPendingSisImportsDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        account_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/accounts/{account_id}/sis_imports/abort_all_pending")
});

export const abortAllPendingSisImportsResponsesSchema = z.object({
    200: z.boolean()
});

export const abortAllPendingSisImportsResponseSchema = abortAllPendingSisImportsResponsesSchema.shape["keyof AbortAllPendingSisImportsResponses"];

export const getSisImportStatusDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        account_id: z.string(),
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/accounts/{account_id}/sis_imports/{id}")
});

export const abortSisImportDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        account_id: z.string(),
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/accounts/{account_id}/sis_imports/{id}/abort")
});

export const getSisImportErrorListSisImportsDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        account_id: z.string(),
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/accounts/{account_id}/sis_imports/{id}/errors")
});

export const getSisImportErrorListSisImportsResponsesSchema = z.object({
    200: z.array(sisImportErrorSchema)
});

export const getSisImportErrorListSisImportsResponseSchema = getSisImportErrorListSisImportsResponsesSchema.shape["keyof GetSisImportErrorListSisImportsResponses"];

export const restoreWorkflowStatesOfSisImportedItemsDataSchema = z.object({
    body: z.object({
        batch_mode: z.boolean().optional(),
        unconclude_only: z.boolean().optional(),
        undelete_only: z.boolean().optional()
    }).optional(),
    path: z.object({
        account_id: z.string(),
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/accounts/{account_id}/sis_imports/{id}/restore_states")
});

export const restoreWorkflowStatesOfSisImportedItemsResponsesSchema = z.object({
    200: progressSchema
});

export const restoreWorkflowStatesOfSisImportedItemsResponseSchema = restoreWorkflowStatesOfSisImportedItemsResponsesSchema.shape["keyof RestoreWorkflowStatesOfSisImportedItemsResponses"];

export const showAccountAuthSettingsDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        account_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/accounts/{account_id}/sso_settings")
});

export const showAccountAuthSettingsResponsesSchema = z.object({
    200: ssoSettingsSchema
});

export const showAccountAuthSettingsResponseSchema = showAccountAuthSettingsResponsesSchema.shape["keyof ShowAccountAuthSettingsResponses"];

export const updateAccountAuthSettingsDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        account_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/accounts/{account_id}/sso_settings")
});

export const updateAccountAuthSettingsResponsesSchema = z.object({
    200: ssoSettingsSchema
});

export const updateAccountAuthSettingsResponseSchema = updateAccountAuthSettingsResponsesSchema.shape["keyof UpdateAccountAuthSettingsResponses"];

export const getSubAccountsOfAccountDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        account_id: z.string()
    }),
    query: z.object({
        recursive: z.boolean().optional()
    }).optional(),
    url: z.literal("/v1/accounts/{account_id}/sub_accounts")
});

export const getSubAccountsOfAccountResponsesSchema = z.object({
    200: z.array(accountSchema)
});

export const getSubAccountsOfAccountResponseSchema = getSubAccountsOfAccountResponsesSchema.shape["keyof GetSubAccountsOfAccountResponses"];

export const createNewSubAccountDataSchema = z.object({
    body: z.object({
        "account[default_group_storage_quota_mb]": z.number().optional(),
        "account[default_storage_quota_mb]": z.number().optional(),
        "account[default_user_storage_quota_mb]": z.number().optional(),
        "account[name]": z.string(),
        "account[sis_account_id]": z.string().optional()
    }),
    path: z.object({
        account_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/accounts/{account_id}/sub_accounts")
});

export const createNewSubAccountResponsesSchema = z.object({
    200: accountSchema
});

export const createNewSubAccountResponseSchema = createNewSubAccountResponsesSchema.shape["keyof CreateNewSubAccountResponses"];

export const deleteSubAccountDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        account_id: z.string(),
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/accounts/{account_id}/sub_accounts/{id}")
});

export const deleteSubAccountResponsesSchema = z.object({
    200: accountSchema
});

export const deleteSubAccountResponseSchema = deleteSubAccountResponsesSchema.shape["keyof DeleteSubAccountResponses"];

export const listEnrollmentTermsDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        account_id: z.string()
    }),
    query: z.object({
        page: z.string().optional(),
        per_page: z.number().optional(),
        workflow_state: z.array(z.union([z.literal("active"), z.literal("deleted"), z.literal("all")])).optional(),
        include: z.array(z.literal("overrides")).optional()
    }).optional(),
    url: z.literal("/v1/accounts/{account_id}/terms")
});

export const listEnrollmentTermsResponsesSchema = z.object({
    200: z.array(enrollmentTermSchema)
});

export const listEnrollmentTermsResponseSchema = listEnrollmentTermsResponsesSchema.shape["keyof ListEnrollmentTermsResponses"];

export const createEnrollmentTermDataSchema = z.object({
    body: z.object({
        "enrollment_term[end_at]": z.string().optional(),
        "enrollment_term[name]": z.string().optional(),
        "enrollment_term[overrides][enrollment_type][end_at]": z.string().optional(),
        "enrollment_term[overrides][enrollment_type][start_at]": z.string().optional(),
        "enrollment_term[sis_term_id]": z.string().optional(),
        "enrollment_term[start_at]": z.string().optional()
    }).optional(),
    path: z.object({
        account_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/accounts/{account_id}/terms")
});

export const createEnrollmentTermResponsesSchema = z.object({
    200: enrollmentTermSchema
});

export const createEnrollmentTermResponseSchema = createEnrollmentTermResponsesSchema.shape["keyof CreateEnrollmentTermResponses"];

export const deleteEnrollmentTermDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        account_id: z.string(),
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/accounts/{account_id}/terms/{id}")
});

export const deleteEnrollmentTermResponsesSchema = z.object({
    200: enrollmentTermSchema
});

export const deleteEnrollmentTermResponseSchema = deleteEnrollmentTermResponsesSchema.shape["keyof DeleteEnrollmentTermResponses"];

export const updateEnrollmentTermDataSchema = z.object({
    body: z.object({
        "enrollment_term[end_at]": z.string().optional(),
        "enrollment_term[name]": z.string().optional(),
        "enrollment_term[overrides][enrollment_type][end_at]": z.string().optional(),
        "enrollment_term[overrides][enrollment_type][start_at]": z.string().optional(),
        "enrollment_term[sis_term_id]": z.string().optional(),
        "enrollment_term[start_at]": z.string().optional()
    }).optional(),
    path: z.object({
        account_id: z.string(),
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/accounts/{account_id}/terms/{id}")
});

export const updateEnrollmentTermResponsesSchema = z.object({
    200: enrollmentTermSchema
});

export const updateEnrollmentTermResponseSchema = updateEnrollmentTermResponsesSchema.shape["keyof UpdateEnrollmentTermResponses"];

export const getTermsOfServiceDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        account_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/accounts/{account_id}/terms_of_service")
});

export const getTermsOfServiceResponsesSchema = z.object({
    200: termsOfServiceSchema
});

export const getTermsOfServiceResponseSchema = getTermsOfServiceResponsesSchema.shape["keyof GetTermsOfServiceResponses"];

export const listUsersInAccountDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        account_id: z.string()
    }),
    query: z.object({
        search_term: z.string().optional(),
        sort: z.union([z.literal("username"), z.literal("email"), z.literal("sis_id"), z.literal("last_login")]).optional(),
        order: z.union([z.literal("asc"), z.literal("desc")]).optional(),
        page: z.string().optional(),
        per_page: z.number().optional()
    }).optional(),
    url: z.literal("/v1/accounts/{account_id}/users")
});

export const createUserDataSchema = z.object({
    body: z.object({
        "communication_channel[address]": z.string().optional(),
        "communication_channel[confirmation_url]": z.boolean().optional(),
        "communication_channel[skip_confirmation]": z.boolean().optional(),
        "communication_channel[type]": z.string().optional(),
        destination: z.unknown().optional(),
        enable_sis_reactivation: z.boolean().optional(),
        force_validations: z.boolean().optional(),
        "pseudonym[authentication_provider_id]": z.string().optional(),
        "pseudonym[force_self_registration]": z.boolean().optional(),
        "pseudonym[integration_id]": z.string().optional(),
        "pseudonym[password]": z.string().optional(),
        "pseudonym[send_confirmation]": z.boolean().optional(),
        "pseudonym[sis_user_id]": z.string().optional(),
        "pseudonym[unique_id]": z.string(),
        "user[birthdate]": z.string().optional(),
        "user[locale]": z.string().optional(),
        "user[name]": z.string().optional(),
        "user[short_name]": z.string().optional(),
        "user[skip_registration]": z.boolean().optional(),
        "user[sortable_name]": z.string().optional(),
        "user[terms_of_use]": z.boolean().optional(),
        "user[time_zone]": z.string().optional()
    }),
    path: z.object({
        account_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/accounts/{account_id}/users")
});

export const deleteUserFromRootAccountDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        account_id: z.string(),
        user_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/accounts/{account_id}/users/{user_id}")
});

export const getSingleAccountDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/accounts/{id}")
});

export const getSingleAccountResponsesSchema = z.object({
    200: accountSchema
});

export const getSingleAccountResponseSchema = getSingleAccountResponsesSchema.shape["keyof GetSingleAccountResponses"];

export const updateAccountDataSchema = z.object({
    body: z.object({
        "account[default_group_storage_quota_mb]": z.number().optional(),
        "account[default_storage_quota_mb]": z.number().optional(),
        "account[default_time_zone]": z.string().optional(),
        "account[default_user_storage_quota_mb]": z.number().optional(),
        "account[name]": z.string().optional(),
        "account[services]": z.unknown().optional(),
        "account[settings][lock_all_announcements][locked]": z.boolean().optional(),
        "account[settings][lock_all_announcements][value]": z.boolean().optional(),
        "account[settings][restrict_student_future_listing][locked]": z.boolean().optional(),
        "account[settings][restrict_student_future_listing][value]": z.boolean().optional(),
        "account[settings][restrict_student_future_view][locked]": z.boolean().optional(),
        "account[settings][restrict_student_future_view][value]": z.boolean().optional(),
        "account[settings][restrict_student_past_view][locked]": z.boolean().optional(),
        "account[settings][restrict_student_past_view][value]": z.boolean().optional(),
        "account[sis_account_id]": z.string().optional()
    }).optional(),
    path: z.object({
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/accounts/{id}")
});

export const updateAccountResponsesSchema = z.object({
    200: accountSchema
});

export const updateAccountResponseSchema = updateAccountResponsesSchema.shape["keyof UpdateAccountResponses"];

export const listAnnouncementsDataSchema = z.object({
    body: z.never().optional(),
    path: z.never().optional(),
    query: z.object({
        context_codes: z.array(z.string()),
        start_date: z.string().optional(),
        end_date: z.string().optional(),
        active_only: z.boolean().optional(),
        include: z.array(z.string()).optional(),
        page: z.string().optional(),
        per_page: z.number().optional()
    }),
    url: z.literal("/v1/announcements")
});

export const discussionTopicSchema = z.object({
    allow_rating: z.boolean().optional().nullable(),
    assignment_id: z.number().optional().nullable(),
    attachments: z.array(fileAttachmentSchema).optional().nullable(),
    delayed_post_at: z.string().optional().nullable(),
    discussion_subentry_count: z.number().optional().nullable(),
    discussion_type: z.string().optional().nullable(),
    group_category_id: z.number().optional().nullable(),
    group_topic_children: z.array(z.record(z.unknown())).optional().nullable(),
    html_url: z.string().optional().nullable(),
    id: z.number().optional(),
    last_reply_at: z.string().optional().nullable(),
    lock_at: z.string().optional().nullable(),
    lock_explanation: z.string().optional().nullable(),
    lock_info: lockInfoSchema.optional(),
    locked: z.boolean().optional().nullable(),
    locked_for_user: z.boolean().optional().nullable(),
    message: z.string().optional().nullable(),
    only_graders_can_rate: z.boolean().optional().nullable(),
    permissions: z.record(z.unknown()).optional().nullable(),
    pinned: z.boolean().optional().nullable(),
    podcast_url: z.string().optional().nullable(),
    posted_at: z.string().optional().nullable(),
    published: z.boolean().optional().nullable(),
    read_state: z.string().optional().nullable(),
    require_initial_post: z.boolean().optional().nullable(),
    root_topic_id: z.number().optional().nullable(),
    sort_by_rating: z.boolean().optional().nullable(),
    subscribed: z.boolean().optional().nullable(),
    subscription_hold: z.string().optional().nullable(),
    title: z.string().optional().nullable(),
    topic_children: z.array(z.number()).optional().nullable(),
    unread_count: z.number().optional().nullable(),
    user_can_see_posts: z.boolean().optional().nullable(),
    user_name: z.string().optional().nullable()
});

export const listAnnouncementsResponsesSchema = z.object({
    200: z.array(discussionTopicSchema)
});

export const listAppointmentGroupsDataSchema = z.object({
    body: z.never().optional(),
    path: z.never().optional(),
    query: z.object({
        scope: z.union([z.literal("reservable"), z.literal("manageable")]).optional(),
        context_codes: z.array(z.string()).optional(),
        include_past_appointments: z.boolean().optional(),
        include: z.array(z.union([z.literal("appointments"), z.literal("child_events"), z.literal("participant_count"), z.literal("reserved_times"), z.literal("all_context_codes")])).optional(),
        page: z.string().optional(),
        per_page: z.number().optional()
    }).optional(),
    url: z.literal("/v1/appointment_groups")
});

export const listAppointmentGroupsResponsesSchema = z.object({
    200: z.unknown()
});

export const createAppointmentGroupDataSchema = z.object({
    body: z.object({
        "appointment_group[context_codes]": z.array(z.string()),
        "appointment_group[description]": z.string().optional(),
        "appointment_group[location_address]": z.string().optional(),
        "appointment_group[location_name]": z.string().optional(),
        "appointment_group[max_appointments_per_participant]": z.number().optional(),
        "appointment_group[min_appointments_per_participant]": z.number().optional(),
        "appointment_group[new_appointments][X]": z.array(z.string()).optional(),
        "appointment_group[participant_visibility]": z.union([z.literal("private"), z.literal("protected")]).optional(),
        "appointment_group[participants_per_appointment]": z.number().optional(),
        "appointment_group[publish]": z.boolean().optional(),
        "appointment_group[sub_context_codes]": z.array(z.string()).optional(),
        "appointment_group[title]": z.string()
    }),
    path: z.never().optional(),
    query: z.never().optional(),
    url: z.literal("/v1/appointment_groups")
});

export const createAppointmentGroupResponsesSchema = z.object({
    200: z.unknown()
});

export const getNextAppointmentDataSchema = z.object({
    body: z.never().optional(),
    path: z.never().optional(),
    query: z.object({
        appointment_group_ids: z.array(z.string()).optional()
    }).optional(),
    url: z.literal("/v1/appointment_groups/next_appointment")
});

export const getNextAppointmentResponsesSchema = z.object({
    200: z.array(calendarEventSchema)
});

export const getNextAppointmentResponseSchema = getNextAppointmentResponsesSchema.shape["keyof GetNextAppointmentResponses"];

export const deleteAppointmentGroupDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        id: z.string()
    }),
    query: z.object({
        cancel_reason: z.string().optional()
    }).optional(),
    url: z.literal("/v1/appointment_groups/{id}")
});

export const deleteAppointmentGroupResponsesSchema = z.object({
    200: z.unknown()
});

export const getSingleAppointmentGroupDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        id: z.string()
    }),
    query: z.object({
        include: z.array(z.union([z.literal("child_events"), z.literal("appointments"), z.literal("all_context_codes")])).optional()
    }).optional(),
    url: z.literal("/v1/appointment_groups/{id}")
});

export const getSingleAppointmentGroupResponsesSchema = z.object({
    200: z.unknown()
});

export const updateAppointmentGroupDataSchema = z.object({
    body: z.object({
        "appointment_group[context_codes]": z.array(z.string()),
        "appointment_group[description]": z.string().optional(),
        "appointment_group[location_address]": z.string().optional(),
        "appointment_group[location_name]": z.string().optional(),
        "appointment_group[max_appointments_per_participant]": z.number().optional(),
        "appointment_group[min_appointments_per_participant]": z.number().optional(),
        "appointment_group[new_appointments][X]": z.array(z.string()).optional(),
        "appointment_group[participant_visibility]": z.union([z.literal("private"), z.literal("protected")]).optional(),
        "appointment_group[participants_per_appointment]": z.number().optional(),
        "appointment_group[publish]": z.boolean().optional(),
        "appointment_group[sub_context_codes]": z.array(z.string()).optional(),
        "appointment_group[title]": z.string().optional()
    }),
    path: z.object({
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/appointment_groups/{id}")
});

export const updateAppointmentGroupResponsesSchema = z.object({
    200: z.unknown()
});

export const listStudentGroupParticipantsDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        id: z.string()
    }),
    query: z.object({
        registration_status: z.union([z.literal("all"), z.literal("registered")]).optional(),
        page: z.string().optional(),
        per_page: z.number().optional()
    }).optional(),
    url: z.literal("/v1/appointment_groups/{id}/groups")
});

export const listStudentGroupParticipantsResponsesSchema = z.object({
    200: z.unknown()
});

export const listUserParticipantsDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        id: z.string()
    }),
    query: z.object({
        registration_status: z.union([z.literal("all"), z.literal("registered")]).optional(),
        page: z.string().optional(),
        per_page: z.number().optional()
    }).optional(),
    url: z.literal("/v1/appointment_groups/{id}/users")
});

export const listUserParticipantsResponsesSchema = z.object({
    200: z.unknown()
});

export const queryByAccountDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        account_id: z.string()
    }),
    query: z.object({
        start_time: z.string().optional(),
        end_time: z.string().optional()
    }).optional(),
    url: z.literal("/v1/audit/authentication/accounts/{account_id}")
});

export const queryByAccountResponsesSchema = z.object({
    200: z.unknown()
});

export const queryByLoginDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        login_id: z.string()
    }),
    query: z.object({
        start_time: z.string().optional(),
        end_time: z.string().optional()
    }).optional(),
    url: z.literal("/v1/audit/authentication/logins/{login_id}")
});

export const queryByLoginResponsesSchema = z.object({
    200: z.unknown()
});

export const queryByUserDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        user_id: z.string()
    }),
    query: z.object({
        start_time: z.string().optional(),
        end_time: z.string().optional()
    }).optional(),
    url: z.literal("/v1/audit/authentication/users/{user_id}")
});

export const queryByUserResponsesSchema = z.object({
    200: z.unknown()
});

export const queryByCourseDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string()
    }),
    query: z.object({
        start_time: z.string().optional(),
        end_time: z.string().optional()
    }).optional(),
    url: z.literal("/v1/audit/course/courses/{course_id}")
});

export const courseEventSchema = z.object({
    created_at: z.string().optional().nullable(),
    event_data: z.string().optional().nullable(),
    event_source: z.string().optional().nullable(),
    event_type: z.string().optional().nullable(),
    id: z.string().optional(),
    links: courseEventLinkSchema.optional()
});

export const queryByCourseResponsesSchema = z.object({
    200: z.array(courseEventSchema)
});

export const queryByAssignmentDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        assignment_id: z.string()
    }),
    query: z.object({
        start_time: z.string().optional(),
        end_time: z.string().optional()
    }).optional(),
    url: z.literal("/v1/audit/grade_change/assignments/{assignment_id}")
});

export const gradeChangeEventSchema = z.object({
    created_at: z.string().optional().nullable(),
    event_type: z.string().optional().nullable(),
    excused_after: z.boolean().optional().nullable(),
    excused_before: z.boolean().optional().nullable(),
    grade_after: z.string().optional().nullable(),
    grade_before: z.string().optional().nullable(),
    graded_anonymously: z.boolean().optional().nullable(),
    id: z.string().optional(),
    links: gradeChangeEventLinksSchema.optional(),
    request_id: z.string().optional().nullable(),
    version_number: z.string().optional().nullable()
});

export const queryByAssignmentResponsesSchema = z.object({
    200: z.array(gradeChangeEventSchema)
});

export const queryByCourseGradeChangeDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string()
    }),
    query: z.object({
        start_time: z.string().optional(),
        end_time: z.string().optional()
    }).optional(),
    url: z.literal("/v1/audit/grade_change/courses/{course_id}")
});

export const queryByCourseGradeChangeResponsesSchema = z.object({
    200: z.array(gradeChangeEventSchema)
});

export const queryByCourseGradeChangeResponseSchema = queryByCourseGradeChangeResponsesSchema.shape["keyof QueryByCourseGradeChangeResponses"];

export const queryByGraderDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        grader_id: z.string()
    }),
    query: z.object({
        start_time: z.string().optional(),
        end_time: z.string().optional()
    }).optional(),
    url: z.literal("/v1/audit/grade_change/graders/{grader_id}")
});

export const queryByGraderResponsesSchema = z.object({
    200: z.array(gradeChangeEventSchema)
});

export const queryByGraderResponseSchema = queryByGraderResponsesSchema.shape["keyof QueryByGraderResponses"];

export const queryByStudentDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        student_id: z.string()
    }),
    query: z.object({
        start_time: z.string().optional(),
        end_time: z.string().optional()
    }).optional(),
    url: z.literal("/v1/audit/grade_change/students/{student_id}")
});

export const queryByStudentResponsesSchema = z.object({
    200: z.array(gradeChangeEventSchema)
});

export const queryByStudentResponseSchema = queryByStudentResponsesSchema.shape["keyof QueryByStudentResponses"];

export const getBrandConfigVariablesThatShouldBeUsedForThisDomainDataSchema = z.object({
    body: z.never().optional(),
    path: z.never().optional(),
    query: z.never().optional(),
    url: z.literal("/v1/brand_variables")
});

export const getBrandConfigVariablesThatShouldBeUsedForThisDomainResponsesSchema = z.object({
    200: z.unknown()
});

export const listCalendarEventsDataSchema = z.object({
    body: z.never().optional(),
    path: z.never().optional(),
    query: z.object({
        type: z.union([z.literal("event"), z.literal("assignment")]).optional(),
        start_date: z.string().optional(),
        end_date: z.string().optional(),
        undated: z.boolean().optional(),
        all_events: z.boolean().optional(),
        context_codes: z.array(z.string()).optional(),
        excludes: z.array(z.array(z.record(z.unknown()))).optional(),
        page: z.string().optional(),
        per_page: z.number().optional()
    }).optional(),
    url: z.literal("/v1/calendar_events")
});

export const listCalendarEventsResponsesSchema = z.object({
    200: z.array(calendarEventSchema)
});

export const listCalendarEventsResponseSchema = listCalendarEventsResponsesSchema.shape["keyof ListCalendarEventsResponses"];

export const createCalendarEventDataSchema = z.object({
    body: z.object({
        "calendar_event[all_day]": z.boolean().optional(),
        "calendar_event[child_event_data][X][context_code]": z.string().optional(),
        "calendar_event[child_event_data][X][end_at]": z.string().optional(),
        "calendar_event[child_event_data][X][start_at]": z.string().optional(),
        "calendar_event[context_code]": z.string(),
        "calendar_event[description]": z.string().optional(),
        "calendar_event[duplicate][append_iterator]": z.boolean().optional(),
        "calendar_event[duplicate][count]": z.number().optional(),
        "calendar_event[duplicate][frequency]": z.union([z.literal("daily"), z.literal("weekly"), z.literal("monthly")]).optional(),
        "calendar_event[duplicate][interval]": z.number().optional(),
        "calendar_event[end_at]": z.string().optional(),
        "calendar_event[location_address]": z.string().optional(),
        "calendar_event[location_name]": z.string().optional(),
        "calendar_event[start_at]": z.string().optional(),
        "calendar_event[time_zone_edited]": z.string().optional(),
        "calendar_event[title]": z.string().optional()
    }),
    path: z.never().optional(),
    query: z.never().optional(),
    url: z.literal("/v1/calendar_events")
});

export const createCalendarEventResponsesSchema = z.object({
    200: z.unknown()
});

export const deleteCalendarEventDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        id: z.string()
    }),
    query: z.object({
        cancel_reason: z.string().optional()
    }).optional(),
    url: z.literal("/v1/calendar_events/{id}")
});

export const deleteCalendarEventResponsesSchema = z.object({
    200: z.unknown()
});

export const getSingleCalendarEventOrAssignmentDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/calendar_events/{id}")
});

export const getSingleCalendarEventOrAssignmentResponsesSchema = z.object({
    200: calendarEventSchema
});

export const getSingleCalendarEventOrAssignmentResponseSchema = getSingleCalendarEventOrAssignmentResponsesSchema.shape["keyof GetSingleCalendarEventOrAssignmentResponses"];

export const updateCalendarEventDataSchema = z.object({
    body: z.object({
        "calendar_event[all_day]": z.boolean().optional(),
        "calendar_event[child_event_data][X][context_code]": z.string().optional(),
        "calendar_event[child_event_data][X][end_at]": z.string().optional(),
        "calendar_event[child_event_data][X][start_at]": z.string().optional(),
        "calendar_event[context_code]": z.string().optional(),
        "calendar_event[description]": z.string().optional(),
        "calendar_event[end_at]": z.string().optional(),
        "calendar_event[location_address]": z.string().optional(),
        "calendar_event[location_name]": z.string().optional(),
        "calendar_event[start_at]": z.string().optional(),
        "calendar_event[time_zone_edited]": z.string().optional(),
        "calendar_event[title]": z.string().optional()
    }).optional(),
    path: z.object({
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/calendar_events/{id}")
});

export const updateCalendarEventResponsesSchema = z.object({
    200: z.unknown()
});

export const reserveTimeSlotDataSchema = z.object({
    body: z.object({
        cancel_existing: z.boolean().optional(),
        comments: z.string().optional(),
        participant_id: z.string().optional()
    }).optional(),
    path: z.object({
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/calendar_events/{id}/reservations")
});

export const reserveTimeSlotResponsesSchema = z.object({
    200: z.unknown()
});

export const reserveTimeSlotParticipantIdDataSchema = z.object({
    body: z.object({
        cancel_existing: z.boolean().optional(),
        comments: z.string().optional()
    }).optional(),
    path: z.object({
        id: z.string(),
        participant_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/calendar_events/{id}/reservations/{participant_id}")
});

export const reserveTimeSlotParticipantIdResponsesSchema = z.object({
    200: z.unknown()
});

export const listMembersOfCollaborationDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        id: z.string()
    }),
    query: z.object({
        include: z.array(z.union([z.literal("collaborator_lti_id"), z.literal("avatar_image_url")])).optional(),
        page: z.string().optional(),
        per_page: z.number().optional()
    }).optional(),
    url: z.literal("/v1/collaborations/{id}/members")
});

export const listMembersOfCollaborationResponsesSchema = z.object({
    200: z.array(collaboratorSchema)
});

export const listMembersOfCollaborationResponseSchema = listMembersOfCollaborationResponsesSchema.shape["keyof ListMembersOfCollaborationResponses"];

export const listOfCommmessagesForUserDataSchema = z.object({
    body: z.never().optional(),
    path: z.never().optional(),
    query: z.object({
        user_id: z.string(),
        start_time: z.string().optional(),
        end_time: z.string().optional(),
        page: z.string().optional(),
        per_page: z.number().optional()
    }),
    url: z.literal("/v1/comm_messages")
});

export const listOfCommmessagesForUserResponsesSchema = z.object({
    200: z.array(commMessageSchema)
});

export const listOfCommmessagesForUserResponseSchema = listOfCommmessagesForUserResponsesSchema.shape["keyof ListOfCommmessagesForUserResponses"];

export const listConversationsDataSchema = z.object({
    body: z.never().optional(),
    path: z.never().optional(),
    query: z.object({
        scope: z.union([z.literal("unread"), z.literal("starred"), z.literal("archived")]).optional(),
        filter: z.array(z.string()).optional(),
        filter_mode: z.union([z.literal("and"), z.literal("or"), z.literal("default or")]).optional(),
        interleave_submissions: z.boolean().optional(),
        include_all_conversation_ids: z.boolean().optional(),
        include: z.array(z.literal("participant_avatars")).optional(),
        page: z.string().optional(),
        per_page: z.number().optional()
    }).optional(),
    url: z.literal("/v1/conversations")
});

export const conversationSchema = z.object({
    audience: z.array(z.number()).optional().nullable(),
    audience_contexts: z.array(z.string()).optional().nullable(),
    avatar_url: z.string().optional().nullable(),
    context_name: z.string().optional().nullable(),
    id: z.number().optional(),
    last_message: z.string().optional().nullable(),
    message_count: z.number().optional().nullable(),
    participants: z.array(conversationParticipantSchema).optional().nullable(),
    private: z.boolean().optional().nullable(),
    properties: z.array(z.string()).optional().nullable(),
    starred: z.boolean().optional().nullable(),
    start_at: z.string().optional().nullable(),
    subject: z.string().optional().nullable(),
    subscribed: z.boolean().optional().nullable(),
    visible: z.boolean().optional().nullable(),
    workflow_state: z.string().optional().nullable()
});

export const listConversationsResponsesSchema = z.object({
    200: z.array(conversationSchema)
});

export const createConversationDataSchema = z.object({
    body: z.object({
        attachment_ids: z.array(z.string()).optional(),
        body: z.string(),
        context_code: z.string().optional(),
        filter: z.array(z.string()).optional(),
        filter_mode: z.union([z.literal("and"), z.literal("or"), z.literal("default or")]).optional(),
        group_conversation: z.boolean().optional(),
        media_comment_id: z.string().optional(),
        media_comment_type: z.union([z.literal("audio"), z.literal("video")]).optional(),
        mode: z.union([z.literal("sync"), z.literal("async")]).optional(),
        recipients: z.array(z.string()),
        scope: z.union([z.literal("unread"), z.literal("starred"), z.literal("archived")]).optional(),
        subject: z.string().optional(),
        user_note: z.boolean().optional()
    }),
    path: z.never().optional(),
    query: z.never().optional(),
    url: z.literal("/v1/conversations")
});

export const createConversationResponsesSchema = z.object({
    200: z.unknown()
});

export const batchUpdateConversationsDataSchema = z.object({
    body: z.object({
        conversation_ids: z.array(z.string()),
        event: z.union([z.literal("mark_as_read"), z.literal("mark_as_unread"), z.literal("star"), z.literal("unstar"), z.literal("archive"), z.literal("destroy")])
    }),
    path: z.never().optional(),
    query: z.never().optional(),
    url: z.literal("/v1/conversations")
});

export const batchUpdateConversationsResponsesSchema = z.object({
    200: progressSchema
});

export const batchUpdateConversationsResponseSchema = batchUpdateConversationsResponsesSchema.shape["keyof BatchUpdateConversationsResponses"];

export const getRunningBatchesDataSchema = z.object({
    body: z.never().optional(),
    path: z.never().optional(),
    query: z.never().optional(),
    url: z.literal("/v1/conversations/batches")
});

export const getRunningBatchesResponsesSchema = z.object({
    200: z.unknown()
});

export const findRecipientsConversationsDataSchema = z.object({
    body: z.never().optional(),
    path: z.never().optional(),
    query: z.object({
        search: z.string().optional(),
        context: z.string().optional(),
        exclude: z.array(z.string()).optional(),
        type: z.union([z.literal("user"), z.literal("context")]).optional(),
        user_id: z.number().optional(),
        from_conversation_id: z.number().optional(),
        permissions: z.array(z.string()).optional()
    }).optional(),
    url: z.literal("/v1/conversations/find_recipients")
});

export const findRecipientsConversationsResponsesSchema = z.object({
    200: z.unknown()
});

export const markAllAsReadDataSchema = z.object({
    body: z.never().optional(),
    path: z.never().optional(),
    query: z.never().optional(),
    url: z.literal("/v1/conversations/mark_all_as_read")
});

export const markAllAsReadResponsesSchema = z.object({
    200: z.unknown()
});

export const unreadCountDataSchema = z.object({
    body: z.never().optional(),
    path: z.never().optional(),
    query: z.never().optional(),
    url: z.literal("/v1/conversations/unread_count")
});

export const unreadCountResponsesSchema = z.object({
    200: z.unknown()
});

export const deleteConversationDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/conversations/{id}")
});

export const deleteConversationResponsesSchema = z.object({
    200: z.unknown()
});

export const getSingleConversationDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        id: z.string()
    }),
    query: z.object({
        interleave_submissions: z.boolean().optional(),
        scope: z.union([z.literal("unread"), z.literal("starred"), z.literal("archived")]).optional(),
        filter: z.array(z.string()).optional(),
        filter_mode: z.union([z.literal("and"), z.literal("or"), z.literal("default or")]).optional(),
        auto_mark_as_read: z.boolean().optional()
    }).optional(),
    url: z.literal("/v1/conversations/{id}")
});

export const getSingleConversationResponsesSchema = z.object({
    200: z.unknown()
});

export const editConversationDataSchema = z.object({
    body: z.object({
        "conversation[starred]": z.boolean().optional(),
        "conversation[subscribed]": z.boolean().optional(),
        "conversation[workflow_state]": z.union([z.literal("read"), z.literal("unread"), z.literal("archived")]).optional(),
        filter: z.array(z.string()).optional(),
        filter_mode: z.union([z.literal("and"), z.literal("or"), z.literal("default or")]).optional(),
        scope: z.union([z.literal("unread"), z.literal("starred"), z.literal("archived")]).optional()
    }).optional(),
    path: z.object({
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/conversations/{id}")
});

export const editConversationResponsesSchema = z.object({
    200: z.unknown()
});

export const addMessageDataSchema = z.object({
    body: z.object({
        attachment_ids: z.array(z.string()).optional(),
        body: z.string(),
        included_messages: z.array(z.string()).optional(),
        media_comment_id: z.string().optional(),
        media_comment_type: z.union([z.literal("audio"), z.literal("video")]).optional(),
        recipients: z.array(z.string()).optional(),
        user_note: z.boolean().optional()
    }),
    path: z.object({
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/conversations/{id}/add_message")
});

export const addMessageResponsesSchema = z.object({
    200: z.unknown()
});

export const addRecipientsDataSchema = z.object({
    body: z.object({
        recipients: z.array(z.string())
    }),
    path: z.object({
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/conversations/{id}/add_recipients")
});

export const addRecipientsResponsesSchema = z.object({
    200: z.unknown()
});

export const deleteMessageDataSchema = z.object({
    body: z.object({
        remove: z.array(z.string())
    }),
    path: z.object({
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/conversations/{id}/remove_messages")
});

export const deleteMessageResponsesSchema = z.object({
    200: z.unknown()
});

export const listAccountsForCourseAdminsDataSchema = z.object({
    body: z.never().optional(),
    path: z.never().optional(),
    query: z.never().optional(),
    url: z.literal("/v1/course_accounts")
});

export const listAccountsForCourseAdminsResponsesSchema = z.object({
    200: z.array(accountSchema)
});

export const listAccountsForCourseAdminsResponseSchema = listAccountsForCourseAdminsResponsesSchema.shape["keyof ListAccountsForCourseAdminsResponses"];

export const listYourCoursesDataSchema = z.object({
    body: z.never().optional(),
    path: z.never().optional(),
    query: z.object({
        page: z.string().optional(),
        per_page: z.number().optional(),
        enrollment_type: z.union([z.literal("teacher"), z.literal("student"), z.literal("ta"), z.literal("observer"), z.literal("designer")]).optional(),
        enrollment_role: z.string().optional(),
        enrollment_role_id: z.number().optional(),
        enrollment_state: z.union([z.literal("active"), z.literal("invited_or_pending"), z.literal("completed")]).optional(),
        exclude_blueprint_courses: z.boolean().optional(),
        include: z.array(z.union([z.literal("needs_grading_count"), z.literal("syllabus_body"), z.literal("public_description"), z.literal("total_scores"), z.literal("current_grading_period_scores"), z.literal("term"), z.literal("account"), z.literal("course_progress"), z.literal("sections"), z.literal("storage_quota_used_mb"), z.literal("total_students"), z.literal("passback_status"), z.literal("favorites"), z.literal("teachers"), z.literal("observed_users"), z.literal("course_image")])).optional(),
        state: z.array(z.union([z.literal("unpublished"), z.literal("available"), z.literal("completed"), z.literal("deleted")])).optional()
    }).optional(),
    url: z.literal("/v1/courses")
});

export const courseActivityStreamDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string()
    }),
    query: z.object({
        page: z.string().optional(),
        per_page: z.number().optional()
    }).optional(),
    url: z.literal("/v1/courses/{course_id}/activity_stream")
});

export const courseActivityStreamResponsesSchema = z.object({
    200: z.unknown()
});

export const courseActivityStreamSummaryDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/activity_stream/summary")
});

export const courseActivityStreamSummaryResponsesSchema = z.object({
    200: z.unknown()
});

export const getCourseLevelParticipationDataDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/analytics/activity")
});

export const getCourseLevelParticipationDataResponsesSchema = z.object({
    200: z.unknown()
});

export const getCourseLevelAssignmentDataDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string()
    }),
    query: z.object({
        async: z.boolean().optional()
    }).optional(),
    url: z.literal("/v1/courses/{course_id}/analytics/assignments")
});

export const getCourseLevelAssignmentDataResponsesSchema = z.object({
    200: z.unknown()
});

export const getCourseLevelStudentSummaryDataDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string()
    }),
    query: z.object({
        sort_column: z.union([z.literal("name"), z.literal("name_descending"), z.literal("score"), z.literal("score_descending"), z.literal("participations"), z.literal("participations_descending"), z.literal("page_views"), z.literal("page_views_descending")]).optional(),
        student_id: z.string().optional()
    }).optional(),
    url: z.literal("/v1/courses/{course_id}/analytics/student_summaries")
});

export const getCourseLevelStudentSummaryDataResponsesSchema = z.object({
    200: z.unknown()
});

export const getUserInACourseLevelParticipationDataDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string(),
        student_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/analytics/users/{student_id}/activity")
});

export const getUserInACourseLevelParticipationDataResponsesSchema = z.object({
    200: z.unknown()
});

export const getUserInACourseLevelAssignmentDataDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string(),
        student_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/analytics/users/{student_id}/assignments")
});

export const getUserInACourseLevelMessagingDataDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string(),
        student_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/analytics/users/{student_id}/communication")
});

export const getUserInACourseLevelMessagingDataResponsesSchema = z.object({
    200: z.unknown()
});

export const listAssignmentGroupsDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string()
    }),
    query: z.object({
        include: z.array(z.union([z.literal("assignments"), z.literal("discussion_topic"), z.literal("all_dates"), z.literal("assignment_visibility"), z.literal("overrides"), z.literal("submission")])).optional(),
        exclude_assignment_submission_types: z.array(z.union([z.literal("online_quiz"), z.literal("discussion_topic"), z.literal("wiki_page"), z.literal("external_tool")])).optional(),
        override_assignment_dates: z.boolean().optional(),
        grading_period_id: z.number().optional(),
        scope_assignments_to_student: z.boolean().optional(),
        page: z.string().optional(),
        per_page: z.number().optional()
    }).optional(),
    url: z.literal("/v1/courses/{course_id}/assignment_groups")
});

export const assignmentGroupSchema = z.object({
    assignments: z.array(z.number()).optional().nullable(),
    group_weight: z.number().optional().nullable(),
    id: z.number().optional().nullable(),
    integration_data: z.record(z.unknown()).optional().nullable(),
    name: z.string().optional().nullable(),
    position: z.number().optional().nullable(),
    rules: gradingRulesSchema.optional(),
    sis_source_id: z.string().optional().nullable()
});

export const listAssignmentGroupsResponsesSchema = z.object({
    200: z.array(assignmentGroupSchema)
});

export const createAssignmentGroupDataSchema = z.object({
    body: z.object({
        group_weight: z.number().optional(),
        integration_data: z.record(z.unknown()).optional(),
        name: z.string().optional(),
        position: z.number().optional(),
        rules: z.string().optional(),
        sis_source_id: z.string().optional()
    }).optional(),
    path: z.object({
        course_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/assignment_groups")
});

export const createAssignmentGroupResponsesSchema = z.object({
    200: assignmentGroupSchema
});

export const createAssignmentGroupResponseSchema = createAssignmentGroupResponsesSchema.shape["keyof CreateAssignmentGroupResponses"];

export const destroyAssignmentGroupDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string(),
        assignment_group_id: z.string()
    }),
    query: z.object({
        move_assignments_to: z.number().optional()
    }).optional(),
    url: z.literal("/v1/courses/{course_id}/assignment_groups/{assignment_group_id}")
});

export const destroyAssignmentGroupResponsesSchema = z.object({
    200: assignmentGroupSchema
});

export const destroyAssignmentGroupResponseSchema = destroyAssignmentGroupResponsesSchema.shape["keyof DestroyAssignmentGroupResponses"];

export const getAssignmentGroupDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string(),
        assignment_group_id: z.string()
    }),
    query: z.object({
        include: z.array(z.union([z.literal("assignments"), z.literal("discussion_topic"), z.literal("assignment_visibility"), z.literal("submission")])).optional(),
        override_assignment_dates: z.boolean().optional(),
        grading_period_id: z.number().optional()
    }).optional(),
    url: z.literal("/v1/courses/{course_id}/assignment_groups/{assignment_group_id}")
});

export const getAssignmentGroupResponsesSchema = z.object({
    200: assignmentGroupSchema
});

export const getAssignmentGroupResponseSchema = getAssignmentGroupResponsesSchema.shape["keyof GetAssignmentGroupResponses"];

export const editAssignmentGroupDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string(),
        assignment_group_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/assignment_groups/{assignment_group_id}")
});

export const editAssignmentGroupResponsesSchema = z.object({
    200: assignmentGroupSchema
});

export const editAssignmentGroupResponseSchema = editAssignmentGroupResponsesSchema.shape["keyof EditAssignmentGroupResponses"];

export const listAssignmentsDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string()
    }),
    query: z.object({
        include: z.array(z.union([z.literal("submission"), z.literal("assignment_visibility"), z.literal("all_dates"), z.literal("overrides"), z.literal("observed_users")])).optional(),
        search_term: z.string().optional(),
        override_assignment_dates: z.boolean().optional(),
        needs_grading_count_by_section: z.boolean().optional(),
        bucket: z.union([z.literal("past"), z.literal("overdue"), z.literal("undated"), z.literal("ungraded"), z.literal("unsubmitted"), z.literal("upcoming"), z.literal("future")]).optional(),
        assignment_ids: z.array(z.string()).optional(),
        order_by: z.union([z.literal("position"), z.literal("name")]).optional(),
        page: z.string().optional(),
        per_page: z.number().optional()
    }).optional(),
    url: z.literal("/v1/courses/{course_id}/assignments")
});

export const createAssignmentDataSchema = z.object({
    body: z.object({
        "assignment[allowed_extensions]": z.array(z.string()).optional(),
        "assignment[assignment_group_id]": z.number().optional(),
        "assignment[assignment_overrides]": z.array(assignmentOverrideSchema).optional(),
        "assignment[automatic_peer_reviews]": z.boolean().optional(),
        "assignment[description]": z.string().optional(),
        "assignment[due_at]": z.string().optional(),
        "assignment[external_tool_tag_attributes]": z.string().optional(),
        "assignment[grade_group_students_individually]": z.number().optional(),
        "assignment[grading_standard_id]": z.number().optional(),
        "assignment[grading_type]": z.union([z.literal("pass_fail"), z.literal("percent"), z.literal("letter_grade"), z.literal("gpa_scale"), z.literal("points")]).optional(),
        "assignment[group_category_id]": z.number().optional(),
        "assignment[integration_data]": z.string().optional(),
        "assignment[integration_id]": z.string().optional(),
        "assignment[lock_at]": z.string().optional(),
        "assignment[moderated_grading]": z.boolean().optional(),
        "assignment[muted]": z.boolean().optional(),
        "assignment[name]": z.string(),
        "assignment[notify_of_update]": z.boolean().optional(),
        "assignment[omit_from_final_grade]": z.boolean().optional(),
        "assignment[only_visible_to_overrides]": z.boolean().optional(),
        "assignment[peer_reviews]": z.boolean().optional(),
        "assignment[points_possible]": z.number().optional(),
        "assignment[position]": z.number().optional(),
        "assignment[published]": z.boolean().optional(),
        "assignment[quiz_lti]": z.boolean().optional(),
        "assignment[submission_types]": z.array(z.union([z.literal("online_quiz"), z.literal("none"), z.literal("on_paper"), z.literal("discussion_topic"), z.literal("external_tool"), z.literal("online_upload"), z.literal("online_text_entry"), z.literal("online_url"), z.literal("media_recording")])).optional(),
        "assignment[turnitin_enabled]": z.boolean().optional(),
        "assignment[turnitin_settings]": z.string().optional(),
        "assignment[unlock_at]": z.string().optional(),
        "assignment[vericite_enabled]": z.boolean().optional()
    }),
    path: z.object({
        course_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/assignments")
});

export const listMultipleAssignmentsGradeableStudentsDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string()
    }),
    query: z.object({
        assignment_ids: z.array(z.string()).optional(),
        page: z.string().optional(),
        per_page: z.number().optional()
    }).optional(),
    url: z.literal("/v1/courses/{course_id}/assignments/gradeable_students")
});

export const listMultipleAssignmentsGradeableStudentsResponsesSchema = z.object({
    200: z.unknown()
});

export const batchRetrieveOverridesInCourseDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string()
    }),
    query: z.object({
        "assignment_overrides[id]": z.array(z.string()),
        "assignment_overrides[assignment_id]": z.array(z.string())
    }),
    url: z.literal("/v1/courses/{course_id}/assignments/overrides")
});

export const batchRetrieveOverridesInCourseResponsesSchema = z.object({
    200: z.array(assignmentOverrideSchema)
});

export const batchRetrieveOverridesInCourseResponseSchema = batchRetrieveOverridesInCourseResponsesSchema.shape["keyof BatchRetrieveOverridesInCourseResponses"];

export const batchCreateOverridesInCourseDataSchema = z.object({
    body: z.object({
        assignment_overrides: z.array(assignmentOverrideSchema)
    }),
    path: z.object({
        course_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/assignments/overrides")
});

export const batchCreateOverridesInCourseResponsesSchema = z.object({
    200: z.array(assignmentOverrideSchema)
});

export const batchCreateOverridesInCourseResponseSchema = batchCreateOverridesInCourseResponsesSchema.shape["keyof BatchCreateOverridesInCourseResponses"];

export const batchUpdateOverridesInCourseDataSchema = z.object({
    body: z.object({
        assignment_overrides: z.array(assignmentOverrideSchema)
    }),
    path: z.object({
        course_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/assignments/overrides")
});

export const batchUpdateOverridesInCourseResponsesSchema = z.object({
    200: z.array(assignmentOverrideSchema)
});

export const batchUpdateOverridesInCourseResponseSchema = batchUpdateOverridesInCourseResponsesSchema.shape["keyof BatchUpdateOverridesInCourseResponses"];

export const showProvisionalGradeStatusForStudentAnonymousDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string(),
        assignment_id: z.string()
    }),
    query: z.object({
        anonymous_id: z.string().optional()
    }).optional(),
    url: z.literal("/v1/courses/{course_id}/assignments/{assignment_id}/anonymous_provisional_grades/status")
});

export const showProvisionalGradeStatusForStudentAnonymousResponsesSchema = z.object({
    200: z.unknown()
});

export const listGradeableStudentsDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string(),
        assignment_id: z.string()
    }),
    query: z.object({
        page: z.number().optional(),
        per_page: z.number().optional()
    }).optional(),
    url: z.literal("/v1/courses/{course_id}/assignments/{assignment_id}/gradeable_students")
});

export const listGradeableStudentsResponsesSchema = z.object({
    200: z.array(userDisplaySchema)
});

export const listGradeableStudentsResponseSchema = listGradeableStudentsResponsesSchema.shape["keyof ListGradeableStudentsResponses"];

export const listStudentsSelectedForModerationDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string(),
        assignment_id: z.string()
    }),
    query: z.object({
        page: z.string().optional(),
        per_page: z.number().optional()
    }).optional(),
    url: z.literal("/v1/courses/{course_id}/assignments/{assignment_id}/moderated_students")
});

export const selectStudentsForModerationDataSchema = z.object({
    body: z.object({
        student_ids: z.array(z.number()).optional()
    }).optional(),
    path: z.object({
        course_id: z.string(),
        assignment_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/assignments/{assignment_id}/moderated_students")
});

export const listAssignmentOverridesDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string(),
        assignment_id: z.string()
    }),
    query: z.object({
        page: z.string().optional(),
        per_page: z.number().optional()
    }).optional(),
    url: z.literal("/v1/courses/{course_id}/assignments/{assignment_id}/overrides")
});

export const listAssignmentOverridesResponsesSchema = z.object({
    200: z.array(assignmentOverrideSchema)
});

export const listAssignmentOverridesResponseSchema = listAssignmentOverridesResponsesSchema.shape["keyof ListAssignmentOverridesResponses"];

export const createAssignmentOverrideDataSchema = z.object({
    body: z.object({
        "assignment_override[course_section_id]": z.number().optional(),
        "assignment_override[due_at]": z.string().optional(),
        "assignment_override[group_id]": z.number().optional(),
        "assignment_override[lock_at]": z.string().optional(),
        "assignment_override[student_ids]": z.array(z.number()).optional(),
        "assignment_override[title]": z.string().optional(),
        "assignment_override[unlock_at]": z.string().optional()
    }).optional(),
    path: z.object({
        course_id: z.string(),
        assignment_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/assignments/{assignment_id}/overrides")
});

export const createAssignmentOverrideResponsesSchema = z.object({
    200: assignmentOverrideSchema
});

export const createAssignmentOverrideResponseSchema = createAssignmentOverrideResponsesSchema.shape["keyof CreateAssignmentOverrideResponses"];

export const deleteAssignmentOverrideDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string(),
        assignment_id: z.string(),
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/assignments/{assignment_id}/overrides/{id}")
});

export const deleteAssignmentOverrideResponsesSchema = z.object({
    200: assignmentOverrideSchema
});

export const deleteAssignmentOverrideResponseSchema = deleteAssignmentOverrideResponsesSchema.shape["keyof DeleteAssignmentOverrideResponses"];

export const getSingleAssignmentOverrideDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string(),
        assignment_id: z.string(),
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/assignments/{assignment_id}/overrides/{id}")
});

export const getSingleAssignmentOverrideResponsesSchema = z.object({
    200: assignmentOverrideSchema
});

export const getSingleAssignmentOverrideResponseSchema = getSingleAssignmentOverrideResponsesSchema.shape["keyof GetSingleAssignmentOverrideResponses"];

export const updateAssignmentOverrideDataSchema = z.object({
    body: z.object({
        "assignment_override[due_at]": z.string().optional(),
        "assignment_override[lock_at]": z.string().optional(),
        "assignment_override[student_ids]": z.array(z.number()).optional(),
        "assignment_override[title]": z.string().optional(),
        "assignment_override[unlock_at]": z.string().optional()
    }).optional(),
    path: z.object({
        course_id: z.string(),
        assignment_id: z.string(),
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/assignments/{assignment_id}/overrides/{id}")
});

export const updateAssignmentOverrideResponsesSchema = z.object({
    200: assignmentOverrideSchema
});

export const updateAssignmentOverrideResponseSchema = updateAssignmentOverrideResponsesSchema.shape["keyof UpdateAssignmentOverrideResponses"];

export const getAllPeerReviewsCoursesPeerReviewsDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string(),
        assignment_id: z.string()
    }),
    query: z.object({
        include: z.array(z.union([z.literal("submission_comments"), z.literal("user")])).optional()
    }).optional(),
    url: z.literal("/v1/courses/{course_id}/assignments/{assignment_id}/peer_reviews")
});

export const getAllPeerReviewsCoursesPeerReviewsResponsesSchema = z.object({
    200: z.array(peerReviewSchema)
});

export const getAllPeerReviewsCoursesPeerReviewsResponseSchema = getAllPeerReviewsCoursesPeerReviewsResponsesSchema.shape["keyof GetAllPeerReviewsCoursesPeerReviewsResponses"];

export const bulkSelectProvisionalGradesDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string(),
        assignment_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/assignments/{assignment_id}/provisional_grades/bulk_select")
});

export const bulkSelectProvisionalGradesResponsesSchema = z.object({
    200: z.unknown()
});

export const publishProvisionalGradesForAssignmentDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string(),
        assignment_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/assignments/{assignment_id}/provisional_grades/publish")
});

export const publishProvisionalGradesForAssignmentResponsesSchema = z.object({
    200: z.unknown()
});

export const showProvisionalGradeStatusForStudentDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string(),
        assignment_id: z.string()
    }),
    query: z.object({
        student_id: z.number().optional()
    }).optional(),
    url: z.literal("/v1/courses/{course_id}/assignments/{assignment_id}/provisional_grades/status")
});

export const showProvisionalGradeStatusForStudentResponsesSchema = z.object({
    200: z.unknown()
});

export const copyProvisionalGradeDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string(),
        assignment_id: z.string(),
        provisional_grade_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/assignments/{assignment_id}/provisional_grades/{provisional_grade_id}/copy_to_final_mark")
});

export const copyProvisionalGradeResponsesSchema = z.object({
    200: provisionalGradeSchema
});

export const copyProvisionalGradeResponseSchema = copyProvisionalGradeResponsesSchema.shape["keyof CopyProvisionalGradeResponses"];

export const selectProvisionalGradeDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string(),
        assignment_id: z.string(),
        provisional_grade_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/assignments/{assignment_id}/provisional_grades/{provisional_grade_id}/select")
});

export const selectProvisionalGradeResponsesSchema = z.object({
    200: z.unknown()
});

export const submissionSummaryCoursesDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string(),
        assignment_id: z.string()
    }),
    query: z.object({
        grouped: z.boolean().optional()
    }).optional(),
    url: z.literal("/v1/courses/{course_id}/assignments/{assignment_id}/submission_summary")
});

export const submissionSummaryCoursesResponsesSchema = z.object({
    200: z.unknown()
});

export const listAssignmentSubmissionsCoursesDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string(),
        assignment_id: z.string()
    }),
    query: z.object({
        include: z.array(z.union([z.literal("submission_history"), z.literal("submission_comments"), z.literal("rubric_assessment"), z.literal("assignment"), z.literal("visibility"), z.literal("course"), z.literal("user"), z.literal("group")])).optional(),
        grouped: z.boolean().optional(),
        page: z.number().optional(),
        per_page: z.number().optional()
    }).optional(),
    url: z.literal("/v1/courses/{course_id}/assignments/{assignment_id}/submissions")
});

export const submitAssignmentCoursesDataSchema = z.object({
    body: z.object({
        "comment[text_comment]": z.string().optional(),
        "submission[body]": z.string().optional(),
        "submission[file_ids]": z.array(z.number()).optional(),
        "submission[media_comment_id]": z.string().optional(),
        "submission[media_comment_type]": z.union([z.literal("audio"), z.literal("video")]).optional(),
        "submission[submission_type]": z.union([z.literal("online_text_entry"), z.literal("online_url"), z.literal("online_upload"), z.literal("media_recording"), z.literal("basic_lti_launch")]),
        "submission[url]": z.string().optional()
    }),
    path: z.object({
        course_id: z.string(),
        assignment_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/assignments/{assignment_id}/submissions")
});

export const submitAssignmentCoursesResponsesSchema = z.object({
    200: z.unknown()
});

export const gradeOrCommentOnMultipleSubmissionsCoursesAssignmentsDataSchema = z.object({
    body: z.object({
        "grade_data[student_id][assignment_id]": z.number().optional(),
        "grade_data[student_id][excuse]": z.boolean().optional(),
        "grade_data[student_id][file_ids]": z.array(z.number()).optional(),
        "grade_data[student_id][group_comment]": z.boolean().optional(),
        "grade_data[student_id][media_comment_id]": z.string().optional(),
        "grade_data[student_id][media_comment_type]": z.union([z.literal("audio"), z.literal("video")]).optional(),
        "grade_data[student_id][posted_grade]": z.string().optional(),
        "grade_data[student_id][rubric_assessment]": z.unknown().optional(),
        "grade_data[student_id][text_comment]": z.string().optional()
    }).optional(),
    path: z.object({
        course_id: z.string(),
        assignment_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/assignments/{assignment_id}/submissions/update_grades")
});

export const gradeOrCommentOnMultipleSubmissionsCoursesAssignmentsResponsesSchema = z.object({
    200: progressSchema
});

export const gradeOrCommentOnMultipleSubmissionsCoursesAssignmentsResponseSchema = gradeOrCommentOnMultipleSubmissionsCoursesAssignmentsResponsesSchema.shape["keyof GradeOrCommentOnMultipleSubmissionsCoursesAssignmentsResponses"];

export const deletePeerReviewCoursesDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string(),
        assignment_id: z.string(),
        submission_id: z.string()
    }),
    query: z.object({
        user_id: z.number()
    }),
    url: z.literal("/v1/courses/{course_id}/assignments/{assignment_id}/submissions/{submission_id}/peer_reviews")
});

export const deletePeerReviewCoursesResponsesSchema = z.object({
    200: peerReviewSchema
});

export const deletePeerReviewCoursesResponseSchema = deletePeerReviewCoursesResponsesSchema.shape["keyof DeletePeerReviewCoursesResponses"];

export const getAllPeerReviewsCoursesSubmissionsDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string(),
        assignment_id: z.string(),
        submission_id: z.string()
    }),
    query: z.object({
        include: z.array(z.union([z.literal("submission_comments"), z.literal("user")])).optional()
    }).optional(),
    url: z.literal("/v1/courses/{course_id}/assignments/{assignment_id}/submissions/{submission_id}/peer_reviews")
});

export const getAllPeerReviewsCoursesSubmissionsResponsesSchema = z.object({
    200: z.array(peerReviewSchema)
});

export const getAllPeerReviewsCoursesSubmissionsResponseSchema = getAllPeerReviewsCoursesSubmissionsResponsesSchema.shape["keyof GetAllPeerReviewsCoursesSubmissionsResponses"];

export const createPeerReviewCoursesDataSchema = z.object({
    body: z.object({
        user_id: z.number()
    }),
    path: z.object({
        course_id: z.string(),
        assignment_id: z.string(),
        submission_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/assignments/{assignment_id}/submissions/{submission_id}/peer_reviews")
});

export const createPeerReviewCoursesResponsesSchema = z.object({
    200: peerReviewSchema
});

export const createPeerReviewCoursesResponseSchema = createPeerReviewCoursesResponsesSchema.shape["keyof CreatePeerReviewCoursesResponses"];

export const getSingleSubmissionCoursesDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string(),
        assignment_id: z.string(),
        user_id: z.string()
    }),
    query: z.object({
        include: z.array(z.union([z.literal("submission_history"), z.literal("submission_comments"), z.literal("rubric_assessment"), z.literal("visibility"), z.literal("course"), z.literal("user")])).optional()
    }).optional(),
    url: z.literal("/v1/courses/{course_id}/assignments/{assignment_id}/submissions/{user_id}")
});

export const gradeOrCommentOnSubmissionCoursesDataSchema = z.object({
    body: z.object({
        "comment[file_ids]": z.array(z.number()).optional(),
        "comment[group_comment]": z.boolean().optional(),
        "comment[media_comment_id]": z.string().optional(),
        "comment[media_comment_type]": z.union([z.literal("audio"), z.literal("video")]).optional(),
        "comment[text_comment]": z.string().optional(),
        "include[visibility]": z.string().optional(),
        rubric_assessment: z.unknown().optional(),
        "submission[excuse]": z.boolean().optional(),
        "submission[late_policy_status]": z.string().optional(),
        "submission[posted_grade]": z.string().optional(),
        "submission[seconds_late_override]": z.number().optional()
    }).optional(),
    path: z.object({
        course_id: z.string(),
        assignment_id: z.string(),
        user_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/assignments/{assignment_id}/submissions/{user_id}")
});

export const uploadFileToSubmissionDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string(),
        assignment_id: z.string(),
        user_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/assignments/{assignment_id}/submissions/{user_id}/comments/files")
});

export const uploadFileToSubmissionResponsesSchema = z.object({
    200: z.unknown()
});

export const uploadFileCoursesDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string(),
        assignment_id: z.string(),
        user_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/assignments/{assignment_id}/submissions/{user_id}/files")
});

export const uploadFileCoursesResponsesSchema = z.object({
    200: z.unknown()
});

export const markSubmissionAsUnreadCoursesDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string(),
        assignment_id: z.string(),
        user_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/assignments/{assignment_id}/submissions/{user_id}/read")
});

export const markSubmissionAsUnreadCoursesResponsesSchema = z.object({
    200: z.unknown()
});

export const markSubmissionAsReadCoursesDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string(),
        assignment_id: z.string(),
        user_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/assignments/{assignment_id}/submissions/{user_id}/read")
});

export const markSubmissionAsReadCoursesResponsesSchema = z.object({
    200: z.unknown()
});

export const deleteAssignmentDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string(),
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/assignments/{id}")
});

export const getSingleAssignmentDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string(),
        id: z.string()
    }),
    query: z.object({
        include: z.array(z.union([z.literal("submission"), z.literal("assignment_visibility"), z.literal("overrides"), z.literal("observed_users")])).optional(),
        override_assignment_dates: z.boolean().optional(),
        needs_grading_count_by_section: z.boolean().optional(),
        all_dates: z.boolean().optional()
    }).optional(),
    url: z.literal("/v1/courses/{course_id}/assignments/{id}")
});

export const editAssignmentDataSchema = z.object({
    body: z.object({
        "assignment[allowed_extensions]": z.array(z.string()).optional(),
        "assignment[assignment_group_id]": z.number().optional(),
        "assignment[assignment_overrides]": z.array(assignmentOverrideSchema).optional(),
        "assignment[automatic_peer_reviews]": z.boolean().optional(),
        "assignment[description]": z.string().optional(),
        "assignment[due_at]": z.string().optional(),
        "assignment[external_tool_tag_attributes]": z.string().optional(),
        "assignment[grade_group_students_individually]": z.number().optional(),
        "assignment[grading_standard_id]": z.number().optional(),
        "assignment[grading_type]": z.union([z.literal("pass_fail"), z.literal("percent"), z.literal("letter_grade"), z.literal("gpa_scale"), z.literal("points")]).optional(),
        "assignment[group_category_id]": z.number().optional(),
        "assignment[integration_data]": z.string().optional(),
        "assignment[integration_id]": z.string().optional(),
        "assignment[lock_at]": z.string().optional(),
        "assignment[moderated_grading]": z.boolean().optional(),
        "assignment[muted]": z.boolean().optional(),
        "assignment[name]": z.string().optional(),
        "assignment[notify_of_update]": z.boolean().optional(),
        "assignment[omit_from_final_grade]": z.boolean().optional(),
        "assignment[only_visible_to_overrides]": z.boolean().optional(),
        "assignment[peer_reviews]": z.boolean().optional(),
        "assignment[points_possible]": z.number().optional(),
        "assignment[position]": z.number().optional(),
        "assignment[published]": z.boolean().optional(),
        "assignment[submission_types]": z.array(z.union([z.literal("online_quiz"), z.literal("none"), z.literal("on_paper"), z.literal("discussion_topic"), z.literal("external_tool"), z.literal("online_upload"), z.literal("online_text_entry"), z.literal("online_url"), z.literal("media_recording")])).optional(),
        "assignment[turnitin_enabled]": z.boolean().optional(),
        "assignment[turnitin_settings]": z.string().optional(),
        "assignment[unlock_at]": z.string().optional(),
        "assignment[vericite_enabled]": z.boolean().optional()
    }).optional(),
    path: z.object({
        course_id: z.string(),
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/assignments/{id}")
});

export const listBlueprintSubscriptionsDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/blueprint_subscriptions")
});

export const listBlueprintSubscriptionsResponsesSchema = z.object({
    200: z.array(blueprintSubscriptionSchema)
});

export const listBlueprintSubscriptionsResponseSchema = listBlueprintSubscriptionsResponsesSchema.shape["keyof ListBlueprintSubscriptionsResponses"];

export const listBlueprintImportsDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string(),
        subscription_id: z.string()
    }),
    query: z.object({
        page: z.string().optional(),
        per_page: z.number().optional()
    }).optional(),
    url: z.literal("/v1/courses/{course_id}/blueprint_subscriptions/{subscription_id}/migrations")
});

export const listBlueprintImportsResponsesSchema = z.object({
    200: z.array(blueprintMigrationSchema)
});

export const listBlueprintImportsResponseSchema = listBlueprintImportsResponsesSchema.shape["keyof ListBlueprintImportsResponses"];

export const showBlueprintImportDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string(),
        subscription_id: z.string(),
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/blueprint_subscriptions/{subscription_id}/migrations/{id}")
});

export const showBlueprintImportResponsesSchema = z.object({
    200: blueprintMigrationSchema
});

export const showBlueprintImportResponseSchema = showBlueprintImportResponsesSchema.shape["keyof ShowBlueprintImportResponses"];

export const getImportDetailsDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string(),
        subscription_id: z.string(),
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/blueprint_subscriptions/{subscription_id}/migrations/{id}/details")
});

export const getImportDetailsResponsesSchema = z.object({
    200: z.array(changeRecordSchema)
});

export const getImportDetailsResponseSchema = getImportDetailsResponsesSchema.shape["keyof GetImportDetailsResponses"];

export const getBlueprintInformationDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string(),
        template_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/blueprint_templates/{template_id}")
});

export const getBlueprintInformationResponsesSchema = z.object({
    200: blueprintTemplateSchema
});

export const getBlueprintInformationResponseSchema = getBlueprintInformationResponsesSchema.shape["keyof GetBlueprintInformationResponses"];

export const getAssociatedCourseInformationDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string(),
        template_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/blueprint_templates/{template_id}/associated_courses")
});

export const listBlueprintMigrationsDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string(),
        template_id: z.string()
    }),
    query: z.object({
        page: z.string().optional(),
        per_page: z.number().optional()
    }).optional(),
    url: z.literal("/v1/courses/{course_id}/blueprint_templates/{template_id}/migrations")
});

export const listBlueprintMigrationsResponsesSchema = z.object({
    200: z.array(blueprintMigrationSchema)
});

export const listBlueprintMigrationsResponseSchema = listBlueprintMigrationsResponsesSchema.shape["keyof ListBlueprintMigrationsResponses"];

export const beginMigrationToPushToAssociatedCoursesDataSchema = z.object({
    body: z.object({
        comment: z.string().optional(),
        copy_settings: z.boolean().optional(),
        send_notification: z.boolean().optional()
    }).optional(),
    path: z.object({
        course_id: z.string(),
        template_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/blueprint_templates/{template_id}/migrations")
});

export const beginMigrationToPushToAssociatedCoursesResponsesSchema = z.object({
    200: blueprintMigrationSchema
});

export const beginMigrationToPushToAssociatedCoursesResponseSchema = beginMigrationToPushToAssociatedCoursesResponsesSchema.shape["keyof BeginMigrationToPushToAssociatedCoursesResponses"];

export const showBlueprintMigrationDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string(),
        template_id: z.string(),
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/blueprint_templates/{template_id}/migrations/{id}")
});

export const showBlueprintMigrationResponsesSchema = z.object({
    200: blueprintMigrationSchema
});

export const showBlueprintMigrationResponseSchema = showBlueprintMigrationResponsesSchema.shape["keyof ShowBlueprintMigrationResponses"];

export const getMigrationDetailsDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string(),
        template_id: z.string(),
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/blueprint_templates/{template_id}/migrations/{id}/details")
});

export const getMigrationDetailsResponsesSchema = z.object({
    200: z.array(changeRecordSchema)
});

export const getMigrationDetailsResponseSchema = getMigrationDetailsResponsesSchema.shape["keyof GetMigrationDetailsResponses"];

export const setOrRemoveRestrictionsOnBlueprintCourseObjectDataSchema = z.object({
    body: z.object({
        content_id: z.number().optional(),
        content_type: z.union([z.literal("assignment"), z.literal("attachment"), z.literal("discussion_topic"), z.literal("external_tool"), z.literal("quiz"), z.literal("wiki_page")]).optional(),
        restricted: z.boolean().optional(),
        restrictions: z.unknown().optional()
    }).optional(),
    path: z.object({
        course_id: z.string(),
        template_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/blueprint_templates/{template_id}/restrict_item")
});

export const setOrRemoveRestrictionsOnBlueprintCourseObjectResponsesSchema = z.object({
    200: z.unknown()
});

export const getUnsyncedChangesDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string(),
        template_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/blueprint_templates/{template_id}/unsynced_changes")
});

export const getUnsyncedChangesResponsesSchema = z.object({
    200: z.array(changeRecordSchema)
});

export const getUnsyncedChangesResponseSchema = getUnsyncedChangesResponsesSchema.shape["keyof GetUnsyncedChangesResponses"];

export const updateAssociatedCoursesDataSchema = z.object({
    body: z.object({
        course_ids_to_add: z.array(z.string()).optional(),
        course_ids_to_remove: z.array(z.string()).optional()
    }).optional(),
    path: z.object({
        course_id: z.string(),
        template_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/blueprint_templates/{template_id}/update_associations")
});

export const updateAssociatedCoursesResponsesSchema = z.object({
    200: z.unknown()
});

export const getCourseTimetableDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/calendar_events/timetable")
});

export const getCourseTimetableResponsesSchema = z.object({
    200: z.unknown()
});

export const setCourseTimetableDataSchema = z.object({
    body: z.object({
        "timetables[course_section_id]": z.array(z.array(z.record(z.unknown()))).optional(),
        "timetables[course_section_id][end_time]": z.array(z.string()).optional(),
        "timetables[course_section_id][location_name]": z.array(z.string()).optional(),
        "timetables[course_section_id][start_time]": z.array(z.string()).optional(),
        "timetables[course_section_id][weekdays]": z.array(z.string()).optional()
    }).optional(),
    path: z.object({
        course_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/calendar_events/timetable")
});

export const setCourseTimetableResponsesSchema = z.object({
    200: z.unknown()
});

export const createOrUpdateEventsDirectlyForCourseTimetableDataSchema = z.object({
    body: z.object({
        course_section_id: z.string().optional(),
        events: z.array(z.array(z.record(z.unknown()))).optional(),
        "events[code]": z.array(z.string()).optional(),
        "events[end_at]": z.array(z.string()).optional(),
        "events[location_name]": z.array(z.string()).optional(),
        "events[start_at]": z.array(z.string()).optional()
    }).optional(),
    path: z.object({
        course_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/calendar_events/timetable_events")
});

export const createOrUpdateEventsDirectlyForCourseTimetableResponsesSchema = z.object({
    200: z.unknown()
});

export const listCollaborationsCoursesDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string()
    }),
    query: z.object({
        page: z.string().optional(),
        per_page: z.number().optional()
    }).optional(),
    url: z.literal("/v1/courses/{course_id}/collaborations")
});

export const listCollaborationsCoursesResponsesSchema = z.object({
    200: z.array(collaborationSchema)
});

export const listCollaborationsCoursesResponseSchema = listCollaborationsCoursesResponsesSchema.shape["keyof ListCollaborationsCoursesResponses"];

export const listConferencesCoursesDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string()
    }),
    query: z.object({
        page: z.string().optional(),
        per_page: z.number().optional()
    }).optional(),
    url: z.literal("/v1/courses/{course_id}/conferences")
});

export const conferenceSchema = z.object({
    conference_key: z.string().optional().nullable(),
    conference_type: z.string().optional().nullable(),
    description: z.string().optional().nullable(),
    duration: z.number().optional().nullable(),
    ended_at: z.string().optional().nullable(),
    has_advanced_settings: z.boolean().optional().nullable(),
    id: z.number().optional(),
    join_url: z.string().optional().nullable(),
    long_running: z.boolean().optional().nullable(),
    recordings: z.array(conferenceRecordingSchema).optional().nullable(),
    started_at: z.string().optional().nullable(),
    title: z.string().optional().nullable(),
    url: z.string().optional().nullable(),
    user_settings: z.record(z.unknown()).optional().nullable(),
    users: z.array(z.number()).optional().nullable()
});

export const listConferencesCoursesResponsesSchema = z.object({
    200: z.array(conferenceSchema)
});

export const listContentExportsCoursesDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string()
    }),
    query: z.object({
        page: z.string().optional(),
        per_page: z.number().optional()
    }).optional(),
    url: z.literal("/v1/courses/{course_id}/content_exports")
});

export const contentExportSchema = z.object({
    attachment: fileNullableSchema.optional(),
    created_at: z.string().optional().nullable(),
    export_type: z.string().optional().nullable(),
    id: z.number().optional(),
    progress_url: z.string().optional().nullable(),
    user_id: z.number().optional().nullable(),
    workflow_state: z.string().optional().nullable()
});

export const listContentExportsCoursesResponsesSchema = z.object({
    200: z.array(contentExportSchema)
});

export const exportContentCoursesDataSchema = z.object({
    body: z.object({
        export_type: z.union([z.literal("common_cartridge"), z.literal("qti"), z.literal("zip")]),
        select: z.union([z.literal("folders"), z.literal("files"), z.literal("attachments"), z.literal("quizzes"), z.literal("assignments"), z.literal("announcements"), z.literal("calendar_events"), z.literal("discussion_topics"), z.literal("modules"), z.literal("module_items"), z.literal("pages"), z.literal("rubrics")]).optional(),
        skip_notifications: z.boolean().optional()
    }),
    path: z.object({
        course_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/content_exports")
});

export const exportContentCoursesResponsesSchema = z.object({
    200: contentExportSchema
});

export const exportContentCoursesResponseSchema = exportContentCoursesResponsesSchema.shape["keyof ExportContentCoursesResponses"];

export const showContentExportCoursesDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string(),
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/content_exports/{id}")
});

export const showContentExportCoursesResponsesSchema = z.object({
    200: contentExportSchema
});

export const showContentExportCoursesResponseSchema = showContentExportCoursesResponsesSchema.shape["keyof ShowContentExportCoursesResponses"];

export const listLicensesCoursesDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string()
    }),
    query: z.object({
        page: z.string().optional(),
        per_page: z.number().optional()
    }).optional(),
    url: z.literal("/v1/courses/{course_id}/content_licenses")
});

export const listLicensesCoursesResponsesSchema = z.object({
    200: z.array(licenseSchema)
});

export const listLicensesCoursesResponseSchema = listLicensesCoursesResponsesSchema.shape["keyof ListLicensesCoursesResponses"];

export const listContentMigrationsCoursesDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string()
    }),
    query: z.object({
        page: z.string().optional(),
        per_page: z.number().optional()
    }).optional(),
    url: z.literal("/v1/courses/{course_id}/content_migrations")
});

export const listContentMigrationsCoursesResponsesSchema = z.object({
    200: z.array(contentMigrationSchema)
});

export const listContentMigrationsCoursesResponseSchema = listContentMigrationsCoursesResponsesSchema.shape["keyof ListContentMigrationsCoursesResponses"];

export const createContentMigrationCoursesDataSchema = z.object({
    body: z.object({
        "date_shift_options[day_substitutions][X]": z.number().optional(),
        "date_shift_options[new_end_date]": z.string().optional(),
        "date_shift_options[new_start_date]": z.string().optional(),
        "date_shift_options[old_end_date]": z.string().optional(),
        "date_shift_options[old_start_date]": z.string().optional(),
        "date_shift_options[remove_dates]": z.boolean().optional(),
        "date_shift_options[shift_dates]": z.boolean().optional(),
        migration_type: z.string(),
        "pre_attachment[name]": z.string().optional(),
        "pre_attachment[todo]": z.string().optional(),
        "settings[file_url]": z.string().optional(),
        "settings[folder_id]": z.string().optional(),
        "settings[overwrite_quizzes]": z.boolean().optional(),
        "settings[question_bank_id]": z.number().optional(),
        "settings[question_bank_name]": z.string().optional(),
        "settings[source_course_id]": z.string().optional()
    }),
    path: z.object({
        course_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/content_migrations")
});

export const createContentMigrationCoursesResponsesSchema = z.object({
    200: contentMigrationSchema
});

export const createContentMigrationCoursesResponseSchema = createContentMigrationCoursesResponsesSchema.shape["keyof CreateContentMigrationCoursesResponses"];

export const listMigrationSystemsCoursesDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/content_migrations/migrators")
});

export const listMigrationSystemsCoursesResponsesSchema = z.object({
    200: z.array(migratorSchema)
});

export const listMigrationSystemsCoursesResponseSchema = listMigrationSystemsCoursesResponsesSchema.shape["keyof ListMigrationSystemsCoursesResponses"];

export const listMigrationIssuesCoursesDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string(),
        content_migration_id: z.string()
    }),
    query: z.object({
        page: z.string().optional(),
        per_page: z.number().optional()
    }).optional(),
    url: z.literal("/v1/courses/{course_id}/content_migrations/{content_migration_id}/migration_issues")
});

export const listMigrationIssuesCoursesResponsesSchema = z.object({
    200: z.array(migrationIssueSchema)
});

export const listMigrationIssuesCoursesResponseSchema = listMigrationIssuesCoursesResponsesSchema.shape["keyof ListMigrationIssuesCoursesResponses"];

export const getMigrationIssueCoursesDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string(),
        content_migration_id: z.string(),
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/content_migrations/{content_migration_id}/migration_issues/{id}")
});

export const getMigrationIssueCoursesResponsesSchema = z.object({
    200: migrationIssueSchema
});

export const getMigrationIssueCoursesResponseSchema = getMigrationIssueCoursesResponsesSchema.shape["keyof GetMigrationIssueCoursesResponses"];

export const updateMigrationIssueCoursesDataSchema = z.object({
    body: z.object({
        workflow_state: z.union([z.literal("active"), z.literal("resolved")])
    }),
    path: z.object({
        course_id: z.string(),
        content_migration_id: z.string(),
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/content_migrations/{content_migration_id}/migration_issues/{id}")
});

export const updateMigrationIssueCoursesResponsesSchema = z.object({
    200: migrationIssueSchema
});

export const updateMigrationIssueCoursesResponseSchema = updateMigrationIssueCoursesResponsesSchema.shape["keyof UpdateMigrationIssueCoursesResponses"];

export const getContentMigrationCoursesDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string(),
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/content_migrations/{id}")
});

export const getContentMigrationCoursesResponsesSchema = z.object({
    200: contentMigrationSchema
});

export const getContentMigrationCoursesResponseSchema = getContentMigrationCoursesResponsesSchema.shape["keyof GetContentMigrationCoursesResponses"];

export const updateContentMigrationCoursesDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string(),
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/content_migrations/{id}")
});

export const updateContentMigrationCoursesResponsesSchema = z.object({
    200: contentMigrationSchema
});

export const updateContentMigrationCoursesResponseSchema = updateContentMigrationCoursesResponsesSchema.shape["keyof UpdateContentMigrationCoursesResponses"];

export const copyCourseContentDataSchema = z.object({
    body: z.object({
        except: z.array(z.union([z.literal("course_settings"), z.literal("assignments"), z.literal("external_tools"), z.literal("files"), z.literal("topics"), z.literal("calendar_events"), z.literal("quizzes"), z.literal("wiki_pages"), z.literal("modules"), z.literal("outcomes")])).optional(),
        only: z.array(z.union([z.literal("course_settings"), z.literal("assignments"), z.literal("external_tools"), z.literal("files"), z.literal("topics"), z.literal("calendar_events"), z.literal("quizzes"), z.literal("wiki_pages"), z.literal("modules"), z.literal("outcomes")])).optional(),
        source_course: z.string().optional()
    }).optional(),
    path: z.object({
        course_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/course_copy")
});

export const copyCourseContentResponsesSchema = z.object({
    200: z.unknown()
});

export const getCourseCopyStatusDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string(),
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/course_copy/{id}")
});

export const getCourseCopyStatusResponsesSchema = z.object({
    200: z.unknown()
});

export const bulkUpdateColumnDataDataSchema = z.object({
    body: z.object({
        column_data: z.array(z.array(z.record(z.unknown())))
    }),
    path: z.object({
        course_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/custom_gradebook_column_data")
});

export const bulkUpdateColumnDataResponsesSchema = z.object({
    200: progressSchema
});

export const bulkUpdateColumnDataResponseSchema = bulkUpdateColumnDataResponsesSchema.shape["keyof BulkUpdateColumnDataResponses"];

export const listCustomGradebookColumnsDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string()
    }),
    query: z.object({
        include_hidden: z.boolean().optional(),
        page: z.string().optional(),
        per_page: z.number().optional()
    }).optional(),
    url: z.literal("/v1/courses/{course_id}/custom_gradebook_columns")
});

export const listCustomGradebookColumnsResponsesSchema = z.object({
    200: z.array(customColumnSchema)
});

export const listCustomGradebookColumnsResponseSchema = listCustomGradebookColumnsResponsesSchema.shape["keyof ListCustomGradebookColumnsResponses"];

export const createCustomGradebookColumnDataSchema = z.object({
    body: z.object({
        "column[hidden]": z.boolean().optional(),
        "column[position]": z.number().optional(),
        "column[read_only]": z.boolean().optional(),
        "column[teacher_notes]": z.boolean().optional(),
        "column[title]": z.string()
    }),
    path: z.object({
        course_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/custom_gradebook_columns")
});

export const createCustomGradebookColumnResponsesSchema = z.object({
    200: customColumnSchema
});

export const createCustomGradebookColumnResponseSchema = createCustomGradebookColumnResponsesSchema.shape["keyof CreateCustomGradebookColumnResponses"];

export const reorderCustomColumnsDataSchema = z.object({
    body: z.object({
        order: z.array(z.number())
    }),
    path: z.object({
        course_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/custom_gradebook_columns/reorder")
});

export const reorderCustomColumnsResponsesSchema = z.object({
    200: z.unknown()
});

export const deleteCustomGradebookColumnDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string(),
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/custom_gradebook_columns/{id}")
});

export const deleteCustomGradebookColumnResponsesSchema = z.object({
    200: customColumnSchema
});

export const deleteCustomGradebookColumnResponseSchema = deleteCustomGradebookColumnResponsesSchema.shape["keyof DeleteCustomGradebookColumnResponses"];

export const updateCustomGradebookColumnDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string(),
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/custom_gradebook_columns/{id}")
});

export const updateCustomGradebookColumnResponsesSchema = z.object({
    200: customColumnSchema
});

export const updateCustomGradebookColumnResponseSchema = updateCustomGradebookColumnResponsesSchema.shape["keyof UpdateCustomGradebookColumnResponses"];

export const listEntriesForColumnDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string(),
        id: z.string()
    }),
    query: z.object({
        include_hidden: z.boolean().optional()
    }).optional(),
    url: z.literal("/v1/courses/{course_id}/custom_gradebook_columns/{id}/data")
});

export const listEntriesForColumnResponsesSchema = z.object({
    200: z.array(columnDatumSchema)
});

export const listEntriesForColumnResponseSchema = listEntriesForColumnResponsesSchema.shape["keyof ListEntriesForColumnResponses"];

export const updateColumnDataDataSchema = z.object({
    body: z.object({
        "column_data[content]": z.string()
    }),
    path: z.object({
        course_id: z.string(),
        id: z.string(),
        user_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/custom_gradebook_columns/{id}/data/{user_id}")
});

export const updateColumnDataResponsesSchema = z.object({
    200: columnDatumSchema
});

export const updateColumnDataResponseSchema = updateColumnDataResponsesSchema.shape["keyof UpdateColumnDataResponses"];

export const createToolFromToolconfigurationCoursesDataSchema = z.object({
    body: z.object({
        account_id: z.string().optional()
    }).optional(),
    path: z.object({
        course_id: z.string(),
        developer_key_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/developer_keys/{developer_key_id}/create_tool")
});

export const createToolFromToolconfigurationCoursesResponsesSchema = z.object({
    200: contextExternalToolSchema
});

export const createToolFromToolconfigurationCoursesResponseSchema = createToolFromToolconfigurationCoursesResponsesSchema.shape["keyof CreateToolFromToolconfigurationCoursesResponses"];

export const listDiscussionTopicsCoursesDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string()
    }),
    query: z.object({
        include: z.array(z.union([z.literal("all_dates"), z.literal("sections"), z.literal("sections_user_count"), z.literal("overrides")])).optional(),
        order_by: z.union([z.literal("position"), z.literal("recent_activity"), z.literal("title")]).optional(),
        scope: z.union([z.literal("locked"), z.literal("unlocked"), z.literal("pinned"), z.literal("unpinned")]).optional(),
        only_announcements: z.boolean().optional(),
        filter_by: z.union([z.literal("all"), z.literal("unread")]).optional(),
        search_term: z.string().optional(),
        exclude_context_module_locked_topics: z.boolean().optional(),
        page: z.string().optional(),
        per_page: z.number().optional()
    }).optional(),
    url: z.literal("/v1/courses/{course_id}/discussion_topics")
});

export const listDiscussionTopicsCoursesResponsesSchema = z.object({
    200: z.array(discussionTopicSchema)
});

export const listDiscussionTopicsCoursesResponseSchema = listDiscussionTopicsCoursesResponsesSchema.shape["keyof ListDiscussionTopicsCoursesResponses"];

export const createNewDiscussionTopicCoursesResponsesSchema = z.object({
    200: z.unknown()
});

export const reorderPinnedTopicsCoursesDataSchema = z.object({
    body: z.object({
        order: z.array(z.number())
    }),
    path: z.object({
        course_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/discussion_topics/reorder")
});

export const reorderPinnedTopicsCoursesResponsesSchema = z.object({
    200: z.unknown()
});

export const deleteTopicCoursesDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string(),
        topic_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/discussion_topics/{topic_id}")
});

export const deleteTopicCoursesResponsesSchema = z.object({
    200: z.unknown()
});

export const getSingleTopicCoursesDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string(),
        topic_id: z.string()
    }),
    query: z.object({
        include: z.array(z.union([z.literal("all_dates"), z.literal("sections"), z.literal("sections_user_count"), z.literal("overrides")])).optional()
    }).optional(),
    url: z.literal("/v1/courses/{course_id}/discussion_topics/{topic_id}")
});

export const getSingleTopicCoursesResponsesSchema = z.object({
    200: z.unknown()
});

export const updateTopicCoursesDataSchema = z.object({
    body: z.object({
        allow_rating: z.boolean().optional(),
        assignment: z.unknown().optional(),
        delayed_post_at: z.string().optional(),
        discussion_type: z.union([z.literal("side_comment"), z.literal("threaded")]).optional(),
        group_category_id: z.number().optional(),
        is_announcement: z.boolean().optional(),
        lock_at: z.string().optional(),
        message: z.string().optional(),
        only_graders_can_rate: z.boolean().optional(),
        pinned: z.boolean().optional(),
        podcast_enabled: z.boolean().optional(),
        podcast_has_student_posts: z.boolean().optional(),
        position_after: z.string().optional(),
        published: z.boolean().optional(),
        require_initial_post: z.boolean().optional(),
        sort_by_rating: z.boolean().optional(),
        specific_sections: z.string().optional(),
        title: z.string().optional()
    }).optional(),
    path: z.object({
        course_id: z.string(),
        topic_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/discussion_topics/{topic_id}")
});

export const updateTopicCoursesResponsesSchema = z.object({
    200: z.unknown()
});

export const listTopicEntriesCoursesDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string(),
        topic_id: z.string()
    }),
    query: z.object({
        page: z.string().optional(),
        per_page: z.number().optional()
    }).optional(),
    url: z.literal("/v1/courses/{course_id}/discussion_topics/{topic_id}/entries")
});

export const listTopicEntriesCoursesResponsesSchema = z.object({
    200: z.unknown()
});

export const postEntryCoursesDataSchema = z.object({
    body: z.object({
        attachment: z.string().optional(),
        message: z.string().optional()
    }).optional(),
    path: z.object({
        course_id: z.string(),
        topic_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/discussion_topics/{topic_id}/entries")
});

export const postEntryCoursesResponsesSchema = z.object({
    200: z.unknown()
});

export const rateEntryCoursesDataSchema = z.object({
    body: z.object({
        rating: z.number().optional()
    }).optional(),
    path: z.object({
        course_id: z.string(),
        topic_id: z.string(),
        entry_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/discussion_topics/{topic_id}/entries/{entry_id}/rating")
});

export const rateEntryCoursesResponsesSchema = z.object({
    200: z.unknown()
});

export const markEntryAsUnreadCoursesDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string(),
        topic_id: z.string(),
        entry_id: z.string()
    }),
    query: z.object({
        forced_read_state: z.boolean().optional()
    }).optional(),
    url: z.literal("/v1/courses/{course_id}/discussion_topics/{topic_id}/entries/{entry_id}/read")
});

export const markEntryAsUnreadCoursesResponsesSchema = z.object({
    200: z.unknown()
});

export const markEntryAsReadCoursesDataSchema = z.object({
    body: z.object({
        forced_read_state: z.boolean().optional()
    }).optional(),
    path: z.object({
        course_id: z.string(),
        topic_id: z.string(),
        entry_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/discussion_topics/{topic_id}/entries/{entry_id}/read")
});

export const markEntryAsReadCoursesResponsesSchema = z.object({
    200: z.unknown()
});

export const listEntryRepliesCoursesDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string(),
        topic_id: z.string(),
        entry_id: z.string()
    }),
    query: z.object({
        page: z.string().optional(),
        per_page: z.number().optional()
    }).optional(),
    url: z.literal("/v1/courses/{course_id}/discussion_topics/{topic_id}/entries/{entry_id}/replies")
});

export const listEntryRepliesCoursesResponsesSchema = z.object({
    200: z.unknown()
});

export const postReplyCoursesDataSchema = z.object({
    body: z.object({
        attachment: z.string().optional(),
        message: z.string().optional()
    }).optional(),
    path: z.object({
        course_id: z.string(),
        topic_id: z.string(),
        entry_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/discussion_topics/{topic_id}/entries/{entry_id}/replies")
});

export const postReplyCoursesResponsesSchema = z.object({
    200: z.unknown()
});

export const deleteEntryCoursesDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string(),
        topic_id: z.string(),
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/discussion_topics/{topic_id}/entries/{id}")
});

export const deleteEntryCoursesResponsesSchema = z.object({
    200: z.unknown()
});

export const updateEntryCoursesDataSchema = z.object({
    body: z.object({
        message: z.string().optional()
    }).optional(),
    path: z.object({
        course_id: z.string(),
        topic_id: z.string(),
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/discussion_topics/{topic_id}/entries/{id}")
});

export const updateEntryCoursesResponsesSchema = z.object({
    200: z.unknown()
});

export const listEntriesCoursesDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string(),
        topic_id: z.string()
    }),
    query: z.object({
        ids: z.array(z.string()).optional(),
        page: z.string().optional(),
        per_page: z.number().optional()
    }).optional(),
    url: z.literal("/v1/courses/{course_id}/discussion_topics/{topic_id}/entry_list")
});

export const listEntriesCoursesResponsesSchema = z.object({
    200: z.unknown()
});

export const markTopicAsUnreadCoursesDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string(),
        topic_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/discussion_topics/{topic_id}/read")
});

export const markTopicAsUnreadCoursesResponsesSchema = z.object({
    200: z.unknown()
});

export const markTopicAsReadCoursesDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string(),
        topic_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/discussion_topics/{topic_id}/read")
});

export const markTopicAsReadCoursesResponsesSchema = z.object({
    200: z.unknown()
});

export const markAllEntriesAsUnreadCoursesDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string(),
        topic_id: z.string()
    }),
    query: z.object({
        forced_read_state: z.boolean().optional()
    }).optional(),
    url: z.literal("/v1/courses/{course_id}/discussion_topics/{topic_id}/read_all")
});

export const markAllEntriesAsUnreadCoursesResponsesSchema = z.object({
    200: z.unknown()
});

export const markAllEntriesAsReadCoursesDataSchema = z.object({
    body: z.object({
        forced_read_state: z.boolean().optional()
    }).optional(),
    path: z.object({
        course_id: z.string(),
        topic_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/discussion_topics/{topic_id}/read_all")
});

export const markAllEntriesAsReadCoursesResponsesSchema = z.object({
    200: z.unknown()
});

export const unsubscribeFromTopicCoursesDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string(),
        topic_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/discussion_topics/{topic_id}/subscribed")
});

export const unsubscribeFromTopicCoursesResponsesSchema = z.object({
    200: z.unknown()
});

export const subscribeToTopicCoursesDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string(),
        topic_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/discussion_topics/{topic_id}/subscribed")
});

export const subscribeToTopicCoursesResponsesSchema = z.object({
    200: z.unknown()
});

export const getFullTopicCoursesDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string(),
        topic_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/discussion_topics/{topic_id}/view")
});

export const getFullTopicCoursesResponsesSchema = z.object({
    200: z.unknown()
});

export const getEffectiveDueDatesDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string()
    }),
    query: z.object({
        assignment_ids: z.array(z.string()).optional()
    }).optional(),
    url: z.literal("/v1/courses/{course_id}/effective_due_dates")
});

export const getEffectiveDueDatesResponsesSchema = z.object({
    200: z.unknown()
});

export const listEnrollmentsCoursesDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string()
    }),
    query: z.object({
        page: z.string().optional(),
        per_page: z.number().optional(),
        type: z.array(z.string()).optional(),
        role: z.array(z.string()).optional(),
        state: z.array(z.union([z.literal("active"), z.literal("invited"), z.literal("creation_pending"), z.literal("deleted"), z.literal("rejected"), z.literal("completed"), z.literal("inactive")])).optional(),
        include: z.array(z.union([z.literal("avatar_url"), z.literal("group_ids"), z.literal("locked"), z.literal("observed_users"), z.literal("can_be_removed")])).optional(),
        user_id: z.string().optional(),
        grading_period_id: z.number().optional(),
        enrollment_term_id: z.number().optional(),
        sis_account_id: z.array(z.string()).optional(),
        sis_course_id: z.array(z.string()).optional(),
        sis_section_id: z.array(z.string()).optional(),
        sis_user_id: z.array(z.string()).optional()
    }).optional(),
    url: z.literal("/v1/courses/{course_id}/enrollments")
});

export const enrollUserCoursesDataSchema = z.object({
    body: z.object({
        "enrollment[associated_user_id]": z.number().optional(),
        "enrollment[course_section_id]": z.number().optional(),
        "enrollment[enrollment_state]": z.union([z.literal("active"), z.literal("invited"), z.literal("inactive")]).optional(),
        "enrollment[limit_privileges_to_course_section]": z.boolean().optional(),
        "enrollment[notify]": z.boolean().optional(),
        "enrollment[role]": z.unknown().optional(),
        "enrollment[role_id]": z.number().optional(),
        "enrollment[self_enrolled]": z.boolean().optional(),
        "enrollment[self_enrollment_code]": z.string().optional(),
        "enrollment[type]": z.union([z.literal("StudentEnrollment"), z.literal("TeacherEnrollment"), z.literal("TaEnrollment"), z.literal("ObserverEnrollment"), z.literal("DesignerEnrollment")]),
        "enrollment[user_id]": z.string()
    }),
    path: z.object({
        course_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/enrollments")
});

export const concludeDeactivateOrDeleteEnrollmentDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string(),
        id: z.string()
    }),
    query: z.object({
        task: z.union([z.literal("conclude"), z.literal("delete"), z.literal("inactivate"), z.literal("deactivate")]).optional()
    }).optional(),
    url: z.literal("/v1/courses/{course_id}/enrollments/{id}")
});

export const acceptCourseInvitationDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string(),
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/enrollments/{id}/accept")
});

export const acceptCourseInvitationResponsesSchema = z.object({
    200: z.unknown()
});

export const reActivateEnrollmentDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string(),
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/enrollments/{id}/reactivate")
});

export const rejectCourseInvitationDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string(),
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/enrollments/{id}/reject")
});

export const rejectCourseInvitationResponsesSchema = z.object({
    200: z.unknown()
});

export const createEpubExportDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/epub_exports")
});

export const createEpubExportResponsesSchema = z.object({
    200: epubExportSchema
});

export const createEpubExportResponseSchema = createEpubExportResponsesSchema.shape["keyof CreateEpubExportResponses"];

export const showEpubExportDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string(),
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/epub_exports/{id}")
});

export const showEpubExportResponsesSchema = z.object({
    200: epubExportSchema
});

export const showEpubExportResponseSchema = showEpubExportResponsesSchema.shape["keyof ShowEpubExportResponses"];

export const listExternalFeedsCoursesDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string()
    }),
    query: z.object({
        page: z.string().optional(),
        per_page: z.number().optional()
    }).optional(),
    url: z.literal("/v1/courses/{course_id}/external_feeds")
});

export const listExternalFeedsCoursesResponsesSchema = z.object({
    200: z.array(externalFeedSchema)
});

export const listExternalFeedsCoursesResponseSchema = listExternalFeedsCoursesResponsesSchema.shape["keyof ListExternalFeedsCoursesResponses"];

export const createExternalFeedCoursesDataSchema = z.object({
    body: z.object({
        header_match: z.boolean().optional(),
        url: z.string(),
        verbosity: z.union([z.literal("full"), z.literal("truncate"), z.literal("link_only")]).optional()
    }),
    path: z.object({
        course_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/external_feeds")
});

export const createExternalFeedCoursesResponsesSchema = z.object({
    200: externalFeedSchema
});

export const createExternalFeedCoursesResponseSchema = createExternalFeedCoursesResponsesSchema.shape["keyof CreateExternalFeedCoursesResponses"];

export const deleteExternalFeedCoursesDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string(),
        external_feed_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/external_feeds/{external_feed_id}")
});

export const deleteExternalFeedCoursesResponsesSchema = z.object({
    200: externalFeedSchema
});

export const deleteExternalFeedCoursesResponseSchema = deleteExternalFeedCoursesResponsesSchema.shape["keyof DeleteExternalFeedCoursesResponses"];

export const listExternalToolsCoursesDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string()
    }),
    query: z.object({
        search_term: z.string().optional(),
        selectable: z.boolean().optional(),
        include_parents: z.boolean().optional(),
        page: z.string().optional(),
        per_page: z.number().optional()
    }).optional(),
    url: z.literal("/v1/courses/{course_id}/external_tools")
});

export const listExternalToolsCoursesResponsesSchema = z.object({
    200: z.unknown()
});

export const createExternalToolCoursesDataSchema = z.object({
    body: z.object({
        "account_navigation[display_type]": z.string().optional(),
        "account_navigation[enabled]": z.boolean().optional(),
        "account_navigation[selection_height]": z.string().optional(),
        "account_navigation[selection_width]": z.string().optional(),
        "account_navigation[text]": z.string().optional(),
        "account_navigation[url]": z.string().optional(),
        config_type: z.string().optional(),
        config_url: z.string().optional(),
        config_xml: z.string().optional(),
        consumer_key: z.string(),
        "course_home_sub_navigation[enabled]": z.boolean().optional(),
        "course_home_sub_navigation[icon_url]": z.string().optional(),
        "course_home_sub_navigation[text]": z.string().optional(),
        "course_home_sub_navigation[url]": z.string().optional(),
        "course_navigation[default]": z.boolean().optional(),
        "course_navigation[display_type]": z.string().optional(),
        "course_navigation[enabled]": z.boolean().optional(),
        "course_navigation[text]": z.string().optional(),
        "course_navigation[visibility]": z.union([z.literal("admins"), z.literal("members")]).optional(),
        "course_navigation[windowTarget]": z.union([z.literal("_blank"), z.literal("_self")]).optional(),
        "custom_fields[field_name]": z.string().optional(),
        description: z.string().optional(),
        domain: z.string().optional(),
        "editor_button[enabled]": z.boolean().optional(),
        "editor_button[icon_url]": z.string().optional(),
        "editor_button[message_type]": z.string().optional(),
        "editor_button[selection_height]": z.string().optional(),
        "editor_button[selection_width]": z.string().optional(),
        "editor_button[url]": z.string().optional(),
        "homework_submission[enabled]": z.boolean().optional(),
        "homework_submission[message_type]": z.string().optional(),
        "homework_submission[text]": z.string().optional(),
        "homework_submission[url]": z.string().optional(),
        icon_url: z.string().optional(),
        "link_selection[enabled]": z.boolean().optional(),
        "link_selection[message_type]": z.string().optional(),
        "link_selection[text]": z.string().optional(),
        "link_selection[url]": z.string().optional(),
        "migration_selection[enabled]": z.boolean().optional(),
        "migration_selection[message_type]": z.string().optional(),
        "migration_selection[url]": z.string().optional(),
        name: z.string(),
        not_selectable: z.boolean().optional(),
        oauth_compliant: z.boolean().optional(),
        privacy_level: z.union([z.literal("anonymous"), z.literal("name_only"), z.literal("public")]),
        "resource_selection[enabled]": z.boolean().optional(),
        "resource_selection[icon_url]": z.string().optional(),
        "resource_selection[selection_height]": z.string().optional(),
        "resource_selection[selection_width]": z.string().optional(),
        "resource_selection[url]": z.string().optional(),
        shared_secret: z.string(),
        text: z.string().optional(),
        "tool_configuration[enabled]": z.boolean().optional(),
        "tool_configuration[message_type]": z.string().optional(),
        "tool_configuration[prefer_sis_email]": z.boolean().optional(),
        "tool_configuration[url]": z.string().optional(),
        url: z.string().optional(),
        "user_navigation[enabled]": z.boolean().optional(),
        "user_navigation[text]": z.string().optional(),
        "user_navigation[url]": z.string().optional(),
        "user_navigation[visibility]": z.union([z.literal("admins"), z.literal("members"), z.literal("public")]).optional()
    }),
    path: z.object({
        course_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/external_tools")
});

export const createExternalToolCoursesResponsesSchema = z.object({
    200: z.unknown()
});

export const getSessionlessLaunchUrlForExternalToolCoursesDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string()
    }),
    query: z.object({
        id: z.string().optional(),
        url: z.string().optional(),
        assignment_id: z.string().optional(),
        module_item_id: z.string().optional(),
        launch_type: z.union([z.literal("assessment"), z.literal("module_item")]).optional()
    }).optional(),
    url: z.literal("/v1/courses/{course_id}/external_tools/sessionless_launch")
});

export const getSessionlessLaunchUrlForExternalToolCoursesResponsesSchema = z.object({
    200: z.unknown()
});

export const deleteExternalToolCoursesDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string(),
        external_tool_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/external_tools/{external_tool_id}")
});

export const deleteExternalToolCoursesResponsesSchema = z.object({
    200: z.unknown()
});

export const getSingleExternalToolCoursesDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string(),
        external_tool_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/external_tools/{external_tool_id}")
});

export const getSingleExternalToolCoursesResponsesSchema = z.object({
    200: z.unknown()
});

export const editExternalToolCoursesDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string(),
        external_tool_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/external_tools/{external_tool_id}")
});

export const editExternalToolCoursesResponsesSchema = z.object({
    200: z.unknown()
});

export const listFeaturesCoursesDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string()
    }),
    query: z.object({
        page: z.string().optional(),
        per_page: z.number().optional()
    }).optional(),
    url: z.literal("/v1/courses/{course_id}/features")
});

export const listFeaturesCoursesResponsesSchema = z.object({
    200: z.array(featureSchema)
});

export const listFeaturesCoursesResponseSchema = listFeaturesCoursesResponsesSchema.shape["keyof ListFeaturesCoursesResponses"];

export const listEnabledFeaturesCoursesDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string()
    }),
    query: z.object({
        page: z.string().optional(),
        per_page: z.number().optional()
    }).optional(),
    url: z.literal("/v1/courses/{course_id}/features/enabled")
});

export const listEnabledFeaturesCoursesResponsesSchema = z.object({
    200: z.unknown()
});

export const removeFeatureFlagCoursesDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string(),
        feature: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/features/flags/{feature}")
});

export const removeFeatureFlagCoursesResponsesSchema = z.object({
    200: featureFlagSchema
});

export const removeFeatureFlagCoursesResponseSchema = removeFeatureFlagCoursesResponsesSchema.shape["keyof RemoveFeatureFlagCoursesResponses"];

export const getFeatureFlagCoursesDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string(),
        feature: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/features/flags/{feature}")
});

export const getFeatureFlagCoursesResponsesSchema = z.object({
    200: featureFlagSchema
});

export const getFeatureFlagCoursesResponseSchema = getFeatureFlagCoursesResponsesSchema.shape["keyof GetFeatureFlagCoursesResponses"];

export const setFeatureFlagCoursesDataSchema = z.object({
    body: z.object({
        state: z.union([z.literal(false), z.literal("allowed"), z.literal(true)]).optional()
    }).optional(),
    path: z.object({
        course_id: z.string(),
        feature: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/features/flags/{feature}")
});

export const setFeatureFlagCoursesResponsesSchema = z.object({
    200: featureFlagSchema
});

export const setFeatureFlagCoursesResponseSchema = setFeatureFlagCoursesResponsesSchema.shape["keyof SetFeatureFlagCoursesResponses"];

export const listFilesCoursesDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string()
    }),
    query: z.object({
        content_types: z.array(z.string()).optional(),
        search_term: z.string().optional(),
        include: z.array(z.literal("user")).optional(),
        only: z.array(z.array(z.record(z.unknown()))).optional(),
        sort: z.union([z.literal("name"), z.literal("size"), z.literal("created_at"), z.literal("updated_at"), z.literal("content_type"), z.literal("user")]).optional(),
        order: z.union([z.literal("asc"), z.literal("desc")]).optional(),
        page: z.string().optional(),
        per_page: z.number().optional()
    }).optional(),
    url: z.literal("/v1/courses/{course_id}/files")
});

export const listFilesCoursesResponsesSchema = z.object({
    200: z.array(fileSchema)
});

export const listFilesCoursesResponseSchema = listFilesCoursesResponsesSchema.shape["keyof ListFilesCoursesResponses"];

export const getQuotaInformationCoursesDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/files/quota")
});

export const getQuotaInformationCoursesResponsesSchema = z.object({
    200: z.unknown()
});

export const getFileCoursesDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string(),
        id: z.string()
    }),
    query: z.object({
        include: z.array(z.literal("user")).optional()
    }).optional(),
    url: z.literal("/v1/courses/{course_id}/files/{id}")
});

export const getFileCoursesResponsesSchema = z.object({
    200: fileSchema
});

export const getFileCoursesResponseSchema = getFileCoursesResponsesSchema.shape["keyof GetFileCoursesResponses"];

export const listAllFoldersCoursesDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string()
    }),
    query: z.object({
        page: z.string().optional(),
        per_page: z.number().optional()
    }).optional(),
    url: z.literal("/v1/courses/{course_id}/folders")
});

export const listAllFoldersCoursesResponsesSchema = z.object({
    200: z.array(folderSchema)
});

export const listAllFoldersCoursesResponseSchema = listAllFoldersCoursesResponsesSchema.shape["keyof ListAllFoldersCoursesResponses"];

export const createFolderCoursesDataSchema = z.object({
    body: z.object({
        hidden: z.boolean().optional(),
        lock_at: z.string().optional(),
        locked: z.boolean().optional(),
        name: z.string(),
        parent_folder_id: z.string().optional(),
        parent_folder_path: z.string().optional(),
        position: z.number().optional(),
        unlock_at: z.string().optional()
    }),
    path: z.object({
        course_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/folders")
});

export const createFolderCoursesResponsesSchema = z.object({
    200: folderSchema
});

export const createFolderCoursesResponseSchema = createFolderCoursesResponsesSchema.shape["keyof CreateFolderCoursesResponses"];

export const resolvePathCoursesDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/folders/by_path")
});

export const resolvePathCoursesResponsesSchema = z.object({
    200: z.array(folderSchema)
});

export const resolvePathCoursesResponseSchema = resolvePathCoursesResponsesSchema.shape["keyof ResolvePathCoursesResponses"];

export const resolvePathCoursesFullPathDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/folders/by_path/*full_path")
});

export const resolvePathCoursesFullPathResponsesSchema = z.object({
    200: z.array(folderSchema)
});

export const resolvePathCoursesFullPathResponseSchema = resolvePathCoursesFullPathResponsesSchema.shape["keyof ResolvePathCoursesFullPathResponses"];

export const getFolderCoursesDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string(),
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/folders/{id}")
});

export const getFolderCoursesResponsesSchema = z.object({
    200: folderSchema
});

export const getFolderCoursesResponseSchema = getFolderCoursesResponsesSchema.shape["keyof GetFolderCoursesResponses"];

export const showFrontPageCoursesDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/front_page")
});

export const updateCreateFrontPageCoursesDataSchema = z.object({
    body: z.object({
        "wiki_page[body]": z.string().optional(),
        "wiki_page[editing_roles]": z.union([z.literal("teachers"), z.literal("students"), z.literal("members"), z.literal("public")]).optional(),
        "wiki_page[notify_of_update]": z.boolean().optional(),
        "wiki_page[published]": z.boolean().optional(),
        "wiki_page[title]": z.string().optional()
    }).optional(),
    path: z.object({
        course_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/front_page")
});

export const daysInGradebookHistoryForThisCourseDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.number()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/gradebook_history/days")
});

export const daysInGradebookHistoryForThisCourseResponsesSchema = z.object({
    200: z.array(daySchema)
});

export const daysInGradebookHistoryForThisCourseResponseSchema = daysInGradebookHistoryForThisCourseResponsesSchema.shape["keyof DaysInGradebookHistoryForThisCourseResponses"];

export const listUncollatedSubmissionVersionsDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.number()
    }),
    query: z.object({
        assignment_id: z.number().optional(),
        user_id: z.number().optional(),
        ascending: z.boolean().optional(),
        page: z.string().optional(),
        per_page: z.number().optional()
    }).optional(),
    url: z.literal("/v1/courses/{course_id}/gradebook_history/feed")
});

export const listUncollatedSubmissionVersionsResponsesSchema = z.object({
    200: z.array(submissionVersionSchema)
});

export const listUncollatedSubmissionVersionsResponseSchema = listUncollatedSubmissionVersionsResponsesSchema.shape["keyof ListUncollatedSubmissionVersionsResponses"];

export const detailsForGivenDateInGradebookHistoryForThisCourseDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.number(),
        date: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/gradebook_history/{date}")
});

export const detailsForGivenDateInGradebookHistoryForThisCourseResponsesSchema = z.object({
    200: z.array(graderSchema)
});

export const detailsForGivenDateInGradebookHistoryForThisCourseResponseSchema = detailsForGivenDateInGradebookHistoryForThisCourseResponsesSchema.shape["keyof DetailsForGivenDateInGradebookHistoryForThisCourseResponses"];

export const listsSubmissionsDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.number(),
        date: z.string(),
        grader_id: z.number(),
        assignment_id: z.number()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/gradebook_history/{date}/graders/{grader_id}/assignments/{assignment_id}/submissions")
});

export const submissionHistorySchema = z.object({
    submission_id: z.number().optional().nullable(),
    versions: z.array(submissionVersionSchema).optional().nullable()
});

export const listsSubmissionsResponsesSchema = z.object({
    200: z.array(submissionHistorySchema)
});

export const listGradingPeriodsCoursesDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string()
    }),
    query: z.object({
        page: z.string().optional(),
        per_page: z.number().optional()
    }).optional(),
    url: z.literal("/v1/courses/{course_id}/grading_periods")
});

export const listGradingPeriodsCoursesResponsesSchema = z.object({
    200: z.array(gradingPeriodSchema)
});

export const listGradingPeriodsCoursesResponseSchema = listGradingPeriodsCoursesResponsesSchema.shape["keyof ListGradingPeriodsCoursesResponses"];

export const deleteGradingPeriodCoursesDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string(),
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/grading_periods/{id}")
});

export const deleteGradingPeriodCoursesResponsesSchema = z.object({
    200: z.unknown()
});

export const getSingleGradingPeriodDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string(),
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/grading_periods/{id}")
});

export const getSingleGradingPeriodResponsesSchema = z.object({
    200: z.unknown()
});

export const updateSingleGradingPeriodDataSchema = z.object({
    body: z.object({
        "grading_periods[end_date]": z.array(z.string()),
        "grading_periods[start_date]": z.array(z.string()),
        "grading_periods[weight]": z.array(z.number()).optional()
    }),
    path: z.object({
        course_id: z.string(),
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/grading_periods/{id}")
});

export const updateSingleGradingPeriodResponsesSchema = z.object({
    200: z.unknown()
});

export const listGradingStandardsAvailableInContextCoursesDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string()
    }),
    query: z.object({
        page: z.string().optional(),
        per_page: z.number().optional()
    }).optional(),
    url: z.literal("/v1/courses/{course_id}/grading_standards")
});

export const listGradingStandardsAvailableInContextCoursesResponsesSchema = z.object({
    200: z.array(gradingStandardSchema)
});

export const listGradingStandardsAvailableInContextCoursesResponseSchema = listGradingStandardsAvailableInContextCoursesResponsesSchema.shape["keyof ListGradingStandardsAvailableInContextCoursesResponses"];

export const createNewGradingStandardCoursesDataSchema = z.object({
    body: z.object({
        "grading_scheme_entry[name]": z.array(z.string()),
        "grading_scheme_entry[value]": z.array(z.number()),
        title: z.string()
    }),
    path: z.object({
        course_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/grading_standards")
});

export const createNewGradingStandardCoursesResponsesSchema = z.object({
    200: gradingStandardSchema
});

export const createNewGradingStandardCoursesResponseSchema = createNewGradingStandardCoursesResponsesSchema.shape["keyof CreateNewGradingStandardCoursesResponses"];

export const getSingleGradingStandardInContextCoursesDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string(),
        grading_standard_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/grading_standards/{grading_standard_id}")
});

export const getSingleGradingStandardInContextCoursesResponsesSchema = z.object({
    200: gradingStandardSchema
});

export const getSingleGradingStandardInContextCoursesResponseSchema = getSingleGradingStandardInContextCoursesResponsesSchema.shape["keyof GetSingleGradingStandardInContextCoursesResponses"];

export const listGroupCategoriesForContextCoursesDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string()
    }),
    query: z.object({
        page: z.string().optional(),
        per_page: z.number().optional()
    }).optional(),
    url: z.literal("/v1/courses/{course_id}/group_categories")
});

export const listGroupCategoriesForContextCoursesResponsesSchema = z.object({
    200: z.array(groupCategorySchema)
});

export const listGroupCategoriesForContextCoursesResponseSchema = listGroupCategoriesForContextCoursesResponsesSchema.shape["keyof ListGroupCategoriesForContextCoursesResponses"];

export const createGroupCategoryCoursesDataSchema = z.object({
    body: z.object({
        auto_leader: z.union([z.literal("first"), z.literal("random")]).optional(),
        create_group_count: z.number().optional(),
        group_limit: z.number().optional(),
        name: z.string(),
        self_signup: z.union([z.literal("enabled"), z.literal("restricted")]).optional(),
        sis_group_category_id: z.string().optional(),
        split_group_count: z.string().optional()
    }),
    path: z.object({
        course_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/group_categories")
});

export const createGroupCategoryCoursesResponsesSchema = z.object({
    200: groupCategorySchema
});

export const createGroupCategoryCoursesResponseSchema = createGroupCategoryCoursesResponsesSchema.shape["keyof CreateGroupCategoryCoursesResponses"];

export const listGroupsAvailableInContextCoursesDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string()
    }),
    query: z.object({
        only_own_groups: z.boolean().optional(),
        include: z.array(z.literal("tabs")).optional(),
        page: z.string().optional(),
        per_page: z.number().optional()
    }).optional(),
    url: z.literal("/v1/courses/{course_id}/groups")
});

export const listGroupsAvailableInContextCoursesResponsesSchema = z.object({
    200: z.array(groupSchema)
});

export const listGroupsAvailableInContextCoursesResponseSchema = listGroupsAvailableInContextCoursesResponsesSchema.shape["keyof ListGroupsAvailableInContextCoursesResponses"];

export const listLiveAssessmentsDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string()
    }),
    query: z.object({
        page: z.string().optional(),
        per_page: z.number().optional()
    }).optional(),
    url: z.literal("/v1/courses/{course_id}/live_assessments")
});

export const listLiveAssessmentsResponsesSchema = z.object({
    200: z.unknown()
});

export const createOrFindLiveAssessmentDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/live_assessments")
});

export const createOrFindLiveAssessmentResponsesSchema = z.object({
    200: z.unknown()
});

export const listLiveAssessmentResultsDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string(),
        assessment_id: z.string()
    }),
    query: z.object({
        user_id: z.number().optional(),
        page: z.string().optional(),
        per_page: z.number().optional()
    }).optional(),
    url: z.literal("/v1/courses/{course_id}/live_assessments/{assessment_id}/results")
});

export const listLiveAssessmentResultsResponsesSchema = z.object({
    200: z.unknown()
});

export const createLiveAssessmentResultsDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string(),
        assessment_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/live_assessments/{assessment_id}/results")
});

export const createLiveAssessmentResultsResponsesSchema = z.object({
    200: z.unknown()
});

export const getModuleItemSequenceDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string()
    }),
    query: z.object({
        asset_type: z.union([z.literal("ModuleItem"), z.literal("File"), z.literal("Page"), z.literal("Discussion"), z.literal("Assignment"), z.literal("Quiz"), z.literal("ExternalTool")]).optional(),
        asset_id: z.number().optional()
    }).optional(),
    url: z.literal("/v1/courses/{course_id}/module_item_sequence")
});

export const moduleItemSequenceSchema = z.object({
    items: z.array(moduleItemSequenceNodeSchema).optional().nullable(),
    modules: z.array(moduleSchema).optional().nullable()
});

export const getModuleItemSequenceResponsesSchema = z.object({
    200: moduleItemSequenceSchema
});

export const listModulesDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string()
    }),
    query: z.object({
        include: z.array(z.union([z.literal("items"), z.literal("content_details")])).optional(),
        search_term: z.string().optional(),
        student_id: z.string().optional(),
        page: z.string().optional(),
        per_page: z.number().optional()
    }).optional(),
    url: z.literal("/v1/courses/{course_id}/modules")
});

export const listModulesResponsesSchema = z.object({
    200: z.array(moduleSchema)
});

export const listModulesResponseSchema = listModulesResponsesSchema.shape["keyof ListModulesResponses"];

export const createModuleDataSchema = z.object({
    body: z.object({
        "module[name]": z.string(),
        "module[position]": z.number().optional(),
        "module[prerequisite_module_ids]": z.array(z.string()).optional(),
        "module[publish_final_grade]": z.boolean().optional(),
        "module[require_sequential_progress]": z.boolean().optional(),
        "module[unlock_at]": z.string().optional()
    }),
    path: z.object({
        course_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/modules")
});

export const createModuleResponsesSchema = z.object({
    200: moduleSchema
});

export const createModuleResponseSchema = createModuleResponsesSchema.shape["keyof CreateModuleResponses"];

export const deleteModuleDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string(),
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/modules/{id}")
});

export const deleteModuleResponsesSchema = z.object({
    200: moduleSchema
});

export const deleteModuleResponseSchema = deleteModuleResponsesSchema.shape["keyof DeleteModuleResponses"];

export const showModuleDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string(),
        id: z.string()
    }),
    query: z.object({
        include: z.array(z.union([z.literal("items"), z.literal("content_details")])).optional(),
        student_id: z.string().optional()
    }).optional(),
    url: z.literal("/v1/courses/{course_id}/modules/{id}")
});

export const showModuleResponsesSchema = z.object({
    200: moduleSchema
});

export const showModuleResponseSchema = showModuleResponsesSchema.shape["keyof ShowModuleResponses"];

export const updateModuleDataSchema = z.object({
    body: z.object({
        "module[name]": z.string().optional(),
        "module[position]": z.number().optional(),
        "module[prerequisite_module_ids]": z.array(z.string()).optional(),
        "module[publish_final_grade]": z.boolean().optional(),
        "module[published]": z.boolean().optional(),
        "module[require_sequential_progress]": z.boolean().optional(),
        "module[unlock_at]": z.string().optional()
    }).optional(),
    path: z.object({
        course_id: z.string(),
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/modules/{id}")
});

export const updateModuleResponsesSchema = z.object({
    200: moduleSchema
});

export const updateModuleResponseSchema = updateModuleResponsesSchema.shape["keyof UpdateModuleResponses"];

export const reLockModuleProgressionsDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string(),
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/modules/{id}/relock")
});

export const reLockModuleProgressionsResponsesSchema = z.object({
    200: moduleSchema
});

export const reLockModuleProgressionsResponseSchema = reLockModuleProgressionsResponsesSchema.shape["keyof ReLockModuleProgressionsResponses"];

export const listModuleItemsDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string(),
        module_id: z.string()
    }),
    query: z.object({
        include: z.array(z.literal("content_details")).optional(),
        search_term: z.string().optional(),
        student_id: z.string().optional(),
        page: z.string().optional(),
        per_page: z.number().optional()
    }).optional(),
    url: z.literal("/v1/courses/{course_id}/modules/{module_id}/items")
});

export const listModuleItemsResponsesSchema = z.object({
    200: z.array(moduleItemSchema)
});

export const listModuleItemsResponseSchema = listModuleItemsResponsesSchema.shape["keyof ListModuleItemsResponses"];

export const createModuleItemDataSchema = z.object({
    body: z.object({
        "module_item[completion_requirement][min_score]": z.number().optional(),
        "module_item[completion_requirement][type]": z.union([z.literal("must_view"), z.literal("must_contribute"), z.literal("must_submit")]).optional(),
        "module_item[content_id]": z.string(),
        "module_item[external_url]": z.string().optional(),
        "module_item[indent]": z.number().optional(),
        "module_item[new_tab]": z.boolean().optional(),
        "module_item[page_url]": z.string().optional(),
        "module_item[position]": z.number().optional(),
        "module_item[title]": z.string().optional(),
        "module_item[type]": z.union([z.literal("File"), z.literal("Page"), z.literal("Discussion"), z.literal("Assignment"), z.literal("Quiz"), z.literal("SubHeader"), z.literal("ExternalUrl"), z.literal("ExternalTool")])
    }),
    path: z.object({
        course_id: z.string(),
        module_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/modules/{module_id}/items")
});

export const createModuleItemResponsesSchema = z.object({
    200: moduleItemSchema
});

export const createModuleItemResponseSchema = createModuleItemResponsesSchema.shape["keyof CreateModuleItemResponses"];

export const deleteModuleItemDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string(),
        module_id: z.string(),
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/modules/{module_id}/items/{id}")
});

export const deleteModuleItemResponsesSchema = z.object({
    200: moduleItemSchema
});

export const deleteModuleItemResponseSchema = deleteModuleItemResponsesSchema.shape["keyof DeleteModuleItemResponses"];

export const showModuleItemDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string(),
        module_id: z.string(),
        id: z.string()
    }),
    query: z.object({
        include: z.array(z.literal("content_details")).optional(),
        student_id: z.string().optional()
    }).optional(),
    url: z.literal("/v1/courses/{course_id}/modules/{module_id}/items/{id}")
});

export const showModuleItemResponsesSchema = z.object({
    200: moduleItemSchema
});

export const showModuleItemResponseSchema = showModuleItemResponsesSchema.shape["keyof ShowModuleItemResponses"];

export const updateModuleItemDataSchema = z.object({
    body: z.object({
        "module_item[completion_requirement][min_score]": z.number().optional(),
        "module_item[completion_requirement][type]": z.union([z.literal("must_view"), z.literal("must_contribute"), z.literal("must_submit")]).optional(),
        "module_item[external_url]": z.string().optional(),
        "module_item[indent]": z.number().optional(),
        "module_item[module_id]": z.string().optional(),
        "module_item[new_tab]": z.boolean().optional(),
        "module_item[position]": z.number().optional(),
        "module_item[published]": z.boolean().optional(),
        "module_item[title]": z.string().optional()
    }).optional(),
    path: z.object({
        course_id: z.string(),
        module_id: z.string(),
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/modules/{module_id}/items/{id}")
});

export const updateModuleItemResponsesSchema = z.object({
    200: moduleItemSchema
});

export const updateModuleItemResponseSchema = updateModuleItemResponsesSchema.shape["keyof UpdateModuleItemResponses"];

export const markModuleItemAsDoneNotDoneDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string(),
        module_id: z.string(),
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/modules/{module_id}/items/{id}/done")
});

export const markModuleItemAsDoneNotDoneResponsesSchema = z.object({
    200: z.unknown()
});

export const markModuleItemReadDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string(),
        module_id: z.string(),
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/modules/{module_id}/items/{id}/mark_read")
});

export const markModuleItemReadResponsesSchema = z.object({
    200: z.unknown()
});

export const selectMasteryPathDataSchema = z.object({
    body: z.object({
        assignment_set_id: z.string().optional(),
        student_id: z.string().optional()
    }).optional(),
    path: z.object({
        course_id: z.string(),
        module_id: z.string(),
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/modules/{module_id}/items/{id}/select_mastery_path")
});

export const selectMasteryPathResponsesSchema = z.object({
    200: z.unknown()
});

export const getAlignedAssignmentsForOutcomeInCourseForParticularStudentDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.number()
    }),
    query: z.object({
        student_id: z.number().optional()
    }).optional(),
    url: z.literal("/v1/courses/{course_id}/outcome_alignments")
});

export const getAlignedAssignmentsForOutcomeInCourseForParticularStudentResponsesSchema = z.object({
    200: z.array(outcomeAlignmentSchema)
});

export const getAlignedAssignmentsForOutcomeInCourseForParticularStudentResponseSchema = getAlignedAssignmentsForOutcomeInCourseForParticularStudentResponsesSchema.shape["keyof GetAlignedAssignmentsForOutcomeInCourseForParticularStudentResponses"];

export const getAllOutcomeLinksForContextCoursesDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string()
    }),
    query: z.object({
        outcome_style: z.string().optional(),
        outcome_group_style: z.string().optional()
    }).optional(),
    url: z.literal("/v1/courses/{course_id}/outcome_group_links")
});

export const getAllOutcomeLinksForContextCoursesResponsesSchema = z.object({
    200: z.array(outcomeLinkSchema)
});

export const getAllOutcomeLinksForContextCoursesResponseSchema = getAllOutcomeLinksForContextCoursesResponsesSchema.shape["keyof GetAllOutcomeLinksForContextCoursesResponses"];

export const getAllOutcomeGroupsForContextCoursesDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/outcome_groups")
});

export const getAllOutcomeGroupsForContextCoursesResponsesSchema = z.object({
    200: z.array(outcomeGroupSchema)
});

export const getAllOutcomeGroupsForContextCoursesResponseSchema = getAllOutcomeGroupsForContextCoursesResponsesSchema.shape["keyof GetAllOutcomeGroupsForContextCoursesResponses"];

export const deleteOutcomeGroupCoursesDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string(),
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/outcome_groups/{id}")
});

export const deleteOutcomeGroupCoursesResponsesSchema = z.object({
    200: outcomeGroupSchema
});

export const deleteOutcomeGroupCoursesResponseSchema = deleteOutcomeGroupCoursesResponsesSchema.shape["keyof DeleteOutcomeGroupCoursesResponses"];

export const showOutcomeGroupCoursesDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string(),
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/outcome_groups/{id}")
});

export const showOutcomeGroupCoursesResponsesSchema = z.object({
    200: outcomeGroupSchema
});

export const showOutcomeGroupCoursesResponseSchema = showOutcomeGroupCoursesResponsesSchema.shape["keyof ShowOutcomeGroupCoursesResponses"];

export const updateOutcomeGroupCoursesDataSchema = z.object({
    body: z.object({
        description: z.string().optional(),
        parent_outcome_group_id: z.number().optional(),
        title: z.string().optional(),
        vendor_guid: z.string().optional()
    }).optional(),
    path: z.object({
        course_id: z.string(),
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/outcome_groups/{id}")
});

export const updateOutcomeGroupCoursesResponsesSchema = z.object({
    200: outcomeGroupSchema
});

export const updateOutcomeGroupCoursesResponseSchema = updateOutcomeGroupCoursesResponsesSchema.shape["keyof UpdateOutcomeGroupCoursesResponses"];

export const importOutcomeGroupCoursesDataSchema = z.object({
    body: z.object({
        async: z.boolean().optional(),
        source_outcome_group_id: z.number()
    }),
    path: z.object({
        course_id: z.string(),
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/outcome_groups/{id}/import")
});

export const importOutcomeGroupCoursesResponsesSchema = z.object({
    200: outcomeGroupSchema
});

export const importOutcomeGroupCoursesResponseSchema = importOutcomeGroupCoursesResponsesSchema.shape["keyof ImportOutcomeGroupCoursesResponses"];

export const listLinkedOutcomesCoursesDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string(),
        id: z.string()
    }),
    query: z.object({
        outcome_style: z.string().optional(),
        page: z.string().optional(),
        per_page: z.number().optional()
    }).optional(),
    url: z.literal("/v1/courses/{course_id}/outcome_groups/{id}/outcomes")
});

export const listLinkedOutcomesCoursesResponsesSchema = z.object({
    200: z.array(outcomeLinkSchema)
});

export const listLinkedOutcomesCoursesResponseSchema = listLinkedOutcomesCoursesResponsesSchema.shape["keyof ListLinkedOutcomesCoursesResponses"];

export const createLinkOutcomeCoursesDataSchema = z.object({
    body: z.object({
        calculation_int: z.number().optional(),
        calculation_method: z.union([z.literal("decaying_average"), z.literal("n_mastery"), z.literal("latest"), z.literal("highest")]).optional(),
        description: z.string().optional(),
        display_name: z.string().optional(),
        mastery_points: z.number().optional(),
        move_from: z.number().optional(),
        outcome_id: z.number().optional(),
        "ratings[description]": z.array(z.string()).optional(),
        "ratings[points]": z.array(z.number()).optional(),
        title: z.string().optional(),
        vendor_guid: z.string().optional()
    }).optional(),
    path: z.object({
        course_id: z.string(),
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/outcome_groups/{id}/outcomes")
});

export const createLinkOutcomeCoursesResponsesSchema = z.object({
    200: outcomeLinkSchema
});

export const createLinkOutcomeCoursesResponseSchema = createLinkOutcomeCoursesResponsesSchema.shape["keyof CreateLinkOutcomeCoursesResponses"];

export const unlinkOutcomeCoursesDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string(),
        id: z.string(),
        outcome_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/outcome_groups/{id}/outcomes/{outcome_id}")
});

export const unlinkOutcomeCoursesResponsesSchema = z.object({
    200: outcomeLinkSchema
});

export const unlinkOutcomeCoursesResponseSchema = unlinkOutcomeCoursesResponsesSchema.shape["keyof UnlinkOutcomeCoursesResponses"];

export const createLinkOutcomeCoursesOutcomeIdDataSchema = z.object({
    body: z.object({
        calculation_int: z.number().optional(),
        calculation_method: z.union([z.literal("decaying_average"), z.literal("n_mastery"), z.literal("latest"), z.literal("highest")]).optional(),
        description: z.string().optional(),
        display_name: z.string().optional(),
        mastery_points: z.number().optional(),
        move_from: z.number().optional(),
        "ratings[description]": z.array(z.string()).optional(),
        "ratings[points]": z.array(z.number()).optional(),
        title: z.string().optional(),
        vendor_guid: z.string().optional()
    }).optional(),
    path: z.object({
        course_id: z.string(),
        id: z.string(),
        outcome_id: z.number()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/outcome_groups/{id}/outcomes/{outcome_id}")
});

export const createLinkOutcomeCoursesOutcomeIdResponsesSchema = z.object({
    200: outcomeLinkSchema
});

export const createLinkOutcomeCoursesOutcomeIdResponseSchema = createLinkOutcomeCoursesOutcomeIdResponsesSchema.shape["keyof CreateLinkOutcomeCoursesOutcomeIdResponses"];

export const listSubgroupsCoursesDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string(),
        id: z.string()
    }),
    query: z.object({
        page: z.string().optional(),
        per_page: z.number().optional()
    }).optional(),
    url: z.literal("/v1/courses/{course_id}/outcome_groups/{id}/subgroups")
});

export const listSubgroupsCoursesResponsesSchema = z.object({
    200: z.array(outcomeGroupSchema)
});

export const listSubgroupsCoursesResponseSchema = listSubgroupsCoursesResponsesSchema.shape["keyof ListSubgroupsCoursesResponses"];

export const createSubgroupCoursesDataSchema = z.object({
    body: z.object({
        description: z.string().optional(),
        title: z.string(),
        vendor_guid: z.string().optional()
    }),
    path: z.object({
        course_id: z.string(),
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/outcome_groups/{id}/subgroups")
});

export const createSubgroupCoursesResponsesSchema = z.object({
    200: outcomeGroupSchema
});

export const createSubgroupCoursesResponseSchema = createSubgroupCoursesResponsesSchema.shape["keyof CreateSubgroupCoursesResponses"];

export const importOutcomesCoursesDataSchema = z.object({
    body: z.object({
        attachment: z.string().optional(),
        extension: z.string().optional(),
        import_type: z.string().optional()
    }).optional(),
    path: z.object({
        course_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/outcome_imports")
});

export const getOutcomeImportStatusCoursesDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string(),
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/outcome_imports/{id}")
});

export const getOutcomeResultsDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string()
    }),
    query: z.object({
        user_ids: z.array(z.number()).optional(),
        outcome_ids: z.array(z.number()).optional(),
        include: z.array(z.string()).optional(),
        include_hidden: z.boolean().optional()
    }).optional(),
    url: z.literal("/v1/courses/{course_id}/outcome_results")
});

export const getOutcomeResultRollupsDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string()
    }),
    query: z.object({
        aggregate: z.literal("course").optional(),
        aggregate_stat: z.union([z.literal("mean"), z.literal("median")]).optional(),
        user_ids: z.array(z.number()).optional(),
        outcome_ids: z.array(z.number()).optional(),
        include: z.array(z.string()).optional(),
        exclude: z.array(z.literal("missing_user_rollups")).optional(),
        sort_by: z.union([z.literal("student"), z.literal("outcome")]).optional(),
        sort_outcome_id: z.number().optional(),
        sort_order: z.union([z.literal("asc"), z.literal("desc")]).optional()
    }).optional(),
    url: z.literal("/v1/courses/{course_id}/outcome_rollups")
});

export const listPagesCoursesDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string()
    }),
    query: z.object({
        sort: z.union([z.literal("title"), z.literal("created_at"), z.literal("updated_at")]).optional(),
        order: z.union([z.literal("asc"), z.literal("desc")]).optional(),
        search_term: z.string().optional(),
        published: z.boolean().optional(),
        page: z.string().optional(),
        per_page: z.number().optional()
    }).optional(),
    url: z.literal("/v1/courses/{course_id}/pages")
});

export const createPageCoursesDataSchema = z.object({
    body: z.object({
        "wiki_page[body]": z.string().optional(),
        "wiki_page[editing_roles]": z.union([z.literal("teachers"), z.literal("students"), z.literal("members"), z.literal("public")]).optional(),
        "wiki_page[front_page]": z.boolean().optional(),
        "wiki_page[notify_of_update]": z.boolean().optional(),
        "wiki_page[published]": z.boolean().optional(),
        "wiki_page[title]": z.string()
    }),
    path: z.object({
        course_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/pages")
});

export const deletePageCoursesDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string(),
        url: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/pages/{url}")
});

export const showPageCoursesDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string(),
        url: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/pages/{url}")
});

export const updateCreatePageCoursesDataSchema = z.object({
    body: z.object({
        "wiki_page[body]": z.string().optional(),
        "wiki_page[editing_roles]": z.union([z.literal("teachers"), z.literal("students"), z.literal("members"), z.literal("public")]).optional(),
        "wiki_page[front_page]": z.boolean().optional(),
        "wiki_page[notify_of_update]": z.boolean().optional(),
        "wiki_page[published]": z.boolean().optional(),
        "wiki_page[title]": z.string().optional()
    }).optional(),
    path: z.object({
        course_id: z.string(),
        url: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/pages/{url}")
});

export const duplicatePageDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string(),
        url: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/pages/{url}/duplicate")
});

export const listRevisionsCoursesDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string(),
        url: z.string()
    }),
    query: z.object({
        page: z.string().optional(),
        per_page: z.number().optional()
    }).optional(),
    url: z.literal("/v1/courses/{course_id}/pages/{url}/revisions")
});

export const showRevisionCoursesLatestDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string(),
        url: z.string()
    }),
    query: z.object({
        summary: z.boolean().optional()
    }).optional(),
    url: z.literal("/v1/courses/{course_id}/pages/{url}/revisions/latest")
});

export const showRevisionCoursesRevisionIdDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string(),
        url: z.string(),
        revision_id: z.string()
    }),
    query: z.object({
        summary: z.boolean().optional()
    }).optional(),
    url: z.literal("/v1/courses/{course_id}/pages/{url}/revisions/{revision_id}")
});

export const revertToRevisionCoursesDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string(),
        url: z.string(),
        revision_id: z.number()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/pages/{url}/revisions/{revision_id}")
});

export const coursePermissionDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string()
    }),
    query: z.object({
        permissions: z.array(z.string()).optional()
    }).optional(),
    url: z.literal("/v1/courses/{course_id}/permissions")
});

export const coursePermissionResponsesSchema = z.object({
    200: z.array(permissionSchema)
});

export const coursePermissionResponseSchema = coursePermissionResponsesSchema.shape["keyof CoursePermissionResponses"];

export const listPotentialMembersCoursesDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string()
    }),
    query: z.object({
        page: z.string().optional(),
        per_page: z.number().optional()
    }).optional(),
    url: z.literal("/v1/courses/{course_id}/potential_collaborators")
});

export const previewProcessedHtmlCourseDataSchema = z.object({
    body: z.object({
        html: z.string().optional()
    }).optional(),
    path: z.object({
        course_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/preview_html")
});

export const previewProcessedHtmlCourseResponsesSchema = z.object({
    200: z.unknown()
});

export const setExtensionsForStudentQuizSubmissionsDataSchema = z.object({
    body: z.object({
        extend_from_end_at: z.number().optional(),
        extend_from_now: z.number().optional(),
        extra_attempts: z.number().optional(),
        extra_time: z.number().optional(),
        manually_unlocked: z.boolean().optional(),
        user_id: z.number()
    }),
    path: z.object({
        course_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/quiz_extensions")
});

export const setExtensionsForStudentQuizSubmissionsResponsesSchema = z.object({
    200: z.unknown()
});

export const listQuizzesInCourseDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string()
    }),
    query: z.object({
        search_term: z.string().optional(),
        page: z.string().optional(),
        per_page: z.number().optional()
    }).optional(),
    url: z.literal("/v1/courses/{course_id}/quizzes")
});

export const quizSchema = z.object({
    access_code: z.string().optional().nullable(),
    all_dates: z.array(assignmentDateSchema).optional().nullable(),
    allowed_attempts: z.number().optional().nullable(),
    anonymous_submissions: z.boolean().optional().nullable(),
    assignment_group_id: z.number().optional().nullable(),
    cant_go_back: z.boolean().optional().nullable(),
    description: z.string().optional().nullable(),
    due_at: z.string().optional().nullable(),
    hide_correct_answers_at: z.string().optional().nullable(),
    hide_results: z.string().optional().nullable(),
    html_url: z.string().optional().nullable(),
    id: z.number().optional(),
    ip_filter: z.string().optional().nullable(),
    lock_at: z.string().optional().nullable(),
    lock_explanation: z.string().optional().nullable(),
    lock_info: lockInfoSchema.optional(),
    locked_for_user: z.boolean().optional().nullable(),
    mobile_url: z.string().optional().nullable(),
    one_question_at_a_time: z.boolean().optional().nullable(),
    one_time_results: z.boolean().optional().nullable(),
    permissions: quizPermissionsSchema.optional(),
    points_possible: z.number().optional().nullable(),
    preview_url: z.string().optional().nullable(),
    published: z.boolean().optional().nullable(),
    question_count: z.number().optional().nullable(),
    question_types: z.array(z.string()).optional().nullable(),
    quiz_extensions_url: z.string().optional().nullable(),
    quiz_type: z.string().optional().nullable(),
    scoring_policy: z.string().optional().nullable(),
    show_correct_answers: z.boolean().optional().nullable(),
    show_correct_answers_at: z.string().optional().nullable(),
    show_correct_answers_last_attempt: z.boolean().optional().nullable(),
    shuffle_answers: z.boolean().optional().nullable(),
    speedgrader_url: z.string().optional().nullable(),
    time_limit: z.number().optional().nullable(),
    title: z.string().optional().nullable(),
    unlock_at: z.string().optional().nullable(),
    unpublishable: z.boolean().optional().nullable(),
    version_number: z.number().optional().nullable()
});

export const listQuizzesInCourseResponsesSchema = z.object({
    200: z.array(quizSchema)
});

export const createQuizDataSchema = z.object({
    body: z.object({
        "quiz[access_code]": z.string().optional(),
        "quiz[allowed_attempts]": z.number().optional(),
        "quiz[assignment_group_id]": z.number().optional(),
        "quiz[cant_go_back]": z.boolean().optional(),
        "quiz[description]": z.string().optional(),
        "quiz[due_at]": z.string().optional(),
        "quiz[hide_correct_answers_at]": z.string().optional(),
        "quiz[hide_results]": z.union([z.literal("always"), z.literal("until_after_last_attempt")]).optional(),
        "quiz[ip_filter]": z.string().optional(),
        "quiz[lock_at]": z.string().optional(),
        "quiz[one_question_at_a_time]": z.boolean().optional(),
        "quiz[one_time_results]": z.boolean().optional(),
        "quiz[only_visible_to_overrides]": z.boolean().optional(),
        "quiz[published]": z.boolean().optional(),
        "quiz[quiz_type]": z.union([z.literal("practice_quiz"), z.literal("assignment"), z.literal("graded_survey"), z.literal("survey")]).optional(),
        "quiz[scoring_policy]": z.union([z.literal("keep_highest"), z.literal("keep_latest")]).optional(),
        "quiz[show_correct_answers]": z.boolean().optional(),
        "quiz[show_correct_answers_at]": z.string().optional(),
        "quiz[show_correct_answers_last_attempt]": z.boolean().optional(),
        "quiz[shuffle_answers]": z.boolean().optional(),
        "quiz[time_limit]": z.number().optional(),
        "quiz[title]": z.string(),
        "quiz[unlock_at]": z.string().optional()
    }),
    path: z.object({
        course_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/quizzes")
});

export const createQuizResponsesSchema = z.object({
    200: quizSchema
});

export const createQuizResponseSchema = createQuizResponsesSchema.shape["keyof CreateQuizResponses"];

export const retrieveAssignmentOverriddenDatesForQuizzesDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string()
    }),
    query: z.object({
        "quiz_assignment_overrides[0][quiz_ids]": z.array(z.number()).optional()
    }).optional(),
    url: z.literal("/v1/courses/{course_id}/quizzes/assignment_overrides")
});

export const retrieveAssignmentOverriddenDatesForQuizzesResponsesSchema = z.object({
    200: quizAssignmentOverrideSetContainerSchema
});

export const retrieveAssignmentOverriddenDatesForQuizzesResponseSchema = retrieveAssignmentOverriddenDatesForQuizzesResponsesSchema.shape["keyof RetrieveAssignmentOverriddenDatesForQuizzesResponses"];

export const deleteQuizDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string(),
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/quizzes/{id}")
});

export const deleteQuizResponsesSchema = z.object({
    200: quizSchema
});

export const deleteQuizResponseSchema = deleteQuizResponsesSchema.shape["keyof DeleteQuizResponses"];

export const getSingleQuizDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string(),
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/quizzes/{id}")
});

export const getSingleQuizResponsesSchema = z.object({
    200: quizSchema
});

export const getSingleQuizResponseSchema = getSingleQuizResponsesSchema.shape["keyof GetSingleQuizResponses"];

export const editQuizDataSchema = z.object({
    body: z.object({
        "quiz[notify_of_update]": z.boolean().optional()
    }).optional(),
    path: z.object({
        course_id: z.string(),
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/quizzes/{id}")
});

export const editQuizResponsesSchema = z.object({
    200: quizSchema
});

export const editQuizResponseSchema = editQuizResponsesSchema.shape["keyof EditQuizResponses"];

export const reorderQuizItemsDataSchema = z.object({
    body: z.object({
        "order[id]": z.array(z.number()),
        "order[type]": z.array(z.union([z.literal("question"), z.literal("group")])).optional()
    }),
    path: z.object({
        course_id: z.string(),
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/quizzes/{id}/reorder")
});

export const reorderQuizItemsResponsesSchema = z.object({
    200: z.unknown()
});

export const sendMessageToUnsubmittedOrSubmittedUsersForQuizDataSchema = z.object({
    body: z.object({
        conversations: z.unknown().optional()
    }).optional(),
    path: z.object({
        course_id: z.string(),
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/quizzes/{id}/submission_users/message")
});

export const sendMessageToUnsubmittedOrSubmittedUsersForQuizResponsesSchema = z.object({
    200: z.unknown()
});

export const validateQuizAccessCodeDataSchema = z.object({
    body: z.object({
        access_code: z.string()
    }),
    path: z.object({
        course_id: z.string(),
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/quizzes/{id}/validate_access_code")
});

export const validateQuizAccessCodeResponsesSchema = z.object({
    200: z.boolean()
});

export const validateQuizAccessCodeResponseSchema = validateQuizAccessCodeResponsesSchema.shape["keyof ValidateQuizAccessCodeResponses"];

export const setExtensionsForStudentQuizDataSchema = z.object({
    body: z.object({
        "quiz_extensions[extend_from_end_at]": z.array(z.number()).optional(),
        "quiz_extensions[extend_from_now]": z.array(z.number()).optional(),
        "quiz_extensions[extra_attempts]": z.array(z.number()).optional(),
        "quiz_extensions[extra_time]": z.array(z.number()).optional(),
        "quiz_extensions[manually_unlocked]": z.array(z.boolean()).optional(),
        "quiz_extensions[user_id]": z.array(z.number())
    }),
    path: z.object({
        course_id: z.string(),
        quiz_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/quizzes/{quiz_id}/extensions")
});

export const setExtensionsForStudentQuizResponsesSchema = z.object({
    200: z.unknown()
});

export const createQuestionGroupDataSchema = z.object({
    body: z.object({
        "quiz_groups[assessment_question_bank_id]": z.array(z.number()).optional(),
        "quiz_groups[name]": z.array(z.string()).optional(),
        "quiz_groups[pick_count]": z.array(z.number()).optional(),
        "quiz_groups[question_points]": z.array(z.number()).optional()
    }).optional(),
    path: z.object({
        course_id: z.string(),
        quiz_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/quizzes/{quiz_id}/groups")
});

export const createQuestionGroupResponsesSchema = z.object({
    200: z.unknown()
});

export const deleteQuestionGroupDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string(),
        quiz_id: z.string(),
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/quizzes/{quiz_id}/groups/{id}")
});

export const deleteQuestionGroupResponsesSchema = z.object({
    200: z.unknown()
});

export const getSingleQuizGroupDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string(),
        quiz_id: z.string(),
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/quizzes/{quiz_id}/groups/{id}")
});

export const getSingleQuizGroupResponsesSchema = z.object({
    200: quizGroupSchema
});

export const getSingleQuizGroupResponseSchema = getSingleQuizGroupResponsesSchema.shape["keyof GetSingleQuizGroupResponses"];

export const updateQuestionGroupDataSchema = z.object({
    body: z.object({
        "quiz_groups[name]": z.array(z.string()).optional(),
        "quiz_groups[pick_count]": z.array(z.number()).optional(),
        "quiz_groups[question_points]": z.array(z.number()).optional()
    }).optional(),
    path: z.object({
        course_id: z.string(),
        quiz_id: z.string(),
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/quizzes/{quiz_id}/groups/{id}")
});

export const updateQuestionGroupResponsesSchema = z.object({
    200: z.unknown()
});

export const reorderQuestionGroupsDataSchema = z.object({
    body: z.object({
        "order[id]": z.array(z.number()),
        "order[type]": z.array(z.literal("question")).optional()
    }),
    path: z.object({
        course_id: z.string(),
        quiz_id: z.string(),
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/quizzes/{quiz_id}/groups/{id}/reorder")
});

export const reorderQuestionGroupsResponsesSchema = z.object({
    200: z.unknown()
});

export const getAvailableQuizIpFiltersDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string(),
        quiz_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/quizzes/{quiz_id}/ip_filters")
});

export const getAvailableQuizIpFiltersResponsesSchema = z.object({
    200: z.unknown()
});

export const listQuestionsInQuizOrSubmissionDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string(),
        quiz_id: z.string()
    }),
    query: z.object({
        quiz_submission_id: z.number().optional(),
        quiz_submission_attempt: z.number().optional(),
        page: z.string().optional(),
        per_page: z.number().optional()
    }).optional(),
    url: z.literal("/v1/courses/{course_id}/quizzes/{quiz_id}/questions")
});

export const listQuestionsInQuizOrSubmissionResponsesSchema = z.object({
    200: z.array(quizQuestionSchema)
});

export const listQuestionsInQuizOrSubmissionResponseSchema = listQuestionsInQuizOrSubmissionResponsesSchema.shape["keyof ListQuestionsInQuizOrSubmissionResponses"];

export const createSingleQuizQuestionDataSchema = z.object({
    body: z.object({
        "question[answers]": z.unknown().optional(),
        "question[correct_comments]": z.string().optional(),
        "question[incorrect_comments]": z.string().optional(),
        "question[neutral_comments]": z.string().optional(),
        "question[points_possible]": z.number().optional(),
        "question[position]": z.number().optional(),
        "question[question_name]": z.string().optional(),
        "question[question_text]": z.string().optional(),
        "question[question_type]": z.union([z.literal("calculated_question"), z.literal("essay_question"), z.literal("file_upload_question"), z.literal("fill_in_multiple_blanks_question"), z.literal("matching_question"), z.literal("multiple_answers_question"), z.literal("multiple_choice_question"), z.literal("multiple_dropdowns_question"), z.literal("numerical_question"), z.literal("short_answer_question"), z.literal("text_only_question"), z.literal("true_false_question")]).optional(),
        "question[quiz_group_id]": z.number().optional(),
        "question[text_after_answers]": z.string().optional()
    }).optional(),
    path: z.object({
        course_id: z.string(),
        quiz_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/quizzes/{quiz_id}/questions")
});

export const createSingleQuizQuestionResponsesSchema = z.object({
    200: quizQuestionSchema
});

export const createSingleQuizQuestionResponseSchema = createSingleQuizQuestionResponsesSchema.shape["keyof CreateSingleQuizQuestionResponses"];

export const deleteQuizQuestionDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string(),
        quiz_id: z.number(),
        id: z.number()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/quizzes/{quiz_id}/questions/{id}")
});

export const deleteQuizQuestionResponsesSchema = z.object({
    200: z.unknown()
});

export const getSingleQuizQuestionDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string(),
        quiz_id: z.string(),
        id: z.number()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/quizzes/{quiz_id}/questions/{id}")
});

export const getSingleQuizQuestionResponsesSchema = z.object({
    200: quizQuestionSchema
});

export const getSingleQuizQuestionResponseSchema = getSingleQuizQuestionResponsesSchema.shape["keyof GetSingleQuizQuestionResponses"];

export const updateExistingQuizQuestionDataSchema = z.object({
    body: z.object({
        "question[answers]": z.unknown().optional(),
        "question[correct_comments]": z.string().optional(),
        "question[incorrect_comments]": z.string().optional(),
        "question[neutral_comments]": z.string().optional(),
        "question[points_possible]": z.number().optional(),
        "question[position]": z.number().optional(),
        "question[question_name]": z.string().optional(),
        "question[question_text]": z.string().optional(),
        "question[question_type]": z.union([z.literal("calculated_question"), z.literal("essay_question"), z.literal("file_upload_question"), z.literal("fill_in_multiple_blanks_question"), z.literal("matching_question"), z.literal("multiple_answers_question"), z.literal("multiple_choice_question"), z.literal("multiple_dropdowns_question"), z.literal("numerical_question"), z.literal("short_answer_question"), z.literal("text_only_question"), z.literal("true_false_question")]).optional(),
        "question[quiz_group_id]": z.number().optional(),
        "question[text_after_answers]": z.string().optional()
    }).optional(),
    path: z.object({
        course_id: z.string(),
        quiz_id: z.number(),
        id: z.number()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/quizzes/{quiz_id}/questions/{id}")
});

export const updateExistingQuizQuestionResponsesSchema = z.object({
    200: quizQuestionSchema
});

export const updateExistingQuizQuestionResponseSchema = updateExistingQuizQuestionResponsesSchema.shape["keyof UpdateExistingQuizQuestionResponses"];

export const retrieveAllQuizReportsDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string(),
        quiz_id: z.string()
    }),
    query: z.object({
        includes_all_versions: z.boolean().optional()
    }).optional(),
    url: z.literal("/v1/courses/{course_id}/quizzes/{quiz_id}/reports")
});

export const retrieveAllQuizReportsResponsesSchema = z.object({
    200: z.array(quizReportSchema)
});

export const retrieveAllQuizReportsResponseSchema = retrieveAllQuizReportsResponsesSchema.shape["keyof RetrieveAllQuizReportsResponses"];

export const createQuizReportDataSchema = z.object({
    body: z.object({
        include: z.union([z.literal("file"), z.literal("progress")]).optional(),
        "quiz_report[includes_all_versions]": z.boolean().optional(),
        "quiz_report[report_type]": z.union([z.literal("student_analysis"), z.literal("item_analysis")])
    }),
    path: z.object({
        course_id: z.string(),
        quiz_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/quizzes/{quiz_id}/reports")
});

export const createQuizReportResponsesSchema = z.object({
    200: quizReportSchema
});

export const createQuizReportResponseSchema = createQuizReportResponsesSchema.shape["keyof CreateQuizReportResponses"];

export const abortGenerationOfReportOrRemovePreviouslyGeneratedOneDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string(),
        quiz_id: z.string(),
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/quizzes/{quiz_id}/reports/{id}")
});

export const abortGenerationOfReportOrRemovePreviouslyGeneratedOneResponsesSchema = z.object({
    200: z.unknown()
});

export const getQuizReportDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string(),
        quiz_id: z.string(),
        id: z.string()
    }),
    query: z.object({
        include: z.union([z.literal("file"), z.literal("progress")]).optional()
    }).optional(),
    url: z.literal("/v1/courses/{course_id}/quizzes/{quiz_id}/reports/{id}")
});

export const getQuizReportResponsesSchema = z.object({
    200: quizReportSchema
});

export const getQuizReportResponseSchema = getQuizReportResponsesSchema.shape["keyof GetQuizReportResponses"];

export const fetchingLatestQuizStatisticsDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string(),
        quiz_id: z.string()
    }),
    query: z.object({
        all_versions: z.boolean().optional()
    }).optional(),
    url: z.literal("/v1/courses/{course_id}/quizzes/{quiz_id}/statistics")
});

export const fetchingLatestQuizStatisticsResponsesSchema = z.object({
    200: z.unknown()
});

export const getQuizSubmissionDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string(),
        quiz_id: z.string()
    }),
    query: z.object({
        include: z.array(z.union([z.literal("submission"), z.literal("quiz"), z.literal("user")])).optional()
    }).optional(),
    url: z.literal("/v1/courses/{course_id}/quizzes/{quiz_id}/submission")
});

export const getQuizSubmissionResponsesSchema = z.object({
    200: z.unknown()
});

export const getAllQuizSubmissionsDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string(),
        quiz_id: z.string()
    }),
    query: z.object({
        include: z.array(z.union([z.literal("submission"), z.literal("quiz"), z.literal("user")])).optional()
    }).optional(),
    url: z.literal("/v1/courses/{course_id}/quizzes/{quiz_id}/submissions")
});

export const getAllQuizSubmissionsResponsesSchema = z.object({
    200: z.unknown()
});

export const createQuizSubmissionStartQuizTakingSessionDataSchema = z.object({
    body: z.object({
        access_code: z.string().optional(),
        preview: z.boolean().optional()
    }).optional(),
    path: z.object({
        course_id: z.string(),
        quiz_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/quizzes/{quiz_id}/submissions")
});

export const createQuizSubmissionStartQuizTakingSessionResponsesSchema = z.object({
    200: z.unknown()
});

export const uploadFileQuizSubmissionDataSchema = z.object({
    body: z.object({
        name: z.string().optional(),
        on_duplicate: z.string().optional()
    }).optional(),
    path: z.object({
        course_id: z.string(),
        quiz_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/quizzes/{quiz_id}/submissions/self/files")
});

export const uploadFileQuizSubmissionResponsesSchema = z.object({
    200: z.unknown()
});

export const getSingleQuizSubmissionDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string(),
        quiz_id: z.string(),
        id: z.string()
    }),
    query: z.object({
        include: z.array(z.union([z.literal("submission"), z.literal("quiz"), z.literal("user")])).optional()
    }).optional(),
    url: z.literal("/v1/courses/{course_id}/quizzes/{quiz_id}/submissions/{id}")
});

export const getSingleQuizSubmissionResponsesSchema = z.object({
    200: z.unknown()
});

export const updateStudentQuestionScoresAndCommentsDataSchema = z.object({
    body: z.object({
        "quiz_submissions[attempt]": z.array(z.number()),
        "quiz_submissions[fudge_points]": z.array(z.number()).optional(),
        "quiz_submissions[questions]": z.array(quizSubmissionSchema).optional()
    }),
    path: z.object({
        course_id: z.string(),
        quiz_id: z.string(),
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/quizzes/{quiz_id}/submissions/{id}")
});

export const updateStudentQuestionScoresAndCommentsResponsesSchema = z.object({
    200: z.unknown()
});

export const completeQuizSubmissionTurnItInDataSchema = z.object({
    body: z.object({
        access_code: z.string().optional(),
        attempt: z.number(),
        validation_token: z.string()
    }),
    path: z.object({
        course_id: z.string(),
        quiz_id: z.string(),
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/quizzes/{quiz_id}/submissions/{id}/complete")
});

export const completeQuizSubmissionTurnItInResponsesSchema = z.object({
    200: z.unknown()
});

export const retrieveCapturedEventsDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string(),
        quiz_id: z.string(),
        id: z.string()
    }),
    query: z.object({
        attempt: z.number().optional()
    }).optional(),
    url: z.literal("/v1/courses/{course_id}/quizzes/{quiz_id}/submissions/{id}/events")
});

export const retrieveCapturedEventsResponsesSchema = z.object({
    200: z.unknown()
});

export const submitCapturedEventsDataSchema = z.object({
    body: z.object({
        quiz_submission_events: z.array(z.array(z.record(z.unknown())))
    }),
    path: z.object({
        course_id: z.string(),
        quiz_id: z.string(),
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/quizzes/{quiz_id}/submissions/{id}/events")
});

export const submitCapturedEventsResponsesSchema = z.object({
    200: z.unknown()
});

export const getCurrentQuizSubmissionTimesDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string(),
        quiz_id: z.string(),
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/quizzes/{quiz_id}/submissions/{id}/time")
});

export const getCurrentQuizSubmissionTimesResponsesSchema = z.object({
    200: z.unknown()
});

export const listRecentlyLoggedInStudentsDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string()
    }),
    query: z.object({
        page: z.string().optional(),
        per_page: z.number().optional()
    }).optional(),
    url: z.literal("/v1/courses/{course_id}/recent_students")
});

export const resetCourseDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/reset_content")
});

export const redirectToRootOutcomeGroupForContextCoursesDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/root_outcome_group")
});

export const redirectToRootOutcomeGroupForContextCoursesResponsesSchema = z.object({
    200: z.unknown()
});

export const listRubricsCoursesDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string()
    }),
    query: z.object({
        page: z.string().optional(),
        per_page: z.number().optional()
    }).optional(),
    url: z.literal("/v1/courses/{course_id}/rubrics")
});

export const listRubricsCoursesResponsesSchema = z.object({
    200: z.unknown()
});

export const getSingleRubricCoursesDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string(),
        id: z.string()
    }),
    query: z.object({
        include: z.union([z.literal("assessments"), z.literal("graded_assessments"), z.literal("peer_assessments")]).optional(),
        style: z.union([z.literal("full"), z.literal("comments_only")]).optional()
    }).optional(),
    url: z.literal("/v1/courses/{course_id}/rubrics/{id}")
});

export const getSingleRubricCoursesResponsesSchema = z.object({
    200: rubricSchema
});

export const getSingleRubricCoursesResponseSchema = getSingleRubricCoursesResponsesSchema.shape["keyof GetSingleRubricCoursesResponses"];

export const listUsersInCourseSearchUsersDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string()
    }),
    query: z.object({
        page: z.string().optional(),
        per_page: z.number().optional(),
        search_term: z.string().optional(),
        enrollment_type: z.array(z.union([z.literal("teacher"), z.literal("student"), z.literal("student_view"), z.literal("ta"), z.literal("observer"), z.literal("designer")])).optional(),
        enrollment_role: z.string().optional(),
        enrollment_role_id: z.number().optional(),
        include: z.array(z.union([z.literal("email"), z.literal("enrollments"), z.literal("locked"), z.literal("avatar_url"), z.literal("test_student"), z.literal("bio"), z.literal("custom_links"), z.literal("current_grading_period_scores")])).optional(),
        user_id: z.string().optional(),
        user_ids: z.array(z.number()).optional(),
        enrollment_state: z.array(z.union([z.literal("active"), z.literal("invited"), z.literal("rejected"), z.literal("completed"), z.literal("inactive")])).optional()
    }).optional(),
    url: z.literal("/v1/courses/{course_id}/search_users")
});

export const listCourseSectionsDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string()
    }),
    query: z.object({
        include: z.array(z.union([z.literal("students"), z.literal("avatar_url"), z.literal("enrollments"), z.literal("total_students"), z.literal("passback_status")])).optional(),
        page: z.string().optional(),
        per_page: z.number().optional()
    }).optional(),
    url: z.literal("/v1/courses/{course_id}/sections")
});

export const sectionSchema = z.object({
    course_id: z.number().optional().nullable(),
    end_at: z.string().optional().nullable(),
    id: z.number().optional(),
    integration_id: z.string().optional().nullable(),
    name: z.string().optional().nullable(),
    nonxlist_course_id: z.number().optional().nullable(),
    restrict_enrollments_to_section_dates: z.boolean().optional().nullable(),
    sis_course_id: z.string().optional().nullable(),
    sis_import_id: z.number().optional().nullable(),
    sis_section_id: z.string().optional().nullable(),
    start_at: z.string().optional().nullable(),
    students: z.array(userSectionIncludeSchema).optional().nullable(),
    total_students: z.number().optional().nullable()
});

export const listCourseSectionsResponsesSchema = z.object({
    200: z.array(sectionSchema)
});

export const createCourseSectionDataSchema = z.object({
    body: z.object({
        "course_section[end_at]": z.string().optional(),
        "course_section[integration_id]": z.string().optional(),
        "course_section[name]": z.string().optional(),
        "course_section[restrict_enrollments_to_section_dates]": z.boolean().optional(),
        "course_section[sis_section_id]": z.string().optional(),
        "course_section[start_at]": z.string().optional(),
        enable_sis_reactivation: z.boolean().optional()
    }).optional(),
    path: z.object({
        course_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/sections")
});

export const createCourseSectionResponsesSchema = z.object({
    200: sectionSchema
});

export const createCourseSectionResponseSchema = createCourseSectionResponsesSchema.shape["keyof CreateCourseSectionResponses"];

export const getSectionInformationCoursesDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string(),
        id: z.string()
    }),
    query: z.object({
        include: z.array(z.union([z.literal("students"), z.literal("avatar_url"), z.literal("enrollments"), z.literal("total_students"), z.literal("passback_status")])).optional()
    }).optional(),
    url: z.literal("/v1/courses/{course_id}/sections/{id}")
});

export const getSectionInformationCoursesResponsesSchema = z.object({
    200: sectionSchema
});

export const getSectionInformationCoursesResponseSchema = getSectionInformationCoursesResponsesSchema.shape["keyof GetSectionInformationCoursesResponses"];

export const getCourseSettingsDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/settings")
});

export const getCourseSettingsResponsesSchema = z.object({
    200: z.unknown()
});

export const updateCourseSettingsDataSchema = z.object({
    body: z.object({
        allow_student_discussion_editing: z.boolean().optional(),
        allow_student_discussion_topics: z.boolean().optional(),
        allow_student_forum_attachments: z.boolean().optional(),
        allow_student_organized_groups: z.boolean().optional(),
        hide_distribution_graphs: z.boolean().optional(),
        hide_final_grades: z.boolean().optional(),
        home_page_announcement_limit: z.number().optional(),
        lock_all_announcements: z.boolean().optional(),
        restrict_student_future_view: z.boolean().optional(),
        restrict_student_past_view: z.boolean().optional(),
        show_announcements_on_home_page: z.boolean().optional()
    }).optional(),
    path: z.object({
        course_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/settings")
});

export const updateCourseSettingsResponsesSchema = z.object({
    200: z.unknown()
});

export const listStudentsDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string()
    }),
    query: z.object({
        page: z.string().optional(),
        per_page: z.number().optional()
    }).optional(),
    url: z.literal("/v1/courses/{course_id}/students")
});

export const listSubmissionsForMultipleAssignmentsCoursesDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string()
    }),
    query: z.object({
        "student_ids[]": z.array(z.string()).optional(),
        assignment_ids: z.array(z.string()).optional(),
        grouped: z.boolean().optional(),
        post_to_sis: z.boolean().optional(),
        submitted_since: z.string().optional(),
        graded_since: z.string().optional(),
        grading_period_id: z.number().optional(),
        workflow_state: z.union([z.literal("submitted"), z.literal("unsubmitted"), z.literal("graded"), z.literal("pending_review")]).optional(),
        enrollment_state: z.union([z.literal("active"), z.literal("concluded")]).optional(),
        state_based_on_date: z.boolean().optional(),
        order: z.union([z.literal("id"), z.literal("graded_at")]).optional(),
        order_direction: z.union([z.literal("ascending"), z.literal("descending")]).optional(),
        "include[]": z.array(z.union([z.literal("submission_history"), z.literal("submission_comments"), z.literal("rubric_assessment"), z.literal("assignment"), z.literal("total_scores"), z.literal("visibility"), z.literal("course"), z.literal("user")])).optional(),
        page: z.string().optional(),
        per_page: z.number().optional()
    }).optional(),
    url: z.literal("/v1/courses/{course_id}/students/submissions")
});

export const gradeOrCommentOnMultipleSubmissionsCoursesSubmissionsDataSchema = z.object({
    body: z.object({
        "grade_data[student_id][assignment_id]": z.number().optional(),
        "grade_data[student_id][excuse]": z.boolean().optional(),
        "grade_data[student_id][file_ids]": z.array(z.number()).optional(),
        "grade_data[student_id][group_comment]": z.boolean().optional(),
        "grade_data[student_id][media_comment_id]": z.string().optional(),
        "grade_data[student_id][media_comment_type]": z.union([z.literal("audio"), z.literal("video")]).optional(),
        "grade_data[student_id][posted_grade]": z.string().optional(),
        "grade_data[student_id][rubric_assessment]": z.unknown().optional(),
        "grade_data[student_id][text_comment]": z.string().optional()
    }).optional(),
    path: z.object({
        course_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/submissions/update_grades")
});

export const gradeOrCommentOnMultipleSubmissionsCoursesSubmissionsResponsesSchema = z.object({
    200: progressSchema
});

export const gradeOrCommentOnMultipleSubmissionsCoursesSubmissionsResponseSchema = gradeOrCommentOnMultipleSubmissionsCoursesSubmissionsResponsesSchema.shape["keyof GradeOrCommentOnMultipleSubmissionsCoursesSubmissionsResponses"];

export const listAvailableTabsForCourseOrGroupCoursesDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string()
    }),
    query: z.object({
        include: z.array(z.literal("external")).optional(),
        page: z.string().optional(),
        per_page: z.number().optional()
    }).optional(),
    url: z.literal("/v1/courses/{course_id}/tabs")
});

export const listAvailableTabsForCourseOrGroupCoursesResponsesSchema = z.object({
    200: z.unknown()
});

export const updateTabForCourseDataSchema = z.object({
    body: z.object({
        hidden: z.boolean().optional(),
        position: z.number().optional()
    }).optional(),
    path: z.object({
        course_id: z.string(),
        tab_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/tabs/{tab_id}")
});

export const updateTabForCourseResponsesSchema = z.object({
    200: tabSchema
});

export const updateTabForCourseResponseSchema = updateTabForCourseResponsesSchema.shape["keyof UpdateTabForCourseResponses"];

export const courseTodoItemsDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/todo")
});

export const courseTodoItemsResponsesSchema = z.object({
    200: z.unknown()
});

export const removeUsageRightsCoursesDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string()
    }),
    query: z.object({
        file_ids: z.array(z.string()),
        folder_ids: z.array(z.string()).optional()
    }),
    url: z.literal("/v1/courses/{course_id}/usage_rights")
});

export const removeUsageRightsCoursesResponsesSchema = z.object({
    200: z.unknown()
});

export const setUsageRightsCoursesDataSchema = z.object({
    body: z.object({
        file_ids: z.array(z.string()),
        folder_ids: z.array(z.string()).optional(),
        publish: z.boolean().optional(),
        "usage_rights[legal_copyright]": z.string().optional(),
        "usage_rights[license]": z.string().optional(),
        "usage_rights[use_justification]": z.union([z.literal("own_copyright"), z.literal("used_by_permission"), z.literal("fair_use"), z.literal("public_domain"), z.literal("creative_commons")])
    }),
    path: z.object({
        course_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/usage_rights")
});

export const setUsageRightsCoursesResponsesSchema = z.object({
    200: usageRightsSchema
});

export const setUsageRightsCoursesResponseSchema = setUsageRightsCoursesResponsesSchema.shape["keyof SetUsageRightsCoursesResponses"];

export const listUsersInCourseUsersDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string()
    }),
    query: z.object({
        page: z.number().optional(),
        per_page: z.number().optional(),
        search_term: z.string().optional(),
        "enrollment_type[]": z.array(z.union([z.literal("teacher"), z.literal("student"), z.literal("student_view"), z.literal("ta"), z.literal("observer"), z.literal("designer")])).optional(),
        enrollment_role: z.string().optional(),
        enrollment_role_id: z.number().optional(),
        "include[]": z.array(z.union([z.literal("email"), z.literal("enrollments"), z.literal("locked"), z.literal("avatar_url"), z.literal("test_student"), z.literal("bio"), z.literal("custom_links"), z.literal("current_grading_period_scores"), z.literal("sections")])).optional(),
        user_id: z.string().optional(),
        "user_ids[]": z.array(z.number()).optional(),
        "enrollment_state[]": z.array(z.union([z.literal("active"), z.literal("invited"), z.literal("rejected"), z.literal("completed"), z.literal("inactive")])).optional()
    }).optional(),
    url: z.literal("/v1/courses/{course_id}/users")
});

export const getSingleUserDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string(),
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/users/{id}")
});

export const addsLastAttendedDateToStudentEnrollmentInCourseDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string(),
        user_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{course_id}/users/{user_id}/last_attended")
});

export const deleteConcludeCourseDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        id: z.string()
    }),
    query: z.object({
        event: z.union([z.literal("delete"), z.literal("conclude")])
    }),
    url: z.literal("/v1/courses/{id}")
});

export const deleteConcludeCourseResponsesSchema = z.object({
    200: z.unknown()
});

export const getSingleCourseCoursesDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        id: z.string()
    }),
    query: z.object({
        include: z.array(z.union([z.literal("needs_grading_count"), z.literal("syllabus_body"), z.literal("public_description"), z.literal("total_scores"), z.literal("current_grading_period_scores"), z.literal("term"), z.literal("account"), z.literal("course_progress"), z.literal("sections"), z.literal("storage_quota_used_mb"), z.literal("total_students"), z.literal("passback_status"), z.literal("favorites"), z.literal("teachers"), z.literal("observed_users"), z.literal("all_courses"), z.literal("permissions"), z.literal("course_image")])).optional()
    }).optional(),
    url: z.literal("/v1/courses/{id}")
});

export const updateCourseDataSchema = z.object({
    body: z.object({
        "course[account_id]": z.number().optional(),
        "course[allow_student_forum_attachments]": z.boolean().optional(),
        "course[allow_student_wiki_edits]": z.boolean().optional(),
        "course[allow_wiki_comments]": z.boolean().optional(),
        "course[apply_assignment_group_weights]": z.boolean().optional(),
        "course[blueprint]": z.boolean().optional(),
        "course[blueprint_restrictions]": z.unknown().optional(),
        "course[blueprint_restrictions_by_object_type]": z.unknown().optional(),
        "course[course_code]": z.string().optional(),
        "course[course_format]": z.string().optional(),
        "course[default_view]": z.union([z.literal("feed"), z.literal("wiki"), z.literal("modules"), z.literal("syllabus"), z.literal("assignments")]).optional(),
        "course[end_at]": z.string().optional(),
        "course[event]": z.union([z.literal("claim"), z.literal("offer"), z.literal("conclude"), z.literal("delete"), z.literal("undelete")]).optional(),
        "course[grading_standard_id]": z.number().optional(),
        "course[hide_final_grades]": z.boolean().optional(),
        "course[image_id]": z.number().optional(),
        "course[image_url]": z.string().optional(),
        "course[integration_id]": z.string().optional(),
        "course[is_public]": z.boolean().optional(),
        "course[is_public_to_auth_users]": z.boolean().optional(),
        "course[license]": z.string().optional(),
        "course[name]": z.string().optional(),
        "course[open_enrollment]": z.boolean().optional(),
        "course[public_description]": z.string().optional(),
        "course[public_syllabus]": z.boolean().optional(),
        "course[public_syllabus_to_auth]": z.boolean().optional(),
        "course[remove_image]": z.boolean().optional(),
        "course[restrict_enrollments_to_course_dates]": z.boolean().optional(),
        "course[self_enrollment]": z.boolean().optional(),
        "course[sis_course_id]": z.string().optional(),
        "course[start_at]": z.string().optional(),
        "course[storage_quota_mb]": z.number().optional(),
        "course[syllabus_body]": z.string().optional(),
        "course[term_id]": z.number().optional(),
        "course[time_zone]": z.string().optional(),
        "course[use_blueprint_restrictions_by_object_type]": z.boolean().optional(),
        offer: z.boolean().optional()
    }).optional(),
    path: z.object({
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{id}")
});

export const updateCourseResponsesSchema = z.object({
    200: z.unknown()
});

export const getLatePolicyDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{id}/late_policy")
});

export const getLatePolicyResponsesSchema = z.object({
    200: z.unknown()
});

export const patchLatePolicyDataSchema = z.object({
    body: z.object({
        "late_policy[late_submission_deduction]": z.number().optional(),
        "late_policy[late_submission_deduction_enabled]": z.boolean().optional(),
        "late_policy[late_submission_interval]": z.string().optional(),
        "late_policy[late_submission_minimum_percent]": z.number().optional(),
        "late_policy[late_submission_minimum_percent_enabled]": z.boolean().optional(),
        "late_policy[missing_submission_deduction]": z.number().optional(),
        "late_policy[missing_submission_deduction_enabled]": z.boolean().optional()
    }).optional(),
    path: z.object({
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{id}/late_policy")
});

export const patchLatePolicyResponsesSchema = z.object({
    200: z.unknown()
});

export const createLatePolicyDataSchema = z.object({
    body: z.object({
        "late_policy[late_submission_deduction]": z.number().optional(),
        "late_policy[late_submission_deduction_enabled]": z.boolean().optional(),
        "late_policy[late_submission_interval]": z.string().optional(),
        "late_policy[late_submission_minimum_percent]": z.number().optional(),
        "late_policy[late_submission_minimum_percent_enabled]": z.boolean().optional(),
        "late_policy[missing_submission_deduction]": z.number().optional(),
        "late_policy[missing_submission_deduction_enabled]": z.boolean().optional()
    }).optional(),
    path: z.object({
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/courses/{id}/late_policy")
});

export const createLatePolicyResponsesSchema = z.object({
    200: z.unknown()
});

export const listCoursesWithTheirLatestEpubExportDataSchema = z.object({
    body: z.never().optional(),
    path: z.never().optional(),
    query: z.never().optional(),
    url: z.literal("/v1/epub_exports")
});

export const courseEpubExportSchema = z.object({
    epub_export: epubExportNullableSchema.optional(),
    id: z.number().optional(),
    name: z.string().optional().nullable()
});

export const listCoursesWithTheirLatestEpubExportResponsesSchema = z.object({
    200: z.array(courseEpubExportSchema)
});

export const createErrorReportDataSchema = z.object({
    body: z.object({
        "error[comments]": z.string().optional(),
        "error[email]": z.string().optional(),
        "error[http_env]": z.unknown().optional(),
        "error[subject]": z.string(),
        "error[url]": z.string().optional()
    }),
    path: z.never().optional(),
    query: z.never().optional(),
    url: z.literal("/v1/error_reports")
});

export const createErrorReportResponsesSchema = z.object({
    200: z.unknown()
});

export const deleteFileDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        id: z.string()
    }),
    query: z.object({
        replace: z.boolean().optional()
    }).optional(),
    url: z.literal("/v1/files/{id}")
});

export const deleteFileResponsesSchema = z.object({
    200: fileSchema
});

export const deleteFileResponseSchema = deleteFileResponsesSchema.shape["keyof DeleteFileResponses"];

export const getFileFilesDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        id: z.string()
    }),
    query: z.object({
        include: z.array(z.literal("user")).optional()
    }).optional(),
    url: z.literal("/v1/files/{id}")
});

export const getFileFilesResponsesSchema = z.object({
    200: fileSchema
});

export const getFileFilesResponseSchema = getFileFilesResponsesSchema.shape["keyof GetFileFilesResponses"];

export const updateFileDataSchema = z.object({
    body: z.object({
        hidden: z.boolean().optional(),
        lock_at: z.string().optional(),
        locked: z.boolean().optional(),
        name: z.string().optional(),
        on_duplicate: z.union([z.literal("overwrite"), z.literal("rename")]).optional(),
        parent_folder_id: z.string().optional(),
        unlock_at: z.string().optional()
    }).optional(),
    path: z.object({
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/files/{id}")
});

export const updateFileResponsesSchema = z.object({
    200: fileSchema
});

export const updateFileResponseSchema = updateFileResponsesSchema.shape["keyof UpdateFileResponses"];

export const getPublicInlinePreviewUrlDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        id: z.string()
    }),
    query: z.object({
        submission_id: z.number().optional()
    }).optional(),
    url: z.literal("/v1/files/{id}/public_url")
});

export const getPublicInlinePreviewUrlResponsesSchema = z.object({
    200: z.unknown()
});

export const copyFileDataSchema = z.object({
    body: z.object({
        on_duplicate: z.union([z.literal("overwrite"), z.literal("rename")]).optional(),
        source_file_id: z.string()
    }),
    path: z.object({
        dest_folder_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/folders/{dest_folder_id}/copy_file")
});

export const copyFileResponsesSchema = z.object({
    200: fileSchema
});

export const copyFileResponseSchema = copyFileResponsesSchema.shape["keyof CopyFileResponses"];

export const copyFolderDataSchema = z.object({
    body: z.object({
        source_folder_id: z.string()
    }),
    path: z.object({
        dest_folder_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/folders/{dest_folder_id}/copy_folder")
});

export const copyFolderResponsesSchema = z.object({
    200: folderSchema
});

export const copyFolderResponseSchema = copyFolderResponsesSchema.shape["keyof CopyFolderResponses"];

export const uploadFileToFolderDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        folder_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/folders/{folder_id}/files")
});

export const uploadFileToFolderResponsesSchema = z.object({
    200: z.unknown()
});

export const createFolderFoldersDataSchema = z.object({
    body: z.object({
        hidden: z.boolean().optional(),
        lock_at: z.string().optional(),
        locked: z.boolean().optional(),
        name: z.string(),
        parent_folder_id: z.string().optional(),
        parent_folder_path: z.string().optional(),
        position: z.number().optional(),
        unlock_at: z.string().optional()
    }),
    path: z.object({
        folder_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/folders/{folder_id}/folders")
});

export const createFolderFoldersResponsesSchema = z.object({
    200: folderSchema
});

export const createFolderFoldersResponseSchema = createFolderFoldersResponsesSchema.shape["keyof CreateFolderFoldersResponses"];

export const deleteFolderDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        id: z.string()
    }),
    query: z.object({
        force: z.boolean().optional()
    }).optional(),
    url: z.literal("/v1/folders/{id}")
});

export const deleteFolderResponsesSchema = z.object({
    200: z.unknown()
});

export const getFolderFoldersDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/folders/{id}")
});

export const getFolderFoldersResponsesSchema = z.object({
    200: folderSchema
});

export const getFolderFoldersResponseSchema = getFolderFoldersResponsesSchema.shape["keyof GetFolderFoldersResponses"];

export const updateFolderDataSchema = z.object({
    body: z.object({
        hidden: z.boolean().optional(),
        lock_at: z.string().optional(),
        locked: z.boolean().optional(),
        name: z.string().optional(),
        parent_folder_id: z.string().optional(),
        position: z.number().optional(),
        unlock_at: z.string().optional()
    }).optional(),
    path: z.object({
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/folders/{id}")
});

export const updateFolderResponsesSchema = z.object({
    200: folderSchema
});

export const updateFolderResponseSchema = updateFolderResponsesSchema.shape["keyof UpdateFolderResponses"];

export const listFilesFoldersDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        id: z.string()
    }),
    query: z.object({
        content_types: z.array(z.string()).optional(),
        search_term: z.string().optional(),
        include: z.array(z.literal("user")).optional(),
        only: z.array(z.array(z.record(z.unknown()))).optional(),
        sort: z.union([z.literal("name"), z.literal("size"), z.literal("created_at"), z.literal("updated_at"), z.literal("content_type"), z.literal("user")]).optional(),
        order: z.union([z.literal("asc"), z.literal("desc")]).optional(),
        page: z.string().optional(),
        per_page: z.number().optional()
    }).optional(),
    url: z.literal("/v1/folders/{id}/files")
});

export const listFilesFoldersResponsesSchema = z.object({
    200: z.array(fileSchema)
});

export const listFilesFoldersResponseSchema = listFilesFoldersResponsesSchema.shape["keyof ListFilesFoldersResponses"];

export const listFoldersDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        id: z.string()
    }),
    query: z.object({
        page: z.string().optional(),
        per_page: z.number().optional()
    }).optional(),
    url: z.literal("/v1/folders/{id}/folders")
});

export const listFoldersResponsesSchema = z.object({
    200: z.array(folderSchema)
});

export const listFoldersResponseSchema = listFoldersResponsesSchema.shape["keyof ListFoldersResponses"];

export const deleteOutcomeGroupGlobalDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/global/outcome_groups/{id}")
});

export const deleteOutcomeGroupGlobalResponsesSchema = z.object({
    200: outcomeGroupSchema
});

export const deleteOutcomeGroupGlobalResponseSchema = deleteOutcomeGroupGlobalResponsesSchema.shape["keyof DeleteOutcomeGroupGlobalResponses"];

export const showOutcomeGroupGlobalDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/global/outcome_groups/{id}")
});

export const showOutcomeGroupGlobalResponsesSchema = z.object({
    200: outcomeGroupSchema
});

export const showOutcomeGroupGlobalResponseSchema = showOutcomeGroupGlobalResponsesSchema.shape["keyof ShowOutcomeGroupGlobalResponses"];

export const updateOutcomeGroupGlobalDataSchema = z.object({
    body: z.object({
        description: z.string().optional(),
        parent_outcome_group_id: z.number().optional(),
        title: z.string().optional(),
        vendor_guid: z.string().optional()
    }).optional(),
    path: z.object({
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/global/outcome_groups/{id}")
});

export const updateOutcomeGroupGlobalResponsesSchema = z.object({
    200: outcomeGroupSchema
});

export const updateOutcomeGroupGlobalResponseSchema = updateOutcomeGroupGlobalResponsesSchema.shape["keyof UpdateOutcomeGroupGlobalResponses"];

export const importOutcomeGroupGlobalDataSchema = z.object({
    body: z.object({
        async: z.boolean().optional(),
        source_outcome_group_id: z.number()
    }),
    path: z.object({
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/global/outcome_groups/{id}/import")
});

export const importOutcomeGroupGlobalResponsesSchema = z.object({
    200: outcomeGroupSchema
});

export const importOutcomeGroupGlobalResponseSchema = importOutcomeGroupGlobalResponsesSchema.shape["keyof ImportOutcomeGroupGlobalResponses"];

export const listLinkedOutcomesGlobalDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        id: z.string()
    }),
    query: z.object({
        outcome_style: z.string().optional(),
        page: z.string().optional(),
        per_page: z.number().optional()
    }).optional(),
    url: z.literal("/v1/global/outcome_groups/{id}/outcomes")
});

export const listLinkedOutcomesGlobalResponsesSchema = z.object({
    200: z.array(outcomeLinkSchema)
});

export const listLinkedOutcomesGlobalResponseSchema = listLinkedOutcomesGlobalResponsesSchema.shape["keyof ListLinkedOutcomesGlobalResponses"];

export const createLinkOutcomeGlobalDataSchema = z.object({
    body: z.object({
        calculation_int: z.number().optional(),
        calculation_method: z.union([z.literal("decaying_average"), z.literal("n_mastery"), z.literal("latest"), z.literal("highest")]).optional(),
        description: z.string().optional(),
        display_name: z.string().optional(),
        mastery_points: z.number().optional(),
        move_from: z.number().optional(),
        outcome_id: z.number().optional(),
        "ratings[description]": z.array(z.string()).optional(),
        "ratings[points]": z.array(z.number()).optional(),
        title: z.string().optional(),
        vendor_guid: z.string().optional()
    }).optional(),
    path: z.object({
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/global/outcome_groups/{id}/outcomes")
});

export const createLinkOutcomeGlobalResponsesSchema = z.object({
    200: outcomeLinkSchema
});

export const createLinkOutcomeGlobalResponseSchema = createLinkOutcomeGlobalResponsesSchema.shape["keyof CreateLinkOutcomeGlobalResponses"];

export const unlinkOutcomeGlobalDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        id: z.string(),
        outcome_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/global/outcome_groups/{id}/outcomes/{outcome_id}")
});

export const unlinkOutcomeGlobalResponsesSchema = z.object({
    200: outcomeLinkSchema
});

export const unlinkOutcomeGlobalResponseSchema = unlinkOutcomeGlobalResponsesSchema.shape["keyof UnlinkOutcomeGlobalResponses"];

export const createLinkOutcomeGlobalOutcomeIdDataSchema = z.object({
    body: z.object({
        calculation_int: z.number().optional(),
        calculation_method: z.union([z.literal("decaying_average"), z.literal("n_mastery"), z.literal("latest"), z.literal("highest")]).optional(),
        description: z.string().optional(),
        display_name: z.string().optional(),
        mastery_points: z.number().optional(),
        move_from: z.number().optional(),
        "ratings[description]": z.array(z.string()).optional(),
        "ratings[points]": z.array(z.number()).optional(),
        title: z.string().optional(),
        vendor_guid: z.string().optional()
    }).optional(),
    path: z.object({
        id: z.string(),
        outcome_id: z.number()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/global/outcome_groups/{id}/outcomes/{outcome_id}")
});

export const createLinkOutcomeGlobalOutcomeIdResponsesSchema = z.object({
    200: outcomeLinkSchema
});

export const createLinkOutcomeGlobalOutcomeIdResponseSchema = createLinkOutcomeGlobalOutcomeIdResponsesSchema.shape["keyof CreateLinkOutcomeGlobalOutcomeIdResponses"];

export const listSubgroupsGlobalDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        id: z.string()
    }),
    query: z.object({
        page: z.string().optional(),
        per_page: z.number().optional()
    }).optional(),
    url: z.literal("/v1/global/outcome_groups/{id}/subgroups")
});

export const listSubgroupsGlobalResponsesSchema = z.object({
    200: z.array(outcomeGroupSchema)
});

export const listSubgroupsGlobalResponseSchema = listSubgroupsGlobalResponsesSchema.shape["keyof ListSubgroupsGlobalResponses"];

export const createSubgroupGlobalDataSchema = z.object({
    body: z.object({
        description: z.string().optional(),
        title: z.string(),
        vendor_guid: z.string().optional()
    }),
    path: z.object({
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/global/outcome_groups/{id}/subgroups")
});

export const createSubgroupGlobalResponsesSchema = z.object({
    200: outcomeGroupSchema
});

export const createSubgroupGlobalResponseSchema = createSubgroupGlobalResponsesSchema.shape["keyof CreateSubgroupGlobalResponses"];

export const redirectToRootOutcomeGroupForContextGlobalDataSchema = z.object({
    body: z.never().optional(),
    path: z.never().optional(),
    query: z.never().optional(),
    url: z.literal("/v1/global/root_outcome_group")
});

export const redirectToRootOutcomeGroupForContextGlobalResponsesSchema = z.object({
    200: z.unknown()
});

export const deleteGroupCategoryDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        group_category_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/group_categories/{group_category_id}")
});

export const deleteGroupCategoryResponsesSchema = z.object({
    200: z.unknown()
});

export const getSingleGroupCategoryDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        group_category_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/group_categories/{group_category_id}")
});

export const getSingleGroupCategoryResponsesSchema = z.object({
    200: groupCategorySchema
});

export const getSingleGroupCategoryResponseSchema = getSingleGroupCategoryResponsesSchema.shape["keyof GetSingleGroupCategoryResponses"];

export const updateGroupCategoryDataSchema = z.object({
    body: z.object({
        auto_leader: z.union([z.literal("first"), z.literal("random")]).optional(),
        create_group_count: z.number().optional(),
        group_limit: z.number().optional(),
        name: z.string().optional(),
        self_signup: z.union([z.literal("enabled"), z.literal("restricted")]).optional(),
        sis_group_category_id: z.string().optional(),
        split_group_count: z.string().optional()
    }).optional(),
    path: z.object({
        group_category_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/group_categories/{group_category_id}")
});

export const updateGroupCategoryResponsesSchema = z.object({
    200: groupCategorySchema
});

export const updateGroupCategoryResponseSchema = updateGroupCategoryResponsesSchema.shape["keyof UpdateGroupCategoryResponses"];

export const assignUnassignedMembersDataSchema = z.object({
    body: z.object({
        sync: z.boolean().optional()
    }).optional(),
    path: z.object({
        group_category_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/group_categories/{group_category_id}/assign_unassigned_members")
});

export const assignUnassignedMembersResponsesSchema = z.object({
    200: groupMembershipSchema
});

export const assignUnassignedMembersResponseSchema = assignUnassignedMembersResponsesSchema.shape["keyof AssignUnassignedMembersResponses"];

export const createGroupGroupCategoriesDataSchema = z.object({
    body: z.object({
        description: z.string().optional(),
        is_public: z.boolean().optional(),
        join_level: z.union([z.literal("parent_context_auto_join"), z.literal("parent_context_request"), z.literal("invitation_only")]).optional(),
        name: z.string().optional(),
        sis_group_id: z.string().optional(),
        storage_quota_mb: z.number().optional()
    }).optional(),
    path: z.object({
        group_category_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/group_categories/{group_category_id}/groups")
});

export const createGroupGroupCategoriesResponsesSchema = z.object({
    200: groupSchema
});

export const createGroupGroupCategoriesResponseSchema = createGroupGroupCategoriesResponsesSchema.shape["keyof CreateGroupGroupCategoriesResponses"];

export const listUsersInGroupCategoryDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        group_category_id: z.string()
    }),
    query: z.object({
        search_term: z.string().optional(),
        unassigned: z.boolean().optional(),
        page: z.string().optional(),
        per_page: z.number().optional()
    }).optional(),
    url: z.literal("/v1/group_categories/{group_category_id}/users")
});

export const createGroupGroupsDataSchema = z.object({
    body: z.object({
        description: z.string().optional(),
        is_public: z.boolean().optional(),
        join_level: z.union([z.literal("parent_context_auto_join"), z.literal("parent_context_request"), z.literal("invitation_only")]).optional(),
        name: z.string().optional(),
        sis_group_id: z.string().optional(),
        storage_quota_mb: z.number().optional()
    }).optional(),
    path: z.never().optional(),
    query: z.never().optional(),
    url: z.literal("/v1/groups")
});

export const createGroupGroupsResponsesSchema = z.object({
    200: groupSchema
});

export const createGroupGroupsResponseSchema = createGroupGroupsResponsesSchema.shape["keyof CreateGroupGroupsResponses"];

export const deleteGroupDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        group_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/groups/{group_id}")
});

export const deleteGroupResponsesSchema = z.object({
    200: groupSchema
});

export const deleteGroupResponseSchema = deleteGroupResponsesSchema.shape["keyof DeleteGroupResponses"];

export const getSingleGroupDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        group_id: z.string()
    }),
    query: z.object({
        include: z.array(z.union([z.literal("permissions"), z.literal("tabs")])).optional()
    }).optional(),
    url: z.literal("/v1/groups/{group_id}")
});

export const getSingleGroupResponsesSchema = z.object({
    200: groupSchema
});

export const getSingleGroupResponseSchema = getSingleGroupResponsesSchema.shape["keyof GetSingleGroupResponses"];

export const editGroupDataSchema = z.object({
    body: z.object({
        avatar_id: z.number().optional(),
        description: z.string().optional(),
        is_public: z.boolean().optional(),
        join_level: z.union([z.literal("parent_context_auto_join"), z.literal("parent_context_request"), z.literal("invitation_only")]).optional(),
        members: z.array(z.string()).optional(),
        name: z.string().optional(),
        sis_group_id: z.string().optional(),
        storage_quota_mb: z.number().optional()
    }).optional(),
    path: z.object({
        group_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/groups/{group_id}")
});

export const editGroupResponsesSchema = z.object({
    200: groupSchema
});

export const editGroupResponseSchema = editGroupResponsesSchema.shape["keyof EditGroupResponses"];

export const groupActivityStreamDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        group_id: z.string()
    }),
    query: z.object({
        page: z.string().optional(),
        per_page: z.number().optional()
    }).optional(),
    url: z.literal("/v1/groups/{group_id}/activity_stream")
});

export const groupActivityStreamResponsesSchema = z.object({
    200: z.unknown()
});

export const groupActivityStreamSummaryDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        group_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/groups/{group_id}/activity_stream/summary")
});

export const groupActivityStreamSummaryResponsesSchema = z.object({
    200: z.unknown()
});

export const redirectToAssignmentOverrideForGroupDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        group_id: z.string(),
        assignment_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/groups/{group_id}/assignments/{assignment_id}/override")
});

export const redirectToAssignmentOverrideForGroupResponsesSchema = z.object({
    200: z.unknown()
});

export const listCollaborationsGroupsDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        group_id: z.string()
    }),
    query: z.object({
        page: z.string().optional(),
        per_page: z.number().optional()
    }).optional(),
    url: z.literal("/v1/groups/{group_id}/collaborations")
});

export const listCollaborationsGroupsResponsesSchema = z.object({
    200: z.array(collaborationSchema)
});

export const listCollaborationsGroupsResponseSchema = listCollaborationsGroupsResponsesSchema.shape["keyof ListCollaborationsGroupsResponses"];

export const listConferencesGroupsDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        group_id: z.string()
    }),
    query: z.object({
        page: z.string().optional(),
        per_page: z.number().optional()
    }).optional(),
    url: z.literal("/v1/groups/{group_id}/conferences")
});

export const listConferencesGroupsResponsesSchema = z.object({
    200: z.array(conferenceSchema)
});

export const listConferencesGroupsResponseSchema = listConferencesGroupsResponsesSchema.shape["keyof ListConferencesGroupsResponses"];

export const listContentExportsGroupsDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        group_id: z.string()
    }),
    query: z.object({
        page: z.string().optional(),
        per_page: z.number().optional()
    }).optional(),
    url: z.literal("/v1/groups/{group_id}/content_exports")
});

export const listContentExportsGroupsResponsesSchema = z.object({
    200: z.array(contentExportSchema)
});

export const listContentExportsGroupsResponseSchema = listContentExportsGroupsResponsesSchema.shape["keyof ListContentExportsGroupsResponses"];

export const exportContentGroupsDataSchema = z.object({
    body: z.object({
        export_type: z.union([z.literal("common_cartridge"), z.literal("qti"), z.literal("zip")]),
        select: z.union([z.literal("folders"), z.literal("files"), z.literal("attachments"), z.literal("quizzes"), z.literal("assignments"), z.literal("announcements"), z.literal("calendar_events"), z.literal("discussion_topics"), z.literal("modules"), z.literal("module_items"), z.literal("pages"), z.literal("rubrics")]).optional(),
        skip_notifications: z.boolean().optional()
    }),
    path: z.object({
        group_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/groups/{group_id}/content_exports")
});

export const exportContentGroupsResponsesSchema = z.object({
    200: contentExportSchema
});

export const exportContentGroupsResponseSchema = exportContentGroupsResponsesSchema.shape["keyof ExportContentGroupsResponses"];

export const showContentExportGroupsDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        group_id: z.string(),
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/groups/{group_id}/content_exports/{id}")
});

export const showContentExportGroupsResponsesSchema = z.object({
    200: contentExportSchema
});

export const showContentExportGroupsResponseSchema = showContentExportGroupsResponsesSchema.shape["keyof ShowContentExportGroupsResponses"];

export const listLicensesGroupsDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        group_id: z.string()
    }),
    query: z.object({
        page: z.string().optional(),
        per_page: z.number().optional()
    }).optional(),
    url: z.literal("/v1/groups/{group_id}/content_licenses")
});

export const listLicensesGroupsResponsesSchema = z.object({
    200: z.array(licenseSchema)
});

export const listLicensesGroupsResponseSchema = listLicensesGroupsResponsesSchema.shape["keyof ListLicensesGroupsResponses"];

export const listContentMigrationsGroupsDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        group_id: z.string()
    }),
    query: z.object({
        page: z.string().optional(),
        per_page: z.number().optional()
    }).optional(),
    url: z.literal("/v1/groups/{group_id}/content_migrations")
});

export const listContentMigrationsGroupsResponsesSchema = z.object({
    200: z.array(contentMigrationSchema)
});

export const listContentMigrationsGroupsResponseSchema = listContentMigrationsGroupsResponsesSchema.shape["keyof ListContentMigrationsGroupsResponses"];

export const createContentMigrationGroupsDataSchema = z.object({
    body: z.object({
        "date_shift_options[day_substitutions][X]": z.number().optional(),
        "date_shift_options[new_end_date]": z.string().optional(),
        "date_shift_options[new_start_date]": z.string().optional(),
        "date_shift_options[old_end_date]": z.string().optional(),
        "date_shift_options[old_start_date]": z.string().optional(),
        "date_shift_options[remove_dates]": z.boolean().optional(),
        "date_shift_options[shift_dates]": z.boolean().optional(),
        migration_type: z.string(),
        "pre_attachment[name]": z.string().optional(),
        "pre_attachment[todo]": z.string().optional(),
        "settings[file_url]": z.string().optional(),
        "settings[folder_id]": z.string().optional(),
        "settings[overwrite_quizzes]": z.boolean().optional(),
        "settings[question_bank_id]": z.number().optional(),
        "settings[question_bank_name]": z.string().optional(),
        "settings[source_course_id]": z.string().optional()
    }),
    path: z.object({
        group_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/groups/{group_id}/content_migrations")
});

export const createContentMigrationGroupsResponsesSchema = z.object({
    200: contentMigrationSchema
});

export const createContentMigrationGroupsResponseSchema = createContentMigrationGroupsResponsesSchema.shape["keyof CreateContentMigrationGroupsResponses"];

export const listMigrationSystemsGroupsDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        group_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/groups/{group_id}/content_migrations/migrators")
});

export const listMigrationSystemsGroupsResponsesSchema = z.object({
    200: z.array(migratorSchema)
});

export const listMigrationSystemsGroupsResponseSchema = listMigrationSystemsGroupsResponsesSchema.shape["keyof ListMigrationSystemsGroupsResponses"];

export const listMigrationIssuesGroupsDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        group_id: z.string(),
        content_migration_id: z.string()
    }),
    query: z.object({
        page: z.string().optional(),
        per_page: z.number().optional()
    }).optional(),
    url: z.literal("/v1/groups/{group_id}/content_migrations/{content_migration_id}/migration_issues")
});

export const listMigrationIssuesGroupsResponsesSchema = z.object({
    200: z.array(migrationIssueSchema)
});

export const listMigrationIssuesGroupsResponseSchema = listMigrationIssuesGroupsResponsesSchema.shape["keyof ListMigrationIssuesGroupsResponses"];

export const getMigrationIssueGroupsDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        group_id: z.string(),
        content_migration_id: z.string(),
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/groups/{group_id}/content_migrations/{content_migration_id}/migration_issues/{id}")
});

export const getMigrationIssueGroupsResponsesSchema = z.object({
    200: migrationIssueSchema
});

export const getMigrationIssueGroupsResponseSchema = getMigrationIssueGroupsResponsesSchema.shape["keyof GetMigrationIssueGroupsResponses"];

export const updateMigrationIssueGroupsDataSchema = z.object({
    body: z.object({
        workflow_state: z.union([z.literal("active"), z.literal("resolved")])
    }),
    path: z.object({
        group_id: z.string(),
        content_migration_id: z.string(),
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/groups/{group_id}/content_migrations/{content_migration_id}/migration_issues/{id}")
});

export const updateMigrationIssueGroupsResponsesSchema = z.object({
    200: migrationIssueSchema
});

export const updateMigrationIssueGroupsResponseSchema = updateMigrationIssueGroupsResponsesSchema.shape["keyof UpdateMigrationIssueGroupsResponses"];

export const getContentMigrationGroupsDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        group_id: z.string(),
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/groups/{group_id}/content_migrations/{id}")
});

export const getContentMigrationGroupsResponsesSchema = z.object({
    200: contentMigrationSchema
});

export const getContentMigrationGroupsResponseSchema = getContentMigrationGroupsResponsesSchema.shape["keyof GetContentMigrationGroupsResponses"];

export const updateContentMigrationGroupsDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        group_id: z.string(),
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/groups/{group_id}/content_migrations/{id}")
});

export const updateContentMigrationGroupsResponsesSchema = z.object({
    200: contentMigrationSchema
});

export const updateContentMigrationGroupsResponseSchema = updateContentMigrationGroupsResponsesSchema.shape["keyof UpdateContentMigrationGroupsResponses"];

export const listDiscussionTopicsGroupsDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        group_id: z.string()
    }),
    query: z.object({
        include: z.array(z.union([z.literal("all_dates"), z.literal("sections"), z.literal("sections_user_count"), z.literal("overrides")])).optional(),
        order_by: z.union([z.literal("position"), z.literal("recent_activity"), z.literal("title")]).optional(),
        scope: z.union([z.literal("locked"), z.literal("unlocked"), z.literal("pinned"), z.literal("unpinned")]).optional(),
        only_announcements: z.boolean().optional(),
        filter_by: z.union([z.literal("all"), z.literal("unread")]).optional(),
        search_term: z.string().optional(),
        exclude_context_module_locked_topics: z.boolean().optional(),
        page: z.string().optional(),
        per_page: z.number().optional()
    }).optional(),
    url: z.literal("/v1/groups/{group_id}/discussion_topics")
});

export const listDiscussionTopicsGroupsResponsesSchema = z.object({
    200: z.array(discussionTopicSchema)
});

export const listDiscussionTopicsGroupsResponseSchema = listDiscussionTopicsGroupsResponsesSchema.shape["keyof ListDiscussionTopicsGroupsResponses"];

export const createNewDiscussionTopicGroupsResponsesSchema = z.object({
    200: z.unknown()
});

export const reorderPinnedTopicsGroupsDataSchema = z.object({
    body: z.object({
        order: z.array(z.number())
    }),
    path: z.object({
        group_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/groups/{group_id}/discussion_topics/reorder")
});

export const reorderPinnedTopicsGroupsResponsesSchema = z.object({
    200: z.unknown()
});

export const deleteTopicGroupsDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        group_id: z.string(),
        topic_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/groups/{group_id}/discussion_topics/{topic_id}")
});

export const deleteTopicGroupsResponsesSchema = z.object({
    200: z.unknown()
});

export const getSingleTopicGroupsDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        group_id: z.string(),
        topic_id: z.string()
    }),
    query: z.object({
        include: z.array(z.union([z.literal("all_dates"), z.literal("sections"), z.literal("sections_user_count"), z.literal("overrides")])).optional()
    }).optional(),
    url: z.literal("/v1/groups/{group_id}/discussion_topics/{topic_id}")
});

export const getSingleTopicGroupsResponsesSchema = z.object({
    200: z.unknown()
});

export const updateTopicGroupsDataSchema = z.object({
    body: z.object({
        allow_rating: z.boolean().optional(),
        assignment: z.unknown().optional(),
        delayed_post_at: z.string().optional(),
        discussion_type: z.union([z.literal("side_comment"), z.literal("threaded")]).optional(),
        group_category_id: z.number().optional(),
        is_announcement: z.boolean().optional(),
        lock_at: z.string().optional(),
        message: z.string().optional(),
        only_graders_can_rate: z.boolean().optional(),
        pinned: z.boolean().optional(),
        podcast_enabled: z.boolean().optional(),
        podcast_has_student_posts: z.boolean().optional(),
        position_after: z.string().optional(),
        published: z.boolean().optional(),
        require_initial_post: z.boolean().optional(),
        sort_by_rating: z.boolean().optional(),
        specific_sections: z.string().optional(),
        title: z.string().optional()
    }).optional(),
    path: z.object({
        group_id: z.string(),
        topic_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/groups/{group_id}/discussion_topics/{topic_id}")
});

export const updateTopicGroupsResponsesSchema = z.object({
    200: z.unknown()
});

export const listTopicEntriesGroupsDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        group_id: z.string(),
        topic_id: z.string()
    }),
    query: z.object({
        page: z.string().optional(),
        per_page: z.number().optional()
    }).optional(),
    url: z.literal("/v1/groups/{group_id}/discussion_topics/{topic_id}/entries")
});

export const listTopicEntriesGroupsResponsesSchema = z.object({
    200: z.unknown()
});

export const postEntryGroupsDataSchema = z.object({
    body: z.object({
        attachment: z.string().optional(),
        message: z.string().optional()
    }).optional(),
    path: z.object({
        group_id: z.string(),
        topic_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/groups/{group_id}/discussion_topics/{topic_id}/entries")
});

export const postEntryGroupsResponsesSchema = z.object({
    200: z.unknown()
});

export const rateEntryGroupsDataSchema = z.object({
    body: z.object({
        rating: z.number().optional()
    }).optional(),
    path: z.object({
        group_id: z.string(),
        topic_id: z.string(),
        entry_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/groups/{group_id}/discussion_topics/{topic_id}/entries/{entry_id}/rating")
});

export const rateEntryGroupsResponsesSchema = z.object({
    200: z.unknown()
});

export const markEntryAsUnreadGroupsDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        group_id: z.string(),
        topic_id: z.string(),
        entry_id: z.string()
    }),
    query: z.object({
        forced_read_state: z.boolean().optional()
    }).optional(),
    url: z.literal("/v1/groups/{group_id}/discussion_topics/{topic_id}/entries/{entry_id}/read")
});

export const markEntryAsUnreadGroupsResponsesSchema = z.object({
    200: z.unknown()
});

export const markEntryAsReadGroupsDataSchema = z.object({
    body: z.object({
        forced_read_state: z.boolean().optional()
    }).optional(),
    path: z.object({
        group_id: z.string(),
        topic_id: z.string(),
        entry_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/groups/{group_id}/discussion_topics/{topic_id}/entries/{entry_id}/read")
});

export const markEntryAsReadGroupsResponsesSchema = z.object({
    200: z.unknown()
});

export const listEntryRepliesGroupsDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        group_id: z.string(),
        topic_id: z.string(),
        entry_id: z.string()
    }),
    query: z.object({
        page: z.string().optional(),
        per_page: z.number().optional()
    }).optional(),
    url: z.literal("/v1/groups/{group_id}/discussion_topics/{topic_id}/entries/{entry_id}/replies")
});

export const listEntryRepliesGroupsResponsesSchema = z.object({
    200: z.unknown()
});

export const postReplyGroupsDataSchema = z.object({
    body: z.object({
        attachment: z.string().optional(),
        message: z.string().optional()
    }).optional(),
    path: z.object({
        group_id: z.string(),
        topic_id: z.string(),
        entry_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/groups/{group_id}/discussion_topics/{topic_id}/entries/{entry_id}/replies")
});

export const postReplyGroupsResponsesSchema = z.object({
    200: z.unknown()
});

export const deleteEntryGroupsDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        group_id: z.string(),
        topic_id: z.string(),
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/groups/{group_id}/discussion_topics/{topic_id}/entries/{id}")
});

export const deleteEntryGroupsResponsesSchema = z.object({
    200: z.unknown()
});

export const updateEntryGroupsDataSchema = z.object({
    body: z.object({
        message: z.string().optional()
    }).optional(),
    path: z.object({
        group_id: z.string(),
        topic_id: z.string(),
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/groups/{group_id}/discussion_topics/{topic_id}/entries/{id}")
});

export const updateEntryGroupsResponsesSchema = z.object({
    200: z.unknown()
});

export const listEntriesGroupsDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        group_id: z.string(),
        topic_id: z.string()
    }),
    query: z.object({
        ids: z.array(z.string()).optional(),
        page: z.string().optional(),
        per_page: z.number().optional()
    }).optional(),
    url: z.literal("/v1/groups/{group_id}/discussion_topics/{topic_id}/entry_list")
});

export const listEntriesGroupsResponsesSchema = z.object({
    200: z.unknown()
});

export const markTopicAsUnreadGroupsDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        group_id: z.string(),
        topic_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/groups/{group_id}/discussion_topics/{topic_id}/read")
});

export const markTopicAsUnreadGroupsResponsesSchema = z.object({
    200: z.unknown()
});

export const markTopicAsReadGroupsDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        group_id: z.string(),
        topic_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/groups/{group_id}/discussion_topics/{topic_id}/read")
});

export const markTopicAsReadGroupsResponsesSchema = z.object({
    200: z.unknown()
});

export const markAllEntriesAsUnreadGroupsDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        group_id: z.string(),
        topic_id: z.string()
    }),
    query: z.object({
        forced_read_state: z.boolean().optional()
    }).optional(),
    url: z.literal("/v1/groups/{group_id}/discussion_topics/{topic_id}/read_all")
});

export const markAllEntriesAsUnreadGroupsResponsesSchema = z.object({
    200: z.unknown()
});

export const markAllEntriesAsReadGroupsDataSchema = z.object({
    body: z.object({
        forced_read_state: z.boolean().optional()
    }).optional(),
    path: z.object({
        group_id: z.string(),
        topic_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/groups/{group_id}/discussion_topics/{topic_id}/read_all")
});

export const markAllEntriesAsReadGroupsResponsesSchema = z.object({
    200: z.unknown()
});

export const unsubscribeFromTopicGroupsDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        group_id: z.string(),
        topic_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/groups/{group_id}/discussion_topics/{topic_id}/subscribed")
});

export const unsubscribeFromTopicGroupsResponsesSchema = z.object({
    200: z.unknown()
});

export const subscribeToTopicGroupsDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        group_id: z.string(),
        topic_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/groups/{group_id}/discussion_topics/{topic_id}/subscribed")
});

export const subscribeToTopicGroupsResponsesSchema = z.object({
    200: z.unknown()
});

export const getFullTopicGroupsDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        group_id: z.string(),
        topic_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/groups/{group_id}/discussion_topics/{topic_id}/view")
});

export const getFullTopicGroupsResponsesSchema = z.object({
    200: z.unknown()
});

export const listExternalFeedsGroupsDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        group_id: z.string()
    }),
    query: z.object({
        page: z.string().optional(),
        per_page: z.number().optional()
    }).optional(),
    url: z.literal("/v1/groups/{group_id}/external_feeds")
});

export const listExternalFeedsGroupsResponsesSchema = z.object({
    200: z.array(externalFeedSchema)
});

export const listExternalFeedsGroupsResponseSchema = listExternalFeedsGroupsResponsesSchema.shape["keyof ListExternalFeedsGroupsResponses"];

export const createExternalFeedGroupsDataSchema = z.object({
    body: z.object({
        header_match: z.boolean().optional(),
        url: z.string(),
        verbosity: z.union([z.literal("full"), z.literal("truncate"), z.literal("link_only")]).optional()
    }),
    path: z.object({
        group_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/groups/{group_id}/external_feeds")
});

export const createExternalFeedGroupsResponsesSchema = z.object({
    200: externalFeedSchema
});

export const createExternalFeedGroupsResponseSchema = createExternalFeedGroupsResponsesSchema.shape["keyof CreateExternalFeedGroupsResponses"];

export const deleteExternalFeedGroupsDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        group_id: z.string(),
        external_feed_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/groups/{group_id}/external_feeds/{external_feed_id}")
});

export const deleteExternalFeedGroupsResponsesSchema = z.object({
    200: externalFeedSchema
});

export const deleteExternalFeedGroupsResponseSchema = deleteExternalFeedGroupsResponsesSchema.shape["keyof DeleteExternalFeedGroupsResponses"];

export const listExternalToolsGroupsDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        group_id: z.string()
    }),
    query: z.object({
        search_term: z.string().optional(),
        selectable: z.boolean().optional(),
        include_parents: z.boolean().optional(),
        page: z.string().optional(),
        per_page: z.number().optional()
    }).optional(),
    url: z.literal("/v1/groups/{group_id}/external_tools")
});

export const listExternalToolsGroupsResponsesSchema = z.object({
    200: z.unknown()
});

export const uploadFileToGroupDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        group_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/groups/{group_id}/files")
});

export const uploadFileToGroupResponsesSchema = z.object({
    200: z.unknown()
});

export const getQuotaInformationGroupsDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        group_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/groups/{group_id}/files/quota")
});

export const getQuotaInformationGroupsResponsesSchema = z.object({
    200: z.unknown()
});

export const getFileGroupsDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        group_id: z.string(),
        id: z.string()
    }),
    query: z.object({
        include: z.array(z.literal("user")).optional()
    }).optional(),
    url: z.literal("/v1/groups/{group_id}/files/{id}")
});

export const getFileGroupsResponsesSchema = z.object({
    200: fileSchema
});

export const getFileGroupsResponseSchema = getFileGroupsResponsesSchema.shape["keyof GetFileGroupsResponses"];

export const listAllFoldersGroupsDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        group_id: z.string()
    }),
    query: z.object({
        page: z.string().optional(),
        per_page: z.number().optional()
    }).optional(),
    url: z.literal("/v1/groups/{group_id}/folders")
});

export const listAllFoldersGroupsResponsesSchema = z.object({
    200: z.array(folderSchema)
});

export const listAllFoldersGroupsResponseSchema = listAllFoldersGroupsResponsesSchema.shape["keyof ListAllFoldersGroupsResponses"];

export const createFolderGroupsDataSchema = z.object({
    body: z.object({
        hidden: z.boolean().optional(),
        lock_at: z.string().optional(),
        locked: z.boolean().optional(),
        name: z.string(),
        parent_folder_id: z.string().optional(),
        parent_folder_path: z.string().optional(),
        position: z.number().optional(),
        unlock_at: z.string().optional()
    }),
    path: z.object({
        group_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/groups/{group_id}/folders")
});

export const createFolderGroupsResponsesSchema = z.object({
    200: folderSchema
});

export const createFolderGroupsResponseSchema = createFolderGroupsResponsesSchema.shape["keyof CreateFolderGroupsResponses"];

export const resolvePathGroupsDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        group_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/groups/{group_id}/folders/by_path")
});

export const resolvePathGroupsResponsesSchema = z.object({
    200: z.array(folderSchema)
});

export const resolvePathGroupsResponseSchema = resolvePathGroupsResponsesSchema.shape["keyof ResolvePathGroupsResponses"];

export const resolvePathGroupsFullPathDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        group_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/groups/{group_id}/folders/by_path/*full_path")
});

export const resolvePathGroupsFullPathResponsesSchema = z.object({
    200: z.array(folderSchema)
});

export const resolvePathGroupsFullPathResponseSchema = resolvePathGroupsFullPathResponsesSchema.shape["keyof ResolvePathGroupsFullPathResponses"];

export const getFolderGroupsDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        group_id: z.string(),
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/groups/{group_id}/folders/{id}")
});

export const getFolderGroupsResponsesSchema = z.object({
    200: folderSchema
});

export const getFolderGroupsResponseSchema = getFolderGroupsResponsesSchema.shape["keyof GetFolderGroupsResponses"];

export const showFrontPageGroupsDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        group_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/groups/{group_id}/front_page")
});

export const updateCreateFrontPageGroupsDataSchema = z.object({
    body: z.object({
        "wiki_page[body]": z.string().optional(),
        "wiki_page[editing_roles]": z.union([z.literal("teachers"), z.literal("students"), z.literal("members"), z.literal("public")]).optional(),
        "wiki_page[notify_of_update]": z.boolean().optional(),
        "wiki_page[published]": z.boolean().optional(),
        "wiki_page[title]": z.string().optional()
    }).optional(),
    path: z.object({
        group_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/groups/{group_id}/front_page")
});

export const inviteOthersToGroupDataSchema = z.object({
    body: z.object({
        invitees: z.array(z.string())
    }),
    path: z.object({
        group_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/groups/{group_id}/invite")
});

export const inviteOthersToGroupResponsesSchema = z.object({
    200: z.unknown()
});

export const listGroupMembershipsDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        group_id: z.string()
    }),
    query: z.object({
        filter_states: z.array(z.union([z.literal("accepted"), z.literal("invited"), z.literal("requested")])).optional(),
        page: z.string().optional(),
        per_page: z.number().optional()
    }).optional(),
    url: z.literal("/v1/groups/{group_id}/memberships")
});

export const listGroupMembershipsResponsesSchema = z.object({
    200: z.array(groupMembershipSchema)
});

export const listGroupMembershipsResponseSchema = listGroupMembershipsResponsesSchema.shape["keyof ListGroupMembershipsResponses"];

export const createMembershipDataSchema = z.object({
    body: z.object({
        user_id: z.string().optional()
    }).optional(),
    path: z.object({
        group_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/groups/{group_id}/memberships")
});

export const createMembershipResponsesSchema = z.object({
    200: groupMembershipSchema
});

export const createMembershipResponseSchema = createMembershipResponsesSchema.shape["keyof CreateMembershipResponses"];

export const leaveGroupMembershipsDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        group_id: z.string(),
        membership_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/groups/{group_id}/memberships/{membership_id}")
});

export const leaveGroupMembershipsResponsesSchema = z.object({
    200: z.unknown()
});

export const getSingleGroupMembershipMembershipsDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        group_id: z.string(),
        membership_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/groups/{group_id}/memberships/{membership_id}")
});

export const getSingleGroupMembershipMembershipsResponsesSchema = z.object({
    200: groupMembershipSchema
});

export const getSingleGroupMembershipMembershipsResponseSchema = getSingleGroupMembershipMembershipsResponsesSchema.shape["keyof GetSingleGroupMembershipMembershipsResponses"];

export const updateMembershipMembershipsDataSchema = z.object({
    body: z.object({
        moderator: z.string().optional(),
        workflow_state: z.literal("accepted").optional()
    }).optional(),
    path: z.object({
        group_id: z.string(),
        membership_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/groups/{group_id}/memberships/{membership_id}")
});

export const updateMembershipMembershipsResponsesSchema = z.object({
    200: groupMembershipSchema
});

export const updateMembershipMembershipsResponseSchema = updateMembershipMembershipsResponsesSchema.shape["keyof UpdateMembershipMembershipsResponses"];

export const listPagesGroupsDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        group_id: z.string()
    }),
    query: z.object({
        sort: z.union([z.literal("title"), z.literal("created_at"), z.literal("updated_at")]).optional(),
        order: z.union([z.literal("asc"), z.literal("desc")]).optional(),
        search_term: z.string().optional(),
        published: z.boolean().optional(),
        page: z.string().optional(),
        per_page: z.number().optional()
    }).optional(),
    url: z.literal("/v1/groups/{group_id}/pages")
});

export const createPageGroupsDataSchema = z.object({
    body: z.object({
        "wiki_page[body]": z.string().optional(),
        "wiki_page[editing_roles]": z.union([z.literal("teachers"), z.literal("students"), z.literal("members"), z.literal("public")]).optional(),
        "wiki_page[front_page]": z.boolean().optional(),
        "wiki_page[notify_of_update]": z.boolean().optional(),
        "wiki_page[published]": z.boolean().optional(),
        "wiki_page[title]": z.string()
    }),
    path: z.object({
        group_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/groups/{group_id}/pages")
});

export const deletePageGroupsDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        group_id: z.string(),
        url: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/groups/{group_id}/pages/{url}")
});

export const showPageGroupsDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        group_id: z.string(),
        url: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/groups/{group_id}/pages/{url}")
});

export const updateCreatePageGroupsDataSchema = z.object({
    body: z.object({
        "wiki_page[body]": z.string().optional(),
        "wiki_page[editing_roles]": z.union([z.literal("teachers"), z.literal("students"), z.literal("members"), z.literal("public")]).optional(),
        "wiki_page[front_page]": z.boolean().optional(),
        "wiki_page[notify_of_update]": z.boolean().optional(),
        "wiki_page[published]": z.boolean().optional(),
        "wiki_page[title]": z.string().optional()
    }).optional(),
    path: z.object({
        group_id: z.string(),
        url: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/groups/{group_id}/pages/{url}")
});

export const listRevisionsGroupsDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        group_id: z.string(),
        url: z.string()
    }),
    query: z.object({
        page: z.string().optional(),
        per_page: z.number().optional()
    }).optional(),
    url: z.literal("/v1/groups/{group_id}/pages/{url}/revisions")
});

export const showRevisionGroupsLatestDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        group_id: z.string(),
        url: z.string()
    }),
    query: z.object({
        summary: z.boolean().optional()
    }).optional(),
    url: z.literal("/v1/groups/{group_id}/pages/{url}/revisions/latest")
});

export const showRevisionGroupsRevisionIdDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        group_id: z.string(),
        url: z.string(),
        revision_id: z.string()
    }),
    query: z.object({
        summary: z.boolean().optional()
    }).optional(),
    url: z.literal("/v1/groups/{group_id}/pages/{url}/revisions/{revision_id}")
});

export const revertToRevisionGroupsDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        group_id: z.string(),
        url: z.string(),
        revision_id: z.number()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/groups/{group_id}/pages/{url}/revisions/{revision_id}")
});

export const groupPermissionDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        group_id: z.string()
    }),
    query: z.object({
        permissions: z.array(z.string()).optional()
    }).optional(),
    url: z.literal("/v1/groups/{group_id}/permissions")
});

export const groupPermissionResponsesSchema = z.object({
    200: z.unknown()
});

export const listPotentialMembersGroupsDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        group_id: z.string()
    }),
    query: z.object({
        page: z.string().optional(),
        per_page: z.number().optional()
    }).optional(),
    url: z.literal("/v1/groups/{group_id}/potential_collaborators")
});

export const previewProcessedHtmlGroupDataSchema = z.object({
    body: z.object({
        html: z.string().optional()
    }).optional(),
    path: z.object({
        group_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/groups/{group_id}/preview_html")
});

export const previewProcessedHtmlGroupResponsesSchema = z.object({
    200: z.unknown()
});

export const listAvailableTabsForCourseOrGroupGroupsDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        group_id: z.string()
    }),
    query: z.object({
        include: z.array(z.literal("external")).optional(),
        page: z.string().optional(),
        per_page: z.number().optional()
    }).optional(),
    url: z.literal("/v1/groups/{group_id}/tabs")
});

export const listAvailableTabsForCourseOrGroupGroupsResponsesSchema = z.object({
    200: z.unknown()
});

export const removeUsageRightsGroupsDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        group_id: z.string()
    }),
    query: z.object({
        file_ids: z.array(z.string()),
        folder_ids: z.array(z.string()).optional()
    }),
    url: z.literal("/v1/groups/{group_id}/usage_rights")
});

export const removeUsageRightsGroupsResponsesSchema = z.object({
    200: z.unknown()
});

export const setUsageRightsGroupsDataSchema = z.object({
    body: z.object({
        file_ids: z.array(z.string()),
        folder_ids: z.array(z.string()).optional(),
        publish: z.boolean().optional(),
        "usage_rights[legal_copyright]": z.string().optional(),
        "usage_rights[license]": z.string().optional(),
        "usage_rights[use_justification]": z.union([z.literal("own_copyright"), z.literal("used_by_permission"), z.literal("fair_use"), z.literal("public_domain"), z.literal("creative_commons")])
    }),
    path: z.object({
        group_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/groups/{group_id}/usage_rights")
});

export const setUsageRightsGroupsResponsesSchema = z.object({
    200: usageRightsSchema
});

export const setUsageRightsGroupsResponseSchema = setUsageRightsGroupsResponsesSchema.shape["keyof SetUsageRightsGroupsResponses"];

export const listGroupSusersDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        group_id: z.string()
    }),
    query: z.object({
        search_term: z.string().optional(),
        include: z.array(z.literal("avatar_url")).optional(),
        page: z.string().optional(),
        per_page: z.number().optional()
    }).optional(),
    url: z.literal("/v1/groups/{group_id}/users")
});

export const leaveGroupUsersDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        group_id: z.string(),
        user_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/groups/{group_id}/users/{user_id}")
});

export const leaveGroupUsersResponsesSchema = z.object({
    200: z.unknown()
});

export const getSingleGroupMembershipUsersDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        group_id: z.string(),
        user_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/groups/{group_id}/users/{user_id}")
});

export const getSingleGroupMembershipUsersResponsesSchema = z.object({
    200: groupMembershipSchema
});

export const getSingleGroupMembershipUsersResponseSchema = getSingleGroupMembershipUsersResponsesSchema.shape["keyof GetSingleGroupMembershipUsersResponses"];

export const updateMembershipUsersDataSchema = z.object({
    body: z.object({
        moderator: z.string().optional(),
        workflow_state: z.literal("accepted").optional()
    }).optional(),
    path: z.object({
        group_id: z.string(),
        user_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/groups/{group_id}/users/{user_id}")
});

export const updateMembershipUsersResponsesSchema = z.object({
    200: groupMembershipSchema
});

export const updateMembershipUsersResponseSchema = updateMembershipUsersResponsesSchema.shape["keyof UpdateMembershipUsersResponses"];

export const createJwtDataSchema = z.object({
    body: z.never().optional(),
    path: z.never().optional(),
    query: z.never().optional(),
    url: z.literal("/v1/jwts")
});

export const createJwtResponsesSchema = z.object({
    200: jwtSchema
});

export const createJwtResponseSchema = createJwtResponsesSchema.shape["keyof CreateJwtResponses"];

export const refreshJwtDataSchema = z.object({
    body: z.object({
        jwt: z.string()
    }),
    path: z.never().optional(),
    query: z.never().optional(),
    url: z.literal("/v1/jwts/refresh")
});

export const refreshJwtResponsesSchema = z.object({
    200: jwtSchema
});

export const refreshJwtResponseSchema = refreshJwtResponsesSchema.shape["keyof RefreshJwtResponses"];

export const showOutcomeDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/outcomes/{id}")
});

export const showOutcomeResponsesSchema = z.object({
    200: outcomeSchema
});

export const showOutcomeResponseSchema = showOutcomeResponsesSchema.shape["keyof ShowOutcomeResponses"];

export const updateOutcomeDataSchema = z.object({
    body: z.object({
        calculation_int: z.number().optional(),
        calculation_method: z.union([z.literal("decaying_average"), z.literal("n_mastery"), z.literal("latest"), z.literal("highest")]).optional(),
        description: z.string().optional(),
        display_name: z.string().optional(),
        mastery_points: z.number().optional(),
        "ratings[description]": z.array(z.string()).optional(),
        "ratings[points]": z.array(z.number()).optional(),
        title: z.string().optional(),
        vendor_guid: z.string().optional()
    }).optional(),
    path: z.object({
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/outcomes/{id}")
});

export const updateOutcomeResponsesSchema = z.object({
    200: outcomeSchema
});

export const updateOutcomeResponseSchema = updateOutcomeResponsesSchema.shape["keyof UpdateOutcomeResponses"];

export const listPlannerItemsDataSchema = z.object({
    body: z.never().optional(),
    path: z.never().optional(),
    query: z.object({
        start_date: z.string().optional(),
        end_date: z.string().optional(),
        context_codes: z.array(z.string()).optional(),
        filter: z.literal("new_activity").optional(),
        page: z.string().optional(),
        per_page: z.number().optional()
    }).optional(),
    url: z.literal("/v1/planner/items")
});

export const listPlannerItemsResponsesSchema = z.object({
    200: z.unknown()
});

export const listPlannerOverridesDataSchema = z.object({
    body: z.never().optional(),
    path: z.never().optional(),
    query: z.never().optional(),
    url: z.literal("/v1/planner/overrides")
});

export const listPlannerOverridesResponsesSchema = z.object({
    200: z.array(plannerOverrideSchema)
});

export const listPlannerOverridesResponseSchema = listPlannerOverridesResponsesSchema.shape["keyof ListPlannerOverridesResponses"];

export const createPlannerOverrideDataSchema = z.object({
    body: z.object({
        dismissed: z.boolean().optional(),
        marked_complete: z.boolean().optional(),
        plannable_id: z.number().optional(),
        plannable_type: z.union([z.literal("announcement"), z.literal("assignment"), z.literal("discussion_topic"), z.literal("quiz"), z.literal("wiki_page"), z.literal("planner_note")]).optional()
    }).optional(),
    path: z.never().optional(),
    query: z.never().optional(),
    url: z.literal("/v1/planner/overrides")
});

export const createPlannerOverrideResponsesSchema = z.object({
    200: plannerOverrideSchema
});

export const createPlannerOverrideResponseSchema = createPlannerOverrideResponsesSchema.shape["keyof CreatePlannerOverrideResponses"];

export const deletePlannerOverrideDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/planner/overrides/{id}")
});

export const deletePlannerOverrideResponsesSchema = z.object({
    200: plannerOverrideSchema
});

export const deletePlannerOverrideResponseSchema = deletePlannerOverrideResponsesSchema.shape["keyof DeletePlannerOverrideResponses"];

export const showPlannerOverrideDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/planner/overrides/{id}")
});

export const showPlannerOverrideResponsesSchema = z.object({
    200: plannerOverrideSchema
});

export const showPlannerOverrideResponseSchema = showPlannerOverrideResponsesSchema.shape["keyof ShowPlannerOverrideResponses"];

export const updatePlannerOverrideDataSchema = z.object({
    body: z.object({
        dismissed: z.string().optional(),
        marked_complete: z.string().optional()
    }).optional(),
    path: z.object({
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/planner/overrides/{id}")
});

export const updatePlannerOverrideResponsesSchema = z.object({
    200: plannerOverrideSchema
});

export const updatePlannerOverrideResponseSchema = updatePlannerOverrideResponsesSchema.shape["keyof UpdatePlannerOverrideResponses"];

export const listPlannerNotesDataSchema = z.object({
    body: z.never().optional(),
    path: z.never().optional(),
    query: z.object({
        start_date: z.string().optional(),
        end_date: z.string().optional(),
        context_codes: z.array(z.string()).optional(),
        page: z.string().optional(),
        per_page: z.number().optional()
    }).optional(),
    url: z.literal("/v1/planner_notes")
});

export const listPlannerNotesResponsesSchema = z.object({
    200: z.array(plannerNoteSchema)
});

export const listPlannerNotesResponseSchema = listPlannerNotesResponsesSchema.shape["keyof ListPlannerNotesResponses"];

export const createPlannerNoteDataSchema = z.object({
    body: z.object({
        course_id: z.number().optional(),
        details: z.string().optional(),
        linked_object_id: z.number().optional(),
        linked_object_type: z.string().optional(),
        title: z.string().optional(),
        todo_date: z.string().optional()
    }).optional(),
    path: z.never().optional(),
    query: z.never().optional(),
    url: z.literal("/v1/planner_notes")
});

export const createPlannerNoteResponsesSchema = z.object({
    200: plannerNoteSchema
});

export const createPlannerNoteResponseSchema = createPlannerNoteResponsesSchema.shape["keyof CreatePlannerNoteResponses"];

export const deletePlannerNoteDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/planner_notes/{id}")
});

export const deletePlannerNoteResponsesSchema = z.object({
    200: plannerNoteSchema
});

export const deletePlannerNoteResponseSchema = deletePlannerNoteResponsesSchema.shape["keyof DeletePlannerNoteResponses"];

export const showPlannernoteDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/planner_notes/{id}")
});

export const showPlannernoteResponsesSchema = z.object({
    200: plannerNoteSchema
});

export const showPlannernoteResponseSchema = showPlannernoteResponsesSchema.shape["keyof ShowPlannernoteResponses"];

export const updatePlannernoteDataSchema = z.object({
    body: z.object({
        course_id: z.number().optional(),
        details: z.string().optional(),
        title: z.string().optional(),
        todo_date: z.string().optional()
    }).optional(),
    path: z.object({
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/planner_notes/{id}")
});

export const updatePlannernoteResponsesSchema = z.object({
    200: plannerNoteSchema
});

export const updatePlannernoteResponseSchema = updatePlannernoteResponsesSchema.shape["keyof UpdatePlannernoteResponses"];

export const listClosedPollSessionsDataSchema = z.object({
    body: z.never().optional(),
    path: z.never().optional(),
    query: z.never().optional(),
    url: z.literal("/v1/poll_sessions/closed")
});

export const listClosedPollSessionsResponsesSchema = z.object({
    200: z.unknown()
});

export const listOpenedPollSessionsDataSchema = z.object({
    body: z.never().optional(),
    path: z.never().optional(),
    query: z.never().optional(),
    url: z.literal("/v1/poll_sessions/opened")
});

export const listOpenedPollSessionsResponsesSchema = z.object({
    200: z.unknown()
});

export const listPollsDataSchema = z.object({
    body: z.never().optional(),
    path: z.never().optional(),
    query: z.never().optional(),
    url: z.literal("/v1/polls")
});

export const listPollsResponsesSchema = z.object({
    200: z.unknown()
});

export const createSinglePollDataSchema = z.object({
    body: z.object({
        "polls[description]": z.array(z.string()).optional(),
        "polls[question]": z.array(z.string())
    }),
    path: z.never().optional(),
    query: z.never().optional(),
    url: z.literal("/v1/polls")
});

export const createSinglePollResponsesSchema = z.object({
    200: z.unknown()
});

export const deletePollDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/polls/{id}")
});

export const deletePollResponsesSchema = z.object({
    200: z.unknown()
});

export const getSinglePollDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/polls/{id}")
});

export const getSinglePollResponsesSchema = z.object({
    200: z.unknown()
});

export const updateSinglePollDataSchema = z.object({
    body: z.object({
        "polls[description]": z.array(z.string()).optional(),
        "polls[question]": z.array(z.string())
    }),
    path: z.object({
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/polls/{id}")
});

export const updateSinglePollResponsesSchema = z.object({
    200: z.unknown()
});

export const listPollChoicesInPollDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        poll_id: z.string()
    }),
    query: z.object({
        page: z.string().optional(),
        per_page: z.number().optional()
    }).optional(),
    url: z.literal("/v1/polls/{poll_id}/poll_choices")
});

export const listPollChoicesInPollResponsesSchema = z.object({
    200: z.unknown()
});

export const createSinglePollChoiceDataSchema = z.object({
    body: z.object({
        "poll_choices[is_correct]": z.array(z.boolean()).optional(),
        "poll_choices[position]": z.array(z.number()).optional(),
        "poll_choices[text]": z.array(z.string())
    }),
    path: z.object({
        poll_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/polls/{poll_id}/poll_choices")
});

export const createSinglePollChoiceResponsesSchema = z.object({
    200: z.unknown()
});

export const deletePollChoiceDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        poll_id: z.string(),
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/polls/{poll_id}/poll_choices/{id}")
});

export const deletePollChoiceResponsesSchema = z.object({
    200: z.unknown()
});

export const getSinglePollChoiceDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        poll_id: z.string(),
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/polls/{poll_id}/poll_choices/{id}")
});

export const getSinglePollChoiceResponsesSchema = z.object({
    200: z.unknown()
});

export const updateSinglePollChoiceDataSchema = z.object({
    body: z.object({
        "poll_choices[is_correct]": z.array(z.boolean()).optional(),
        "poll_choices[position]": z.array(z.number()).optional(),
        "poll_choices[text]": z.array(z.string())
    }),
    path: z.object({
        poll_id: z.string(),
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/polls/{poll_id}/poll_choices/{id}")
});

export const updateSinglePollChoiceResponsesSchema = z.object({
    200: z.unknown()
});

export const listPollSessionsForPollDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        poll_id: z.string()
    }),
    query: z.object({
        page: z.string().optional(),
        per_page: z.number().optional()
    }).optional(),
    url: z.literal("/v1/polls/{poll_id}/poll_sessions")
});

export const listPollSessionsForPollResponsesSchema = z.object({
    200: z.unknown()
});

export const createSinglePollSessionDataSchema = z.object({
    body: z.object({
        "poll_sessions[course_id]": z.array(z.number()),
        "poll_sessions[course_section_id]": z.array(z.number()).optional(),
        "poll_sessions[has_public_results]": z.array(z.boolean()).optional()
    }),
    path: z.object({
        poll_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/polls/{poll_id}/poll_sessions")
});

export const createSinglePollSessionResponsesSchema = z.object({
    200: z.unknown()
});

export const deletePollSessionDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        poll_id: z.string(),
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/polls/{poll_id}/poll_sessions/{id}")
});

export const deletePollSessionResponsesSchema = z.object({
    200: z.unknown()
});

export const getResultsForSinglePollSessionDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        poll_id: z.string(),
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/polls/{poll_id}/poll_sessions/{id}")
});

export const getResultsForSinglePollSessionResponsesSchema = z.object({
    200: z.unknown()
});

export const updateSinglePollSessionDataSchema = z.object({
    body: z.object({
        "poll_sessions[course_id]": z.array(z.number()).optional(),
        "poll_sessions[course_section_id]": z.array(z.number()).optional(),
        "poll_sessions[has_public_results]": z.array(z.boolean()).optional()
    }).optional(),
    path: z.object({
        poll_id: z.string(),
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/polls/{poll_id}/poll_sessions/{id}")
});

export const updateSinglePollSessionResponsesSchema = z.object({
    200: z.unknown()
});

export const closeOpenedPollSessionDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        poll_id: z.string(),
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/polls/{poll_id}/poll_sessions/{id}/close")
});

export const closeOpenedPollSessionResponsesSchema = z.object({
    200: z.unknown()
});

export const openPollSessionDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        poll_id: z.string(),
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/polls/{poll_id}/poll_sessions/{id}/open")
});

export const openPollSessionResponsesSchema = z.object({
    200: z.unknown()
});

export const createSinglePollSubmissionDataSchema = z.object({
    body: z.object({
        "poll_submissions[poll_choice_id]": z.array(z.number())
    }),
    path: z.object({
        poll_id: z.string(),
        poll_session_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/polls/{poll_id}/poll_sessions/{poll_session_id}/poll_submissions")
});

export const createSinglePollSubmissionResponsesSchema = z.object({
    200: z.unknown()
});

export const getSinglePollSubmissionDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        poll_id: z.string(),
        poll_session_id: z.string(),
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/polls/{poll_id}/poll_sessions/{poll_session_id}/poll_submissions/{id}")
});

export const getSinglePollSubmissionResponsesSchema = z.object({
    200: z.unknown()
});

export const queryProgressDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/progress/{id}")
});

export const queryProgressResponsesSchema = z.object({
    200: progressSchema
});

export const queryProgressResponseSchema = queryProgressResponsesSchema.shape["keyof QueryProgressResponses"];

export const getAllQuizSubmissionQuestionsDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        quiz_submission_id: z.string()
    }),
    query: z.object({
        include: z.array(z.literal("quiz_question")).optional()
    }).optional(),
    url: z.literal("/v1/quiz_submissions/{quiz_submission_id}/questions")
});

export const getAllQuizSubmissionQuestionsResponsesSchema = z.object({
    200: z.unknown()
});

export const answeringQuestionsDataSchema = z.object({
    body: z.object({
        access_code: z.string().optional(),
        attempt: z.number(),
        quiz_questions: z.array(quizQuestionSchema).optional(),
        validation_token: z.string()
    }),
    path: z.object({
        quiz_submission_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/quiz_submissions/{quiz_submission_id}/questions")
});

export const answeringQuestionsResponsesSchema = z.object({
    200: z.array(quizSubmissionQuestionSchema)
});

export const answeringQuestionsResponseSchema = answeringQuestionsResponsesSchema.shape["keyof AnsweringQuestionsResponses"];

export const flaggingQuestionDataSchema = z.object({
    body: z.object({
        access_code: z.string().optional(),
        attempt: z.number(),
        validation_token: z.string()
    }),
    path: z.object({
        quiz_submission_id: z.string(),
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/quiz_submissions/{quiz_submission_id}/questions/{id}/flag")
});

export const flaggingQuestionResponsesSchema = z.object({
    200: z.unknown()
});

export const unflaggingQuestionDataSchema = z.object({
    body: z.object({
        access_code: z.string().optional(),
        attempt: z.number(),
        validation_token: z.string()
    }),
    path: z.object({
        quiz_submission_id: z.string(),
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/quiz_submissions/{quiz_submission_id}/questions/{id}/unflag")
});

export const unflaggingQuestionResponsesSchema = z.object({
    200: z.unknown()
});

export const listAllCoursesDataSchema = z.object({
    body: z.never().optional(),
    path: z.never().optional(),
    query: z.object({
        search: z.string().optional(),
        public_only: z.boolean().optional(),
        open_enrollment_only: z.boolean().optional(),
        page: z.string().optional(),
        per_page: z.number().optional()
    }).optional(),
    url: z.literal("/v1/search/all_courses")
});

export const findRecipientsSearchDataSchema = z.object({
    body: z.never().optional(),
    path: z.never().optional(),
    query: z.object({
        search: z.string().optional(),
        context: z.string().optional(),
        exclude: z.array(z.string()).optional(),
        type: z.union([z.literal("user"), z.literal("context")]).optional(),
        user_id: z.number().optional(),
        from_conversation_id: z.number().optional(),
        permissions: z.array(z.string()).optional()
    }).optional(),
    url: z.literal("/v1/search/recipients")
});

export const findRecipientsSearchResponsesSchema = z.object({
    200: z.unknown()
});

export const redirectToAssignmentOverrideForSectionDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_section_id: z.string(),
        assignment_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/sections/{course_section_id}/assignments/{assignment_id}/override")
});

export const redirectToAssignmentOverrideForSectionResponsesSchema = z.object({
    200: z.unknown()
});

export const deleteSectionDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/sections/{id}")
});

export const deleteSectionResponsesSchema = z.object({
    200: sectionSchema
});

export const deleteSectionResponseSchema = deleteSectionResponsesSchema.shape["keyof DeleteSectionResponses"];

export const getSectionInformationSectionsDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        id: z.string()
    }),
    query: z.object({
        include: z.array(z.union([z.literal("students"), z.literal("avatar_url"), z.literal("enrollments"), z.literal("total_students"), z.literal("passback_status")])).optional()
    }).optional(),
    url: z.literal("/v1/sections/{id}")
});

export const getSectionInformationSectionsResponsesSchema = z.object({
    200: sectionSchema
});

export const getSectionInformationSectionsResponseSchema = getSectionInformationSectionsResponsesSchema.shape["keyof GetSectionInformationSectionsResponses"];

export const editSectionDataSchema = z.object({
    body: z.object({
        "course_section[end_at]": z.string().optional(),
        "course_section[integration_id]": z.string().optional(),
        "course_section[name]": z.string().optional(),
        "course_section[restrict_enrollments_to_section_dates]": z.boolean().optional(),
        "course_section[sis_section_id]": z.string().optional(),
        "course_section[start_at]": z.string().optional()
    }).optional(),
    path: z.object({
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/sections/{id}")
});

export const editSectionResponsesSchema = z.object({
    200: sectionSchema
});

export const editSectionResponseSchema = editSectionResponsesSchema.shape["keyof EditSectionResponses"];

export const deCrossListSectionDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/sections/{id}/crosslist")
});

export const deCrossListSectionResponsesSchema = z.object({
    200: sectionSchema
});

export const deCrossListSectionResponseSchema = deCrossListSectionResponsesSchema.shape["keyof DeCrossListSectionResponses"];

export const crossListSectionDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        id: z.string(),
        new_course_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/sections/{id}/crosslist/{new_course_id}")
});

export const crossListSectionResponsesSchema = z.object({
    200: sectionSchema
});

export const crossListSectionResponseSchema = crossListSectionResponsesSchema.shape["keyof CrossListSectionResponses"];

export const getAllPeerReviewsSectionsPeerReviewsDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        section_id: z.string(),
        assignment_id: z.string()
    }),
    query: z.object({
        include: z.array(z.union([z.literal("submission_comments"), z.literal("user")])).optional()
    }).optional(),
    url: z.literal("/v1/sections/{section_id}/assignments/{assignment_id}/peer_reviews")
});

export const getAllPeerReviewsSectionsPeerReviewsResponsesSchema = z.object({
    200: z.array(peerReviewSchema)
});

export const getAllPeerReviewsSectionsPeerReviewsResponseSchema = getAllPeerReviewsSectionsPeerReviewsResponsesSchema.shape["keyof GetAllPeerReviewsSectionsPeerReviewsResponses"];

export const submissionSummarySectionsDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        section_id: z.string(),
        assignment_id: z.string()
    }),
    query: z.object({
        grouped: z.boolean().optional()
    }).optional(),
    url: z.literal("/v1/sections/{section_id}/assignments/{assignment_id}/submission_summary")
});

export const submissionSummarySectionsResponsesSchema = z.object({
    200: z.unknown()
});

export const listAssignmentSubmissionsSectionsDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        section_id: z.string(),
        assignment_id: z.string()
    }),
    query: z.object({
        include: z.array(z.union([z.literal("submission_history"), z.literal("submission_comments"), z.literal("rubric_assessment"), z.literal("assignment"), z.literal("visibility"), z.literal("course"), z.literal("user"), z.literal("group")])).optional(),
        grouped: z.boolean().optional(),
        page: z.number().optional(),
        per_page: z.number().optional()
    }).optional(),
    url: z.literal("/v1/sections/{section_id}/assignments/{assignment_id}/submissions")
});

export const submitAssignmentSectionsDataSchema = z.object({
    body: z.object({
        "comment[text_comment]": z.string().optional(),
        "submission[body]": z.string().optional(),
        "submission[file_ids]": z.array(z.number()).optional(),
        "submission[media_comment_id]": z.string().optional(),
        "submission[media_comment_type]": z.union([z.literal("audio"), z.literal("video")]).optional(),
        "submission[submission_type]": z.union([z.literal("online_text_entry"), z.literal("online_url"), z.literal("online_upload"), z.literal("media_recording"), z.literal("basic_lti_launch")]),
        "submission[url]": z.string().optional()
    }),
    path: z.object({
        section_id: z.string(),
        assignment_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/sections/{section_id}/assignments/{assignment_id}/submissions")
});

export const submitAssignmentSectionsResponsesSchema = z.object({
    200: z.unknown()
});

export const gradeOrCommentOnMultipleSubmissionsSectionsAssignmentsDataSchema = z.object({
    body: z.object({
        "grade_data[student_id][assignment_id]": z.number().optional(),
        "grade_data[student_id][excuse]": z.boolean().optional(),
        "grade_data[student_id][file_ids]": z.array(z.number()).optional(),
        "grade_data[student_id][group_comment]": z.boolean().optional(),
        "grade_data[student_id][media_comment_id]": z.string().optional(),
        "grade_data[student_id][media_comment_type]": z.union([z.literal("audio"), z.literal("video")]).optional(),
        "grade_data[student_id][posted_grade]": z.string().optional(),
        "grade_data[student_id][rubric_assessment]": z.unknown().optional(),
        "grade_data[student_id][text_comment]": z.string().optional()
    }).optional(),
    path: z.object({
        section_id: z.string(),
        assignment_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/sections/{section_id}/assignments/{assignment_id}/submissions/update_grades")
});

export const gradeOrCommentOnMultipleSubmissionsSectionsAssignmentsResponsesSchema = z.object({
    200: progressSchema
});

export const gradeOrCommentOnMultipleSubmissionsSectionsAssignmentsResponseSchema = gradeOrCommentOnMultipleSubmissionsSectionsAssignmentsResponsesSchema.shape["keyof GradeOrCommentOnMultipleSubmissionsSectionsAssignmentsResponses"];

export const deletePeerReviewSectionsDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        section_id: z.string(),
        assignment_id: z.string(),
        submission_id: z.string()
    }),
    query: z.object({
        user_id: z.number()
    }),
    url: z.literal("/v1/sections/{section_id}/assignments/{assignment_id}/submissions/{submission_id}/peer_reviews")
});

export const deletePeerReviewSectionsResponsesSchema = z.object({
    200: peerReviewSchema
});

export const deletePeerReviewSectionsResponseSchema = deletePeerReviewSectionsResponsesSchema.shape["keyof DeletePeerReviewSectionsResponses"];

export const getAllPeerReviewsSectionsSubmissionsDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        section_id: z.string(),
        assignment_id: z.string(),
        submission_id: z.string()
    }),
    query: z.object({
        include: z.array(z.union([z.literal("submission_comments"), z.literal("user")])).optional()
    }).optional(),
    url: z.literal("/v1/sections/{section_id}/assignments/{assignment_id}/submissions/{submission_id}/peer_reviews")
});

export const getAllPeerReviewsSectionsSubmissionsResponsesSchema = z.object({
    200: z.array(peerReviewSchema)
});

export const getAllPeerReviewsSectionsSubmissionsResponseSchema = getAllPeerReviewsSectionsSubmissionsResponsesSchema.shape["keyof GetAllPeerReviewsSectionsSubmissionsResponses"];

export const createPeerReviewSectionsDataSchema = z.object({
    body: z.object({
        user_id: z.number()
    }),
    path: z.object({
        section_id: z.string(),
        assignment_id: z.string(),
        submission_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/sections/{section_id}/assignments/{assignment_id}/submissions/{submission_id}/peer_reviews")
});

export const createPeerReviewSectionsResponsesSchema = z.object({
    200: peerReviewSchema
});

export const createPeerReviewSectionsResponseSchema = createPeerReviewSectionsResponsesSchema.shape["keyof CreatePeerReviewSectionsResponses"];

export const getSingleSubmissionSectionsDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        section_id: z.string(),
        assignment_id: z.string(),
        user_id: z.string()
    }),
    query: z.object({
        include: z.array(z.union([z.literal("submission_history"), z.literal("submission_comments"), z.literal("rubric_assessment"), z.literal("visibility"), z.literal("course"), z.literal("user")])).optional()
    }).optional(),
    url: z.literal("/v1/sections/{section_id}/assignments/{assignment_id}/submissions/{user_id}")
});

export const getSingleSubmissionSectionsResponsesSchema = z.object({
    200: z.unknown()
});

export const gradeOrCommentOnSubmissionSectionsDataSchema = z.object({
    body: z.object({
        "comment[file_ids]": z.array(z.number()).optional(),
        "comment[group_comment]": z.boolean().optional(),
        "comment[media_comment_id]": z.string().optional(),
        "comment[media_comment_type]": z.union([z.literal("audio"), z.literal("video")]).optional(),
        "comment[text_comment]": z.string().optional(),
        "include[visibility]": z.string().optional(),
        rubric_assessment: z.unknown().optional(),
        "submission[excuse]": z.boolean().optional(),
        "submission[late_policy_status]": z.string().optional(),
        "submission[posted_grade]": z.string().optional(),
        "submission[seconds_late_override]": z.number().optional()
    }).optional(),
    path: z.object({
        section_id: z.string(),
        assignment_id: z.string(),
        user_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/sections/{section_id}/assignments/{assignment_id}/submissions/{user_id}")
});

export const uploadFileSectionsDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        section_id: z.string(),
        assignment_id: z.string(),
        user_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/sections/{section_id}/assignments/{assignment_id}/submissions/{user_id}/files")
});

export const uploadFileSectionsResponsesSchema = z.object({
    200: z.unknown()
});

export const markSubmissionAsUnreadSectionsDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        section_id: z.string(),
        assignment_id: z.string(),
        user_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/sections/{section_id}/assignments/{assignment_id}/submissions/{user_id}/read")
});

export const markSubmissionAsUnreadSectionsResponsesSchema = z.object({
    200: z.unknown()
});

export const markSubmissionAsReadSectionsDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        section_id: z.string(),
        assignment_id: z.string(),
        user_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/sections/{section_id}/assignments/{assignment_id}/submissions/{user_id}/read")
});

export const markSubmissionAsReadSectionsResponsesSchema = z.object({
    200: z.unknown()
});

export const listEnrollmentsSectionsDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        section_id: z.number()
    }),
    query: z.object({
        page: z.string().optional(),
        per_page: z.number().optional(),
        type: z.array(z.string()).optional(),
        role: z.array(z.string()).optional(),
        state: z.array(z.union([z.literal("active"), z.literal("invited"), z.literal("creation_pending"), z.literal("deleted"), z.literal("rejected"), z.literal("completed"), z.literal("inactive")])).optional(),
        include: z.array(z.union([z.literal("avatar_url"), z.literal("group_ids"), z.literal("locked"), z.literal("observed_users"), z.literal("can_be_removed")])).optional(),
        user_id: z.number().optional(),
        grading_period_id: z.number().optional(),
        enrollment_term_id: z.number().optional(),
        sis_account_id: z.array(z.string()).optional(),
        sis_course_id: z.array(z.string()).optional(),
        sis_section_id: z.array(z.string()).optional(),
        sis_user_id: z.array(z.string()).optional()
    }).optional(),
    url: z.literal("/v1/sections/{section_id}/enrollments")
});

export const enrollUserSectionsDataSchema = z.object({
    body: z.object({
        "enrollment[associated_user_id]": z.number().optional(),
        "enrollment[course_section_id]": z.number().optional(),
        "enrollment[enrollment_state]": z.union([z.literal("active"), z.literal("invited"), z.literal("inactive")]).optional(),
        "enrollment[limit_privileges_to_course_section]": z.boolean().optional(),
        "enrollment[notify]": z.boolean().optional(),
        "enrollment[role]": z.unknown().optional(),
        "enrollment[role_id]": z.number().optional(),
        "enrollment[self_enrolled]": z.boolean().optional(),
        "enrollment[self_enrollment_code]": z.string().optional(),
        "enrollment[type]": z.union([z.literal("StudentEnrollment"), z.literal("TeacherEnrollment"), z.literal("TaEnrollment"), z.literal("ObserverEnrollment"), z.literal("DesignerEnrollment")]),
        "enrollment[user_id]": z.string()
    }),
    path: z.object({
        section_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/sections/{section_id}/enrollments")
});

export const listSubmissionsForMultipleAssignmentsSectionsDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        section_id: z.string()
    }),
    query: z.object({
        student_ids: z.array(z.string()).optional(),
        assignment_ids: z.array(z.string()).optional(),
        grouped: z.boolean().optional(),
        post_to_sis: z.boolean().optional(),
        submitted_since: z.string().optional(),
        graded_since: z.string().optional(),
        grading_period_id: z.number().optional(),
        workflow_state: z.union([z.literal("submitted"), z.literal("unsubmitted"), z.literal("graded"), z.literal("pending_review")]).optional(),
        enrollment_state: z.union([z.literal("active"), z.literal("concluded")]).optional(),
        state_based_on_date: z.boolean().optional(),
        order: z.union([z.literal("id"), z.literal("graded_at")]).optional(),
        order_direction: z.union([z.literal("ascending"), z.literal("descending")]).optional(),
        include: z.array(z.union([z.literal("submission_history"), z.literal("submission_comments"), z.literal("rubric_assessment"), z.literal("assignment"), z.literal("total_scores"), z.literal("visibility"), z.literal("course"), z.literal("user")])).optional(),
        page: z.string().optional(),
        per_page: z.number().optional()
    }).optional(),
    url: z.literal("/v1/sections/{section_id}/students/submissions")
});

export const listSubmissionsForMultipleAssignmentsSectionsResponsesSchema = z.object({
    200: z.unknown()
});

export const gradeOrCommentOnMultipleSubmissionsSectionsSubmissionsDataSchema = z.object({
    body: z.object({
        "grade_data[student_id][assignment_id]": z.number().optional(),
        "grade_data[student_id][excuse]": z.boolean().optional(),
        "grade_data[student_id][file_ids]": z.array(z.number()).optional(),
        "grade_data[student_id][group_comment]": z.boolean().optional(),
        "grade_data[student_id][media_comment_id]": z.string().optional(),
        "grade_data[student_id][media_comment_type]": z.union([z.literal("audio"), z.literal("video")]).optional(),
        "grade_data[student_id][posted_grade]": z.string().optional(),
        "grade_data[student_id][rubric_assessment]": z.unknown().optional(),
        "grade_data[student_id][text_comment]": z.string().optional()
    }).optional(),
    path: z.object({
        section_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/sections/{section_id}/submissions/update_grades")
});

export const gradeOrCommentOnMultipleSubmissionsSectionsSubmissionsResponsesSchema = z.object({
    200: progressSchema
});

export const gradeOrCommentOnMultipleSubmissionsSectionsSubmissionsResponseSchema = gradeOrCommentOnMultipleSubmissionsSectionsSubmissionsResponsesSchema.shape["keyof GradeOrCommentOnMultipleSubmissionsSectionsSubmissionsResponses"];

export const getKalturaConfigDataSchema = z.object({
    body: z.never().optional(),
    path: z.never().optional(),
    query: z.never().optional(),
    url: z.literal("/v1/services/kaltura")
});

export const getKalturaConfigResponsesSchema = z.object({
    200: z.unknown()
});

export const startKalturaSessionDataSchema = z.object({
    body: z.never().optional(),
    path: z.never().optional(),
    query: z.never().optional(),
    url: z.literal("/v1/services/kaltura_session")
});

export const startKalturaSessionResponsesSchema = z.object({
    200: z.unknown()
});

export const unShareBrandconfigThemeDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/shared_brand_configs/{id}")
});

export const unShareBrandconfigThemeResponsesSchema = z.object({
    200: sharedBrandConfigSchema
});

export const unShareBrandconfigThemeResponseSchema = unShareBrandconfigThemeResponsesSchema.shape["keyof UnShareBrandconfigThemeResponses"];

export const listActivityStreamActivityStreamDataSchema = z.object({
    body: z.never().optional(),
    path: z.never().optional(),
    query: z.object({
        only_active_courses: z.boolean().optional(),
        page: z.string().optional(),
        per_page: z.number().optional()
    }).optional(),
    url: z.literal("/v1/users/activity_stream")
});

export const listActivityStreamActivityStreamResponsesSchema = z.object({
    200: z.array(activityStreamSchema)
});

export const listActivityStreamActivityStreamResponseSchema = listActivityStreamActivityStreamResponsesSchema.shape["keyof ListActivityStreamActivityStreamResponses"];

export const hideAllStreamItemsDataSchema = z.object({
    body: z.never().optional(),
    path: z.never().optional(),
    query: z.never().optional(),
    url: z.literal("/v1/users/self/activity_stream")
});

export const hideAllStreamItemsResponsesSchema = z.object({
    200: z.unknown()
});

export const listActivityStreamSelfDataSchema = z.object({
    body: z.never().optional(),
    path: z.never().optional(),
    query: z.never().optional(),
    url: z.literal("/v1/users/self/activity_stream")
});

export const listActivityStreamSelfResponsesSchema = z.object({
    200: z.unknown()
});

export const activityStreamSummaryDataSchema = z.object({
    body: z.never().optional(),
    path: z.never().optional(),
    query: z.never().optional(),
    url: z.literal("/v1/users/self/activity_stream/summary")
});

export const activityStreamSummaryResponsesSchema = z.object({
    200: z.unknown()
});

export const hideStreamItemDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/users/self/activity_stream/{id}")
});

export const hideStreamItemResponsesSchema = z.object({
    200: z.unknown()
});

export const listBookmarksDataSchema = z.object({
    body: z.never().optional(),
    path: z.never().optional(),
    query: z.never().optional(),
    url: z.literal("/v1/users/self/bookmarks")
});

export const listBookmarksResponsesSchema = z.object({
    200: z.array(bookmarkSchema)
});

export const listBookmarksResponseSchema = listBookmarksResponsesSchema.shape["keyof ListBookmarksResponses"];

export const createBookmarkDataSchema = z.object({
    body: z.object({
        data: z.string().optional(),
        name: z.string().optional(),
        position: z.number().optional(),
        url: z.string().optional()
    }).optional(),
    path: z.never().optional(),
    query: z.never().optional(),
    url: z.literal("/v1/users/self/bookmarks")
});

export const createBookmarkResponsesSchema = z.object({
    200: bookmarkSchema
});

export const createBookmarkResponseSchema = createBookmarkResponsesSchema.shape["keyof CreateBookmarkResponses"];

export const deleteBookmarkDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/users/self/bookmarks/{id}")
});

export const deleteBookmarkResponsesSchema = z.object({
    200: z.unknown()
});

export const getBookmarkDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/users/self/bookmarks/{id}")
});

export const getBookmarkResponsesSchema = z.object({
    200: bookmarkSchema
});

export const getBookmarkResponseSchema = getBookmarkResponsesSchema.shape["keyof GetBookmarkResponses"];

export const updateBookmarkDataSchema = z.object({
    body: z.object({
        data: z.string().optional(),
        name: z.string().optional(),
        position: z.number().optional(),
        url: z.string().optional()
    }).optional(),
    path: z.object({
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/users/self/bookmarks/{id}")
});

export const updateBookmarkResponsesSchema = z.object({
    200: folderSchema
});

export const updateBookmarkResponseSchema = updateBookmarkResponsesSchema.shape["keyof UpdateBookmarkResponses"];

export const deletePushNotificationEndpointDataSchema = z.object({
    body: z.never().optional(),
    path: z.never().optional(),
    query: z.never().optional(),
    url: z.literal("/v1/users/self/communication_channels/push")
});

export const deletePushNotificationEndpointResponsesSchema = z.object({
    200: successTrueSchema
});

export const deletePushNotificationEndpointResponseSchema = deletePushNotificationEndpointResponsesSchema.shape["keyof DeletePushNotificationEndpointResponses"];

export const updatePreferencesByCategoryDataSchema = z.object({
    body: z.object({
        "notification_preferences[frequency]": z.string()
    }),
    path: z.object({
        communication_channel_id: z.string(),
        category: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/users/self/communication_channels/{communication_channel_id}/notification_preference_categories/{category}")
});

export const updatePreferencesByCategoryResponsesSchema = z.object({
    200: z.unknown()
});

export const updateMultiplePreferencesCommunicationChannelIdDataSchema = z.object({
    body: z.object({
        "notification_preferences[X][frequency]": z.string()
    }),
    path: z.object({
        communication_channel_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/users/self/communication_channels/{communication_channel_id}/notification_preferences")
});

export const updateMultiplePreferencesCommunicationChannelIdResponsesSchema = z.object({
    200: z.unknown()
});

export const updatePreferenceCommunicationChannelIdDataSchema = z.object({
    body: z.object({
        "notification_preferences[frequency]": z.string()
    }),
    path: z.object({
        communication_channel_id: z.string(),
        notification: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/users/self/communication_channels/{communication_channel_id}/notification_preferences/{notification}")
});

export const updatePreferenceCommunicationChannelIdResponsesSchema = z.object({
    200: z.unknown()
});

export const updateMultiplePreferencesTypeDataSchema = z.object({
    body: z.object({
        "notification_preferences[X][frequency]": z.string()
    }),
    path: z.object({
        type: z.string(),
        address: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/users/self/communication_channels/{type}/{address}/notification_preferences")
});

export const updateMultiplePreferencesTypeResponsesSchema = z.object({
    200: z.unknown()
});

export const updatePreferenceTypeDataSchema = z.object({
    body: z.object({
        "notification_preferences[frequency]": z.string()
    }),
    path: z.object({
        type: z.string(),
        address: z.string(),
        notification: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/users/self/communication_channels/{type}/{address}/notification_preferences/{notification}")
});

export const updatePreferenceTypeResponsesSchema = z.object({
    200: z.unknown()
});

export const clearCourseNicknamesDataSchema = z.object({
    body: z.never().optional(),
    path: z.never().optional(),
    query: z.never().optional(),
    url: z.literal("/v1/users/self/course_nicknames")
});

export const clearCourseNicknamesResponsesSchema = z.object({
    200: z.unknown()
});

export const listCourseNicknamesDataSchema = z.object({
    body: z.never().optional(),
    path: z.never().optional(),
    query: z.never().optional(),
    url: z.literal("/v1/users/self/course_nicknames")
});

export const listCourseNicknamesResponsesSchema = z.object({
    200: z.array(courseNicknameSchema)
});

export const listCourseNicknamesResponseSchema = listCourseNicknamesResponsesSchema.shape["keyof ListCourseNicknamesResponses"];

export const removeCourseNicknameDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/users/self/course_nicknames/{course_id}")
});

export const removeCourseNicknameResponsesSchema = z.object({
    200: courseNicknameSchema
});

export const removeCourseNicknameResponseSchema = removeCourseNicknameResponsesSchema.shape["keyof RemoveCourseNicknameResponses"];

export const getCourseNicknameDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        course_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/users/self/course_nicknames/{course_id}")
});

export const getCourseNicknameResponsesSchema = z.object({
    200: courseNicknameSchema
});

export const getCourseNicknameResponseSchema = getCourseNicknameResponsesSchema.shape["keyof GetCourseNicknameResponses"];

export const setCourseNicknameDataSchema = z.object({
    body: z.object({
        nickname: z.string()
    }),
    path: z.object({
        course_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/users/self/course_nicknames/{course_id}")
});

export const setCourseNicknameResponsesSchema = z.object({
    200: courseNicknameSchema
});

export const setCourseNicknameResponseSchema = setCourseNicknameResponsesSchema.shape["keyof SetCourseNicknameResponses"];

export const resetCourseFavoritesDataSchema = z.object({
    body: z.never().optional(),
    path: z.never().optional(),
    query: z.never().optional(),
    url: z.literal("/v1/users/self/favorites/courses")
});

export const resetCourseFavoritesResponsesSchema = z.object({
    200: z.unknown()
});

export const listFavoriteCoursesDataSchema = z.object({
    body: z.never().optional(),
    path: z.never().optional(),
    query: z.object({
        exclude_blueprint_courses: z.boolean().optional(),
        page: z.string().optional(),
        per_page: z.number().optional()
    }).optional(),
    url: z.literal("/v1/users/self/favorites/courses")
});

export const removeCourseFromFavoritesDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/users/self/favorites/courses/{id}")
});

export const removeCourseFromFavoritesResponsesSchema = z.object({
    200: favoriteSchema
});

export const removeCourseFromFavoritesResponseSchema = removeCourseFromFavoritesResponsesSchema.shape["keyof RemoveCourseFromFavoritesResponses"];

export const addCourseToFavoritesDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/users/self/favorites/courses/{id}")
});

export const addCourseToFavoritesResponsesSchema = z.object({
    200: favoriteSchema
});

export const addCourseToFavoritesResponseSchema = addCourseToFavoritesResponsesSchema.shape["keyof AddCourseToFavoritesResponses"];

export const resetGroupFavoritesDataSchema = z.object({
    body: z.never().optional(),
    path: z.never().optional(),
    query: z.never().optional(),
    url: z.literal("/v1/users/self/favorites/groups")
});

export const resetGroupFavoritesResponsesSchema = z.object({
    200: z.unknown()
});

export const listFavoriteGroupsDataSchema = z.object({
    body: z.never().optional(),
    path: z.never().optional(),
    query: z.never().optional(),
    url: z.literal("/v1/users/self/favorites/groups")
});

export const listFavoriteGroupsResponsesSchema = z.object({
    200: z.array(groupSchema)
});

export const listFavoriteGroupsResponseSchema = listFavoriteGroupsResponsesSchema.shape["keyof ListFavoriteGroupsResponses"];

export const removeGroupFromFavoritesDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/users/self/favorites/groups/{id}")
});

export const removeGroupFromFavoritesResponsesSchema = z.object({
    200: favoriteSchema
});

export const removeGroupFromFavoritesResponseSchema = removeGroupFromFavoritesResponsesSchema.shape["keyof RemoveGroupFromFavoritesResponses"];

export const addGroupToFavoritesDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/users/self/favorites/groups/{id}")
});

export const addGroupToFavoritesResponsesSchema = z.object({
    200: favoriteSchema
});

export const addGroupToFavoritesResponseSchema = addGroupToFavoritesResponsesSchema.shape["keyof AddGroupToFavoritesResponses"];

export const listYourGroupsDataSchema = z.object({
    body: z.never().optional(),
    path: z.never().optional(),
    query: z.object({
        context_type: z.union([z.literal("Account"), z.literal("Course")]).optional(),
        include: z.array(z.literal("tabs")).optional(),
        page: z.string().optional(),
        per_page: z.number().optional()
    }).optional(),
    url: z.literal("/v1/users/self/groups")
});

export const listYourGroupsResponsesSchema = z.object({
    200: z.array(groupSchema)
});

export const listYourGroupsResponseSchema = listYourGroupsResponsesSchema.shape["keyof ListYourGroupsResponses"];

export const getPandataEventsJwtTokenAndItsExpirationDateDataSchema = z.object({
    body: z.object({
        app_key: z.string().optional()
    }).optional(),
    path: z.never().optional(),
    query: z.never().optional(),
    url: z.literal("/v1/users/self/pandata_events_token")
});

export const getPandataEventsJwtTokenAndItsExpirationDateResponsesSchema = z.object({
    200: z.unknown()
});

export const listTodoItemsDataSchema = z.object({
    body: z.never().optional(),
    path: z.never().optional(),
    query: z.object({
        include: z.array(z.literal("ungraded_quizzes")).optional(),
        page: z.string().optional(),
        per_page: z.number().optional()
    }).optional(),
    url: z.literal("/v1/users/self/todo")
});

export const listTodoItemsResponsesSchema = z.object({
    200: z.unknown()
});

export const listCountsForTodoItemsDataSchema = z.object({
    body: z.never().optional(),
    path: z.never().optional(),
    query: z.object({
        include: z.array(z.literal("ungraded_quizzes")).optional()
    }).optional(),
    url: z.literal("/v1/users/self/todo_item_count")
});

export const listCountsForTodoItemsResponsesSchema = z.object({
    200: z.unknown()
});

export const listUpcomingAssignmentsCalendarEventsDataSchema = z.object({
    body: z.never().optional(),
    path: z.never().optional(),
    query: z.never().optional(),
    url: z.literal("/v1/users/self/upcoming_events")
});

export const listUpcomingAssignmentsCalendarEventsResponsesSchema = z.object({
    200: z.unknown()
});

export const showUserDetailsDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/users/{id}")
});

export const editUserDataSchema = z.object({
    body: z.object({
        "user[avatar][token]": z.string().optional(),
        "user[avatar][url]": z.string().optional(),
        "user[email]": z.string().optional(),
        "user[locale]": z.string().optional(),
        "user[name]": z.string().optional(),
        "user[short_name]": z.string().optional(),
        "user[sortable_name]": z.string().optional(),
        "user[time_zone]": z.string().optional()
    }).optional(),
    path: z.object({
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/users/{id}")
});

export const getCustomColorsDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/users/{id}/colors")
});

export const getCustomColorsResponsesSchema = z.object({
    200: customColorsSchema
});

export const getCustomColorsResponseSchema = getCustomColorsResponsesSchema.shape["keyof GetCustomColorsResponses"];

export const getCustomColorDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        id: z.string(),
        asset_string: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/users/{id}/colors/{asset_string}")
});

export const getCustomColorResponsesSchema = z.object({
    200: z.unknown()
});

export const updateCustomColorDataSchema = z.object({
    body: z.object({
        hexcode: z.string().optional()
    }).optional(),
    path: z.object({
        id: z.string(),
        asset_string: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/users/{id}/colors/{asset_string}")
});

export const updateCustomColorResponsesSchema = z.object({
    200: z.unknown()
});

export const getDashboardPositionsDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/users/{id}/dashboard_positions")
});

export const getDashboardPositionsResponsesSchema = z.object({
    200: z.unknown()
});

export const updateDashboardPositionsDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/users/{id}/dashboard_positions")
});

export const updateDashboardPositionsResponsesSchema = z.object({
    200: z.unknown()
});

export const mergeUserIntoAnotherUserAccountsDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        id: z.string(),
        destination_account_id: z.string(),
        destination_user_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/users/{id}/merge_into/accounts/{destination_account_id}/users/{destination_user_id}")
});

export const mergeUserIntoAnotherUserDestinationUserIdDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        id: z.string(),
        destination_user_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/users/{id}/merge_into/{destination_user_id}")
});

export const updateUserSettingsDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        id: z.string()
    }),
    query: z.object({
        manual_mark_as_read: z.boolean().optional(),
        collapse_global_nav: z.boolean().optional()
    }).optional(),
    url: z.literal("/v1/users/{id}/settings")
});

export const updateUserSettingsResponsesSchema = z.object({
    200: z.unknown()
});

export const splitMergedUsersIntoSeparateUsersDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/users/{id}/split")
});

export const listAvatarOptionsDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        user_id: z.string()
    }),
    query: z.object({
        page: z.string().optional(),
        per_page: z.number().optional()
    }).optional(),
    url: z.literal("/v1/users/{user_id}/avatars")
});

export const listAvatarOptionsResponsesSchema = z.object({
    200: z.array(avatarSchema)
});

export const listAvatarOptionsResponseSchema = listAvatarOptionsResponsesSchema.shape["keyof ListAvatarOptionsResponses"];

export const listCalendarEventsForUserDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        user_id: z.string()
    }),
    query: z.object({
        type: z.union([z.literal("event"), z.literal("assignment")]).optional(),
        start_date: z.string().optional(),
        end_date: z.string().optional(),
        undated: z.boolean().optional(),
        all_events: z.boolean().optional(),
        context_codes: z.array(z.string()).optional(),
        excludes: z.array(z.array(z.record(z.unknown()))).optional(),
        page: z.string().optional(),
        per_page: z.number().optional()
    }).optional(),
    url: z.literal("/v1/users/{user_id}/calendar_events")
});

export const listCalendarEventsForUserResponsesSchema = z.object({
    200: z.array(calendarEventSchema)
});

export const listCalendarEventsForUserResponseSchema = listCalendarEventsForUserResponsesSchema.shape["keyof ListCalendarEventsForUserResponses"];

export const listUserCommunicationChannelsDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        user_id: z.string()
    }),
    query: z.object({
        page: z.string().optional(),
        per_page: z.number().optional()
    }).optional(),
    url: z.literal("/v1/users/{user_id}/communication_channels")
});

export const listUserCommunicationChannelsResponsesSchema = z.object({
    200: z.array(communicationChannelSchema)
});

export const listUserCommunicationChannelsResponseSchema = listUserCommunicationChannelsResponsesSchema.shape["keyof ListUserCommunicationChannelsResponses"];

export const createCommunicationChannelDataSchema = z.object({
    body: z.object({
        "communication_channel[address]": z.string(),
        "communication_channel[token]": z.string().optional(),
        "communication_channel[type]": z.union([z.literal("email"), z.literal("sms"), z.literal("push")]),
        skip_confirmation: z.boolean().optional()
    }),
    path: z.object({
        user_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/users/{user_id}/communication_channels")
});

export const createCommunicationChannelResponsesSchema = z.object({
    200: communicationChannelSchema
});

export const createCommunicationChannelResponseSchema = createCommunicationChannelResponsesSchema.shape["keyof CreateCommunicationChannelResponses"];

export const listOfPreferenceCategoriesDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        user_id: z.string(),
        communication_channel_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/users/{user_id}/communication_channels/{communication_channel_id}/notification_preference_categories")
});

export const listOfPreferenceCategoriesResponsesSchema = z.object({
    200: z.unknown()
});

export const listPreferencesCommunicationChannelIdDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        user_id: z.string(),
        communication_channel_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/users/{user_id}/communication_channels/{communication_channel_id}/notification_preferences")
});

export const listPreferencesCommunicationChannelIdResponsesSchema = z.object({
    200: z.array(notificationPreferenceSchema)
});

export const listPreferencesCommunicationChannelIdResponseSchema = listPreferencesCommunicationChannelIdResponsesSchema.shape["keyof ListPreferencesCommunicationChannelIdResponses"];

export const getPreferenceCommunicationChannelIdDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        user_id: z.string(),
        communication_channel_id: z.string(),
        notification: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/users/{user_id}/communication_channels/{communication_channel_id}/notification_preferences/{notification}")
});

export const getPreferenceCommunicationChannelIdResponsesSchema = z.object({
    200: notificationPreferenceSchema
});

export const getPreferenceCommunicationChannelIdResponseSchema = getPreferenceCommunicationChannelIdResponsesSchema.shape["keyof GetPreferenceCommunicationChannelIdResponses"];

export const deleteCommunicationChannelIdDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        user_id: z.string(),
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/users/{user_id}/communication_channels/{id}")
});

export const deleteCommunicationChannelIdResponsesSchema = z.object({
    200: communicationChannelSchema
});

export const deleteCommunicationChannelIdResponseSchema = deleteCommunicationChannelIdResponsesSchema.shape["keyof DeleteCommunicationChannelIdResponses"];

export const deleteCommunicationChannelTypeDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        user_id: z.string(),
        type: z.string(),
        address: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/users/{user_id}/communication_channels/{type}/{address}")
});

export const deleteCommunicationChannelTypeResponsesSchema = z.object({
    200: communicationChannelSchema
});

export const deleteCommunicationChannelTypeResponseSchema = deleteCommunicationChannelTypeResponsesSchema.shape["keyof DeleteCommunicationChannelTypeResponses"];

export const listPreferencesTypeDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        user_id: z.string(),
        type: z.string(),
        address: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/users/{user_id}/communication_channels/{type}/{address}/notification_preferences")
});

export const listPreferencesTypeResponsesSchema = z.object({
    200: z.array(notificationPreferenceSchema)
});

export const listPreferencesTypeResponseSchema = listPreferencesTypeResponsesSchema.shape["keyof ListPreferencesTypeResponses"];

export const getPreferenceTypeDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        user_id: z.string(),
        type: z.string(),
        address: z.string(),
        notification: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/users/{user_id}/communication_channels/{type}/{address}/notification_preferences/{notification}")
});

export const getPreferenceTypeResponsesSchema = z.object({
    200: notificationPreferenceSchema
});

export const getPreferenceTypeResponseSchema = getPreferenceTypeResponsesSchema.shape["keyof GetPreferenceTypeResponses"];

export const listContentExportsUsersDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        user_id: z.string()
    }),
    query: z.object({
        page: z.string().optional(),
        per_page: z.number().optional()
    }).optional(),
    url: z.literal("/v1/users/{user_id}/content_exports")
});

export const listContentExportsUsersResponsesSchema = z.object({
    200: z.array(contentExportSchema)
});

export const listContentExportsUsersResponseSchema = listContentExportsUsersResponsesSchema.shape["keyof ListContentExportsUsersResponses"];

export const exportContentUsersDataSchema = z.object({
    body: z.object({
        export_type: z.union([z.literal("common_cartridge"), z.literal("qti"), z.literal("zip")]),
        select: z.union([z.literal("folders"), z.literal("files"), z.literal("attachments"), z.literal("quizzes"), z.literal("assignments"), z.literal("announcements"), z.literal("calendar_events"), z.literal("discussion_topics"), z.literal("modules"), z.literal("module_items"), z.literal("pages"), z.literal("rubrics")]).optional(),
        skip_notifications: z.boolean().optional()
    }),
    path: z.object({
        user_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/users/{user_id}/content_exports")
});

export const exportContentUsersResponsesSchema = z.object({
    200: contentExportSchema
});

export const exportContentUsersResponseSchema = exportContentUsersResponsesSchema.shape["keyof ExportContentUsersResponses"];

export const showContentExportUsersDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        user_id: z.string(),
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/users/{user_id}/content_exports/{id}")
});

export const showContentExportUsersResponsesSchema = z.object({
    200: contentExportSchema
});

export const showContentExportUsersResponseSchema = showContentExportUsersResponsesSchema.shape["keyof ShowContentExportUsersResponses"];

export const listLicensesUsersDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        user_id: z.string()
    }),
    query: z.object({
        page: z.string().optional(),
        per_page: z.number().optional()
    }).optional(),
    url: z.literal("/v1/users/{user_id}/content_licenses")
});

export const listLicensesUsersResponsesSchema = z.object({
    200: z.array(licenseSchema)
});

export const listLicensesUsersResponseSchema = listLicensesUsersResponsesSchema.shape["keyof ListLicensesUsersResponses"];

export const listContentMigrationsUsersDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        user_id: z.string()
    }),
    query: z.object({
        page: z.string().optional(),
        per_page: z.number().optional()
    }).optional(),
    url: z.literal("/v1/users/{user_id}/content_migrations")
});

export const listContentMigrationsUsersResponsesSchema = z.object({
    200: z.array(contentMigrationSchema)
});

export const listContentMigrationsUsersResponseSchema = listContentMigrationsUsersResponsesSchema.shape["keyof ListContentMigrationsUsersResponses"];

export const createContentMigrationUsersDataSchema = z.object({
    body: z.object({
        "date_shift_options[day_substitutions][X]": z.number().optional(),
        "date_shift_options[new_end_date]": z.string().optional(),
        "date_shift_options[new_start_date]": z.string().optional(),
        "date_shift_options[old_end_date]": z.string().optional(),
        "date_shift_options[old_start_date]": z.string().optional(),
        "date_shift_options[remove_dates]": z.boolean().optional(),
        "date_shift_options[shift_dates]": z.boolean().optional(),
        migration_type: z.string(),
        "pre_attachment[name]": z.string().optional(),
        "pre_attachment[todo]": z.string().optional(),
        "settings[file_url]": z.string().optional(),
        "settings[folder_id]": z.string().optional(),
        "settings[overwrite_quizzes]": z.boolean().optional(),
        "settings[question_bank_id]": z.number().optional(),
        "settings[question_bank_name]": z.string().optional(),
        "settings[source_course_id]": z.string().optional()
    }),
    path: z.object({
        user_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/users/{user_id}/content_migrations")
});

export const createContentMigrationUsersResponsesSchema = z.object({
    200: contentMigrationSchema
});

export const createContentMigrationUsersResponseSchema = createContentMigrationUsersResponsesSchema.shape["keyof CreateContentMigrationUsersResponses"];

export const listMigrationSystemsUsersDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        user_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/users/{user_id}/content_migrations/migrators")
});

export const listMigrationSystemsUsersResponsesSchema = z.object({
    200: z.array(migratorSchema)
});

export const listMigrationSystemsUsersResponseSchema = listMigrationSystemsUsersResponsesSchema.shape["keyof ListMigrationSystemsUsersResponses"];

export const listMigrationIssuesUsersDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        user_id: z.string(),
        content_migration_id: z.string()
    }),
    query: z.object({
        page: z.string().optional(),
        per_page: z.number().optional()
    }).optional(),
    url: z.literal("/v1/users/{user_id}/content_migrations/{content_migration_id}/migration_issues")
});

export const listMigrationIssuesUsersResponsesSchema = z.object({
    200: z.array(migrationIssueSchema)
});

export const listMigrationIssuesUsersResponseSchema = listMigrationIssuesUsersResponsesSchema.shape["keyof ListMigrationIssuesUsersResponses"];

export const getMigrationIssueUsersDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        user_id: z.string(),
        content_migration_id: z.string(),
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/users/{user_id}/content_migrations/{content_migration_id}/migration_issues/{id}")
});

export const getMigrationIssueUsersResponsesSchema = z.object({
    200: migrationIssueSchema
});

export const getMigrationIssueUsersResponseSchema = getMigrationIssueUsersResponsesSchema.shape["keyof GetMigrationIssueUsersResponses"];

export const updateMigrationIssueUsersDataSchema = z.object({
    body: z.object({
        workflow_state: z.union([z.literal("active"), z.literal("resolved")])
    }),
    path: z.object({
        user_id: z.string(),
        content_migration_id: z.string(),
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/users/{user_id}/content_migrations/{content_migration_id}/migration_issues/{id}")
});

export const updateMigrationIssueUsersResponsesSchema = z.object({
    200: migrationIssueSchema
});

export const updateMigrationIssueUsersResponseSchema = updateMigrationIssueUsersResponsesSchema.shape["keyof UpdateMigrationIssueUsersResponses"];

export const getContentMigrationUsersDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        user_id: z.string(),
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/users/{user_id}/content_migrations/{id}")
});

export const getContentMigrationUsersResponsesSchema = z.object({
    200: contentMigrationSchema
});

export const getContentMigrationUsersResponseSchema = getContentMigrationUsersResponsesSchema.shape["keyof GetContentMigrationUsersResponses"];

export const updateContentMigrationUsersDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        user_id: z.string(),
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/users/{user_id}/content_migrations/{id}")
});

export const updateContentMigrationUsersResponsesSchema = z.object({
    200: contentMigrationSchema
});

export const updateContentMigrationUsersResponseSchema = updateContentMigrationUsersResponsesSchema.shape["keyof UpdateContentMigrationUsersResponses"];

export const listCoursesForUserDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        user_id: z.string()
    }),
    query: z.object({
        page: z.string().optional(),
        per_page: z.number().optional(),
        include: z.array(z.union([z.literal("needs_grading_count"), z.literal("syllabus_body"), z.literal("public_description"), z.literal("total_scores"), z.literal("current_grading_period_scores"), z.literal("term"), z.literal("account"), z.literal("course_progress"), z.literal("sections"), z.literal("storage_quota_used_mb"), z.literal("total_students"), z.literal("passback_status"), z.literal("favorites"), z.literal("teachers"), z.literal("observed_users"), z.literal("course_image")])).optional(),
        state: z.array(z.union([z.literal("unpublished"), z.literal("available"), z.literal("completed"), z.literal("deleted")])).optional(),
        enrollment_state: z.union([z.literal("active"), z.literal("invited_or_pending"), z.literal("completed")]).optional()
    }).optional(),
    url: z.literal("/v1/users/{user_id}/courses")
});

export const listAssignmentsForUserDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        user_id: z.string(),
        course_id: z.string()
    }),
    query: z.object({
        include: z.array(z.union([z.literal("submission"), z.literal("assignment_visibility"), z.literal("all_dates"), z.literal("overrides"), z.literal("observed_users")])).optional(),
        search_term: z.string().optional(),
        override_assignment_dates: z.boolean().optional(),
        needs_grading_count_by_section: z.boolean().optional(),
        bucket: z.union([z.literal("past"), z.literal("overdue"), z.literal("undated"), z.literal("ungraded"), z.literal("unsubmitted"), z.literal("upcoming"), z.literal("future")]).optional(),
        assignment_ids: z.array(z.string()).optional(),
        order_by: z.union([z.literal("position"), z.literal("name")]).optional(),
        page: z.string().optional(),
        per_page: z.number().optional()
    }).optional(),
    url: z.literal("/v1/users/{user_id}/courses/{course_id}/assignments")
});

export const deleteCustomDataDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        user_id: z.string()
    }),
    query: z.object({
        ns: z.string()
    }),
    url: z.literal("/v1/users/{user_id}/custom_data")
});

export const deleteCustomDataResponsesSchema = z.object({
    200: z.unknown()
});

export const loadCustomDataDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        user_id: z.string()
    }),
    query: z.object({
        ns: z.string()
    }),
    url: z.literal("/v1/users/{user_id}/custom_data")
});

export const loadCustomDataResponsesSchema = z.object({
    200: z.unknown()
});

export const storeCustomDataDataSchema = z.object({
    body: z.object({
        data: z.unknown(),
        ns: z.string()
    }),
    path: z.object({
        user_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/users/{user_id}/custom_data")
});

export const storeCustomDataResponsesSchema = z.object({
    200: z.unknown()
});

export const listEnrollmentsUsersDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        user_id: z.string()
    }),
    query: z.object({
        page: z.string().optional(),
        per_page: z.number().optional(),
        type: z.array(z.string()).optional(),
        role: z.array(z.string()).optional(),
        state: z.array(z.union([z.literal("active"), z.literal("invited"), z.literal("creation_pending"), z.literal("deleted"), z.literal("rejected"), z.literal("completed"), z.literal("inactive")])).optional(),
        include: z.array(z.union([z.literal("avatar_url"), z.literal("group_ids"), z.literal("locked"), z.literal("observed_users"), z.literal("can_be_removed")])).optional(),
        grading_period_id: z.number().optional(),
        enrollment_term_id: z.number().optional(),
        sis_account_id: z.array(z.string()).optional(),
        sis_course_id: z.array(z.string()).optional(),
        sis_section_id: z.array(z.string()).optional(),
        sis_user_id: z.array(z.string()).optional()
    }).optional(),
    url: z.literal("/v1/users/{user_id}/enrollments")
});

export const listFeaturesUsersDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        user_id: z.string()
    }),
    query: z.object({
        page: z.string().optional(),
        per_page: z.number().optional()
    }).optional(),
    url: z.literal("/v1/users/{user_id}/features")
});

export const listFeaturesUsersResponsesSchema = z.object({
    200: z.array(featureSchema)
});

export const listFeaturesUsersResponseSchema = listFeaturesUsersResponsesSchema.shape["keyof ListFeaturesUsersResponses"];

export const listEnabledFeaturesUsersDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        user_id: z.string()
    }),
    query: z.object({
        page: z.string().optional(),
        per_page: z.number().optional()
    }).optional(),
    url: z.literal("/v1/users/{user_id}/features/enabled")
});

export const listEnabledFeaturesUsersResponsesSchema = z.object({
    200: z.unknown()
});

export const removeFeatureFlagUsersDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        user_id: z.string(),
        feature: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/users/{user_id}/features/flags/{feature}")
});

export const removeFeatureFlagUsersResponsesSchema = z.object({
    200: featureFlagSchema
});

export const removeFeatureFlagUsersResponseSchema = removeFeatureFlagUsersResponsesSchema.shape["keyof RemoveFeatureFlagUsersResponses"];

export const getFeatureFlagUsersDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        user_id: z.string(),
        feature: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/users/{user_id}/features/flags/{feature}")
});

export const getFeatureFlagUsersResponsesSchema = z.object({
    200: featureFlagSchema
});

export const getFeatureFlagUsersResponseSchema = getFeatureFlagUsersResponsesSchema.shape["keyof GetFeatureFlagUsersResponses"];

export const setFeatureFlagUsersDataSchema = z.object({
    body: z.object({
        state: z.union([z.literal(false), z.literal("allowed"), z.literal(true)]).optional()
    }).optional(),
    path: z.object({
        user_id: z.string(),
        feature: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/users/{user_id}/features/flags/{feature}")
});

export const setFeatureFlagUsersResponsesSchema = z.object({
    200: featureFlagSchema
});

export const setFeatureFlagUsersResponseSchema = setFeatureFlagUsersResponsesSchema.shape["keyof SetFeatureFlagUsersResponses"];

export const uploadFileToUsersFilesDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        user_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/users/{user_id}/files")
});

export const uploadFileToUsersFilesResponsesSchema = z.object({
    200: z.unknown()
});

export const getQuotaInformationUsersDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        user_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/users/{user_id}/files/quota")
});

export const getQuotaInformationUsersResponsesSchema = z.object({
    200: z.unknown()
});

export const getFileUsersDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        user_id: z.string(),
        id: z.string()
    }),
    query: z.object({
        include: z.array(z.literal("user")).optional()
    }).optional(),
    url: z.literal("/v1/users/{user_id}/files/{id}")
});

export const getFileUsersResponsesSchema = z.object({
    200: fileSchema
});

export const getFileUsersResponseSchema = getFileUsersResponsesSchema.shape["keyof GetFileUsersResponses"];

export const listAllFoldersUsersDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        user_id: z.string()
    }),
    query: z.object({
        page: z.string().optional(),
        per_page: z.number().optional()
    }).optional(),
    url: z.literal("/v1/users/{user_id}/folders")
});

export const listAllFoldersUsersResponsesSchema = z.object({
    200: z.array(folderSchema)
});

export const listAllFoldersUsersResponseSchema = listAllFoldersUsersResponsesSchema.shape["keyof ListAllFoldersUsersResponses"];

export const createFolderUsersDataSchema = z.object({
    body: z.object({
        hidden: z.boolean().optional(),
        lock_at: z.string().optional(),
        locked: z.boolean().optional(),
        name: z.string(),
        parent_folder_id: z.string().optional(),
        parent_folder_path: z.string().optional(),
        position: z.number().optional(),
        unlock_at: z.string().optional()
    }),
    path: z.object({
        user_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/users/{user_id}/folders")
});

export const createFolderUsersResponsesSchema = z.object({
    200: folderSchema
});

export const createFolderUsersResponseSchema = createFolderUsersResponsesSchema.shape["keyof CreateFolderUsersResponses"];

export const resolvePathUsersDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        user_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/users/{user_id}/folders/by_path")
});

export const resolvePathUsersResponsesSchema = z.object({
    200: z.array(folderSchema)
});

export const resolvePathUsersResponseSchema = resolvePathUsersResponsesSchema.shape["keyof ResolvePathUsersResponses"];

export const resolvePathUsersFullPathDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        user_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/users/{user_id}/folders/by_path/*full_path")
});

export const resolvePathUsersFullPathResponsesSchema = z.object({
    200: z.array(folderSchema)
});

export const resolvePathUsersFullPathResponseSchema = resolvePathUsersFullPathResponsesSchema.shape["keyof ResolvePathUsersFullPathResponses"];

export const getFolderUsersDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        user_id: z.string(),
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/users/{user_id}/folders/{id}")
});

export const getFolderUsersResponsesSchema = z.object({
    200: folderSchema
});

export const getFolderUsersResponseSchema = getFolderUsersResponsesSchema.shape["keyof GetFolderUsersResponses"];

export const listUserLoginsUsersDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        user_id: z.string()
    }),
    query: z.object({
        page: z.string().optional(),
        per_page: z.number().optional()
    }).optional(),
    url: z.literal("/v1/users/{user_id}/logins")
});

export const listUserLoginsUsersResponsesSchema = z.object({
    200: z.unknown()
});

export const deleteUserLoginDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        user_id: z.string(),
        id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/users/{user_id}/logins/{id}")
});

export const deleteUserLoginResponsesSchema = z.object({
    200: z.unknown()
});

export const listMissingSubmissionsDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        user_id: z.string()
    }),
    query: z.object({
        include: z.array(z.union([z.literal("planner_overrides"), z.literal("course")])).optional(),
        filter: z.array(z.literal("submittable")).optional(),
        page: z.string().optional(),
        per_page: z.number().optional()
    }).optional(),
    url: z.literal("/v1/users/{user_id}/missing_submissions")
});

export const listObserveesDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        user_id: z.string()
    }),
    query: z.object({
        include: z.array(z.literal("avatar_url")).optional(),
        page: z.string().optional(),
        per_page: z.number().optional()
    }).optional(),
    url: z.literal("/v1/users/{user_id}/observees")
});

export const addObserveeWithCredentialsDataSchema = z.object({
    body: z.object({
        access_token: z.string().optional(),
        "observee[password]": z.string().optional(),
        "observee[unique_id]": z.string().optional(),
        pairing_code: z.string().optional(),
        root_account_id: z.number().optional()
    }).optional(),
    path: z.object({
        user_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/users/{user_id}/observees")
});

export const removeObserveeDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        user_id: z.string(),
        observee_id: z.string()
    }),
    query: z.object({
        root_account_id: z.number().optional()
    }).optional(),
    url: z.literal("/v1/users/{user_id}/observees/{observee_id}")
});

export const showObserveeDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        user_id: z.string(),
        observee_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/users/{user_id}/observees/{observee_id}")
});

export const addObserveeDataSchema = z.object({
    body: z.object({
        root_account_id: z.number().optional()
    }).optional(),
    path: z.object({
        user_id: z.string(),
        observee_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/users/{user_id}/observees/{observee_id}")
});

export const listUserPageViewsDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        user_id: z.string()
    }),
    query: z.object({
        start_time: z.string().optional(),
        end_time: z.string().optional(),
        page: z.string().optional(),
        per_page: z.number().optional()
    }).optional(),
    url: z.literal("/v1/users/{user_id}/page_views")
});

export const pageViewSchema = z.object({
    action: z.string().optional().nullable(),
    app_name: z.string().optional().nullable(),
    asset_type: z.string().optional().nullable(),
    context_type: z.string().optional().nullable(),
    contributed: z.boolean().optional().nullable(),
    controller: z.string().optional().nullable(),
    created_at: z.string().optional().nullable(),
    http_method: z.string().optional().nullable(),
    id: z.string(),
    interaction_seconds: z.number().optional().nullable(),
    links: pageViewLinksSchema.optional(),
    participated: z.boolean().optional().nullable(),
    remote_ip: z.string().optional().nullable(),
    render_time: z.number().optional().nullable(),
    url: z.string().optional().nullable(),
    user_agent: z.string().optional().nullable(),
    user_request: z.boolean().optional().nullable()
});

export const listUserPageViewsResponsesSchema = z.object({
    200: z.array(pageViewSchema)
});

export const getUserProfileDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        user_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/users/{user_id}/profile")
});

export const getUserProfileResponsesSchema = z.object({
    200: profileSchema
});

export const getUserProfileResponseSchema = getUserProfileResponsesSchema.shape["keyof GetUserProfileResponses"];

export const removeUsageRightsUsersDataSchema = z.object({
    body: z.never().optional(),
    path: z.object({
        user_id: z.string()
    }),
    query: z.object({
        file_ids: z.array(z.string()),
        folder_ids: z.array(z.string()).optional()
    }),
    url: z.literal("/v1/users/{user_id}/usage_rights")
});

export const removeUsageRightsUsersResponsesSchema = z.object({
    200: z.unknown()
});

export const setUsageRightsUsersDataSchema = z.object({
    body: z.object({
        file_ids: z.array(z.string()),
        folder_ids: z.array(z.string()).optional(),
        publish: z.boolean().optional(),
        "usage_rights[legal_copyright]": z.string().optional(),
        "usage_rights[license]": z.string().optional(),
        "usage_rights[use_justification]": z.union([z.literal("own_copyright"), z.literal("used_by_permission"), z.literal("fair_use"), z.literal("public_domain"), z.literal("creative_commons")])
    }),
    path: z.object({
        user_id: z.string()
    }),
    query: z.never().optional(),
    url: z.literal("/v1/users/{user_id}/usage_rights")
});

export const setUsageRightsUsersResponsesSchema = z.object({
    200: usageRightsSchema
});

export const setUsageRightsUsersResponseSchema = setUsageRightsUsersResponsesSchema.shape["keyof SetUsageRightsUsersResponses"];

export const clientOptionsSchema = z.object({
    baseURL: z.union([z.any(), z.string().and(z.object({}))])
});

export const outcomePathSchema = z.object({
    id: z.number().optional(),
    parts: outcomePathPartSchema.optional()
});

export const submissionCommentSchema = z.object({
    author: userDisplaySchema.optional(),
    author_id: z.number().optional().nullable(),
    author_name: z.string().optional().nullable(),
    comment: z.string().optional().nullable(),
    created_at: z.string().optional().nullable(),
    edited_at: z.string().optional().nullable(),
    id: z.number().optional(),
    media_comment: mediaCommentSchema.optional()
});

export const showOriginalityReportFilesResponseSchema = showOriginalityReportFilesResponsesSchema.shape["keyof ShowOriginalityReportFilesResponses"];

export const listAuthenticationProvidersResponseSchema = listAuthenticationProvidersResponsesSchema.shape["keyof ListAuthenticationProvidersResponses"];

export const listFeaturesAccountsResponseSchema = listFeaturesAccountsResponsesSchema.shape["keyof ListFeaturesAccountsResponses"];

export const listGroupCategoriesForContextAccountsResponseSchema = listGroupCategoriesForContextAccountsResponsesSchema.shape["keyof ListGroupCategoriesForContextAccountsResponses"];

export const indexOfReportsResponseSchema = indexOfReportsResponsesSchema.shape["keyof IndexOfReportsResponses"];

export const listRubricsAccountsResponseSchema = listRubricsAccountsResponsesSchema.shape["keyof ListRubricsAccountsResponses"];

export const listAnnouncementsResponseSchema = listAnnouncementsResponsesSchema.shape["keyof ListAnnouncementsResponses"];

export const queryByCourseResponseSchema = queryByCourseResponsesSchema.shape["keyof QueryByCourseResponses"];

export const queryByAssignmentResponseSchema = queryByAssignmentResponsesSchema.shape["keyof QueryByAssignmentResponses"];

export const listConversationsResponseSchema = listConversationsResponsesSchema.shape["keyof ListConversationsResponses"];

export const listAssignmentGroupsResponseSchema = listAssignmentGroupsResponsesSchema.shape["keyof ListAssignmentGroupsResponses"];

export const listConferencesCoursesResponseSchema = listConferencesCoursesResponsesSchema.shape["keyof ListConferencesCoursesResponses"];

export const listContentExportsCoursesResponseSchema = listContentExportsCoursesResponsesSchema.shape["keyof ListContentExportsCoursesResponses"];

export const listsSubmissionsResponseSchema = listsSubmissionsResponsesSchema.shape["keyof ListsSubmissionsResponses"];

export const getModuleItemSequenceResponseSchema = getModuleItemSequenceResponsesSchema.shape["keyof GetModuleItemSequenceResponses"];

export const listQuizzesInCourseResponseSchema = listQuizzesInCourseResponsesSchema.shape["keyof ListQuizzesInCourseResponses"];

export const listCourseSectionsResponseSchema = listCourseSectionsResponsesSchema.shape["keyof ListCourseSectionsResponses"];

export const listCoursesWithTheirLatestEpubExportResponseSchema = listCoursesWithTheirLatestEpubExportResponsesSchema.shape["keyof ListCoursesWithTheirLatestEpubExportResponses"];

export const listUserPageViewsResponseSchema = listUserPageViewsResponsesSchema.shape["keyof ListUserPageViewsResponses"];

export const adminSchema: z.ZodSchema<Admin> = z.lazy(() => z.object({
    id: z.number(),
    role: z.string().optional().nullable(),
    user: userSchema.optional(),
    workflow_state: z.string().optional().nullable()
}));

export const userSchema: z.ZodSchema<User> = z.lazy(() => z.object({
    avatar_state: z.string().optional().nullable(),
    avatar_url: z.string().optional().nullable(),
    bio: z.string().optional().nullable(),
    email: z.string().optional().nullable(),
    enrollments: z.array(enrollmentSchema).optional().nullable(),
    first_name: z.string().optional().nullable(),
    id: z.number(),
    integration_id: z.string().optional().nullable(),
    last_login: z.string().optional().nullable(),
    last_name: z.string().optional().nullable(),
    locale: z.string().optional().nullable(),
    login_id: z.string().optional().nullable(),
    name: z.string().optional().nullable(),
    short_name: z.string().optional().nullable(),
    sections: z.string().optional().nullable(),
    sis_import_id: z.number().optional().nullable(),
    sis_user_id: z.string().optional().nullable(),
    sortable_name: z.string().optional().nullable(),
    time_zone: z.string().optional().nullable()
}));

export const assignmentSchema: z.ZodSchema<Assignment> = z.lazy(() => z.object({
    all_dates: z.array(assignmentDateSchema).optional().nullable(),
    allowed_extensions: z.array(z.string()).optional().nullable(),
    anonymous_submissions: z.boolean().optional().nullable(),
    assignment_group_id: z.number().optional().nullable(),
    assignment_visibility: z.array(z.number()).optional().nullable(),
    automatic_peer_reviews: z.boolean().optional().nullable(),
    course_id: z.number().optional().nullable(),
    created_at: z.string().optional().nullable(),
    description: z.string().optional().nullable(),
    discussion_topic: discussionTopicNullableSchema.optional(),
    due_at: z.string().optional().nullable(),
    due_date_required: z.boolean().optional().nullable(),
    external_tool_tag_attributes: externalToolTagAttributesSchema.optional(),
    freeze_on_copy: z.boolean().optional().nullable(),
    frozen: z.boolean().optional().nullable(),
    frozen_attributes: z.array(z.string()).optional().nullable(),
    grade_group_students_individually: z.boolean().optional().nullable(),
    grading_standard_id: z.number().optional().nullable(),
    grading_type: z.string().optional().nullable(),
    group_category_id: z.number().optional().nullable(),
    has_overrides: z.boolean().optional().nullable(),
    has_submitted_submissions: z.boolean().optional().nullable(),
    html_url: z.string().optional().nullable(),
    id: z.number().optional().nullable(),
    integration_data: z.record(z.string()).optional().nullable(),
    integration_id: z.string().optional().nullable(),
    intra_group_peer_reviews: z.boolean().optional().nullable(),
    lock_at: z.string().optional().nullable(),
    lock_explanation: z.string().optional().nullable(),
    lock_info: lockInfoSchema.optional(),
    locked_for_user: z.boolean().optional().nullable(),
    max_name_length: z.number().optional().nullable(),
    moderated_grading: z.boolean().optional().nullable(),
    muted: z.boolean().optional().nullable(),
    name: z.string().optional().nullable(),
    needs_grading_count: z.number().optional().nullable(),
    needs_grading_count_by_section: z.array(needsGradingCountSchema).optional().nullable(),
    omit_from_final_grade: z.boolean().optional().nullable(),
    only_visible_to_overrides: z.boolean().optional().nullable(),
    overrides: z.array(assignmentOverrideSchema).optional().nullable(),
    peer_review_count: z.number().optional().nullable(),
    peer_reviews: z.boolean().optional().nullable(),
    peer_reviews_assign_at: z.string().optional().nullable(),
    points_possible: z.number().optional().nullable(),
    position: z.number().optional().nullable(),
    post_to_sis: z.boolean().optional().nullable(),
    published: z.boolean().optional().nullable(),
    quiz_id: z.number().optional().nullable(),
    rubric: z.array(rubricCriteriaSchema).optional().nullable(),
    rubric_settings: rubricSettingsSchema.optional(),
    submission: submissionNullableSchema.optional(),
    submission_types: z.array(z.string()).optional().nullable(),
    submissions_download_url: z.string().optional().nullable(),
    turnitin_enabled: z.boolean().optional().nullable(),
    turnitin_settings: turnitinSettingsSchema.optional(),
    unlock_at: z.string().optional().nullable(),
    unpublishable: z.boolean().optional().nullable(),
    updated_at: z.string().optional().nullable(),
    use_rubric_for_grading: z.boolean().optional().nullable(),
    vericite_enabled: z.boolean().optional().nullable()
}));

export const submissionNullableSchema: z.ZodSchema<SubmissionNullable> = z.lazy(() => z.object({
    anonymous_id: z.string().optional().nullable(),
    assignment: assignmentNullableSchema.optional(),
    assignment_id: z.number().optional().nullable(),
    assignment_visible: z.boolean().optional().nullable(),
    attempt: z.number().optional().nullable(),
    body: z.string().optional().nullable(),
    course: z.string().optional().nullable(),
    excused: z.boolean().optional().nullable(),
    extra_attempts: z.number().optional().nullable(),
    grade: z.string().optional().nullable(),
    grade_matches_current_submission: z.boolean().optional().nullable(),
    graded_at: z.string().optional().nullable(),
    grader_id: z.number().optional().nullable(),
    html_url: z.string().optional().nullable(),
    late: z.boolean().optional().nullable(),
    late_policy_status: z.string().optional().nullable(),
    missing: z.boolean().optional().nullable(),
    points_deducted: z.number().optional().nullable(),
    posted_at: z.string().optional().nullable(),
    preview_url: z.string().optional().nullable(),
    read_status: z.string().optional().nullable(),
    redo_request: z.boolean().optional().nullable(),
    score: z.number().optional().nullable(),
    seconds_late: z.number().optional().nullable(),
    submission_comments: z.array(submissionCommentSchema).optional().nullable(),
    submission_type: z.string().optional().nullable(),
    submitted_at: z.string().optional().nullable(),
    url: z.string().optional().nullable(),
    user: z.string().optional().nullable(),
    user_id: z.number().optional().nullable(),
    workflow_state: z.string().optional().nullable()
}).nullable());

export const assignmentNullableSchema: z.ZodSchema<AssignmentNullable> = z.lazy(() => z.object({
    all_dates: z.array(assignmentDateSchema).optional().nullable(),
    allowed_extensions: z.array(z.string()).optional().nullable(),
    anonymous_submissions: z.boolean().optional().nullable(),
    assignment_group_id: z.number().optional().nullable(),
    assignment_visibility: z.array(z.number()).optional().nullable(),
    automatic_peer_reviews: z.boolean().optional().nullable(),
    course_id: z.number().optional().nullable(),
    created_at: z.string().optional().nullable(),
    description: z.string().optional().nullable(),
    discussion_topic: discussionTopicNullableSchema.optional(),
    due_at: z.string().optional().nullable(),
    due_date_required: z.boolean().optional().nullable(),
    external_tool_tag_attributes: externalToolTagAttributesSchema.optional(),
    freeze_on_copy: z.boolean().optional().nullable(),
    frozen: z.boolean().optional().nullable(),
    frozen_attributes: z.array(z.string()).optional().nullable(),
    grade_group_students_individually: z.boolean().optional().nullable(),
    grading_standard_id: z.number().optional().nullable(),
    grading_type: z.string().optional().nullable(),
    group_category_id: z.number().optional().nullable(),
    has_overrides: z.boolean().optional().nullable(),
    has_submitted_submissions: z.boolean().optional().nullable(),
    html_url: z.string().optional().nullable(),
    id: z.number().optional().nullable(),
    integration_data: z.record(z.string()).optional().nullable(),
    integration_id: z.string().optional().nullable(),
    intra_group_peer_reviews: z.boolean().optional().nullable(),
    lock_at: z.string().optional().nullable(),
    lock_explanation: z.string().optional().nullable(),
    lock_info: lockInfoSchema.optional(),
    locked_for_user: z.boolean().optional().nullable(),
    max_name_length: z.number().optional().nullable(),
    moderated_grading: z.boolean().optional().nullable(),
    muted: z.boolean().optional().nullable(),
    name: z.string().optional().nullable(),
    needs_grading_count: z.number().optional().nullable(),
    needs_grading_count_by_section: z.array(needsGradingCountSchema).optional().nullable(),
    omit_from_final_grade: z.boolean().optional().nullable(),
    only_visible_to_overrides: z.boolean().optional().nullable(),
    overrides: z.array(assignmentOverrideSchema).optional().nullable(),
    peer_review_count: z.number().optional().nullable(),
    peer_reviews: z.boolean().optional().nullable(),
    peer_reviews_assign_at: z.string().optional().nullable(),
    points_possible: z.number().optional().nullable(),
    position: z.number().optional().nullable(),
    post_to_sis: z.boolean().optional().nullable(),
    published: z.boolean().optional().nullable(),
    quiz_id: z.number().optional().nullable(),
    rubric: z.array(rubricCriteriaSchema).optional().nullable(),
    rubric_settings: rubricSettingsSchema.optional(),
    submission: submissionNullableSchema.optional(),
    submission_types: z.array(z.string()).optional().nullable(),
    submissions_download_url: z.string().optional().nullable(),
    turnitin_enabled: z.boolean().optional().nullable(),
    turnitin_settings: turnitinSettingsSchema.optional(),
    unlock_at: z.string().optional().nullable(),
    unpublishable: z.boolean().optional().nullable(),
    updated_at: z.string().optional().nullable(),
    use_rubric_for_grading: z.boolean().optional().nullable(),
    vericite_enabled: z.boolean().optional().nullable()
}).nullable());

export const courseSchema: z.ZodSchema<Course> = z.lazy(() => z.object({
    access_restricted_by_date: z.boolean().optional().nullable(),
    account_id: z.number().optional().nullable(),
    allow_student_assignment_edits: z.boolean().optional().nullable(),
    allow_student_forum_attachments: z.boolean().optional().nullable(),
    allow_wiki_comments: z.boolean().optional().nullable(),
    apply_assignment_group_weights: z.boolean().optional().nullable(),
    blueprint: z.boolean().optional().nullable(),
    blueprint_restrictions: z.record(z.unknown()).optional().nullable(),
    blueprint_restrictions_by_object_type: z.record(z.unknown()).optional().nullable(),
    calendar: calendarLinkSchema.optional(),
    course_code: z.string().optional().nullable(),
    course_color: z.string().optional().nullable(),
    course_format: z.string().optional().nullable(),
    course_progress: courseProgressSchema.optional(),
    created_at: z.string().optional().nullable(),
    default_view: z.string().optional().nullable(),
    end_at: z.string().optional().nullable(),
    enrollment_term_id: z.number().optional().nullable(),
    enrollments: z.array(enrollmentSchema).optional().nullable(),
    friendly_name: z.string().optional().nullable(),
    grade_passback_setting: z.string().optional().nullable(),
    grading_periods: z.array(gradingPeriodSchema).optional().nullable(),
    grading_standard_id: z.number().optional().nullable(),
    hide_final_grades: z.boolean().optional().nullable(),
    homeroom_course: z.boolean().optional().nullable(),
    id: z.number().optional(),
    integration_id: z.string().optional().nullable(),
    is_public: z.boolean().optional().nullable(),
    is_public_to_auth_users: z.boolean().optional().nullable(),
    license: z.string().optional().nullable(),
    locale: z.string().optional().nullable(),
    name: z.string().optional().nullable(),
    needs_grading_count: z.number().optional().nullable(),
    open_enrollment: z.boolean().optional().nullable(),
    original_name: z.string().optional().nullable(),
    permissions: z.record(z.unknown()).optional().nullable(),
    public_description: z.string().optional().nullable(),
    public_syllabus: z.boolean().optional().nullable(),
    public_syllabus_to_auth: z.boolean().optional().nullable(),
    restrict_enrollments_to_course_dates: z.boolean().optional().nullable(),
    root_account_id: z.number().optional().nullable(),
    self_enrollment: z.boolean().optional().nullable(),
    sis_course_id: z.string().optional().nullable(),
    sis_import_id: z.number().optional().nullable(),
    start_at: z.string().optional().nullable(),
    storage_quota_mb: z.number().optional().nullable(),
    storage_quota_used_mb: z.number().optional().nullable(),
    syllabus_body: z.string().optional().nullable(),
    template: z.boolean().optional().nullable(),
    term: termSchema.optional(),
    time_zone: z.string().optional().nullable(),
    total_students: z.number().optional().nullable(),
    uuid: z.string().optional().nullable(),
    workflow_state: z.string().optional().nullable()
}));

export const enrollmentSchema: z.ZodSchema<Enrollment> = z.lazy(() => z.object({
    associated_user_id: z.number().optional().nullable(),
    computed_current_grade: z.string().optional().nullable(),
    computed_current_score: z.number().optional().nullable(),
    computed_final_grade: z.string().optional().nullable(),
    computed_final_score: z.number().optional().nullable(),
    course_id: z.number().optional().nullable(),
    course_integration_id: z.string().optional().nullable(),
    course_section_id: z.number().optional().nullable(),
    created_at: z.string().optional().nullable(),
    current_grading_period_id: z.number().optional().nullable(),
    current_grading_period_title: z.string().optional().nullable(),
    current_period_computed_current_grade: z.string().optional().nullable(),
    current_period_computed_current_score: z.number().optional().nullable(),
    current_period_computed_final_grade: z.string().optional().nullable(),
    current_period_computed_final_score: z.number().optional().nullable(),
    current_period_override_grade: z.string().optional().nullable(),
    current_period_override_score: z.number().optional().nullable(),
    current_period_unposted_current_grade: z.string().optional().nullable(),
    current_period_unposted_current_score: z.number().optional().nullable(),
    current_period_unposted_final_grade: z.string().optional().nullable(),
    current_period_unposted_final_score: z.number().optional().nullable(),
    end_at: z.string().optional().nullable(),
    enrollment_state: z.string().optional().nullable(),
    grades: gradeSchema.optional(),
    has_grading_periods: z.boolean().optional().nullable(),
    html_url: z.string().optional().nullable(),
    id: z.number().optional(),
    last_activity_at: z.string().optional().nullable(),
    last_attended_at: z.string().optional().nullable(),
    limit_privileges_to_course_section: z.boolean().optional().nullable(),
    override_grade: z.string().optional().nullable(),
    override_score: z.number().optional().nullable(),
    role: z.string().optional().nullable(),
    role_id: z.number().optional().nullable(),
    root_account_id: z.number().optional().nullable(),
    section_integration_id: z.string().optional().nullable(),
    sis_account_id: z.string().optional().nullable(),
    sis_course_id: z.string().optional().nullable(),
    sis_import_id: z.number().optional().nullable(),
    sis_section_id: z.string().optional().nullable(),
    sis_user_id: z.string().optional().nullable(),
    start_at: z.string().optional().nullable(),
    total_activity_time: z.number().optional().nullable(),
    totals_for_all_grading_periods_option: z.boolean().optional().nullable(),
    type: z.string().optional().nullable(),
    unposted_current_grade: z.string().optional().nullable(),
    unposted_current_score: z.string().optional().nullable(),
    unposted_final_grade: z.string().optional().nullable(),
    unposted_final_score: z.number().optional().nullable(),
    updated_at: z.string().optional().nullable(),
    user: userNullableSchema.optional(),
    user_id: z.number().optional().nullable()
}));

export const courseWithIncludesSchema: z.ZodSchema<CourseWithIncludes> = z.lazy(() => z.object({
    access_restricted_by_date: z.boolean().optional().nullable(),
    account_id: z.number().optional().nullable(),
    allow_student_assignment_edits: z.boolean().optional().nullable(),
    allow_student_forum_attachments: z.boolean().optional().nullable(),
    allow_wiki_comments: z.boolean().optional().nullable(),
    apply_assignment_group_weights: z.boolean().optional().nullable(),
    blueprint: z.boolean().optional().nullable(),
    blueprint_restrictions: z.record(z.unknown()).optional().nullable(),
    blueprint_restrictions_by_object_type: z.record(z.unknown()).optional().nullable(),
    calendar: calendarLinkSchema.optional(),
    course_code: z.string().optional().nullable(),
    course_color: z.string().optional().nullable(),
    course_format: z.string().optional().nullable(),
    course_progress: courseProgressSchema.optional(),
    created_at: z.string().optional().nullable(),
    default_view: z.string().optional().nullable(),
    end_at: z.string().optional().nullable(),
    enrollment_term_id: z.number().optional().nullable(),
    enrollments: z.array(enrollmentSchema).optional().nullable(),
    friendly_name: z.string().optional().nullable(),
    grade_passback_setting: z.string().optional().nullable(),
    grading_periods: z.array(gradingPeriodSchema).optional().nullable(),
    grading_standard_id: z.number().optional().nullable(),
    hide_final_grades: z.boolean().optional().nullable(),
    homeroom_course: z.boolean().optional().nullable(),
    id: z.number().optional(),
    integration_id: z.string().optional().nullable(),
    is_public: z.boolean().optional().nullable(),
    is_public_to_auth_users: z.boolean().optional().nullable(),
    license: z.string().optional().nullable(),
    locale: z.string().optional().nullable(),
    name: z.string().optional().nullable(),
    needs_grading_count: z.number().optional().nullable(),
    open_enrollment: z.boolean().optional().nullable(),
    original_name: z.string().optional().nullable(),
    permissions: z.record(z.unknown()).optional().nullable(),
    public_description: z.string().optional().nullable(),
    public_syllabus: z.boolean().optional().nullable(),
    public_syllabus_to_auth: z.boolean().optional().nullable(),
    restrict_enrollments_to_course_dates: z.boolean().optional().nullable(),
    root_account_id: z.number().optional().nullable(),
    sections: z.array(sectionSchema).optional().nullable(),
    self_enrollment: z.boolean().optional().nullable(),
    sis_course_id: z.string().optional().nullable(),
    sis_import_id: z.number().optional().nullable(),
    start_at: z.string().optional().nullable(),
    storage_quota_mb: z.number().optional().nullable(),
    storage_quota_used_mb: z.number().optional().nullable(),
    syllabus_body: z.string().optional().nullable(),
    template: z.boolean().optional().nullable(),
    term: termSchema.optional(),
    time_zone: z.string().optional().nullable(),
    total_students: z.number().optional().nullable(),
    uuid: z.string().optional().nullable(),
    workflow_state: z.string().optional().nullable()
}));

export const userNullableSchema: z.ZodSchema<UserNullable> = z.lazy(() => z.object({
    avatar_state: z.string().optional().nullable(),
    avatar_url: z.string().optional().nullable(),
    bio: z.string().optional().nullable(),
    email: z.string().optional().nullable(),
    enrollments: z.array(enrollmentSchema).optional().nullable(),
    first_name: z.string().optional().nullable(),
    id: z.number(),
    integration_id: z.string().optional().nullable(),
    last_login: z.string().optional().nullable(),
    last_name: z.string().optional().nullable(),
    locale: z.string().optional().nullable(),
    login_id: z.string().optional().nullable(),
    name: z.string().optional().nullable(),
    short_name: z.string().optional().nullable(),
    sections: z.string().optional().nullable(),
    sis_import_id: z.number().optional().nullable(),
    sis_user_id: z.string().optional().nullable(),
    sortable_name: z.string().optional().nullable(),
    time_zone: z.string().optional().nullable()
}).nullable());

export const outcomeImportSchema: z.ZodSchema<OutcomeImport> = z.lazy(() => z.object({
    created_at: z.string().optional().nullable(),
    data: outcomeImportDataSchema.optional(),
    ended_at: z.string().optional().nullable(),
    id: z.number().optional(),
    processing_errors: z.array(z.array(z.record(z.unknown()))).optional().nullable(),
    progress: z.string().optional().nullable(),
    updated_at: z.string().optional().nullable(),
    user: userNullableSchema.optional(),
    workflow_state: z.string().optional().nullable()
}));

export const outcomeResultResponseSchema: z.ZodSchema<OutcomeResultResponse> = z.lazy(() => z.object({
    outcome_results: z.array(outcomeResultSchema).optional(),
    linked: z.object({
        alignments: z.array(outcomeAlignmentSchema).optional().nullable(),
        outcomes: z.array(outcomeSchema).optional().nullable(),
        outcome_groups: z.array(outcomeGroupSchema).optional().nullable(),
        outcome_links: z.array(outcomeLinkSchema).optional().nullable(),
        outcome_paths: z.array(outcomePathSchema).optional(),
        users: z.array(userSchema).optional()
    }).optional().nullable()
}));

export const outcomeRollupResponseSchema: z.ZodSchema<OutcomeRollupResponse> = z.lazy(() => z.object({
    rollups: z.array(outcomeRollupSchema).optional(),
    linked: z.object({
        courses: z.array(courseSchema).optional().nullable(),
        outcomes: z.array(outcomeSchema).optional().nullable(),
        outcome_groups: z.array(outcomeGroupSchema).optional().nullable(),
        outcome_links: z.array(outcomeLinkSchema).optional().nullable(),
        outcome_paths: z.array(outcomePathSchema).optional(),
        users: z.array(userSchema).optional()
    }).optional().nullable()
}));

export const pageSchema: z.ZodSchema<Page> = z.lazy(() => z.object({
    body: z.string().optional().nullable(),
    created_at: z.string().optional().nullable(),
    editing_roles: z.string().optional().nullable(),
    front_page: z.boolean().optional().nullable(),
    hide_from_students: z.boolean().optional().nullable(),
    last_edited_by: userNullableSchema.optional(),
    lock_explanation: z.string().optional().nullable(),
    lock_info: lockInfoSchema.optional(),
    locked_for_user: z.boolean().optional().nullable(),
    published: z.boolean().optional().nullable(),
    title: z.string().optional().nullable(),
    updated_at: z.string().optional().nullable(),
    url: z.string().optional().nullable()
}));

export const pageRevisionSchema: z.ZodSchema<PageRevision> = z.lazy(() => z.object({
    body: z.string().optional().nullable(),
    edited_by: userNullableSchema.optional(),
    latest: z.boolean().optional().nullable(),
    revision_id: z.number().optional().nullable(),
    title: z.string().optional().nullable(),
    updated_at: z.string().optional().nullable(),
    url: z.string().optional().nullable()
}));

export const sisImportSchema: z.ZodSchema<SisImport> = z.lazy(() => z.object({
    add_sis_stickiness: z.boolean().optional().nullable(),
    batch_mode: z.boolean().optional().nullable(),
    batch_mode_term_id: z.string().optional().nullable(),
    clear_sis_stickiness: z.boolean().optional().nullable(),
    created_at: z.string().optional().nullable(),
    csv_attachments: z.array(z.array(fileSchema)).optional().nullable(),
    data: sisImportDataSchema.optional(),
    diffed_against_import_id: z.number().optional().nullable(),
    diffing_data_set_identifier: z.string().optional().nullable(),
    ended_at: z.string().optional().nullable(),
    errors_attachment: fileNullableSchema.optional(),
    id: z.number().optional(),
    multi_term_batch_mode: z.boolean().optional().nullable(),
    override_sis_stickiness: z.boolean().optional().nullable(),
    processing_errors: z.array(z.array(z.string())).optional().nullable(),
    processing_warnings: z.array(z.array(z.string())).optional().nullable(),
    progress: z.string().optional().nullable(),
    skip_deletes: z.boolean().optional().nullable(),
    updated_at: z.string().optional().nullable(),
    user: userNullableSchema.optional(),
    workflow_state: z.string().optional().nullable()
}));

export const submissionSchema: z.ZodSchema<Submission> = z.lazy(() => z.object({
    anonymous_id: z.string().optional().nullable(),
    assignment: assignmentNullableSchema.optional(),
    assignment_id: z.number().optional().nullable(),
    assignment_visible: z.boolean().optional().nullable(),
    attempt: z.number().optional().nullable(),
    body: z.string().optional().nullable(),
    course: z.string().optional().nullable(),
    excused: z.boolean().optional().nullable(),
    extra_attempts: z.number().optional().nullable(),
    grade: z.string().optional().nullable(),
    grade_matches_current_submission: z.boolean().optional().nullable(),
    graded_at: z.string().optional().nullable(),
    grader_id: z.number().optional().nullable(),
    html_url: z.string().optional().nullable(),
    late: z.boolean().optional().nullable(),
    late_policy_status: z.string().optional().nullable(),
    missing: z.boolean().optional().nullable(),
    points_deducted: z.number().optional().nullable(),
    posted_at: z.string().optional().nullable(),
    preview_url: z.string().optional().nullable(),
    read_status: z.string().optional().nullable(),
    redo_request: z.boolean().optional().nullable(),
    score: z.number().optional().nullable(),
    seconds_late: z.number().optional().nullable(),
    submission_comments: z.array(submissionCommentSchema).optional().nullable(),
    submission_type: z.string().optional().nullable(),
    submitted_at: z.string().optional().nullable(),
    url: z.string().optional().nullable(),
    user: z.string().optional().nullable(),
    user_id: z.number().optional().nullable(),
    workflow_state: z.string().optional().nullable()
}));

export const getAllUsersInGroupLtiResponsesSchema: z.ZodSchema<GetAllUsersInGroupLtiResponses> = z.lazy(() => z.object({
    200: z.array(userSchema)
}));

export const getAllUsersInGroupLtiResponseSchema: z.ZodSchema<GetAllUsersInGroupLtiResponse> = z.lazy(() => getAllUsersInGroupLtiResponsesSchema.shape["keyof GetAllUsersInGroupLtiResponses"]);

export const getSingleUserLtiResponsesSchema: z.ZodSchema<GetSingleUserLtiResponses> = z.lazy(() => z.object({
    200: userSchema
}));

export const getSingleUserLtiResponseSchema: z.ZodSchema<GetSingleUserLtiResponse> = z.lazy(() => getSingleUserLtiResponsesSchema.shape["keyof GetSingleUserLtiResponses"]);

export const listAccountAdminsResponsesSchema: z.ZodSchema<ListAccountAdminsResponses> = z.lazy(() => z.object({
    200: z.array(adminSchema)
}));

export const listAccountAdminsResponseSchema: z.ZodSchema<ListAccountAdminsResponse> = z.lazy(() => listAccountAdminsResponsesSchema.shape["keyof ListAccountAdminsResponses"]);

export const makeAccountAdminResponsesSchema: z.ZodSchema<MakeAccountAdminResponses> = z.lazy(() => z.object({
    200: adminSchema
}));

export const makeAccountAdminResponseSchema: z.ZodSchema<MakeAccountAdminResponse> = z.lazy(() => makeAccountAdminResponsesSchema.shape["keyof MakeAccountAdminResponses"]);

export const removeAccountAdminResponsesSchema: z.ZodSchema<RemoveAccountAdminResponses> = z.lazy(() => z.object({
    200: adminSchema
}));

export const removeAccountAdminResponseSchema: z.ZodSchema<RemoveAccountAdminResponse> = z.lazy(() => removeAccountAdminResponsesSchema.shape["keyof RemoveAccountAdminResponses"]);

export const getAllCoursesAccountsResponsesSchema: z.ZodSchema<GetAllCoursesAccountsResponses> = z.lazy(() => z.object({
    200: z.array(courseSchema)
}));

export const getAllCoursesAccountsResponseSchema: z.ZodSchema<GetAllCoursesAccountsResponse> = z.lazy(() => getAllCoursesAccountsResponsesSchema.shape["keyof GetAllCoursesAccountsResponses"]);

export const createNewCourseResponsesSchema: z.ZodSchema<CreateNewCourseResponses> = z.lazy(() => z.object({
    200: courseSchema
}));

export const createNewCourseResponseSchema: z.ZodSchema<CreateNewCourseResponse> = z.lazy(() => createNewCourseResponsesSchema.shape["keyof CreateNewCourseResponses"]);

export const getSingleCourseAccountsResponsesSchema: z.ZodSchema<GetSingleCourseAccountsResponses> = z.lazy(() => z.object({
    200: courseSchema
}));

export const getSingleCourseAccountsResponseSchema: z.ZodSchema<GetSingleCourseAccountsResponse> = z.lazy(() => getSingleCourseAccountsResponsesSchema.shape["keyof GetSingleCourseAccountsResponses"]);

export const enrollmentByIdResponsesSchema: z.ZodSchema<EnrollmentByIdResponses> = z.lazy(() => z.object({
    200: enrollmentSchema
}));

export const enrollmentByIdResponseSchema: z.ZodSchema<EnrollmentByIdResponse> = z.lazy(() => enrollmentByIdResponsesSchema.shape["keyof EnrollmentByIdResponses"]);

export const importOutcomesAccountsResponsesSchema: z.ZodSchema<ImportOutcomesAccountsResponses> = z.lazy(() => z.object({
    200: outcomeImportSchema
}));

export const importOutcomesAccountsResponseSchema: z.ZodSchema<ImportOutcomesAccountsResponse> = z.lazy(() => importOutcomesAccountsResponsesSchema.shape["keyof ImportOutcomesAccountsResponses"]);

export const getOutcomeImportStatusAccountsResponsesSchema: z.ZodSchema<GetOutcomeImportStatusAccountsResponses> = z.lazy(() => z.object({
    200: outcomeImportSchema
}));

export const getOutcomeImportStatusAccountsResponseSchema: z.ZodSchema<GetOutcomeImportStatusAccountsResponse> = z.lazy(() => getOutcomeImportStatusAccountsResponsesSchema.shape["keyof GetOutcomeImportStatusAccountsResponses"]);

export const selfRegisterUserResponsesSchema: z.ZodSchema<SelfRegisterUserResponses> = z.lazy(() => z.object({
    200: userSchema
}));

export const selfRegisterUserResponseSchema: z.ZodSchema<SelfRegisterUserResponse> = z.lazy(() => selfRegisterUserResponsesSchema.shape["keyof SelfRegisterUserResponses"]);

export const getSisImportListResponsesSchema: z.ZodSchema<GetSisImportListResponses> = z.lazy(() => z.object({
    200: z.array(sisImportSchema)
}));

export const getSisImportListResponseSchema: z.ZodSchema<GetSisImportListResponse> = z.lazy(() => getSisImportListResponsesSchema.shape["keyof GetSisImportListResponses"]);

export const importSisDataResponsesSchema: z.ZodSchema<ImportSisDataResponses> = z.lazy(() => z.object({
    200: sisImportSchema
}));

export const importSisDataResponseSchema: z.ZodSchema<ImportSisDataResponse> = z.lazy(() => importSisDataResponsesSchema.shape["keyof ImportSisDataResponses"]);

export const getSisImportStatusResponsesSchema: z.ZodSchema<GetSisImportStatusResponses> = z.lazy(() => z.object({
    200: sisImportSchema
}));

export const getSisImportStatusResponseSchema: z.ZodSchema<GetSisImportStatusResponse> = z.lazy(() => getSisImportStatusResponsesSchema.shape["keyof GetSisImportStatusResponses"]);

export const abortSisImportResponsesSchema: z.ZodSchema<AbortSisImportResponses> = z.lazy(() => z.object({
    200: sisImportSchema
}));

export const abortSisImportResponseSchema: z.ZodSchema<AbortSisImportResponse> = z.lazy(() => abortSisImportResponsesSchema.shape["keyof AbortSisImportResponses"]);

export const listUsersInAccountResponsesSchema: z.ZodSchema<ListUsersInAccountResponses> = z.lazy(() => z.object({
    200: z.array(userSchema)
}));

export const listUsersInAccountResponseSchema: z.ZodSchema<ListUsersInAccountResponse> = z.lazy(() => listUsersInAccountResponsesSchema.shape["keyof ListUsersInAccountResponses"]);

export const createUserResponsesSchema: z.ZodSchema<CreateUserResponses> = z.lazy(() => z.object({
    200: userSchema
}));

export const createUserResponseSchema: z.ZodSchema<CreateUserResponse> = z.lazy(() => createUserResponsesSchema.shape["keyof CreateUserResponses"]);

export const deleteUserFromRootAccountResponsesSchema: z.ZodSchema<DeleteUserFromRootAccountResponses> = z.lazy(() => z.object({
    200: userSchema
}));

export const deleteUserFromRootAccountResponseSchema: z.ZodSchema<DeleteUserFromRootAccountResponse> = z.lazy(() => deleteUserFromRootAccountResponsesSchema.shape["keyof DeleteUserFromRootAccountResponses"]);

export const listYourCoursesResponsesSchema: z.ZodSchema<ListYourCoursesResponses> = z.lazy(() => z.object({
    200: z.array(courseWithIncludesSchema)
}));

export const listYourCoursesResponseSchema: z.ZodSchema<ListYourCoursesResponse> = z.lazy(() => listYourCoursesResponsesSchema.shape["keyof ListYourCoursesResponses"]);

export const getUserInACourseLevelAssignmentDataResponsesSchema: z.ZodSchema<GetUserInACourseLevelAssignmentDataResponses> = z.lazy(() => z.object({
    200: z.array(assignmentSchema)
}));

export const getUserInACourseLevelAssignmentDataResponseSchema: z.ZodSchema<GetUserInACourseLevelAssignmentDataResponse> = z.lazy(() => getUserInACourseLevelAssignmentDataResponsesSchema.shape["keyof GetUserInACourseLevelAssignmentDataResponses"]);

export const listAssignmentsResponsesSchema: z.ZodSchema<ListAssignmentsResponses> = z.lazy(() => z.object({
    200: z.array(assignmentSchema)
}));

export const listAssignmentsResponseSchema: z.ZodSchema<ListAssignmentsResponse> = z.lazy(() => listAssignmentsResponsesSchema.shape["keyof ListAssignmentsResponses"]);

export const createAssignmentResponsesSchema: z.ZodSchema<CreateAssignmentResponses> = z.lazy(() => z.object({
    200: assignmentSchema
}));

export const createAssignmentResponseSchema: z.ZodSchema<CreateAssignmentResponse> = z.lazy(() => createAssignmentResponsesSchema.shape["keyof CreateAssignmentResponses"]);

export const listStudentsSelectedForModerationResponsesSchema: z.ZodSchema<ListStudentsSelectedForModerationResponses> = z.lazy(() => z.object({
    200: z.array(userSchema)
}));

export const listStudentsSelectedForModerationResponseSchema: z.ZodSchema<ListStudentsSelectedForModerationResponse> = z.lazy(() => listStudentsSelectedForModerationResponsesSchema.shape["keyof ListStudentsSelectedForModerationResponses"]);

export const selectStudentsForModerationResponsesSchema: z.ZodSchema<SelectStudentsForModerationResponses> = z.lazy(() => z.object({
    200: z.array(userSchema)
}));

export const selectStudentsForModerationResponseSchema: z.ZodSchema<SelectStudentsForModerationResponse> = z.lazy(() => selectStudentsForModerationResponsesSchema.shape["keyof SelectStudentsForModerationResponses"]);

export const listAssignmentSubmissionsCoursesResponsesSchema: z.ZodSchema<ListAssignmentSubmissionsCoursesResponses> = z.lazy(() => z.object({
    200: z.array(submissionSchema)
}));

export const listAssignmentSubmissionsCoursesResponseSchema: z.ZodSchema<ListAssignmentSubmissionsCoursesResponse> = z.lazy(() => listAssignmentSubmissionsCoursesResponsesSchema.shape["keyof ListAssignmentSubmissionsCoursesResponses"]);

export const getSingleSubmissionCoursesResponsesSchema: z.ZodSchema<GetSingleSubmissionCoursesResponses> = z.lazy(() => z.object({
    200: submissionSchema
}));

export const getSingleSubmissionCoursesResponseSchema: z.ZodSchema<GetSingleSubmissionCoursesResponse> = z.lazy(() => getSingleSubmissionCoursesResponsesSchema.shape["keyof GetSingleSubmissionCoursesResponses"]);

export const gradeOrCommentOnSubmissionCoursesResponsesSchema: z.ZodSchema<GradeOrCommentOnSubmissionCoursesResponses> = z.lazy(() => z.object({
    200: submissionSchema
}));

export const gradeOrCommentOnSubmissionCoursesResponseSchema: z.ZodSchema<GradeOrCommentOnSubmissionCoursesResponse> = z.lazy(() => gradeOrCommentOnSubmissionCoursesResponsesSchema.shape["keyof GradeOrCommentOnSubmissionCoursesResponses"]);

export const deleteAssignmentResponsesSchema: z.ZodSchema<DeleteAssignmentResponses> = z.lazy(() => z.object({
    200: assignmentSchema
}));

export const deleteAssignmentResponseSchema: z.ZodSchema<DeleteAssignmentResponse> = z.lazy(() => deleteAssignmentResponsesSchema.shape["keyof DeleteAssignmentResponses"]);

export const getSingleAssignmentResponsesSchema: z.ZodSchema<GetSingleAssignmentResponses> = z.lazy(() => z.object({
    200: assignmentSchema
}));

export const getSingleAssignmentResponseSchema: z.ZodSchema<GetSingleAssignmentResponse> = z.lazy(() => getSingleAssignmentResponsesSchema.shape["keyof GetSingleAssignmentResponses"]);

export const editAssignmentResponsesSchema: z.ZodSchema<EditAssignmentResponses> = z.lazy(() => z.object({
    200: assignmentSchema
}));

export const editAssignmentResponseSchema: z.ZodSchema<EditAssignmentResponse> = z.lazy(() => editAssignmentResponsesSchema.shape["keyof EditAssignmentResponses"]);

export const getAssociatedCourseInformationResponsesSchema: z.ZodSchema<GetAssociatedCourseInformationResponses> = z.lazy(() => z.object({
    200: z.array(courseSchema)
}));

export const getAssociatedCourseInformationResponseSchema: z.ZodSchema<GetAssociatedCourseInformationResponse> = z.lazy(() => getAssociatedCourseInformationResponsesSchema.shape["keyof GetAssociatedCourseInformationResponses"]);

export const listEnrollmentsCoursesResponsesSchema: z.ZodSchema<ListEnrollmentsCoursesResponses> = z.lazy(() => z.object({
    200: z.array(enrollmentSchema)
}));

export const listEnrollmentsCoursesResponseSchema: z.ZodSchema<ListEnrollmentsCoursesResponse> = z.lazy(() => listEnrollmentsCoursesResponsesSchema.shape["keyof ListEnrollmentsCoursesResponses"]);

export const enrollUserCoursesResponsesSchema: z.ZodSchema<EnrollUserCoursesResponses> = z.lazy(() => z.object({
    200: enrollmentSchema
}));

export const enrollUserCoursesResponseSchema: z.ZodSchema<EnrollUserCoursesResponse> = z.lazy(() => enrollUserCoursesResponsesSchema.shape["keyof EnrollUserCoursesResponses"]);

export const concludeDeactivateOrDeleteEnrollmentResponsesSchema: z.ZodSchema<ConcludeDeactivateOrDeleteEnrollmentResponses> = z.lazy(() => z.object({
    200: enrollmentSchema
}));

export const concludeDeactivateOrDeleteEnrollmentResponseSchema: z.ZodSchema<ConcludeDeactivateOrDeleteEnrollmentResponse> = z.lazy(() => concludeDeactivateOrDeleteEnrollmentResponsesSchema.shape["keyof ConcludeDeactivateOrDeleteEnrollmentResponses"]);

export const reActivateEnrollmentResponsesSchema: z.ZodSchema<ReActivateEnrollmentResponses> = z.lazy(() => z.object({
    200: enrollmentSchema
}));

export const reActivateEnrollmentResponseSchema: z.ZodSchema<ReActivateEnrollmentResponse> = z.lazy(() => reActivateEnrollmentResponsesSchema.shape["keyof ReActivateEnrollmentResponses"]);

export const showFrontPageCoursesResponsesSchema: z.ZodSchema<ShowFrontPageCoursesResponses> = z.lazy(() => z.object({
    200: pageSchema
}));

export const showFrontPageCoursesResponseSchema: z.ZodSchema<ShowFrontPageCoursesResponse> = z.lazy(() => showFrontPageCoursesResponsesSchema.shape["keyof ShowFrontPageCoursesResponses"]);

export const updateCreateFrontPageCoursesResponsesSchema: z.ZodSchema<UpdateCreateFrontPageCoursesResponses> = z.lazy(() => z.object({
    200: pageSchema
}));

export const updateCreateFrontPageCoursesResponseSchema: z.ZodSchema<UpdateCreateFrontPageCoursesResponse> = z.lazy(() => updateCreateFrontPageCoursesResponsesSchema.shape["keyof UpdateCreateFrontPageCoursesResponses"]);

export const importOutcomesCoursesResponsesSchema: z.ZodSchema<ImportOutcomesCoursesResponses> = z.lazy(() => z.object({
    200: outcomeImportSchema
}));

export const importOutcomesCoursesResponseSchema: z.ZodSchema<ImportOutcomesCoursesResponse> = z.lazy(() => importOutcomesCoursesResponsesSchema.shape["keyof ImportOutcomesCoursesResponses"]);

export const getOutcomeImportStatusCoursesResponsesSchema: z.ZodSchema<GetOutcomeImportStatusCoursesResponses> = z.lazy(() => z.object({
    200: outcomeImportSchema
}));

export const getOutcomeImportStatusCoursesResponseSchema: z.ZodSchema<GetOutcomeImportStatusCoursesResponse> = z.lazy(() => getOutcomeImportStatusCoursesResponsesSchema.shape["keyof GetOutcomeImportStatusCoursesResponses"]);

export const getOutcomeResultsResponsesSchema: z.ZodSchema<GetOutcomeResultsResponses> = z.lazy(() => z.object({
    200: outcomeResultResponseSchema
}));

export const getOutcomeResultsResponseSchema: z.ZodSchema<GetOutcomeResultsResponse> = z.lazy(() => getOutcomeResultsResponsesSchema.shape["keyof GetOutcomeResultsResponses"]);

export const getOutcomeResultRollupsResponsesSchema: z.ZodSchema<GetOutcomeResultRollupsResponses> = z.lazy(() => z.object({
    200: outcomeRollupResponseSchema
}));

export const getOutcomeResultRollupsResponseSchema: z.ZodSchema<GetOutcomeResultRollupsResponse> = z.lazy(() => getOutcomeResultRollupsResponsesSchema.shape["keyof GetOutcomeResultRollupsResponses"]);

export const listPagesCoursesResponsesSchema: z.ZodSchema<ListPagesCoursesResponses> = z.lazy(() => z.object({
    200: z.array(pageSchema)
}));

export const listPagesCoursesResponseSchema: z.ZodSchema<ListPagesCoursesResponse> = z.lazy(() => listPagesCoursesResponsesSchema.shape["keyof ListPagesCoursesResponses"]);

export const createPageCoursesResponsesSchema: z.ZodSchema<CreatePageCoursesResponses> = z.lazy(() => z.object({
    200: pageSchema
}));

export const createPageCoursesResponseSchema: z.ZodSchema<CreatePageCoursesResponse> = z.lazy(() => createPageCoursesResponsesSchema.shape["keyof CreatePageCoursesResponses"]);

export const deletePageCoursesResponsesSchema: z.ZodSchema<DeletePageCoursesResponses> = z.lazy(() => z.object({
    200: pageSchema
}));

export const deletePageCoursesResponseSchema: z.ZodSchema<DeletePageCoursesResponse> = z.lazy(() => deletePageCoursesResponsesSchema.shape["keyof DeletePageCoursesResponses"]);

export const showPageCoursesResponsesSchema: z.ZodSchema<ShowPageCoursesResponses> = z.lazy(() => z.object({
    200: pageSchema
}));

export const showPageCoursesResponseSchema: z.ZodSchema<ShowPageCoursesResponse> = z.lazy(() => showPageCoursesResponsesSchema.shape["keyof ShowPageCoursesResponses"]);

export const updateCreatePageCoursesResponsesSchema: z.ZodSchema<UpdateCreatePageCoursesResponses> = z.lazy(() => z.object({
    200: pageSchema
}));

export const updateCreatePageCoursesResponseSchema: z.ZodSchema<UpdateCreatePageCoursesResponse> = z.lazy(() => updateCreatePageCoursesResponsesSchema.shape["keyof UpdateCreatePageCoursesResponses"]);

export const duplicatePageResponsesSchema: z.ZodSchema<DuplicatePageResponses> = z.lazy(() => z.object({
    200: pageSchema
}));

export const duplicatePageResponseSchema: z.ZodSchema<DuplicatePageResponse> = z.lazy(() => duplicatePageResponsesSchema.shape["keyof DuplicatePageResponses"]);

export const listRevisionsCoursesResponsesSchema: z.ZodSchema<ListRevisionsCoursesResponses> = z.lazy(() => z.object({
    200: z.array(pageRevisionSchema)
}));

export const listRevisionsCoursesResponseSchema: z.ZodSchema<ListRevisionsCoursesResponse> = z.lazy(() => listRevisionsCoursesResponsesSchema.shape["keyof ListRevisionsCoursesResponses"]);

export const showRevisionCoursesLatestResponsesSchema: z.ZodSchema<ShowRevisionCoursesLatestResponses> = z.lazy(() => z.object({
    200: pageRevisionSchema
}));

export const showRevisionCoursesLatestResponseSchema: z.ZodSchema<ShowRevisionCoursesLatestResponse> = z.lazy(() => showRevisionCoursesLatestResponsesSchema.shape["keyof ShowRevisionCoursesLatestResponses"]);

export const showRevisionCoursesRevisionIdResponsesSchema: z.ZodSchema<ShowRevisionCoursesRevisionIdResponses> = z.lazy(() => z.object({
    200: pageRevisionSchema
}));

export const showRevisionCoursesRevisionIdResponseSchema: z.ZodSchema<ShowRevisionCoursesRevisionIdResponse> = z.lazy(() => showRevisionCoursesRevisionIdResponsesSchema.shape["keyof ShowRevisionCoursesRevisionIdResponses"]);

export const revertToRevisionCoursesResponsesSchema: z.ZodSchema<RevertToRevisionCoursesResponses> = z.lazy(() => z.object({
    200: pageRevisionSchema
}));

export const revertToRevisionCoursesResponseSchema: z.ZodSchema<RevertToRevisionCoursesResponse> = z.lazy(() => revertToRevisionCoursesResponsesSchema.shape["keyof RevertToRevisionCoursesResponses"]);

export const listPotentialMembersCoursesResponsesSchema: z.ZodSchema<ListPotentialMembersCoursesResponses> = z.lazy(() => z.object({
    200: z.array(userSchema)
}));

export const listPotentialMembersCoursesResponseSchema: z.ZodSchema<ListPotentialMembersCoursesResponse> = z.lazy(() => listPotentialMembersCoursesResponsesSchema.shape["keyof ListPotentialMembersCoursesResponses"]);

export const listRecentlyLoggedInStudentsResponsesSchema: z.ZodSchema<ListRecentlyLoggedInStudentsResponses> = z.lazy(() => z.object({
    200: z.array(userSchema)
}));

export const listRecentlyLoggedInStudentsResponseSchema: z.ZodSchema<ListRecentlyLoggedInStudentsResponse> = z.lazy(() => listRecentlyLoggedInStudentsResponsesSchema.shape["keyof ListRecentlyLoggedInStudentsResponses"]);

export const resetCourseResponsesSchema: z.ZodSchema<ResetCourseResponses> = z.lazy(() => z.object({
    200: courseSchema
}));

export const resetCourseResponseSchema: z.ZodSchema<ResetCourseResponse> = z.lazy(() => resetCourseResponsesSchema.shape["keyof ResetCourseResponses"]);

export const listUsersInCourseSearchUsersResponsesSchema: z.ZodSchema<ListUsersInCourseSearchUsersResponses> = z.lazy(() => z.object({
    200: z.array(userSchema)
}));

export const listUsersInCourseSearchUsersResponseSchema: z.ZodSchema<ListUsersInCourseSearchUsersResponse> = z.lazy(() => listUsersInCourseSearchUsersResponsesSchema.shape["keyof ListUsersInCourseSearchUsersResponses"]);

export const listStudentsResponsesSchema: z.ZodSchema<ListStudentsResponses> = z.lazy(() => z.object({
    200: z.array(userSchema)
}));

export const listStudentsResponseSchema: z.ZodSchema<ListStudentsResponse> = z.lazy(() => listStudentsResponsesSchema.shape["keyof ListStudentsResponses"]);

export const listSubmissionsForMultipleAssignmentsCoursesResponsesSchema: z.ZodSchema<ListSubmissionsForMultipleAssignmentsCoursesResponses> = z.lazy(() => z.object({
    200: z.array(submissionSchema)
}));

export const listSubmissionsForMultipleAssignmentsCoursesResponseSchema: z.ZodSchema<ListSubmissionsForMultipleAssignmentsCoursesResponse> = z.lazy(() => listSubmissionsForMultipleAssignmentsCoursesResponsesSchema.shape["keyof ListSubmissionsForMultipleAssignmentsCoursesResponses"]);

export const listUsersInCourseUsersResponsesSchema: z.ZodSchema<ListUsersInCourseUsersResponses> = z.lazy(() => z.object({
    200: z.array(userSchema)
}));

export const listUsersInCourseUsersResponseSchema: z.ZodSchema<ListUsersInCourseUsersResponse> = z.lazy(() => listUsersInCourseUsersResponsesSchema.shape["keyof ListUsersInCourseUsersResponses"]);

export const getSingleUserResponsesSchema: z.ZodSchema<GetSingleUserResponses> = z.lazy(() => z.object({
    200: userSchema
}));

export const getSingleUserResponseSchema: z.ZodSchema<GetSingleUserResponse> = z.lazy(() => getSingleUserResponsesSchema.shape["keyof GetSingleUserResponses"]);

export const addsLastAttendedDateToStudentEnrollmentInCourseResponsesSchema: z.ZodSchema<AddsLastAttendedDateToStudentEnrollmentInCourseResponses> = z.lazy(() => z.object({
    200: enrollmentSchema
}));

export const addsLastAttendedDateToStudentEnrollmentInCourseResponseSchema: z.ZodSchema<AddsLastAttendedDateToStudentEnrollmentInCourseResponse> = z.lazy(() => addsLastAttendedDateToStudentEnrollmentInCourseResponsesSchema.shape["keyof AddsLastAttendedDateToStudentEnrollmentInCourseResponses"]);

export const getSingleCourseCoursesResponsesSchema: z.ZodSchema<GetSingleCourseCoursesResponses> = z.lazy(() => z.object({
    200: courseSchema
}));

export const getSingleCourseCoursesResponseSchema: z.ZodSchema<GetSingleCourseCoursesResponse> = z.lazy(() => getSingleCourseCoursesResponsesSchema.shape["keyof GetSingleCourseCoursesResponses"]);

export const listUsersInGroupCategoryResponsesSchema: z.ZodSchema<ListUsersInGroupCategoryResponses> = z.lazy(() => z.object({
    200: z.array(userSchema)
}));

export const listUsersInGroupCategoryResponseSchema: z.ZodSchema<ListUsersInGroupCategoryResponse> = z.lazy(() => listUsersInGroupCategoryResponsesSchema.shape["keyof ListUsersInGroupCategoryResponses"]);

export const showFrontPageGroupsResponsesSchema: z.ZodSchema<ShowFrontPageGroupsResponses> = z.lazy(() => z.object({
    200: pageSchema
}));

export const showFrontPageGroupsResponseSchema: z.ZodSchema<ShowFrontPageGroupsResponse> = z.lazy(() => showFrontPageGroupsResponsesSchema.shape["keyof ShowFrontPageGroupsResponses"]);

export const updateCreateFrontPageGroupsResponsesSchema: z.ZodSchema<UpdateCreateFrontPageGroupsResponses> = z.lazy(() => z.object({
    200: pageSchema
}));

export const updateCreateFrontPageGroupsResponseSchema: z.ZodSchema<UpdateCreateFrontPageGroupsResponse> = z.lazy(() => updateCreateFrontPageGroupsResponsesSchema.shape["keyof UpdateCreateFrontPageGroupsResponses"]);

export const listPagesGroupsResponsesSchema: z.ZodSchema<ListPagesGroupsResponses> = z.lazy(() => z.object({
    200: z.array(pageSchema)
}));

export const listPagesGroupsResponseSchema: z.ZodSchema<ListPagesGroupsResponse> = z.lazy(() => listPagesGroupsResponsesSchema.shape["keyof ListPagesGroupsResponses"]);

export const createPageGroupsResponsesSchema: z.ZodSchema<CreatePageGroupsResponses> = z.lazy(() => z.object({
    200: pageSchema
}));

export const createPageGroupsResponseSchema: z.ZodSchema<CreatePageGroupsResponse> = z.lazy(() => createPageGroupsResponsesSchema.shape["keyof CreatePageGroupsResponses"]);

export const deletePageGroupsResponsesSchema: z.ZodSchema<DeletePageGroupsResponses> = z.lazy(() => z.object({
    200: pageSchema
}));

export const deletePageGroupsResponseSchema: z.ZodSchema<DeletePageGroupsResponse> = z.lazy(() => deletePageGroupsResponsesSchema.shape["keyof DeletePageGroupsResponses"]);

export const showPageGroupsResponsesSchema: z.ZodSchema<ShowPageGroupsResponses> = z.lazy(() => z.object({
    200: pageSchema
}));

export const showPageGroupsResponseSchema: z.ZodSchema<ShowPageGroupsResponse> = z.lazy(() => showPageGroupsResponsesSchema.shape["keyof ShowPageGroupsResponses"]);

export const updateCreatePageGroupsResponsesSchema: z.ZodSchema<UpdateCreatePageGroupsResponses> = z.lazy(() => z.object({
    200: pageSchema
}));

export const updateCreatePageGroupsResponseSchema: z.ZodSchema<UpdateCreatePageGroupsResponse> = z.lazy(() => updateCreatePageGroupsResponsesSchema.shape["keyof UpdateCreatePageGroupsResponses"]);

export const listRevisionsGroupsResponsesSchema: z.ZodSchema<ListRevisionsGroupsResponses> = z.lazy(() => z.object({
    200: z.array(pageRevisionSchema)
}));

export const listRevisionsGroupsResponseSchema: z.ZodSchema<ListRevisionsGroupsResponse> = z.lazy(() => listRevisionsGroupsResponsesSchema.shape["keyof ListRevisionsGroupsResponses"]);

export const showRevisionGroupsLatestResponsesSchema: z.ZodSchema<ShowRevisionGroupsLatestResponses> = z.lazy(() => z.object({
    200: pageRevisionSchema
}));

export const showRevisionGroupsLatestResponseSchema: z.ZodSchema<ShowRevisionGroupsLatestResponse> = z.lazy(() => showRevisionGroupsLatestResponsesSchema.shape["keyof ShowRevisionGroupsLatestResponses"]);

export const showRevisionGroupsRevisionIdResponsesSchema: z.ZodSchema<ShowRevisionGroupsRevisionIdResponses> = z.lazy(() => z.object({
    200: pageRevisionSchema
}));

export const showRevisionGroupsRevisionIdResponseSchema: z.ZodSchema<ShowRevisionGroupsRevisionIdResponse> = z.lazy(() => showRevisionGroupsRevisionIdResponsesSchema.shape["keyof ShowRevisionGroupsRevisionIdResponses"]);

export const revertToRevisionGroupsResponsesSchema: z.ZodSchema<RevertToRevisionGroupsResponses> = z.lazy(() => z.object({
    200: pageRevisionSchema
}));

export const revertToRevisionGroupsResponseSchema: z.ZodSchema<RevertToRevisionGroupsResponse> = z.lazy(() => revertToRevisionGroupsResponsesSchema.shape["keyof RevertToRevisionGroupsResponses"]);

export const listPotentialMembersGroupsResponsesSchema: z.ZodSchema<ListPotentialMembersGroupsResponses> = z.lazy(() => z.object({
    200: z.array(userSchema)
}));

export const listPotentialMembersGroupsResponseSchema: z.ZodSchema<ListPotentialMembersGroupsResponse> = z.lazy(() => listPotentialMembersGroupsResponsesSchema.shape["keyof ListPotentialMembersGroupsResponses"]);

export const listGroupSusersResponsesSchema: z.ZodSchema<ListGroupSusersResponses> = z.lazy(() => z.object({
    200: z.array(userSchema)
}));

export const listGroupSusersResponseSchema: z.ZodSchema<ListGroupSusersResponse> = z.lazy(() => listGroupSusersResponsesSchema.shape["keyof ListGroupSusersResponses"]);

export const listAllCoursesResponsesSchema: z.ZodSchema<ListAllCoursesResponses> = z.lazy(() => z.object({
    200: z.array(courseSchema)
}));

export const listAllCoursesResponseSchema: z.ZodSchema<ListAllCoursesResponse> = z.lazy(() => listAllCoursesResponsesSchema.shape["keyof ListAllCoursesResponses"]);

export const listAssignmentSubmissionsSectionsResponsesSchema: z.ZodSchema<ListAssignmentSubmissionsSectionsResponses> = z.lazy(() => z.object({
    200: z.array(submissionSchema)
}));

export const listAssignmentSubmissionsSectionsResponseSchema: z.ZodSchema<ListAssignmentSubmissionsSectionsResponse> = z.lazy(() => listAssignmentSubmissionsSectionsResponsesSchema.shape["keyof ListAssignmentSubmissionsSectionsResponses"]);

export const gradeOrCommentOnSubmissionSectionsResponsesSchema: z.ZodSchema<GradeOrCommentOnSubmissionSectionsResponses> = z.lazy(() => z.object({
    200: submissionSchema
}));

export const gradeOrCommentOnSubmissionSectionsResponseSchema: z.ZodSchema<GradeOrCommentOnSubmissionSectionsResponse> = z.lazy(() => gradeOrCommentOnSubmissionSectionsResponsesSchema.shape["keyof GradeOrCommentOnSubmissionSectionsResponses"]);

export const listEnrollmentsSectionsResponsesSchema: z.ZodSchema<ListEnrollmentsSectionsResponses> = z.lazy(() => z.object({
    200: z.array(enrollmentSchema)
}));

export const listEnrollmentsSectionsResponseSchema: z.ZodSchema<ListEnrollmentsSectionsResponse> = z.lazy(() => listEnrollmentsSectionsResponsesSchema.shape["keyof ListEnrollmentsSectionsResponses"]);

export const enrollUserSectionsResponsesSchema: z.ZodSchema<EnrollUserSectionsResponses> = z.lazy(() => z.object({
    200: enrollmentSchema
}));

export const enrollUserSectionsResponseSchema: z.ZodSchema<EnrollUserSectionsResponse> = z.lazy(() => enrollUserSectionsResponsesSchema.shape["keyof EnrollUserSectionsResponses"]);

export const listFavoriteCoursesResponsesSchema: z.ZodSchema<ListFavoriteCoursesResponses> = z.lazy(() => z.object({
    200: z.array(courseSchema)
}));

export const listFavoriteCoursesResponseSchema: z.ZodSchema<ListFavoriteCoursesResponse> = z.lazy(() => listFavoriteCoursesResponsesSchema.shape["keyof ListFavoriteCoursesResponses"]);

export const showUserDetailsResponsesSchema: z.ZodSchema<ShowUserDetailsResponses> = z.lazy(() => z.object({
    200: userSchema
}));

export const showUserDetailsResponseSchema: z.ZodSchema<ShowUserDetailsResponse> = z.lazy(() => showUserDetailsResponsesSchema.shape["keyof ShowUserDetailsResponses"]);

export const editUserResponsesSchema: z.ZodSchema<EditUserResponses> = z.lazy(() => z.object({
    200: userSchema
}));

export const editUserResponseSchema: z.ZodSchema<EditUserResponse> = z.lazy(() => editUserResponsesSchema.shape["keyof EditUserResponses"]);

export const mergeUserIntoAnotherUserAccountsResponsesSchema: z.ZodSchema<MergeUserIntoAnotherUserAccountsResponses> = z.lazy(() => z.object({
    200: userSchema
}));

export const mergeUserIntoAnotherUserAccountsResponseSchema: z.ZodSchema<MergeUserIntoAnotherUserAccountsResponse> = z.lazy(() => mergeUserIntoAnotherUserAccountsResponsesSchema.shape["keyof MergeUserIntoAnotherUserAccountsResponses"]);

export const mergeUserIntoAnotherUserDestinationUserIdResponsesSchema: z.ZodSchema<MergeUserIntoAnotherUserDestinationUserIdResponses> = z.lazy(() => z.object({
    200: userSchema
}));

export const mergeUserIntoAnotherUserDestinationUserIdResponseSchema: z.ZodSchema<MergeUserIntoAnotherUserDestinationUserIdResponse> = z.lazy(() => mergeUserIntoAnotherUserDestinationUserIdResponsesSchema.shape["keyof MergeUserIntoAnotherUserDestinationUserIdResponses"]);

export const splitMergedUsersIntoSeparateUsersResponsesSchema: z.ZodSchema<SplitMergedUsersIntoSeparateUsersResponses> = z.lazy(() => z.object({
    200: z.array(userSchema)
}));

export const splitMergedUsersIntoSeparateUsersResponseSchema: z.ZodSchema<SplitMergedUsersIntoSeparateUsersResponse> = z.lazy(() => splitMergedUsersIntoSeparateUsersResponsesSchema.shape["keyof SplitMergedUsersIntoSeparateUsersResponses"]);

export const listCoursesForUserResponsesSchema: z.ZodSchema<ListCoursesForUserResponses> = z.lazy(() => z.object({
    200: z.array(courseWithIncludesSchema)
}));

export const listCoursesForUserResponseSchema: z.ZodSchema<ListCoursesForUserResponse> = z.lazy(() => listCoursesForUserResponsesSchema.shape["keyof ListCoursesForUserResponses"]);

export const listAssignmentsForUserResponsesSchema: z.ZodSchema<ListAssignmentsForUserResponses> = z.lazy(() => z.object({
    200: z.array(assignmentSchema)
}));

export const listAssignmentsForUserResponseSchema: z.ZodSchema<ListAssignmentsForUserResponse> = z.lazy(() => listAssignmentsForUserResponsesSchema.shape["keyof ListAssignmentsForUserResponses"]);

export const listEnrollmentsUsersResponsesSchema: z.ZodSchema<ListEnrollmentsUsersResponses> = z.lazy(() => z.object({
    200: z.array(enrollmentSchema)
}));

export const listEnrollmentsUsersResponseSchema: z.ZodSchema<ListEnrollmentsUsersResponse> = z.lazy(() => listEnrollmentsUsersResponsesSchema.shape["keyof ListEnrollmentsUsersResponses"]);

export const listMissingSubmissionsResponsesSchema: z.ZodSchema<ListMissingSubmissionsResponses> = z.lazy(() => z.object({
    200: z.array(assignmentSchema)
}));

export const listMissingSubmissionsResponseSchema: z.ZodSchema<ListMissingSubmissionsResponse> = z.lazy(() => listMissingSubmissionsResponsesSchema.shape["keyof ListMissingSubmissionsResponses"]);

export const listObserveesResponsesSchema: z.ZodSchema<ListObserveesResponses> = z.lazy(() => z.object({
    200: z.array(userSchema)
}));

export const listObserveesResponseSchema: z.ZodSchema<ListObserveesResponse> = z.lazy(() => listObserveesResponsesSchema.shape["keyof ListObserveesResponses"]);

export const addObserveeWithCredentialsResponsesSchema: z.ZodSchema<AddObserveeWithCredentialsResponses> = z.lazy(() => z.object({
    200: userSchema
}));

export const addObserveeWithCredentialsResponseSchema: z.ZodSchema<AddObserveeWithCredentialsResponse> = z.lazy(() => addObserveeWithCredentialsResponsesSchema.shape["keyof AddObserveeWithCredentialsResponses"]);

export const removeObserveeResponsesSchema: z.ZodSchema<RemoveObserveeResponses> = z.lazy(() => z.object({
    200: userSchema
}));

export const removeObserveeResponseSchema: z.ZodSchema<RemoveObserveeResponse> = z.lazy(() => removeObserveeResponsesSchema.shape["keyof RemoveObserveeResponses"]);

export const showObserveeResponsesSchema: z.ZodSchema<ShowObserveeResponses> = z.lazy(() => z.object({
    200: userSchema
}));

export const showObserveeResponseSchema: z.ZodSchema<ShowObserveeResponse> = z.lazy(() => showObserveeResponsesSchema.shape["keyof ShowObserveeResponses"]);

export const addObserveeResponsesSchema: z.ZodSchema<AddObserveeResponses> = z.lazy(() => z.object({
    200: userSchema
}));

export const addObserveeResponseSchema: z.ZodSchema<AddObserveeResponse> = z.lazy(() => addObserveeResponsesSchema.shape["keyof AddObserveeResponses"]);
