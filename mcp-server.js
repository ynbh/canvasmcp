import { createRequire } from "node:module";
var __create = Object.create;
var __getProtoOf = Object.getPrototypeOf;
var __defProp = Object.defineProperty;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __toESM = (mod, isNodeMode, target) => {
  target = mod != null ? __create(__getProtoOf(mod)) : {};
  const to = isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target;
  for (let key of __getOwnPropNames(mod))
    if (!__hasOwnProp.call(to, key))
      __defProp(to, key, {
        get: () => mod[key],
        enumerable: true
      });
  return to;
};
var __commonJS = (cb, mod) => () => (mod || cb((mod = { exports: {} }).exports, mod), mod.exports);
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {
      get: all[name],
      enumerable: true,
      configurable: true,
      set: (newValue) => all[name] = () => newValue
    });
};
var __require = /* @__PURE__ */ createRequire(import.meta.url);

// node_modules/uri-js/dist/es5/uri.all.js
var require_uri_all = __commonJS((exports, module) => {
  (function(global2, factory) {
    typeof exports === "object" && typeof module !== "undefined" ? factory(exports) : typeof define === "function" && define.amd ? define(["exports"], factory) : factory(global2.URI = global2.URI || {});
  })(exports, function(exports2) {
    function merge() {
      for (var _len = arguments.length, sets = Array(_len), _key = 0;_key < _len; _key++) {
        sets[_key] = arguments[_key];
      }
      if (sets.length > 1) {
        sets[0] = sets[0].slice(0, -1);
        var xl = sets.length - 1;
        for (var x = 1;x < xl; ++x) {
          sets[x] = sets[x].slice(1, -1);
        }
        sets[xl] = sets[xl].slice(1);
        return sets.join("");
      } else {
        return sets[0];
      }
    }
    function subexp(str) {
      return "(?:" + str + ")";
    }
    function typeOf(o) {
      return o === undefined ? "undefined" : o === null ? "null" : Object.prototype.toString.call(o).split(" ").pop().split("]").shift().toLowerCase();
    }
    function toUpperCase(str) {
      return str.toUpperCase();
    }
    function toArray(obj) {
      return obj !== undefined && obj !== null ? obj instanceof Array ? obj : typeof obj.length !== "number" || obj.split || obj.setInterval || obj.call ? [obj] : Array.prototype.slice.call(obj) : [];
    }
    function assign(target, source) {
      var obj = target;
      if (source) {
        for (var key in source) {
          obj[key] = source[key];
        }
      }
      return obj;
    }
    function buildExps(isIRI2) {
      var ALPHA$$ = "[A-Za-z]", CR$ = "[\\x0D]", DIGIT$$ = "[0-9]", DQUOTE$$ = "[\\x22]", HEXDIG$$2 = merge(DIGIT$$, "[A-Fa-f]"), LF$$ = "[\\x0A]", SP$$ = "[\\x20]", PCT_ENCODED$2 = subexp(subexp("%[EFef]" + HEXDIG$$2 + "%" + HEXDIG$$2 + HEXDIG$$2 + "%" + HEXDIG$$2 + HEXDIG$$2) + "|" + subexp("%[89A-Fa-f]" + HEXDIG$$2 + "%" + HEXDIG$$2 + HEXDIG$$2) + "|" + subexp("%" + HEXDIG$$2 + HEXDIG$$2)), GEN_DELIMS$$ = "[\\:\\/\\?\\#\\[\\]\\@]", SUB_DELIMS$$ = "[\\!\\$\\&\\'\\(\\)\\*\\+\\,\\;\\=]", RESERVED$$ = merge(GEN_DELIMS$$, SUB_DELIMS$$), UCSCHAR$$ = isIRI2 ? "[\\xA0-\\u200D\\u2010-\\u2029\\u202F-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]" : "[]", IPRIVATE$$ = isIRI2 ? "[\\uE000-\\uF8FF]" : "[]", UNRESERVED$$2 = merge(ALPHA$$, DIGIT$$, "[\\-\\.\\_\\~]", UCSCHAR$$), SCHEME$ = subexp(ALPHA$$ + merge(ALPHA$$, DIGIT$$, "[\\+\\-\\.]") + "*"), USERINFO$ = subexp(subexp(PCT_ENCODED$2 + "|" + merge(UNRESERVED$$2, SUB_DELIMS$$, "[\\:]")) + "*"), DEC_OCTET$ = subexp(subexp("25[0-5]") + "|" + subexp("2[0-4]" + DIGIT$$) + "|" + subexp("1" + DIGIT$$ + DIGIT$$) + "|" + subexp("[1-9]" + DIGIT$$) + "|" + DIGIT$$), DEC_OCTET_RELAXED$ = subexp(subexp("25[0-5]") + "|" + subexp("2[0-4]" + DIGIT$$) + "|" + subexp("1" + DIGIT$$ + DIGIT$$) + "|" + subexp("0?[1-9]" + DIGIT$$) + "|0?0?" + DIGIT$$), IPV4ADDRESS$ = subexp(DEC_OCTET_RELAXED$ + "\\." + DEC_OCTET_RELAXED$ + "\\." + DEC_OCTET_RELAXED$ + "\\." + DEC_OCTET_RELAXED$), H16$ = subexp(HEXDIG$$2 + "{1,4}"), LS32$ = subexp(subexp(H16$ + "\\:" + H16$) + "|" + IPV4ADDRESS$), IPV6ADDRESS1$ = subexp(subexp(H16$ + "\\:") + "{6}" + LS32$), IPV6ADDRESS2$ = subexp("\\:\\:" + subexp(H16$ + "\\:") + "{5}" + LS32$), IPV6ADDRESS3$ = subexp(subexp(H16$) + "?\\:\\:" + subexp(H16$ + "\\:") + "{4}" + LS32$), IPV6ADDRESS4$ = subexp(subexp(subexp(H16$ + "\\:") + "{0,1}" + H16$) + "?\\:\\:" + subexp(H16$ + "\\:") + "{3}" + LS32$), IPV6ADDRESS5$ = subexp(subexp(subexp(H16$ + "\\:") + "{0,2}" + H16$) + "?\\:\\:" + subexp(H16$ + "\\:") + "{2}" + LS32$), IPV6ADDRESS6$ = subexp(subexp(subexp(H16$ + "\\:") + "{0,3}" + H16$) + "?\\:\\:" + H16$ + "\\:" + LS32$), IPV6ADDRESS7$ = subexp(subexp(subexp(H16$ + "\\:") + "{0,4}" + H16$) + "?\\:\\:" + LS32$), IPV6ADDRESS8$ = subexp(subexp(subexp(H16$ + "\\:") + "{0,5}" + H16$) + "?\\:\\:" + H16$), IPV6ADDRESS9$ = subexp(subexp(subexp(H16$ + "\\:") + "{0,6}" + H16$) + "?\\:\\:"), IPV6ADDRESS$ = subexp([IPV6ADDRESS1$, IPV6ADDRESS2$, IPV6ADDRESS3$, IPV6ADDRESS4$, IPV6ADDRESS5$, IPV6ADDRESS6$, IPV6ADDRESS7$, IPV6ADDRESS8$, IPV6ADDRESS9$].join("|")), ZONEID$ = subexp(subexp(UNRESERVED$$2 + "|" + PCT_ENCODED$2) + "+"), IPV6ADDRZ$ = subexp(IPV6ADDRESS$ + "\\%25" + ZONEID$), IPV6ADDRZ_RELAXED$ = subexp(IPV6ADDRESS$ + subexp("\\%25|\\%(?!" + HEXDIG$$2 + "{2})") + ZONEID$), IPVFUTURE$ = subexp("[vV]" + HEXDIG$$2 + "+\\." + merge(UNRESERVED$$2, SUB_DELIMS$$, "[\\:]") + "+"), IP_LITERAL$ = subexp("\\[" + subexp(IPV6ADDRZ_RELAXED$ + "|" + IPV6ADDRESS$ + "|" + IPVFUTURE$) + "\\]"), REG_NAME$ = subexp(subexp(PCT_ENCODED$2 + "|" + merge(UNRESERVED$$2, SUB_DELIMS$$)) + "*"), HOST$ = subexp(IP_LITERAL$ + "|" + IPV4ADDRESS$ + "(?!" + REG_NAME$ + ")" + "|" + REG_NAME$), PORT$ = subexp(DIGIT$$ + "*"), AUTHORITY$ = subexp(subexp(USERINFO$ + "@") + "?" + HOST$ + subexp("\\:" + PORT$) + "?"), PCHAR$ = subexp(PCT_ENCODED$2 + "|" + merge(UNRESERVED$$2, SUB_DELIMS$$, "[\\:\\@]")), SEGMENT$ = subexp(PCHAR$ + "*"), SEGMENT_NZ$ = subexp(PCHAR$ + "+"), SEGMENT_NZ_NC$ = subexp(subexp(PCT_ENCODED$2 + "|" + merge(UNRESERVED$$2, SUB_DELIMS$$, "[\\@]")) + "+"), PATH_ABEMPTY$ = subexp(subexp("\\/" + SEGMENT$) + "*"), PATH_ABSOLUTE$ = subexp("\\/" + subexp(SEGMENT_NZ$ + PATH_ABEMPTY$) + "?"), PATH_NOSCHEME$ = subexp(SEGMENT_NZ_NC$ + PATH_ABEMPTY$), PATH_ROOTLESS$ = subexp(SEGMENT_NZ$ + PATH_ABEMPTY$), PATH_EMPTY$ = "(?!" + PCHAR$ + ")", PATH$ = subexp(PATH_ABEMPTY$ + "|" + PATH_ABSOLUTE$ + "|" + PATH_NOSCHEME$ + "|" + PATH_ROOTLESS$ + "|" + PATH_EMPTY$), QUERY$ = subexp(subexp(PCHAR$ + "|" + merge("[\\/\\?]", IPRIVATE$$)) + "*"), FRAGMENT$ = subexp(subexp(PCHAR$ + "|[\\/\\?]") + "*"), HIER_PART$ = subexp(subexp("\\/\\/" + AUTHORITY$ + PATH_ABEMPTY$) + "|" + PATH_ABSOLUTE$ + "|" + PATH_ROOTLESS$ + "|" + PATH_EMPTY$), URI$ = subexp(SCHEME$ + "\\:" + HIER_PART$ + subexp("\\?" + QUERY$) + "?" + subexp("\\#" + FRAGMENT$) + "?"), RELATIVE_PART$ = subexp(subexp("\\/\\/" + AUTHORITY$ + PATH_ABEMPTY$) + "|" + PATH_ABSOLUTE$ + "|" + PATH_NOSCHEME$ + "|" + PATH_EMPTY$), RELATIVE$ = subexp(RELATIVE_PART$ + subexp("\\?" + QUERY$) + "?" + subexp("\\#" + FRAGMENT$) + "?"), URI_REFERENCE$ = subexp(URI$ + "|" + RELATIVE$), ABSOLUTE_URI$ = subexp(SCHEME$ + "\\:" + HIER_PART$ + subexp("\\?" + QUERY$) + "?"), GENERIC_REF$ = "^(" + SCHEME$ + ")\\:" + subexp(subexp("\\/\\/(" + subexp("(" + USERINFO$ + ")@") + "?(" + HOST$ + ")" + subexp("\\:(" + PORT$ + ")") + "?)") + "?(" + PATH_ABEMPTY$ + "|" + PATH_ABSOLUTE$ + "|" + PATH_ROOTLESS$ + "|" + PATH_EMPTY$ + ")") + subexp("\\?(" + QUERY$ + ")") + "?" + subexp("\\#(" + FRAGMENT$ + ")") + "?$", RELATIVE_REF$ = "^(){0}" + subexp(subexp("\\/\\/(" + subexp("(" + USERINFO$ + ")@") + "?(" + HOST$ + ")" + subexp("\\:(" + PORT$ + ")") + "?)") + "?(" + PATH_ABEMPTY$ + "|" + PATH_ABSOLUTE$ + "|" + PATH_NOSCHEME$ + "|" + PATH_EMPTY$ + ")") + subexp("\\?(" + QUERY$ + ")") + "?" + subexp("\\#(" + FRAGMENT$ + ")") + "?$", ABSOLUTE_REF$ = "^(" + SCHEME$ + ")\\:" + subexp(subexp("\\/\\/(" + subexp("(" + USERINFO$ + ")@") + "?(" + HOST$ + ")" + subexp("\\:(" + PORT$ + ")") + "?)") + "?(" + PATH_ABEMPTY$ + "|" + PATH_ABSOLUTE$ + "|" + PATH_ROOTLESS$ + "|" + PATH_EMPTY$ + ")") + subexp("\\?(" + QUERY$ + ")") + "?$", SAMEDOC_REF$ = "^" + subexp("\\#(" + FRAGMENT$ + ")") + "?$", AUTHORITY_REF$ = "^" + subexp("(" + USERINFO$ + ")@") + "?(" + HOST$ + ")" + subexp("\\:(" + PORT$ + ")") + "?$";
      return {
        NOT_SCHEME: new RegExp(merge("[^]", ALPHA$$, DIGIT$$, "[\\+\\-\\.]"), "g"),
        NOT_USERINFO: new RegExp(merge("[^\\%\\:]", UNRESERVED$$2, SUB_DELIMS$$), "g"),
        NOT_HOST: new RegExp(merge("[^\\%\\[\\]\\:]", UNRESERVED$$2, SUB_DELIMS$$), "g"),
        NOT_PATH: new RegExp(merge("[^\\%\\/\\:\\@]", UNRESERVED$$2, SUB_DELIMS$$), "g"),
        NOT_PATH_NOSCHEME: new RegExp(merge("[^\\%\\/\\@]", UNRESERVED$$2, SUB_DELIMS$$), "g"),
        NOT_QUERY: new RegExp(merge("[^\\%]", UNRESERVED$$2, SUB_DELIMS$$, "[\\:\\@\\/\\?]", IPRIVATE$$), "g"),
        NOT_FRAGMENT: new RegExp(merge("[^\\%]", UNRESERVED$$2, SUB_DELIMS$$, "[\\:\\@\\/\\?]"), "g"),
        ESCAPE: new RegExp(merge("[^]", UNRESERVED$$2, SUB_DELIMS$$), "g"),
        UNRESERVED: new RegExp(UNRESERVED$$2, "g"),
        OTHER_CHARS: new RegExp(merge("[^\\%]", UNRESERVED$$2, RESERVED$$), "g"),
        PCT_ENCODED: new RegExp(PCT_ENCODED$2, "g"),
        IPV4ADDRESS: new RegExp("^(" + IPV4ADDRESS$ + ")$"),
        IPV6ADDRESS: new RegExp("^\\[?(" + IPV6ADDRESS$ + ")" + subexp(subexp("\\%25|\\%(?!" + HEXDIG$$2 + "{2})") + "(" + ZONEID$ + ")") + "?\\]?$")
      };
    }
    var URI_PROTOCOL = buildExps(false);
    var IRI_PROTOCOL = buildExps(true);
    var slicedToArray = function() {
      function sliceIterator(arr, i) {
        var _arr = [];
        var _n = true;
        var _d = false;
        var _e = undefined;
        try {
          for (var _i = arr[Symbol.iterator](), _s;!(_n = (_s = _i.next()).done); _n = true) {
            _arr.push(_s.value);
            if (i && _arr.length === i)
              break;
          }
        } catch (err) {
          _d = true;
          _e = err;
        } finally {
          try {
            if (!_n && _i["return"])
              _i["return"]();
          } finally {
            if (_d)
              throw _e;
          }
        }
        return _arr;
      }
      return function(arr, i) {
        if (Array.isArray(arr)) {
          return arr;
        } else if (Symbol.iterator in Object(arr)) {
          return sliceIterator(arr, i);
        } else {
          throw new TypeError("Invalid attempt to destructure non-iterable instance");
        }
      };
    }();
    var toConsumableArray = function(arr) {
      if (Array.isArray(arr)) {
        for (var i = 0, arr2 = Array(arr.length);i < arr.length; i++)
          arr2[i] = arr[i];
        return arr2;
      } else {
        return Array.from(arr);
      }
    };
    var maxInt = 2147483647;
    var base = 36;
    var tMin = 1;
    var tMax = 26;
    var skew = 38;
    var damp = 700;
    var initialBias = 72;
    var initialN = 128;
    var delimiter = "-";
    var regexPunycode = /^xn--/;
    var regexNonASCII = /[^\0-\x7E]/;
    var regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g;
    var errors2 = {
      overflow: "Overflow: input needs wider integers to process",
      "not-basic": "Illegal input >= 0x80 (not a basic code point)",
      "invalid-input": "Invalid input"
    };
    var baseMinusTMin = base - tMin;
    var floor = Math.floor;
    var stringFromCharCode = String.fromCharCode;
    function error$1(type) {
      throw new RangeError(errors2[type]);
    }
    function map(array, fn) {
      var result = [];
      var length = array.length;
      while (length--) {
        result[length] = fn(array[length]);
      }
      return result;
    }
    function mapDomain(string, fn) {
      var parts = string.split("@");
      var result = "";
      if (parts.length > 1) {
        result = parts[0] + "@";
        string = parts[1];
      }
      string = string.replace(regexSeparators, ".");
      var labels = string.split(".");
      var encoded = map(labels, fn).join(".");
      return result + encoded;
    }
    function ucs2decode(string) {
      var output = [];
      var counter = 0;
      var length = string.length;
      while (counter < length) {
        var value = string.charCodeAt(counter++);
        if (value >= 55296 && value <= 56319 && counter < length) {
          var extra = string.charCodeAt(counter++);
          if ((extra & 64512) == 56320) {
            output.push(((value & 1023) << 10) + (extra & 1023) + 65536);
          } else {
            output.push(value);
            counter--;
          }
        } else {
          output.push(value);
        }
      }
      return output;
    }
    var ucs2encode = function ucs2encode(array) {
      return String.fromCodePoint.apply(String, toConsumableArray(array));
    };
    var basicToDigit = function basicToDigit(codePoint) {
      if (codePoint - 48 < 10) {
        return codePoint - 22;
      }
      if (codePoint - 65 < 26) {
        return codePoint - 65;
      }
      if (codePoint - 97 < 26) {
        return codePoint - 97;
      }
      return base;
    };
    var digitToBasic = function digitToBasic(digit, flag) {
      return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
    };
    var adapt = function adapt(delta, numPoints, firstTime) {
      var k = 0;
      delta = firstTime ? floor(delta / damp) : delta >> 1;
      delta += floor(delta / numPoints);
      for (;delta > baseMinusTMin * tMax >> 1; k += base) {
        delta = floor(delta / baseMinusTMin);
      }
      return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
    };
    var decode = function decode(input) {
      var output = [];
      var inputLength = input.length;
      var i = 0;
      var n = initialN;
      var bias = initialBias;
      var basic = input.lastIndexOf(delimiter);
      if (basic < 0) {
        basic = 0;
      }
      for (var j = 0;j < basic; ++j) {
        if (input.charCodeAt(j) >= 128) {
          error$1("not-basic");
        }
        output.push(input.charCodeAt(j));
      }
      for (var index = basic > 0 ? basic + 1 : 0;index < inputLength; ) {
        var oldi = i;
        for (var w = 1, k = base;; k += base) {
          if (index >= inputLength) {
            error$1("invalid-input");
          }
          var digit = basicToDigit(input.charCodeAt(index++));
          if (digit >= base || digit > floor((maxInt - i) / w)) {
            error$1("overflow");
          }
          i += digit * w;
          var t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
          if (digit < t) {
            break;
          }
          var baseMinusT = base - t;
          if (w > floor(maxInt / baseMinusT)) {
            error$1("overflow");
          }
          w *= baseMinusT;
        }
        var out = output.length + 1;
        bias = adapt(i - oldi, out, oldi == 0);
        if (floor(i / out) > maxInt - n) {
          error$1("overflow");
        }
        n += floor(i / out);
        i %= out;
        output.splice(i++, 0, n);
      }
      return String.fromCodePoint.apply(String, output);
    };
    var encode = function encode(input) {
      var output = [];
      input = ucs2decode(input);
      var inputLength = input.length;
      var n = initialN;
      var delta = 0;
      var bias = initialBias;
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;
      try {
        for (var _iterator = input[Symbol.iterator](), _step;!(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var _currentValue2 = _step.value;
          if (_currentValue2 < 128) {
            output.push(stringFromCharCode(_currentValue2));
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }
      var basicLength = output.length;
      var handledCPCount = basicLength;
      if (basicLength) {
        output.push(delimiter);
      }
      while (handledCPCount < inputLength) {
        var m = maxInt;
        var _iteratorNormalCompletion2 = true;
        var _didIteratorError2 = false;
        var _iteratorError2 = undefined;
        try {
          for (var _iterator2 = input[Symbol.iterator](), _step2;!(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
            var currentValue = _step2.value;
            if (currentValue >= n && currentValue < m) {
              m = currentValue;
            }
          }
        } catch (err) {
          _didIteratorError2 = true;
          _iteratorError2 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion2 && _iterator2.return) {
              _iterator2.return();
            }
          } finally {
            if (_didIteratorError2) {
              throw _iteratorError2;
            }
          }
        }
        var handledCPCountPlusOne = handledCPCount + 1;
        if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
          error$1("overflow");
        }
        delta += (m - n) * handledCPCountPlusOne;
        n = m;
        var _iteratorNormalCompletion3 = true;
        var _didIteratorError3 = false;
        var _iteratorError3 = undefined;
        try {
          for (var _iterator3 = input[Symbol.iterator](), _step3;!(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
            var _currentValue = _step3.value;
            if (_currentValue < n && ++delta > maxInt) {
              error$1("overflow");
            }
            if (_currentValue == n) {
              var q = delta;
              for (var k = base;; k += base) {
                var t = k <= bias ? tMin : k >= bias + tMax ? tMax : k - bias;
                if (q < t) {
                  break;
                }
                var qMinusT = q - t;
                var baseMinusT = base - t;
                output.push(stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0)));
                q = floor(qMinusT / baseMinusT);
              }
              output.push(stringFromCharCode(digitToBasic(q, 0)));
              bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
              delta = 0;
              ++handledCPCount;
            }
          }
        } catch (err) {
          _didIteratorError3 = true;
          _iteratorError3 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion3 && _iterator3.return) {
              _iterator3.return();
            }
          } finally {
            if (_didIteratorError3) {
              throw _iteratorError3;
            }
          }
        }
        ++delta;
        ++n;
      }
      return output.join("");
    };
    var toUnicode = function toUnicode(input) {
      return mapDomain(input, function(string) {
        return regexPunycode.test(string) ? decode(string.slice(4).toLowerCase()) : string;
      });
    };
    var toASCII = function toASCII(input) {
      return mapDomain(input, function(string) {
        return regexNonASCII.test(string) ? "xn--" + encode(string) : string;
      });
    };
    var punycode = {
      version: "2.1.0",
      ucs2: {
        decode: ucs2decode,
        encode: ucs2encode
      },
      decode,
      encode,
      toASCII,
      toUnicode
    };
    var SCHEMES = {};
    function pctEncChar(chr) {
      var c = chr.charCodeAt(0);
      var e = undefined;
      if (c < 16)
        e = "%0" + c.toString(16).toUpperCase();
      else if (c < 128)
        e = "%" + c.toString(16).toUpperCase();
      else if (c < 2048)
        e = "%" + (c >> 6 | 192).toString(16).toUpperCase() + "%" + (c & 63 | 128).toString(16).toUpperCase();
      else
        e = "%" + (c >> 12 | 224).toString(16).toUpperCase() + "%" + (c >> 6 & 63 | 128).toString(16).toUpperCase() + "%" + (c & 63 | 128).toString(16).toUpperCase();
      return e;
    }
    function pctDecChars(str) {
      var newStr = "";
      var i = 0;
      var il = str.length;
      while (i < il) {
        var c = parseInt(str.substr(i + 1, 2), 16);
        if (c < 128) {
          newStr += String.fromCharCode(c);
          i += 3;
        } else if (c >= 194 && c < 224) {
          if (il - i >= 6) {
            var c2 = parseInt(str.substr(i + 4, 2), 16);
            newStr += String.fromCharCode((c & 31) << 6 | c2 & 63);
          } else {
            newStr += str.substr(i, 6);
          }
          i += 6;
        } else if (c >= 224) {
          if (il - i >= 9) {
            var _c = parseInt(str.substr(i + 4, 2), 16);
            var c3 = parseInt(str.substr(i + 7, 2), 16);
            newStr += String.fromCharCode((c & 15) << 12 | (_c & 63) << 6 | c3 & 63);
          } else {
            newStr += str.substr(i, 9);
          }
          i += 9;
        } else {
          newStr += str.substr(i, 3);
          i += 3;
        }
      }
      return newStr;
    }
    function _normalizeComponentEncoding(components, protocol) {
      function decodeUnreserved2(str) {
        var decStr = pctDecChars(str);
        return !decStr.match(protocol.UNRESERVED) ? str : decStr;
      }
      if (components.scheme)
        components.scheme = String(components.scheme).replace(protocol.PCT_ENCODED, decodeUnreserved2).toLowerCase().replace(protocol.NOT_SCHEME, "");
      if (components.userinfo !== undefined)
        components.userinfo = String(components.userinfo).replace(protocol.PCT_ENCODED, decodeUnreserved2).replace(protocol.NOT_USERINFO, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);
      if (components.host !== undefined)
        components.host = String(components.host).replace(protocol.PCT_ENCODED, decodeUnreserved2).toLowerCase().replace(protocol.NOT_HOST, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);
      if (components.path !== undefined)
        components.path = String(components.path).replace(protocol.PCT_ENCODED, decodeUnreserved2).replace(components.scheme ? protocol.NOT_PATH : protocol.NOT_PATH_NOSCHEME, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);
      if (components.query !== undefined)
        components.query = String(components.query).replace(protocol.PCT_ENCODED, decodeUnreserved2).replace(protocol.NOT_QUERY, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);
      if (components.fragment !== undefined)
        components.fragment = String(components.fragment).replace(protocol.PCT_ENCODED, decodeUnreserved2).replace(protocol.NOT_FRAGMENT, pctEncChar).replace(protocol.PCT_ENCODED, toUpperCase);
      return components;
    }
    function _stripLeadingZeros(str) {
      return str.replace(/^0*(.*)/, "$1") || "0";
    }
    function _normalizeIPv4(host, protocol) {
      var matches = host.match(protocol.IPV4ADDRESS) || [];
      var _matches = slicedToArray(matches, 2), address = _matches[1];
      if (address) {
        return address.split(".").map(_stripLeadingZeros).join(".");
      } else {
        return host;
      }
    }
    function _normalizeIPv6(host, protocol) {
      var matches = host.match(protocol.IPV6ADDRESS) || [];
      var _matches2 = slicedToArray(matches, 3), address = _matches2[1], zone = _matches2[2];
      if (address) {
        var _address$toLowerCase$ = address.toLowerCase().split("::").reverse(), _address$toLowerCase$2 = slicedToArray(_address$toLowerCase$, 2), last = _address$toLowerCase$2[0], first = _address$toLowerCase$2[1];
        var firstFields = first ? first.split(":").map(_stripLeadingZeros) : [];
        var lastFields = last.split(":").map(_stripLeadingZeros);
        var isLastFieldIPv4Address = protocol.IPV4ADDRESS.test(lastFields[lastFields.length - 1]);
        var fieldCount = isLastFieldIPv4Address ? 7 : 8;
        var lastFieldsStart = lastFields.length - fieldCount;
        var fields = Array(fieldCount);
        for (var x = 0;x < fieldCount; ++x) {
          fields[x] = firstFields[x] || lastFields[lastFieldsStart + x] || "";
        }
        if (isLastFieldIPv4Address) {
          fields[fieldCount - 1] = _normalizeIPv4(fields[fieldCount - 1], protocol);
        }
        var allZeroFields = fields.reduce(function(acc, field, index) {
          if (!field || field === "0") {
            var lastLongest = acc[acc.length - 1];
            if (lastLongest && lastLongest.index + lastLongest.length === index) {
              lastLongest.length++;
            } else {
              acc.push({ index, length: 1 });
            }
          }
          return acc;
        }, []);
        var longestZeroFields = allZeroFields.sort(function(a, b) {
          return b.length - a.length;
        })[0];
        var newHost = undefined;
        if (longestZeroFields && longestZeroFields.length > 1) {
          var newFirst = fields.slice(0, longestZeroFields.index);
          var newLast = fields.slice(longestZeroFields.index + longestZeroFields.length);
          newHost = newFirst.join(":") + "::" + newLast.join(":");
        } else {
          newHost = fields.join(":");
        }
        if (zone) {
          newHost += "%" + zone;
        }
        return newHost;
      } else {
        return host;
      }
    }
    var URI_PARSE = /^(?:([^:\/?#]+):)?(?:\/\/((?:([^\/?#@]*)@)?(\[[^\/?#\]]+\]|[^\/?#:]*)(?:\:(\d*))?))?([^?#]*)(?:\?([^#]*))?(?:#((?:.|\n|\r)*))?/i;
    var NO_MATCH_IS_UNDEFINED = "".match(/(){0}/)[1] === undefined;
    function parse(uriString) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var components = {};
      var protocol = options.iri !== false ? IRI_PROTOCOL : URI_PROTOCOL;
      if (options.reference === "suffix")
        uriString = (options.scheme ? options.scheme + ":" : "") + "//" + uriString;
      var matches = uriString.match(URI_PARSE);
      if (matches) {
        if (NO_MATCH_IS_UNDEFINED) {
          components.scheme = matches[1];
          components.userinfo = matches[3];
          components.host = matches[4];
          components.port = parseInt(matches[5], 10);
          components.path = matches[6] || "";
          components.query = matches[7];
          components.fragment = matches[8];
          if (isNaN(components.port)) {
            components.port = matches[5];
          }
        } else {
          components.scheme = matches[1] || undefined;
          components.userinfo = uriString.indexOf("@") !== -1 ? matches[3] : undefined;
          components.host = uriString.indexOf("//") !== -1 ? matches[4] : undefined;
          components.port = parseInt(matches[5], 10);
          components.path = matches[6] || "";
          components.query = uriString.indexOf("?") !== -1 ? matches[7] : undefined;
          components.fragment = uriString.indexOf("#") !== -1 ? matches[8] : undefined;
          if (isNaN(components.port)) {
            components.port = uriString.match(/\/\/(?:.|\n)*\:(?:\/|\?|\#|$)/) ? matches[4] : undefined;
          }
        }
        if (components.host) {
          components.host = _normalizeIPv6(_normalizeIPv4(components.host, protocol), protocol);
        }
        if (components.scheme === undefined && components.userinfo === undefined && components.host === undefined && components.port === undefined && !components.path && components.query === undefined) {
          components.reference = "same-document";
        } else if (components.scheme === undefined) {
          components.reference = "relative";
        } else if (components.fragment === undefined) {
          components.reference = "absolute";
        } else {
          components.reference = "uri";
        }
        if (options.reference && options.reference !== "suffix" && options.reference !== components.reference) {
          components.error = components.error || "URI is not a " + options.reference + " reference.";
        }
        var schemeHandler = SCHEMES[(options.scheme || components.scheme || "").toLowerCase()];
        if (!options.unicodeSupport && (!schemeHandler || !schemeHandler.unicodeSupport)) {
          if (components.host && (options.domainHost || schemeHandler && schemeHandler.domainHost)) {
            try {
              components.host = punycode.toASCII(components.host.replace(protocol.PCT_ENCODED, pctDecChars).toLowerCase());
            } catch (e) {
              components.error = components.error || "Host's domain name can not be converted to ASCII via punycode: " + e;
            }
          }
          _normalizeComponentEncoding(components, URI_PROTOCOL);
        } else {
          _normalizeComponentEncoding(components, protocol);
        }
        if (schemeHandler && schemeHandler.parse) {
          schemeHandler.parse(components, options);
        }
      } else {
        components.error = components.error || "URI can not be parsed.";
      }
      return components;
    }
    function _recomposeAuthority(components, options) {
      var protocol = options.iri !== false ? IRI_PROTOCOL : URI_PROTOCOL;
      var uriTokens = [];
      if (components.userinfo !== undefined) {
        uriTokens.push(components.userinfo);
        uriTokens.push("@");
      }
      if (components.host !== undefined) {
        uriTokens.push(_normalizeIPv6(_normalizeIPv4(String(components.host), protocol), protocol).replace(protocol.IPV6ADDRESS, function(_, $1, $2) {
          return "[" + $1 + ($2 ? "%25" + $2 : "") + "]";
        }));
      }
      if (typeof components.port === "number" || typeof components.port === "string") {
        uriTokens.push(":");
        uriTokens.push(String(components.port));
      }
      return uriTokens.length ? uriTokens.join("") : undefined;
    }
    var RDS1 = /^\.\.?\//;
    var RDS2 = /^\/\.(\/|$)/;
    var RDS3 = /^\/\.\.(\/|$)/;
    var RDS5 = /^\/?(?:.|\n)*?(?=\/|$)/;
    function removeDotSegments(input) {
      var output = [];
      while (input.length) {
        if (input.match(RDS1)) {
          input = input.replace(RDS1, "");
        } else if (input.match(RDS2)) {
          input = input.replace(RDS2, "/");
        } else if (input.match(RDS3)) {
          input = input.replace(RDS3, "/");
          output.pop();
        } else if (input === "." || input === "..") {
          input = "";
        } else {
          var im = input.match(RDS5);
          if (im) {
            var s = im[0];
            input = input.slice(s.length);
            output.push(s);
          } else {
            throw new Error("Unexpected dot segment condition");
          }
        }
      }
      return output.join("");
    }
    function serialize(components) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var protocol = options.iri ? IRI_PROTOCOL : URI_PROTOCOL;
      var uriTokens = [];
      var schemeHandler = SCHEMES[(options.scheme || components.scheme || "").toLowerCase()];
      if (schemeHandler && schemeHandler.serialize)
        schemeHandler.serialize(components, options);
      if (components.host) {
        if (protocol.IPV6ADDRESS.test(components.host)) {} else if (options.domainHost || schemeHandler && schemeHandler.domainHost) {
          try {
            components.host = !options.iri ? punycode.toASCII(components.host.replace(protocol.PCT_ENCODED, pctDecChars).toLowerCase()) : punycode.toUnicode(components.host);
          } catch (e) {
            components.error = components.error || "Host's domain name can not be converted to " + (!options.iri ? "ASCII" : "Unicode") + " via punycode: " + e;
          }
        }
      }
      _normalizeComponentEncoding(components, protocol);
      if (options.reference !== "suffix" && components.scheme) {
        uriTokens.push(components.scheme);
        uriTokens.push(":");
      }
      var authority = _recomposeAuthority(components, options);
      if (authority !== undefined) {
        if (options.reference !== "suffix") {
          uriTokens.push("//");
        }
        uriTokens.push(authority);
        if (components.path && components.path.charAt(0) !== "/") {
          uriTokens.push("/");
        }
      }
      if (components.path !== undefined) {
        var s = components.path;
        if (!options.absolutePath && (!schemeHandler || !schemeHandler.absolutePath)) {
          s = removeDotSegments(s);
        }
        if (authority === undefined) {
          s = s.replace(/^\/\//, "/%2F");
        }
        uriTokens.push(s);
      }
      if (components.query !== undefined) {
        uriTokens.push("?");
        uriTokens.push(components.query);
      }
      if (components.fragment !== undefined) {
        uriTokens.push("#");
        uriTokens.push(components.fragment);
      }
      return uriTokens.join("");
    }
    function resolveComponents(base2, relative) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      var skipNormalization = arguments[3];
      var target = {};
      if (!skipNormalization) {
        base2 = parse(serialize(base2, options), options);
        relative = parse(serialize(relative, options), options);
      }
      options = options || {};
      if (!options.tolerant && relative.scheme) {
        target.scheme = relative.scheme;
        target.userinfo = relative.userinfo;
        target.host = relative.host;
        target.port = relative.port;
        target.path = removeDotSegments(relative.path || "");
        target.query = relative.query;
      } else {
        if (relative.userinfo !== undefined || relative.host !== undefined || relative.port !== undefined) {
          target.userinfo = relative.userinfo;
          target.host = relative.host;
          target.port = relative.port;
          target.path = removeDotSegments(relative.path || "");
          target.query = relative.query;
        } else {
          if (!relative.path) {
            target.path = base2.path;
            if (relative.query !== undefined) {
              target.query = relative.query;
            } else {
              target.query = base2.query;
            }
          } else {
            if (relative.path.charAt(0) === "/") {
              target.path = removeDotSegments(relative.path);
            } else {
              if ((base2.userinfo !== undefined || base2.host !== undefined || base2.port !== undefined) && !base2.path) {
                target.path = "/" + relative.path;
              } else if (!base2.path) {
                target.path = relative.path;
              } else {
                target.path = base2.path.slice(0, base2.path.lastIndexOf("/") + 1) + relative.path;
              }
              target.path = removeDotSegments(target.path);
            }
            target.query = relative.query;
          }
          target.userinfo = base2.userinfo;
          target.host = base2.host;
          target.port = base2.port;
        }
        target.scheme = base2.scheme;
      }
      target.fragment = relative.fragment;
      return target;
    }
    function resolve(baseURI, relativeURI, options) {
      var schemelessOptions = assign({ scheme: "null" }, options);
      return serialize(resolveComponents(parse(baseURI, schemelessOptions), parse(relativeURI, schemelessOptions), schemelessOptions, true), schemelessOptions);
    }
    function normalize(uri, options) {
      if (typeof uri === "string") {
        uri = serialize(parse(uri, options), options);
      } else if (typeOf(uri) === "object") {
        uri = parse(serialize(uri, options), options);
      }
      return uri;
    }
    function equal(uriA, uriB, options) {
      if (typeof uriA === "string") {
        uriA = serialize(parse(uriA, options), options);
      } else if (typeOf(uriA) === "object") {
        uriA = serialize(uriA, options);
      }
      if (typeof uriB === "string") {
        uriB = serialize(parse(uriB, options), options);
      } else if (typeOf(uriB) === "object") {
        uriB = serialize(uriB, options);
      }
      return uriA === uriB;
    }
    function escapeComponent(str, options) {
      return str && str.toString().replace(!options || !options.iri ? URI_PROTOCOL.ESCAPE : IRI_PROTOCOL.ESCAPE, pctEncChar);
    }
    function unescapeComponent(str, options) {
      return str && str.toString().replace(!options || !options.iri ? URI_PROTOCOL.PCT_ENCODED : IRI_PROTOCOL.PCT_ENCODED, pctDecChars);
    }
    var handler = {
      scheme: "http",
      domainHost: true,
      parse: function parse(components, options) {
        if (!components.host) {
          components.error = components.error || "HTTP URIs must have a host.";
        }
        return components;
      },
      serialize: function serialize(components, options) {
        var secure = String(components.scheme).toLowerCase() === "https";
        if (components.port === (secure ? 443 : 80) || components.port === "") {
          components.port = undefined;
        }
        if (!components.path) {
          components.path = "/";
        }
        return components;
      }
    };
    var handler$1 = {
      scheme: "https",
      domainHost: handler.domainHost,
      parse: handler.parse,
      serialize: handler.serialize
    };
    function isSecure(wsComponents) {
      return typeof wsComponents.secure === "boolean" ? wsComponents.secure : String(wsComponents.scheme).toLowerCase() === "wss";
    }
    var handler$2 = {
      scheme: "ws",
      domainHost: true,
      parse: function parse(components, options) {
        var wsComponents = components;
        wsComponents.secure = isSecure(wsComponents);
        wsComponents.resourceName = (wsComponents.path || "/") + (wsComponents.query ? "?" + wsComponents.query : "");
        wsComponents.path = undefined;
        wsComponents.query = undefined;
        return wsComponents;
      },
      serialize: function serialize(wsComponents, options) {
        if (wsComponents.port === (isSecure(wsComponents) ? 443 : 80) || wsComponents.port === "") {
          wsComponents.port = undefined;
        }
        if (typeof wsComponents.secure === "boolean") {
          wsComponents.scheme = wsComponents.secure ? "wss" : "ws";
          wsComponents.secure = undefined;
        }
        if (wsComponents.resourceName) {
          var _wsComponents$resourc = wsComponents.resourceName.split("?"), _wsComponents$resourc2 = slicedToArray(_wsComponents$resourc, 2), path = _wsComponents$resourc2[0], query = _wsComponents$resourc2[1];
          wsComponents.path = path && path !== "/" ? path : undefined;
          wsComponents.query = query;
          wsComponents.resourceName = undefined;
        }
        wsComponents.fragment = undefined;
        return wsComponents;
      }
    };
    var handler$3 = {
      scheme: "wss",
      domainHost: handler$2.domainHost,
      parse: handler$2.parse,
      serialize: handler$2.serialize
    };
    var O = {};
    var isIRI = true;
    var UNRESERVED$$ = "[A-Za-z0-9\\-\\.\\_\\~" + (isIRI ? "\\xA0-\\u200D\\u2010-\\u2029\\u202F-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF" : "") + "]";
    var HEXDIG$$ = "[0-9A-Fa-f]";
    var PCT_ENCODED$ = subexp(subexp("%[EFef]" + HEXDIG$$ + "%" + HEXDIG$$ + HEXDIG$$ + "%" + HEXDIG$$ + HEXDIG$$) + "|" + subexp("%[89A-Fa-f]" + HEXDIG$$ + "%" + HEXDIG$$ + HEXDIG$$) + "|" + subexp("%" + HEXDIG$$ + HEXDIG$$));
    var ATEXT$$ = "[A-Za-z0-9\\!\\$\\%\\'\\*\\+\\-\\^\\_\\`\\{\\|\\}\\~]";
    var QTEXT$$ = "[\\!\\$\\%\\'\\(\\)\\*\\+\\,\\-\\.0-9\\<\\>A-Z\\x5E-\\x7E]";
    var VCHAR$$ = merge(QTEXT$$, "[\\\"\\\\]");
    var SOME_DELIMS$$ = "[\\!\\$\\'\\(\\)\\*\\+\\,\\;\\:\\@]";
    var UNRESERVED = new RegExp(UNRESERVED$$, "g");
    var PCT_ENCODED = new RegExp(PCT_ENCODED$, "g");
    var NOT_LOCAL_PART = new RegExp(merge("[^]", ATEXT$$, "[\\.]", "[\\\"]", VCHAR$$), "g");
    var NOT_HFNAME = new RegExp(merge("[^]", UNRESERVED$$, SOME_DELIMS$$), "g");
    var NOT_HFVALUE = NOT_HFNAME;
    function decodeUnreserved(str) {
      var decStr = pctDecChars(str);
      return !decStr.match(UNRESERVED) ? str : decStr;
    }
    var handler$4 = {
      scheme: "mailto",
      parse: function parse$$1(components, options) {
        var mailtoComponents = components;
        var to = mailtoComponents.to = mailtoComponents.path ? mailtoComponents.path.split(",") : [];
        mailtoComponents.path = undefined;
        if (mailtoComponents.query) {
          var unknownHeaders = false;
          var headers = {};
          var hfields = mailtoComponents.query.split("&");
          for (var x = 0, xl = hfields.length;x < xl; ++x) {
            var hfield = hfields[x].split("=");
            switch (hfield[0]) {
              case "to":
                var toAddrs = hfield[1].split(",");
                for (var _x = 0, _xl = toAddrs.length;_x < _xl; ++_x) {
                  to.push(toAddrs[_x]);
                }
                break;
              case "subject":
                mailtoComponents.subject = unescapeComponent(hfield[1], options);
                break;
              case "body":
                mailtoComponents.body = unescapeComponent(hfield[1], options);
                break;
              default:
                unknownHeaders = true;
                headers[unescapeComponent(hfield[0], options)] = unescapeComponent(hfield[1], options);
                break;
            }
          }
          if (unknownHeaders)
            mailtoComponents.headers = headers;
        }
        mailtoComponents.query = undefined;
        for (var _x2 = 0, _xl2 = to.length;_x2 < _xl2; ++_x2) {
          var addr = to[_x2].split("@");
          addr[0] = unescapeComponent(addr[0]);
          if (!options.unicodeSupport) {
            try {
              addr[1] = punycode.toASCII(unescapeComponent(addr[1], options).toLowerCase());
            } catch (e) {
              mailtoComponents.error = mailtoComponents.error || "Email address's domain name can not be converted to ASCII via punycode: " + e;
            }
          } else {
            addr[1] = unescapeComponent(addr[1], options).toLowerCase();
          }
          to[_x2] = addr.join("@");
        }
        return mailtoComponents;
      },
      serialize: function serialize$$1(mailtoComponents, options) {
        var components = mailtoComponents;
        var to = toArray(mailtoComponents.to);
        if (to) {
          for (var x = 0, xl = to.length;x < xl; ++x) {
            var toAddr = String(to[x]);
            var atIdx = toAddr.lastIndexOf("@");
            var localPart = toAddr.slice(0, atIdx).replace(PCT_ENCODED, decodeUnreserved).replace(PCT_ENCODED, toUpperCase).replace(NOT_LOCAL_PART, pctEncChar);
            var domain = toAddr.slice(atIdx + 1);
            try {
              domain = !options.iri ? punycode.toASCII(unescapeComponent(domain, options).toLowerCase()) : punycode.toUnicode(domain);
            } catch (e) {
              components.error = components.error || "Email address's domain name can not be converted to " + (!options.iri ? "ASCII" : "Unicode") + " via punycode: " + e;
            }
            to[x] = localPart + "@" + domain;
          }
          components.path = to.join(",");
        }
        var headers = mailtoComponents.headers = mailtoComponents.headers || {};
        if (mailtoComponents.subject)
          headers["subject"] = mailtoComponents.subject;
        if (mailtoComponents.body)
          headers["body"] = mailtoComponents.body;
        var fields = [];
        for (var name in headers) {
          if (headers[name] !== O[name]) {
            fields.push(name.replace(PCT_ENCODED, decodeUnreserved).replace(PCT_ENCODED, toUpperCase).replace(NOT_HFNAME, pctEncChar) + "=" + headers[name].replace(PCT_ENCODED, decodeUnreserved).replace(PCT_ENCODED, toUpperCase).replace(NOT_HFVALUE, pctEncChar));
          }
        }
        if (fields.length) {
          components.query = fields.join("&");
        }
        return components;
      }
    };
    var URN_PARSE = /^([^\:]+)\:(.*)/;
    var handler$5 = {
      scheme: "urn",
      parse: function parse$$1(components, options) {
        var matches = components.path && components.path.match(URN_PARSE);
        var urnComponents = components;
        if (matches) {
          var scheme = options.scheme || urnComponents.scheme || "urn";
          var nid = matches[1].toLowerCase();
          var nss = matches[2];
          var urnScheme = scheme + ":" + (options.nid || nid);
          var schemeHandler = SCHEMES[urnScheme];
          urnComponents.nid = nid;
          urnComponents.nss = nss;
          urnComponents.path = undefined;
          if (schemeHandler) {
            urnComponents = schemeHandler.parse(urnComponents, options);
          }
        } else {
          urnComponents.error = urnComponents.error || "URN can not be parsed.";
        }
        return urnComponents;
      },
      serialize: function serialize$$1(urnComponents, options) {
        var scheme = options.scheme || urnComponents.scheme || "urn";
        var nid = urnComponents.nid;
        var urnScheme = scheme + ":" + (options.nid || nid);
        var schemeHandler = SCHEMES[urnScheme];
        if (schemeHandler) {
          urnComponents = schemeHandler.serialize(urnComponents, options);
        }
        var uriComponents = urnComponents;
        var nss = urnComponents.nss;
        uriComponents.path = (nid || options.nid) + ":" + nss;
        return uriComponents;
      }
    };
    var UUID = /^[0-9A-Fa-f]{8}(?:\-[0-9A-Fa-f]{4}){3}\-[0-9A-Fa-f]{12}$/;
    var handler$6 = {
      scheme: "urn:uuid",
      parse: function parse(urnComponents, options) {
        var uuidComponents = urnComponents;
        uuidComponents.uuid = uuidComponents.nss;
        uuidComponents.nss = undefined;
        if (!options.tolerant && (!uuidComponents.uuid || !uuidComponents.uuid.match(UUID))) {
          uuidComponents.error = uuidComponents.error || "UUID is not valid.";
        }
        return uuidComponents;
      },
      serialize: function serialize(uuidComponents, options) {
        var urnComponents = uuidComponents;
        urnComponents.nss = (uuidComponents.uuid || "").toLowerCase();
        return urnComponents;
      }
    };
    SCHEMES[handler.scheme] = handler;
    SCHEMES[handler$1.scheme] = handler$1;
    SCHEMES[handler$2.scheme] = handler$2;
    SCHEMES[handler$3.scheme] = handler$3;
    SCHEMES[handler$4.scheme] = handler$4;
    SCHEMES[handler$5.scheme] = handler$5;
    SCHEMES[handler$6.scheme] = handler$6;
    exports2.SCHEMES = SCHEMES;
    exports2.pctEncChar = pctEncChar;
    exports2.pctDecChars = pctDecChars;
    exports2.parse = parse;
    exports2.removeDotSegments = removeDotSegments;
    exports2.serialize = serialize;
    exports2.resolveComponents = resolveComponents;
    exports2.resolve = resolve;
    exports2.normalize = normalize;
    exports2.equal = equal;
    exports2.escapeComponent = escapeComponent;
    exports2.unescapeComponent = unescapeComponent;
    Object.defineProperty(exports2, "__esModule", { value: true });
  });
});

// node_modules/fast-deep-equal/index.js
var require_fast_deep_equal = __commonJS((exports, module) => {
  module.exports = function equal(a, b) {
    if (a === b)
      return true;
    if (a && b && typeof a == "object" && typeof b == "object") {
      if (a.constructor !== b.constructor)
        return false;
      var length, i, keys;
      if (Array.isArray(a)) {
        length = a.length;
        if (length != b.length)
          return false;
        for (i = length;i-- !== 0; )
          if (!equal(a[i], b[i]))
            return false;
        return true;
      }
      if (a.constructor === RegExp)
        return a.source === b.source && a.flags === b.flags;
      if (a.valueOf !== Object.prototype.valueOf)
        return a.valueOf() === b.valueOf();
      if (a.toString !== Object.prototype.toString)
        return a.toString() === b.toString();
      keys = Object.keys(a);
      length = keys.length;
      if (length !== Object.keys(b).length)
        return false;
      for (i = length;i-- !== 0; )
        if (!Object.prototype.hasOwnProperty.call(b, keys[i]))
          return false;
      for (i = length;i-- !== 0; ) {
        var key = keys[i];
        if (!equal(a[key], b[key]))
          return false;
      }
      return true;
    }
    return a !== a && b !== b;
  };
});

// node_modules/ajv/lib/compile/ucs2length.js
var require_ucs2length = __commonJS((exports, module) => {
  module.exports = function ucs2length(str) {
    var length = 0, len = str.length, pos = 0, value;
    while (pos < len) {
      length++;
      value = str.charCodeAt(pos++);
      if (value >= 55296 && value <= 56319 && pos < len) {
        value = str.charCodeAt(pos);
        if ((value & 64512) == 56320)
          pos++;
      }
    }
    return length;
  };
});

// node_modules/ajv/lib/compile/util.js
var require_util = __commonJS((exports, module) => {
  module.exports = {
    copy,
    checkDataType,
    checkDataTypes,
    coerceToTypes,
    toHash,
    getProperty,
    escapeQuotes,
    equal: require_fast_deep_equal(),
    ucs2length: require_ucs2length(),
    varOccurences,
    varReplace,
    schemaHasRules,
    schemaHasRulesExcept,
    schemaUnknownRules,
    toQuotedString,
    getPathExpr,
    getPath,
    getData,
    unescapeFragment,
    unescapeJsonPointer,
    escapeFragment,
    escapeJsonPointer
  };
  function copy(o, to) {
    to = to || {};
    for (var key in o)
      to[key] = o[key];
    return to;
  }
  function checkDataType(dataType, data, strictNumbers, negate) {
    var EQUAL = negate ? " !== " : " === ", AND = negate ? " || " : " && ", OK2 = negate ? "!" : "", NOT = negate ? "" : "!";
    switch (dataType) {
      case "null":
        return data + EQUAL + "null";
      case "array":
        return OK2 + "Array.isArray(" + data + ")";
      case "object":
        return "(" + OK2 + data + AND + "typeof " + data + EQUAL + '"object"' + AND + NOT + "Array.isArray(" + data + "))";
      case "integer":
        return "(typeof " + data + EQUAL + '"number"' + AND + NOT + "(" + data + " % 1)" + AND + data + EQUAL + data + (strictNumbers ? AND + OK2 + "isFinite(" + data + ")" : "") + ")";
      case "number":
        return "(typeof " + data + EQUAL + '"' + dataType + '"' + (strictNumbers ? AND + OK2 + "isFinite(" + data + ")" : "") + ")";
      default:
        return "typeof " + data + EQUAL + '"' + dataType + '"';
    }
  }
  function checkDataTypes(dataTypes, data, strictNumbers) {
    switch (dataTypes.length) {
      case 1:
        return checkDataType(dataTypes[0], data, strictNumbers, true);
      default:
        var code = "";
        var types2 = toHash(dataTypes);
        if (types2.array && types2.object) {
          code = types2.null ? "(" : "(!" + data + " || ";
          code += "typeof " + data + ' !== "object")';
          delete types2.null;
          delete types2.array;
          delete types2.object;
        }
        if (types2.number)
          delete types2.integer;
        for (var t in types2)
          code += (code ? " && " : "") + checkDataType(t, data, strictNumbers, true);
        return code;
    }
  }
  var COERCE_TO_TYPES = toHash(["string", "number", "integer", "boolean", "null"]);
  function coerceToTypes(optionCoerceTypes, dataTypes) {
    if (Array.isArray(dataTypes)) {
      var types2 = [];
      for (var i = 0;i < dataTypes.length; i++) {
        var t = dataTypes[i];
        if (COERCE_TO_TYPES[t])
          types2[types2.length] = t;
        else if (optionCoerceTypes === "array" && t === "array")
          types2[types2.length] = t;
      }
      if (types2.length)
        return types2;
    } else if (COERCE_TO_TYPES[dataTypes]) {
      return [dataTypes];
    } else if (optionCoerceTypes === "array" && dataTypes === "array") {
      return ["array"];
    }
  }
  function toHash(arr) {
    var hash = {};
    for (var i = 0;i < arr.length; i++)
      hash[arr[i]] = true;
    return hash;
  }
  var IDENTIFIER = /^[a-z$_][a-z$_0-9]*$/i;
  var SINGLE_QUOTE = /'|\\/g;
  function getProperty(key) {
    return typeof key == "number" ? "[" + key + "]" : IDENTIFIER.test(key) ? "." + key : "['" + escapeQuotes(key) + "']";
  }
  function escapeQuotes(str) {
    return str.replace(SINGLE_QUOTE, "\\$&").replace(/\n/g, "\\n").replace(/\r/g, "\\r").replace(/\f/g, "\\f").replace(/\t/g, "\\t");
  }
  function varOccurences(str, dataVar) {
    dataVar += "[^0-9]";
    var matches = str.match(new RegExp(dataVar, "g"));
    return matches ? matches.length : 0;
  }
  function varReplace(str, dataVar, expr) {
    dataVar += "([^0-9])";
    expr = expr.replace(/\$/g, "$$$$");
    return str.replace(new RegExp(dataVar, "g"), expr + "$1");
  }
  function schemaHasRules(schema, rules) {
    if (typeof schema == "boolean")
      return !schema;
    for (var key in schema)
      if (rules[key])
        return true;
  }
  function schemaHasRulesExcept(schema, rules, exceptKeyword) {
    if (typeof schema == "boolean")
      return !schema && exceptKeyword != "not";
    for (var key in schema)
      if (key != exceptKeyword && rules[key])
        return true;
  }
  function schemaUnknownRules(schema, rules) {
    if (typeof schema == "boolean")
      return;
    for (var key in schema)
      if (!rules[key])
        return key;
  }
  function toQuotedString(str) {
    return "'" + escapeQuotes(str) + "'";
  }
  function getPathExpr(currentPath, expr, jsonPointers, isNumber) {
    var path = jsonPointers ? "'/' + " + expr + (isNumber ? "" : ".replace(/~/g, '~0').replace(/\\//g, '~1')") : isNumber ? "'[' + " + expr + " + ']'" : "'[\\'' + " + expr + " + '\\']'";
    return joinPaths(currentPath, path);
  }
  function getPath(currentPath, prop, jsonPointers) {
    var path = jsonPointers ? toQuotedString("/" + escapeJsonPointer(prop)) : toQuotedString(getProperty(prop));
    return joinPaths(currentPath, path);
  }
  var JSON_POINTER = /^\/(?:[^~]|~0|~1)*$/;
  var RELATIVE_JSON_POINTER = /^([0-9]+)(#|\/(?:[^~]|~0|~1)*)?$/;
  function getData($data, lvl, paths) {
    var up, jsonPointer, data, matches;
    if ($data === "")
      return "rootData";
    if ($data[0] == "/") {
      if (!JSON_POINTER.test($data))
        throw new Error("Invalid JSON-pointer: " + $data);
      jsonPointer = $data;
      data = "rootData";
    } else {
      matches = $data.match(RELATIVE_JSON_POINTER);
      if (!matches)
        throw new Error("Invalid JSON-pointer: " + $data);
      up = +matches[1];
      jsonPointer = matches[2];
      if (jsonPointer == "#") {
        if (up >= lvl)
          throw new Error("Cannot access property/index " + up + " levels up, current level is " + lvl);
        return paths[lvl - up];
      }
      if (up > lvl)
        throw new Error("Cannot access data " + up + " levels up, current level is " + lvl);
      data = "data" + (lvl - up || "");
      if (!jsonPointer)
        return data;
    }
    var expr = data;
    var segments = jsonPointer.split("/");
    for (var i = 0;i < segments.length; i++) {
      var segment = segments[i];
      if (segment) {
        data += getProperty(unescapeJsonPointer(segment));
        expr += " && " + data;
      }
    }
    return expr;
  }
  function joinPaths(a, b) {
    if (a == '""')
      return b;
    return (a + " + " + b).replace(/([^\\])' \+ '/g, "$1");
  }
  function unescapeFragment(str) {
    return unescapeJsonPointer(decodeURIComponent(str));
  }
  function escapeFragment(str) {
    return encodeURIComponent(escapeJsonPointer(str));
  }
  function escapeJsonPointer(str) {
    return str.replace(/~/g, "~0").replace(/\//g, "~1");
  }
  function unescapeJsonPointer(str) {
    return str.replace(/~1/g, "/").replace(/~0/g, "~");
  }
});

// node_modules/ajv/lib/compile/schema_obj.js
var require_schema_obj = __commonJS((exports, module) => {
  var util3 = require_util();
  module.exports = SchemaObject;
  function SchemaObject(obj) {
    util3.copy(obj, this);
  }
});

// node_modules/json-schema-traverse/index.js
var require_json_schema_traverse = __commonJS((exports, module) => {
  var traverse = module.exports = function(schema, opts, cb) {
    if (typeof opts == "function") {
      cb = opts;
      opts = {};
    }
    cb = opts.cb || cb;
    var pre = typeof cb == "function" ? cb : cb.pre || function() {};
    var post = cb.post || function() {};
    _traverse(opts, pre, post, schema, "", schema);
  };
  traverse.keywords = {
    additionalItems: true,
    items: true,
    contains: true,
    additionalProperties: true,
    propertyNames: true,
    not: true
  };
  traverse.arrayKeywords = {
    items: true,
    allOf: true,
    anyOf: true,
    oneOf: true
  };
  traverse.propsKeywords = {
    definitions: true,
    properties: true,
    patternProperties: true,
    dependencies: true
  };
  traverse.skipKeywords = {
    default: true,
    enum: true,
    const: true,
    required: true,
    maximum: true,
    minimum: true,
    exclusiveMaximum: true,
    exclusiveMinimum: true,
    multipleOf: true,
    maxLength: true,
    minLength: true,
    pattern: true,
    format: true,
    maxItems: true,
    minItems: true,
    uniqueItems: true,
    maxProperties: true,
    minProperties: true
  };
  function _traverse(opts, pre, post, schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex) {
    if (schema && typeof schema == "object" && !Array.isArray(schema)) {
      pre(schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex);
      for (var key in schema) {
        var sch = schema[key];
        if (Array.isArray(sch)) {
          if (key in traverse.arrayKeywords) {
            for (var i = 0;i < sch.length; i++)
              _traverse(opts, pre, post, sch[i], jsonPtr + "/" + key + "/" + i, rootSchema, jsonPtr, key, schema, i);
          }
        } else if (key in traverse.propsKeywords) {
          if (sch && typeof sch == "object") {
            for (var prop in sch)
              _traverse(opts, pre, post, sch[prop], jsonPtr + "/" + key + "/" + escapeJsonPtr(prop), rootSchema, jsonPtr, key, schema, prop);
          }
        } else if (key in traverse.keywords || opts.allKeys && !(key in traverse.skipKeywords)) {
          _traverse(opts, pre, post, sch, jsonPtr + "/" + key, rootSchema, jsonPtr, key, schema);
        }
      }
      post(schema, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex);
    }
  }
  function escapeJsonPtr(str) {
    return str.replace(/~/g, "~0").replace(/\//g, "~1");
  }
});

// node_modules/ajv/lib/compile/resolve.js
var require_resolve = __commonJS((exports, module) => {
  var URI = require_uri_all();
  var equal = require_fast_deep_equal();
  var util3 = require_util();
  var SchemaObject = require_schema_obj();
  var traverse = require_json_schema_traverse();
  module.exports = resolve;
  resolve.normalizeId = normalizeId;
  resolve.fullPath = getFullPath;
  resolve.url = resolveUrl;
  resolve.ids = resolveIds;
  resolve.inlineRef = inlineRef;
  resolve.schema = resolveSchema;
  function resolve(compile, root, ref) {
    var refVal = this._refs[ref];
    if (typeof refVal == "string") {
      if (this._refs[refVal])
        refVal = this._refs[refVal];
      else
        return resolve.call(this, compile, root, refVal);
    }
    refVal = refVal || this._schemas[ref];
    if (refVal instanceof SchemaObject) {
      return inlineRef(refVal.schema, this._opts.inlineRefs) ? refVal.schema : refVal.validate || this._compile(refVal);
    }
    var res = resolveSchema.call(this, root, ref);
    var schema, v, baseId;
    if (res) {
      schema = res.schema;
      root = res.root;
      baseId = res.baseId;
    }
    if (schema instanceof SchemaObject) {
      v = schema.validate || compile.call(this, schema.schema, root, undefined, baseId);
    } else if (schema !== undefined) {
      v = inlineRef(schema, this._opts.inlineRefs) ? schema : compile.call(this, schema, root, undefined, baseId);
    }
    return v;
  }
  function resolveSchema(root, ref) {
    var p = URI.parse(ref), refPath = _getFullPath(p), baseId = getFullPath(this._getId(root.schema));
    if (Object.keys(root.schema).length === 0 || refPath !== baseId) {
      var id = normalizeId(refPath);
      var refVal = this._refs[id];
      if (typeof refVal == "string") {
        return resolveRecursive.call(this, root, refVal, p);
      } else if (refVal instanceof SchemaObject) {
        if (!refVal.validate)
          this._compile(refVal);
        root = refVal;
      } else {
        refVal = this._schemas[id];
        if (refVal instanceof SchemaObject) {
          if (!refVal.validate)
            this._compile(refVal);
          if (id == normalizeId(ref))
            return { schema: refVal, root, baseId };
          root = refVal;
        } else {
          return;
        }
      }
      if (!root.schema)
        return;
      baseId = getFullPath(this._getId(root.schema));
    }
    return getJsonPointer.call(this, p, baseId, root.schema, root);
  }
  function resolveRecursive(root, ref, parsedRef) {
    var res = resolveSchema.call(this, root, ref);
    if (res) {
      var schema = res.schema;
      var baseId = res.baseId;
      root = res.root;
      var id = this._getId(schema);
      if (id)
        baseId = resolveUrl(baseId, id);
      return getJsonPointer.call(this, parsedRef, baseId, schema, root);
    }
  }
  var PREVENT_SCOPE_CHANGE = util3.toHash(["properties", "patternProperties", "enum", "dependencies", "definitions"]);
  function getJsonPointer(parsedRef, baseId, schema, root) {
    parsedRef.fragment = parsedRef.fragment || "";
    if (parsedRef.fragment.slice(0, 1) != "/")
      return;
    var parts = parsedRef.fragment.split("/");
    for (var i = 1;i < parts.length; i++) {
      var part = parts[i];
      if (part) {
        part = util3.unescapeFragment(part);
        schema = schema[part];
        if (schema === undefined)
          break;
        var id;
        if (!PREVENT_SCOPE_CHANGE[part]) {
          id = this._getId(schema);
          if (id)
            baseId = resolveUrl(baseId, id);
          if (schema.$ref) {
            var $ref = resolveUrl(baseId, schema.$ref);
            var res = resolveSchema.call(this, root, $ref);
            if (res) {
              schema = res.schema;
              root = res.root;
              baseId = res.baseId;
            }
          }
        }
      }
    }
    if (schema !== undefined && schema !== root.schema)
      return { schema, root, baseId };
  }
  var SIMPLE_INLINED = util3.toHash([
    "type",
    "format",
    "pattern",
    "maxLength",
    "minLength",
    "maxProperties",
    "minProperties",
    "maxItems",
    "minItems",
    "maximum",
    "minimum",
    "uniqueItems",
    "multipleOf",
    "required",
    "enum"
  ]);
  function inlineRef(schema, limit) {
    if (limit === false)
      return false;
    if (limit === undefined || limit === true)
      return checkNoRef(schema);
    else if (limit)
      return countKeys(schema) <= limit;
  }
  function checkNoRef(schema) {
    var item;
    if (Array.isArray(schema)) {
      for (var i = 0;i < schema.length; i++) {
        item = schema[i];
        if (typeof item == "object" && !checkNoRef(item))
          return false;
      }
    } else {
      for (var key in schema) {
        if (key == "$ref")
          return false;
        item = schema[key];
        if (typeof item == "object" && !checkNoRef(item))
          return false;
      }
    }
    return true;
  }
  function countKeys(schema) {
    var count = 0, item;
    if (Array.isArray(schema)) {
      for (var i = 0;i < schema.length; i++) {
        item = schema[i];
        if (typeof item == "object")
          count += countKeys(item);
        if (count == Infinity)
          return Infinity;
      }
    } else {
      for (var key in schema) {
        if (key == "$ref")
          return Infinity;
        if (SIMPLE_INLINED[key]) {
          count++;
        } else {
          item = schema[key];
          if (typeof item == "object")
            count += countKeys(item) + 1;
          if (count == Infinity)
            return Infinity;
        }
      }
    }
    return count;
  }
  function getFullPath(id, normalize) {
    if (normalize !== false)
      id = normalizeId(id);
    var p = URI.parse(id);
    return _getFullPath(p);
  }
  function _getFullPath(p) {
    return URI.serialize(p).split("#")[0] + "#";
  }
  var TRAILING_SLASH_HASH = /#\/?$/;
  function normalizeId(id) {
    return id ? id.replace(TRAILING_SLASH_HASH, "") : "";
  }
  function resolveUrl(baseId, id) {
    id = normalizeId(id);
    return URI.resolve(baseId, id);
  }
  function resolveIds(schema) {
    var schemaId = normalizeId(this._getId(schema));
    var baseIds = { "": schemaId };
    var fullPaths = { "": getFullPath(schemaId, false) };
    var localRefs = {};
    var self2 = this;
    traverse(schema, { allKeys: true }, function(sch, jsonPtr, rootSchema, parentJsonPtr, parentKeyword, parentSchema, keyIndex) {
      if (jsonPtr === "")
        return;
      var id = self2._getId(sch);
      var baseId = baseIds[parentJsonPtr];
      var fullPath = fullPaths[parentJsonPtr] + "/" + parentKeyword;
      if (keyIndex !== undefined)
        fullPath += "/" + (typeof keyIndex == "number" ? keyIndex : util3.escapeFragment(keyIndex));
      if (typeof id == "string") {
        id = baseId = normalizeId(baseId ? URI.resolve(baseId, id) : id);
        var refVal = self2._refs[id];
        if (typeof refVal == "string")
          refVal = self2._refs[refVal];
        if (refVal && refVal.schema) {
          if (!equal(sch, refVal.schema))
            throw new Error('id "' + id + '" resolves to more than one schema');
        } else if (id != normalizeId(fullPath)) {
          if (id[0] == "#") {
            if (localRefs[id] && !equal(sch, localRefs[id]))
              throw new Error('id "' + id + '" resolves to more than one schema');
            localRefs[id] = sch;
          } else {
            self2._refs[id] = fullPath;
          }
        }
      }
      baseIds[jsonPtr] = baseId;
      fullPaths[jsonPtr] = fullPath;
    });
    return localRefs;
  }
});

// node_modules/ajv/lib/compile/error_classes.js
var require_error_classes = __commonJS((exports, module) => {
  var resolve = require_resolve();
  module.exports = {
    Validation: errorSubclass(ValidationError),
    MissingRef: errorSubclass(MissingRefError)
  };
  function ValidationError(errors2) {
    this.message = "validation failed";
    this.errors = errors2;
    this.ajv = this.validation = true;
  }
  MissingRefError.message = function(baseId, ref) {
    return "can't resolve reference " + ref + " from id " + baseId;
  };
  function MissingRefError(baseId, ref, message) {
    this.message = message || MissingRefError.message(baseId, ref);
    this.missingRef = resolve.url(baseId, ref);
    this.missingSchema = resolve.normalizeId(resolve.fullPath(this.missingRef));
  }
  function errorSubclass(Subclass) {
    Subclass.prototype = Object.create(Error.prototype);
    Subclass.prototype.constructor = Subclass;
    return Subclass;
  }
});

// node_modules/fast-json-stable-stringify/index.js
var require_fast_json_stable_stringify = __commonJS((exports, module) => {
  module.exports = function(data, opts) {
    if (!opts)
      opts = {};
    if (typeof opts === "function")
      opts = { cmp: opts };
    var cycles = typeof opts.cycles === "boolean" ? opts.cycles : false;
    var cmp = opts.cmp && function(f) {
      return function(node) {
        return function(a, b) {
          var aobj = { key: a, value: node[a] };
          var bobj = { key: b, value: node[b] };
          return f(aobj, bobj);
        };
      };
    }(opts.cmp);
    var seen = [];
    return function stringify(node) {
      if (node && node.toJSON && typeof node.toJSON === "function") {
        node = node.toJSON();
      }
      if (node === undefined)
        return;
      if (typeof node == "number")
        return isFinite(node) ? "" + node : "null";
      if (typeof node !== "object")
        return JSON.stringify(node);
      var i, out;
      if (Array.isArray(node)) {
        out = "[";
        for (i = 0;i < node.length; i++) {
          if (i)
            out += ",";
          out += stringify(node[i]) || "null";
        }
        return out + "]";
      }
      if (node === null)
        return "null";
      if (seen.indexOf(node) !== -1) {
        if (cycles)
          return JSON.stringify("__cycle__");
        throw new TypeError("Converting circular structure to JSON");
      }
      var seenIndex = seen.push(node) - 1;
      var keys = Object.keys(node).sort(cmp && cmp(node));
      out = "";
      for (i = 0;i < keys.length; i++) {
        var key = keys[i];
        var value = stringify(node[key]);
        if (!value)
          continue;
        if (out)
          out += ",";
        out += JSON.stringify(key) + ":" + value;
      }
      seen.splice(seenIndex, 1);
      return "{" + out + "}";
    }(data);
  };
});

// node_modules/ajv/lib/dotjs/validate.js
var require_validate = __commonJS((exports, module) => {
  module.exports = function generate_validate(it, $keyword, $ruleType) {
    var out = "";
    var $async = it.schema.$async === true, $refKeywords = it.util.schemaHasRulesExcept(it.schema, it.RULES.all, "$ref"), $id = it.self._getId(it.schema);
    if (it.opts.strictKeywords) {
      var $unknownKwd = it.util.schemaUnknownRules(it.schema, it.RULES.keywords);
      if ($unknownKwd) {
        var $keywordsMsg = "unknown keyword: " + $unknownKwd;
        if (it.opts.strictKeywords === "log")
          it.logger.warn($keywordsMsg);
        else
          throw new Error($keywordsMsg);
      }
    }
    if (it.isTop) {
      out += " var validate = ";
      if ($async) {
        it.async = true;
        out += "async ";
      }
      out += "function(data, dataPath, parentData, parentDataProperty, rootData) { 'use strict'; ";
      if ($id && (it.opts.sourceCode || it.opts.processCode)) {
        out += " " + ("/*# sourceURL=" + $id + " */") + " ";
      }
    }
    if (typeof it.schema == "boolean" || !($refKeywords || it.schema.$ref)) {
      var $keyword = "false schema";
      var $lvl = it.level;
      var $dataLvl = it.dataLevel;
      var $schema = it.schema[$keyword];
      var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
      var $errSchemaPath = it.errSchemaPath + "/" + $keyword;
      var $breakOnError = !it.opts.allErrors;
      var $errorKeyword;
      var $data = "data" + ($dataLvl || "");
      var $valid = "valid" + $lvl;
      if (it.schema === false) {
        if (it.isTop) {
          $breakOnError = true;
        } else {
          out += " var " + $valid + " = false; ";
        }
        var $$outStack = $$outStack || [];
        $$outStack.push(out);
        out = "";
        if (it.createErrors !== false) {
          out += " { keyword: '" + ($errorKeyword || "false schema") + "' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: {} ";
          if (it.opts.messages !== false) {
            out += " , message: 'boolean schema is false' ";
          }
          if (it.opts.verbose) {
            out += " , schema: false , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
          }
          out += " } ";
        } else {
          out += " {} ";
        }
        var __err = out;
        out = $$outStack.pop();
        if (!it.compositeRule && $breakOnError) {
          if (it.async) {
            out += " throw new ValidationError([" + __err + "]); ";
          } else {
            out += " validate.errors = [" + __err + "]; return false; ";
          }
        } else {
          out += " var err = " + __err + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
        }
      } else {
        if (it.isTop) {
          if ($async) {
            out += " return data; ";
          } else {
            out += " validate.errors = null; return true; ";
          }
        } else {
          out += " var " + $valid + " = true; ";
        }
      }
      if (it.isTop) {
        out += " }; return validate; ";
      }
      return out;
    }
    if (it.isTop) {
      var $top = it.isTop, $lvl = it.level = 0, $dataLvl = it.dataLevel = 0, $data = "data";
      it.rootId = it.resolve.fullPath(it.self._getId(it.root.schema));
      it.baseId = it.baseId || it.rootId;
      delete it.isTop;
      it.dataPathArr = [""];
      if (it.schema.default !== undefined && it.opts.useDefaults && it.opts.strictDefaults) {
        var $defaultMsg = "default is ignored in the schema root";
        if (it.opts.strictDefaults === "log")
          it.logger.warn($defaultMsg);
        else
          throw new Error($defaultMsg);
      }
      out += " var vErrors = null; ";
      out += " var errors = 0;     ";
      out += " if (rootData === undefined) rootData = data; ";
    } else {
      var { level: $lvl, dataLevel: $dataLvl } = it, $data = "data" + ($dataLvl || "");
      if ($id)
        it.baseId = it.resolve.url(it.baseId, $id);
      if ($async && !it.async)
        throw new Error("async schema in sync schema");
      out += " var errs_" + $lvl + " = errors;";
    }
    var $valid = "valid" + $lvl, $breakOnError = !it.opts.allErrors, $closingBraces1 = "", $closingBraces2 = "";
    var $errorKeyword;
    var $typeSchema = it.schema.type, $typeIsArray = Array.isArray($typeSchema);
    if ($typeSchema && it.opts.nullable && it.schema.nullable === true) {
      if ($typeIsArray) {
        if ($typeSchema.indexOf("null") == -1)
          $typeSchema = $typeSchema.concat("null");
      } else if ($typeSchema != "null") {
        $typeSchema = [$typeSchema, "null"];
        $typeIsArray = true;
      }
    }
    if ($typeIsArray && $typeSchema.length == 1) {
      $typeSchema = $typeSchema[0];
      $typeIsArray = false;
    }
    if (it.schema.$ref && $refKeywords) {
      if (it.opts.extendRefs == "fail") {
        throw new Error('$ref: validation keywords used in schema at path "' + it.errSchemaPath + '" (see option extendRefs)');
      } else if (it.opts.extendRefs !== true) {
        $refKeywords = false;
        it.logger.warn('$ref: keywords ignored in schema at path "' + it.errSchemaPath + '"');
      }
    }
    if (it.schema.$comment && it.opts.$comment) {
      out += " " + it.RULES.all.$comment.code(it, "$comment");
    }
    if ($typeSchema) {
      if (it.opts.coerceTypes) {
        var $coerceToTypes = it.util.coerceToTypes(it.opts.coerceTypes, $typeSchema);
      }
      var $rulesGroup = it.RULES.types[$typeSchema];
      if ($coerceToTypes || $typeIsArray || $rulesGroup === true || $rulesGroup && !$shouldUseGroup($rulesGroup)) {
        var $schemaPath = it.schemaPath + ".type", $errSchemaPath = it.errSchemaPath + "/type";
        var $schemaPath = it.schemaPath + ".type", $errSchemaPath = it.errSchemaPath + "/type", $method = $typeIsArray ? "checkDataTypes" : "checkDataType";
        out += " if (" + it.util[$method]($typeSchema, $data, it.opts.strictNumbers, true) + ") { ";
        if ($coerceToTypes) {
          var $dataType = "dataType" + $lvl, $coerced = "coerced" + $lvl;
          out += " var " + $dataType + " = typeof " + $data + "; var " + $coerced + " = undefined; ";
          if (it.opts.coerceTypes == "array") {
            out += " if (" + $dataType + " == 'object' && Array.isArray(" + $data + ") && " + $data + ".length == 1) { " + $data + " = " + $data + "[0]; " + $dataType + " = typeof " + $data + "; if (" + it.util.checkDataType(it.schema.type, $data, it.opts.strictNumbers) + ") " + $coerced + " = " + $data + "; } ";
          }
          out += " if (" + $coerced + " !== undefined) ; ";
          var arr1 = $coerceToTypes;
          if (arr1) {
            var $type, $i = -1, l1 = arr1.length - 1;
            while ($i < l1) {
              $type = arr1[$i += 1];
              if ($type == "string") {
                out += " else if (" + $dataType + " == 'number' || " + $dataType + " == 'boolean') " + $coerced + " = '' + " + $data + "; else if (" + $data + " === null) " + $coerced + " = ''; ";
              } else if ($type == "number" || $type == "integer") {
                out += " else if (" + $dataType + " == 'boolean' || " + $data + " === null || (" + $dataType + " == 'string' && " + $data + " && " + $data + " == +" + $data + " ";
                if ($type == "integer") {
                  out += " && !(" + $data + " % 1)";
                }
                out += ")) " + $coerced + " = +" + $data + "; ";
              } else if ($type == "boolean") {
                out += " else if (" + $data + " === 'false' || " + $data + " === 0 || " + $data + " === null) " + $coerced + " = false; else if (" + $data + " === 'true' || " + $data + " === 1) " + $coerced + " = true; ";
              } else if ($type == "null") {
                out += " else if (" + $data + " === '' || " + $data + " === 0 || " + $data + " === false) " + $coerced + " = null; ";
              } else if (it.opts.coerceTypes == "array" && $type == "array") {
                out += " else if (" + $dataType + " == 'string' || " + $dataType + " == 'number' || " + $dataType + " == 'boolean' || " + $data + " == null) " + $coerced + " = [" + $data + "]; ";
              }
            }
          }
          out += " else {   ";
          var $$outStack = $$outStack || [];
          $$outStack.push(out);
          out = "";
          if (it.createErrors !== false) {
            out += " { keyword: '" + ($errorKeyword || "type") + "' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: { type: '";
            if ($typeIsArray) {
              out += "" + $typeSchema.join(",");
            } else {
              out += "" + $typeSchema;
            }
            out += "' } ";
            if (it.opts.messages !== false) {
              out += " , message: 'should be ";
              if ($typeIsArray) {
                out += "" + $typeSchema.join(",");
              } else {
                out += "" + $typeSchema;
              }
              out += "' ";
            }
            if (it.opts.verbose) {
              out += " , schema: validate.schema" + $schemaPath + " , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
            }
            out += " } ";
          } else {
            out += " {} ";
          }
          var __err = out;
          out = $$outStack.pop();
          if (!it.compositeRule && $breakOnError) {
            if (it.async) {
              out += " throw new ValidationError([" + __err + "]); ";
            } else {
              out += " validate.errors = [" + __err + "]; return false; ";
            }
          } else {
            out += " var err = " + __err + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
          }
          out += " } if (" + $coerced + " !== undefined) {  ";
          var $parentData = $dataLvl ? "data" + ($dataLvl - 1 || "") : "parentData", $parentDataProperty = $dataLvl ? it.dataPathArr[$dataLvl] : "parentDataProperty";
          out += " " + $data + " = " + $coerced + "; ";
          if (!$dataLvl) {
            out += "if (" + $parentData + " !== undefined)";
          }
          out += " " + $parentData + "[" + $parentDataProperty + "] = " + $coerced + "; } ";
        } else {
          var $$outStack = $$outStack || [];
          $$outStack.push(out);
          out = "";
          if (it.createErrors !== false) {
            out += " { keyword: '" + ($errorKeyword || "type") + "' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: { type: '";
            if ($typeIsArray) {
              out += "" + $typeSchema.join(",");
            } else {
              out += "" + $typeSchema;
            }
            out += "' } ";
            if (it.opts.messages !== false) {
              out += " , message: 'should be ";
              if ($typeIsArray) {
                out += "" + $typeSchema.join(",");
              } else {
                out += "" + $typeSchema;
              }
              out += "' ";
            }
            if (it.opts.verbose) {
              out += " , schema: validate.schema" + $schemaPath + " , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
            }
            out += " } ";
          } else {
            out += " {} ";
          }
          var __err = out;
          out = $$outStack.pop();
          if (!it.compositeRule && $breakOnError) {
            if (it.async) {
              out += " throw new ValidationError([" + __err + "]); ";
            } else {
              out += " validate.errors = [" + __err + "]; return false; ";
            }
          } else {
            out += " var err = " + __err + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
          }
        }
        out += " } ";
      }
    }
    if (it.schema.$ref && !$refKeywords) {
      out += " " + it.RULES.all.$ref.code(it, "$ref") + " ";
      if ($breakOnError) {
        out += " } if (errors === ";
        if ($top) {
          out += "0";
        } else {
          out += "errs_" + $lvl;
        }
        out += ") { ";
        $closingBraces2 += "}";
      }
    } else {
      var arr2 = it.RULES;
      if (arr2) {
        var $rulesGroup, i2 = -1, l2 = arr2.length - 1;
        while (i2 < l2) {
          $rulesGroup = arr2[i2 += 1];
          if ($shouldUseGroup($rulesGroup)) {
            if ($rulesGroup.type) {
              out += " if (" + it.util.checkDataType($rulesGroup.type, $data, it.opts.strictNumbers) + ") { ";
            }
            if (it.opts.useDefaults) {
              if ($rulesGroup.type == "object" && it.schema.properties) {
                var $schema = it.schema.properties, $schemaKeys = Object.keys($schema);
                var arr3 = $schemaKeys;
                if (arr3) {
                  var $propertyKey, i3 = -1, l3 = arr3.length - 1;
                  while (i3 < l3) {
                    $propertyKey = arr3[i3 += 1];
                    var $sch = $schema[$propertyKey];
                    if ($sch.default !== undefined) {
                      var $passData = $data + it.util.getProperty($propertyKey);
                      if (it.compositeRule) {
                        if (it.opts.strictDefaults) {
                          var $defaultMsg = "default is ignored for: " + $passData;
                          if (it.opts.strictDefaults === "log")
                            it.logger.warn($defaultMsg);
                          else
                            throw new Error($defaultMsg);
                        }
                      } else {
                        out += " if (" + $passData + " === undefined ";
                        if (it.opts.useDefaults == "empty") {
                          out += " || " + $passData + " === null || " + $passData + " === '' ";
                        }
                        out += " ) " + $passData + " = ";
                        if (it.opts.useDefaults == "shared") {
                          out += " " + it.useDefault($sch.default) + " ";
                        } else {
                          out += " " + JSON.stringify($sch.default) + " ";
                        }
                        out += "; ";
                      }
                    }
                  }
                }
              } else if ($rulesGroup.type == "array" && Array.isArray(it.schema.items)) {
                var arr4 = it.schema.items;
                if (arr4) {
                  var $sch, $i = -1, l4 = arr4.length - 1;
                  while ($i < l4) {
                    $sch = arr4[$i += 1];
                    if ($sch.default !== undefined) {
                      var $passData = $data + "[" + $i + "]";
                      if (it.compositeRule) {
                        if (it.opts.strictDefaults) {
                          var $defaultMsg = "default is ignored for: " + $passData;
                          if (it.opts.strictDefaults === "log")
                            it.logger.warn($defaultMsg);
                          else
                            throw new Error($defaultMsg);
                        }
                      } else {
                        out += " if (" + $passData + " === undefined ";
                        if (it.opts.useDefaults == "empty") {
                          out += " || " + $passData + " === null || " + $passData + " === '' ";
                        }
                        out += " ) " + $passData + " = ";
                        if (it.opts.useDefaults == "shared") {
                          out += " " + it.useDefault($sch.default) + " ";
                        } else {
                          out += " " + JSON.stringify($sch.default) + " ";
                        }
                        out += "; ";
                      }
                    }
                  }
                }
              }
            }
            var arr5 = $rulesGroup.rules;
            if (arr5) {
              var $rule, i5 = -1, l5 = arr5.length - 1;
              while (i5 < l5) {
                $rule = arr5[i5 += 1];
                if ($shouldUseRule($rule)) {
                  var $code = $rule.code(it, $rule.keyword, $rulesGroup.type);
                  if ($code) {
                    out += " " + $code + " ";
                    if ($breakOnError) {
                      $closingBraces1 += "}";
                    }
                  }
                }
              }
            }
            if ($breakOnError) {
              out += " " + $closingBraces1 + " ";
              $closingBraces1 = "";
            }
            if ($rulesGroup.type) {
              out += " } ";
              if ($typeSchema && $typeSchema === $rulesGroup.type && !$coerceToTypes) {
                out += " else { ";
                var $schemaPath = it.schemaPath + ".type", $errSchemaPath = it.errSchemaPath + "/type";
                var $$outStack = $$outStack || [];
                $$outStack.push(out);
                out = "";
                if (it.createErrors !== false) {
                  out += " { keyword: '" + ($errorKeyword || "type") + "' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: { type: '";
                  if ($typeIsArray) {
                    out += "" + $typeSchema.join(",");
                  } else {
                    out += "" + $typeSchema;
                  }
                  out += "' } ";
                  if (it.opts.messages !== false) {
                    out += " , message: 'should be ";
                    if ($typeIsArray) {
                      out += "" + $typeSchema.join(",");
                    } else {
                      out += "" + $typeSchema;
                    }
                    out += "' ";
                  }
                  if (it.opts.verbose) {
                    out += " , schema: validate.schema" + $schemaPath + " , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
                  }
                  out += " } ";
                } else {
                  out += " {} ";
                }
                var __err = out;
                out = $$outStack.pop();
                if (!it.compositeRule && $breakOnError) {
                  if (it.async) {
                    out += " throw new ValidationError([" + __err + "]); ";
                  } else {
                    out += " validate.errors = [" + __err + "]; return false; ";
                  }
                } else {
                  out += " var err = " + __err + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
                }
                out += " } ";
              }
            }
            if ($breakOnError) {
              out += " if (errors === ";
              if ($top) {
                out += "0";
              } else {
                out += "errs_" + $lvl;
              }
              out += ") { ";
              $closingBraces2 += "}";
            }
          }
        }
      }
    }
    if ($breakOnError) {
      out += " " + $closingBraces2 + " ";
    }
    if ($top) {
      if ($async) {
        out += " if (errors === 0) return data;           ";
        out += " else throw new ValidationError(vErrors); ";
      } else {
        out += " validate.errors = vErrors; ";
        out += " return errors === 0;       ";
      }
      out += " }; return validate;";
    } else {
      out += " var " + $valid + " = errors === errs_" + $lvl + ";";
    }
    function $shouldUseGroup($rulesGroup2) {
      var rules = $rulesGroup2.rules;
      for (var i = 0;i < rules.length; i++)
        if ($shouldUseRule(rules[i]))
          return true;
    }
    function $shouldUseRule($rule2) {
      return it.schema[$rule2.keyword] !== undefined || $rule2.implements && $ruleImplementsSomeKeyword($rule2);
    }
    function $ruleImplementsSomeKeyword($rule2) {
      var impl = $rule2.implements;
      for (var i = 0;i < impl.length; i++)
        if (it.schema[impl[i]] !== undefined)
          return true;
    }
    return out;
  };
});

// node_modules/ajv/lib/compile/index.js
var require_compile = __commonJS((exports, module) => {
  var resolve = require_resolve();
  var util3 = require_util();
  var errorClasses = require_error_classes();
  var stableStringify = require_fast_json_stable_stringify();
  var validateGenerator = require_validate();
  var ucs2length = util3.ucs2length;
  var equal = require_fast_deep_equal();
  var ValidationError = errorClasses.Validation;
  module.exports = compile;
  function compile(schema, root, localRefs, baseId) {
    var self2 = this, opts = this._opts, refVal = [undefined], refs = {}, patterns = [], patternsHash = {}, defaults = [], defaultsHash = {}, customRules = [];
    root = root || { schema, refVal, refs };
    var c = checkCompiling.call(this, schema, root, baseId);
    var compilation = this._compilations[c.index];
    if (c.compiling)
      return compilation.callValidate = callValidate;
    var formats = this._formats;
    var RULES = this.RULES;
    try {
      var v = localCompile(schema, root, localRefs, baseId);
      compilation.validate = v;
      var cv = compilation.callValidate;
      if (cv) {
        cv.schema = v.schema;
        cv.errors = null;
        cv.refs = v.refs;
        cv.refVal = v.refVal;
        cv.root = v.root;
        cv.$async = v.$async;
        if (opts.sourceCode)
          cv.source = v.source;
      }
      return v;
    } finally {
      endCompiling.call(this, schema, root, baseId);
    }
    function callValidate() {
      var validate = compilation.validate;
      var result = validate.apply(this, arguments);
      callValidate.errors = validate.errors;
      return result;
    }
    function localCompile(_schema, _root, localRefs2, baseId2) {
      var isRoot = !_root || _root && _root.schema == _schema;
      if (_root.schema != root.schema)
        return compile.call(self2, _schema, _root, localRefs2, baseId2);
      var $async = _schema.$async === true;
      var sourceCode = validateGenerator({
        isTop: true,
        schema: _schema,
        isRoot,
        baseId: baseId2,
        root: _root,
        schemaPath: "",
        errSchemaPath: "#",
        errorPath: '""',
        MissingRefError: errorClasses.MissingRef,
        RULES,
        validate: validateGenerator,
        util: util3,
        resolve,
        resolveRef,
        usePattern,
        useDefault,
        useCustomRule,
        opts,
        formats,
        logger: self2.logger,
        self: self2
      });
      sourceCode = vars(refVal, refValCode) + vars(patterns, patternCode) + vars(defaults, defaultCode) + vars(customRules, customRuleCode) + sourceCode;
      if (opts.processCode)
        sourceCode = opts.processCode(sourceCode, _schema);
      var validate;
      try {
        var makeValidate = new Function("self", "RULES", "formats", "root", "refVal", "defaults", "customRules", "equal", "ucs2length", "ValidationError", sourceCode);
        validate = makeValidate(self2, RULES, formats, root, refVal, defaults, customRules, equal, ucs2length, ValidationError);
        refVal[0] = validate;
      } catch (e) {
        self2.logger.error("Error compiling schema, function code:", sourceCode);
        throw e;
      }
      validate.schema = _schema;
      validate.errors = null;
      validate.refs = refs;
      validate.refVal = refVal;
      validate.root = isRoot ? validate : _root;
      if ($async)
        validate.$async = true;
      if (opts.sourceCode === true) {
        validate.source = {
          code: sourceCode,
          patterns,
          defaults
        };
      }
      return validate;
    }
    function resolveRef(baseId2, ref, isRoot) {
      ref = resolve.url(baseId2, ref);
      var refIndex = refs[ref];
      var _refVal, refCode;
      if (refIndex !== undefined) {
        _refVal = refVal[refIndex];
        refCode = "refVal[" + refIndex + "]";
        return resolvedRef(_refVal, refCode);
      }
      if (!isRoot && root.refs) {
        var rootRefId = root.refs[ref];
        if (rootRefId !== undefined) {
          _refVal = root.refVal[rootRefId];
          refCode = addLocalRef(ref, _refVal);
          return resolvedRef(_refVal, refCode);
        }
      }
      refCode = addLocalRef(ref);
      var v2 = resolve.call(self2, localCompile, root, ref);
      if (v2 === undefined) {
        var localSchema = localRefs && localRefs[ref];
        if (localSchema) {
          v2 = resolve.inlineRef(localSchema, opts.inlineRefs) ? localSchema : compile.call(self2, localSchema, root, localRefs, baseId2);
        }
      }
      if (v2 === undefined) {
        removeLocalRef(ref);
      } else {
        replaceLocalRef(ref, v2);
        return resolvedRef(v2, refCode);
      }
    }
    function addLocalRef(ref, v2) {
      var refId = refVal.length;
      refVal[refId] = v2;
      refs[ref] = refId;
      return "refVal" + refId;
    }
    function removeLocalRef(ref) {
      delete refs[ref];
    }
    function replaceLocalRef(ref, v2) {
      var refId = refs[ref];
      refVal[refId] = v2;
    }
    function resolvedRef(refVal2, code) {
      return typeof refVal2 == "object" || typeof refVal2 == "boolean" ? { code, schema: refVal2, inline: true } : { code, $async: refVal2 && !!refVal2.$async };
    }
    function usePattern(regexStr) {
      var index = patternsHash[regexStr];
      if (index === undefined) {
        index = patternsHash[regexStr] = patterns.length;
        patterns[index] = regexStr;
      }
      return "pattern" + index;
    }
    function useDefault(value) {
      switch (typeof value) {
        case "boolean":
        case "number":
          return "" + value;
        case "string":
          return util3.toQuotedString(value);
        case "object":
          if (value === null)
            return "null";
          var valueStr = stableStringify(value);
          var index = defaultsHash[valueStr];
          if (index === undefined) {
            index = defaultsHash[valueStr] = defaults.length;
            defaults[index] = value;
          }
          return "default" + index;
      }
    }
    function useCustomRule(rule, schema2, parentSchema, it) {
      if (self2._opts.validateSchema !== false) {
        var deps = rule.definition.dependencies;
        if (deps && !deps.every(function(keyword) {
          return Object.prototype.hasOwnProperty.call(parentSchema, keyword);
        }))
          throw new Error("parent schema must have all required keywords: " + deps.join(","));
        var validateSchema = rule.definition.validateSchema;
        if (validateSchema) {
          var valid = validateSchema(schema2);
          if (!valid) {
            var message = "keyword schema is invalid: " + self2.errorsText(validateSchema.errors);
            if (self2._opts.validateSchema == "log")
              self2.logger.error(message);
            else
              throw new Error(message);
          }
        }
      }
      var compile2 = rule.definition.compile, inline = rule.definition.inline, macro = rule.definition.macro;
      var validate;
      if (compile2) {
        validate = compile2.call(self2, schema2, parentSchema, it);
      } else if (macro) {
        validate = macro.call(self2, schema2, parentSchema, it);
        if (opts.validateSchema !== false)
          self2.validateSchema(validate, true);
      } else if (inline) {
        validate = inline.call(self2, it, rule.keyword, schema2, parentSchema);
      } else {
        validate = rule.definition.validate;
        if (!validate)
          return;
      }
      if (validate === undefined)
        throw new Error('custom keyword "' + rule.keyword + '"failed to compile');
      var index = customRules.length;
      customRules[index] = validate;
      return {
        code: "customRule" + index,
        validate
      };
    }
  }
  function checkCompiling(schema, root, baseId) {
    var index = compIndex.call(this, schema, root, baseId);
    if (index >= 0)
      return { index, compiling: true };
    index = this._compilations.length;
    this._compilations[index] = {
      schema,
      root,
      baseId
    };
    return { index, compiling: false };
  }
  function endCompiling(schema, root, baseId) {
    var i = compIndex.call(this, schema, root, baseId);
    if (i >= 0)
      this._compilations.splice(i, 1);
  }
  function compIndex(schema, root, baseId) {
    for (var i = 0;i < this._compilations.length; i++) {
      var c = this._compilations[i];
      if (c.schema == schema && c.root == root && c.baseId == baseId)
        return i;
    }
    return -1;
  }
  function patternCode(i, patterns) {
    return "var pattern" + i + " = new RegExp(" + util3.toQuotedString(patterns[i]) + ");";
  }
  function defaultCode(i) {
    return "var default" + i + " = defaults[" + i + "];";
  }
  function refValCode(i, refVal) {
    return refVal[i] === undefined ? "" : "var refVal" + i + " = refVal[" + i + "];";
  }
  function customRuleCode(i) {
    return "var customRule" + i + " = customRules[" + i + "];";
  }
  function vars(arr, statement) {
    if (!arr.length)
      return "";
    var code = "";
    for (var i = 0;i < arr.length; i++)
      code += statement(i, arr);
    return code;
  }
});

// node_modules/ajv/lib/cache.js
var require_cache = __commonJS((exports, module) => {
  var Cache = module.exports = function Cache() {
    this._cache = {};
  };
  Cache.prototype.put = function Cache_put(key, value) {
    this._cache[key] = value;
  };
  Cache.prototype.get = function Cache_get(key) {
    return this._cache[key];
  };
  Cache.prototype.del = function Cache_del(key) {
    delete this._cache[key];
  };
  Cache.prototype.clear = function Cache_clear() {
    this._cache = {};
  };
});

// node_modules/ajv/lib/compile/formats.js
var require_formats = __commonJS((exports, module) => {
  var util3 = require_util();
  var DATE = /^(\d\d\d\d)-(\d\d)-(\d\d)$/;
  var DAYS = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
  var TIME = /^(\d\d):(\d\d):(\d\d)(\.\d+)?(z|[+-]\d\d(?::?\d\d)?)?$/i;
  var HOSTNAME = /^(?=.{1,253}\.?$)[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?(?:\.[a-z0-9](?:[-0-9a-z]{0,61}[0-9a-z])?)*\.?$/i;
  var URI = /^(?:[a-z][a-z0-9+\-.]*:)(?:\/?\/(?:(?:[a-z0-9\-._~!$&'()*+,;=:]|%[0-9a-f]{2})*@)?(?:\[(?:(?:(?:(?:[0-9a-f]{1,4}:){6}|::(?:[0-9a-f]{1,4}:){5}|(?:[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){4}|(?:(?:[0-9a-f]{1,4}:){0,1}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){3}|(?:(?:[0-9a-f]{1,4}:){0,2}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){2}|(?:(?:[0-9a-f]{1,4}:){0,3}[0-9a-f]{1,4})?::[0-9a-f]{1,4}:|(?:(?:[0-9a-f]{1,4}:){0,4}[0-9a-f]{1,4})?::)(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?))|(?:(?:[0-9a-f]{1,4}:){0,5}[0-9a-f]{1,4})?::[0-9a-f]{1,4}|(?:(?:[0-9a-f]{1,4}:){0,6}[0-9a-f]{1,4})?::)|[Vv][0-9a-f]+\.[a-z0-9\-._~!$&'()*+,;=:]+)\]|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)|(?:[a-z0-9\-._~!$&'()*+,;=]|%[0-9a-f]{2})*)(?::\d*)?(?:\/(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*|\/(?:(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*)?|(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'()*+,;=:@]|%[0-9a-f]{2})*)*)(?:\?(?:[a-z0-9\-._~!$&'()*+,;=:@/?]|%[0-9a-f]{2})*)?(?:#(?:[a-z0-9\-._~!$&'()*+,;=:@/?]|%[0-9a-f]{2})*)?$/i;
  var URIREF = /^(?:[a-z][a-z0-9+\-.]*:)?(?:\/?\/(?:(?:[a-z0-9\-._~!$&'()*+,;=:]|%[0-9a-f]{2})*@)?(?:\[(?:(?:(?:(?:[0-9a-f]{1,4}:){6}|::(?:[0-9a-f]{1,4}:){5}|(?:[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){4}|(?:(?:[0-9a-f]{1,4}:){0,1}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){3}|(?:(?:[0-9a-f]{1,4}:){0,2}[0-9a-f]{1,4})?::(?:[0-9a-f]{1,4}:){2}|(?:(?:[0-9a-f]{1,4}:){0,3}[0-9a-f]{1,4})?::[0-9a-f]{1,4}:|(?:(?:[0-9a-f]{1,4}:){0,4}[0-9a-f]{1,4})?::)(?:[0-9a-f]{1,4}:[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?))|(?:(?:[0-9a-f]{1,4}:){0,5}[0-9a-f]{1,4})?::[0-9a-f]{1,4}|(?:(?:[0-9a-f]{1,4}:){0,6}[0-9a-f]{1,4})?::)|[Vv][0-9a-f]+\.[a-z0-9\-._~!$&'()*+,;=:]+)\]|(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)|(?:[a-z0-9\-._~!$&'"()*+,;=]|%[0-9a-f]{2})*)(?::\d*)?(?:\/(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})*)*|\/(?:(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})*)*)?|(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})+(?:\/(?:[a-z0-9\-._~!$&'"()*+,;=:@]|%[0-9a-f]{2})*)*)?(?:\?(?:[a-z0-9\-._~!$&'"()*+,;=:@/?]|%[0-9a-f]{2})*)?(?:#(?:[a-z0-9\-._~!$&'"()*+,;=:@/?]|%[0-9a-f]{2})*)?$/i;
  var URITEMPLATE = /^(?:(?:[^\x00-\x20"'<>%\\^`{|}]|%[0-9a-f]{2})|\{[+#./;?&=,!@|]?(?:[a-z0-9_]|%[0-9a-f]{2})+(?::[1-9][0-9]{0,3}|\*)?(?:,(?:[a-z0-9_]|%[0-9a-f]{2})+(?::[1-9][0-9]{0,3}|\*)?)*\})*$/i;
  var URL2 = /^(?:(?:http[s\u017F]?|ftp):\/\/)(?:(?:[\0-\x08\x0E-\x1F!-\x9F\xA1-\u167F\u1681-\u1FFF\u200B-\u2027\u202A-\u202E\u2030-\u205E\u2060-\u2FFF\u3001-\uD7FF\uE000-\uFEFE\uFF00-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])+(?::(?:[\0-\x08\x0E-\x1F!-\x9F\xA1-\u167F\u1681-\u1FFF\u200B-\u2027\u202A-\u202E\u2030-\u205E\u2060-\u2FFF\u3001-\uD7FF\uE000-\uFEFE\uFF00-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])*)?@)?(?:(?!10(?:\.[0-9]{1,3}){3})(?!127(?:\.[0-9]{1,3}){3})(?!169\.254(?:\.[0-9]{1,3}){2})(?!192\.168(?:\.[0-9]{1,3}){2})(?!172\.(?:1[6-9]|2[0-9]|3[01])(?:\.[0-9]{1,3}){2})(?:[1-9][0-9]?|1[0-9][0-9]|2[01][0-9]|22[0-3])(?:\.(?:1?[0-9]{1,2}|2[0-4][0-9]|25[0-5])){2}(?:\.(?:[1-9][0-9]?|1[0-9][0-9]|2[0-4][0-9]|25[0-4]))|(?:(?:(?:[0-9a-z\xA1-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])+-)*(?:[0-9a-z\xA1-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])+)(?:\.(?:(?:[0-9a-z\xA1-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])+-)*(?:[0-9a-z\xA1-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])+)*(?:\.(?:(?:[a-z\xA1-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]){2,})))(?::[0-9]{2,5})?(?:\/(?:[\0-\x08\x0E-\x1F!-\x9F\xA1-\u167F\u1681-\u1FFF\u200B-\u2027\u202A-\u202E\u2030-\u205E\u2060-\u2FFF\u3001-\uD7FF\uE000-\uFEFE\uFF00-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])*)?$/i;
  var UUID = /^(?:urn:uuid:)?[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/i;
  var JSON_POINTER = /^(?:\/(?:[^~/]|~0|~1)*)*$/;
  var JSON_POINTER_URI_FRAGMENT = /^#(?:\/(?:[a-z0-9_\-.!$&'()*+,;:=@]|%[0-9a-f]{2}|~0|~1)*)*$/i;
  var RELATIVE_JSON_POINTER = /^(?:0|[1-9][0-9]*)(?:#|(?:\/(?:[^~/]|~0|~1)*)*)$/;
  module.exports = formats;
  function formats(mode) {
    mode = mode == "full" ? "full" : "fast";
    return util3.copy(formats[mode]);
  }
  formats.fast = {
    date: /^\d\d\d\d-[0-1]\d-[0-3]\d$/,
    time: /^(?:[0-2]\d:[0-5]\d:[0-5]\d|23:59:60)(?:\.\d+)?(?:z|[+-]\d\d(?::?\d\d)?)?$/i,
    "date-time": /^\d\d\d\d-[0-1]\d-[0-3]\d[t\s](?:[0-2]\d:[0-5]\d:[0-5]\d|23:59:60)(?:\.\d+)?(?:z|[+-]\d\d(?::?\d\d)?)$/i,
    uri: /^(?:[a-z][a-z0-9+\-.]*:)(?:\/?\/)?[^\s]*$/i,
    "uri-reference": /^(?:(?:[a-z][a-z0-9+\-.]*:)?\/?\/)?(?:[^\\\s#][^\s#]*)?(?:#[^\\\s]*)?$/i,
    "uri-template": URITEMPLATE,
    url: URL2,
    email: /^[a-z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?(?:\.[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?)*$/i,
    hostname: HOSTNAME,
    ipv4: /^(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)$/,
    ipv6: /^\s*(?:(?:(?:[0-9a-f]{1,4}:){7}(?:[0-9a-f]{1,4}|:))|(?:(?:[0-9a-f]{1,4}:){6}(?::[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(?:(?:[0-9a-f]{1,4}:){5}(?:(?:(?::[0-9a-f]{1,4}){1,2})|:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(?:(?:[0-9a-f]{1,4}:){4}(?:(?:(?::[0-9a-f]{1,4}){1,3})|(?:(?::[0-9a-f]{1,4})?:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){3}(?:(?:(?::[0-9a-f]{1,4}){1,4})|(?:(?::[0-9a-f]{1,4}){0,2}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){2}(?:(?:(?::[0-9a-f]{1,4}){1,5})|(?:(?::[0-9a-f]{1,4}){0,3}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){1}(?:(?:(?::[0-9a-f]{1,4}){1,6})|(?:(?::[0-9a-f]{1,4}){0,4}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?::(?:(?:(?::[0-9a-f]{1,4}){1,7})|(?:(?::[0-9a-f]{1,4}){0,5}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(?:%.+)?\s*$/i,
    regex,
    uuid: UUID,
    "json-pointer": JSON_POINTER,
    "json-pointer-uri-fragment": JSON_POINTER_URI_FRAGMENT,
    "relative-json-pointer": RELATIVE_JSON_POINTER
  };
  formats.full = {
    date,
    time,
    "date-time": date_time,
    uri,
    "uri-reference": URIREF,
    "uri-template": URITEMPLATE,
    url: URL2,
    email: /^[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?$/i,
    hostname: HOSTNAME,
    ipv4: /^(?:(?:25[0-5]|2[0-4]\d|[01]?\d\d?)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d\d?)$/,
    ipv6: /^\s*(?:(?:(?:[0-9a-f]{1,4}:){7}(?:[0-9a-f]{1,4}|:))|(?:(?:[0-9a-f]{1,4}:){6}(?::[0-9a-f]{1,4}|(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(?:(?:[0-9a-f]{1,4}:){5}(?:(?:(?::[0-9a-f]{1,4}){1,2})|:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(?:(?:[0-9a-f]{1,4}:){4}(?:(?:(?::[0-9a-f]{1,4}){1,3})|(?:(?::[0-9a-f]{1,4})?:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){3}(?:(?:(?::[0-9a-f]{1,4}){1,4})|(?:(?::[0-9a-f]{1,4}){0,2}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){2}(?:(?:(?::[0-9a-f]{1,4}){1,5})|(?:(?::[0-9a-f]{1,4}){0,3}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?:(?:[0-9a-f]{1,4}:){1}(?:(?:(?::[0-9a-f]{1,4}){1,6})|(?:(?::[0-9a-f]{1,4}){0,4}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(?::(?:(?:(?::[0-9a-f]{1,4}){1,7})|(?:(?::[0-9a-f]{1,4}){0,5}:(?:(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(?:\.(?:25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(?:%.+)?\s*$/i,
    regex,
    uuid: UUID,
    "json-pointer": JSON_POINTER,
    "json-pointer-uri-fragment": JSON_POINTER_URI_FRAGMENT,
    "relative-json-pointer": RELATIVE_JSON_POINTER
  };
  function isLeapYear(year) {
    return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);
  }
  function date(str) {
    var matches = str.match(DATE);
    if (!matches)
      return false;
    var year = +matches[1];
    var month = +matches[2];
    var day = +matches[3];
    return month >= 1 && month <= 12 && day >= 1 && day <= (month == 2 && isLeapYear(year) ? 29 : DAYS[month]);
  }
  function time(str, full) {
    var matches = str.match(TIME);
    if (!matches)
      return false;
    var hour = matches[1];
    var minute = matches[2];
    var second = matches[3];
    var timeZone = matches[5];
    return (hour <= 23 && minute <= 59 && second <= 59 || hour == 23 && minute == 59 && second == 60) && (!full || timeZone);
  }
  var DATE_TIME_SEPARATOR = /t|\s/i;
  function date_time(str) {
    var dateTime = str.split(DATE_TIME_SEPARATOR);
    return dateTime.length == 2 && date(dateTime[0]) && time(dateTime[1], true);
  }
  var NOT_URI_FRAGMENT = /\/|:/;
  function uri(str) {
    return NOT_URI_FRAGMENT.test(str) && URI.test(str);
  }
  var Z_ANCHOR = /[^\\]\\Z/;
  function regex(str) {
    if (Z_ANCHOR.test(str))
      return false;
    try {
      new RegExp(str);
      return true;
    } catch (e) {
      return false;
    }
  }
});

// node_modules/ajv/lib/dotjs/ref.js
var require_ref = __commonJS((exports, module) => {
  module.exports = function generate_ref(it, $keyword, $ruleType) {
    var out = " ";
    var $lvl = it.level;
    var $dataLvl = it.dataLevel;
    var $schema = it.schema[$keyword];
    var $errSchemaPath = it.errSchemaPath + "/" + $keyword;
    var $breakOnError = !it.opts.allErrors;
    var $data = "data" + ($dataLvl || "");
    var $valid = "valid" + $lvl;
    var $async, $refCode;
    if ($schema == "#" || $schema == "#/") {
      if (it.isRoot) {
        $async = it.async;
        $refCode = "validate";
      } else {
        $async = it.root.schema.$async === true;
        $refCode = "root.refVal[0]";
      }
    } else {
      var $refVal = it.resolveRef(it.baseId, $schema, it.isRoot);
      if ($refVal === undefined) {
        var $message = it.MissingRefError.message(it.baseId, $schema);
        if (it.opts.missingRefs == "fail") {
          it.logger.error($message);
          var $$outStack = $$outStack || [];
          $$outStack.push(out);
          out = "";
          if (it.createErrors !== false) {
            out += " { keyword: '" + "$ref" + "' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: { ref: '" + it.util.escapeQuotes($schema) + "' } ";
            if (it.opts.messages !== false) {
              out += " , message: 'can\\'t resolve reference " + it.util.escapeQuotes($schema) + "' ";
            }
            if (it.opts.verbose) {
              out += " , schema: " + it.util.toQuotedString($schema) + " , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
            }
            out += " } ";
          } else {
            out += " {} ";
          }
          var __err = out;
          out = $$outStack.pop();
          if (!it.compositeRule && $breakOnError) {
            if (it.async) {
              out += " throw new ValidationError([" + __err + "]); ";
            } else {
              out += " validate.errors = [" + __err + "]; return false; ";
            }
          } else {
            out += " var err = " + __err + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
          }
          if ($breakOnError) {
            out += " if (false) { ";
          }
        } else if (it.opts.missingRefs == "ignore") {
          it.logger.warn($message);
          if ($breakOnError) {
            out += " if (true) { ";
          }
        } else {
          throw new it.MissingRefError(it.baseId, $schema, $message);
        }
      } else if ($refVal.inline) {
        var $it = it.util.copy(it);
        $it.level++;
        var $nextValid = "valid" + $it.level;
        $it.schema = $refVal.schema;
        $it.schemaPath = "";
        $it.errSchemaPath = $schema;
        var $code = it.validate($it).replace(/validate\.schema/g, $refVal.code);
        out += " " + $code + " ";
        if ($breakOnError) {
          out += " if (" + $nextValid + ") { ";
        }
      } else {
        $async = $refVal.$async === true || it.async && $refVal.$async !== false;
        $refCode = $refVal.code;
      }
    }
    if ($refCode) {
      var $$outStack = $$outStack || [];
      $$outStack.push(out);
      out = "";
      if (it.opts.passContext) {
        out += " " + $refCode + ".call(this, ";
      } else {
        out += " " + $refCode + "( ";
      }
      out += " " + $data + ", (dataPath || '')";
      if (it.errorPath != '""') {
        out += " + " + it.errorPath;
      }
      var $parentData = $dataLvl ? "data" + ($dataLvl - 1 || "") : "parentData", $parentDataProperty = $dataLvl ? it.dataPathArr[$dataLvl] : "parentDataProperty";
      out += " , " + $parentData + " , " + $parentDataProperty + ", rootData)  ";
      var __callValidate = out;
      out = $$outStack.pop();
      if ($async) {
        if (!it.async)
          throw new Error("async schema referenced by sync schema");
        if ($breakOnError) {
          out += " var " + $valid + "; ";
        }
        out += " try { await " + __callValidate + "; ";
        if ($breakOnError) {
          out += " " + $valid + " = true; ";
        }
        out += " } catch (e) { if (!(e instanceof ValidationError)) throw e; if (vErrors === null) vErrors = e.errors; else vErrors = vErrors.concat(e.errors); errors = vErrors.length; ";
        if ($breakOnError) {
          out += " " + $valid + " = false; ";
        }
        out += " } ";
        if ($breakOnError) {
          out += " if (" + $valid + ") { ";
        }
      } else {
        out += " if (!" + __callValidate + ") { if (vErrors === null) vErrors = " + $refCode + ".errors; else vErrors = vErrors.concat(" + $refCode + ".errors); errors = vErrors.length; } ";
        if ($breakOnError) {
          out += " else { ";
        }
      }
    }
    return out;
  };
});

// node_modules/ajv/lib/dotjs/allOf.js
var require_allOf = __commonJS((exports, module) => {
  module.exports = function generate_allOf(it, $keyword, $ruleType) {
    var out = " ";
    var $schema = it.schema[$keyword];
    var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
    var $errSchemaPath = it.errSchemaPath + "/" + $keyword;
    var $breakOnError = !it.opts.allErrors;
    var $it = it.util.copy(it);
    var $closingBraces = "";
    $it.level++;
    var $nextValid = "valid" + $it.level;
    var $currentBaseId = $it.baseId, $allSchemasEmpty = true;
    var arr1 = $schema;
    if (arr1) {
      var $sch, $i = -1, l1 = arr1.length - 1;
      while ($i < l1) {
        $sch = arr1[$i += 1];
        if (it.opts.strictKeywords ? typeof $sch == "object" && Object.keys($sch).length > 0 || $sch === false : it.util.schemaHasRules($sch, it.RULES.all)) {
          $allSchemasEmpty = false;
          $it.schema = $sch;
          $it.schemaPath = $schemaPath + "[" + $i + "]";
          $it.errSchemaPath = $errSchemaPath + "/" + $i;
          out += "  " + it.validate($it) + " ";
          $it.baseId = $currentBaseId;
          if ($breakOnError) {
            out += " if (" + $nextValid + ") { ";
            $closingBraces += "}";
          }
        }
      }
    }
    if ($breakOnError) {
      if ($allSchemasEmpty) {
        out += " if (true) { ";
      } else {
        out += " " + $closingBraces.slice(0, -1) + " ";
      }
    }
    return out;
  };
});

// node_modules/ajv/lib/dotjs/anyOf.js
var require_anyOf = __commonJS((exports, module) => {
  module.exports = function generate_anyOf(it, $keyword, $ruleType) {
    var out = " ";
    var $lvl = it.level;
    var $dataLvl = it.dataLevel;
    var $schema = it.schema[$keyword];
    var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
    var $errSchemaPath = it.errSchemaPath + "/" + $keyword;
    var $breakOnError = !it.opts.allErrors;
    var $data = "data" + ($dataLvl || "");
    var $valid = "valid" + $lvl;
    var $errs = "errs__" + $lvl;
    var $it = it.util.copy(it);
    var $closingBraces = "";
    $it.level++;
    var $nextValid = "valid" + $it.level;
    var $noEmptySchema = $schema.every(function($sch2) {
      return it.opts.strictKeywords ? typeof $sch2 == "object" && Object.keys($sch2).length > 0 || $sch2 === false : it.util.schemaHasRules($sch2, it.RULES.all);
    });
    if ($noEmptySchema) {
      var $currentBaseId = $it.baseId;
      out += " var " + $errs + " = errors; var " + $valid + " = false;  ";
      var $wasComposite = it.compositeRule;
      it.compositeRule = $it.compositeRule = true;
      var arr1 = $schema;
      if (arr1) {
        var $sch, $i = -1, l1 = arr1.length - 1;
        while ($i < l1) {
          $sch = arr1[$i += 1];
          $it.schema = $sch;
          $it.schemaPath = $schemaPath + "[" + $i + "]";
          $it.errSchemaPath = $errSchemaPath + "/" + $i;
          out += "  " + it.validate($it) + " ";
          $it.baseId = $currentBaseId;
          out += " " + $valid + " = " + $valid + " || " + $nextValid + "; if (!" + $valid + ") { ";
          $closingBraces += "}";
        }
      }
      it.compositeRule = $it.compositeRule = $wasComposite;
      out += " " + $closingBraces + " if (!" + $valid + ") {   var err =   ";
      if (it.createErrors !== false) {
        out += " { keyword: '" + "anyOf" + "' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: {} ";
        if (it.opts.messages !== false) {
          out += " , message: 'should match some schema in anyOf' ";
        }
        if (it.opts.verbose) {
          out += " , schema: validate.schema" + $schemaPath + " , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
        }
        out += " } ";
      } else {
        out += " {} ";
      }
      out += ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
      if (!it.compositeRule && $breakOnError) {
        if (it.async) {
          out += " throw new ValidationError(vErrors); ";
        } else {
          out += " validate.errors = vErrors; return false; ";
        }
      }
      out += " } else {  errors = " + $errs + "; if (vErrors !== null) { if (" + $errs + ") vErrors.length = " + $errs + "; else vErrors = null; } ";
      if (it.opts.allErrors) {
        out += " } ";
      }
    } else {
      if ($breakOnError) {
        out += " if (true) { ";
      }
    }
    return out;
  };
});

// node_modules/ajv/lib/dotjs/comment.js
var require_comment = __commonJS((exports, module) => {
  module.exports = function generate_comment(it, $keyword, $ruleType) {
    var out = " ";
    var $schema = it.schema[$keyword];
    var $errSchemaPath = it.errSchemaPath + "/" + $keyword;
    var $breakOnError = !it.opts.allErrors;
    var $comment = it.util.toQuotedString($schema);
    if (it.opts.$comment === true) {
      out += " console.log(" + $comment + ");";
    } else if (typeof it.opts.$comment == "function") {
      out += " self._opts.$comment(" + $comment + ", " + it.util.toQuotedString($errSchemaPath) + ", validate.root.schema);";
    }
    return out;
  };
});

// node_modules/ajv/lib/dotjs/const.js
var require_const = __commonJS((exports, module) => {
  module.exports = function generate_const(it, $keyword, $ruleType) {
    var out = " ";
    var $lvl = it.level;
    var $dataLvl = it.dataLevel;
    var $schema = it.schema[$keyword];
    var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
    var $errSchemaPath = it.errSchemaPath + "/" + $keyword;
    var $breakOnError = !it.opts.allErrors;
    var $data = "data" + ($dataLvl || "");
    var $valid = "valid" + $lvl;
    var $isData = it.opts.$data && $schema && $schema.$data, $schemaValue;
    if ($isData) {
      out += " var schema" + $lvl + " = " + it.util.getData($schema.$data, $dataLvl, it.dataPathArr) + "; ";
      $schemaValue = "schema" + $lvl;
    } else {
      $schemaValue = $schema;
    }
    if (!$isData) {
      out += " var schema" + $lvl + " = validate.schema" + $schemaPath + ";";
    }
    out += "var " + $valid + " = equal(" + $data + ", schema" + $lvl + "); if (!" + $valid + ") {   ";
    var $$outStack = $$outStack || [];
    $$outStack.push(out);
    out = "";
    if (it.createErrors !== false) {
      out += " { keyword: '" + "const" + "' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: { allowedValue: schema" + $lvl + " } ";
      if (it.opts.messages !== false) {
        out += " , message: 'should be equal to constant' ";
      }
      if (it.opts.verbose) {
        out += " , schema: validate.schema" + $schemaPath + " , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
      }
      out += " } ";
    } else {
      out += " {} ";
    }
    var __err = out;
    out = $$outStack.pop();
    if (!it.compositeRule && $breakOnError) {
      if (it.async) {
        out += " throw new ValidationError([" + __err + "]); ";
      } else {
        out += " validate.errors = [" + __err + "]; return false; ";
      }
    } else {
      out += " var err = " + __err + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
    }
    out += " }";
    if ($breakOnError) {
      out += " else { ";
    }
    return out;
  };
});

// node_modules/ajv/lib/dotjs/contains.js
var require_contains = __commonJS((exports, module) => {
  module.exports = function generate_contains(it, $keyword, $ruleType) {
    var out = " ";
    var $lvl = it.level;
    var $dataLvl = it.dataLevel;
    var $schema = it.schema[$keyword];
    var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
    var $errSchemaPath = it.errSchemaPath + "/" + $keyword;
    var $breakOnError = !it.opts.allErrors;
    var $data = "data" + ($dataLvl || "");
    var $valid = "valid" + $lvl;
    var $errs = "errs__" + $lvl;
    var $it = it.util.copy(it);
    var $closingBraces = "";
    $it.level++;
    var $nextValid = "valid" + $it.level;
    var $idx = "i" + $lvl, $dataNxt = $it.dataLevel = it.dataLevel + 1, $nextData = "data" + $dataNxt, $currentBaseId = it.baseId, $nonEmptySchema = it.opts.strictKeywords ? typeof $schema == "object" && Object.keys($schema).length > 0 || $schema === false : it.util.schemaHasRules($schema, it.RULES.all);
    out += "var " + $errs + " = errors;var " + $valid + ";";
    if ($nonEmptySchema) {
      var $wasComposite = it.compositeRule;
      it.compositeRule = $it.compositeRule = true;
      $it.schema = $schema;
      $it.schemaPath = $schemaPath;
      $it.errSchemaPath = $errSchemaPath;
      out += " var " + $nextValid + " = false; for (var " + $idx + " = 0; " + $idx + " < " + $data + ".length; " + $idx + "++) { ";
      $it.errorPath = it.util.getPathExpr(it.errorPath, $idx, it.opts.jsonPointers, true);
      var $passData = $data + "[" + $idx + "]";
      $it.dataPathArr[$dataNxt] = $idx;
      var $code = it.validate($it);
      $it.baseId = $currentBaseId;
      if (it.util.varOccurences($code, $nextData) < 2) {
        out += " " + it.util.varReplace($code, $nextData, $passData) + " ";
      } else {
        out += " var " + $nextData + " = " + $passData + "; " + $code + " ";
      }
      out += " if (" + $nextValid + ") break; }  ";
      it.compositeRule = $it.compositeRule = $wasComposite;
      out += " " + $closingBraces + " if (!" + $nextValid + ") {";
    } else {
      out += " if (" + $data + ".length == 0) {";
    }
    var $$outStack = $$outStack || [];
    $$outStack.push(out);
    out = "";
    if (it.createErrors !== false) {
      out += " { keyword: '" + "contains" + "' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: {} ";
      if (it.opts.messages !== false) {
        out += " , message: 'should contain a valid item' ";
      }
      if (it.opts.verbose) {
        out += " , schema: validate.schema" + $schemaPath + " , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
      }
      out += " } ";
    } else {
      out += " {} ";
    }
    var __err = out;
    out = $$outStack.pop();
    if (!it.compositeRule && $breakOnError) {
      if (it.async) {
        out += " throw new ValidationError([" + __err + "]); ";
      } else {
        out += " validate.errors = [" + __err + "]; return false; ";
      }
    } else {
      out += " var err = " + __err + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
    }
    out += " } else { ";
    if ($nonEmptySchema) {
      out += "  errors = " + $errs + "; if (vErrors !== null) { if (" + $errs + ") vErrors.length = " + $errs + "; else vErrors = null; } ";
    }
    if (it.opts.allErrors) {
      out += " } ";
    }
    return out;
  };
});

// node_modules/ajv/lib/dotjs/dependencies.js
var require_dependencies = __commonJS((exports, module) => {
  module.exports = function generate_dependencies(it, $keyword, $ruleType) {
    var out = " ";
    var $lvl = it.level;
    var $dataLvl = it.dataLevel;
    var $schema = it.schema[$keyword];
    var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
    var $errSchemaPath = it.errSchemaPath + "/" + $keyword;
    var $breakOnError = !it.opts.allErrors;
    var $data = "data" + ($dataLvl || "");
    var $errs = "errs__" + $lvl;
    var $it = it.util.copy(it);
    var $closingBraces = "";
    $it.level++;
    var $nextValid = "valid" + $it.level;
    var $schemaDeps = {}, $propertyDeps = {}, $ownProperties = it.opts.ownProperties;
    for ($property in $schema) {
      if ($property == "__proto__")
        continue;
      var $sch = $schema[$property];
      var $deps = Array.isArray($sch) ? $propertyDeps : $schemaDeps;
      $deps[$property] = $sch;
    }
    out += "var " + $errs + " = errors;";
    var $currentErrorPath = it.errorPath;
    out += "var missing" + $lvl + ";";
    for (var $property in $propertyDeps) {
      $deps = $propertyDeps[$property];
      if ($deps.length) {
        out += " if ( " + $data + it.util.getProperty($property) + " !== undefined ";
        if ($ownProperties) {
          out += " && Object.prototype.hasOwnProperty.call(" + $data + ", '" + it.util.escapeQuotes($property) + "') ";
        }
        if ($breakOnError) {
          out += " && ( ";
          var arr1 = $deps;
          if (arr1) {
            var $propertyKey, $i = -1, l1 = arr1.length - 1;
            while ($i < l1) {
              $propertyKey = arr1[$i += 1];
              if ($i) {
                out += " || ";
              }
              var $prop = it.util.getProperty($propertyKey), $useData = $data + $prop;
              out += " ( ( " + $useData + " === undefined ";
              if ($ownProperties) {
                out += " || ! Object.prototype.hasOwnProperty.call(" + $data + ", '" + it.util.escapeQuotes($propertyKey) + "') ";
              }
              out += ") && (missing" + $lvl + " = " + it.util.toQuotedString(it.opts.jsonPointers ? $propertyKey : $prop) + ") ) ";
            }
          }
          out += ")) {  ";
          var $propertyPath = "missing" + $lvl, $missingProperty = "' + " + $propertyPath + " + '";
          if (it.opts._errorDataPathProperty) {
            it.errorPath = it.opts.jsonPointers ? it.util.getPathExpr($currentErrorPath, $propertyPath, true) : $currentErrorPath + " + " + $propertyPath;
          }
          var $$outStack = $$outStack || [];
          $$outStack.push(out);
          out = "";
          if (it.createErrors !== false) {
            out += " { keyword: '" + "dependencies" + "' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: { property: '" + it.util.escapeQuotes($property) + "', missingProperty: '" + $missingProperty + "', depsCount: " + $deps.length + ", deps: '" + it.util.escapeQuotes($deps.length == 1 ? $deps[0] : $deps.join(", ")) + "' } ";
            if (it.opts.messages !== false) {
              out += " , message: 'should have ";
              if ($deps.length == 1) {
                out += "property " + it.util.escapeQuotes($deps[0]);
              } else {
                out += "properties " + it.util.escapeQuotes($deps.join(", "));
              }
              out += " when property " + it.util.escapeQuotes($property) + " is present' ";
            }
            if (it.opts.verbose) {
              out += " , schema: validate.schema" + $schemaPath + " , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
            }
            out += " } ";
          } else {
            out += " {} ";
          }
          var __err = out;
          out = $$outStack.pop();
          if (!it.compositeRule && $breakOnError) {
            if (it.async) {
              out += " throw new ValidationError([" + __err + "]); ";
            } else {
              out += " validate.errors = [" + __err + "]; return false; ";
            }
          } else {
            out += " var err = " + __err + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
          }
        } else {
          out += " ) { ";
          var arr2 = $deps;
          if (arr2) {
            var $propertyKey, i2 = -1, l2 = arr2.length - 1;
            while (i2 < l2) {
              $propertyKey = arr2[i2 += 1];
              var $prop = it.util.getProperty($propertyKey), $missingProperty = it.util.escapeQuotes($propertyKey), $useData = $data + $prop;
              if (it.opts._errorDataPathProperty) {
                it.errorPath = it.util.getPath($currentErrorPath, $propertyKey, it.opts.jsonPointers);
              }
              out += " if ( " + $useData + " === undefined ";
              if ($ownProperties) {
                out += " || ! Object.prototype.hasOwnProperty.call(" + $data + ", '" + it.util.escapeQuotes($propertyKey) + "') ";
              }
              out += ") {  var err =   ";
              if (it.createErrors !== false) {
                out += " { keyword: '" + "dependencies" + "' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: { property: '" + it.util.escapeQuotes($property) + "', missingProperty: '" + $missingProperty + "', depsCount: " + $deps.length + ", deps: '" + it.util.escapeQuotes($deps.length == 1 ? $deps[0] : $deps.join(", ")) + "' } ";
                if (it.opts.messages !== false) {
                  out += " , message: 'should have ";
                  if ($deps.length == 1) {
                    out += "property " + it.util.escapeQuotes($deps[0]);
                  } else {
                    out += "properties " + it.util.escapeQuotes($deps.join(", "));
                  }
                  out += " when property " + it.util.escapeQuotes($property) + " is present' ";
                }
                if (it.opts.verbose) {
                  out += " , schema: validate.schema" + $schemaPath + " , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
                }
                out += " } ";
              } else {
                out += " {} ";
              }
              out += ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } ";
            }
          }
        }
        out += " }   ";
        if ($breakOnError) {
          $closingBraces += "}";
          out += " else { ";
        }
      }
    }
    it.errorPath = $currentErrorPath;
    var $currentBaseId = $it.baseId;
    for (var $property in $schemaDeps) {
      var $sch = $schemaDeps[$property];
      if (it.opts.strictKeywords ? typeof $sch == "object" && Object.keys($sch).length > 0 || $sch === false : it.util.schemaHasRules($sch, it.RULES.all)) {
        out += " " + $nextValid + " = true; if ( " + $data + it.util.getProperty($property) + " !== undefined ";
        if ($ownProperties) {
          out += " && Object.prototype.hasOwnProperty.call(" + $data + ", '" + it.util.escapeQuotes($property) + "') ";
        }
        out += ") { ";
        $it.schema = $sch;
        $it.schemaPath = $schemaPath + it.util.getProperty($property);
        $it.errSchemaPath = $errSchemaPath + "/" + it.util.escapeFragment($property);
        out += "  " + it.validate($it) + " ";
        $it.baseId = $currentBaseId;
        out += " }  ";
        if ($breakOnError) {
          out += " if (" + $nextValid + ") { ";
          $closingBraces += "}";
        }
      }
    }
    if ($breakOnError) {
      out += "   " + $closingBraces + " if (" + $errs + " == errors) {";
    }
    return out;
  };
});

// node_modules/ajv/lib/dotjs/enum.js
var require_enum = __commonJS((exports, module) => {
  module.exports = function generate_enum(it, $keyword, $ruleType) {
    var out = " ";
    var $lvl = it.level;
    var $dataLvl = it.dataLevel;
    var $schema = it.schema[$keyword];
    var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
    var $errSchemaPath = it.errSchemaPath + "/" + $keyword;
    var $breakOnError = !it.opts.allErrors;
    var $data = "data" + ($dataLvl || "");
    var $valid = "valid" + $lvl;
    var $isData = it.opts.$data && $schema && $schema.$data, $schemaValue;
    if ($isData) {
      out += " var schema" + $lvl + " = " + it.util.getData($schema.$data, $dataLvl, it.dataPathArr) + "; ";
      $schemaValue = "schema" + $lvl;
    } else {
      $schemaValue = $schema;
    }
    var $i = "i" + $lvl, $vSchema = "schema" + $lvl;
    if (!$isData) {
      out += " var " + $vSchema + " = validate.schema" + $schemaPath + ";";
    }
    out += "var " + $valid + ";";
    if ($isData) {
      out += " if (schema" + $lvl + " === undefined) " + $valid + " = true; else if (!Array.isArray(schema" + $lvl + ")) " + $valid + " = false; else {";
    }
    out += "" + $valid + " = false;for (var " + $i + "=0; " + $i + "<" + $vSchema + ".length; " + $i + "++) if (equal(" + $data + ", " + $vSchema + "[" + $i + "])) { " + $valid + " = true; break; }";
    if ($isData) {
      out += "  }  ";
    }
    out += " if (!" + $valid + ") {   ";
    var $$outStack = $$outStack || [];
    $$outStack.push(out);
    out = "";
    if (it.createErrors !== false) {
      out += " { keyword: '" + "enum" + "' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: { allowedValues: schema" + $lvl + " } ";
      if (it.opts.messages !== false) {
        out += " , message: 'should be equal to one of the allowed values' ";
      }
      if (it.opts.verbose) {
        out += " , schema: validate.schema" + $schemaPath + " , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
      }
      out += " } ";
    } else {
      out += " {} ";
    }
    var __err = out;
    out = $$outStack.pop();
    if (!it.compositeRule && $breakOnError) {
      if (it.async) {
        out += " throw new ValidationError([" + __err + "]); ";
      } else {
        out += " validate.errors = [" + __err + "]; return false; ";
      }
    } else {
      out += " var err = " + __err + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
    }
    out += " }";
    if ($breakOnError) {
      out += " else { ";
    }
    return out;
  };
});

// node_modules/ajv/lib/dotjs/format.js
var require_format = __commonJS((exports, module) => {
  module.exports = function generate_format(it, $keyword, $ruleType) {
    var out = " ";
    var $lvl = it.level;
    var $dataLvl = it.dataLevel;
    var $schema = it.schema[$keyword];
    var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
    var $errSchemaPath = it.errSchemaPath + "/" + $keyword;
    var $breakOnError = !it.opts.allErrors;
    var $data = "data" + ($dataLvl || "");
    if (it.opts.format === false) {
      if ($breakOnError) {
        out += " if (true) { ";
      }
      return out;
    }
    var $isData = it.opts.$data && $schema && $schema.$data, $schemaValue;
    if ($isData) {
      out += " var schema" + $lvl + " = " + it.util.getData($schema.$data, $dataLvl, it.dataPathArr) + "; ";
      $schemaValue = "schema" + $lvl;
    } else {
      $schemaValue = $schema;
    }
    var $unknownFormats = it.opts.unknownFormats, $allowUnknown = Array.isArray($unknownFormats);
    if ($isData) {
      var $format = "format" + $lvl, $isObject = "isObject" + $lvl, $formatType = "formatType" + $lvl;
      out += " var " + $format + " = formats[" + $schemaValue + "]; var " + $isObject + " = typeof " + $format + " == 'object' && !(" + $format + " instanceof RegExp) && " + $format + ".validate; var " + $formatType + " = " + $isObject + " && " + $format + ".type || 'string'; if (" + $isObject + ") { ";
      if (it.async) {
        out += " var async" + $lvl + " = " + $format + ".async; ";
      }
      out += " " + $format + " = " + $format + ".validate; } if (  ";
      if ($isData) {
        out += " (" + $schemaValue + " !== undefined && typeof " + $schemaValue + " != 'string') || ";
      }
      out += " (";
      if ($unknownFormats != "ignore") {
        out += " (" + $schemaValue + " && !" + $format + " ";
        if ($allowUnknown) {
          out += " && self._opts.unknownFormats.indexOf(" + $schemaValue + ") == -1 ";
        }
        out += ") || ";
      }
      out += " (" + $format + " && " + $formatType + " == '" + $ruleType + "' && !(typeof " + $format + " == 'function' ? ";
      if (it.async) {
        out += " (async" + $lvl + " ? await " + $format + "(" + $data + ") : " + $format + "(" + $data + ")) ";
      } else {
        out += " " + $format + "(" + $data + ") ";
      }
      out += " : " + $format + ".test(" + $data + "))))) {";
    } else {
      var $format = it.formats[$schema];
      if (!$format) {
        if ($unknownFormats == "ignore") {
          it.logger.warn('unknown format "' + $schema + '" ignored in schema at path "' + it.errSchemaPath + '"');
          if ($breakOnError) {
            out += " if (true) { ";
          }
          return out;
        } else if ($allowUnknown && $unknownFormats.indexOf($schema) >= 0) {
          if ($breakOnError) {
            out += " if (true) { ";
          }
          return out;
        } else {
          throw new Error('unknown format "' + $schema + '" is used in schema at path "' + it.errSchemaPath + '"');
        }
      }
      var $isObject = typeof $format == "object" && !($format instanceof RegExp) && $format.validate;
      var $formatType = $isObject && $format.type || "string";
      if ($isObject) {
        var $async = $format.async === true;
        $format = $format.validate;
      }
      if ($formatType != $ruleType) {
        if ($breakOnError) {
          out += " if (true) { ";
        }
        return out;
      }
      if ($async) {
        if (!it.async)
          throw new Error("async format in sync schema");
        var $formatRef = "formats" + it.util.getProperty($schema) + ".validate";
        out += " if (!(await " + $formatRef + "(" + $data + "))) { ";
      } else {
        out += " if (! ";
        var $formatRef = "formats" + it.util.getProperty($schema);
        if ($isObject)
          $formatRef += ".validate";
        if (typeof $format == "function") {
          out += " " + $formatRef + "(" + $data + ") ";
        } else {
          out += " " + $formatRef + ".test(" + $data + ") ";
        }
        out += ") { ";
      }
    }
    var $$outStack = $$outStack || [];
    $$outStack.push(out);
    out = "";
    if (it.createErrors !== false) {
      out += " { keyword: '" + "format" + "' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: { format:  ";
      if ($isData) {
        out += "" + $schemaValue;
      } else {
        out += "" + it.util.toQuotedString($schema);
      }
      out += "  } ";
      if (it.opts.messages !== false) {
        out += ` , message: 'should match format "`;
        if ($isData) {
          out += "' + " + $schemaValue + " + '";
        } else {
          out += "" + it.util.escapeQuotes($schema);
        }
        out += `"' `;
      }
      if (it.opts.verbose) {
        out += " , schema:  ";
        if ($isData) {
          out += "validate.schema" + $schemaPath;
        } else {
          out += "" + it.util.toQuotedString($schema);
        }
        out += "         , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
      }
      out += " } ";
    } else {
      out += " {} ";
    }
    var __err = out;
    out = $$outStack.pop();
    if (!it.compositeRule && $breakOnError) {
      if (it.async) {
        out += " throw new ValidationError([" + __err + "]); ";
      } else {
        out += " validate.errors = [" + __err + "]; return false; ";
      }
    } else {
      out += " var err = " + __err + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
    }
    out += " } ";
    if ($breakOnError) {
      out += " else { ";
    }
    return out;
  };
});

// node_modules/ajv/lib/dotjs/if.js
var require_if = __commonJS((exports, module) => {
  module.exports = function generate_if(it, $keyword, $ruleType) {
    var out = " ";
    var $lvl = it.level;
    var $dataLvl = it.dataLevel;
    var $schema = it.schema[$keyword];
    var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
    var $errSchemaPath = it.errSchemaPath + "/" + $keyword;
    var $breakOnError = !it.opts.allErrors;
    var $data = "data" + ($dataLvl || "");
    var $valid = "valid" + $lvl;
    var $errs = "errs__" + $lvl;
    var $it = it.util.copy(it);
    $it.level++;
    var $nextValid = "valid" + $it.level;
    var $thenSch = it.schema["then"], $elseSch = it.schema["else"], $thenPresent = $thenSch !== undefined && (it.opts.strictKeywords ? typeof $thenSch == "object" && Object.keys($thenSch).length > 0 || $thenSch === false : it.util.schemaHasRules($thenSch, it.RULES.all)), $elsePresent = $elseSch !== undefined && (it.opts.strictKeywords ? typeof $elseSch == "object" && Object.keys($elseSch).length > 0 || $elseSch === false : it.util.schemaHasRules($elseSch, it.RULES.all)), $currentBaseId = $it.baseId;
    if ($thenPresent || $elsePresent) {
      var $ifClause;
      $it.createErrors = false;
      $it.schema = $schema;
      $it.schemaPath = $schemaPath;
      $it.errSchemaPath = $errSchemaPath;
      out += " var " + $errs + " = errors; var " + $valid + " = true;  ";
      var $wasComposite = it.compositeRule;
      it.compositeRule = $it.compositeRule = true;
      out += "  " + it.validate($it) + " ";
      $it.baseId = $currentBaseId;
      $it.createErrors = true;
      out += "  errors = " + $errs + "; if (vErrors !== null) { if (" + $errs + ") vErrors.length = " + $errs + "; else vErrors = null; }  ";
      it.compositeRule = $it.compositeRule = $wasComposite;
      if ($thenPresent) {
        out += " if (" + $nextValid + ") {  ";
        $it.schema = it.schema["then"];
        $it.schemaPath = it.schemaPath + ".then";
        $it.errSchemaPath = it.errSchemaPath + "/then";
        out += "  " + it.validate($it) + " ";
        $it.baseId = $currentBaseId;
        out += " " + $valid + " = " + $nextValid + "; ";
        if ($thenPresent && $elsePresent) {
          $ifClause = "ifClause" + $lvl;
          out += " var " + $ifClause + " = 'then'; ";
        } else {
          $ifClause = "'then'";
        }
        out += " } ";
        if ($elsePresent) {
          out += " else { ";
        }
      } else {
        out += " if (!" + $nextValid + ") { ";
      }
      if ($elsePresent) {
        $it.schema = it.schema["else"];
        $it.schemaPath = it.schemaPath + ".else";
        $it.errSchemaPath = it.errSchemaPath + "/else";
        out += "  " + it.validate($it) + " ";
        $it.baseId = $currentBaseId;
        out += " " + $valid + " = " + $nextValid + "; ";
        if ($thenPresent && $elsePresent) {
          $ifClause = "ifClause" + $lvl;
          out += " var " + $ifClause + " = 'else'; ";
        } else {
          $ifClause = "'else'";
        }
        out += " } ";
      }
      out += " if (!" + $valid + ") {   var err =   ";
      if (it.createErrors !== false) {
        out += " { keyword: '" + "if" + "' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: { failingKeyword: " + $ifClause + " } ";
        if (it.opts.messages !== false) {
          out += ` , message: 'should match "' + ` + $ifClause + ` + '" schema' `;
        }
        if (it.opts.verbose) {
          out += " , schema: validate.schema" + $schemaPath + " , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
        }
        out += " } ";
      } else {
        out += " {} ";
      }
      out += ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
      if (!it.compositeRule && $breakOnError) {
        if (it.async) {
          out += " throw new ValidationError(vErrors); ";
        } else {
          out += " validate.errors = vErrors; return false; ";
        }
      }
      out += " }   ";
      if ($breakOnError) {
        out += " else { ";
      }
    } else {
      if ($breakOnError) {
        out += " if (true) { ";
      }
    }
    return out;
  };
});

// node_modules/ajv/lib/dotjs/items.js
var require_items = __commonJS((exports, module) => {
  module.exports = function generate_items(it, $keyword, $ruleType) {
    var out = " ";
    var $lvl = it.level;
    var $dataLvl = it.dataLevel;
    var $schema = it.schema[$keyword];
    var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
    var $errSchemaPath = it.errSchemaPath + "/" + $keyword;
    var $breakOnError = !it.opts.allErrors;
    var $data = "data" + ($dataLvl || "");
    var $valid = "valid" + $lvl;
    var $errs = "errs__" + $lvl;
    var $it = it.util.copy(it);
    var $closingBraces = "";
    $it.level++;
    var $nextValid = "valid" + $it.level;
    var $idx = "i" + $lvl, $dataNxt = $it.dataLevel = it.dataLevel + 1, $nextData = "data" + $dataNxt, $currentBaseId = it.baseId;
    out += "var " + $errs + " = errors;var " + $valid + ";";
    if (Array.isArray($schema)) {
      var $additionalItems = it.schema.additionalItems;
      if ($additionalItems === false) {
        out += " " + $valid + " = " + $data + ".length <= " + $schema.length + "; ";
        var $currErrSchemaPath = $errSchemaPath;
        $errSchemaPath = it.errSchemaPath + "/additionalItems";
        out += "  if (!" + $valid + ") {   ";
        var $$outStack = $$outStack || [];
        $$outStack.push(out);
        out = "";
        if (it.createErrors !== false) {
          out += " { keyword: '" + "additionalItems" + "' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: { limit: " + $schema.length + " } ";
          if (it.opts.messages !== false) {
            out += " , message: 'should NOT have more than " + $schema.length + " items' ";
          }
          if (it.opts.verbose) {
            out += " , schema: false , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
          }
          out += " } ";
        } else {
          out += " {} ";
        }
        var __err = out;
        out = $$outStack.pop();
        if (!it.compositeRule && $breakOnError) {
          if (it.async) {
            out += " throw new ValidationError([" + __err + "]); ";
          } else {
            out += " validate.errors = [" + __err + "]; return false; ";
          }
        } else {
          out += " var err = " + __err + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
        }
        out += " } ";
        $errSchemaPath = $currErrSchemaPath;
        if ($breakOnError) {
          $closingBraces += "}";
          out += " else { ";
        }
      }
      var arr1 = $schema;
      if (arr1) {
        var $sch, $i = -1, l1 = arr1.length - 1;
        while ($i < l1) {
          $sch = arr1[$i += 1];
          if (it.opts.strictKeywords ? typeof $sch == "object" && Object.keys($sch).length > 0 || $sch === false : it.util.schemaHasRules($sch, it.RULES.all)) {
            out += " " + $nextValid + " = true; if (" + $data + ".length > " + $i + ") { ";
            var $passData = $data + "[" + $i + "]";
            $it.schema = $sch;
            $it.schemaPath = $schemaPath + "[" + $i + "]";
            $it.errSchemaPath = $errSchemaPath + "/" + $i;
            $it.errorPath = it.util.getPathExpr(it.errorPath, $i, it.opts.jsonPointers, true);
            $it.dataPathArr[$dataNxt] = $i;
            var $code = it.validate($it);
            $it.baseId = $currentBaseId;
            if (it.util.varOccurences($code, $nextData) < 2) {
              out += " " + it.util.varReplace($code, $nextData, $passData) + " ";
            } else {
              out += " var " + $nextData + " = " + $passData + "; " + $code + " ";
            }
            out += " }  ";
            if ($breakOnError) {
              out += " if (" + $nextValid + ") { ";
              $closingBraces += "}";
            }
          }
        }
      }
      if (typeof $additionalItems == "object" && (it.opts.strictKeywords ? typeof $additionalItems == "object" && Object.keys($additionalItems).length > 0 || $additionalItems === false : it.util.schemaHasRules($additionalItems, it.RULES.all))) {
        $it.schema = $additionalItems;
        $it.schemaPath = it.schemaPath + ".additionalItems";
        $it.errSchemaPath = it.errSchemaPath + "/additionalItems";
        out += " " + $nextValid + " = true; if (" + $data + ".length > " + $schema.length + ") {  for (var " + $idx + " = " + $schema.length + "; " + $idx + " < " + $data + ".length; " + $idx + "++) { ";
        $it.errorPath = it.util.getPathExpr(it.errorPath, $idx, it.opts.jsonPointers, true);
        var $passData = $data + "[" + $idx + "]";
        $it.dataPathArr[$dataNxt] = $idx;
        var $code = it.validate($it);
        $it.baseId = $currentBaseId;
        if (it.util.varOccurences($code, $nextData) < 2) {
          out += " " + it.util.varReplace($code, $nextData, $passData) + " ";
        } else {
          out += " var " + $nextData + " = " + $passData + "; " + $code + " ";
        }
        if ($breakOnError) {
          out += " if (!" + $nextValid + ") break; ";
        }
        out += " } }  ";
        if ($breakOnError) {
          out += " if (" + $nextValid + ") { ";
          $closingBraces += "}";
        }
      }
    } else if (it.opts.strictKeywords ? typeof $schema == "object" && Object.keys($schema).length > 0 || $schema === false : it.util.schemaHasRules($schema, it.RULES.all)) {
      $it.schema = $schema;
      $it.schemaPath = $schemaPath;
      $it.errSchemaPath = $errSchemaPath;
      out += "  for (var " + $idx + " = " + 0 + "; " + $idx + " < " + $data + ".length; " + $idx + "++) { ";
      $it.errorPath = it.util.getPathExpr(it.errorPath, $idx, it.opts.jsonPointers, true);
      var $passData = $data + "[" + $idx + "]";
      $it.dataPathArr[$dataNxt] = $idx;
      var $code = it.validate($it);
      $it.baseId = $currentBaseId;
      if (it.util.varOccurences($code, $nextData) < 2) {
        out += " " + it.util.varReplace($code, $nextData, $passData) + " ";
      } else {
        out += " var " + $nextData + " = " + $passData + "; " + $code + " ";
      }
      if ($breakOnError) {
        out += " if (!" + $nextValid + ") break; ";
      }
      out += " }";
    }
    if ($breakOnError) {
      out += " " + $closingBraces + " if (" + $errs + " == errors) {";
    }
    return out;
  };
});

// node_modules/ajv/lib/dotjs/_limit.js
var require__limit = __commonJS((exports, module) => {
  module.exports = function generate__limit(it, $keyword, $ruleType) {
    var out = " ";
    var $lvl = it.level;
    var $dataLvl = it.dataLevel;
    var $schema = it.schema[$keyword];
    var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
    var $errSchemaPath = it.errSchemaPath + "/" + $keyword;
    var $breakOnError = !it.opts.allErrors;
    var $errorKeyword;
    var $data = "data" + ($dataLvl || "");
    var $isData = it.opts.$data && $schema && $schema.$data, $schemaValue;
    if ($isData) {
      out += " var schema" + $lvl + " = " + it.util.getData($schema.$data, $dataLvl, it.dataPathArr) + "; ";
      $schemaValue = "schema" + $lvl;
    } else {
      $schemaValue = $schema;
    }
    var $isMax = $keyword == "maximum", $exclusiveKeyword = $isMax ? "exclusiveMaximum" : "exclusiveMinimum", $schemaExcl = it.schema[$exclusiveKeyword], $isDataExcl = it.opts.$data && $schemaExcl && $schemaExcl.$data, $op = $isMax ? "<" : ">", $notOp = $isMax ? ">" : "<", $errorKeyword = undefined;
    if (!($isData || typeof $schema == "number" || $schema === undefined)) {
      throw new Error($keyword + " must be number");
    }
    if (!($isDataExcl || $schemaExcl === undefined || typeof $schemaExcl == "number" || typeof $schemaExcl == "boolean")) {
      throw new Error($exclusiveKeyword + " must be number or boolean");
    }
    if ($isDataExcl) {
      var $schemaValueExcl = it.util.getData($schemaExcl.$data, $dataLvl, it.dataPathArr), $exclusive = "exclusive" + $lvl, $exclType = "exclType" + $lvl, $exclIsNumber = "exclIsNumber" + $lvl, $opExpr = "op" + $lvl, $opStr = "' + " + $opExpr + " + '";
      out += " var schemaExcl" + $lvl + " = " + $schemaValueExcl + "; ";
      $schemaValueExcl = "schemaExcl" + $lvl;
      out += " var " + $exclusive + "; var " + $exclType + " = typeof " + $schemaValueExcl + "; if (" + $exclType + " != 'boolean' && " + $exclType + " != 'undefined' && " + $exclType + " != 'number') { ";
      var $errorKeyword = $exclusiveKeyword;
      var $$outStack = $$outStack || [];
      $$outStack.push(out);
      out = "";
      if (it.createErrors !== false) {
        out += " { keyword: '" + ($errorKeyword || "_exclusiveLimit") + "' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: {} ";
        if (it.opts.messages !== false) {
          out += " , message: '" + $exclusiveKeyword + " should be boolean' ";
        }
        if (it.opts.verbose) {
          out += " , schema: validate.schema" + $schemaPath + " , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
        }
        out += " } ";
      } else {
        out += " {} ";
      }
      var __err = out;
      out = $$outStack.pop();
      if (!it.compositeRule && $breakOnError) {
        if (it.async) {
          out += " throw new ValidationError([" + __err + "]); ";
        } else {
          out += " validate.errors = [" + __err + "]; return false; ";
        }
      } else {
        out += " var err = " + __err + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
      }
      out += " } else if ( ";
      if ($isData) {
        out += " (" + $schemaValue + " !== undefined && typeof " + $schemaValue + " != 'number') || ";
      }
      out += " " + $exclType + " == 'number' ? ( (" + $exclusive + " = " + $schemaValue + " === undefined || " + $schemaValueExcl + " " + $op + "= " + $schemaValue + ") ? " + $data + " " + $notOp + "= " + $schemaValueExcl + " : " + $data + " " + $notOp + " " + $schemaValue + " ) : ( (" + $exclusive + " = " + $schemaValueExcl + " === true) ? " + $data + " " + $notOp + "= " + $schemaValue + " : " + $data + " " + $notOp + " " + $schemaValue + " ) || " + $data + " !== " + $data + ") { var op" + $lvl + " = " + $exclusive + " ? '" + $op + "' : '" + $op + "='; ";
      if ($schema === undefined) {
        $errorKeyword = $exclusiveKeyword;
        $errSchemaPath = it.errSchemaPath + "/" + $exclusiveKeyword;
        $schemaValue = $schemaValueExcl;
        $isData = $isDataExcl;
      }
    } else {
      var $exclIsNumber = typeof $schemaExcl == "number", $opStr = $op;
      if ($exclIsNumber && $isData) {
        var $opExpr = "'" + $opStr + "'";
        out += " if ( ";
        if ($isData) {
          out += " (" + $schemaValue + " !== undefined && typeof " + $schemaValue + " != 'number') || ";
        }
        out += " ( " + $schemaValue + " === undefined || " + $schemaExcl + " " + $op + "= " + $schemaValue + " ? " + $data + " " + $notOp + "= " + $schemaExcl + " : " + $data + " " + $notOp + " " + $schemaValue + " ) || " + $data + " !== " + $data + ") { ";
      } else {
        if ($exclIsNumber && $schema === undefined) {
          $exclusive = true;
          $errorKeyword = $exclusiveKeyword;
          $errSchemaPath = it.errSchemaPath + "/" + $exclusiveKeyword;
          $schemaValue = $schemaExcl;
          $notOp += "=";
        } else {
          if ($exclIsNumber)
            $schemaValue = Math[$isMax ? "min" : "max"]($schemaExcl, $schema);
          if ($schemaExcl === ($exclIsNumber ? $schemaValue : true)) {
            $exclusive = true;
            $errorKeyword = $exclusiveKeyword;
            $errSchemaPath = it.errSchemaPath + "/" + $exclusiveKeyword;
            $notOp += "=";
          } else {
            $exclusive = false;
            $opStr += "=";
          }
        }
        var $opExpr = "'" + $opStr + "'";
        out += " if ( ";
        if ($isData) {
          out += " (" + $schemaValue + " !== undefined && typeof " + $schemaValue + " != 'number') || ";
        }
        out += " " + $data + " " + $notOp + " " + $schemaValue + " || " + $data + " !== " + $data + ") { ";
      }
    }
    $errorKeyword = $errorKeyword || $keyword;
    var $$outStack = $$outStack || [];
    $$outStack.push(out);
    out = "";
    if (it.createErrors !== false) {
      out += " { keyword: '" + ($errorKeyword || "_limit") + "' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: { comparison: " + $opExpr + ", limit: " + $schemaValue + ", exclusive: " + $exclusive + " } ";
      if (it.opts.messages !== false) {
        out += " , message: 'should be " + $opStr + " ";
        if ($isData) {
          out += "' + " + $schemaValue;
        } else {
          out += "" + $schemaValue + "'";
        }
      }
      if (it.opts.verbose) {
        out += " , schema:  ";
        if ($isData) {
          out += "validate.schema" + $schemaPath;
        } else {
          out += "" + $schema;
        }
        out += "         , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
      }
      out += " } ";
    } else {
      out += " {} ";
    }
    var __err = out;
    out = $$outStack.pop();
    if (!it.compositeRule && $breakOnError) {
      if (it.async) {
        out += " throw new ValidationError([" + __err + "]); ";
      } else {
        out += " validate.errors = [" + __err + "]; return false; ";
      }
    } else {
      out += " var err = " + __err + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
    }
    out += " } ";
    if ($breakOnError) {
      out += " else { ";
    }
    return out;
  };
});

// node_modules/ajv/lib/dotjs/_limitItems.js
var require__limitItems = __commonJS((exports, module) => {
  module.exports = function generate__limitItems(it, $keyword, $ruleType) {
    var out = " ";
    var $lvl = it.level;
    var $dataLvl = it.dataLevel;
    var $schema = it.schema[$keyword];
    var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
    var $errSchemaPath = it.errSchemaPath + "/" + $keyword;
    var $breakOnError = !it.opts.allErrors;
    var $errorKeyword;
    var $data = "data" + ($dataLvl || "");
    var $isData = it.opts.$data && $schema && $schema.$data, $schemaValue;
    if ($isData) {
      out += " var schema" + $lvl + " = " + it.util.getData($schema.$data, $dataLvl, it.dataPathArr) + "; ";
      $schemaValue = "schema" + $lvl;
    } else {
      $schemaValue = $schema;
    }
    if (!($isData || typeof $schema == "number")) {
      throw new Error($keyword + " must be number");
    }
    var $op = $keyword == "maxItems" ? ">" : "<";
    out += "if ( ";
    if ($isData) {
      out += " (" + $schemaValue + " !== undefined && typeof " + $schemaValue + " != 'number') || ";
    }
    out += " " + $data + ".length " + $op + " " + $schemaValue + ") { ";
    var $errorKeyword = $keyword;
    var $$outStack = $$outStack || [];
    $$outStack.push(out);
    out = "";
    if (it.createErrors !== false) {
      out += " { keyword: '" + ($errorKeyword || "_limitItems") + "' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: { limit: " + $schemaValue + " } ";
      if (it.opts.messages !== false) {
        out += " , message: 'should NOT have ";
        if ($keyword == "maxItems") {
          out += "more";
        } else {
          out += "fewer";
        }
        out += " than ";
        if ($isData) {
          out += "' + " + $schemaValue + " + '";
        } else {
          out += "" + $schema;
        }
        out += " items' ";
      }
      if (it.opts.verbose) {
        out += " , schema:  ";
        if ($isData) {
          out += "validate.schema" + $schemaPath;
        } else {
          out += "" + $schema;
        }
        out += "         , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
      }
      out += " } ";
    } else {
      out += " {} ";
    }
    var __err = out;
    out = $$outStack.pop();
    if (!it.compositeRule && $breakOnError) {
      if (it.async) {
        out += " throw new ValidationError([" + __err + "]); ";
      } else {
        out += " validate.errors = [" + __err + "]; return false; ";
      }
    } else {
      out += " var err = " + __err + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
    }
    out += "} ";
    if ($breakOnError) {
      out += " else { ";
    }
    return out;
  };
});

// node_modules/ajv/lib/dotjs/_limitLength.js
var require__limitLength = __commonJS((exports, module) => {
  module.exports = function generate__limitLength(it, $keyword, $ruleType) {
    var out = " ";
    var $lvl = it.level;
    var $dataLvl = it.dataLevel;
    var $schema = it.schema[$keyword];
    var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
    var $errSchemaPath = it.errSchemaPath + "/" + $keyword;
    var $breakOnError = !it.opts.allErrors;
    var $errorKeyword;
    var $data = "data" + ($dataLvl || "");
    var $isData = it.opts.$data && $schema && $schema.$data, $schemaValue;
    if ($isData) {
      out += " var schema" + $lvl + " = " + it.util.getData($schema.$data, $dataLvl, it.dataPathArr) + "; ";
      $schemaValue = "schema" + $lvl;
    } else {
      $schemaValue = $schema;
    }
    if (!($isData || typeof $schema == "number")) {
      throw new Error($keyword + " must be number");
    }
    var $op = $keyword == "maxLength" ? ">" : "<";
    out += "if ( ";
    if ($isData) {
      out += " (" + $schemaValue + " !== undefined && typeof " + $schemaValue + " != 'number') || ";
    }
    if (it.opts.unicode === false) {
      out += " " + $data + ".length ";
    } else {
      out += " ucs2length(" + $data + ") ";
    }
    out += " " + $op + " " + $schemaValue + ") { ";
    var $errorKeyword = $keyword;
    var $$outStack = $$outStack || [];
    $$outStack.push(out);
    out = "";
    if (it.createErrors !== false) {
      out += " { keyword: '" + ($errorKeyword || "_limitLength") + "' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: { limit: " + $schemaValue + " } ";
      if (it.opts.messages !== false) {
        out += " , message: 'should NOT be ";
        if ($keyword == "maxLength") {
          out += "longer";
        } else {
          out += "shorter";
        }
        out += " than ";
        if ($isData) {
          out += "' + " + $schemaValue + " + '";
        } else {
          out += "" + $schema;
        }
        out += " characters' ";
      }
      if (it.opts.verbose) {
        out += " , schema:  ";
        if ($isData) {
          out += "validate.schema" + $schemaPath;
        } else {
          out += "" + $schema;
        }
        out += "         , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
      }
      out += " } ";
    } else {
      out += " {} ";
    }
    var __err = out;
    out = $$outStack.pop();
    if (!it.compositeRule && $breakOnError) {
      if (it.async) {
        out += " throw new ValidationError([" + __err + "]); ";
      } else {
        out += " validate.errors = [" + __err + "]; return false; ";
      }
    } else {
      out += " var err = " + __err + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
    }
    out += "} ";
    if ($breakOnError) {
      out += " else { ";
    }
    return out;
  };
});

// node_modules/ajv/lib/dotjs/_limitProperties.js
var require__limitProperties = __commonJS((exports, module) => {
  module.exports = function generate__limitProperties(it, $keyword, $ruleType) {
    var out = " ";
    var $lvl = it.level;
    var $dataLvl = it.dataLevel;
    var $schema = it.schema[$keyword];
    var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
    var $errSchemaPath = it.errSchemaPath + "/" + $keyword;
    var $breakOnError = !it.opts.allErrors;
    var $errorKeyword;
    var $data = "data" + ($dataLvl || "");
    var $isData = it.opts.$data && $schema && $schema.$data, $schemaValue;
    if ($isData) {
      out += " var schema" + $lvl + " = " + it.util.getData($schema.$data, $dataLvl, it.dataPathArr) + "; ";
      $schemaValue = "schema" + $lvl;
    } else {
      $schemaValue = $schema;
    }
    if (!($isData || typeof $schema == "number")) {
      throw new Error($keyword + " must be number");
    }
    var $op = $keyword == "maxProperties" ? ">" : "<";
    out += "if ( ";
    if ($isData) {
      out += " (" + $schemaValue + " !== undefined && typeof " + $schemaValue + " != 'number') || ";
    }
    out += " Object.keys(" + $data + ").length " + $op + " " + $schemaValue + ") { ";
    var $errorKeyword = $keyword;
    var $$outStack = $$outStack || [];
    $$outStack.push(out);
    out = "";
    if (it.createErrors !== false) {
      out += " { keyword: '" + ($errorKeyword || "_limitProperties") + "' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: { limit: " + $schemaValue + " } ";
      if (it.opts.messages !== false) {
        out += " , message: 'should NOT have ";
        if ($keyword == "maxProperties") {
          out += "more";
        } else {
          out += "fewer";
        }
        out += " than ";
        if ($isData) {
          out += "' + " + $schemaValue + " + '";
        } else {
          out += "" + $schema;
        }
        out += " properties' ";
      }
      if (it.opts.verbose) {
        out += " , schema:  ";
        if ($isData) {
          out += "validate.schema" + $schemaPath;
        } else {
          out += "" + $schema;
        }
        out += "         , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
      }
      out += " } ";
    } else {
      out += " {} ";
    }
    var __err = out;
    out = $$outStack.pop();
    if (!it.compositeRule && $breakOnError) {
      if (it.async) {
        out += " throw new ValidationError([" + __err + "]); ";
      } else {
        out += " validate.errors = [" + __err + "]; return false; ";
      }
    } else {
      out += " var err = " + __err + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
    }
    out += "} ";
    if ($breakOnError) {
      out += " else { ";
    }
    return out;
  };
});

// node_modules/ajv/lib/dotjs/multipleOf.js
var require_multipleOf = __commonJS((exports, module) => {
  module.exports = function generate_multipleOf(it, $keyword, $ruleType) {
    var out = " ";
    var $lvl = it.level;
    var $dataLvl = it.dataLevel;
    var $schema = it.schema[$keyword];
    var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
    var $errSchemaPath = it.errSchemaPath + "/" + $keyword;
    var $breakOnError = !it.opts.allErrors;
    var $data = "data" + ($dataLvl || "");
    var $isData = it.opts.$data && $schema && $schema.$data, $schemaValue;
    if ($isData) {
      out += " var schema" + $lvl + " = " + it.util.getData($schema.$data, $dataLvl, it.dataPathArr) + "; ";
      $schemaValue = "schema" + $lvl;
    } else {
      $schemaValue = $schema;
    }
    if (!($isData || typeof $schema == "number")) {
      throw new Error($keyword + " must be number");
    }
    out += "var division" + $lvl + ";if (";
    if ($isData) {
      out += " " + $schemaValue + " !== undefined && ( typeof " + $schemaValue + " != 'number' || ";
    }
    out += " (division" + $lvl + " = " + $data + " / " + $schemaValue + ", ";
    if (it.opts.multipleOfPrecision) {
      out += " Math.abs(Math.round(division" + $lvl + ") - division" + $lvl + ") > 1e-" + it.opts.multipleOfPrecision + " ";
    } else {
      out += " division" + $lvl + " !== parseInt(division" + $lvl + ") ";
    }
    out += " ) ";
    if ($isData) {
      out += "  )  ";
    }
    out += " ) {   ";
    var $$outStack = $$outStack || [];
    $$outStack.push(out);
    out = "";
    if (it.createErrors !== false) {
      out += " { keyword: '" + "multipleOf" + "' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: { multipleOf: " + $schemaValue + " } ";
      if (it.opts.messages !== false) {
        out += " , message: 'should be multiple of ";
        if ($isData) {
          out += "' + " + $schemaValue;
        } else {
          out += "" + $schemaValue + "'";
        }
      }
      if (it.opts.verbose) {
        out += " , schema:  ";
        if ($isData) {
          out += "validate.schema" + $schemaPath;
        } else {
          out += "" + $schema;
        }
        out += "         , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
      }
      out += " } ";
    } else {
      out += " {} ";
    }
    var __err = out;
    out = $$outStack.pop();
    if (!it.compositeRule && $breakOnError) {
      if (it.async) {
        out += " throw new ValidationError([" + __err + "]); ";
      } else {
        out += " validate.errors = [" + __err + "]; return false; ";
      }
    } else {
      out += " var err = " + __err + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
    }
    out += "} ";
    if ($breakOnError) {
      out += " else { ";
    }
    return out;
  };
});

// node_modules/ajv/lib/dotjs/not.js
var require_not = __commonJS((exports, module) => {
  module.exports = function generate_not(it, $keyword, $ruleType) {
    var out = " ";
    var $lvl = it.level;
    var $dataLvl = it.dataLevel;
    var $schema = it.schema[$keyword];
    var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
    var $errSchemaPath = it.errSchemaPath + "/" + $keyword;
    var $breakOnError = !it.opts.allErrors;
    var $data = "data" + ($dataLvl || "");
    var $errs = "errs__" + $lvl;
    var $it = it.util.copy(it);
    $it.level++;
    var $nextValid = "valid" + $it.level;
    if (it.opts.strictKeywords ? typeof $schema == "object" && Object.keys($schema).length > 0 || $schema === false : it.util.schemaHasRules($schema, it.RULES.all)) {
      $it.schema = $schema;
      $it.schemaPath = $schemaPath;
      $it.errSchemaPath = $errSchemaPath;
      out += " var " + $errs + " = errors;  ";
      var $wasComposite = it.compositeRule;
      it.compositeRule = $it.compositeRule = true;
      $it.createErrors = false;
      var $allErrorsOption;
      if ($it.opts.allErrors) {
        $allErrorsOption = $it.opts.allErrors;
        $it.opts.allErrors = false;
      }
      out += " " + it.validate($it) + " ";
      $it.createErrors = true;
      if ($allErrorsOption)
        $it.opts.allErrors = $allErrorsOption;
      it.compositeRule = $it.compositeRule = $wasComposite;
      out += " if (" + $nextValid + ") {   ";
      var $$outStack = $$outStack || [];
      $$outStack.push(out);
      out = "";
      if (it.createErrors !== false) {
        out += " { keyword: '" + "not" + "' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: {} ";
        if (it.opts.messages !== false) {
          out += " , message: 'should NOT be valid' ";
        }
        if (it.opts.verbose) {
          out += " , schema: validate.schema" + $schemaPath + " , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
        }
        out += " } ";
      } else {
        out += " {} ";
      }
      var __err = out;
      out = $$outStack.pop();
      if (!it.compositeRule && $breakOnError) {
        if (it.async) {
          out += " throw new ValidationError([" + __err + "]); ";
        } else {
          out += " validate.errors = [" + __err + "]; return false; ";
        }
      } else {
        out += " var err = " + __err + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
      }
      out += " } else {  errors = " + $errs + "; if (vErrors !== null) { if (" + $errs + ") vErrors.length = " + $errs + "; else vErrors = null; } ";
      if (it.opts.allErrors) {
        out += " } ";
      }
    } else {
      out += "  var err =   ";
      if (it.createErrors !== false) {
        out += " { keyword: '" + "not" + "' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: {} ";
        if (it.opts.messages !== false) {
          out += " , message: 'should NOT be valid' ";
        }
        if (it.opts.verbose) {
          out += " , schema: validate.schema" + $schemaPath + " , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
        }
        out += " } ";
      } else {
        out += " {} ";
      }
      out += ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
      if ($breakOnError) {
        out += " if (false) { ";
      }
    }
    return out;
  };
});

// node_modules/ajv/lib/dotjs/oneOf.js
var require_oneOf = __commonJS((exports, module) => {
  module.exports = function generate_oneOf(it, $keyword, $ruleType) {
    var out = " ";
    var $lvl = it.level;
    var $dataLvl = it.dataLevel;
    var $schema = it.schema[$keyword];
    var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
    var $errSchemaPath = it.errSchemaPath + "/" + $keyword;
    var $breakOnError = !it.opts.allErrors;
    var $data = "data" + ($dataLvl || "");
    var $valid = "valid" + $lvl;
    var $errs = "errs__" + $lvl;
    var $it = it.util.copy(it);
    var $closingBraces = "";
    $it.level++;
    var $nextValid = "valid" + $it.level;
    var $currentBaseId = $it.baseId, $prevValid = "prevValid" + $lvl, $passingSchemas = "passingSchemas" + $lvl;
    out += "var " + $errs + " = errors , " + $prevValid + " = false , " + $valid + " = false , " + $passingSchemas + " = null; ";
    var $wasComposite = it.compositeRule;
    it.compositeRule = $it.compositeRule = true;
    var arr1 = $schema;
    if (arr1) {
      var $sch, $i = -1, l1 = arr1.length - 1;
      while ($i < l1) {
        $sch = arr1[$i += 1];
        if (it.opts.strictKeywords ? typeof $sch == "object" && Object.keys($sch).length > 0 || $sch === false : it.util.schemaHasRules($sch, it.RULES.all)) {
          $it.schema = $sch;
          $it.schemaPath = $schemaPath + "[" + $i + "]";
          $it.errSchemaPath = $errSchemaPath + "/" + $i;
          out += "  " + it.validate($it) + " ";
          $it.baseId = $currentBaseId;
        } else {
          out += " var " + $nextValid + " = true; ";
        }
        if ($i) {
          out += " if (" + $nextValid + " && " + $prevValid + ") { " + $valid + " = false; " + $passingSchemas + " = [" + $passingSchemas + ", " + $i + "]; } else { ";
          $closingBraces += "}";
        }
        out += " if (" + $nextValid + ") { " + $valid + " = " + $prevValid + " = true; " + $passingSchemas + " = " + $i + "; }";
      }
    }
    it.compositeRule = $it.compositeRule = $wasComposite;
    out += "" + $closingBraces + "if (!" + $valid + ") {   var err =   ";
    if (it.createErrors !== false) {
      out += " { keyword: '" + "oneOf" + "' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: { passingSchemas: " + $passingSchemas + " } ";
      if (it.opts.messages !== false) {
        out += " , message: 'should match exactly one schema in oneOf' ";
      }
      if (it.opts.verbose) {
        out += " , schema: validate.schema" + $schemaPath + " , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
      }
      out += " } ";
    } else {
      out += " {} ";
    }
    out += ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
    if (!it.compositeRule && $breakOnError) {
      if (it.async) {
        out += " throw new ValidationError(vErrors); ";
      } else {
        out += " validate.errors = vErrors; return false; ";
      }
    }
    out += "} else {  errors = " + $errs + "; if (vErrors !== null) { if (" + $errs + ") vErrors.length = " + $errs + "; else vErrors = null; }";
    if (it.opts.allErrors) {
      out += " } ";
    }
    return out;
  };
});

// node_modules/ajv/lib/dotjs/pattern.js
var require_pattern = __commonJS((exports, module) => {
  module.exports = function generate_pattern(it, $keyword, $ruleType) {
    var out = " ";
    var $lvl = it.level;
    var $dataLvl = it.dataLevel;
    var $schema = it.schema[$keyword];
    var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
    var $errSchemaPath = it.errSchemaPath + "/" + $keyword;
    var $breakOnError = !it.opts.allErrors;
    var $data = "data" + ($dataLvl || "");
    var $isData = it.opts.$data && $schema && $schema.$data, $schemaValue;
    if ($isData) {
      out += " var schema" + $lvl + " = " + it.util.getData($schema.$data, $dataLvl, it.dataPathArr) + "; ";
      $schemaValue = "schema" + $lvl;
    } else {
      $schemaValue = $schema;
    }
    var $regexp = $isData ? "(new RegExp(" + $schemaValue + "))" : it.usePattern($schema);
    out += "if ( ";
    if ($isData) {
      out += " (" + $schemaValue + " !== undefined && typeof " + $schemaValue + " != 'string') || ";
    }
    out += " !" + $regexp + ".test(" + $data + ") ) {   ";
    var $$outStack = $$outStack || [];
    $$outStack.push(out);
    out = "";
    if (it.createErrors !== false) {
      out += " { keyword: '" + "pattern" + "' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: { pattern:  ";
      if ($isData) {
        out += "" + $schemaValue;
      } else {
        out += "" + it.util.toQuotedString($schema);
      }
      out += "  } ";
      if (it.opts.messages !== false) {
        out += ` , message: 'should match pattern "`;
        if ($isData) {
          out += "' + " + $schemaValue + " + '";
        } else {
          out += "" + it.util.escapeQuotes($schema);
        }
        out += `"' `;
      }
      if (it.opts.verbose) {
        out += " , schema:  ";
        if ($isData) {
          out += "validate.schema" + $schemaPath;
        } else {
          out += "" + it.util.toQuotedString($schema);
        }
        out += "         , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
      }
      out += " } ";
    } else {
      out += " {} ";
    }
    var __err = out;
    out = $$outStack.pop();
    if (!it.compositeRule && $breakOnError) {
      if (it.async) {
        out += " throw new ValidationError([" + __err + "]); ";
      } else {
        out += " validate.errors = [" + __err + "]; return false; ";
      }
    } else {
      out += " var err = " + __err + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
    }
    out += "} ";
    if ($breakOnError) {
      out += " else { ";
    }
    return out;
  };
});

// node_modules/ajv/lib/dotjs/properties.js
var require_properties = __commonJS((exports, module) => {
  module.exports = function generate_properties(it, $keyword, $ruleType) {
    var out = " ";
    var $lvl = it.level;
    var $dataLvl = it.dataLevel;
    var $schema = it.schema[$keyword];
    var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
    var $errSchemaPath = it.errSchemaPath + "/" + $keyword;
    var $breakOnError = !it.opts.allErrors;
    var $data = "data" + ($dataLvl || "");
    var $errs = "errs__" + $lvl;
    var $it = it.util.copy(it);
    var $closingBraces = "";
    $it.level++;
    var $nextValid = "valid" + $it.level;
    var $key = "key" + $lvl, $idx = "idx" + $lvl, $dataNxt = $it.dataLevel = it.dataLevel + 1, $nextData = "data" + $dataNxt, $dataProperties = "dataProperties" + $lvl;
    var $schemaKeys = Object.keys($schema || {}).filter(notProto), $pProperties = it.schema.patternProperties || {}, $pPropertyKeys = Object.keys($pProperties).filter(notProto), $aProperties = it.schema.additionalProperties, $someProperties = $schemaKeys.length || $pPropertyKeys.length, $noAdditional = $aProperties === false, $additionalIsSchema = typeof $aProperties == "object" && Object.keys($aProperties).length, $removeAdditional = it.opts.removeAdditional, $checkAdditional = $noAdditional || $additionalIsSchema || $removeAdditional, $ownProperties = it.opts.ownProperties, $currentBaseId = it.baseId;
    var $required = it.schema.required;
    if ($required && !(it.opts.$data && $required.$data) && $required.length < it.opts.loopRequired) {
      var $requiredHash = it.util.toHash($required);
    }
    function notProto(p) {
      return p !== "__proto__";
    }
    out += "var " + $errs + " = errors;var " + $nextValid + " = true;";
    if ($ownProperties) {
      out += " var " + $dataProperties + " = undefined;";
    }
    if ($checkAdditional) {
      if ($ownProperties) {
        out += " " + $dataProperties + " = " + $dataProperties + " || Object.keys(" + $data + "); for (var " + $idx + "=0; " + $idx + "<" + $dataProperties + ".length; " + $idx + "++) { var " + $key + " = " + $dataProperties + "[" + $idx + "]; ";
      } else {
        out += " for (var " + $key + " in " + $data + ") { ";
      }
      if ($someProperties) {
        out += " var isAdditional" + $lvl + " = !(false ";
        if ($schemaKeys.length) {
          if ($schemaKeys.length > 8) {
            out += " || validate.schema" + $schemaPath + ".hasOwnProperty(" + $key + ") ";
          } else {
            var arr1 = $schemaKeys;
            if (arr1) {
              var $propertyKey, i1 = -1, l1 = arr1.length - 1;
              while (i1 < l1) {
                $propertyKey = arr1[i1 += 1];
                out += " || " + $key + " == " + it.util.toQuotedString($propertyKey) + " ";
              }
            }
          }
        }
        if ($pPropertyKeys.length) {
          var arr2 = $pPropertyKeys;
          if (arr2) {
            var $pProperty, $i = -1, l2 = arr2.length - 1;
            while ($i < l2) {
              $pProperty = arr2[$i += 1];
              out += " || " + it.usePattern($pProperty) + ".test(" + $key + ") ";
            }
          }
        }
        out += " ); if (isAdditional" + $lvl + ") { ";
      }
      if ($removeAdditional == "all") {
        out += " delete " + $data + "[" + $key + "]; ";
      } else {
        var $currentErrorPath = it.errorPath;
        var $additionalProperty = "' + " + $key + " + '";
        if (it.opts._errorDataPathProperty) {
          it.errorPath = it.util.getPathExpr(it.errorPath, $key, it.opts.jsonPointers);
        }
        if ($noAdditional) {
          if ($removeAdditional) {
            out += " delete " + $data + "[" + $key + "]; ";
          } else {
            out += " " + $nextValid + " = false; ";
            var $currErrSchemaPath = $errSchemaPath;
            $errSchemaPath = it.errSchemaPath + "/additionalProperties";
            var $$outStack = $$outStack || [];
            $$outStack.push(out);
            out = "";
            if (it.createErrors !== false) {
              out += " { keyword: '" + "additionalProperties" + "' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: { additionalProperty: '" + $additionalProperty + "' } ";
              if (it.opts.messages !== false) {
                out += " , message: '";
                if (it.opts._errorDataPathProperty) {
                  out += "is an invalid additional property";
                } else {
                  out += "should NOT have additional properties";
                }
                out += "' ";
              }
              if (it.opts.verbose) {
                out += " , schema: false , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
              }
              out += " } ";
            } else {
              out += " {} ";
            }
            var __err = out;
            out = $$outStack.pop();
            if (!it.compositeRule && $breakOnError) {
              if (it.async) {
                out += " throw new ValidationError([" + __err + "]); ";
              } else {
                out += " validate.errors = [" + __err + "]; return false; ";
              }
            } else {
              out += " var err = " + __err + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
            }
            $errSchemaPath = $currErrSchemaPath;
            if ($breakOnError) {
              out += " break; ";
            }
          }
        } else if ($additionalIsSchema) {
          if ($removeAdditional == "failing") {
            out += " var " + $errs + " = errors;  ";
            var $wasComposite = it.compositeRule;
            it.compositeRule = $it.compositeRule = true;
            $it.schema = $aProperties;
            $it.schemaPath = it.schemaPath + ".additionalProperties";
            $it.errSchemaPath = it.errSchemaPath + "/additionalProperties";
            $it.errorPath = it.opts._errorDataPathProperty ? it.errorPath : it.util.getPathExpr(it.errorPath, $key, it.opts.jsonPointers);
            var $passData = $data + "[" + $key + "]";
            $it.dataPathArr[$dataNxt] = $key;
            var $code = it.validate($it);
            $it.baseId = $currentBaseId;
            if (it.util.varOccurences($code, $nextData) < 2) {
              out += " " + it.util.varReplace($code, $nextData, $passData) + " ";
            } else {
              out += " var " + $nextData + " = " + $passData + "; " + $code + " ";
            }
            out += " if (!" + $nextValid + ") { errors = " + $errs + "; if (validate.errors !== null) { if (errors) validate.errors.length = errors; else validate.errors = null; } delete " + $data + "[" + $key + "]; }  ";
            it.compositeRule = $it.compositeRule = $wasComposite;
          } else {
            $it.schema = $aProperties;
            $it.schemaPath = it.schemaPath + ".additionalProperties";
            $it.errSchemaPath = it.errSchemaPath + "/additionalProperties";
            $it.errorPath = it.opts._errorDataPathProperty ? it.errorPath : it.util.getPathExpr(it.errorPath, $key, it.opts.jsonPointers);
            var $passData = $data + "[" + $key + "]";
            $it.dataPathArr[$dataNxt] = $key;
            var $code = it.validate($it);
            $it.baseId = $currentBaseId;
            if (it.util.varOccurences($code, $nextData) < 2) {
              out += " " + it.util.varReplace($code, $nextData, $passData) + " ";
            } else {
              out += " var " + $nextData + " = " + $passData + "; " + $code + " ";
            }
            if ($breakOnError) {
              out += " if (!" + $nextValid + ") break; ";
            }
          }
        }
        it.errorPath = $currentErrorPath;
      }
      if ($someProperties) {
        out += " } ";
      }
      out += " }  ";
      if ($breakOnError) {
        out += " if (" + $nextValid + ") { ";
        $closingBraces += "}";
      }
    }
    var $useDefaults = it.opts.useDefaults && !it.compositeRule;
    if ($schemaKeys.length) {
      var arr3 = $schemaKeys;
      if (arr3) {
        var $propertyKey, i3 = -1, l3 = arr3.length - 1;
        while (i3 < l3) {
          $propertyKey = arr3[i3 += 1];
          var $sch = $schema[$propertyKey];
          if (it.opts.strictKeywords ? typeof $sch == "object" && Object.keys($sch).length > 0 || $sch === false : it.util.schemaHasRules($sch, it.RULES.all)) {
            var $prop = it.util.getProperty($propertyKey), $passData = $data + $prop, $hasDefault = $useDefaults && $sch.default !== undefined;
            $it.schema = $sch;
            $it.schemaPath = $schemaPath + $prop;
            $it.errSchemaPath = $errSchemaPath + "/" + it.util.escapeFragment($propertyKey);
            $it.errorPath = it.util.getPath(it.errorPath, $propertyKey, it.opts.jsonPointers);
            $it.dataPathArr[$dataNxt] = it.util.toQuotedString($propertyKey);
            var $code = it.validate($it);
            $it.baseId = $currentBaseId;
            if (it.util.varOccurences($code, $nextData) < 2) {
              $code = it.util.varReplace($code, $nextData, $passData);
              var $useData = $passData;
            } else {
              var $useData = $nextData;
              out += " var " + $nextData + " = " + $passData + "; ";
            }
            if ($hasDefault) {
              out += " " + $code + " ";
            } else {
              if ($requiredHash && $requiredHash[$propertyKey]) {
                out += " if ( " + $useData + " === undefined ";
                if ($ownProperties) {
                  out += " || ! Object.prototype.hasOwnProperty.call(" + $data + ", '" + it.util.escapeQuotes($propertyKey) + "') ";
                }
                out += ") { " + $nextValid + " = false; ";
                var $currentErrorPath = it.errorPath, $currErrSchemaPath = $errSchemaPath, $missingProperty = it.util.escapeQuotes($propertyKey);
                if (it.opts._errorDataPathProperty) {
                  it.errorPath = it.util.getPath($currentErrorPath, $propertyKey, it.opts.jsonPointers);
                }
                $errSchemaPath = it.errSchemaPath + "/required";
                var $$outStack = $$outStack || [];
                $$outStack.push(out);
                out = "";
                if (it.createErrors !== false) {
                  out += " { keyword: '" + "required" + "' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: { missingProperty: '" + $missingProperty + "' } ";
                  if (it.opts.messages !== false) {
                    out += " , message: '";
                    if (it.opts._errorDataPathProperty) {
                      out += "is a required property";
                    } else {
                      out += "should have required property \\'" + $missingProperty + "\\'";
                    }
                    out += "' ";
                  }
                  if (it.opts.verbose) {
                    out += " , schema: validate.schema" + $schemaPath + " , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
                  }
                  out += " } ";
                } else {
                  out += " {} ";
                }
                var __err = out;
                out = $$outStack.pop();
                if (!it.compositeRule && $breakOnError) {
                  if (it.async) {
                    out += " throw new ValidationError([" + __err + "]); ";
                  } else {
                    out += " validate.errors = [" + __err + "]; return false; ";
                  }
                } else {
                  out += " var err = " + __err + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
                }
                $errSchemaPath = $currErrSchemaPath;
                it.errorPath = $currentErrorPath;
                out += " } else { ";
              } else {
                if ($breakOnError) {
                  out += " if ( " + $useData + " === undefined ";
                  if ($ownProperties) {
                    out += " || ! Object.prototype.hasOwnProperty.call(" + $data + ", '" + it.util.escapeQuotes($propertyKey) + "') ";
                  }
                  out += ") { " + $nextValid + " = true; } else { ";
                } else {
                  out += " if (" + $useData + " !== undefined ";
                  if ($ownProperties) {
                    out += " &&   Object.prototype.hasOwnProperty.call(" + $data + ", '" + it.util.escapeQuotes($propertyKey) + "') ";
                  }
                  out += " ) { ";
                }
              }
              out += " " + $code + " } ";
            }
          }
          if ($breakOnError) {
            out += " if (" + $nextValid + ") { ";
            $closingBraces += "}";
          }
        }
      }
    }
    if ($pPropertyKeys.length) {
      var arr4 = $pPropertyKeys;
      if (arr4) {
        var $pProperty, i4 = -1, l4 = arr4.length - 1;
        while (i4 < l4) {
          $pProperty = arr4[i4 += 1];
          var $sch = $pProperties[$pProperty];
          if (it.opts.strictKeywords ? typeof $sch == "object" && Object.keys($sch).length > 0 || $sch === false : it.util.schemaHasRules($sch, it.RULES.all)) {
            $it.schema = $sch;
            $it.schemaPath = it.schemaPath + ".patternProperties" + it.util.getProperty($pProperty);
            $it.errSchemaPath = it.errSchemaPath + "/patternProperties/" + it.util.escapeFragment($pProperty);
            if ($ownProperties) {
              out += " " + $dataProperties + " = " + $dataProperties + " || Object.keys(" + $data + "); for (var " + $idx + "=0; " + $idx + "<" + $dataProperties + ".length; " + $idx + "++) { var " + $key + " = " + $dataProperties + "[" + $idx + "]; ";
            } else {
              out += " for (var " + $key + " in " + $data + ") { ";
            }
            out += " if (" + it.usePattern($pProperty) + ".test(" + $key + ")) { ";
            $it.errorPath = it.util.getPathExpr(it.errorPath, $key, it.opts.jsonPointers);
            var $passData = $data + "[" + $key + "]";
            $it.dataPathArr[$dataNxt] = $key;
            var $code = it.validate($it);
            $it.baseId = $currentBaseId;
            if (it.util.varOccurences($code, $nextData) < 2) {
              out += " " + it.util.varReplace($code, $nextData, $passData) + " ";
            } else {
              out += " var " + $nextData + " = " + $passData + "; " + $code + " ";
            }
            if ($breakOnError) {
              out += " if (!" + $nextValid + ") break; ";
            }
            out += " } ";
            if ($breakOnError) {
              out += " else " + $nextValid + " = true; ";
            }
            out += " }  ";
            if ($breakOnError) {
              out += " if (" + $nextValid + ") { ";
              $closingBraces += "}";
            }
          }
        }
      }
    }
    if ($breakOnError) {
      out += " " + $closingBraces + " if (" + $errs + " == errors) {";
    }
    return out;
  };
});

// node_modules/ajv/lib/dotjs/propertyNames.js
var require_propertyNames = __commonJS((exports, module) => {
  module.exports = function generate_propertyNames(it, $keyword, $ruleType) {
    var out = " ";
    var $lvl = it.level;
    var $dataLvl = it.dataLevel;
    var $schema = it.schema[$keyword];
    var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
    var $errSchemaPath = it.errSchemaPath + "/" + $keyword;
    var $breakOnError = !it.opts.allErrors;
    var $data = "data" + ($dataLvl || "");
    var $errs = "errs__" + $lvl;
    var $it = it.util.copy(it);
    var $closingBraces = "";
    $it.level++;
    var $nextValid = "valid" + $it.level;
    out += "var " + $errs + " = errors;";
    if (it.opts.strictKeywords ? typeof $schema == "object" && Object.keys($schema).length > 0 || $schema === false : it.util.schemaHasRules($schema, it.RULES.all)) {
      $it.schema = $schema;
      $it.schemaPath = $schemaPath;
      $it.errSchemaPath = $errSchemaPath;
      var $key = "key" + $lvl, $idx = "idx" + $lvl, $i = "i" + $lvl, $invalidName = "' + " + $key + " + '", $dataNxt = $it.dataLevel = it.dataLevel + 1, $nextData = "data" + $dataNxt, $dataProperties = "dataProperties" + $lvl, $ownProperties = it.opts.ownProperties, $currentBaseId = it.baseId;
      if ($ownProperties) {
        out += " var " + $dataProperties + " = undefined; ";
      }
      if ($ownProperties) {
        out += " " + $dataProperties + " = " + $dataProperties + " || Object.keys(" + $data + "); for (var " + $idx + "=0; " + $idx + "<" + $dataProperties + ".length; " + $idx + "++) { var " + $key + " = " + $dataProperties + "[" + $idx + "]; ";
      } else {
        out += " for (var " + $key + " in " + $data + ") { ";
      }
      out += " var startErrs" + $lvl + " = errors; ";
      var $passData = $key;
      var $wasComposite = it.compositeRule;
      it.compositeRule = $it.compositeRule = true;
      var $code = it.validate($it);
      $it.baseId = $currentBaseId;
      if (it.util.varOccurences($code, $nextData) < 2) {
        out += " " + it.util.varReplace($code, $nextData, $passData) + " ";
      } else {
        out += " var " + $nextData + " = " + $passData + "; " + $code + " ";
      }
      it.compositeRule = $it.compositeRule = $wasComposite;
      out += " if (!" + $nextValid + ") { for (var " + $i + "=startErrs" + $lvl + "; " + $i + "<errors; " + $i + "++) { vErrors[" + $i + "].propertyName = " + $key + "; }   var err =   ";
      if (it.createErrors !== false) {
        out += " { keyword: '" + "propertyNames" + "' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: { propertyName: '" + $invalidName + "' } ";
        if (it.opts.messages !== false) {
          out += " , message: 'property name \\'" + $invalidName + "\\' is invalid' ";
        }
        if (it.opts.verbose) {
          out += " , schema: validate.schema" + $schemaPath + " , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
        }
        out += " } ";
      } else {
        out += " {} ";
      }
      out += ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
      if (!it.compositeRule && $breakOnError) {
        if (it.async) {
          out += " throw new ValidationError(vErrors); ";
        } else {
          out += " validate.errors = vErrors; return false; ";
        }
      }
      if ($breakOnError) {
        out += " break; ";
      }
      out += " } }";
    }
    if ($breakOnError) {
      out += " " + $closingBraces + " if (" + $errs + " == errors) {";
    }
    return out;
  };
});

// node_modules/ajv/lib/dotjs/required.js
var require_required = __commonJS((exports, module) => {
  module.exports = function generate_required(it, $keyword, $ruleType) {
    var out = " ";
    var $lvl = it.level;
    var $dataLvl = it.dataLevel;
    var $schema = it.schema[$keyword];
    var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
    var $errSchemaPath = it.errSchemaPath + "/" + $keyword;
    var $breakOnError = !it.opts.allErrors;
    var $data = "data" + ($dataLvl || "");
    var $valid = "valid" + $lvl;
    var $isData = it.opts.$data && $schema && $schema.$data, $schemaValue;
    if ($isData) {
      out += " var schema" + $lvl + " = " + it.util.getData($schema.$data, $dataLvl, it.dataPathArr) + "; ";
      $schemaValue = "schema" + $lvl;
    } else {
      $schemaValue = $schema;
    }
    var $vSchema = "schema" + $lvl;
    if (!$isData) {
      if ($schema.length < it.opts.loopRequired && it.schema.properties && Object.keys(it.schema.properties).length) {
        var $required = [];
        var arr1 = $schema;
        if (arr1) {
          var $property, i1 = -1, l1 = arr1.length - 1;
          while (i1 < l1) {
            $property = arr1[i1 += 1];
            var $propertySch = it.schema.properties[$property];
            if (!($propertySch && (it.opts.strictKeywords ? typeof $propertySch == "object" && Object.keys($propertySch).length > 0 || $propertySch === false : it.util.schemaHasRules($propertySch, it.RULES.all)))) {
              $required[$required.length] = $property;
            }
          }
        }
      } else {
        var $required = $schema;
      }
    }
    if ($isData || $required.length) {
      var $currentErrorPath = it.errorPath, $loopRequired = $isData || $required.length >= it.opts.loopRequired, $ownProperties = it.opts.ownProperties;
      if ($breakOnError) {
        out += " var missing" + $lvl + "; ";
        if ($loopRequired) {
          if (!$isData) {
            out += " var " + $vSchema + " = validate.schema" + $schemaPath + "; ";
          }
          var $i = "i" + $lvl, $propertyPath = "schema" + $lvl + "[" + $i + "]", $missingProperty = "' + " + $propertyPath + " + '";
          if (it.opts._errorDataPathProperty) {
            it.errorPath = it.util.getPathExpr($currentErrorPath, $propertyPath, it.opts.jsonPointers);
          }
          out += " var " + $valid + " = true; ";
          if ($isData) {
            out += " if (schema" + $lvl + " === undefined) " + $valid + " = true; else if (!Array.isArray(schema" + $lvl + ")) " + $valid + " = false; else {";
          }
          out += " for (var " + $i + " = 0; " + $i + " < " + $vSchema + ".length; " + $i + "++) { " + $valid + " = " + $data + "[" + $vSchema + "[" + $i + "]] !== undefined ";
          if ($ownProperties) {
            out += " &&   Object.prototype.hasOwnProperty.call(" + $data + ", " + $vSchema + "[" + $i + "]) ";
          }
          out += "; if (!" + $valid + ") break; } ";
          if ($isData) {
            out += "  }  ";
          }
          out += "  if (!" + $valid + ") {   ";
          var $$outStack = $$outStack || [];
          $$outStack.push(out);
          out = "";
          if (it.createErrors !== false) {
            out += " { keyword: '" + "required" + "' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: { missingProperty: '" + $missingProperty + "' } ";
            if (it.opts.messages !== false) {
              out += " , message: '";
              if (it.opts._errorDataPathProperty) {
                out += "is a required property";
              } else {
                out += "should have required property \\'" + $missingProperty + "\\'";
              }
              out += "' ";
            }
            if (it.opts.verbose) {
              out += " , schema: validate.schema" + $schemaPath + " , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
            }
            out += " } ";
          } else {
            out += " {} ";
          }
          var __err = out;
          out = $$outStack.pop();
          if (!it.compositeRule && $breakOnError) {
            if (it.async) {
              out += " throw new ValidationError([" + __err + "]); ";
            } else {
              out += " validate.errors = [" + __err + "]; return false; ";
            }
          } else {
            out += " var err = " + __err + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
          }
          out += " } else { ";
        } else {
          out += " if ( ";
          var arr2 = $required;
          if (arr2) {
            var $propertyKey, $i = -1, l2 = arr2.length - 1;
            while ($i < l2) {
              $propertyKey = arr2[$i += 1];
              if ($i) {
                out += " || ";
              }
              var $prop = it.util.getProperty($propertyKey), $useData = $data + $prop;
              out += " ( ( " + $useData + " === undefined ";
              if ($ownProperties) {
                out += " || ! Object.prototype.hasOwnProperty.call(" + $data + ", '" + it.util.escapeQuotes($propertyKey) + "') ";
              }
              out += ") && (missing" + $lvl + " = " + it.util.toQuotedString(it.opts.jsonPointers ? $propertyKey : $prop) + ") ) ";
            }
          }
          out += ") {  ";
          var $propertyPath = "missing" + $lvl, $missingProperty = "' + " + $propertyPath + " + '";
          if (it.opts._errorDataPathProperty) {
            it.errorPath = it.opts.jsonPointers ? it.util.getPathExpr($currentErrorPath, $propertyPath, true) : $currentErrorPath + " + " + $propertyPath;
          }
          var $$outStack = $$outStack || [];
          $$outStack.push(out);
          out = "";
          if (it.createErrors !== false) {
            out += " { keyword: '" + "required" + "' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: { missingProperty: '" + $missingProperty + "' } ";
            if (it.opts.messages !== false) {
              out += " , message: '";
              if (it.opts._errorDataPathProperty) {
                out += "is a required property";
              } else {
                out += "should have required property \\'" + $missingProperty + "\\'";
              }
              out += "' ";
            }
            if (it.opts.verbose) {
              out += " , schema: validate.schema" + $schemaPath + " , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
            }
            out += " } ";
          } else {
            out += " {} ";
          }
          var __err = out;
          out = $$outStack.pop();
          if (!it.compositeRule && $breakOnError) {
            if (it.async) {
              out += " throw new ValidationError([" + __err + "]); ";
            } else {
              out += " validate.errors = [" + __err + "]; return false; ";
            }
          } else {
            out += " var err = " + __err + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
          }
          out += " } else { ";
        }
      } else {
        if ($loopRequired) {
          if (!$isData) {
            out += " var " + $vSchema + " = validate.schema" + $schemaPath + "; ";
          }
          var $i = "i" + $lvl, $propertyPath = "schema" + $lvl + "[" + $i + "]", $missingProperty = "' + " + $propertyPath + " + '";
          if (it.opts._errorDataPathProperty) {
            it.errorPath = it.util.getPathExpr($currentErrorPath, $propertyPath, it.opts.jsonPointers);
          }
          if ($isData) {
            out += " if (" + $vSchema + " && !Array.isArray(" + $vSchema + ")) {  var err =   ";
            if (it.createErrors !== false) {
              out += " { keyword: '" + "required" + "' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: { missingProperty: '" + $missingProperty + "' } ";
              if (it.opts.messages !== false) {
                out += " , message: '";
                if (it.opts._errorDataPathProperty) {
                  out += "is a required property";
                } else {
                  out += "should have required property \\'" + $missingProperty + "\\'";
                }
                out += "' ";
              }
              if (it.opts.verbose) {
                out += " , schema: validate.schema" + $schemaPath + " , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
              }
              out += " } ";
            } else {
              out += " {} ";
            }
            out += ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } else if (" + $vSchema + " !== undefined) { ";
          }
          out += " for (var " + $i + " = 0; " + $i + " < " + $vSchema + ".length; " + $i + "++) { if (" + $data + "[" + $vSchema + "[" + $i + "]] === undefined ";
          if ($ownProperties) {
            out += " || ! Object.prototype.hasOwnProperty.call(" + $data + ", " + $vSchema + "[" + $i + "]) ";
          }
          out += ") {  var err =   ";
          if (it.createErrors !== false) {
            out += " { keyword: '" + "required" + "' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: { missingProperty: '" + $missingProperty + "' } ";
            if (it.opts.messages !== false) {
              out += " , message: '";
              if (it.opts._errorDataPathProperty) {
                out += "is a required property";
              } else {
                out += "should have required property \\'" + $missingProperty + "\\'";
              }
              out += "' ";
            }
            if (it.opts.verbose) {
              out += " , schema: validate.schema" + $schemaPath + " , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
            }
            out += " } ";
          } else {
            out += " {} ";
          }
          out += ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } } ";
          if ($isData) {
            out += "  }  ";
          }
        } else {
          var arr3 = $required;
          if (arr3) {
            var $propertyKey, i3 = -1, l3 = arr3.length - 1;
            while (i3 < l3) {
              $propertyKey = arr3[i3 += 1];
              var $prop = it.util.getProperty($propertyKey), $missingProperty = it.util.escapeQuotes($propertyKey), $useData = $data + $prop;
              if (it.opts._errorDataPathProperty) {
                it.errorPath = it.util.getPath($currentErrorPath, $propertyKey, it.opts.jsonPointers);
              }
              out += " if ( " + $useData + " === undefined ";
              if ($ownProperties) {
                out += " || ! Object.prototype.hasOwnProperty.call(" + $data + ", '" + it.util.escapeQuotes($propertyKey) + "') ";
              }
              out += ") {  var err =   ";
              if (it.createErrors !== false) {
                out += " { keyword: '" + "required" + "' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: { missingProperty: '" + $missingProperty + "' } ";
                if (it.opts.messages !== false) {
                  out += " , message: '";
                  if (it.opts._errorDataPathProperty) {
                    out += "is a required property";
                  } else {
                    out += "should have required property \\'" + $missingProperty + "\\'";
                  }
                  out += "' ";
                }
                if (it.opts.verbose) {
                  out += " , schema: validate.schema" + $schemaPath + " , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
                }
                out += " } ";
              } else {
                out += " {} ";
              }
              out += ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; } ";
            }
          }
        }
      }
      it.errorPath = $currentErrorPath;
    } else if ($breakOnError) {
      out += " if (true) {";
    }
    return out;
  };
});

// node_modules/ajv/lib/dotjs/uniqueItems.js
var require_uniqueItems = __commonJS((exports, module) => {
  module.exports = function generate_uniqueItems(it, $keyword, $ruleType) {
    var out = " ";
    var $lvl = it.level;
    var $dataLvl = it.dataLevel;
    var $schema = it.schema[$keyword];
    var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
    var $errSchemaPath = it.errSchemaPath + "/" + $keyword;
    var $breakOnError = !it.opts.allErrors;
    var $data = "data" + ($dataLvl || "");
    var $valid = "valid" + $lvl;
    var $isData = it.opts.$data && $schema && $schema.$data, $schemaValue;
    if ($isData) {
      out += " var schema" + $lvl + " = " + it.util.getData($schema.$data, $dataLvl, it.dataPathArr) + "; ";
      $schemaValue = "schema" + $lvl;
    } else {
      $schemaValue = $schema;
    }
    if (($schema || $isData) && it.opts.uniqueItems !== false) {
      if ($isData) {
        out += " var " + $valid + "; if (" + $schemaValue + " === false || " + $schemaValue + " === undefined) " + $valid + " = true; else if (typeof " + $schemaValue + " != 'boolean') " + $valid + " = false; else { ";
      }
      out += " var i = " + $data + ".length , " + $valid + " = true , j; if (i > 1) { ";
      var $itemType = it.schema.items && it.schema.items.type, $typeIsArray = Array.isArray($itemType);
      if (!$itemType || $itemType == "object" || $itemType == "array" || $typeIsArray && ($itemType.indexOf("object") >= 0 || $itemType.indexOf("array") >= 0)) {
        out += " outer: for (;i--;) { for (j = i; j--;) { if (equal(" + $data + "[i], " + $data + "[j])) { " + $valid + " = false; break outer; } } } ";
      } else {
        out += " var itemIndices = {}, item; for (;i--;) { var item = " + $data + "[i]; ";
        var $method = "checkDataType" + ($typeIsArray ? "s" : "");
        out += " if (" + it.util[$method]($itemType, "item", it.opts.strictNumbers, true) + ") continue; ";
        if ($typeIsArray) {
          out += ` if (typeof item == 'string') item = '"' + item; `;
        }
        out += " if (typeof itemIndices[item] == 'number') { " + $valid + " = false; j = itemIndices[item]; break; } itemIndices[item] = i; } ";
      }
      out += " } ";
      if ($isData) {
        out += "  }  ";
      }
      out += " if (!" + $valid + ") {   ";
      var $$outStack = $$outStack || [];
      $$outStack.push(out);
      out = "";
      if (it.createErrors !== false) {
        out += " { keyword: '" + "uniqueItems" + "' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: { i: i, j: j } ";
        if (it.opts.messages !== false) {
          out += " , message: 'should NOT have duplicate items (items ## ' + j + ' and ' + i + ' are identical)' ";
        }
        if (it.opts.verbose) {
          out += " , schema:  ";
          if ($isData) {
            out += "validate.schema" + $schemaPath;
          } else {
            out += "" + $schema;
          }
          out += "         , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
        }
        out += " } ";
      } else {
        out += " {} ";
      }
      var __err = out;
      out = $$outStack.pop();
      if (!it.compositeRule && $breakOnError) {
        if (it.async) {
          out += " throw new ValidationError([" + __err + "]); ";
        } else {
          out += " validate.errors = [" + __err + "]; return false; ";
        }
      } else {
        out += " var err = " + __err + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
      }
      out += " } ";
      if ($breakOnError) {
        out += " else { ";
      }
    } else {
      if ($breakOnError) {
        out += " if (true) { ";
      }
    }
    return out;
  };
});

// node_modules/ajv/lib/dotjs/index.js
var require_dotjs = __commonJS((exports, module) => {
  module.exports = {
    $ref: require_ref(),
    allOf: require_allOf(),
    anyOf: require_anyOf(),
    $comment: require_comment(),
    const: require_const(),
    contains: require_contains(),
    dependencies: require_dependencies(),
    enum: require_enum(),
    format: require_format(),
    if: require_if(),
    items: require_items(),
    maximum: require__limit(),
    minimum: require__limit(),
    maxItems: require__limitItems(),
    minItems: require__limitItems(),
    maxLength: require__limitLength(),
    minLength: require__limitLength(),
    maxProperties: require__limitProperties(),
    minProperties: require__limitProperties(),
    multipleOf: require_multipleOf(),
    not: require_not(),
    oneOf: require_oneOf(),
    pattern: require_pattern(),
    properties: require_properties(),
    propertyNames: require_propertyNames(),
    required: require_required(),
    uniqueItems: require_uniqueItems(),
    validate: require_validate()
  };
});

// node_modules/ajv/lib/compile/rules.js
var require_rules = __commonJS((exports, module) => {
  var ruleModules = require_dotjs();
  var toHash = require_util().toHash;
  module.exports = function rules() {
    var RULES = [
      {
        type: "number",
        rules: [
          { maximum: ["exclusiveMaximum"] },
          { minimum: ["exclusiveMinimum"] },
          "multipleOf",
          "format"
        ]
      },
      {
        type: "string",
        rules: ["maxLength", "minLength", "pattern", "format"]
      },
      {
        type: "array",
        rules: ["maxItems", "minItems", "items", "contains", "uniqueItems"]
      },
      {
        type: "object",
        rules: [
          "maxProperties",
          "minProperties",
          "required",
          "dependencies",
          "propertyNames",
          { properties: ["additionalProperties", "patternProperties"] }
        ]
      },
      { rules: ["$ref", "const", "enum", "not", "anyOf", "oneOf", "allOf", "if"] }
    ];
    var ALL = ["type", "$comment"];
    var KEYWORDS = [
      "$schema",
      "$id",
      "id",
      "$data",
      "$async",
      "title",
      "description",
      "default",
      "definitions",
      "examples",
      "readOnly",
      "writeOnly",
      "contentMediaType",
      "contentEncoding",
      "additionalItems",
      "then",
      "else"
    ];
    var TYPES = ["number", "integer", "string", "array", "object", "boolean", "null"];
    RULES.all = toHash(ALL);
    RULES.types = toHash(TYPES);
    RULES.forEach(function(group) {
      group.rules = group.rules.map(function(keyword) {
        var implKeywords;
        if (typeof keyword == "object") {
          var key = Object.keys(keyword)[0];
          implKeywords = keyword[key];
          keyword = key;
          implKeywords.forEach(function(k) {
            ALL.push(k);
            RULES.all[k] = true;
          });
        }
        ALL.push(keyword);
        var rule = RULES.all[keyword] = {
          keyword,
          code: ruleModules[keyword],
          implements: implKeywords
        };
        return rule;
      });
      RULES.all.$comment = {
        keyword: "$comment",
        code: ruleModules.$comment
      };
      if (group.type)
        RULES.types[group.type] = group;
    });
    RULES.keywords = toHash(ALL.concat(KEYWORDS));
    RULES.custom = {};
    return RULES;
  };
});

// node_modules/ajv/lib/data.js
var require_data = __commonJS((exports, module) => {
  var KEYWORDS = [
    "multipleOf",
    "maximum",
    "exclusiveMaximum",
    "minimum",
    "exclusiveMinimum",
    "maxLength",
    "minLength",
    "pattern",
    "additionalItems",
    "maxItems",
    "minItems",
    "uniqueItems",
    "maxProperties",
    "minProperties",
    "required",
    "additionalProperties",
    "enum",
    "format",
    "const"
  ];
  module.exports = function(metaSchema, keywordsJsonPointers) {
    for (var i = 0;i < keywordsJsonPointers.length; i++) {
      metaSchema = JSON.parse(JSON.stringify(metaSchema));
      var segments = keywordsJsonPointers[i].split("/");
      var keywords = metaSchema;
      var j;
      for (j = 1;j < segments.length; j++)
        keywords = keywords[segments[j]];
      for (j = 0;j < KEYWORDS.length; j++) {
        var key = KEYWORDS[j];
        var schema = keywords[key];
        if (schema) {
          keywords[key] = {
            anyOf: [
              schema,
              { $ref: "https://raw.githubusercontent.com/ajv-validator/ajv/master/lib/refs/data.json#" }
            ]
          };
        }
      }
    }
    return metaSchema;
  };
});

// node_modules/ajv/lib/compile/async.js
var require_async = __commonJS((exports, module) => {
  var MissingRefError = require_error_classes().MissingRef;
  module.exports = compileAsync;
  function compileAsync(schema, meta, callback) {
    var self2 = this;
    if (typeof this._opts.loadSchema != "function")
      throw new Error("options.loadSchema should be a function");
    if (typeof meta == "function") {
      callback = meta;
      meta = undefined;
    }
    var p = loadMetaSchemaOf(schema).then(function() {
      var schemaObj = self2._addSchema(schema, undefined, meta);
      return schemaObj.validate || _compileAsync(schemaObj);
    });
    if (callback) {
      p.then(function(v) {
        callback(null, v);
      }, callback);
    }
    return p;
    function loadMetaSchemaOf(sch) {
      var $schema = sch.$schema;
      return $schema && !self2.getSchema($schema) ? compileAsync.call(self2, { $ref: $schema }, true) : Promise.resolve();
    }
    function _compileAsync(schemaObj) {
      try {
        return self2._compile(schemaObj);
      } catch (e) {
        if (e instanceof MissingRefError)
          return loadMissingSchema(e);
        throw e;
      }
      function loadMissingSchema(e) {
        var ref = e.missingSchema;
        if (added(ref))
          throw new Error("Schema " + ref + " is loaded but " + e.missingRef + " cannot be resolved");
        var schemaPromise = self2._loadingSchemas[ref];
        if (!schemaPromise) {
          schemaPromise = self2._loadingSchemas[ref] = self2._opts.loadSchema(ref);
          schemaPromise.then(removePromise, removePromise);
        }
        return schemaPromise.then(function(sch) {
          if (!added(ref)) {
            return loadMetaSchemaOf(sch).then(function() {
              if (!added(ref))
                self2.addSchema(sch, ref, undefined, meta);
            });
          }
        }).then(function() {
          return _compileAsync(schemaObj);
        });
        function removePromise() {
          delete self2._loadingSchemas[ref];
        }
        function added(ref2) {
          return self2._refs[ref2] || self2._schemas[ref2];
        }
      }
    }
  }
});

// node_modules/ajv/lib/dotjs/custom.js
var require_custom = __commonJS((exports, module) => {
  module.exports = function generate_custom(it, $keyword, $ruleType) {
    var out = " ";
    var $lvl = it.level;
    var $dataLvl = it.dataLevel;
    var $schema = it.schema[$keyword];
    var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
    var $errSchemaPath = it.errSchemaPath + "/" + $keyword;
    var $breakOnError = !it.opts.allErrors;
    var $errorKeyword;
    var $data = "data" + ($dataLvl || "");
    var $valid = "valid" + $lvl;
    var $errs = "errs__" + $lvl;
    var $isData = it.opts.$data && $schema && $schema.$data, $schemaValue;
    if ($isData) {
      out += " var schema" + $lvl + " = " + it.util.getData($schema.$data, $dataLvl, it.dataPathArr) + "; ";
      $schemaValue = "schema" + $lvl;
    } else {
      $schemaValue = $schema;
    }
    var $rule = this, $definition = "definition" + $lvl, $rDef = $rule.definition, $closingBraces = "";
    var $compile, $inline, $macro, $ruleValidate, $validateCode;
    if ($isData && $rDef.$data) {
      $validateCode = "keywordValidate" + $lvl;
      var $validateSchema = $rDef.validateSchema;
      out += " var " + $definition + " = RULES.custom['" + $keyword + "'].definition; var " + $validateCode + " = " + $definition + ".validate;";
    } else {
      $ruleValidate = it.useCustomRule($rule, $schema, it.schema, it);
      if (!$ruleValidate)
        return;
      $schemaValue = "validate.schema" + $schemaPath;
      $validateCode = $ruleValidate.code;
      $compile = $rDef.compile;
      $inline = $rDef.inline;
      $macro = $rDef.macro;
    }
    var $ruleErrs = $validateCode + ".errors", $i = "i" + $lvl, $ruleErr = "ruleErr" + $lvl, $asyncKeyword = $rDef.async;
    if ($asyncKeyword && !it.async)
      throw new Error("async keyword in sync schema");
    if (!($inline || $macro)) {
      out += "" + $ruleErrs + " = null;";
    }
    out += "var " + $errs + " = errors;var " + $valid + ";";
    if ($isData && $rDef.$data) {
      $closingBraces += "}";
      out += " if (" + $schemaValue + " === undefined) { " + $valid + " = true; } else { ";
      if ($validateSchema) {
        $closingBraces += "}";
        out += " " + $valid + " = " + $definition + ".validateSchema(" + $schemaValue + "); if (" + $valid + ") { ";
      }
    }
    if ($inline) {
      if ($rDef.statements) {
        out += " " + $ruleValidate.validate + " ";
      } else {
        out += " " + $valid + " = " + $ruleValidate.validate + "; ";
      }
    } else if ($macro) {
      var $it = it.util.copy(it);
      var $closingBraces = "";
      $it.level++;
      var $nextValid = "valid" + $it.level;
      $it.schema = $ruleValidate.validate;
      $it.schemaPath = "";
      var $wasComposite = it.compositeRule;
      it.compositeRule = $it.compositeRule = true;
      var $code = it.validate($it).replace(/validate\.schema/g, $validateCode);
      it.compositeRule = $it.compositeRule = $wasComposite;
      out += " " + $code;
    } else {
      var $$outStack = $$outStack || [];
      $$outStack.push(out);
      out = "";
      out += "  " + $validateCode + ".call( ";
      if (it.opts.passContext) {
        out += "this";
      } else {
        out += "self";
      }
      if ($compile || $rDef.schema === false) {
        out += " , " + $data + " ";
      } else {
        out += " , " + $schemaValue + " , " + $data + " , validate.schema" + it.schemaPath + " ";
      }
      out += " , (dataPath || '')";
      if (it.errorPath != '""') {
        out += " + " + it.errorPath;
      }
      var $parentData = $dataLvl ? "data" + ($dataLvl - 1 || "") : "parentData", $parentDataProperty = $dataLvl ? it.dataPathArr[$dataLvl] : "parentDataProperty";
      out += " , " + $parentData + " , " + $parentDataProperty + " , rootData )  ";
      var def_callRuleValidate = out;
      out = $$outStack.pop();
      if ($rDef.errors === false) {
        out += " " + $valid + " = ";
        if ($asyncKeyword) {
          out += "await ";
        }
        out += "" + def_callRuleValidate + "; ";
      } else {
        if ($asyncKeyword) {
          $ruleErrs = "customErrors" + $lvl;
          out += " var " + $ruleErrs + " = null; try { " + $valid + " = await " + def_callRuleValidate + "; } catch (e) { " + $valid + " = false; if (e instanceof ValidationError) " + $ruleErrs + " = e.errors; else throw e; } ";
        } else {
          out += " " + $ruleErrs + " = null; " + $valid + " = " + def_callRuleValidate + "; ";
        }
      }
    }
    if ($rDef.modifying) {
      out += " if (" + $parentData + ") " + $data + " = " + $parentData + "[" + $parentDataProperty + "];";
    }
    out += "" + $closingBraces;
    if ($rDef.valid) {
      if ($breakOnError) {
        out += " if (true) { ";
      }
    } else {
      out += " if ( ";
      if ($rDef.valid === undefined) {
        out += " !";
        if ($macro) {
          out += "" + $nextValid;
        } else {
          out += "" + $valid;
        }
      } else {
        out += " " + !$rDef.valid + " ";
      }
      out += ") { ";
      $errorKeyword = $rule.keyword;
      var $$outStack = $$outStack || [];
      $$outStack.push(out);
      out = "";
      var $$outStack = $$outStack || [];
      $$outStack.push(out);
      out = "";
      if (it.createErrors !== false) {
        out += " { keyword: '" + ($errorKeyword || "custom") + "' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: { keyword: '" + $rule.keyword + "' } ";
        if (it.opts.messages !== false) {
          out += ` , message: 'should pass "` + $rule.keyword + `" keyword validation' `;
        }
        if (it.opts.verbose) {
          out += " , schema: validate.schema" + $schemaPath + " , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
        }
        out += " } ";
      } else {
        out += " {} ";
      }
      var __err = out;
      out = $$outStack.pop();
      if (!it.compositeRule && $breakOnError) {
        if (it.async) {
          out += " throw new ValidationError([" + __err + "]); ";
        } else {
          out += " validate.errors = [" + __err + "]; return false; ";
        }
      } else {
        out += " var err = " + __err + ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
      }
      var def_customError = out;
      out = $$outStack.pop();
      if ($inline) {
        if ($rDef.errors) {
          if ($rDef.errors != "full") {
            out += "  for (var " + $i + "=" + $errs + "; " + $i + "<errors; " + $i + "++) { var " + $ruleErr + " = vErrors[" + $i + "]; if (" + $ruleErr + ".dataPath === undefined) " + $ruleErr + ".dataPath = (dataPath || '') + " + it.errorPath + "; if (" + $ruleErr + ".schemaPath === undefined) { " + $ruleErr + '.schemaPath = "' + $errSchemaPath + '"; } ';
            if (it.opts.verbose) {
              out += " " + $ruleErr + ".schema = " + $schemaValue + "; " + $ruleErr + ".data = " + $data + "; ";
            }
            out += " } ";
          }
        } else {
          if ($rDef.errors === false) {
            out += " " + def_customError + " ";
          } else {
            out += " if (" + $errs + " == errors) { " + def_customError + " } else {  for (var " + $i + "=" + $errs + "; " + $i + "<errors; " + $i + "++) { var " + $ruleErr + " = vErrors[" + $i + "]; if (" + $ruleErr + ".dataPath === undefined) " + $ruleErr + ".dataPath = (dataPath || '') + " + it.errorPath + "; if (" + $ruleErr + ".schemaPath === undefined) { " + $ruleErr + '.schemaPath = "' + $errSchemaPath + '"; } ';
            if (it.opts.verbose) {
              out += " " + $ruleErr + ".schema = " + $schemaValue + "; " + $ruleErr + ".data = " + $data + "; ";
            }
            out += " } } ";
          }
        }
      } else if ($macro) {
        out += "   var err =   ";
        if (it.createErrors !== false) {
          out += " { keyword: '" + ($errorKeyword || "custom") + "' , dataPath: (dataPath || '') + " + it.errorPath + " , schemaPath: " + it.util.toQuotedString($errSchemaPath) + " , params: { keyword: '" + $rule.keyword + "' } ";
          if (it.opts.messages !== false) {
            out += ` , message: 'should pass "` + $rule.keyword + `" keyword validation' `;
          }
          if (it.opts.verbose) {
            out += " , schema: validate.schema" + $schemaPath + " , parentSchema: validate.schema" + it.schemaPath + " , data: " + $data + " ";
          }
          out += " } ";
        } else {
          out += " {} ";
        }
        out += ";  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ";
        if (!it.compositeRule && $breakOnError) {
          if (it.async) {
            out += " throw new ValidationError(vErrors); ";
          } else {
            out += " validate.errors = vErrors; return false; ";
          }
        }
      } else {
        if ($rDef.errors === false) {
          out += " " + def_customError + " ";
        } else {
          out += " if (Array.isArray(" + $ruleErrs + ")) { if (vErrors === null) vErrors = " + $ruleErrs + "; else vErrors = vErrors.concat(" + $ruleErrs + "); errors = vErrors.length;  for (var " + $i + "=" + $errs + "; " + $i + "<errors; " + $i + "++) { var " + $ruleErr + " = vErrors[" + $i + "]; if (" + $ruleErr + ".dataPath === undefined) " + $ruleErr + ".dataPath = (dataPath || '') + " + it.errorPath + ";  " + $ruleErr + '.schemaPath = "' + $errSchemaPath + '";  ';
          if (it.opts.verbose) {
            out += " " + $ruleErr + ".schema = " + $schemaValue + "; " + $ruleErr + ".data = " + $data + "; ";
          }
          out += " } } else { " + def_customError + " } ";
        }
      }
      out += " } ";
      if ($breakOnError) {
        out += " else { ";
      }
    }
    return out;
  };
});

// node_modules/ajv/lib/refs/json-schema-draft-07.json
var require_json_schema_draft_07 = __commonJS((exports, module) => {
  module.exports = {
    $schema: "http://json-schema.org/draft-07/schema#",
    $id: "http://json-schema.org/draft-07/schema#",
    title: "Core schema meta-schema",
    definitions: {
      schemaArray: {
        type: "array",
        minItems: 1,
        items: { $ref: "#" }
      },
      nonNegativeInteger: {
        type: "integer",
        minimum: 0
      },
      nonNegativeIntegerDefault0: {
        allOf: [
          { $ref: "#/definitions/nonNegativeInteger" },
          { default: 0 }
        ]
      },
      simpleTypes: {
        enum: [
          "array",
          "boolean",
          "integer",
          "null",
          "number",
          "object",
          "string"
        ]
      },
      stringArray: {
        type: "array",
        items: { type: "string" },
        uniqueItems: true,
        default: []
      }
    },
    type: ["object", "boolean"],
    properties: {
      $id: {
        type: "string",
        format: "uri-reference"
      },
      $schema: {
        type: "string",
        format: "uri"
      },
      $ref: {
        type: "string",
        format: "uri-reference"
      },
      $comment: {
        type: "string"
      },
      title: {
        type: "string"
      },
      description: {
        type: "string"
      },
      default: true,
      readOnly: {
        type: "boolean",
        default: false
      },
      examples: {
        type: "array",
        items: true
      },
      multipleOf: {
        type: "number",
        exclusiveMinimum: 0
      },
      maximum: {
        type: "number"
      },
      exclusiveMaximum: {
        type: "number"
      },
      minimum: {
        type: "number"
      },
      exclusiveMinimum: {
        type: "number"
      },
      maxLength: { $ref: "#/definitions/nonNegativeInteger" },
      minLength: { $ref: "#/definitions/nonNegativeIntegerDefault0" },
      pattern: {
        type: "string",
        format: "regex"
      },
      additionalItems: { $ref: "#" },
      items: {
        anyOf: [
          { $ref: "#" },
          { $ref: "#/definitions/schemaArray" }
        ],
        default: true
      },
      maxItems: { $ref: "#/definitions/nonNegativeInteger" },
      minItems: { $ref: "#/definitions/nonNegativeIntegerDefault0" },
      uniqueItems: {
        type: "boolean",
        default: false
      },
      contains: { $ref: "#" },
      maxProperties: { $ref: "#/definitions/nonNegativeInteger" },
      minProperties: { $ref: "#/definitions/nonNegativeIntegerDefault0" },
      required: { $ref: "#/definitions/stringArray" },
      additionalProperties: { $ref: "#" },
      definitions: {
        type: "object",
        additionalProperties: { $ref: "#" },
        default: {}
      },
      properties: {
        type: "object",
        additionalProperties: { $ref: "#" },
        default: {}
      },
      patternProperties: {
        type: "object",
        additionalProperties: { $ref: "#" },
        propertyNames: { format: "regex" },
        default: {}
      },
      dependencies: {
        type: "object",
        additionalProperties: {
          anyOf: [
            { $ref: "#" },
            { $ref: "#/definitions/stringArray" }
          ]
        }
      },
      propertyNames: { $ref: "#" },
      const: true,
      enum: {
        type: "array",
        items: true,
        minItems: 1,
        uniqueItems: true
      },
      type: {
        anyOf: [
          { $ref: "#/definitions/simpleTypes" },
          {
            type: "array",
            items: { $ref: "#/definitions/simpleTypes" },
            minItems: 1,
            uniqueItems: true
          }
        ]
      },
      format: { type: "string" },
      contentMediaType: { type: "string" },
      contentEncoding: { type: "string" },
      if: { $ref: "#" },
      then: { $ref: "#" },
      else: { $ref: "#" },
      allOf: { $ref: "#/definitions/schemaArray" },
      anyOf: { $ref: "#/definitions/schemaArray" },
      oneOf: { $ref: "#/definitions/schemaArray" },
      not: { $ref: "#" }
    },
    default: true
  };
});

// node_modules/ajv/lib/definition_schema.js
var require_definition_schema = __commonJS((exports, module) => {
  var metaSchema = require_json_schema_draft_07();
  module.exports = {
    $id: "https://github.com/ajv-validator/ajv/blob/master/lib/definition_schema.js",
    definitions: {
      simpleTypes: metaSchema.definitions.simpleTypes
    },
    type: "object",
    dependencies: {
      schema: ["validate"],
      $data: ["validate"],
      statements: ["inline"],
      valid: { not: { required: ["macro"] } }
    },
    properties: {
      type: metaSchema.properties.type,
      schema: { type: "boolean" },
      statements: { type: "boolean" },
      dependencies: {
        type: "array",
        items: { type: "string" }
      },
      metaSchema: { type: "object" },
      modifying: { type: "boolean" },
      valid: { type: "boolean" },
      $data: { type: "boolean" },
      async: { type: "boolean" },
      errors: {
        anyOf: [
          { type: "boolean" },
          { const: "full" }
        ]
      }
    }
  };
});

// node_modules/ajv/lib/keyword.js
var require_keyword = __commonJS((exports, module) => {
  var IDENTIFIER = /^[a-z_$][a-z0-9_$-]*$/i;
  var customRuleCode = require_custom();
  var definitionSchema = require_definition_schema();
  module.exports = {
    add: addKeyword,
    get: getKeyword,
    remove: removeKeyword,
    validate: validateKeyword
  };
  function addKeyword(keyword, definition) {
    var RULES = this.RULES;
    if (RULES.keywords[keyword])
      throw new Error("Keyword " + keyword + " is already defined");
    if (!IDENTIFIER.test(keyword))
      throw new Error("Keyword " + keyword + " is not a valid identifier");
    if (definition) {
      this.validateKeyword(definition, true);
      var dataType = definition.type;
      if (Array.isArray(dataType)) {
        for (var i = 0;i < dataType.length; i++)
          _addRule(keyword, dataType[i], definition);
      } else {
        _addRule(keyword, dataType, definition);
      }
      var metaSchema = definition.metaSchema;
      if (metaSchema) {
        if (definition.$data && this._opts.$data) {
          metaSchema = {
            anyOf: [
              metaSchema,
              { $ref: "https://raw.githubusercontent.com/ajv-validator/ajv/master/lib/refs/data.json#" }
            ]
          };
        }
        definition.validateSchema = this.compile(metaSchema, true);
      }
    }
    RULES.keywords[keyword] = RULES.all[keyword] = true;
    function _addRule(keyword2, dataType2, definition2) {
      var ruleGroup;
      for (var i2 = 0;i2 < RULES.length; i2++) {
        var rg = RULES[i2];
        if (rg.type == dataType2) {
          ruleGroup = rg;
          break;
        }
      }
      if (!ruleGroup) {
        ruleGroup = { type: dataType2, rules: [] };
        RULES.push(ruleGroup);
      }
      var rule = {
        keyword: keyword2,
        definition: definition2,
        custom: true,
        code: customRuleCode,
        implements: definition2.implements
      };
      ruleGroup.rules.push(rule);
      RULES.custom[keyword2] = rule;
    }
    return this;
  }
  function getKeyword(keyword) {
    var rule = this.RULES.custom[keyword];
    return rule ? rule.definition : this.RULES.keywords[keyword] || false;
  }
  function removeKeyword(keyword) {
    var RULES = this.RULES;
    delete RULES.keywords[keyword];
    delete RULES.all[keyword];
    delete RULES.custom[keyword];
    for (var i = 0;i < RULES.length; i++) {
      var rules = RULES[i].rules;
      for (var j = 0;j < rules.length; j++) {
        if (rules[j].keyword == keyword) {
          rules.splice(j, 1);
          break;
        }
      }
    }
    return this;
  }
  function validateKeyword(definition, throwError) {
    validateKeyword.errors = null;
    var v = this._validateKeyword = this._validateKeyword || this.compile(definitionSchema, true);
    if (v(definition))
      return true;
    validateKeyword.errors = v.errors;
    if (throwError)
      throw new Error("custom keyword definition is invalid: " + this.errorsText(v.errors));
    else
      return false;
  }
});

// node_modules/ajv/lib/refs/data.json
var require_data2 = __commonJS((exports, module) => {
  module.exports = {
    $schema: "http://json-schema.org/draft-07/schema#",
    $id: "https://raw.githubusercontent.com/ajv-validator/ajv/master/lib/refs/data.json#",
    description: "Meta-schema for $data reference (JSON Schema extension proposal)",
    type: "object",
    required: ["$data"],
    properties: {
      $data: {
        type: "string",
        anyOf: [
          { format: "relative-json-pointer" },
          { format: "json-pointer" }
        ]
      }
    },
    additionalProperties: false
  };
});

// node_modules/ajv/lib/ajv.js
var require_ajv = __commonJS((exports, module) => {
  var compileSchema = require_compile();
  var resolve = require_resolve();
  var Cache = require_cache();
  var SchemaObject = require_schema_obj();
  var stableStringify = require_fast_json_stable_stringify();
  var formats = require_formats();
  var rules = require_rules();
  var $dataMetaSchema = require_data();
  var util3 = require_util();
  module.exports = Ajv;
  Ajv.prototype.validate = validate;
  Ajv.prototype.compile = compile;
  Ajv.prototype.addSchema = addSchema;
  Ajv.prototype.addMetaSchema = addMetaSchema;
  Ajv.prototype.validateSchema = validateSchema;
  Ajv.prototype.getSchema = getSchema;
  Ajv.prototype.removeSchema = removeSchema;
  Ajv.prototype.addFormat = addFormat;
  Ajv.prototype.errorsText = errorsText;
  Ajv.prototype._addSchema = _addSchema;
  Ajv.prototype._compile = _compile;
  Ajv.prototype.compileAsync = require_async();
  var customKeyword = require_keyword();
  Ajv.prototype.addKeyword = customKeyword.add;
  Ajv.prototype.getKeyword = customKeyword.get;
  Ajv.prototype.removeKeyword = customKeyword.remove;
  Ajv.prototype.validateKeyword = customKeyword.validate;
  var errorClasses = require_error_classes();
  Ajv.ValidationError = errorClasses.Validation;
  Ajv.MissingRefError = errorClasses.MissingRef;
  Ajv.$dataMetaSchema = $dataMetaSchema;
  var META_SCHEMA_ID = "http://json-schema.org/draft-07/schema";
  var META_IGNORE_OPTIONS = ["removeAdditional", "useDefaults", "coerceTypes", "strictDefaults"];
  var META_SUPPORT_DATA = ["/properties"];
  function Ajv(opts) {
    if (!(this instanceof Ajv))
      return new Ajv(opts);
    opts = this._opts = util3.copy(opts) || {};
    setLogger(this);
    this._schemas = {};
    this._refs = {};
    this._fragments = {};
    this._formats = formats(opts.format);
    this._cache = opts.cache || new Cache;
    this._loadingSchemas = {};
    this._compilations = [];
    this.RULES = rules();
    this._getId = chooseGetId(opts);
    opts.loopRequired = opts.loopRequired || Infinity;
    if (opts.errorDataPath == "property")
      opts._errorDataPathProperty = true;
    if (opts.serialize === undefined)
      opts.serialize = stableStringify;
    this._metaOpts = getMetaSchemaOptions(this);
    if (opts.formats)
      addInitialFormats(this);
    if (opts.keywords)
      addInitialKeywords(this);
    addDefaultMetaSchema(this);
    if (typeof opts.meta == "object")
      this.addMetaSchema(opts.meta);
    if (opts.nullable)
      this.addKeyword("nullable", { metaSchema: { type: "boolean" } });
    addInitialSchemas(this);
  }
  function validate(schemaKeyRef, data) {
    var v;
    if (typeof schemaKeyRef == "string") {
      v = this.getSchema(schemaKeyRef);
      if (!v)
        throw new Error('no schema with key or ref "' + schemaKeyRef + '"');
    } else {
      var schemaObj = this._addSchema(schemaKeyRef);
      v = schemaObj.validate || this._compile(schemaObj);
    }
    var valid = v(data);
    if (v.$async !== true)
      this.errors = v.errors;
    return valid;
  }
  function compile(schema, _meta) {
    var schemaObj = this._addSchema(schema, undefined, _meta);
    return schemaObj.validate || this._compile(schemaObj);
  }
  function addSchema(schema, key, _skipValidation, _meta) {
    if (Array.isArray(schema)) {
      for (var i = 0;i < schema.length; i++)
        this.addSchema(schema[i], undefined, _skipValidation, _meta);
      return this;
    }
    var id = this._getId(schema);
    if (id !== undefined && typeof id != "string")
      throw new Error("schema id must be string");
    key = resolve.normalizeId(key || id);
    checkUnique(this, key);
    this._schemas[key] = this._addSchema(schema, _skipValidation, _meta, true);
    return this;
  }
  function addMetaSchema(schema, key, skipValidation) {
    this.addSchema(schema, key, skipValidation, true);
    return this;
  }
  function validateSchema(schema, throwOrLogError) {
    var $schema = schema.$schema;
    if ($schema !== undefined && typeof $schema != "string")
      throw new Error("$schema must be a string");
    $schema = $schema || this._opts.defaultMeta || defaultMeta(this);
    if (!$schema) {
      this.logger.warn("meta-schema not available");
      this.errors = null;
      return true;
    }
    var valid = this.validate($schema, schema);
    if (!valid && throwOrLogError) {
      var message = "schema is invalid: " + this.errorsText();
      if (this._opts.validateSchema == "log")
        this.logger.error(message);
      else
        throw new Error(message);
    }
    return valid;
  }
  function defaultMeta(self2) {
    var meta = self2._opts.meta;
    self2._opts.defaultMeta = typeof meta == "object" ? self2._getId(meta) || meta : self2.getSchema(META_SCHEMA_ID) ? META_SCHEMA_ID : undefined;
    return self2._opts.defaultMeta;
  }
  function getSchema(keyRef) {
    var schemaObj = _getSchemaObj(this, keyRef);
    switch (typeof schemaObj) {
      case "object":
        return schemaObj.validate || this._compile(schemaObj);
      case "string":
        return this.getSchema(schemaObj);
      case "undefined":
        return _getSchemaFragment(this, keyRef);
    }
  }
  function _getSchemaFragment(self2, ref) {
    var res = resolve.schema.call(self2, { schema: {} }, ref);
    if (res) {
      var { schema, root, baseId } = res;
      var v = compileSchema.call(self2, schema, root, undefined, baseId);
      self2._fragments[ref] = new SchemaObject({
        ref,
        fragment: true,
        schema,
        root,
        baseId,
        validate: v
      });
      return v;
    }
  }
  function _getSchemaObj(self2, keyRef) {
    keyRef = resolve.normalizeId(keyRef);
    return self2._schemas[keyRef] || self2._refs[keyRef] || self2._fragments[keyRef];
  }
  function removeSchema(schemaKeyRef) {
    if (schemaKeyRef instanceof RegExp) {
      _removeAllSchemas(this, this._schemas, schemaKeyRef);
      _removeAllSchemas(this, this._refs, schemaKeyRef);
      return this;
    }
    switch (typeof schemaKeyRef) {
      case "undefined":
        _removeAllSchemas(this, this._schemas);
        _removeAllSchemas(this, this._refs);
        this._cache.clear();
        return this;
      case "string":
        var schemaObj = _getSchemaObj(this, schemaKeyRef);
        if (schemaObj)
          this._cache.del(schemaObj.cacheKey);
        delete this._schemas[schemaKeyRef];
        delete this._refs[schemaKeyRef];
        return this;
      case "object":
        var serialize = this._opts.serialize;
        var cacheKey = serialize ? serialize(schemaKeyRef) : schemaKeyRef;
        this._cache.del(cacheKey);
        var id = this._getId(schemaKeyRef);
        if (id) {
          id = resolve.normalizeId(id);
          delete this._schemas[id];
          delete this._refs[id];
        }
    }
    return this;
  }
  function _removeAllSchemas(self2, schemas, regex) {
    for (var keyRef in schemas) {
      var schemaObj = schemas[keyRef];
      if (!schemaObj.meta && (!regex || regex.test(keyRef))) {
        self2._cache.del(schemaObj.cacheKey);
        delete schemas[keyRef];
      }
    }
  }
  function _addSchema(schema, skipValidation, meta, shouldAddSchema) {
    if (typeof schema != "object" && typeof schema != "boolean")
      throw new Error("schema should be object or boolean");
    var serialize = this._opts.serialize;
    var cacheKey = serialize ? serialize(schema) : schema;
    var cached = this._cache.get(cacheKey);
    if (cached)
      return cached;
    shouldAddSchema = shouldAddSchema || this._opts.addUsedSchema !== false;
    var id = resolve.normalizeId(this._getId(schema));
    if (id && shouldAddSchema)
      checkUnique(this, id);
    var willValidate = this._opts.validateSchema !== false && !skipValidation;
    var recursiveMeta;
    if (willValidate && !(recursiveMeta = id && id == resolve.normalizeId(schema.$schema)))
      this.validateSchema(schema, true);
    var localRefs = resolve.ids.call(this, schema);
    var schemaObj = new SchemaObject({
      id,
      schema,
      localRefs,
      cacheKey,
      meta
    });
    if (id[0] != "#" && shouldAddSchema)
      this._refs[id] = schemaObj;
    this._cache.put(cacheKey, schemaObj);
    if (willValidate && recursiveMeta)
      this.validateSchema(schema, true);
    return schemaObj;
  }
  function _compile(schemaObj, root) {
    if (schemaObj.compiling) {
      schemaObj.validate = callValidate;
      callValidate.schema = schemaObj.schema;
      callValidate.errors = null;
      callValidate.root = root ? root : callValidate;
      if (schemaObj.schema.$async === true)
        callValidate.$async = true;
      return callValidate;
    }
    schemaObj.compiling = true;
    var currentOpts;
    if (schemaObj.meta) {
      currentOpts = this._opts;
      this._opts = this._metaOpts;
    }
    var v;
    try {
      v = compileSchema.call(this, schemaObj.schema, root, schemaObj.localRefs);
    } catch (e) {
      delete schemaObj.validate;
      throw e;
    } finally {
      schemaObj.compiling = false;
      if (schemaObj.meta)
        this._opts = currentOpts;
    }
    schemaObj.validate = v;
    schemaObj.refs = v.refs;
    schemaObj.refVal = v.refVal;
    schemaObj.root = v.root;
    return v;
    function callValidate() {
      var _validate = schemaObj.validate;
      var result = _validate.apply(this, arguments);
      callValidate.errors = _validate.errors;
      return result;
    }
  }
  function chooseGetId(opts) {
    switch (opts.schemaId) {
      case "auto":
        return _get$IdOrId;
      case "id":
        return _getId;
      default:
        return _get$Id;
    }
  }
  function _getId(schema) {
    if (schema.$id)
      this.logger.warn("schema $id ignored", schema.$id);
    return schema.id;
  }
  function _get$Id(schema) {
    if (schema.id)
      this.logger.warn("schema id ignored", schema.id);
    return schema.$id;
  }
  function _get$IdOrId(schema) {
    if (schema.$id && schema.id && schema.$id != schema.id)
      throw new Error("schema $id is different from id");
    return schema.$id || schema.id;
  }
  function errorsText(errors2, options) {
    errors2 = errors2 || this.errors;
    if (!errors2)
      return "No errors";
    options = options || {};
    var separator = options.separator === undefined ? ", " : options.separator;
    var dataVar = options.dataVar === undefined ? "data" : options.dataVar;
    var text = "";
    for (var i = 0;i < errors2.length; i++) {
      var e = errors2[i];
      if (e)
        text += dataVar + e.dataPath + " " + e.message + separator;
    }
    return text.slice(0, -separator.length);
  }
  function addFormat(name, format) {
    if (typeof format == "string")
      format = new RegExp(format);
    this._formats[name] = format;
    return this;
  }
  function addDefaultMetaSchema(self2) {
    var $dataSchema;
    if (self2._opts.$data) {
      $dataSchema = require_data2();
      self2.addMetaSchema($dataSchema, $dataSchema.$id, true);
    }
    if (self2._opts.meta === false)
      return;
    var metaSchema = require_json_schema_draft_07();
    if (self2._opts.$data)
      metaSchema = $dataMetaSchema(metaSchema, META_SUPPORT_DATA);
    self2.addMetaSchema(metaSchema, META_SCHEMA_ID, true);
    self2._refs["http://json-schema.org/schema"] = META_SCHEMA_ID;
  }
  function addInitialSchemas(self2) {
    var optsSchemas = self2._opts.schemas;
    if (!optsSchemas)
      return;
    if (Array.isArray(optsSchemas))
      self2.addSchema(optsSchemas);
    else
      for (var key in optsSchemas)
        self2.addSchema(optsSchemas[key], key);
  }
  function addInitialFormats(self2) {
    for (var name in self2._opts.formats) {
      var format = self2._opts.formats[name];
      self2.addFormat(name, format);
    }
  }
  function addInitialKeywords(self2) {
    for (var name in self2._opts.keywords) {
      var keyword = self2._opts.keywords[name];
      self2.addKeyword(name, keyword);
    }
  }
  function checkUnique(self2, id) {
    if (self2._schemas[id] || self2._refs[id])
      throw new Error('schema with key or id "' + id + '" already exists');
  }
  function getMetaSchemaOptions(self2) {
    var metaOpts = util3.copy(self2._opts);
    for (var i = 0;i < META_IGNORE_OPTIONS.length; i++)
      delete metaOpts[META_IGNORE_OPTIONS[i]];
    return metaOpts;
  }
  function setLogger(self2) {
    var logger = self2._opts.logger;
    if (logger === false) {
      self2.logger = { log: noop, warn: noop, error: noop };
    } else {
      if (logger === undefined)
        logger = console;
      if (!(typeof logger == "object" && logger.log && logger.warn && logger.error))
        throw new Error("logger must implement log, warn and error methods");
      self2.logger = logger;
    }
  }
  function noop() {}
});

// node_modules/secure-json-parse/index.js
var require_secure_json_parse = __commonJS((exports, module) => {
  var hasBuffer = typeof Buffer !== "undefined";
  var suspectProtoRx = /"(?:_|\\u005[Ff])(?:_|\\u005[Ff])(?:p|\\u0070)(?:r|\\u0072)(?:o|\\u006[Ff])(?:t|\\u0074)(?:o|\\u006[Ff])(?:_|\\u005[Ff])(?:_|\\u005[Ff])"\s*:/;
  var suspectConstructorRx = /"(?:c|\\u0063)(?:o|\\u006[Ff])(?:n|\\u006[Ee])(?:s|\\u0073)(?:t|\\u0074)(?:r|\\u0072)(?:u|\\u0075)(?:c|\\u0063)(?:t|\\u0074)(?:o|\\u006[Ff])(?:r|\\u0072)"\s*:/;
  function _parse(text, reviver, options) {
    if (options == null) {
      if (reviver !== null && typeof reviver === "object") {
        options = reviver;
        reviver = undefined;
      }
    }
    if (hasBuffer && Buffer.isBuffer(text)) {
      text = text.toString();
    }
    if (text && text.charCodeAt(0) === 65279) {
      text = text.slice(1);
    }
    const obj = JSON.parse(text, reviver);
    if (obj === null || typeof obj !== "object") {
      return obj;
    }
    const protoAction = options && options.protoAction || "error";
    const constructorAction = options && options.constructorAction || "error";
    if (protoAction === "ignore" && constructorAction === "ignore") {
      return obj;
    }
    if (protoAction !== "ignore" && constructorAction !== "ignore") {
      if (suspectProtoRx.test(text) === false && suspectConstructorRx.test(text) === false) {
        return obj;
      }
    } else if (protoAction !== "ignore" && constructorAction === "ignore") {
      if (suspectProtoRx.test(text) === false) {
        return obj;
      }
    } else {
      if (suspectConstructorRx.test(text) === false) {
        return obj;
      }
    }
    return filter(obj, { protoAction, constructorAction, safe: options && options.safe });
  }
  function filter(obj, { protoAction = "error", constructorAction = "error", safe } = {}) {
    let next = [obj];
    while (next.length) {
      const nodes = next;
      next = [];
      for (const node of nodes) {
        if (protoAction !== "ignore" && Object.prototype.hasOwnProperty.call(node, "__proto__")) {
          if (safe === true) {
            return null;
          } else if (protoAction === "error") {
            throw new SyntaxError("Object contains forbidden prototype property");
          }
          delete node.__proto__;
        }
        if (constructorAction !== "ignore" && Object.prototype.hasOwnProperty.call(node, "constructor") && Object.prototype.hasOwnProperty.call(node.constructor, "prototype")) {
          if (safe === true) {
            return null;
          } else if (constructorAction === "error") {
            throw new SyntaxError("Object contains forbidden prototype property");
          }
          delete node.constructor;
        }
        for (const key in node) {
          const value = node[key];
          if (value && typeof value === "object") {
            next.push(value);
          }
        }
      }
    }
    return obj;
  }
  function parse(text, reviver, options) {
    const stackTraceLimit = Error.stackTraceLimit;
    Error.stackTraceLimit = 0;
    try {
      return _parse(text, reviver, options);
    } finally {
      Error.stackTraceLimit = stackTraceLimit;
    }
  }
  function safeParse(text, reviver) {
    const stackTraceLimit = Error.stackTraceLimit;
    Error.stackTraceLimit = 0;
    try {
      return _parse(text, reviver, { safe: true });
    } catch (_e) {
      return null;
    } finally {
      Error.stackTraceLimit = stackTraceLimit;
    }
  }
  module.exports = parse;
  module.exports.default = parse;
  module.exports.parse = parse;
  module.exports.safeParse = safeParse;
  module.exports.scan = filter;
});

// node_modules/delayed-stream/lib/delayed_stream.js
var require_delayed_stream = __commonJS((exports, module) => {
  var Stream = __require("stream").Stream;
  var util3 = __require("util");
  module.exports = DelayedStream;
  function DelayedStream() {
    this.source = null;
    this.dataSize = 0;
    this.maxDataSize = 1024 * 1024;
    this.pauseStream = true;
    this._maxDataSizeExceeded = false;
    this._released = false;
    this._bufferedEvents = [];
  }
  util3.inherits(DelayedStream, Stream);
  DelayedStream.create = function(source, options) {
    var delayedStream = new this;
    options = options || {};
    for (var option in options) {
      delayedStream[option] = options[option];
    }
    delayedStream.source = source;
    var realEmit = source.emit;
    source.emit = function() {
      delayedStream._handleEmit(arguments);
      return realEmit.apply(source, arguments);
    };
    source.on("error", function() {});
    if (delayedStream.pauseStream) {
      source.pause();
    }
    return delayedStream;
  };
  Object.defineProperty(DelayedStream.prototype, "readable", {
    configurable: true,
    enumerable: true,
    get: function() {
      return this.source.readable;
    }
  });
  DelayedStream.prototype.setEncoding = function() {
    return this.source.setEncoding.apply(this.source, arguments);
  };
  DelayedStream.prototype.resume = function() {
    if (!this._released) {
      this.release();
    }
    this.source.resume();
  };
  DelayedStream.prototype.pause = function() {
    this.source.pause();
  };
  DelayedStream.prototype.release = function() {
    this._released = true;
    this._bufferedEvents.forEach(function(args) {
      this.emit.apply(this, args);
    }.bind(this));
    this._bufferedEvents = [];
  };
  DelayedStream.prototype.pipe = function() {
    var r = Stream.prototype.pipe.apply(this, arguments);
    this.resume();
    return r;
  };
  DelayedStream.prototype._handleEmit = function(args) {
    if (this._released) {
      this.emit.apply(this, args);
      return;
    }
    if (args[0] === "data") {
      this.dataSize += args[1].length;
      this._checkIfMaxDataSizeExceeded();
    }
    this._bufferedEvents.push(args);
  };
  DelayedStream.prototype._checkIfMaxDataSizeExceeded = function() {
    if (this._maxDataSizeExceeded) {
      return;
    }
    if (this.dataSize <= this.maxDataSize) {
      return;
    }
    this._maxDataSizeExceeded = true;
    var message = "DelayedStream#maxDataSize of " + this.maxDataSize + " bytes exceeded.";
    this.emit("error", new Error(message));
  };
});

// node_modules/combined-stream/lib/combined_stream.js
var require_combined_stream = __commonJS((exports, module) => {
  var util3 = __require("util");
  var Stream = __require("stream").Stream;
  var DelayedStream = require_delayed_stream();
  module.exports = CombinedStream;
  function CombinedStream() {
    this.writable = false;
    this.readable = true;
    this.dataSize = 0;
    this.maxDataSize = 2 * 1024 * 1024;
    this.pauseStreams = true;
    this._released = false;
    this._streams = [];
    this._currentStream = null;
    this._insideLoop = false;
    this._pendingNext = false;
  }
  util3.inherits(CombinedStream, Stream);
  CombinedStream.create = function(options) {
    var combinedStream = new this;
    options = options || {};
    for (var option in options) {
      combinedStream[option] = options[option];
    }
    return combinedStream;
  };
  CombinedStream.isStreamLike = function(stream) {
    return typeof stream !== "function" && typeof stream !== "string" && typeof stream !== "boolean" && typeof stream !== "number" && !Buffer.isBuffer(stream);
  };
  CombinedStream.prototype.append = function(stream) {
    var isStreamLike = CombinedStream.isStreamLike(stream);
    if (isStreamLike) {
      if (!(stream instanceof DelayedStream)) {
        var newStream = DelayedStream.create(stream, {
          maxDataSize: Infinity,
          pauseStream: this.pauseStreams
        });
        stream.on("data", this._checkDataSize.bind(this));
        stream = newStream;
      }
      this._handleErrors(stream);
      if (this.pauseStreams) {
        stream.pause();
      }
    }
    this._streams.push(stream);
    return this;
  };
  CombinedStream.prototype.pipe = function(dest, options) {
    Stream.prototype.pipe.call(this, dest, options);
    this.resume();
    return dest;
  };
  CombinedStream.prototype._getNext = function() {
    this._currentStream = null;
    if (this._insideLoop) {
      this._pendingNext = true;
      return;
    }
    this._insideLoop = true;
    try {
      do {
        this._pendingNext = false;
        this._realGetNext();
      } while (this._pendingNext);
    } finally {
      this._insideLoop = false;
    }
  };
  CombinedStream.prototype._realGetNext = function() {
    var stream = this._streams.shift();
    if (typeof stream == "undefined") {
      this.end();
      return;
    }
    if (typeof stream !== "function") {
      this._pipeNext(stream);
      return;
    }
    var getStream = stream;
    getStream(function(stream2) {
      var isStreamLike = CombinedStream.isStreamLike(stream2);
      if (isStreamLike) {
        stream2.on("data", this._checkDataSize.bind(this));
        this._handleErrors(stream2);
      }
      this._pipeNext(stream2);
    }.bind(this));
  };
  CombinedStream.prototype._pipeNext = function(stream) {
    this._currentStream = stream;
    var isStreamLike = CombinedStream.isStreamLike(stream);
    if (isStreamLike) {
      stream.on("end", this._getNext.bind(this));
      stream.pipe(this, { end: false });
      return;
    }
    var value = stream;
    this.write(value);
    this._getNext();
  };
  CombinedStream.prototype._handleErrors = function(stream) {
    var self2 = this;
    stream.on("error", function(err) {
      self2._emitError(err);
    });
  };
  CombinedStream.prototype.write = function(data) {
    this.emit("data", data);
  };
  CombinedStream.prototype.pause = function() {
    if (!this.pauseStreams) {
      return;
    }
    if (this.pauseStreams && this._currentStream && typeof this._currentStream.pause == "function")
      this._currentStream.pause();
    this.emit("pause");
  };
  CombinedStream.prototype.resume = function() {
    if (!this._released) {
      this._released = true;
      this.writable = true;
      this._getNext();
    }
    if (this.pauseStreams && this._currentStream && typeof this._currentStream.resume == "function")
      this._currentStream.resume();
    this.emit("resume");
  };
  CombinedStream.prototype.end = function() {
    this._reset();
    this.emit("end");
  };
  CombinedStream.prototype.destroy = function() {
    this._reset();
    this.emit("close");
  };
  CombinedStream.prototype._reset = function() {
    this.writable = false;
    this._streams = [];
    this._currentStream = null;
  };
  CombinedStream.prototype._checkDataSize = function() {
    this._updateDataSize();
    if (this.dataSize <= this.maxDataSize) {
      return;
    }
    var message = "DelayedStream#maxDataSize of " + this.maxDataSize + " bytes exceeded.";
    this._emitError(new Error(message));
  };
  CombinedStream.prototype._updateDataSize = function() {
    this.dataSize = 0;
    var self2 = this;
    this._streams.forEach(function(stream) {
      if (!stream.dataSize) {
        return;
      }
      self2.dataSize += stream.dataSize;
    });
    if (this._currentStream && this._currentStream.dataSize) {
      this.dataSize += this._currentStream.dataSize;
    }
  };
  CombinedStream.prototype._emitError = function(err) {
    this._reset();
    this.emit("error", err);
  };
});

// node_modules/form-data/node_modules/mime-types/node_modules/mime-db/db.json
var require_db = __commonJS((exports, module) => {
  module.exports = {
    "application/1d-interleaved-parityfec": {
      source: "iana"
    },
    "application/3gpdash-qoe-report+xml": {
      source: "iana",
      charset: "UTF-8",
      compressible: true
    },
    "application/3gpp-ims+xml": {
      source: "iana",
      compressible: true
    },
    "application/3gpphal+json": {
      source: "iana",
      compressible: true
    },
    "application/3gpphalforms+json": {
      source: "iana",
      compressible: true
    },
    "application/a2l": {
      source: "iana"
    },
    "application/ace+cbor": {
      source: "iana"
    },
    "application/activemessage": {
      source: "iana"
    },
    "application/activity+json": {
      source: "iana",
      compressible: true
    },
    "application/alto-costmap+json": {
      source: "iana",
      compressible: true
    },
    "application/alto-costmapfilter+json": {
      source: "iana",
      compressible: true
    },
    "application/alto-directory+json": {
      source: "iana",
      compressible: true
    },
    "application/alto-endpointcost+json": {
      source: "iana",
      compressible: true
    },
    "application/alto-endpointcostparams+json": {
      source: "iana",
      compressible: true
    },
    "application/alto-endpointprop+json": {
      source: "iana",
      compressible: true
    },
    "application/alto-endpointpropparams+json": {
      source: "iana",
      compressible: true
    },
    "application/alto-error+json": {
      source: "iana",
      compressible: true
    },
    "application/alto-networkmap+json": {
      source: "iana",
      compressible: true
    },
    "application/alto-networkmapfilter+json": {
      source: "iana",
      compressible: true
    },
    "application/alto-updatestreamcontrol+json": {
      source: "iana",
      compressible: true
    },
    "application/alto-updatestreamparams+json": {
      source: "iana",
      compressible: true
    },
    "application/aml": {
      source: "iana"
    },
    "application/andrew-inset": {
      source: "iana",
      extensions: ["ez"]
    },
    "application/applefile": {
      source: "iana"
    },
    "application/applixware": {
      source: "apache",
      extensions: ["aw"]
    },
    "application/at+jwt": {
      source: "iana"
    },
    "application/atf": {
      source: "iana"
    },
    "application/atfx": {
      source: "iana"
    },
    "application/atom+xml": {
      source: "iana",
      compressible: true,
      extensions: ["atom"]
    },
    "application/atomcat+xml": {
      source: "iana",
      compressible: true,
      extensions: ["atomcat"]
    },
    "application/atomdeleted+xml": {
      source: "iana",
      compressible: true,
      extensions: ["atomdeleted"]
    },
    "application/atomicmail": {
      source: "iana"
    },
    "application/atomsvc+xml": {
      source: "iana",
      compressible: true,
      extensions: ["atomsvc"]
    },
    "application/atsc-dwd+xml": {
      source: "iana",
      compressible: true,
      extensions: ["dwd"]
    },
    "application/atsc-dynamic-event-message": {
      source: "iana"
    },
    "application/atsc-held+xml": {
      source: "iana",
      compressible: true,
      extensions: ["held"]
    },
    "application/atsc-rdt+json": {
      source: "iana",
      compressible: true
    },
    "application/atsc-rsat+xml": {
      source: "iana",
      compressible: true,
      extensions: ["rsat"]
    },
    "application/atxml": {
      source: "iana"
    },
    "application/auth-policy+xml": {
      source: "iana",
      compressible: true
    },
    "application/bacnet-xdd+zip": {
      source: "iana",
      compressible: false
    },
    "application/batch-smtp": {
      source: "iana"
    },
    "application/bdoc": {
      compressible: false,
      extensions: ["bdoc"]
    },
    "application/beep+xml": {
      source: "iana",
      charset: "UTF-8",
      compressible: true
    },
    "application/calendar+json": {
      source: "iana",
      compressible: true
    },
    "application/calendar+xml": {
      source: "iana",
      compressible: true,
      extensions: ["xcs"]
    },
    "application/call-completion": {
      source: "iana"
    },
    "application/cals-1840": {
      source: "iana"
    },
    "application/captive+json": {
      source: "iana",
      compressible: true
    },
    "application/cbor": {
      source: "iana"
    },
    "application/cbor-seq": {
      source: "iana"
    },
    "application/cccex": {
      source: "iana"
    },
    "application/ccmp+xml": {
      source: "iana",
      compressible: true
    },
    "application/ccxml+xml": {
      source: "iana",
      compressible: true,
      extensions: ["ccxml"]
    },
    "application/cdfx+xml": {
      source: "iana",
      compressible: true,
      extensions: ["cdfx"]
    },
    "application/cdmi-capability": {
      source: "iana",
      extensions: ["cdmia"]
    },
    "application/cdmi-container": {
      source: "iana",
      extensions: ["cdmic"]
    },
    "application/cdmi-domain": {
      source: "iana",
      extensions: ["cdmid"]
    },
    "application/cdmi-object": {
      source: "iana",
      extensions: ["cdmio"]
    },
    "application/cdmi-queue": {
      source: "iana",
      extensions: ["cdmiq"]
    },
    "application/cdni": {
      source: "iana"
    },
    "application/cea": {
      source: "iana"
    },
    "application/cea-2018+xml": {
      source: "iana",
      compressible: true
    },
    "application/cellml+xml": {
      source: "iana",
      compressible: true
    },
    "application/cfw": {
      source: "iana"
    },
    "application/city+json": {
      source: "iana",
      compressible: true
    },
    "application/clr": {
      source: "iana"
    },
    "application/clue+xml": {
      source: "iana",
      compressible: true
    },
    "application/clue_info+xml": {
      source: "iana",
      compressible: true
    },
    "application/cms": {
      source: "iana"
    },
    "application/cnrp+xml": {
      source: "iana",
      compressible: true
    },
    "application/coap-group+json": {
      source: "iana",
      compressible: true
    },
    "application/coap-payload": {
      source: "iana"
    },
    "application/commonground": {
      source: "iana"
    },
    "application/conference-info+xml": {
      source: "iana",
      compressible: true
    },
    "application/cose": {
      source: "iana"
    },
    "application/cose-key": {
      source: "iana"
    },
    "application/cose-key-set": {
      source: "iana"
    },
    "application/cpl+xml": {
      source: "iana",
      compressible: true,
      extensions: ["cpl"]
    },
    "application/csrattrs": {
      source: "iana"
    },
    "application/csta+xml": {
      source: "iana",
      compressible: true
    },
    "application/cstadata+xml": {
      source: "iana",
      compressible: true
    },
    "application/csvm+json": {
      source: "iana",
      compressible: true
    },
    "application/cu-seeme": {
      source: "apache",
      extensions: ["cu"]
    },
    "application/cwt": {
      source: "iana"
    },
    "application/cybercash": {
      source: "iana"
    },
    "application/dart": {
      compressible: true
    },
    "application/dash+xml": {
      source: "iana",
      compressible: true,
      extensions: ["mpd"]
    },
    "application/dash-patch+xml": {
      source: "iana",
      compressible: true,
      extensions: ["mpp"]
    },
    "application/dashdelta": {
      source: "iana"
    },
    "application/davmount+xml": {
      source: "iana",
      compressible: true,
      extensions: ["davmount"]
    },
    "application/dca-rft": {
      source: "iana"
    },
    "application/dcd": {
      source: "iana"
    },
    "application/dec-dx": {
      source: "iana"
    },
    "application/dialog-info+xml": {
      source: "iana",
      compressible: true
    },
    "application/dicom": {
      source: "iana"
    },
    "application/dicom+json": {
      source: "iana",
      compressible: true
    },
    "application/dicom+xml": {
      source: "iana",
      compressible: true
    },
    "application/dii": {
      source: "iana"
    },
    "application/dit": {
      source: "iana"
    },
    "application/dns": {
      source: "iana"
    },
    "application/dns+json": {
      source: "iana",
      compressible: true
    },
    "application/dns-message": {
      source: "iana"
    },
    "application/docbook+xml": {
      source: "apache",
      compressible: true,
      extensions: ["dbk"]
    },
    "application/dots+cbor": {
      source: "iana"
    },
    "application/dskpp+xml": {
      source: "iana",
      compressible: true
    },
    "application/dssc+der": {
      source: "iana",
      extensions: ["dssc"]
    },
    "application/dssc+xml": {
      source: "iana",
      compressible: true,
      extensions: ["xdssc"]
    },
    "application/dvcs": {
      source: "iana"
    },
    "application/ecmascript": {
      source: "iana",
      compressible: true,
      extensions: ["es", "ecma"]
    },
    "application/edi-consent": {
      source: "iana"
    },
    "application/edi-x12": {
      source: "iana",
      compressible: false
    },
    "application/edifact": {
      source: "iana",
      compressible: false
    },
    "application/efi": {
      source: "iana"
    },
    "application/elm+json": {
      source: "iana",
      charset: "UTF-8",
      compressible: true
    },
    "application/elm+xml": {
      source: "iana",
      compressible: true
    },
    "application/emergencycalldata.cap+xml": {
      source: "iana",
      charset: "UTF-8",
      compressible: true
    },
    "application/emergencycalldata.comment+xml": {
      source: "iana",
      compressible: true
    },
    "application/emergencycalldata.control+xml": {
      source: "iana",
      compressible: true
    },
    "application/emergencycalldata.deviceinfo+xml": {
      source: "iana",
      compressible: true
    },
    "application/emergencycalldata.ecall.msd": {
      source: "iana"
    },
    "application/emergencycalldata.providerinfo+xml": {
      source: "iana",
      compressible: true
    },
    "application/emergencycalldata.serviceinfo+xml": {
      source: "iana",
      compressible: true
    },
    "application/emergencycalldata.subscriberinfo+xml": {
      source: "iana",
      compressible: true
    },
    "application/emergencycalldata.veds+xml": {
      source: "iana",
      compressible: true
    },
    "application/emma+xml": {
      source: "iana",
      compressible: true,
      extensions: ["emma"]
    },
    "application/emotionml+xml": {
      source: "iana",
      compressible: true,
      extensions: ["emotionml"]
    },
    "application/encaprtp": {
      source: "iana"
    },
    "application/epp+xml": {
      source: "iana",
      compressible: true
    },
    "application/epub+zip": {
      source: "iana",
      compressible: false,
      extensions: ["epub"]
    },
    "application/eshop": {
      source: "iana"
    },
    "application/exi": {
      source: "iana",
      extensions: ["exi"]
    },
    "application/expect-ct-report+json": {
      source: "iana",
      compressible: true
    },
    "application/express": {
      source: "iana",
      extensions: ["exp"]
    },
    "application/fastinfoset": {
      source: "iana"
    },
    "application/fastsoap": {
      source: "iana"
    },
    "application/fdt+xml": {
      source: "iana",
      compressible: true,
      extensions: ["fdt"]
    },
    "application/fhir+json": {
      source: "iana",
      charset: "UTF-8",
      compressible: true
    },
    "application/fhir+xml": {
      source: "iana",
      charset: "UTF-8",
      compressible: true
    },
    "application/fido.trusted-apps+json": {
      compressible: true
    },
    "application/fits": {
      source: "iana"
    },
    "application/flexfec": {
      source: "iana"
    },
    "application/font-sfnt": {
      source: "iana"
    },
    "application/font-tdpfr": {
      source: "iana",
      extensions: ["pfr"]
    },
    "application/font-woff": {
      source: "iana",
      compressible: false
    },
    "application/framework-attributes+xml": {
      source: "iana",
      compressible: true
    },
    "application/geo+json": {
      source: "iana",
      compressible: true,
      extensions: ["geojson"]
    },
    "application/geo+json-seq": {
      source: "iana"
    },
    "application/geopackage+sqlite3": {
      source: "iana"
    },
    "application/geoxacml+xml": {
      source: "iana",
      compressible: true
    },
    "application/gltf-buffer": {
      source: "iana"
    },
    "application/gml+xml": {
      source: "iana",
      compressible: true,
      extensions: ["gml"]
    },
    "application/gpx+xml": {
      source: "apache",
      compressible: true,
      extensions: ["gpx"]
    },
    "application/gxf": {
      source: "apache",
      extensions: ["gxf"]
    },
    "application/gzip": {
      source: "iana",
      compressible: false,
      extensions: ["gz"]
    },
    "application/h224": {
      source: "iana"
    },
    "application/held+xml": {
      source: "iana",
      compressible: true
    },
    "application/hjson": {
      extensions: ["hjson"]
    },
    "application/http": {
      source: "iana"
    },
    "application/hyperstudio": {
      source: "iana",
      extensions: ["stk"]
    },
    "application/ibe-key-request+xml": {
      source: "iana",
      compressible: true
    },
    "application/ibe-pkg-reply+xml": {
      source: "iana",
      compressible: true
    },
    "application/ibe-pp-data": {
      source: "iana"
    },
    "application/iges": {
      source: "iana"
    },
    "application/im-iscomposing+xml": {
      source: "iana",
      charset: "UTF-8",
      compressible: true
    },
    "application/index": {
      source: "iana"
    },
    "application/index.cmd": {
      source: "iana"
    },
    "application/index.obj": {
      source: "iana"
    },
    "application/index.response": {
      source: "iana"
    },
    "application/index.vnd": {
      source: "iana"
    },
    "application/inkml+xml": {
      source: "iana",
      compressible: true,
      extensions: ["ink", "inkml"]
    },
    "application/iotp": {
      source: "iana"
    },
    "application/ipfix": {
      source: "iana",
      extensions: ["ipfix"]
    },
    "application/ipp": {
      source: "iana"
    },
    "application/isup": {
      source: "iana"
    },
    "application/its+xml": {
      source: "iana",
      compressible: true,
      extensions: ["its"]
    },
    "application/java-archive": {
      source: "apache",
      compressible: false,
      extensions: ["jar", "war", "ear"]
    },
    "application/java-serialized-object": {
      source: "apache",
      compressible: false,
      extensions: ["ser"]
    },
    "application/java-vm": {
      source: "apache",
      compressible: false,
      extensions: ["class"]
    },
    "application/javascript": {
      source: "iana",
      charset: "UTF-8",
      compressible: true,
      extensions: ["js", "mjs"]
    },
    "application/jf2feed+json": {
      source: "iana",
      compressible: true
    },
    "application/jose": {
      source: "iana"
    },
    "application/jose+json": {
      source: "iana",
      compressible: true
    },
    "application/jrd+json": {
      source: "iana",
      compressible: true
    },
    "application/jscalendar+json": {
      source: "iana",
      compressible: true
    },
    "application/json": {
      source: "iana",
      charset: "UTF-8",
      compressible: true,
      extensions: ["json", "map"]
    },
    "application/json-patch+json": {
      source: "iana",
      compressible: true
    },
    "application/json-seq": {
      source: "iana"
    },
    "application/json5": {
      extensions: ["json5"]
    },
    "application/jsonml+json": {
      source: "apache",
      compressible: true,
      extensions: ["jsonml"]
    },
    "application/jwk+json": {
      source: "iana",
      compressible: true
    },
    "application/jwk-set+json": {
      source: "iana",
      compressible: true
    },
    "application/jwt": {
      source: "iana"
    },
    "application/kpml-request+xml": {
      source: "iana",
      compressible: true
    },
    "application/kpml-response+xml": {
      source: "iana",
      compressible: true
    },
    "application/ld+json": {
      source: "iana",
      compressible: true,
      extensions: ["jsonld"]
    },
    "application/lgr+xml": {
      source: "iana",
      compressible: true,
      extensions: ["lgr"]
    },
    "application/link-format": {
      source: "iana"
    },
    "application/load-control+xml": {
      source: "iana",
      compressible: true
    },
    "application/lost+xml": {
      source: "iana",
      compressible: true,
      extensions: ["lostxml"]
    },
    "application/lostsync+xml": {
      source: "iana",
      compressible: true
    },
    "application/lpf+zip": {
      source: "iana",
      compressible: false
    },
    "application/lxf": {
      source: "iana"
    },
    "application/mac-binhex40": {
      source: "iana",
      extensions: ["hqx"]
    },
    "application/mac-compactpro": {
      source: "apache",
      extensions: ["cpt"]
    },
    "application/macwriteii": {
      source: "iana"
    },
    "application/mads+xml": {
      source: "iana",
      compressible: true,
      extensions: ["mads"]
    },
    "application/manifest+json": {
      source: "iana",
      charset: "UTF-8",
      compressible: true,
      extensions: ["webmanifest"]
    },
    "application/marc": {
      source: "iana",
      extensions: ["mrc"]
    },
    "application/marcxml+xml": {
      source: "iana",
      compressible: true,
      extensions: ["mrcx"]
    },
    "application/mathematica": {
      source: "iana",
      extensions: ["ma", "nb", "mb"]
    },
    "application/mathml+xml": {
      source: "iana",
      compressible: true,
      extensions: ["mathml"]
    },
    "application/mathml-content+xml": {
      source: "iana",
      compressible: true
    },
    "application/mathml-presentation+xml": {
      source: "iana",
      compressible: true
    },
    "application/mbms-associated-procedure-description+xml": {
      source: "iana",
      compressible: true
    },
    "application/mbms-deregister+xml": {
      source: "iana",
      compressible: true
    },
    "application/mbms-envelope+xml": {
      source: "iana",
      compressible: true
    },
    "application/mbms-msk+xml": {
      source: "iana",
      compressible: true
    },
    "application/mbms-msk-response+xml": {
      source: "iana",
      compressible: true
    },
    "application/mbms-protection-description+xml": {
      source: "iana",
      compressible: true
    },
    "application/mbms-reception-report+xml": {
      source: "iana",
      compressible: true
    },
    "application/mbms-register+xml": {
      source: "iana",
      compressible: true
    },
    "application/mbms-register-response+xml": {
      source: "iana",
      compressible: true
    },
    "application/mbms-schedule+xml": {
      source: "iana",
      compressible: true
    },
    "application/mbms-user-service-description+xml": {
      source: "iana",
      compressible: true
    },
    "application/mbox": {
      source: "iana",
      extensions: ["mbox"]
    },
    "application/media-policy-dataset+xml": {
      source: "iana",
      compressible: true,
      extensions: ["mpf"]
    },
    "application/media_control+xml": {
      source: "iana",
      compressible: true
    },
    "application/mediaservercontrol+xml": {
      source: "iana",
      compressible: true,
      extensions: ["mscml"]
    },
    "application/merge-patch+json": {
      source: "iana",
      compressible: true
    },
    "application/metalink+xml": {
      source: "apache",
      compressible: true,
      extensions: ["metalink"]
    },
    "application/metalink4+xml": {
      source: "iana",
      compressible: true,
      extensions: ["meta4"]
    },
    "application/mets+xml": {
      source: "iana",
      compressible: true,
      extensions: ["mets"]
    },
    "application/mf4": {
      source: "iana"
    },
    "application/mikey": {
      source: "iana"
    },
    "application/mipc": {
      source: "iana"
    },
    "application/missing-blocks+cbor-seq": {
      source: "iana"
    },
    "application/mmt-aei+xml": {
      source: "iana",
      compressible: true,
      extensions: ["maei"]
    },
    "application/mmt-usd+xml": {
      source: "iana",
      compressible: true,
      extensions: ["musd"]
    },
    "application/mods+xml": {
      source: "iana",
      compressible: true,
      extensions: ["mods"]
    },
    "application/moss-keys": {
      source: "iana"
    },
    "application/moss-signature": {
      source: "iana"
    },
    "application/mosskey-data": {
      source: "iana"
    },
    "application/mosskey-request": {
      source: "iana"
    },
    "application/mp21": {
      source: "iana",
      extensions: ["m21", "mp21"]
    },
    "application/mp4": {
      source: "iana",
      extensions: ["mp4s", "m4p"]
    },
    "application/mpeg4-generic": {
      source: "iana"
    },
    "application/mpeg4-iod": {
      source: "iana"
    },
    "application/mpeg4-iod-xmt": {
      source: "iana"
    },
    "application/mrb-consumer+xml": {
      source: "iana",
      compressible: true
    },
    "application/mrb-publish+xml": {
      source: "iana",
      compressible: true
    },
    "application/msc-ivr+xml": {
      source: "iana",
      charset: "UTF-8",
      compressible: true
    },
    "application/msc-mixer+xml": {
      source: "iana",
      charset: "UTF-8",
      compressible: true
    },
    "application/msword": {
      source: "iana",
      compressible: false,
      extensions: ["doc", "dot"]
    },
    "application/mud+json": {
      source: "iana",
      compressible: true
    },
    "application/multipart-core": {
      source: "iana"
    },
    "application/mxf": {
      source: "iana",
      extensions: ["mxf"]
    },
    "application/n-quads": {
      source: "iana",
      extensions: ["nq"]
    },
    "application/n-triples": {
      source: "iana",
      extensions: ["nt"]
    },
    "application/nasdata": {
      source: "iana"
    },
    "application/news-checkgroups": {
      source: "iana",
      charset: "US-ASCII"
    },
    "application/news-groupinfo": {
      source: "iana",
      charset: "US-ASCII"
    },
    "application/news-transmission": {
      source: "iana"
    },
    "application/nlsml+xml": {
      source: "iana",
      compressible: true
    },
    "application/node": {
      source: "iana",
      extensions: ["cjs"]
    },
    "application/nss": {
      source: "iana"
    },
    "application/oauth-authz-req+jwt": {
      source: "iana"
    },
    "application/oblivious-dns-message": {
      source: "iana"
    },
    "application/ocsp-request": {
      source: "iana"
    },
    "application/ocsp-response": {
      source: "iana"
    },
    "application/octet-stream": {
      source: "iana",
      compressible: false,
      extensions: ["bin", "dms", "lrf", "mar", "so", "dist", "distz", "pkg", "bpk", "dump", "elc", "deploy", "exe", "dll", "deb", "dmg", "iso", "img", "msi", "msp", "msm", "buffer"]
    },
    "application/oda": {
      source: "iana",
      extensions: ["oda"]
    },
    "application/odm+xml": {
      source: "iana",
      compressible: true
    },
    "application/odx": {
      source: "iana"
    },
    "application/oebps-package+xml": {
      source: "iana",
      compressible: true,
      extensions: ["opf"]
    },
    "application/ogg": {
      source: "iana",
      compressible: false,
      extensions: ["ogx"]
    },
    "application/omdoc+xml": {
      source: "apache",
      compressible: true,
      extensions: ["omdoc"]
    },
    "application/onenote": {
      source: "apache",
      extensions: ["onetoc", "onetoc2", "onetmp", "onepkg"]
    },
    "application/opc-nodeset+xml": {
      source: "iana",
      compressible: true
    },
    "application/oscore": {
      source: "iana"
    },
    "application/oxps": {
      source: "iana",
      extensions: ["oxps"]
    },
    "application/p21": {
      source: "iana"
    },
    "application/p21+zip": {
      source: "iana",
      compressible: false
    },
    "application/p2p-overlay+xml": {
      source: "iana",
      compressible: true,
      extensions: ["relo"]
    },
    "application/parityfec": {
      source: "iana"
    },
    "application/passport": {
      source: "iana"
    },
    "application/patch-ops-error+xml": {
      source: "iana",
      compressible: true,
      extensions: ["xer"]
    },
    "application/pdf": {
      source: "iana",
      compressible: false,
      extensions: ["pdf"]
    },
    "application/pdx": {
      source: "iana"
    },
    "application/pem-certificate-chain": {
      source: "iana"
    },
    "application/pgp-encrypted": {
      source: "iana",
      compressible: false,
      extensions: ["pgp"]
    },
    "application/pgp-keys": {
      source: "iana",
      extensions: ["asc"]
    },
    "application/pgp-signature": {
      source: "iana",
      extensions: ["asc", "sig"]
    },
    "application/pics-rules": {
      source: "apache",
      extensions: ["prf"]
    },
    "application/pidf+xml": {
      source: "iana",
      charset: "UTF-8",
      compressible: true
    },
    "application/pidf-diff+xml": {
      source: "iana",
      charset: "UTF-8",
      compressible: true
    },
    "application/pkcs10": {
      source: "iana",
      extensions: ["p10"]
    },
    "application/pkcs12": {
      source: "iana"
    },
    "application/pkcs7-mime": {
      source: "iana",
      extensions: ["p7m", "p7c"]
    },
    "application/pkcs7-signature": {
      source: "iana",
      extensions: ["p7s"]
    },
    "application/pkcs8": {
      source: "iana",
      extensions: ["p8"]
    },
    "application/pkcs8-encrypted": {
      source: "iana"
    },
    "application/pkix-attr-cert": {
      source: "iana",
      extensions: ["ac"]
    },
    "application/pkix-cert": {
      source: "iana",
      extensions: ["cer"]
    },
    "application/pkix-crl": {
      source: "iana",
      extensions: ["crl"]
    },
    "application/pkix-pkipath": {
      source: "iana",
      extensions: ["pkipath"]
    },
    "application/pkixcmp": {
      source: "iana",
      extensions: ["pki"]
    },
    "application/pls+xml": {
      source: "iana",
      compressible: true,
      extensions: ["pls"]
    },
    "application/poc-settings+xml": {
      source: "iana",
      charset: "UTF-8",
      compressible: true
    },
    "application/postscript": {
      source: "iana",
      compressible: true,
      extensions: ["ai", "eps", "ps"]
    },
    "application/ppsp-tracker+json": {
      source: "iana",
      compressible: true
    },
    "application/problem+json": {
      source: "iana",
      compressible: true
    },
    "application/problem+xml": {
      source: "iana",
      compressible: true
    },
    "application/provenance+xml": {
      source: "iana",
      compressible: true,
      extensions: ["provx"]
    },
    "application/prs.alvestrand.titrax-sheet": {
      source: "iana"
    },
    "application/prs.cww": {
      source: "iana",
      extensions: ["cww"]
    },
    "application/prs.cyn": {
      source: "iana",
      charset: "7-BIT"
    },
    "application/prs.hpub+zip": {
      source: "iana",
      compressible: false
    },
    "application/prs.nprend": {
      source: "iana"
    },
    "application/prs.plucker": {
      source: "iana"
    },
    "application/prs.rdf-xml-crypt": {
      source: "iana"
    },
    "application/prs.xsf+xml": {
      source: "iana",
      compressible: true
    },
    "application/pskc+xml": {
      source: "iana",
      compressible: true,
      extensions: ["pskcxml"]
    },
    "application/pvd+json": {
      source: "iana",
      compressible: true
    },
    "application/qsig": {
      source: "iana"
    },
    "application/raml+yaml": {
      compressible: true,
      extensions: ["raml"]
    },
    "application/raptorfec": {
      source: "iana"
    },
    "application/rdap+json": {
      source: "iana",
      compressible: true
    },
    "application/rdf+xml": {
      source: "iana",
      compressible: true,
      extensions: ["rdf", "owl"]
    },
    "application/reginfo+xml": {
      source: "iana",
      compressible: true,
      extensions: ["rif"]
    },
    "application/relax-ng-compact-syntax": {
      source: "iana",
      extensions: ["rnc"]
    },
    "application/remote-printing": {
      source: "iana"
    },
    "application/reputon+json": {
      source: "iana",
      compressible: true
    },
    "application/resource-lists+xml": {
      source: "iana",
      compressible: true,
      extensions: ["rl"]
    },
    "application/resource-lists-diff+xml": {
      source: "iana",
      compressible: true,
      extensions: ["rld"]
    },
    "application/rfc+xml": {
      source: "iana",
      compressible: true
    },
    "application/riscos": {
      source: "iana"
    },
    "application/rlmi+xml": {
      source: "iana",
      compressible: true
    },
    "application/rls-services+xml": {
      source: "iana",
      compressible: true,
      extensions: ["rs"]
    },
    "application/route-apd+xml": {
      source: "iana",
      compressible: true,
      extensions: ["rapd"]
    },
    "application/route-s-tsid+xml": {
      source: "iana",
      compressible: true,
      extensions: ["sls"]
    },
    "application/route-usd+xml": {
      source: "iana",
      compressible: true,
      extensions: ["rusd"]
    },
    "application/rpki-ghostbusters": {
      source: "iana",
      extensions: ["gbr"]
    },
    "application/rpki-manifest": {
      source: "iana",
      extensions: ["mft"]
    },
    "application/rpki-publication": {
      source: "iana"
    },
    "application/rpki-roa": {
      source: "iana",
      extensions: ["roa"]
    },
    "application/rpki-updown": {
      source: "iana"
    },
    "application/rsd+xml": {
      source: "apache",
      compressible: true,
      extensions: ["rsd"]
    },
    "application/rss+xml": {
      source: "apache",
      compressible: true,
      extensions: ["rss"]
    },
    "application/rtf": {
      source: "iana",
      compressible: true,
      extensions: ["rtf"]
    },
    "application/rtploopback": {
      source: "iana"
    },
    "application/rtx": {
      source: "iana"
    },
    "application/samlassertion+xml": {
      source: "iana",
      compressible: true
    },
    "application/samlmetadata+xml": {
      source: "iana",
      compressible: true
    },
    "application/sarif+json": {
      source: "iana",
      compressible: true
    },
    "application/sarif-external-properties+json": {
      source: "iana",
      compressible: true
    },
    "application/sbe": {
      source: "iana"
    },
    "application/sbml+xml": {
      source: "iana",
      compressible: true,
      extensions: ["sbml"]
    },
    "application/scaip+xml": {
      source: "iana",
      compressible: true
    },
    "application/scim+json": {
      source: "iana",
      compressible: true
    },
    "application/scvp-cv-request": {
      source: "iana",
      extensions: ["scq"]
    },
    "application/scvp-cv-response": {
      source: "iana",
      extensions: ["scs"]
    },
    "application/scvp-vp-request": {
      source: "iana",
      extensions: ["spq"]
    },
    "application/scvp-vp-response": {
      source: "iana",
      extensions: ["spp"]
    },
    "application/sdp": {
      source: "iana",
      extensions: ["sdp"]
    },
    "application/secevent+jwt": {
      source: "iana"
    },
    "application/senml+cbor": {
      source: "iana"
    },
    "application/senml+json": {
      source: "iana",
      compressible: true
    },
    "application/senml+xml": {
      source: "iana",
      compressible: true,
      extensions: ["senmlx"]
    },
    "application/senml-etch+cbor": {
      source: "iana"
    },
    "application/senml-etch+json": {
      source: "iana",
      compressible: true
    },
    "application/senml-exi": {
      source: "iana"
    },
    "application/sensml+cbor": {
      source: "iana"
    },
    "application/sensml+json": {
      source: "iana",
      compressible: true
    },
    "application/sensml+xml": {
      source: "iana",
      compressible: true,
      extensions: ["sensmlx"]
    },
    "application/sensml-exi": {
      source: "iana"
    },
    "application/sep+xml": {
      source: "iana",
      compressible: true
    },
    "application/sep-exi": {
      source: "iana"
    },
    "application/session-info": {
      source: "iana"
    },
    "application/set-payment": {
      source: "iana"
    },
    "application/set-payment-initiation": {
      source: "iana",
      extensions: ["setpay"]
    },
    "application/set-registration": {
      source: "iana"
    },
    "application/set-registration-initiation": {
      source: "iana",
      extensions: ["setreg"]
    },
    "application/sgml": {
      source: "iana"
    },
    "application/sgml-open-catalog": {
      source: "iana"
    },
    "application/shf+xml": {
      source: "iana",
      compressible: true,
      extensions: ["shf"]
    },
    "application/sieve": {
      source: "iana",
      extensions: ["siv", "sieve"]
    },
    "application/simple-filter+xml": {
      source: "iana",
      compressible: true
    },
    "application/simple-message-summary": {
      source: "iana"
    },
    "application/simplesymbolcontainer": {
      source: "iana"
    },
    "application/sipc": {
      source: "iana"
    },
    "application/slate": {
      source: "iana"
    },
    "application/smil": {
      source: "iana"
    },
    "application/smil+xml": {
      source: "iana",
      compressible: true,
      extensions: ["smi", "smil"]
    },
    "application/smpte336m": {
      source: "iana"
    },
    "application/soap+fastinfoset": {
      source: "iana"
    },
    "application/soap+xml": {
      source: "iana",
      compressible: true
    },
    "application/sparql-query": {
      source: "iana",
      extensions: ["rq"]
    },
    "application/sparql-results+xml": {
      source: "iana",
      compressible: true,
      extensions: ["srx"]
    },
    "application/spdx+json": {
      source: "iana",
      compressible: true
    },
    "application/spirits-event+xml": {
      source: "iana",
      compressible: true
    },
    "application/sql": {
      source: "iana"
    },
    "application/srgs": {
      source: "iana",
      extensions: ["gram"]
    },
    "application/srgs+xml": {
      source: "iana",
      compressible: true,
      extensions: ["grxml"]
    },
    "application/sru+xml": {
      source: "iana",
      compressible: true,
      extensions: ["sru"]
    },
    "application/ssdl+xml": {
      source: "apache",
      compressible: true,
      extensions: ["ssdl"]
    },
    "application/ssml+xml": {
      source: "iana",
      compressible: true,
      extensions: ["ssml"]
    },
    "application/stix+json": {
      source: "iana",
      compressible: true
    },
    "application/swid+xml": {
      source: "iana",
      compressible: true,
      extensions: ["swidtag"]
    },
    "application/tamp-apex-update": {
      source: "iana"
    },
    "application/tamp-apex-update-confirm": {
      source: "iana"
    },
    "application/tamp-community-update": {
      source: "iana"
    },
    "application/tamp-community-update-confirm": {
      source: "iana"
    },
    "application/tamp-error": {
      source: "iana"
    },
    "application/tamp-sequence-adjust": {
      source: "iana"
    },
    "application/tamp-sequence-adjust-confirm": {
      source: "iana"
    },
    "application/tamp-status-query": {
      source: "iana"
    },
    "application/tamp-status-response": {
      source: "iana"
    },
    "application/tamp-update": {
      source: "iana"
    },
    "application/tamp-update-confirm": {
      source: "iana"
    },
    "application/tar": {
      compressible: true
    },
    "application/taxii+json": {
      source: "iana",
      compressible: true
    },
    "application/td+json": {
      source: "iana",
      compressible: true
    },
    "application/tei+xml": {
      source: "iana",
      compressible: true,
      extensions: ["tei", "teicorpus"]
    },
    "application/tetra_isi": {
      source: "iana"
    },
    "application/thraud+xml": {
      source: "iana",
      compressible: true,
      extensions: ["tfi"]
    },
    "application/timestamp-query": {
      source: "iana"
    },
    "application/timestamp-reply": {
      source: "iana"
    },
    "application/timestamped-data": {
      source: "iana",
      extensions: ["tsd"]
    },
    "application/tlsrpt+gzip": {
      source: "iana"
    },
    "application/tlsrpt+json": {
      source: "iana",
      compressible: true
    },
    "application/tnauthlist": {
      source: "iana"
    },
    "application/token-introspection+jwt": {
      source: "iana"
    },
    "application/toml": {
      compressible: true,
      extensions: ["toml"]
    },
    "application/trickle-ice-sdpfrag": {
      source: "iana"
    },
    "application/trig": {
      source: "iana",
      extensions: ["trig"]
    },
    "application/ttml+xml": {
      source: "iana",
      compressible: true,
      extensions: ["ttml"]
    },
    "application/tve-trigger": {
      source: "iana"
    },
    "application/tzif": {
      source: "iana"
    },
    "application/tzif-leap": {
      source: "iana"
    },
    "application/ubjson": {
      compressible: false,
      extensions: ["ubj"]
    },
    "application/ulpfec": {
      source: "iana"
    },
    "application/urc-grpsheet+xml": {
      source: "iana",
      compressible: true
    },
    "application/urc-ressheet+xml": {
      source: "iana",
      compressible: true,
      extensions: ["rsheet"]
    },
    "application/urc-targetdesc+xml": {
      source: "iana",
      compressible: true,
      extensions: ["td"]
    },
    "application/urc-uisocketdesc+xml": {
      source: "iana",
      compressible: true
    },
    "application/vcard+json": {
      source: "iana",
      compressible: true
    },
    "application/vcard+xml": {
      source: "iana",
      compressible: true
    },
    "application/vemmi": {
      source: "iana"
    },
    "application/vividence.scriptfile": {
      source: "apache"
    },
    "application/vnd.1000minds.decision-model+xml": {
      source: "iana",
      compressible: true,
      extensions: ["1km"]
    },
    "application/vnd.3gpp-prose+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp-prose-pc3ch+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp-v2x-local-service-information": {
      source: "iana"
    },
    "application/vnd.3gpp.5gnas": {
      source: "iana"
    },
    "application/vnd.3gpp.access-transfer-events+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.bsf+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.gmop+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.gtpc": {
      source: "iana"
    },
    "application/vnd.3gpp.interworking-data": {
      source: "iana"
    },
    "application/vnd.3gpp.lpp": {
      source: "iana"
    },
    "application/vnd.3gpp.mc-signalling-ear": {
      source: "iana"
    },
    "application/vnd.3gpp.mcdata-affiliation-command+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.mcdata-info+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.mcdata-payload": {
      source: "iana"
    },
    "application/vnd.3gpp.mcdata-service-config+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.mcdata-signalling": {
      source: "iana"
    },
    "application/vnd.3gpp.mcdata-ue-config+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.mcdata-user-profile+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.mcptt-affiliation-command+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.mcptt-floor-request+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.mcptt-info+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.mcptt-location-info+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.mcptt-mbms-usage-info+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.mcptt-service-config+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.mcptt-signed+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.mcptt-ue-config+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.mcptt-ue-init-config+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.mcptt-user-profile+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.mcvideo-affiliation-command+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.mcvideo-affiliation-info+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.mcvideo-info+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.mcvideo-location-info+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.mcvideo-mbms-usage-info+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.mcvideo-service-config+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.mcvideo-transmission-request+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.mcvideo-ue-config+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.mcvideo-user-profile+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.mid-call+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.ngap": {
      source: "iana"
    },
    "application/vnd.3gpp.pfcp": {
      source: "iana"
    },
    "application/vnd.3gpp.pic-bw-large": {
      source: "iana",
      extensions: ["plb"]
    },
    "application/vnd.3gpp.pic-bw-small": {
      source: "iana",
      extensions: ["psb"]
    },
    "application/vnd.3gpp.pic-bw-var": {
      source: "iana",
      extensions: ["pvb"]
    },
    "application/vnd.3gpp.s1ap": {
      source: "iana"
    },
    "application/vnd.3gpp.sms": {
      source: "iana"
    },
    "application/vnd.3gpp.sms+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.srvcc-ext+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.srvcc-info+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.state-and-event-info+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp.ussd+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp2.bcmcsinfo+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.3gpp2.sms": {
      source: "iana"
    },
    "application/vnd.3gpp2.tcap": {
      source: "iana",
      extensions: ["tcap"]
    },
    "application/vnd.3lightssoftware.imagescal": {
      source: "iana"
    },
    "application/vnd.3m.post-it-notes": {
      source: "iana",
      extensions: ["pwn"]
    },
    "application/vnd.accpac.simply.aso": {
      source: "iana",
      extensions: ["aso"]
    },
    "application/vnd.accpac.simply.imp": {
      source: "iana",
      extensions: ["imp"]
    },
    "application/vnd.acucobol": {
      source: "iana",
      extensions: ["acu"]
    },
    "application/vnd.acucorp": {
      source: "iana",
      extensions: ["atc", "acutc"]
    },
    "application/vnd.adobe.air-application-installer-package+zip": {
      source: "apache",
      compressible: false,
      extensions: ["air"]
    },
    "application/vnd.adobe.flash.movie": {
      source: "iana"
    },
    "application/vnd.adobe.formscentral.fcdt": {
      source: "iana",
      extensions: ["fcdt"]
    },
    "application/vnd.adobe.fxp": {
      source: "iana",
      extensions: ["fxp", "fxpl"]
    },
    "application/vnd.adobe.partial-upload": {
      source: "iana"
    },
    "application/vnd.adobe.xdp+xml": {
      source: "iana",
      compressible: true,
      extensions: ["xdp"]
    },
    "application/vnd.adobe.xfdf": {
      source: "iana",
      extensions: ["xfdf"]
    },
    "application/vnd.aether.imp": {
      source: "iana"
    },
    "application/vnd.afpc.afplinedata": {
      source: "iana"
    },
    "application/vnd.afpc.afplinedata-pagedef": {
      source: "iana"
    },
    "application/vnd.afpc.cmoca-cmresource": {
      source: "iana"
    },
    "application/vnd.afpc.foca-charset": {
      source: "iana"
    },
    "application/vnd.afpc.foca-codedfont": {
      source: "iana"
    },
    "application/vnd.afpc.foca-codepage": {
      source: "iana"
    },
    "application/vnd.afpc.modca": {
      source: "iana"
    },
    "application/vnd.afpc.modca-cmtable": {
      source: "iana"
    },
    "application/vnd.afpc.modca-formdef": {
      source: "iana"
    },
    "application/vnd.afpc.modca-mediummap": {
      source: "iana"
    },
    "application/vnd.afpc.modca-objectcontainer": {
      source: "iana"
    },
    "application/vnd.afpc.modca-overlay": {
      source: "iana"
    },
    "application/vnd.afpc.modca-pagesegment": {
      source: "iana"
    },
    "application/vnd.age": {
      source: "iana",
      extensions: ["age"]
    },
    "application/vnd.ah-barcode": {
      source: "iana"
    },
    "application/vnd.ahead.space": {
      source: "iana",
      extensions: ["ahead"]
    },
    "application/vnd.airzip.filesecure.azf": {
      source: "iana",
      extensions: ["azf"]
    },
    "application/vnd.airzip.filesecure.azs": {
      source: "iana",
      extensions: ["azs"]
    },
    "application/vnd.amadeus+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.amazon.ebook": {
      source: "apache",
      extensions: ["azw"]
    },
    "application/vnd.amazon.mobi8-ebook": {
      source: "iana"
    },
    "application/vnd.americandynamics.acc": {
      source: "iana",
      extensions: ["acc"]
    },
    "application/vnd.amiga.ami": {
      source: "iana",
      extensions: ["ami"]
    },
    "application/vnd.amundsen.maze+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.android.ota": {
      source: "iana"
    },
    "application/vnd.android.package-archive": {
      source: "apache",
      compressible: false,
      extensions: ["apk"]
    },
    "application/vnd.anki": {
      source: "iana"
    },
    "application/vnd.anser-web-certificate-issue-initiation": {
      source: "iana",
      extensions: ["cii"]
    },
    "application/vnd.anser-web-funds-transfer-initiation": {
      source: "apache",
      extensions: ["fti"]
    },
    "application/vnd.antix.game-component": {
      source: "iana",
      extensions: ["atx"]
    },
    "application/vnd.apache.arrow.file": {
      source: "iana"
    },
    "application/vnd.apache.arrow.stream": {
      source: "iana"
    },
    "application/vnd.apache.thrift.binary": {
      source: "iana"
    },
    "application/vnd.apache.thrift.compact": {
      source: "iana"
    },
    "application/vnd.apache.thrift.json": {
      source: "iana"
    },
    "application/vnd.api+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.aplextor.warrp+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.apothekende.reservation+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.apple.installer+xml": {
      source: "iana",
      compressible: true,
      extensions: ["mpkg"]
    },
    "application/vnd.apple.keynote": {
      source: "iana",
      extensions: ["key"]
    },
    "application/vnd.apple.mpegurl": {
      source: "iana",
      extensions: ["m3u8"]
    },
    "application/vnd.apple.numbers": {
      source: "iana",
      extensions: ["numbers"]
    },
    "application/vnd.apple.pages": {
      source: "iana",
      extensions: ["pages"]
    },
    "application/vnd.apple.pkpass": {
      compressible: false,
      extensions: ["pkpass"]
    },
    "application/vnd.arastra.swi": {
      source: "iana"
    },
    "application/vnd.aristanetworks.swi": {
      source: "iana",
      extensions: ["swi"]
    },
    "application/vnd.artisan+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.artsquare": {
      source: "iana"
    },
    "application/vnd.astraea-software.iota": {
      source: "iana",
      extensions: ["iota"]
    },
    "application/vnd.audiograph": {
      source: "iana",
      extensions: ["aep"]
    },
    "application/vnd.autopackage": {
      source: "iana"
    },
    "application/vnd.avalon+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.avistar+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.balsamiq.bmml+xml": {
      source: "iana",
      compressible: true,
      extensions: ["bmml"]
    },
    "application/vnd.balsamiq.bmpr": {
      source: "iana"
    },
    "application/vnd.banana-accounting": {
      source: "iana"
    },
    "application/vnd.bbf.usp.error": {
      source: "iana"
    },
    "application/vnd.bbf.usp.msg": {
      source: "iana"
    },
    "application/vnd.bbf.usp.msg+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.bekitzur-stech+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.bint.med-content": {
      source: "iana"
    },
    "application/vnd.biopax.rdf+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.blink-idb-value-wrapper": {
      source: "iana"
    },
    "application/vnd.blueice.multipass": {
      source: "iana",
      extensions: ["mpm"]
    },
    "application/vnd.bluetooth.ep.oob": {
      source: "iana"
    },
    "application/vnd.bluetooth.le.oob": {
      source: "iana"
    },
    "application/vnd.bmi": {
      source: "iana",
      extensions: ["bmi"]
    },
    "application/vnd.bpf": {
      source: "iana"
    },
    "application/vnd.bpf3": {
      source: "iana"
    },
    "application/vnd.businessobjects": {
      source: "iana",
      extensions: ["rep"]
    },
    "application/vnd.byu.uapi+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.cab-jscript": {
      source: "iana"
    },
    "application/vnd.canon-cpdl": {
      source: "iana"
    },
    "application/vnd.canon-lips": {
      source: "iana"
    },
    "application/vnd.capasystems-pg+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.cendio.thinlinc.clientconf": {
      source: "iana"
    },
    "application/vnd.century-systems.tcp_stream": {
      source: "iana"
    },
    "application/vnd.chemdraw+xml": {
      source: "iana",
      compressible: true,
      extensions: ["cdxml"]
    },
    "application/vnd.chess-pgn": {
      source: "iana"
    },
    "application/vnd.chipnuts.karaoke-mmd": {
      source: "iana",
      extensions: ["mmd"]
    },
    "application/vnd.ciedi": {
      source: "iana"
    },
    "application/vnd.cinderella": {
      source: "iana",
      extensions: ["cdy"]
    },
    "application/vnd.cirpack.isdn-ext": {
      source: "iana"
    },
    "application/vnd.citationstyles.style+xml": {
      source: "iana",
      compressible: true,
      extensions: ["csl"]
    },
    "application/vnd.claymore": {
      source: "iana",
      extensions: ["cla"]
    },
    "application/vnd.cloanto.rp9": {
      source: "iana",
      extensions: ["rp9"]
    },
    "application/vnd.clonk.c4group": {
      source: "iana",
      extensions: ["c4g", "c4d", "c4f", "c4p", "c4u"]
    },
    "application/vnd.cluetrust.cartomobile-config": {
      source: "iana",
      extensions: ["c11amc"]
    },
    "application/vnd.cluetrust.cartomobile-config-pkg": {
      source: "iana",
      extensions: ["c11amz"]
    },
    "application/vnd.coffeescript": {
      source: "iana"
    },
    "application/vnd.collabio.xodocuments.document": {
      source: "iana"
    },
    "application/vnd.collabio.xodocuments.document-template": {
      source: "iana"
    },
    "application/vnd.collabio.xodocuments.presentation": {
      source: "iana"
    },
    "application/vnd.collabio.xodocuments.presentation-template": {
      source: "iana"
    },
    "application/vnd.collabio.xodocuments.spreadsheet": {
      source: "iana"
    },
    "application/vnd.collabio.xodocuments.spreadsheet-template": {
      source: "iana"
    },
    "application/vnd.collection+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.collection.doc+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.collection.next+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.comicbook+zip": {
      source: "iana",
      compressible: false
    },
    "application/vnd.comicbook-rar": {
      source: "iana"
    },
    "application/vnd.commerce-battelle": {
      source: "iana"
    },
    "application/vnd.commonspace": {
      source: "iana",
      extensions: ["csp"]
    },
    "application/vnd.contact.cmsg": {
      source: "iana",
      extensions: ["cdbcmsg"]
    },
    "application/vnd.coreos.ignition+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.cosmocaller": {
      source: "iana",
      extensions: ["cmc"]
    },
    "application/vnd.crick.clicker": {
      source: "iana",
      extensions: ["clkx"]
    },
    "application/vnd.crick.clicker.keyboard": {
      source: "iana",
      extensions: ["clkk"]
    },
    "application/vnd.crick.clicker.palette": {
      source: "iana",
      extensions: ["clkp"]
    },
    "application/vnd.crick.clicker.template": {
      source: "iana",
      extensions: ["clkt"]
    },
    "application/vnd.crick.clicker.wordbank": {
      source: "iana",
      extensions: ["clkw"]
    },
    "application/vnd.criticaltools.wbs+xml": {
      source: "iana",
      compressible: true,
      extensions: ["wbs"]
    },
    "application/vnd.cryptii.pipe+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.crypto-shade-file": {
      source: "iana"
    },
    "application/vnd.cryptomator.encrypted": {
      source: "iana"
    },
    "application/vnd.cryptomator.vault": {
      source: "iana"
    },
    "application/vnd.ctc-posml": {
      source: "iana",
      extensions: ["pml"]
    },
    "application/vnd.ctct.ws+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.cups-pdf": {
      source: "iana"
    },
    "application/vnd.cups-postscript": {
      source: "iana"
    },
    "application/vnd.cups-ppd": {
      source: "iana",
      extensions: ["ppd"]
    },
    "application/vnd.cups-raster": {
      source: "iana"
    },
    "application/vnd.cups-raw": {
      source: "iana"
    },
    "application/vnd.curl": {
      source: "iana"
    },
    "application/vnd.curl.car": {
      source: "apache",
      extensions: ["car"]
    },
    "application/vnd.curl.pcurl": {
      source: "apache",
      extensions: ["pcurl"]
    },
    "application/vnd.cyan.dean.root+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.cybank": {
      source: "iana"
    },
    "application/vnd.cyclonedx+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.cyclonedx+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.d2l.coursepackage1p0+zip": {
      source: "iana",
      compressible: false
    },
    "application/vnd.d3m-dataset": {
      source: "iana"
    },
    "application/vnd.d3m-problem": {
      source: "iana"
    },
    "application/vnd.dart": {
      source: "iana",
      compressible: true,
      extensions: ["dart"]
    },
    "application/vnd.data-vision.rdz": {
      source: "iana",
      extensions: ["rdz"]
    },
    "application/vnd.datapackage+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.dataresource+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.dbf": {
      source: "iana",
      extensions: ["dbf"]
    },
    "application/vnd.debian.binary-package": {
      source: "iana"
    },
    "application/vnd.dece.data": {
      source: "iana",
      extensions: ["uvf", "uvvf", "uvd", "uvvd"]
    },
    "application/vnd.dece.ttml+xml": {
      source: "iana",
      compressible: true,
      extensions: ["uvt", "uvvt"]
    },
    "application/vnd.dece.unspecified": {
      source: "iana",
      extensions: ["uvx", "uvvx"]
    },
    "application/vnd.dece.zip": {
      source: "iana",
      extensions: ["uvz", "uvvz"]
    },
    "application/vnd.denovo.fcselayout-link": {
      source: "iana",
      extensions: ["fe_launch"]
    },
    "application/vnd.desmume.movie": {
      source: "iana"
    },
    "application/vnd.dir-bi.plate-dl-nosuffix": {
      source: "iana"
    },
    "application/vnd.dm.delegation+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.dna": {
      source: "iana",
      extensions: ["dna"]
    },
    "application/vnd.document+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.dolby.mlp": {
      source: "apache",
      extensions: ["mlp"]
    },
    "application/vnd.dolby.mobile.1": {
      source: "iana"
    },
    "application/vnd.dolby.mobile.2": {
      source: "iana"
    },
    "application/vnd.doremir.scorecloud-binary-document": {
      source: "iana"
    },
    "application/vnd.dpgraph": {
      source: "iana",
      extensions: ["dpg"]
    },
    "application/vnd.dreamfactory": {
      source: "iana",
      extensions: ["dfac"]
    },
    "application/vnd.drive+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.ds-keypoint": {
      source: "apache",
      extensions: ["kpxx"]
    },
    "application/vnd.dtg.local": {
      source: "iana"
    },
    "application/vnd.dtg.local.flash": {
      source: "iana"
    },
    "application/vnd.dtg.local.html": {
      source: "iana"
    },
    "application/vnd.dvb.ait": {
      source: "iana",
      extensions: ["ait"]
    },
    "application/vnd.dvb.dvbisl+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.dvb.dvbj": {
      source: "iana"
    },
    "application/vnd.dvb.esgcontainer": {
      source: "iana"
    },
    "application/vnd.dvb.ipdcdftnotifaccess": {
      source: "iana"
    },
    "application/vnd.dvb.ipdcesgaccess": {
      source: "iana"
    },
    "application/vnd.dvb.ipdcesgaccess2": {
      source: "iana"
    },
    "application/vnd.dvb.ipdcesgpdd": {
      source: "iana"
    },
    "application/vnd.dvb.ipdcroaming": {
      source: "iana"
    },
    "application/vnd.dvb.iptv.alfec-base": {
      source: "iana"
    },
    "application/vnd.dvb.iptv.alfec-enhancement": {
      source: "iana"
    },
    "application/vnd.dvb.notif-aggregate-root+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.dvb.notif-container+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.dvb.notif-generic+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.dvb.notif-ia-msglist+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.dvb.notif-ia-registration-request+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.dvb.notif-ia-registration-response+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.dvb.notif-init+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.dvb.pfr": {
      source: "iana"
    },
    "application/vnd.dvb.service": {
      source: "iana",
      extensions: ["svc"]
    },
    "application/vnd.dxr": {
      source: "iana"
    },
    "application/vnd.dynageo": {
      source: "iana",
      extensions: ["geo"]
    },
    "application/vnd.dzr": {
      source: "iana"
    },
    "application/vnd.easykaraoke.cdgdownload": {
      source: "iana"
    },
    "application/vnd.ecdis-update": {
      source: "iana"
    },
    "application/vnd.ecip.rlp": {
      source: "iana"
    },
    "application/vnd.eclipse.ditto+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.ecowin.chart": {
      source: "iana",
      extensions: ["mag"]
    },
    "application/vnd.ecowin.filerequest": {
      source: "iana"
    },
    "application/vnd.ecowin.fileupdate": {
      source: "iana"
    },
    "application/vnd.ecowin.series": {
      source: "iana"
    },
    "application/vnd.ecowin.seriesrequest": {
      source: "iana"
    },
    "application/vnd.ecowin.seriesupdate": {
      source: "iana"
    },
    "application/vnd.efi.img": {
      source: "iana"
    },
    "application/vnd.efi.iso": {
      source: "iana"
    },
    "application/vnd.emclient.accessrequest+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.enliven": {
      source: "iana",
      extensions: ["nml"]
    },
    "application/vnd.enphase.envoy": {
      source: "iana"
    },
    "application/vnd.eprints.data+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.epson.esf": {
      source: "iana",
      extensions: ["esf"]
    },
    "application/vnd.epson.msf": {
      source: "iana",
      extensions: ["msf"]
    },
    "application/vnd.epson.quickanime": {
      source: "iana",
      extensions: ["qam"]
    },
    "application/vnd.epson.salt": {
      source: "iana",
      extensions: ["slt"]
    },
    "application/vnd.epson.ssf": {
      source: "iana",
      extensions: ["ssf"]
    },
    "application/vnd.ericsson.quickcall": {
      source: "iana"
    },
    "application/vnd.espass-espass+zip": {
      source: "iana",
      compressible: false
    },
    "application/vnd.eszigno3+xml": {
      source: "iana",
      compressible: true,
      extensions: ["es3", "et3"]
    },
    "application/vnd.etsi.aoc+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.etsi.asic-e+zip": {
      source: "iana",
      compressible: false
    },
    "application/vnd.etsi.asic-s+zip": {
      source: "iana",
      compressible: false
    },
    "application/vnd.etsi.cug+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.etsi.iptvcommand+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.etsi.iptvdiscovery+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.etsi.iptvprofile+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.etsi.iptvsad-bc+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.etsi.iptvsad-cod+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.etsi.iptvsad-npvr+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.etsi.iptvservice+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.etsi.iptvsync+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.etsi.iptvueprofile+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.etsi.mcid+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.etsi.mheg5": {
      source: "iana"
    },
    "application/vnd.etsi.overload-control-policy-dataset+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.etsi.pstn+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.etsi.sci+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.etsi.simservs+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.etsi.timestamp-token": {
      source: "iana"
    },
    "application/vnd.etsi.tsl+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.etsi.tsl.der": {
      source: "iana"
    },
    "application/vnd.eu.kasparian.car+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.eudora.data": {
      source: "iana"
    },
    "application/vnd.evolv.ecig.profile": {
      source: "iana"
    },
    "application/vnd.evolv.ecig.settings": {
      source: "iana"
    },
    "application/vnd.evolv.ecig.theme": {
      source: "iana"
    },
    "application/vnd.exstream-empower+zip": {
      source: "iana",
      compressible: false
    },
    "application/vnd.exstream-package": {
      source: "iana"
    },
    "application/vnd.ezpix-album": {
      source: "iana",
      extensions: ["ez2"]
    },
    "application/vnd.ezpix-package": {
      source: "iana",
      extensions: ["ez3"]
    },
    "application/vnd.f-secure.mobile": {
      source: "iana"
    },
    "application/vnd.familysearch.gedcom+zip": {
      source: "iana",
      compressible: false
    },
    "application/vnd.fastcopy-disk-image": {
      source: "iana"
    },
    "application/vnd.fdf": {
      source: "iana",
      extensions: ["fdf"]
    },
    "application/vnd.fdsn.mseed": {
      source: "iana",
      extensions: ["mseed"]
    },
    "application/vnd.fdsn.seed": {
      source: "iana",
      extensions: ["seed", "dataless"]
    },
    "application/vnd.ffsns": {
      source: "iana"
    },
    "application/vnd.ficlab.flb+zip": {
      source: "iana",
      compressible: false
    },
    "application/vnd.filmit.zfc": {
      source: "iana"
    },
    "application/vnd.fints": {
      source: "iana"
    },
    "application/vnd.firemonkeys.cloudcell": {
      source: "iana"
    },
    "application/vnd.flographit": {
      source: "iana",
      extensions: ["gph"]
    },
    "application/vnd.fluxtime.clip": {
      source: "iana",
      extensions: ["ftc"]
    },
    "application/vnd.font-fontforge-sfd": {
      source: "iana"
    },
    "application/vnd.framemaker": {
      source: "iana",
      extensions: ["fm", "frame", "maker", "book"]
    },
    "application/vnd.frogans.fnc": {
      source: "iana",
      extensions: ["fnc"]
    },
    "application/vnd.frogans.ltf": {
      source: "iana",
      extensions: ["ltf"]
    },
    "application/vnd.fsc.weblaunch": {
      source: "iana",
      extensions: ["fsc"]
    },
    "application/vnd.fujifilm.fb.docuworks": {
      source: "iana"
    },
    "application/vnd.fujifilm.fb.docuworks.binder": {
      source: "iana"
    },
    "application/vnd.fujifilm.fb.docuworks.container": {
      source: "iana"
    },
    "application/vnd.fujifilm.fb.jfi+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.fujitsu.oasys": {
      source: "iana",
      extensions: ["oas"]
    },
    "application/vnd.fujitsu.oasys2": {
      source: "iana",
      extensions: ["oa2"]
    },
    "application/vnd.fujitsu.oasys3": {
      source: "iana",
      extensions: ["oa3"]
    },
    "application/vnd.fujitsu.oasysgp": {
      source: "iana",
      extensions: ["fg5"]
    },
    "application/vnd.fujitsu.oasysprs": {
      source: "iana",
      extensions: ["bh2"]
    },
    "application/vnd.fujixerox.art-ex": {
      source: "iana"
    },
    "application/vnd.fujixerox.art4": {
      source: "iana"
    },
    "application/vnd.fujixerox.ddd": {
      source: "iana",
      extensions: ["ddd"]
    },
    "application/vnd.fujixerox.docuworks": {
      source: "iana",
      extensions: ["xdw"]
    },
    "application/vnd.fujixerox.docuworks.binder": {
      source: "iana",
      extensions: ["xbd"]
    },
    "application/vnd.fujixerox.docuworks.container": {
      source: "iana"
    },
    "application/vnd.fujixerox.hbpl": {
      source: "iana"
    },
    "application/vnd.fut-misnet": {
      source: "iana"
    },
    "application/vnd.futoin+cbor": {
      source: "iana"
    },
    "application/vnd.futoin+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.fuzzysheet": {
      source: "iana",
      extensions: ["fzs"]
    },
    "application/vnd.genomatix.tuxedo": {
      source: "iana",
      extensions: ["txd"]
    },
    "application/vnd.gentics.grd+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.geo+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.geocube+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.geogebra.file": {
      source: "iana",
      extensions: ["ggb"]
    },
    "application/vnd.geogebra.slides": {
      source: "iana"
    },
    "application/vnd.geogebra.tool": {
      source: "iana",
      extensions: ["ggt"]
    },
    "application/vnd.geometry-explorer": {
      source: "iana",
      extensions: ["gex", "gre"]
    },
    "application/vnd.geonext": {
      source: "iana",
      extensions: ["gxt"]
    },
    "application/vnd.geoplan": {
      source: "iana",
      extensions: ["g2w"]
    },
    "application/vnd.geospace": {
      source: "iana",
      extensions: ["g3w"]
    },
    "application/vnd.gerber": {
      source: "iana"
    },
    "application/vnd.globalplatform.card-content-mgt": {
      source: "iana"
    },
    "application/vnd.globalplatform.card-content-mgt-response": {
      source: "iana"
    },
    "application/vnd.gmx": {
      source: "iana",
      extensions: ["gmx"]
    },
    "application/vnd.google-apps.document": {
      compressible: false,
      extensions: ["gdoc"]
    },
    "application/vnd.google-apps.presentation": {
      compressible: false,
      extensions: ["gslides"]
    },
    "application/vnd.google-apps.spreadsheet": {
      compressible: false,
      extensions: ["gsheet"]
    },
    "application/vnd.google-earth.kml+xml": {
      source: "iana",
      compressible: true,
      extensions: ["kml"]
    },
    "application/vnd.google-earth.kmz": {
      source: "iana",
      compressible: false,
      extensions: ["kmz"]
    },
    "application/vnd.gov.sk.e-form+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.gov.sk.e-form+zip": {
      source: "iana",
      compressible: false
    },
    "application/vnd.gov.sk.xmldatacontainer+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.grafeq": {
      source: "iana",
      extensions: ["gqf", "gqs"]
    },
    "application/vnd.gridmp": {
      source: "iana"
    },
    "application/vnd.groove-account": {
      source: "iana",
      extensions: ["gac"]
    },
    "application/vnd.groove-help": {
      source: "iana",
      extensions: ["ghf"]
    },
    "application/vnd.groove-identity-message": {
      source: "iana",
      extensions: ["gim"]
    },
    "application/vnd.groove-injector": {
      source: "iana",
      extensions: ["grv"]
    },
    "application/vnd.groove-tool-message": {
      source: "iana",
      extensions: ["gtm"]
    },
    "application/vnd.groove-tool-template": {
      source: "iana",
      extensions: ["tpl"]
    },
    "application/vnd.groove-vcard": {
      source: "iana",
      extensions: ["vcg"]
    },
    "application/vnd.hal+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.hal+xml": {
      source: "iana",
      compressible: true,
      extensions: ["hal"]
    },
    "application/vnd.handheld-entertainment+xml": {
      source: "iana",
      compressible: true,
      extensions: ["zmm"]
    },
    "application/vnd.hbci": {
      source: "iana",
      extensions: ["hbci"]
    },
    "application/vnd.hc+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.hcl-bireports": {
      source: "iana"
    },
    "application/vnd.hdt": {
      source: "iana"
    },
    "application/vnd.heroku+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.hhe.lesson-player": {
      source: "iana",
      extensions: ["les"]
    },
    "application/vnd.hl7cda+xml": {
      source: "iana",
      charset: "UTF-8",
      compressible: true
    },
    "application/vnd.hl7v2+xml": {
      source: "iana",
      charset: "UTF-8",
      compressible: true
    },
    "application/vnd.hp-hpgl": {
      source: "iana",
      extensions: ["hpgl"]
    },
    "application/vnd.hp-hpid": {
      source: "iana",
      extensions: ["hpid"]
    },
    "application/vnd.hp-hps": {
      source: "iana",
      extensions: ["hps"]
    },
    "application/vnd.hp-jlyt": {
      source: "iana",
      extensions: ["jlt"]
    },
    "application/vnd.hp-pcl": {
      source: "iana",
      extensions: ["pcl"]
    },
    "application/vnd.hp-pclxl": {
      source: "iana",
      extensions: ["pclxl"]
    },
    "application/vnd.httphone": {
      source: "iana"
    },
    "application/vnd.hydrostatix.sof-data": {
      source: "iana",
      extensions: ["sfd-hdstx"]
    },
    "application/vnd.hyper+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.hyper-item+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.hyperdrive+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.hzn-3d-crossword": {
      source: "iana"
    },
    "application/vnd.ibm.afplinedata": {
      source: "iana"
    },
    "application/vnd.ibm.electronic-media": {
      source: "iana"
    },
    "application/vnd.ibm.minipay": {
      source: "iana",
      extensions: ["mpy"]
    },
    "application/vnd.ibm.modcap": {
      source: "iana",
      extensions: ["afp", "listafp", "list3820"]
    },
    "application/vnd.ibm.rights-management": {
      source: "iana",
      extensions: ["irm"]
    },
    "application/vnd.ibm.secure-container": {
      source: "iana",
      extensions: ["sc"]
    },
    "application/vnd.iccprofile": {
      source: "iana",
      extensions: ["icc", "icm"]
    },
    "application/vnd.ieee.1905": {
      source: "iana"
    },
    "application/vnd.igloader": {
      source: "iana",
      extensions: ["igl"]
    },
    "application/vnd.imagemeter.folder+zip": {
      source: "iana",
      compressible: false
    },
    "application/vnd.imagemeter.image+zip": {
      source: "iana",
      compressible: false
    },
    "application/vnd.immervision-ivp": {
      source: "iana",
      extensions: ["ivp"]
    },
    "application/vnd.immervision-ivu": {
      source: "iana",
      extensions: ["ivu"]
    },
    "application/vnd.ims.imsccv1p1": {
      source: "iana"
    },
    "application/vnd.ims.imsccv1p2": {
      source: "iana"
    },
    "application/vnd.ims.imsccv1p3": {
      source: "iana"
    },
    "application/vnd.ims.lis.v2.result+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.ims.lti.v2.toolconsumerprofile+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.ims.lti.v2.toolproxy+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.ims.lti.v2.toolproxy.id+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.ims.lti.v2.toolsettings+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.ims.lti.v2.toolsettings.simple+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.informedcontrol.rms+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.informix-visionary": {
      source: "iana"
    },
    "application/vnd.infotech.project": {
      source: "iana"
    },
    "application/vnd.infotech.project+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.innopath.wamp.notification": {
      source: "iana"
    },
    "application/vnd.insors.igm": {
      source: "iana",
      extensions: ["igm"]
    },
    "application/vnd.intercon.formnet": {
      source: "iana",
      extensions: ["xpw", "xpx"]
    },
    "application/vnd.intergeo": {
      source: "iana",
      extensions: ["i2g"]
    },
    "application/vnd.intertrust.digibox": {
      source: "iana"
    },
    "application/vnd.intertrust.nncp": {
      source: "iana"
    },
    "application/vnd.intu.qbo": {
      source: "iana",
      extensions: ["qbo"]
    },
    "application/vnd.intu.qfx": {
      source: "iana",
      extensions: ["qfx"]
    },
    "application/vnd.iptc.g2.catalogitem+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.iptc.g2.conceptitem+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.iptc.g2.knowledgeitem+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.iptc.g2.newsitem+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.iptc.g2.newsmessage+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.iptc.g2.packageitem+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.iptc.g2.planningitem+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.ipunplugged.rcprofile": {
      source: "iana",
      extensions: ["rcprofile"]
    },
    "application/vnd.irepository.package+xml": {
      source: "iana",
      compressible: true,
      extensions: ["irp"]
    },
    "application/vnd.is-xpr": {
      source: "iana",
      extensions: ["xpr"]
    },
    "application/vnd.isac.fcs": {
      source: "iana",
      extensions: ["fcs"]
    },
    "application/vnd.iso11783-10+zip": {
      source: "iana",
      compressible: false
    },
    "application/vnd.jam": {
      source: "iana",
      extensions: ["jam"]
    },
    "application/vnd.japannet-directory-service": {
      source: "iana"
    },
    "application/vnd.japannet-jpnstore-wakeup": {
      source: "iana"
    },
    "application/vnd.japannet-payment-wakeup": {
      source: "iana"
    },
    "application/vnd.japannet-registration": {
      source: "iana"
    },
    "application/vnd.japannet-registration-wakeup": {
      source: "iana"
    },
    "application/vnd.japannet-setstore-wakeup": {
      source: "iana"
    },
    "application/vnd.japannet-verification": {
      source: "iana"
    },
    "application/vnd.japannet-verification-wakeup": {
      source: "iana"
    },
    "application/vnd.jcp.javame.midlet-rms": {
      source: "iana",
      extensions: ["rms"]
    },
    "application/vnd.jisp": {
      source: "iana",
      extensions: ["jisp"]
    },
    "application/vnd.joost.joda-archive": {
      source: "iana",
      extensions: ["joda"]
    },
    "application/vnd.jsk.isdn-ngn": {
      source: "iana"
    },
    "application/vnd.kahootz": {
      source: "iana",
      extensions: ["ktz", "ktr"]
    },
    "application/vnd.kde.karbon": {
      source: "iana",
      extensions: ["karbon"]
    },
    "application/vnd.kde.kchart": {
      source: "iana",
      extensions: ["chrt"]
    },
    "application/vnd.kde.kformula": {
      source: "iana",
      extensions: ["kfo"]
    },
    "application/vnd.kde.kivio": {
      source: "iana",
      extensions: ["flw"]
    },
    "application/vnd.kde.kontour": {
      source: "iana",
      extensions: ["kon"]
    },
    "application/vnd.kde.kpresenter": {
      source: "iana",
      extensions: ["kpr", "kpt"]
    },
    "application/vnd.kde.kspread": {
      source: "iana",
      extensions: ["ksp"]
    },
    "application/vnd.kde.kword": {
      source: "iana",
      extensions: ["kwd", "kwt"]
    },
    "application/vnd.kenameaapp": {
      source: "iana",
      extensions: ["htke"]
    },
    "application/vnd.kidspiration": {
      source: "iana",
      extensions: ["kia"]
    },
    "application/vnd.kinar": {
      source: "iana",
      extensions: ["kne", "knp"]
    },
    "application/vnd.koan": {
      source: "iana",
      extensions: ["skp", "skd", "skt", "skm"]
    },
    "application/vnd.kodak-descriptor": {
      source: "iana",
      extensions: ["sse"]
    },
    "application/vnd.las": {
      source: "iana"
    },
    "application/vnd.las.las+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.las.las+xml": {
      source: "iana",
      compressible: true,
      extensions: ["lasxml"]
    },
    "application/vnd.laszip": {
      source: "iana"
    },
    "application/vnd.leap+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.liberty-request+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.llamagraphics.life-balance.desktop": {
      source: "iana",
      extensions: ["lbd"]
    },
    "application/vnd.llamagraphics.life-balance.exchange+xml": {
      source: "iana",
      compressible: true,
      extensions: ["lbe"]
    },
    "application/vnd.logipipe.circuit+zip": {
      source: "iana",
      compressible: false
    },
    "application/vnd.loom": {
      source: "iana"
    },
    "application/vnd.lotus-1-2-3": {
      source: "iana",
      extensions: ["123"]
    },
    "application/vnd.lotus-approach": {
      source: "iana",
      extensions: ["apr"]
    },
    "application/vnd.lotus-freelance": {
      source: "iana",
      extensions: ["pre"]
    },
    "application/vnd.lotus-notes": {
      source: "iana",
      extensions: ["nsf"]
    },
    "application/vnd.lotus-organizer": {
      source: "iana",
      extensions: ["org"]
    },
    "application/vnd.lotus-screencam": {
      source: "iana",
      extensions: ["scm"]
    },
    "application/vnd.lotus-wordpro": {
      source: "iana",
      extensions: ["lwp"]
    },
    "application/vnd.macports.portpkg": {
      source: "iana",
      extensions: ["portpkg"]
    },
    "application/vnd.mapbox-vector-tile": {
      source: "iana",
      extensions: ["mvt"]
    },
    "application/vnd.marlin.drm.actiontoken+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.marlin.drm.conftoken+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.marlin.drm.license+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.marlin.drm.mdcf": {
      source: "iana"
    },
    "application/vnd.mason+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.maxar.archive.3tz+zip": {
      source: "iana",
      compressible: false
    },
    "application/vnd.maxmind.maxmind-db": {
      source: "iana"
    },
    "application/vnd.mcd": {
      source: "iana",
      extensions: ["mcd"]
    },
    "application/vnd.medcalcdata": {
      source: "iana",
      extensions: ["mc1"]
    },
    "application/vnd.mediastation.cdkey": {
      source: "iana",
      extensions: ["cdkey"]
    },
    "application/vnd.meridian-slingshot": {
      source: "iana"
    },
    "application/vnd.mfer": {
      source: "iana",
      extensions: ["mwf"]
    },
    "application/vnd.mfmp": {
      source: "iana",
      extensions: ["mfm"]
    },
    "application/vnd.micro+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.micrografx.flo": {
      source: "iana",
      extensions: ["flo"]
    },
    "application/vnd.micrografx.igx": {
      source: "iana",
      extensions: ["igx"]
    },
    "application/vnd.microsoft.portable-executable": {
      source: "iana"
    },
    "application/vnd.microsoft.windows.thumbnail-cache": {
      source: "iana"
    },
    "application/vnd.miele+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.mif": {
      source: "iana",
      extensions: ["mif"]
    },
    "application/vnd.minisoft-hp3000-save": {
      source: "iana"
    },
    "application/vnd.mitsubishi.misty-guard.trustweb": {
      source: "iana"
    },
    "application/vnd.mobius.daf": {
      source: "iana",
      extensions: ["daf"]
    },
    "application/vnd.mobius.dis": {
      source: "iana",
      extensions: ["dis"]
    },
    "application/vnd.mobius.mbk": {
      source: "iana",
      extensions: ["mbk"]
    },
    "application/vnd.mobius.mqy": {
      source: "iana",
      extensions: ["mqy"]
    },
    "application/vnd.mobius.msl": {
      source: "iana",
      extensions: ["msl"]
    },
    "application/vnd.mobius.plc": {
      source: "iana",
      extensions: ["plc"]
    },
    "application/vnd.mobius.txf": {
      source: "iana",
      extensions: ["txf"]
    },
    "application/vnd.mophun.application": {
      source: "iana",
      extensions: ["mpn"]
    },
    "application/vnd.mophun.certificate": {
      source: "iana",
      extensions: ["mpc"]
    },
    "application/vnd.motorola.flexsuite": {
      source: "iana"
    },
    "application/vnd.motorola.flexsuite.adsi": {
      source: "iana"
    },
    "application/vnd.motorola.flexsuite.fis": {
      source: "iana"
    },
    "application/vnd.motorola.flexsuite.gotap": {
      source: "iana"
    },
    "application/vnd.motorola.flexsuite.kmr": {
      source: "iana"
    },
    "application/vnd.motorola.flexsuite.ttc": {
      source: "iana"
    },
    "application/vnd.motorola.flexsuite.wem": {
      source: "iana"
    },
    "application/vnd.motorola.iprm": {
      source: "iana"
    },
    "application/vnd.mozilla.xul+xml": {
      source: "iana",
      compressible: true,
      extensions: ["xul"]
    },
    "application/vnd.ms-3mfdocument": {
      source: "iana"
    },
    "application/vnd.ms-artgalry": {
      source: "iana",
      extensions: ["cil"]
    },
    "application/vnd.ms-asf": {
      source: "iana"
    },
    "application/vnd.ms-cab-compressed": {
      source: "iana",
      extensions: ["cab"]
    },
    "application/vnd.ms-color.iccprofile": {
      source: "apache"
    },
    "application/vnd.ms-excel": {
      source: "iana",
      compressible: false,
      extensions: ["xls", "xlm", "xla", "xlc", "xlt", "xlw"]
    },
    "application/vnd.ms-excel.addin.macroenabled.12": {
      source: "iana",
      extensions: ["xlam"]
    },
    "application/vnd.ms-excel.sheet.binary.macroenabled.12": {
      source: "iana",
      extensions: ["xlsb"]
    },
    "application/vnd.ms-excel.sheet.macroenabled.12": {
      source: "iana",
      extensions: ["xlsm"]
    },
    "application/vnd.ms-excel.template.macroenabled.12": {
      source: "iana",
      extensions: ["xltm"]
    },
    "application/vnd.ms-fontobject": {
      source: "iana",
      compressible: true,
      extensions: ["eot"]
    },
    "application/vnd.ms-htmlhelp": {
      source: "iana",
      extensions: ["chm"]
    },
    "application/vnd.ms-ims": {
      source: "iana",
      extensions: ["ims"]
    },
    "application/vnd.ms-lrm": {
      source: "iana",
      extensions: ["lrm"]
    },
    "application/vnd.ms-office.activex+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.ms-officetheme": {
      source: "iana",
      extensions: ["thmx"]
    },
    "application/vnd.ms-opentype": {
      source: "apache",
      compressible: true
    },
    "application/vnd.ms-outlook": {
      compressible: false,
      extensions: ["msg"]
    },
    "application/vnd.ms-package.obfuscated-opentype": {
      source: "apache"
    },
    "application/vnd.ms-pki.seccat": {
      source: "apache",
      extensions: ["cat"]
    },
    "application/vnd.ms-pki.stl": {
      source: "apache",
      extensions: ["stl"]
    },
    "application/vnd.ms-playready.initiator+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.ms-powerpoint": {
      source: "iana",
      compressible: false,
      extensions: ["ppt", "pps", "pot"]
    },
    "application/vnd.ms-powerpoint.addin.macroenabled.12": {
      source: "iana",
      extensions: ["ppam"]
    },
    "application/vnd.ms-powerpoint.presentation.macroenabled.12": {
      source: "iana",
      extensions: ["pptm"]
    },
    "application/vnd.ms-powerpoint.slide.macroenabled.12": {
      source: "iana",
      extensions: ["sldm"]
    },
    "application/vnd.ms-powerpoint.slideshow.macroenabled.12": {
      source: "iana",
      extensions: ["ppsm"]
    },
    "application/vnd.ms-powerpoint.template.macroenabled.12": {
      source: "iana",
      extensions: ["potm"]
    },
    "application/vnd.ms-printdevicecapabilities+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.ms-printing.printticket+xml": {
      source: "apache",
      compressible: true
    },
    "application/vnd.ms-printschematicket+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.ms-project": {
      source: "iana",
      extensions: ["mpp", "mpt"]
    },
    "application/vnd.ms-tnef": {
      source: "iana"
    },
    "application/vnd.ms-windows.devicepairing": {
      source: "iana"
    },
    "application/vnd.ms-windows.nwprinting.oob": {
      source: "iana"
    },
    "application/vnd.ms-windows.printerpairing": {
      source: "iana"
    },
    "application/vnd.ms-windows.wsd.oob": {
      source: "iana"
    },
    "application/vnd.ms-wmdrm.lic-chlg-req": {
      source: "iana"
    },
    "application/vnd.ms-wmdrm.lic-resp": {
      source: "iana"
    },
    "application/vnd.ms-wmdrm.meter-chlg-req": {
      source: "iana"
    },
    "application/vnd.ms-wmdrm.meter-resp": {
      source: "iana"
    },
    "application/vnd.ms-word.document.macroenabled.12": {
      source: "iana",
      extensions: ["docm"]
    },
    "application/vnd.ms-word.template.macroenabled.12": {
      source: "iana",
      extensions: ["dotm"]
    },
    "application/vnd.ms-works": {
      source: "iana",
      extensions: ["wps", "wks", "wcm", "wdb"]
    },
    "application/vnd.ms-wpl": {
      source: "iana",
      extensions: ["wpl"]
    },
    "application/vnd.ms-xpsdocument": {
      source: "iana",
      compressible: false,
      extensions: ["xps"]
    },
    "application/vnd.msa-disk-image": {
      source: "iana"
    },
    "application/vnd.mseq": {
      source: "iana",
      extensions: ["mseq"]
    },
    "application/vnd.msign": {
      source: "iana"
    },
    "application/vnd.multiad.creator": {
      source: "iana"
    },
    "application/vnd.multiad.creator.cif": {
      source: "iana"
    },
    "application/vnd.music-niff": {
      source: "iana"
    },
    "application/vnd.musician": {
      source: "iana",
      extensions: ["mus"]
    },
    "application/vnd.muvee.style": {
      source: "iana",
      extensions: ["msty"]
    },
    "application/vnd.mynfc": {
      source: "iana",
      extensions: ["taglet"]
    },
    "application/vnd.nacamar.ybrid+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.ncd.control": {
      source: "iana"
    },
    "application/vnd.ncd.reference": {
      source: "iana"
    },
    "application/vnd.nearst.inv+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.nebumind.line": {
      source: "iana"
    },
    "application/vnd.nervana": {
      source: "iana"
    },
    "application/vnd.netfpx": {
      source: "iana"
    },
    "application/vnd.neurolanguage.nlu": {
      source: "iana",
      extensions: ["nlu"]
    },
    "application/vnd.nimn": {
      source: "iana"
    },
    "application/vnd.nintendo.nitro.rom": {
      source: "iana"
    },
    "application/vnd.nintendo.snes.rom": {
      source: "iana"
    },
    "application/vnd.nitf": {
      source: "iana",
      extensions: ["ntf", "nitf"]
    },
    "application/vnd.noblenet-directory": {
      source: "iana",
      extensions: ["nnd"]
    },
    "application/vnd.noblenet-sealer": {
      source: "iana",
      extensions: ["nns"]
    },
    "application/vnd.noblenet-web": {
      source: "iana",
      extensions: ["nnw"]
    },
    "application/vnd.nokia.catalogs": {
      source: "iana"
    },
    "application/vnd.nokia.conml+wbxml": {
      source: "iana"
    },
    "application/vnd.nokia.conml+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.nokia.iptv.config+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.nokia.isds-radio-presets": {
      source: "iana"
    },
    "application/vnd.nokia.landmark+wbxml": {
      source: "iana"
    },
    "application/vnd.nokia.landmark+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.nokia.landmarkcollection+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.nokia.n-gage.ac+xml": {
      source: "iana",
      compressible: true,
      extensions: ["ac"]
    },
    "application/vnd.nokia.n-gage.data": {
      source: "iana",
      extensions: ["ngdat"]
    },
    "application/vnd.nokia.n-gage.symbian.install": {
      source: "iana",
      extensions: ["n-gage"]
    },
    "application/vnd.nokia.ncd": {
      source: "iana"
    },
    "application/vnd.nokia.pcd+wbxml": {
      source: "iana"
    },
    "application/vnd.nokia.pcd+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.nokia.radio-preset": {
      source: "iana",
      extensions: ["rpst"]
    },
    "application/vnd.nokia.radio-presets": {
      source: "iana",
      extensions: ["rpss"]
    },
    "application/vnd.novadigm.edm": {
      source: "iana",
      extensions: ["edm"]
    },
    "application/vnd.novadigm.edx": {
      source: "iana",
      extensions: ["edx"]
    },
    "application/vnd.novadigm.ext": {
      source: "iana",
      extensions: ["ext"]
    },
    "application/vnd.ntt-local.content-share": {
      source: "iana"
    },
    "application/vnd.ntt-local.file-transfer": {
      source: "iana"
    },
    "application/vnd.ntt-local.ogw_remote-access": {
      source: "iana"
    },
    "application/vnd.ntt-local.sip-ta_remote": {
      source: "iana"
    },
    "application/vnd.ntt-local.sip-ta_tcp_stream": {
      source: "iana"
    },
    "application/vnd.oasis.opendocument.chart": {
      source: "iana",
      extensions: ["odc"]
    },
    "application/vnd.oasis.opendocument.chart-template": {
      source: "iana",
      extensions: ["otc"]
    },
    "application/vnd.oasis.opendocument.database": {
      source: "iana",
      extensions: ["odb"]
    },
    "application/vnd.oasis.opendocument.formula": {
      source: "iana",
      extensions: ["odf"]
    },
    "application/vnd.oasis.opendocument.formula-template": {
      source: "iana",
      extensions: ["odft"]
    },
    "application/vnd.oasis.opendocument.graphics": {
      source: "iana",
      compressible: false,
      extensions: ["odg"]
    },
    "application/vnd.oasis.opendocument.graphics-template": {
      source: "iana",
      extensions: ["otg"]
    },
    "application/vnd.oasis.opendocument.image": {
      source: "iana",
      extensions: ["odi"]
    },
    "application/vnd.oasis.opendocument.image-template": {
      source: "iana",
      extensions: ["oti"]
    },
    "application/vnd.oasis.opendocument.presentation": {
      source: "iana",
      compressible: false,
      extensions: ["odp"]
    },
    "application/vnd.oasis.opendocument.presentation-template": {
      source: "iana",
      extensions: ["otp"]
    },
    "application/vnd.oasis.opendocument.spreadsheet": {
      source: "iana",
      compressible: false,
      extensions: ["ods"]
    },
    "application/vnd.oasis.opendocument.spreadsheet-template": {
      source: "iana",
      extensions: ["ots"]
    },
    "application/vnd.oasis.opendocument.text": {
      source: "iana",
      compressible: false,
      extensions: ["odt"]
    },
    "application/vnd.oasis.opendocument.text-master": {
      source: "iana",
      extensions: ["odm"]
    },
    "application/vnd.oasis.opendocument.text-template": {
      source: "iana",
      extensions: ["ott"]
    },
    "application/vnd.oasis.opendocument.text-web": {
      source: "iana",
      extensions: ["oth"]
    },
    "application/vnd.obn": {
      source: "iana"
    },
    "application/vnd.ocf+cbor": {
      source: "iana"
    },
    "application/vnd.oci.image.manifest.v1+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oftn.l10n+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oipf.contentaccessdownload+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oipf.contentaccessstreaming+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oipf.cspg-hexbinary": {
      source: "iana"
    },
    "application/vnd.oipf.dae.svg+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oipf.dae.xhtml+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oipf.mippvcontrolmessage+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oipf.pae.gem": {
      source: "iana"
    },
    "application/vnd.oipf.spdiscovery+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oipf.spdlist+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oipf.ueprofile+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oipf.userprofile+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.olpc-sugar": {
      source: "iana",
      extensions: ["xo"]
    },
    "application/vnd.oma-scws-config": {
      source: "iana"
    },
    "application/vnd.oma-scws-http-request": {
      source: "iana"
    },
    "application/vnd.oma-scws-http-response": {
      source: "iana"
    },
    "application/vnd.oma.bcast.associated-procedure-parameter+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oma.bcast.drm-trigger+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oma.bcast.imd+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oma.bcast.ltkm": {
      source: "iana"
    },
    "application/vnd.oma.bcast.notification+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oma.bcast.provisioningtrigger": {
      source: "iana"
    },
    "application/vnd.oma.bcast.sgboot": {
      source: "iana"
    },
    "application/vnd.oma.bcast.sgdd+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oma.bcast.sgdu": {
      source: "iana"
    },
    "application/vnd.oma.bcast.simple-symbol-container": {
      source: "iana"
    },
    "application/vnd.oma.bcast.smartcard-trigger+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oma.bcast.sprov+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oma.bcast.stkm": {
      source: "iana"
    },
    "application/vnd.oma.cab-address-book+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oma.cab-feature-handler+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oma.cab-pcc+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oma.cab-subs-invite+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oma.cab-user-prefs+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oma.dcd": {
      source: "iana"
    },
    "application/vnd.oma.dcdc": {
      source: "iana"
    },
    "application/vnd.oma.dd2+xml": {
      source: "iana",
      compressible: true,
      extensions: ["dd2"]
    },
    "application/vnd.oma.drm.risd+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oma.group-usage-list+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oma.lwm2m+cbor": {
      source: "iana"
    },
    "application/vnd.oma.lwm2m+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oma.lwm2m+tlv": {
      source: "iana"
    },
    "application/vnd.oma.pal+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oma.poc.detailed-progress-report+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oma.poc.final-report+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oma.poc.groups+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oma.poc.invocation-descriptor+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oma.poc.optimized-progress-report+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oma.push": {
      source: "iana"
    },
    "application/vnd.oma.scidm.messages+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oma.xcap-directory+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.omads-email+xml": {
      source: "iana",
      charset: "UTF-8",
      compressible: true
    },
    "application/vnd.omads-file+xml": {
      source: "iana",
      charset: "UTF-8",
      compressible: true
    },
    "application/vnd.omads-folder+xml": {
      source: "iana",
      charset: "UTF-8",
      compressible: true
    },
    "application/vnd.omaloc-supl-init": {
      source: "iana"
    },
    "application/vnd.onepager": {
      source: "iana"
    },
    "application/vnd.onepagertamp": {
      source: "iana"
    },
    "application/vnd.onepagertamx": {
      source: "iana"
    },
    "application/vnd.onepagertat": {
      source: "iana"
    },
    "application/vnd.onepagertatp": {
      source: "iana"
    },
    "application/vnd.onepagertatx": {
      source: "iana"
    },
    "application/vnd.openblox.game+xml": {
      source: "iana",
      compressible: true,
      extensions: ["obgx"]
    },
    "application/vnd.openblox.game-binary": {
      source: "iana"
    },
    "application/vnd.openeye.oeb": {
      source: "iana"
    },
    "application/vnd.openofficeorg.extension": {
      source: "apache",
      extensions: ["oxt"]
    },
    "application/vnd.openstreetmap.data+xml": {
      source: "iana",
      compressible: true,
      extensions: ["osm"]
    },
    "application/vnd.opentimestamps.ots": {
      source: "iana"
    },
    "application/vnd.openxmlformats-officedocument.custom-properties+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.customxmlproperties+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.drawing+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.drawingml.chart+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.drawingml.chartshapes+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.drawingml.diagramcolors+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.drawingml.diagramdata+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.drawingml.diagramlayout+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.drawingml.diagramstyle+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.extended-properties+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.presentationml.commentauthors+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.presentationml.comments+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.presentationml.handoutmaster+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.presentationml.notesmaster+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.presentationml.notesslide+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.presentationml.presentation": {
      source: "iana",
      compressible: false,
      extensions: ["pptx"]
    },
    "application/vnd.openxmlformats-officedocument.presentationml.presentation.main+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.presentationml.presprops+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.presentationml.slide": {
      source: "iana",
      extensions: ["sldx"]
    },
    "application/vnd.openxmlformats-officedocument.presentationml.slide+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.presentationml.slidelayout+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.presentationml.slidemaster+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.presentationml.slideshow": {
      source: "iana",
      extensions: ["ppsx"]
    },
    "application/vnd.openxmlformats-officedocument.presentationml.slideshow.main+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.presentationml.slideupdateinfo+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.presentationml.tablestyles+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.presentationml.tags+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.presentationml.template": {
      source: "iana",
      extensions: ["potx"]
    },
    "application/vnd.openxmlformats-officedocument.presentationml.template.main+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.presentationml.viewprops+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.calcchain+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.chartsheet+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.comments+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.connections+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.dialogsheet+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.externallink+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcachedefinition+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.pivotcacherecords+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.pivottable+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.querytable+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.revisionheaders+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.revisionlog+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.sharedstrings+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet": {
      source: "iana",
      compressible: false,
      extensions: ["xlsx"]
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.sheetmetadata+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.table+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.tablesinglecells+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.template": {
      source: "iana",
      extensions: ["xltx"]
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.template.main+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.usernames+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.volatiledependencies+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.theme+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.themeoverride+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.vmldrawing": {
      source: "iana"
    },
    "application/vnd.openxmlformats-officedocument.wordprocessingml.comments+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.wordprocessingml.document": {
      source: "iana",
      compressible: false,
      extensions: ["docx"]
    },
    "application/vnd.openxmlformats-officedocument.wordprocessingml.document.glossary+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.wordprocessingml.document.main+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.wordprocessingml.endnotes+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.wordprocessingml.fonttable+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.wordprocessingml.footer+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.wordprocessingml.footnotes+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.wordprocessingml.numbering+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.wordprocessingml.settings+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.wordprocessingml.styles+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.wordprocessingml.template": {
      source: "iana",
      extensions: ["dotx"]
    },
    "application/vnd.openxmlformats-officedocument.wordprocessingml.template.main+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-officedocument.wordprocessingml.websettings+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-package.core-properties+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-package.digital-signature-xmlsignature+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.openxmlformats-package.relationships+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oracle.resource+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.orange.indata": {
      source: "iana"
    },
    "application/vnd.osa.netdeploy": {
      source: "iana"
    },
    "application/vnd.osgeo.mapguide.package": {
      source: "iana",
      extensions: ["mgp"]
    },
    "application/vnd.osgi.bundle": {
      source: "iana"
    },
    "application/vnd.osgi.dp": {
      source: "iana",
      extensions: ["dp"]
    },
    "application/vnd.osgi.subsystem": {
      source: "iana",
      extensions: ["esa"]
    },
    "application/vnd.otps.ct-kip+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.oxli.countgraph": {
      source: "iana"
    },
    "application/vnd.pagerduty+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.palm": {
      source: "iana",
      extensions: ["pdb", "pqa", "oprc"]
    },
    "application/vnd.panoply": {
      source: "iana"
    },
    "application/vnd.paos.xml": {
      source: "iana"
    },
    "application/vnd.patentdive": {
      source: "iana"
    },
    "application/vnd.patientecommsdoc": {
      source: "iana"
    },
    "application/vnd.pawaafile": {
      source: "iana",
      extensions: ["paw"]
    },
    "application/vnd.pcos": {
      source: "iana"
    },
    "application/vnd.pg.format": {
      source: "iana",
      extensions: ["str"]
    },
    "application/vnd.pg.osasli": {
      source: "iana",
      extensions: ["ei6"]
    },
    "application/vnd.piaccess.application-licence": {
      source: "iana"
    },
    "application/vnd.picsel": {
      source: "iana",
      extensions: ["efif"]
    },
    "application/vnd.pmi.widget": {
      source: "iana",
      extensions: ["wg"]
    },
    "application/vnd.poc.group-advertisement+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.pocketlearn": {
      source: "iana",
      extensions: ["plf"]
    },
    "application/vnd.powerbuilder6": {
      source: "iana",
      extensions: ["pbd"]
    },
    "application/vnd.powerbuilder6-s": {
      source: "iana"
    },
    "application/vnd.powerbuilder7": {
      source: "iana"
    },
    "application/vnd.powerbuilder7-s": {
      source: "iana"
    },
    "application/vnd.powerbuilder75": {
      source: "iana"
    },
    "application/vnd.powerbuilder75-s": {
      source: "iana"
    },
    "application/vnd.preminet": {
      source: "iana"
    },
    "application/vnd.previewsystems.box": {
      source: "iana",
      extensions: ["box"]
    },
    "application/vnd.proteus.magazine": {
      source: "iana",
      extensions: ["mgz"]
    },
    "application/vnd.psfs": {
      source: "iana"
    },
    "application/vnd.publishare-delta-tree": {
      source: "iana",
      extensions: ["qps"]
    },
    "application/vnd.pvi.ptid1": {
      source: "iana",
      extensions: ["ptid"]
    },
    "application/vnd.pwg-multiplexed": {
      source: "iana"
    },
    "application/vnd.pwg-xhtml-print+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.qualcomm.brew-app-res": {
      source: "iana"
    },
    "application/vnd.quarantainenet": {
      source: "iana"
    },
    "application/vnd.quark.quarkxpress": {
      source: "iana",
      extensions: ["qxd", "qxt", "qwd", "qwt", "qxl", "qxb"]
    },
    "application/vnd.quobject-quoxdocument": {
      source: "iana"
    },
    "application/vnd.radisys.moml+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.radisys.msml+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.radisys.msml-audit+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.radisys.msml-audit-conf+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.radisys.msml-audit-conn+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.radisys.msml-audit-dialog+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.radisys.msml-audit-stream+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.radisys.msml-conf+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.radisys.msml-dialog+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.radisys.msml-dialog-base+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.radisys.msml-dialog-fax-detect+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.radisys.msml-dialog-fax-sendrecv+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.radisys.msml-dialog-group+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.radisys.msml-dialog-speech+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.radisys.msml-dialog-transform+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.rainstor.data": {
      source: "iana"
    },
    "application/vnd.rapid": {
      source: "iana"
    },
    "application/vnd.rar": {
      source: "iana",
      extensions: ["rar"]
    },
    "application/vnd.realvnc.bed": {
      source: "iana",
      extensions: ["bed"]
    },
    "application/vnd.recordare.musicxml": {
      source: "iana",
      extensions: ["mxl"]
    },
    "application/vnd.recordare.musicxml+xml": {
      source: "iana",
      compressible: true,
      extensions: ["musicxml"]
    },
    "application/vnd.renlearn.rlprint": {
      source: "iana"
    },
    "application/vnd.resilient.logic": {
      source: "iana"
    },
    "application/vnd.restful+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.rig.cryptonote": {
      source: "iana",
      extensions: ["cryptonote"]
    },
    "application/vnd.rim.cod": {
      source: "apache",
      extensions: ["cod"]
    },
    "application/vnd.rn-realmedia": {
      source: "apache",
      extensions: ["rm"]
    },
    "application/vnd.rn-realmedia-vbr": {
      source: "apache",
      extensions: ["rmvb"]
    },
    "application/vnd.route66.link66+xml": {
      source: "iana",
      compressible: true,
      extensions: ["link66"]
    },
    "application/vnd.rs-274x": {
      source: "iana"
    },
    "application/vnd.ruckus.download": {
      source: "iana"
    },
    "application/vnd.s3sms": {
      source: "iana"
    },
    "application/vnd.sailingtracker.track": {
      source: "iana",
      extensions: ["st"]
    },
    "application/vnd.sar": {
      source: "iana"
    },
    "application/vnd.sbm.cid": {
      source: "iana"
    },
    "application/vnd.sbm.mid2": {
      source: "iana"
    },
    "application/vnd.scribus": {
      source: "iana"
    },
    "application/vnd.sealed.3df": {
      source: "iana"
    },
    "application/vnd.sealed.csf": {
      source: "iana"
    },
    "application/vnd.sealed.doc": {
      source: "iana"
    },
    "application/vnd.sealed.eml": {
      source: "iana"
    },
    "application/vnd.sealed.mht": {
      source: "iana"
    },
    "application/vnd.sealed.net": {
      source: "iana"
    },
    "application/vnd.sealed.ppt": {
      source: "iana"
    },
    "application/vnd.sealed.tiff": {
      source: "iana"
    },
    "application/vnd.sealed.xls": {
      source: "iana"
    },
    "application/vnd.sealedmedia.softseal.html": {
      source: "iana"
    },
    "application/vnd.sealedmedia.softseal.pdf": {
      source: "iana"
    },
    "application/vnd.seemail": {
      source: "iana",
      extensions: ["see"]
    },
    "application/vnd.seis+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.sema": {
      source: "iana",
      extensions: ["sema"]
    },
    "application/vnd.semd": {
      source: "iana",
      extensions: ["semd"]
    },
    "application/vnd.semf": {
      source: "iana",
      extensions: ["semf"]
    },
    "application/vnd.shade-save-file": {
      source: "iana"
    },
    "application/vnd.shana.informed.formdata": {
      source: "iana",
      extensions: ["ifm"]
    },
    "application/vnd.shana.informed.formtemplate": {
      source: "iana",
      extensions: ["itp"]
    },
    "application/vnd.shana.informed.interchange": {
      source: "iana",
      extensions: ["iif"]
    },
    "application/vnd.shana.informed.package": {
      source: "iana",
      extensions: ["ipk"]
    },
    "application/vnd.shootproof+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.shopkick+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.shp": {
      source: "iana"
    },
    "application/vnd.shx": {
      source: "iana"
    },
    "application/vnd.sigrok.session": {
      source: "iana"
    },
    "application/vnd.simtech-mindmapper": {
      source: "iana",
      extensions: ["twd", "twds"]
    },
    "application/vnd.siren+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.smaf": {
      source: "iana",
      extensions: ["mmf"]
    },
    "application/vnd.smart.notebook": {
      source: "iana"
    },
    "application/vnd.smart.teacher": {
      source: "iana",
      extensions: ["teacher"]
    },
    "application/vnd.snesdev-page-table": {
      source: "iana"
    },
    "application/vnd.software602.filler.form+xml": {
      source: "iana",
      compressible: true,
      extensions: ["fo"]
    },
    "application/vnd.software602.filler.form-xml-zip": {
      source: "iana"
    },
    "application/vnd.solent.sdkm+xml": {
      source: "iana",
      compressible: true,
      extensions: ["sdkm", "sdkd"]
    },
    "application/vnd.spotfire.dxp": {
      source: "iana",
      extensions: ["dxp"]
    },
    "application/vnd.spotfire.sfs": {
      source: "iana",
      extensions: ["sfs"]
    },
    "application/vnd.sqlite3": {
      source: "iana"
    },
    "application/vnd.sss-cod": {
      source: "iana"
    },
    "application/vnd.sss-dtf": {
      source: "iana"
    },
    "application/vnd.sss-ntf": {
      source: "iana"
    },
    "application/vnd.stardivision.calc": {
      source: "apache",
      extensions: ["sdc"]
    },
    "application/vnd.stardivision.draw": {
      source: "apache",
      extensions: ["sda"]
    },
    "application/vnd.stardivision.impress": {
      source: "apache",
      extensions: ["sdd"]
    },
    "application/vnd.stardivision.math": {
      source: "apache",
      extensions: ["smf"]
    },
    "application/vnd.stardivision.writer": {
      source: "apache",
      extensions: ["sdw", "vor"]
    },
    "application/vnd.stardivision.writer-global": {
      source: "apache",
      extensions: ["sgl"]
    },
    "application/vnd.stepmania.package": {
      source: "iana",
      extensions: ["smzip"]
    },
    "application/vnd.stepmania.stepchart": {
      source: "iana",
      extensions: ["sm"]
    },
    "application/vnd.street-stream": {
      source: "iana"
    },
    "application/vnd.sun.wadl+xml": {
      source: "iana",
      compressible: true,
      extensions: ["wadl"]
    },
    "application/vnd.sun.xml.calc": {
      source: "apache",
      extensions: ["sxc"]
    },
    "application/vnd.sun.xml.calc.template": {
      source: "apache",
      extensions: ["stc"]
    },
    "application/vnd.sun.xml.draw": {
      source: "apache",
      extensions: ["sxd"]
    },
    "application/vnd.sun.xml.draw.template": {
      source: "apache",
      extensions: ["std"]
    },
    "application/vnd.sun.xml.impress": {
      source: "apache",
      extensions: ["sxi"]
    },
    "application/vnd.sun.xml.impress.template": {
      source: "apache",
      extensions: ["sti"]
    },
    "application/vnd.sun.xml.math": {
      source: "apache",
      extensions: ["sxm"]
    },
    "application/vnd.sun.xml.writer": {
      source: "apache",
      extensions: ["sxw"]
    },
    "application/vnd.sun.xml.writer.global": {
      source: "apache",
      extensions: ["sxg"]
    },
    "application/vnd.sun.xml.writer.template": {
      source: "apache",
      extensions: ["stw"]
    },
    "application/vnd.sus-calendar": {
      source: "iana",
      extensions: ["sus", "susp"]
    },
    "application/vnd.svd": {
      source: "iana",
      extensions: ["svd"]
    },
    "application/vnd.swiftview-ics": {
      source: "iana"
    },
    "application/vnd.sycle+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.syft+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.symbian.install": {
      source: "apache",
      extensions: ["sis", "sisx"]
    },
    "application/vnd.syncml+xml": {
      source: "iana",
      charset: "UTF-8",
      compressible: true,
      extensions: ["xsm"]
    },
    "application/vnd.syncml.dm+wbxml": {
      source: "iana",
      charset: "UTF-8",
      extensions: ["bdm"]
    },
    "application/vnd.syncml.dm+xml": {
      source: "iana",
      charset: "UTF-8",
      compressible: true,
      extensions: ["xdm"]
    },
    "application/vnd.syncml.dm.notification": {
      source: "iana"
    },
    "application/vnd.syncml.dmddf+wbxml": {
      source: "iana"
    },
    "application/vnd.syncml.dmddf+xml": {
      source: "iana",
      charset: "UTF-8",
      compressible: true,
      extensions: ["ddf"]
    },
    "application/vnd.syncml.dmtnds+wbxml": {
      source: "iana"
    },
    "application/vnd.syncml.dmtnds+xml": {
      source: "iana",
      charset: "UTF-8",
      compressible: true
    },
    "application/vnd.syncml.ds.notification": {
      source: "iana"
    },
    "application/vnd.tableschema+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.tao.intent-module-archive": {
      source: "iana",
      extensions: ["tao"]
    },
    "application/vnd.tcpdump.pcap": {
      source: "iana",
      extensions: ["pcap", "cap", "dmp"]
    },
    "application/vnd.think-cell.ppttc+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.tmd.mediaflex.api+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.tml": {
      source: "iana"
    },
    "application/vnd.tmobile-livetv": {
      source: "iana",
      extensions: ["tmo"]
    },
    "application/vnd.tri.onesource": {
      source: "iana"
    },
    "application/vnd.trid.tpt": {
      source: "iana",
      extensions: ["tpt"]
    },
    "application/vnd.triscape.mxs": {
      source: "iana",
      extensions: ["mxs"]
    },
    "application/vnd.trueapp": {
      source: "iana",
      extensions: ["tra"]
    },
    "application/vnd.truedoc": {
      source: "iana"
    },
    "application/vnd.ubisoft.webplayer": {
      source: "iana"
    },
    "application/vnd.ufdl": {
      source: "iana",
      extensions: ["ufd", "ufdl"]
    },
    "application/vnd.uiq.theme": {
      source: "iana",
      extensions: ["utz"]
    },
    "application/vnd.umajin": {
      source: "iana",
      extensions: ["umj"]
    },
    "application/vnd.unity": {
      source: "iana",
      extensions: ["unityweb"]
    },
    "application/vnd.uoml+xml": {
      source: "iana",
      compressible: true,
      extensions: ["uoml"]
    },
    "application/vnd.uplanet.alert": {
      source: "iana"
    },
    "application/vnd.uplanet.alert-wbxml": {
      source: "iana"
    },
    "application/vnd.uplanet.bearer-choice": {
      source: "iana"
    },
    "application/vnd.uplanet.bearer-choice-wbxml": {
      source: "iana"
    },
    "application/vnd.uplanet.cacheop": {
      source: "iana"
    },
    "application/vnd.uplanet.cacheop-wbxml": {
      source: "iana"
    },
    "application/vnd.uplanet.channel": {
      source: "iana"
    },
    "application/vnd.uplanet.channel-wbxml": {
      source: "iana"
    },
    "application/vnd.uplanet.list": {
      source: "iana"
    },
    "application/vnd.uplanet.list-wbxml": {
      source: "iana"
    },
    "application/vnd.uplanet.listcmd": {
      source: "iana"
    },
    "application/vnd.uplanet.listcmd-wbxml": {
      source: "iana"
    },
    "application/vnd.uplanet.signal": {
      source: "iana"
    },
    "application/vnd.uri-map": {
      source: "iana"
    },
    "application/vnd.valve.source.material": {
      source: "iana"
    },
    "application/vnd.vcx": {
      source: "iana",
      extensions: ["vcx"]
    },
    "application/vnd.vd-study": {
      source: "iana"
    },
    "application/vnd.vectorworks": {
      source: "iana"
    },
    "application/vnd.vel+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.verimatrix.vcas": {
      source: "iana"
    },
    "application/vnd.veritone.aion+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.veryant.thin": {
      source: "iana"
    },
    "application/vnd.ves.encrypted": {
      source: "iana"
    },
    "application/vnd.vidsoft.vidconference": {
      source: "iana"
    },
    "application/vnd.visio": {
      source: "iana",
      extensions: ["vsd", "vst", "vss", "vsw"]
    },
    "application/vnd.visionary": {
      source: "iana",
      extensions: ["vis"]
    },
    "application/vnd.vividence.scriptfile": {
      source: "iana"
    },
    "application/vnd.vsf": {
      source: "iana",
      extensions: ["vsf"]
    },
    "application/vnd.wap.sic": {
      source: "iana"
    },
    "application/vnd.wap.slc": {
      source: "iana"
    },
    "application/vnd.wap.wbxml": {
      source: "iana",
      charset: "UTF-8",
      extensions: ["wbxml"]
    },
    "application/vnd.wap.wmlc": {
      source: "iana",
      extensions: ["wmlc"]
    },
    "application/vnd.wap.wmlscriptc": {
      source: "iana",
      extensions: ["wmlsc"]
    },
    "application/vnd.webturbo": {
      source: "iana",
      extensions: ["wtb"]
    },
    "application/vnd.wfa.dpp": {
      source: "iana"
    },
    "application/vnd.wfa.p2p": {
      source: "iana"
    },
    "application/vnd.wfa.wsc": {
      source: "iana"
    },
    "application/vnd.windows.devicepairing": {
      source: "iana"
    },
    "application/vnd.wmc": {
      source: "iana"
    },
    "application/vnd.wmf.bootstrap": {
      source: "iana"
    },
    "application/vnd.wolfram.mathematica": {
      source: "iana"
    },
    "application/vnd.wolfram.mathematica.package": {
      source: "iana"
    },
    "application/vnd.wolfram.player": {
      source: "iana",
      extensions: ["nbp"]
    },
    "application/vnd.wordperfect": {
      source: "iana",
      extensions: ["wpd"]
    },
    "application/vnd.wqd": {
      source: "iana",
      extensions: ["wqd"]
    },
    "application/vnd.wrq-hp3000-labelled": {
      source: "iana"
    },
    "application/vnd.wt.stf": {
      source: "iana",
      extensions: ["stf"]
    },
    "application/vnd.wv.csp+wbxml": {
      source: "iana"
    },
    "application/vnd.wv.csp+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.wv.ssp+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.xacml+json": {
      source: "iana",
      compressible: true
    },
    "application/vnd.xara": {
      source: "iana",
      extensions: ["xar"]
    },
    "application/vnd.xfdl": {
      source: "iana",
      extensions: ["xfdl"]
    },
    "application/vnd.xfdl.webform": {
      source: "iana"
    },
    "application/vnd.xmi+xml": {
      source: "iana",
      compressible: true
    },
    "application/vnd.xmpie.cpkg": {
      source: "iana"
    },
    "application/vnd.xmpie.dpkg": {
      source: "iana"
    },
    "application/vnd.xmpie.plan": {
      source: "iana"
    },
    "application/vnd.xmpie.ppkg": {
      source: "iana"
    },
    "application/vnd.xmpie.xlim": {
      source: "iana"
    },
    "application/vnd.yamaha.hv-dic": {
      source: "iana",
      extensions: ["hvd"]
    },
    "application/vnd.yamaha.hv-script": {
      source: "iana",
      extensions: ["hvs"]
    },
    "application/vnd.yamaha.hv-voice": {
      source: "iana",
      extensions: ["hvp"]
    },
    "application/vnd.yamaha.openscoreformat": {
      source: "iana",
      extensions: ["osf"]
    },
    "application/vnd.yamaha.openscoreformat.osfpvg+xml": {
      source: "iana",
      compressible: true,
      extensions: ["osfpvg"]
    },
    "application/vnd.yamaha.remote-setup": {
      source: "iana"
    },
    "application/vnd.yamaha.smaf-audio": {
      source: "iana",
      extensions: ["saf"]
    },
    "application/vnd.yamaha.smaf-phrase": {
      source: "iana",
      extensions: ["spf"]
    },
    "application/vnd.yamaha.through-ngn": {
      source: "iana"
    },
    "application/vnd.yamaha.tunnel-udpencap": {
      source: "iana"
    },
    "application/vnd.yaoweme": {
      source: "iana"
    },
    "application/vnd.yellowriver-custom-menu": {
      source: "iana",
      extensions: ["cmp"]
    },
    "application/vnd.youtube.yt": {
      source: "iana"
    },
    "application/vnd.zul": {
      source: "iana",
      extensions: ["zir", "zirz"]
    },
    "application/vnd.zzazz.deck+xml": {
      source: "iana",
      compressible: true,
      extensions: ["zaz"]
    },
    "application/voicexml+xml": {
      source: "iana",
      compressible: true,
      extensions: ["vxml"]
    },
    "application/voucher-cms+json": {
      source: "iana",
      compressible: true
    },
    "application/vq-rtcpxr": {
      source: "iana"
    },
    "application/wasm": {
      source: "iana",
      compressible: true,
      extensions: ["wasm"]
    },
    "application/watcherinfo+xml": {
      source: "iana",
      compressible: true,
      extensions: ["wif"]
    },
    "application/webpush-options+json": {
      source: "iana",
      compressible: true
    },
    "application/whoispp-query": {
      source: "iana"
    },
    "application/whoispp-response": {
      source: "iana"
    },
    "application/widget": {
      source: "iana",
      extensions: ["wgt"]
    },
    "application/winhlp": {
      source: "apache",
      extensions: ["hlp"]
    },
    "application/wita": {
      source: "iana"
    },
    "application/wordperfect5.1": {
      source: "iana"
    },
    "application/wsdl+xml": {
      source: "iana",
      compressible: true,
      extensions: ["wsdl"]
    },
    "application/wspolicy+xml": {
      source: "iana",
      compressible: true,
      extensions: ["wspolicy"]
    },
    "application/x-7z-compressed": {
      source: "apache",
      compressible: false,
      extensions: ["7z"]
    },
    "application/x-abiword": {
      source: "apache",
      extensions: ["abw"]
    },
    "application/x-ace-compressed": {
      source: "apache",
      extensions: ["ace"]
    },
    "application/x-amf": {
      source: "apache"
    },
    "application/x-apple-diskimage": {
      source: "apache",
      extensions: ["dmg"]
    },
    "application/x-arj": {
      compressible: false,
      extensions: ["arj"]
    },
    "application/x-authorware-bin": {
      source: "apache",
      extensions: ["aab", "x32", "u32", "vox"]
    },
    "application/x-authorware-map": {
      source: "apache",
      extensions: ["aam"]
    },
    "application/x-authorware-seg": {
      source: "apache",
      extensions: ["aas"]
    },
    "application/x-bcpio": {
      source: "apache",
      extensions: ["bcpio"]
    },
    "application/x-bdoc": {
      compressible: false,
      extensions: ["bdoc"]
    },
    "application/x-bittorrent": {
      source: "apache",
      extensions: ["torrent"]
    },
    "application/x-blorb": {
      source: "apache",
      extensions: ["blb", "blorb"]
    },
    "application/x-bzip": {
      source: "apache",
      compressible: false,
      extensions: ["bz"]
    },
    "application/x-bzip2": {
      source: "apache",
      compressible: false,
      extensions: ["bz2", "boz"]
    },
    "application/x-cbr": {
      source: "apache",
      extensions: ["cbr", "cba", "cbt", "cbz", "cb7"]
    },
    "application/x-cdlink": {
      source: "apache",
      extensions: ["vcd"]
    },
    "application/x-cfs-compressed": {
      source: "apache",
      extensions: ["cfs"]
    },
    "application/x-chat": {
      source: "apache",
      extensions: ["chat"]
    },
    "application/x-chess-pgn": {
      source: "apache",
      extensions: ["pgn"]
    },
    "application/x-chrome-extension": {
      extensions: ["crx"]
    },
    "application/x-cocoa": {
      source: "nginx",
      extensions: ["cco"]
    },
    "application/x-compress": {
      source: "apache"
    },
    "application/x-conference": {
      source: "apache",
      extensions: ["nsc"]
    },
    "application/x-cpio": {
      source: "apache",
      extensions: ["cpio"]
    },
    "application/x-csh": {
      source: "apache",
      extensions: ["csh"]
    },
    "application/x-deb": {
      compressible: false
    },
    "application/x-debian-package": {
      source: "apache",
      extensions: ["deb", "udeb"]
    },
    "application/x-dgc-compressed": {
      source: "apache",
      extensions: ["dgc"]
    },
    "application/x-director": {
      source: "apache",
      extensions: ["dir", "dcr", "dxr", "cst", "cct", "cxt", "w3d", "fgd", "swa"]
    },
    "application/x-doom": {
      source: "apache",
      extensions: ["wad"]
    },
    "application/x-dtbncx+xml": {
      source: "apache",
      compressible: true,
      extensions: ["ncx"]
    },
    "application/x-dtbook+xml": {
      source: "apache",
      compressible: true,
      extensions: ["dtb"]
    },
    "application/x-dtbresource+xml": {
      source: "apache",
      compressible: true,
      extensions: ["res"]
    },
    "application/x-dvi": {
      source: "apache",
      compressible: false,
      extensions: ["dvi"]
    },
    "application/x-envoy": {
      source: "apache",
      extensions: ["evy"]
    },
    "application/x-eva": {
      source: "apache",
      extensions: ["eva"]
    },
    "application/x-font-bdf": {
      source: "apache",
      extensions: ["bdf"]
    },
    "application/x-font-dos": {
      source: "apache"
    },
    "application/x-font-framemaker": {
      source: "apache"
    },
    "application/x-font-ghostscript": {
      source: "apache",
      extensions: ["gsf"]
    },
    "application/x-font-libgrx": {
      source: "apache"
    },
    "application/x-font-linux-psf": {
      source: "apache",
      extensions: ["psf"]
    },
    "application/x-font-pcf": {
      source: "apache",
      extensions: ["pcf"]
    },
    "application/x-font-snf": {
      source: "apache",
      extensions: ["snf"]
    },
    "application/x-font-speedo": {
      source: "apache"
    },
    "application/x-font-sunos-news": {
      source: "apache"
    },
    "application/x-font-type1": {
      source: "apache",
      extensions: ["pfa", "pfb", "pfm", "afm"]
    },
    "application/x-font-vfont": {
      source: "apache"
    },
    "application/x-freearc": {
      source: "apache",
      extensions: ["arc"]
    },
    "application/x-futuresplash": {
      source: "apache",
      extensions: ["spl"]
    },
    "application/x-gca-compressed": {
      source: "apache",
      extensions: ["gca"]
    },
    "application/x-glulx": {
      source: "apache",
      extensions: ["ulx"]
    },
    "application/x-gnumeric": {
      source: "apache",
      extensions: ["gnumeric"]
    },
    "application/x-gramps-xml": {
      source: "apache",
      extensions: ["gramps"]
    },
    "application/x-gtar": {
      source: "apache",
      extensions: ["gtar"]
    },
    "application/x-gzip": {
      source: "apache"
    },
    "application/x-hdf": {
      source: "apache",
      extensions: ["hdf"]
    },
    "application/x-httpd-php": {
      compressible: true,
      extensions: ["php"]
    },
    "application/x-install-instructions": {
      source: "apache",
      extensions: ["install"]
    },
    "application/x-iso9660-image": {
      source: "apache",
      extensions: ["iso"]
    },
    "application/x-iwork-keynote-sffkey": {
      extensions: ["key"]
    },
    "application/x-iwork-numbers-sffnumbers": {
      extensions: ["numbers"]
    },
    "application/x-iwork-pages-sffpages": {
      extensions: ["pages"]
    },
    "application/x-java-archive-diff": {
      source: "nginx",
      extensions: ["jardiff"]
    },
    "application/x-java-jnlp-file": {
      source: "apache",
      compressible: false,
      extensions: ["jnlp"]
    },
    "application/x-javascript": {
      compressible: true
    },
    "application/x-keepass2": {
      extensions: ["kdbx"]
    },
    "application/x-latex": {
      source: "apache",
      compressible: false,
      extensions: ["latex"]
    },
    "application/x-lua-bytecode": {
      extensions: ["luac"]
    },
    "application/x-lzh-compressed": {
      source: "apache",
      extensions: ["lzh", "lha"]
    },
    "application/x-makeself": {
      source: "nginx",
      extensions: ["run"]
    },
    "application/x-mie": {
      source: "apache",
      extensions: ["mie"]
    },
    "application/x-mobipocket-ebook": {
      source: "apache",
      extensions: ["prc", "mobi"]
    },
    "application/x-mpegurl": {
      compressible: false
    },
    "application/x-ms-application": {
      source: "apache",
      extensions: ["application"]
    },
    "application/x-ms-shortcut": {
      source: "apache",
      extensions: ["lnk"]
    },
    "application/x-ms-wmd": {
      source: "apache",
      extensions: ["wmd"]
    },
    "application/x-ms-wmz": {
      source: "apache",
      extensions: ["wmz"]
    },
    "application/x-ms-xbap": {
      source: "apache",
      extensions: ["xbap"]
    },
    "application/x-msaccess": {
      source: "apache",
      extensions: ["mdb"]
    },
    "application/x-msbinder": {
      source: "apache",
      extensions: ["obd"]
    },
    "application/x-mscardfile": {
      source: "apache",
      extensions: ["crd"]
    },
    "application/x-msclip": {
      source: "apache",
      extensions: ["clp"]
    },
    "application/x-msdos-program": {
      extensions: ["exe"]
    },
    "application/x-msdownload": {
      source: "apache",
      extensions: ["exe", "dll", "com", "bat", "msi"]
    },
    "application/x-msmediaview": {
      source: "apache",
      extensions: ["mvb", "m13", "m14"]
    },
    "application/x-msmetafile": {
      source: "apache",
      extensions: ["wmf", "wmz", "emf", "emz"]
    },
    "application/x-msmoney": {
      source: "apache",
      extensions: ["mny"]
    },
    "application/x-mspublisher": {
      source: "apache",
      extensions: ["pub"]
    },
    "application/x-msschedule": {
      source: "apache",
      extensions: ["scd"]
    },
    "application/x-msterminal": {
      source: "apache",
      extensions: ["trm"]
    },
    "application/x-mswrite": {
      source: "apache",
      extensions: ["wri"]
    },
    "application/x-netcdf": {
      source: "apache",
      extensions: ["nc", "cdf"]
    },
    "application/x-ns-proxy-autoconfig": {
      compressible: true,
      extensions: ["pac"]
    },
    "application/x-nzb": {
      source: "apache",
      extensions: ["nzb"]
    },
    "application/x-perl": {
      source: "nginx",
      extensions: ["pl", "pm"]
    },
    "application/x-pilot": {
      source: "nginx",
      extensions: ["prc", "pdb"]
    },
    "application/x-pkcs12": {
      source: "apache",
      compressible: false,
      extensions: ["p12", "pfx"]
    },
    "application/x-pkcs7-certificates": {
      source: "apache",
      extensions: ["p7b", "spc"]
    },
    "application/x-pkcs7-certreqresp": {
      source: "apache",
      extensions: ["p7r"]
    },
    "application/x-pki-message": {
      source: "iana"
    },
    "application/x-rar-compressed": {
      source: "apache",
      compressible: false,
      extensions: ["rar"]
    },
    "application/x-redhat-package-manager": {
      source: "nginx",
      extensions: ["rpm"]
    },
    "application/x-research-info-systems": {
      source: "apache",
      extensions: ["ris"]
    },
    "application/x-sea": {
      source: "nginx",
      extensions: ["sea"]
    },
    "application/x-sh": {
      source: "apache",
      compressible: true,
      extensions: ["sh"]
    },
    "application/x-shar": {
      source: "apache",
      extensions: ["shar"]
    },
    "application/x-shockwave-flash": {
      source: "apache",
      compressible: false,
      extensions: ["swf"]
    },
    "application/x-silverlight-app": {
      source: "apache",
      extensions: ["xap"]
    },
    "application/x-sql": {
      source: "apache",
      extensions: ["sql"]
    },
    "application/x-stuffit": {
      source: "apache",
      compressible: false,
      extensions: ["sit"]
    },
    "application/x-stuffitx": {
      source: "apache",
      extensions: ["sitx"]
    },
    "application/x-subrip": {
      source: "apache",
      extensions: ["srt"]
    },
    "application/x-sv4cpio": {
      source: "apache",
      extensions: ["sv4cpio"]
    },
    "application/x-sv4crc": {
      source: "apache",
      extensions: ["sv4crc"]
    },
    "application/x-t3vm-image": {
      source: "apache",
      extensions: ["t3"]
    },
    "application/x-tads": {
      source: "apache",
      extensions: ["gam"]
    },
    "application/x-tar": {
      source: "apache",
      compressible: true,
      extensions: ["tar"]
    },
    "application/x-tcl": {
      source: "apache",
      extensions: ["tcl", "tk"]
    },
    "application/x-tex": {
      source: "apache",
      extensions: ["tex"]
    },
    "application/x-tex-tfm": {
      source: "apache",
      extensions: ["tfm"]
    },
    "application/x-texinfo": {
      source: "apache",
      extensions: ["texinfo", "texi"]
    },
    "application/x-tgif": {
      source: "apache",
      extensions: ["obj"]
    },
    "application/x-ustar": {
      source: "apache",
      extensions: ["ustar"]
    },
    "application/x-virtualbox-hdd": {
      compressible: true,
      extensions: ["hdd"]
    },
    "application/x-virtualbox-ova": {
      compressible: true,
      extensions: ["ova"]
    },
    "application/x-virtualbox-ovf": {
      compressible: true,
      extensions: ["ovf"]
    },
    "application/x-virtualbox-vbox": {
      compressible: true,
      extensions: ["vbox"]
    },
    "application/x-virtualbox-vbox-extpack": {
      compressible: false,
      extensions: ["vbox-extpack"]
    },
    "application/x-virtualbox-vdi": {
      compressible: true,
      extensions: ["vdi"]
    },
    "application/x-virtualbox-vhd": {
      compressible: true,
      extensions: ["vhd"]
    },
    "application/x-virtualbox-vmdk": {
      compressible: true,
      extensions: ["vmdk"]
    },
    "application/x-wais-source": {
      source: "apache",
      extensions: ["src"]
    },
    "application/x-web-app-manifest+json": {
      compressible: true,
      extensions: ["webapp"]
    },
    "application/x-www-form-urlencoded": {
      source: "iana",
      compressible: true
    },
    "application/x-x509-ca-cert": {
      source: "iana",
      extensions: ["der", "crt", "pem"]
    },
    "application/x-x509-ca-ra-cert": {
      source: "iana"
    },
    "application/x-x509-next-ca-cert": {
      source: "iana"
    },
    "application/x-xfig": {
      source: "apache",
      extensions: ["fig"]
    },
    "application/x-xliff+xml": {
      source: "apache",
      compressible: true,
      extensions: ["xlf"]
    },
    "application/x-xpinstall": {
      source: "apache",
      compressible: false,
      extensions: ["xpi"]
    },
    "application/x-xz": {
      source: "apache",
      extensions: ["xz"]
    },
    "application/x-zmachine": {
      source: "apache",
      extensions: ["z1", "z2", "z3", "z4", "z5", "z6", "z7", "z8"]
    },
    "application/x400-bp": {
      source: "iana"
    },
    "application/xacml+xml": {
      source: "iana",
      compressible: true
    },
    "application/xaml+xml": {
      source: "apache",
      compressible: true,
      extensions: ["xaml"]
    },
    "application/xcap-att+xml": {
      source: "iana",
      compressible: true,
      extensions: ["xav"]
    },
    "application/xcap-caps+xml": {
      source: "iana",
      compressible: true,
      extensions: ["xca"]
    },
    "application/xcap-diff+xml": {
      source: "iana",
      compressible: true,
      extensions: ["xdf"]
    },
    "application/xcap-el+xml": {
      source: "iana",
      compressible: true,
      extensions: ["xel"]
    },
    "application/xcap-error+xml": {
      source: "iana",
      compressible: true
    },
    "application/xcap-ns+xml": {
      source: "iana",
      compressible: true,
      extensions: ["xns"]
    },
    "application/xcon-conference-info+xml": {
      source: "iana",
      compressible: true
    },
    "application/xcon-conference-info-diff+xml": {
      source: "iana",
      compressible: true
    },
    "application/xenc+xml": {
      source: "iana",
      compressible: true,
      extensions: ["xenc"]
    },
    "application/xhtml+xml": {
      source: "iana",
      compressible: true,
      extensions: ["xhtml", "xht"]
    },
    "application/xhtml-voice+xml": {
      source: "apache",
      compressible: true
    },
    "application/xliff+xml": {
      source: "iana",
      compressible: true,
      extensions: ["xlf"]
    },
    "application/xml": {
      source: "iana",
      compressible: true,
      extensions: ["xml", "xsl", "xsd", "rng"]
    },
    "application/xml-dtd": {
      source: "iana",
      compressible: true,
      extensions: ["dtd"]
    },
    "application/xml-external-parsed-entity": {
      source: "iana"
    },
    "application/xml-patch+xml": {
      source: "iana",
      compressible: true
    },
    "application/xmpp+xml": {
      source: "iana",
      compressible: true
    },
    "application/xop+xml": {
      source: "iana",
      compressible: true,
      extensions: ["xop"]
    },
    "application/xproc+xml": {
      source: "apache",
      compressible: true,
      extensions: ["xpl"]
    },
    "application/xslt+xml": {
      source: "iana",
      compressible: true,
      extensions: ["xsl", "xslt"]
    },
    "application/xspf+xml": {
      source: "apache",
      compressible: true,
      extensions: ["xspf"]
    },
    "application/xv+xml": {
      source: "iana",
      compressible: true,
      extensions: ["mxml", "xhvml", "xvml", "xvm"]
    },
    "application/yang": {
      source: "iana",
      extensions: ["yang"]
    },
    "application/yang-data+json": {
      source: "iana",
      compressible: true
    },
    "application/yang-data+xml": {
      source: "iana",
      compressible: true
    },
    "application/yang-patch+json": {
      source: "iana",
      compressible: true
    },
    "application/yang-patch+xml": {
      source: "iana",
      compressible: true
    },
    "application/yin+xml": {
      source: "iana",
      compressible: true,
      extensions: ["yin"]
    },
    "application/zip": {
      source: "iana",
      compressible: false,
      extensions: ["zip"]
    },
    "application/zlib": {
      source: "iana"
    },
    "application/zstd": {
      source: "iana"
    },
    "audio/1d-interleaved-parityfec": {
      source: "iana"
    },
    "audio/32kadpcm": {
      source: "iana"
    },
    "audio/3gpp": {
      source: "iana",
      compressible: false,
      extensions: ["3gpp"]
    },
    "audio/3gpp2": {
      source: "iana"
    },
    "audio/aac": {
      source: "iana"
    },
    "audio/ac3": {
      source: "iana"
    },
    "audio/adpcm": {
      source: "apache",
      extensions: ["adp"]
    },
    "audio/amr": {
      source: "iana",
      extensions: ["amr"]
    },
    "audio/amr-wb": {
      source: "iana"
    },
    "audio/amr-wb+": {
      source: "iana"
    },
    "audio/aptx": {
      source: "iana"
    },
    "audio/asc": {
      source: "iana"
    },
    "audio/atrac-advanced-lossless": {
      source: "iana"
    },
    "audio/atrac-x": {
      source: "iana"
    },
    "audio/atrac3": {
      source: "iana"
    },
    "audio/basic": {
      source: "iana",
      compressible: false,
      extensions: ["au", "snd"]
    },
    "audio/bv16": {
      source: "iana"
    },
    "audio/bv32": {
      source: "iana"
    },
    "audio/clearmode": {
      source: "iana"
    },
    "audio/cn": {
      source: "iana"
    },
    "audio/dat12": {
      source: "iana"
    },
    "audio/dls": {
      source: "iana"
    },
    "audio/dsr-es201108": {
      source: "iana"
    },
    "audio/dsr-es202050": {
      source: "iana"
    },
    "audio/dsr-es202211": {
      source: "iana"
    },
    "audio/dsr-es202212": {
      source: "iana"
    },
    "audio/dv": {
      source: "iana"
    },
    "audio/dvi4": {
      source: "iana"
    },
    "audio/eac3": {
      source: "iana"
    },
    "audio/encaprtp": {
      source: "iana"
    },
    "audio/evrc": {
      source: "iana"
    },
    "audio/evrc-qcp": {
      source: "iana"
    },
    "audio/evrc0": {
      source: "iana"
    },
    "audio/evrc1": {
      source: "iana"
    },
    "audio/evrcb": {
      source: "iana"
    },
    "audio/evrcb0": {
      source: "iana"
    },
    "audio/evrcb1": {
      source: "iana"
    },
    "audio/evrcnw": {
      source: "iana"
    },
    "audio/evrcnw0": {
      source: "iana"
    },
    "audio/evrcnw1": {
      source: "iana"
    },
    "audio/evrcwb": {
      source: "iana"
    },
    "audio/evrcwb0": {
      source: "iana"
    },
    "audio/evrcwb1": {
      source: "iana"
    },
    "audio/evs": {
      source: "iana"
    },
    "audio/flexfec": {
      source: "iana"
    },
    "audio/fwdred": {
      source: "iana"
    },
    "audio/g711-0": {
      source: "iana"
    },
    "audio/g719": {
      source: "iana"
    },
    "audio/g722": {
      source: "iana"
    },
    "audio/g7221": {
      source: "iana"
    },
    "audio/g723": {
      source: "iana"
    },
    "audio/g726-16": {
      source: "iana"
    },
    "audio/g726-24": {
      source: "iana"
    },
    "audio/g726-32": {
      source: "iana"
    },
    "audio/g726-40": {
      source: "iana"
    },
    "audio/g728": {
      source: "iana"
    },
    "audio/g729": {
      source: "iana"
    },
    "audio/g7291": {
      source: "iana"
    },
    "audio/g729d": {
      source: "iana"
    },
    "audio/g729e": {
      source: "iana"
    },
    "audio/gsm": {
      source: "iana"
    },
    "audio/gsm-efr": {
      source: "iana"
    },
    "audio/gsm-hr-08": {
      source: "iana"
    },
    "audio/ilbc": {
      source: "iana"
    },
    "audio/ip-mr_v2.5": {
      source: "iana"
    },
    "audio/isac": {
      source: "apache"
    },
    "audio/l16": {
      source: "iana"
    },
    "audio/l20": {
      source: "iana"
    },
    "audio/l24": {
      source: "iana",
      compressible: false
    },
    "audio/l8": {
      source: "iana"
    },
    "audio/lpc": {
      source: "iana"
    },
    "audio/melp": {
      source: "iana"
    },
    "audio/melp1200": {
      source: "iana"
    },
    "audio/melp2400": {
      source: "iana"
    },
    "audio/melp600": {
      source: "iana"
    },
    "audio/mhas": {
      source: "iana"
    },
    "audio/midi": {
      source: "apache",
      extensions: ["mid", "midi", "kar", "rmi"]
    },
    "audio/mobile-xmf": {
      source: "iana",
      extensions: ["mxmf"]
    },
    "audio/mp3": {
      compressible: false,
      extensions: ["mp3"]
    },
    "audio/mp4": {
      source: "iana",
      compressible: false,
      extensions: ["m4a", "mp4a"]
    },
    "audio/mp4a-latm": {
      source: "iana"
    },
    "audio/mpa": {
      source: "iana"
    },
    "audio/mpa-robust": {
      source: "iana"
    },
    "audio/mpeg": {
      source: "iana",
      compressible: false,
      extensions: ["mpga", "mp2", "mp2a", "mp3", "m2a", "m3a"]
    },
    "audio/mpeg4-generic": {
      source: "iana"
    },
    "audio/musepack": {
      source: "apache"
    },
    "audio/ogg": {
      source: "iana",
      compressible: false,
      extensions: ["oga", "ogg", "spx", "opus"]
    },
    "audio/opus": {
      source: "iana"
    },
    "audio/parityfec": {
      source: "iana"
    },
    "audio/pcma": {
      source: "iana"
    },
    "audio/pcma-wb": {
      source: "iana"
    },
    "audio/pcmu": {
      source: "iana"
    },
    "audio/pcmu-wb": {
      source: "iana"
    },
    "audio/prs.sid": {
      source: "iana"
    },
    "audio/qcelp": {
      source: "iana"
    },
    "audio/raptorfec": {
      source: "iana"
    },
    "audio/red": {
      source: "iana"
    },
    "audio/rtp-enc-aescm128": {
      source: "iana"
    },
    "audio/rtp-midi": {
      source: "iana"
    },
    "audio/rtploopback": {
      source: "iana"
    },
    "audio/rtx": {
      source: "iana"
    },
    "audio/s3m": {
      source: "apache",
      extensions: ["s3m"]
    },
    "audio/scip": {
      source: "iana"
    },
    "audio/silk": {
      source: "apache",
      extensions: ["sil"]
    },
    "audio/smv": {
      source: "iana"
    },
    "audio/smv-qcp": {
      source: "iana"
    },
    "audio/smv0": {
      source: "iana"
    },
    "audio/sofa": {
      source: "iana"
    },
    "audio/sp-midi": {
      source: "iana"
    },
    "audio/speex": {
      source: "iana"
    },
    "audio/t140c": {
      source: "iana"
    },
    "audio/t38": {
      source: "iana"
    },
    "audio/telephone-event": {
      source: "iana"
    },
    "audio/tetra_acelp": {
      source: "iana"
    },
    "audio/tetra_acelp_bb": {
      source: "iana"
    },
    "audio/tone": {
      source: "iana"
    },
    "audio/tsvcis": {
      source: "iana"
    },
    "audio/uemclip": {
      source: "iana"
    },
    "audio/ulpfec": {
      source: "iana"
    },
    "audio/usac": {
      source: "iana"
    },
    "audio/vdvi": {
      source: "iana"
    },
    "audio/vmr-wb": {
      source: "iana"
    },
    "audio/vnd.3gpp.iufp": {
      source: "iana"
    },
    "audio/vnd.4sb": {
      source: "iana"
    },
    "audio/vnd.audiokoz": {
      source: "iana"
    },
    "audio/vnd.celp": {
      source: "iana"
    },
    "audio/vnd.cisco.nse": {
      source: "iana"
    },
    "audio/vnd.cmles.radio-events": {
      source: "iana"
    },
    "audio/vnd.cns.anp1": {
      source: "iana"
    },
    "audio/vnd.cns.inf1": {
      source: "iana"
    },
    "audio/vnd.dece.audio": {
      source: "iana",
      extensions: ["uva", "uvva"]
    },
    "audio/vnd.digital-winds": {
      source: "iana",
      extensions: ["eol"]
    },
    "audio/vnd.dlna.adts": {
      source: "iana"
    },
    "audio/vnd.dolby.heaac.1": {
      source: "iana"
    },
    "audio/vnd.dolby.heaac.2": {
      source: "iana"
    },
    "audio/vnd.dolby.mlp": {
      source: "iana"
    },
    "audio/vnd.dolby.mps": {
      source: "iana"
    },
    "audio/vnd.dolby.pl2": {
      source: "iana"
    },
    "audio/vnd.dolby.pl2x": {
      source: "iana"
    },
    "audio/vnd.dolby.pl2z": {
      source: "iana"
    },
    "audio/vnd.dolby.pulse.1": {
      source: "iana"
    },
    "audio/vnd.dra": {
      source: "iana",
      extensions: ["dra"]
    },
    "audio/vnd.dts": {
      source: "iana",
      extensions: ["dts"]
    },
    "audio/vnd.dts.hd": {
      source: "iana",
      extensions: ["dtshd"]
    },
    "audio/vnd.dts.uhd": {
      source: "iana"
    },
    "audio/vnd.dvb.file": {
      source: "iana"
    },
    "audio/vnd.everad.plj": {
      source: "iana"
    },
    "audio/vnd.hns.audio": {
      source: "iana"
    },
    "audio/vnd.lucent.voice": {
      source: "iana",
      extensions: ["lvp"]
    },
    "audio/vnd.ms-playready.media.pya": {
      source: "iana",
      extensions: ["pya"]
    },
    "audio/vnd.nokia.mobile-xmf": {
      source: "iana"
    },
    "audio/vnd.nortel.vbk": {
      source: "iana"
    },
    "audio/vnd.nuera.ecelp4800": {
      source: "iana",
      extensions: ["ecelp4800"]
    },
    "audio/vnd.nuera.ecelp7470": {
      source: "iana",
      extensions: ["ecelp7470"]
    },
    "audio/vnd.nuera.ecelp9600": {
      source: "iana",
      extensions: ["ecelp9600"]
    },
    "audio/vnd.octel.sbc": {
      source: "iana"
    },
    "audio/vnd.presonus.multitrack": {
      source: "iana"
    },
    "audio/vnd.qcelp": {
      source: "iana"
    },
    "audio/vnd.rhetorex.32kadpcm": {
      source: "iana"
    },
    "audio/vnd.rip": {
      source: "iana",
      extensions: ["rip"]
    },
    "audio/vnd.rn-realaudio": {
      compressible: false
    },
    "audio/vnd.sealedmedia.softseal.mpeg": {
      source: "iana"
    },
    "audio/vnd.vmx.cvsd": {
      source: "iana"
    },
    "audio/vnd.wave": {
      compressible: false
    },
    "audio/vorbis": {
      source: "iana",
      compressible: false
    },
    "audio/vorbis-config": {
      source: "iana"
    },
    "audio/wav": {
      compressible: false,
      extensions: ["wav"]
    },
    "audio/wave": {
      compressible: false,
      extensions: ["wav"]
    },
    "audio/webm": {
      source: "apache",
      compressible: false,
      extensions: ["weba"]
    },
    "audio/x-aac": {
      source: "apache",
      compressible: false,
      extensions: ["aac"]
    },
    "audio/x-aiff": {
      source: "apache",
      extensions: ["aif", "aiff", "aifc"]
    },
    "audio/x-caf": {
      source: "apache",
      compressible: false,
      extensions: ["caf"]
    },
    "audio/x-flac": {
      source: "apache",
      extensions: ["flac"]
    },
    "audio/x-m4a": {
      source: "nginx",
      extensions: ["m4a"]
    },
    "audio/x-matroska": {
      source: "apache",
      extensions: ["mka"]
    },
    "audio/x-mpegurl": {
      source: "apache",
      extensions: ["m3u"]
    },
    "audio/x-ms-wax": {
      source: "apache",
      extensions: ["wax"]
    },
    "audio/x-ms-wma": {
      source: "apache",
      extensions: ["wma"]
    },
    "audio/x-pn-realaudio": {
      source: "apache",
      extensions: ["ram", "ra"]
    },
    "audio/x-pn-realaudio-plugin": {
      source: "apache",
      extensions: ["rmp"]
    },
    "audio/x-realaudio": {
      source: "nginx",
      extensions: ["ra"]
    },
    "audio/x-tta": {
      source: "apache"
    },
    "audio/x-wav": {
      source: "apache",
      extensions: ["wav"]
    },
    "audio/xm": {
      source: "apache",
      extensions: ["xm"]
    },
    "chemical/x-cdx": {
      source: "apache",
      extensions: ["cdx"]
    },
    "chemical/x-cif": {
      source: "apache",
      extensions: ["cif"]
    },
    "chemical/x-cmdf": {
      source: "apache",
      extensions: ["cmdf"]
    },
    "chemical/x-cml": {
      source: "apache",
      extensions: ["cml"]
    },
    "chemical/x-csml": {
      source: "apache",
      extensions: ["csml"]
    },
    "chemical/x-pdb": {
      source: "apache"
    },
    "chemical/x-xyz": {
      source: "apache",
      extensions: ["xyz"]
    },
    "font/collection": {
      source: "iana",
      extensions: ["ttc"]
    },
    "font/otf": {
      source: "iana",
      compressible: true,
      extensions: ["otf"]
    },
    "font/sfnt": {
      source: "iana"
    },
    "font/ttf": {
      source: "iana",
      compressible: true,
      extensions: ["ttf"]
    },
    "font/woff": {
      source: "iana",
      extensions: ["woff"]
    },
    "font/woff2": {
      source: "iana",
      extensions: ["woff2"]
    },
    "image/aces": {
      source: "iana",
      extensions: ["exr"]
    },
    "image/apng": {
      compressible: false,
      extensions: ["apng"]
    },
    "image/avci": {
      source: "iana",
      extensions: ["avci"]
    },
    "image/avcs": {
      source: "iana",
      extensions: ["avcs"]
    },
    "image/avif": {
      source: "iana",
      compressible: false,
      extensions: ["avif"]
    },
    "image/bmp": {
      source: "iana",
      compressible: true,
      extensions: ["bmp"]
    },
    "image/cgm": {
      source: "iana",
      extensions: ["cgm"]
    },
    "image/dicom-rle": {
      source: "iana",
      extensions: ["drle"]
    },
    "image/emf": {
      source: "iana",
      extensions: ["emf"]
    },
    "image/fits": {
      source: "iana",
      extensions: ["fits"]
    },
    "image/g3fax": {
      source: "iana",
      extensions: ["g3"]
    },
    "image/gif": {
      source: "iana",
      compressible: false,
      extensions: ["gif"]
    },
    "image/heic": {
      source: "iana",
      extensions: ["heic"]
    },
    "image/heic-sequence": {
      source: "iana",
      extensions: ["heics"]
    },
    "image/heif": {
      source: "iana",
      extensions: ["heif"]
    },
    "image/heif-sequence": {
      source: "iana",
      extensions: ["heifs"]
    },
    "image/hej2k": {
      source: "iana",
      extensions: ["hej2"]
    },
    "image/hsj2": {
      source: "iana",
      extensions: ["hsj2"]
    },
    "image/ief": {
      source: "iana",
      extensions: ["ief"]
    },
    "image/jls": {
      source: "iana",
      extensions: ["jls"]
    },
    "image/jp2": {
      source: "iana",
      compressible: false,
      extensions: ["jp2", "jpg2"]
    },
    "image/jpeg": {
      source: "iana",
      compressible: false,
      extensions: ["jpeg", "jpg", "jpe"]
    },
    "image/jph": {
      source: "iana",
      extensions: ["jph"]
    },
    "image/jphc": {
      source: "iana",
      extensions: ["jhc"]
    },
    "image/jpm": {
      source: "iana",
      compressible: false,
      extensions: ["jpm"]
    },
    "image/jpx": {
      source: "iana",
      compressible: false,
      extensions: ["jpx", "jpf"]
    },
    "image/jxr": {
      source: "iana",
      extensions: ["jxr"]
    },
    "image/jxra": {
      source: "iana",
      extensions: ["jxra"]
    },
    "image/jxrs": {
      source: "iana",
      extensions: ["jxrs"]
    },
    "image/jxs": {
      source: "iana",
      extensions: ["jxs"]
    },
    "image/jxsc": {
      source: "iana",
      extensions: ["jxsc"]
    },
    "image/jxsi": {
      source: "iana",
      extensions: ["jxsi"]
    },
    "image/jxss": {
      source: "iana",
      extensions: ["jxss"]
    },
    "image/ktx": {
      source: "iana",
      extensions: ["ktx"]
    },
    "image/ktx2": {
      source: "iana",
      extensions: ["ktx2"]
    },
    "image/naplps": {
      source: "iana"
    },
    "image/pjpeg": {
      compressible: false
    },
    "image/png": {
      source: "iana",
      compressible: false,
      extensions: ["png"]
    },
    "image/prs.btif": {
      source: "iana",
      extensions: ["btif"]
    },
    "image/prs.pti": {
      source: "iana",
      extensions: ["pti"]
    },
    "image/pwg-raster": {
      source: "iana"
    },
    "image/sgi": {
      source: "apache",
      extensions: ["sgi"]
    },
    "image/svg+xml": {
      source: "iana",
      compressible: true,
      extensions: ["svg", "svgz"]
    },
    "image/t38": {
      source: "iana",
      extensions: ["t38"]
    },
    "image/tiff": {
      source: "iana",
      compressible: false,
      extensions: ["tif", "tiff"]
    },
    "image/tiff-fx": {
      source: "iana",
      extensions: ["tfx"]
    },
    "image/vnd.adobe.photoshop": {
      source: "iana",
      compressible: true,
      extensions: ["psd"]
    },
    "image/vnd.airzip.accelerator.azv": {
      source: "iana",
      extensions: ["azv"]
    },
    "image/vnd.cns.inf2": {
      source: "iana"
    },
    "image/vnd.dece.graphic": {
      source: "iana",
      extensions: ["uvi", "uvvi", "uvg", "uvvg"]
    },
    "image/vnd.djvu": {
      source: "iana",
      extensions: ["djvu", "djv"]
    },
    "image/vnd.dvb.subtitle": {
      source: "iana",
      extensions: ["sub"]
    },
    "image/vnd.dwg": {
      source: "iana",
      extensions: ["dwg"]
    },
    "image/vnd.dxf": {
      source: "iana",
      extensions: ["dxf"]
    },
    "image/vnd.fastbidsheet": {
      source: "iana",
      extensions: ["fbs"]
    },
    "image/vnd.fpx": {
      source: "iana",
      extensions: ["fpx"]
    },
    "image/vnd.fst": {
      source: "iana",
      extensions: ["fst"]
    },
    "image/vnd.fujixerox.edmics-mmr": {
      source: "iana",
      extensions: ["mmr"]
    },
    "image/vnd.fujixerox.edmics-rlc": {
      source: "iana",
      extensions: ["rlc"]
    },
    "image/vnd.globalgraphics.pgb": {
      source: "iana"
    },
    "image/vnd.microsoft.icon": {
      source: "iana",
      compressible: true,
      extensions: ["ico"]
    },
    "image/vnd.mix": {
      source: "iana"
    },
    "image/vnd.mozilla.apng": {
      source: "iana"
    },
    "image/vnd.ms-dds": {
      compressible: true,
      extensions: ["dds"]
    },
    "image/vnd.ms-modi": {
      source: "iana",
      extensions: ["mdi"]
    },
    "image/vnd.ms-photo": {
      source: "apache",
      extensions: ["wdp"]
    },
    "image/vnd.net-fpx": {
      source: "iana",
      extensions: ["npx"]
    },
    "image/vnd.pco.b16": {
      source: "iana",
      extensions: ["b16"]
    },
    "image/vnd.radiance": {
      source: "iana"
    },
    "image/vnd.sealed.png": {
      source: "iana"
    },
    "image/vnd.sealedmedia.softseal.gif": {
      source: "iana"
    },
    "image/vnd.sealedmedia.softseal.jpg": {
      source: "iana"
    },
    "image/vnd.svf": {
      source: "iana"
    },
    "image/vnd.tencent.tap": {
      source: "iana",
      extensions: ["tap"]
    },
    "image/vnd.valve.source.texture": {
      source: "iana",
      extensions: ["vtf"]
    },
    "image/vnd.wap.wbmp": {
      source: "iana",
      extensions: ["wbmp"]
    },
    "image/vnd.xiff": {
      source: "iana",
      extensions: ["xif"]
    },
    "image/vnd.zbrush.pcx": {
      source: "iana",
      extensions: ["pcx"]
    },
    "image/webp": {
      source: "apache",
      extensions: ["webp"]
    },
    "image/wmf": {
      source: "iana",
      extensions: ["wmf"]
    },
    "image/x-3ds": {
      source: "apache",
      extensions: ["3ds"]
    },
    "image/x-cmu-raster": {
      source: "apache",
      extensions: ["ras"]
    },
    "image/x-cmx": {
      source: "apache",
      extensions: ["cmx"]
    },
    "image/x-freehand": {
      source: "apache",
      extensions: ["fh", "fhc", "fh4", "fh5", "fh7"]
    },
    "image/x-icon": {
      source: "apache",
      compressible: true,
      extensions: ["ico"]
    },
    "image/x-jng": {
      source: "nginx",
      extensions: ["jng"]
    },
    "image/x-mrsid-image": {
      source: "apache",
      extensions: ["sid"]
    },
    "image/x-ms-bmp": {
      source: "nginx",
      compressible: true,
      extensions: ["bmp"]
    },
    "image/x-pcx": {
      source: "apache",
      extensions: ["pcx"]
    },
    "image/x-pict": {
      source: "apache",
      extensions: ["pic", "pct"]
    },
    "image/x-portable-anymap": {
      source: "apache",
      extensions: ["pnm"]
    },
    "image/x-portable-bitmap": {
      source: "apache",
      extensions: ["pbm"]
    },
    "image/x-portable-graymap": {
      source: "apache",
      extensions: ["pgm"]
    },
    "image/x-portable-pixmap": {
      source: "apache",
      extensions: ["ppm"]
    },
    "image/x-rgb": {
      source: "apache",
      extensions: ["rgb"]
    },
    "image/x-tga": {
      source: "apache",
      extensions: ["tga"]
    },
    "image/x-xbitmap": {
      source: "apache",
      extensions: ["xbm"]
    },
    "image/x-xcf": {
      compressible: false
    },
    "image/x-xpixmap": {
      source: "apache",
      extensions: ["xpm"]
    },
    "image/x-xwindowdump": {
      source: "apache",
      extensions: ["xwd"]
    },
    "message/cpim": {
      source: "iana"
    },
    "message/delivery-status": {
      source: "iana"
    },
    "message/disposition-notification": {
      source: "iana",
      extensions: [
        "disposition-notification"
      ]
    },
    "message/external-body": {
      source: "iana"
    },
    "message/feedback-report": {
      source: "iana"
    },
    "message/global": {
      source: "iana",
      extensions: ["u8msg"]
    },
    "message/global-delivery-status": {
      source: "iana",
      extensions: ["u8dsn"]
    },
    "message/global-disposition-notification": {
      source: "iana",
      extensions: ["u8mdn"]
    },
    "message/global-headers": {
      source: "iana",
      extensions: ["u8hdr"]
    },
    "message/http": {
      source: "iana",
      compressible: false
    },
    "message/imdn+xml": {
      source: "iana",
      compressible: true
    },
    "message/news": {
      source: "iana"
    },
    "message/partial": {
      source: "iana",
      compressible: false
    },
    "message/rfc822": {
      source: "iana",
      compressible: true,
      extensions: ["eml", "mime"]
    },
    "message/s-http": {
      source: "iana"
    },
    "message/sip": {
      source: "iana"
    },
    "message/sipfrag": {
      source: "iana"
    },
    "message/tracking-status": {
      source: "iana"
    },
    "message/vnd.si.simp": {
      source: "iana"
    },
    "message/vnd.wfa.wsc": {
      source: "iana",
      extensions: ["wsc"]
    },
    "model/3mf": {
      source: "iana",
      extensions: ["3mf"]
    },
    "model/e57": {
      source: "iana"
    },
    "model/gltf+json": {
      source: "iana",
      compressible: true,
      extensions: ["gltf"]
    },
    "model/gltf-binary": {
      source: "iana",
      compressible: true,
      extensions: ["glb"]
    },
    "model/iges": {
      source: "iana",
      compressible: false,
      extensions: ["igs", "iges"]
    },
    "model/mesh": {
      source: "iana",
      compressible: false,
      extensions: ["msh", "mesh", "silo"]
    },
    "model/mtl": {
      source: "iana",
      extensions: ["mtl"]
    },
    "model/obj": {
      source: "iana",
      extensions: ["obj"]
    },
    "model/step": {
      source: "iana"
    },
    "model/step+xml": {
      source: "iana",
      compressible: true,
      extensions: ["stpx"]
    },
    "model/step+zip": {
      source: "iana",
      compressible: false,
      extensions: ["stpz"]
    },
    "model/step-xml+zip": {
      source: "iana",
      compressible: false,
      extensions: ["stpxz"]
    },
    "model/stl": {
      source: "iana",
      extensions: ["stl"]
    },
    "model/vnd.collada+xml": {
      source: "iana",
      compressible: true,
      extensions: ["dae"]
    },
    "model/vnd.dwf": {
      source: "iana",
      extensions: ["dwf"]
    },
    "model/vnd.flatland.3dml": {
      source: "iana"
    },
    "model/vnd.gdl": {
      source: "iana",
      extensions: ["gdl"]
    },
    "model/vnd.gs-gdl": {
      source: "apache"
    },
    "model/vnd.gs.gdl": {
      source: "iana"
    },
    "model/vnd.gtw": {
      source: "iana",
      extensions: ["gtw"]
    },
    "model/vnd.moml+xml": {
      source: "iana",
      compressible: true
    },
    "model/vnd.mts": {
      source: "iana",
      extensions: ["mts"]
    },
    "model/vnd.opengex": {
      source: "iana",
      extensions: ["ogex"]
    },
    "model/vnd.parasolid.transmit.binary": {
      source: "iana",
      extensions: ["x_b"]
    },
    "model/vnd.parasolid.transmit.text": {
      source: "iana",
      extensions: ["x_t"]
    },
    "model/vnd.pytha.pyox": {
      source: "iana"
    },
    "model/vnd.rosette.annotated-data-model": {
      source: "iana"
    },
    "model/vnd.sap.vds": {
      source: "iana",
      extensions: ["vds"]
    },
    "model/vnd.usdz+zip": {
      source: "iana",
      compressible: false,
      extensions: ["usdz"]
    },
    "model/vnd.valve.source.compiled-map": {
      source: "iana",
      extensions: ["bsp"]
    },
    "model/vnd.vtu": {
      source: "iana",
      extensions: ["vtu"]
    },
    "model/vrml": {
      source: "iana",
      compressible: false,
      extensions: ["wrl", "vrml"]
    },
    "model/x3d+binary": {
      source: "apache",
      compressible: false,
      extensions: ["x3db", "x3dbz"]
    },
    "model/x3d+fastinfoset": {
      source: "iana",
      extensions: ["x3db"]
    },
    "model/x3d+vrml": {
      source: "apache",
      compressible: false,
      extensions: ["x3dv", "x3dvz"]
    },
    "model/x3d+xml": {
      source: "iana",
      compressible: true,
      extensions: ["x3d", "x3dz"]
    },
    "model/x3d-vrml": {
      source: "iana",
      extensions: ["x3dv"]
    },
    "multipart/alternative": {
      source: "iana",
      compressible: false
    },
    "multipart/appledouble": {
      source: "iana"
    },
    "multipart/byteranges": {
      source: "iana"
    },
    "multipart/digest": {
      source: "iana"
    },
    "multipart/encrypted": {
      source: "iana",
      compressible: false
    },
    "multipart/form-data": {
      source: "iana",
      compressible: false
    },
    "multipart/header-set": {
      source: "iana"
    },
    "multipart/mixed": {
      source: "iana"
    },
    "multipart/multilingual": {
      source: "iana"
    },
    "multipart/parallel": {
      source: "iana"
    },
    "multipart/related": {
      source: "iana",
      compressible: false
    },
    "multipart/report": {
      source: "iana"
    },
    "multipart/signed": {
      source: "iana",
      compressible: false
    },
    "multipart/vnd.bint.med-plus": {
      source: "iana"
    },
    "multipart/voice-message": {
      source: "iana"
    },
    "multipart/x-mixed-replace": {
      source: "iana"
    },
    "text/1d-interleaved-parityfec": {
      source: "iana"
    },
    "text/cache-manifest": {
      source: "iana",
      compressible: true,
      extensions: ["appcache", "manifest"]
    },
    "text/calendar": {
      source: "iana",
      extensions: ["ics", "ifb"]
    },
    "text/calender": {
      compressible: true
    },
    "text/cmd": {
      compressible: true
    },
    "text/coffeescript": {
      extensions: ["coffee", "litcoffee"]
    },
    "text/cql": {
      source: "iana"
    },
    "text/cql-expression": {
      source: "iana"
    },
    "text/cql-identifier": {
      source: "iana"
    },
    "text/css": {
      source: "iana",
      charset: "UTF-8",
      compressible: true,
      extensions: ["css"]
    },
    "text/csv": {
      source: "iana",
      compressible: true,
      extensions: ["csv"]
    },
    "text/csv-schema": {
      source: "iana"
    },
    "text/directory": {
      source: "iana"
    },
    "text/dns": {
      source: "iana"
    },
    "text/ecmascript": {
      source: "iana"
    },
    "text/encaprtp": {
      source: "iana"
    },
    "text/enriched": {
      source: "iana"
    },
    "text/fhirpath": {
      source: "iana"
    },
    "text/flexfec": {
      source: "iana"
    },
    "text/fwdred": {
      source: "iana"
    },
    "text/gff3": {
      source: "iana"
    },
    "text/grammar-ref-list": {
      source: "iana"
    },
    "text/html": {
      source: "iana",
      compressible: true,
      extensions: ["html", "htm", "shtml"]
    },
    "text/jade": {
      extensions: ["jade"]
    },
    "text/javascript": {
      source: "iana",
      compressible: true
    },
    "text/jcr-cnd": {
      source: "iana"
    },
    "text/jsx": {
      compressible: true,
      extensions: ["jsx"]
    },
    "text/less": {
      compressible: true,
      extensions: ["less"]
    },
    "text/markdown": {
      source: "iana",
      compressible: true,
      extensions: ["markdown", "md"]
    },
    "text/mathml": {
      source: "nginx",
      extensions: ["mml"]
    },
    "text/mdx": {
      compressible: true,
      extensions: ["mdx"]
    },
    "text/mizar": {
      source: "iana"
    },
    "text/n3": {
      source: "iana",
      charset: "UTF-8",
      compressible: true,
      extensions: ["n3"]
    },
    "text/parameters": {
      source: "iana",
      charset: "UTF-8"
    },
    "text/parityfec": {
      source: "iana"
    },
    "text/plain": {
      source: "iana",
      compressible: true,
      extensions: ["txt", "text", "conf", "def", "list", "log", "in", "ini"]
    },
    "text/provenance-notation": {
      source: "iana",
      charset: "UTF-8"
    },
    "text/prs.fallenstein.rst": {
      source: "iana"
    },
    "text/prs.lines.tag": {
      source: "iana",
      extensions: ["dsc"]
    },
    "text/prs.prop.logic": {
      source: "iana"
    },
    "text/raptorfec": {
      source: "iana"
    },
    "text/red": {
      source: "iana"
    },
    "text/rfc822-headers": {
      source: "iana"
    },
    "text/richtext": {
      source: "iana",
      compressible: true,
      extensions: ["rtx"]
    },
    "text/rtf": {
      source: "iana",
      compressible: true,
      extensions: ["rtf"]
    },
    "text/rtp-enc-aescm128": {
      source: "iana"
    },
    "text/rtploopback": {
      source: "iana"
    },
    "text/rtx": {
      source: "iana"
    },
    "text/sgml": {
      source: "iana",
      extensions: ["sgml", "sgm"]
    },
    "text/shaclc": {
      source: "iana"
    },
    "text/shex": {
      source: "iana",
      extensions: ["shex"]
    },
    "text/slim": {
      extensions: ["slim", "slm"]
    },
    "text/spdx": {
      source: "iana",
      extensions: ["spdx"]
    },
    "text/strings": {
      source: "iana"
    },
    "text/stylus": {
      extensions: ["stylus", "styl"]
    },
    "text/t140": {
      source: "iana"
    },
    "text/tab-separated-values": {
      source: "iana",
      compressible: true,
      extensions: ["tsv"]
    },
    "text/troff": {
      source: "iana",
      extensions: ["t", "tr", "roff", "man", "me", "ms"]
    },
    "text/turtle": {
      source: "iana",
      charset: "UTF-8",
      extensions: ["ttl"]
    },
    "text/ulpfec": {
      source: "iana"
    },
    "text/uri-list": {
      source: "iana",
      compressible: true,
      extensions: ["uri", "uris", "urls"]
    },
    "text/vcard": {
      source: "iana",
      compressible: true,
      extensions: ["vcard"]
    },
    "text/vnd.a": {
      source: "iana"
    },
    "text/vnd.abc": {
      source: "iana"
    },
    "text/vnd.ascii-art": {
      source: "iana"
    },
    "text/vnd.curl": {
      source: "iana",
      extensions: ["curl"]
    },
    "text/vnd.curl.dcurl": {
      source: "apache",
      extensions: ["dcurl"]
    },
    "text/vnd.curl.mcurl": {
      source: "apache",
      extensions: ["mcurl"]
    },
    "text/vnd.curl.scurl": {
      source: "apache",
      extensions: ["scurl"]
    },
    "text/vnd.debian.copyright": {
      source: "iana",
      charset: "UTF-8"
    },
    "text/vnd.dmclientscript": {
      source: "iana"
    },
    "text/vnd.dvb.subtitle": {
      source: "iana",
      extensions: ["sub"]
    },
    "text/vnd.esmertec.theme-descriptor": {
      source: "iana",
      charset: "UTF-8"
    },
    "text/vnd.familysearch.gedcom": {
      source: "iana",
      extensions: ["ged"]
    },
    "text/vnd.ficlab.flt": {
      source: "iana"
    },
    "text/vnd.fly": {
      source: "iana",
      extensions: ["fly"]
    },
    "text/vnd.fmi.flexstor": {
      source: "iana",
      extensions: ["flx"]
    },
    "text/vnd.gml": {
      source: "iana"
    },
    "text/vnd.graphviz": {
      source: "iana",
      extensions: ["gv"]
    },
    "text/vnd.hans": {
      source: "iana"
    },
    "text/vnd.hgl": {
      source: "iana"
    },
    "text/vnd.in3d.3dml": {
      source: "iana",
      extensions: ["3dml"]
    },
    "text/vnd.in3d.spot": {
      source: "iana",
      extensions: ["spot"]
    },
    "text/vnd.iptc.newsml": {
      source: "iana"
    },
    "text/vnd.iptc.nitf": {
      source: "iana"
    },
    "text/vnd.latex-z": {
      source: "iana"
    },
    "text/vnd.motorola.reflex": {
      source: "iana"
    },
    "text/vnd.ms-mediapackage": {
      source: "iana"
    },
    "text/vnd.net2phone.commcenter.command": {
      source: "iana"
    },
    "text/vnd.radisys.msml-basic-layout": {
      source: "iana"
    },
    "text/vnd.senx.warpscript": {
      source: "iana"
    },
    "text/vnd.si.uricatalogue": {
      source: "iana"
    },
    "text/vnd.sosi": {
      source: "iana"
    },
    "text/vnd.sun.j2me.app-descriptor": {
      source: "iana",
      charset: "UTF-8",
      extensions: ["jad"]
    },
    "text/vnd.trolltech.linguist": {
      source: "iana",
      charset: "UTF-8"
    },
    "text/vnd.wap.si": {
      source: "iana"
    },
    "text/vnd.wap.sl": {
      source: "iana"
    },
    "text/vnd.wap.wml": {
      source: "iana",
      extensions: ["wml"]
    },
    "text/vnd.wap.wmlscript": {
      source: "iana",
      extensions: ["wmls"]
    },
    "text/vtt": {
      source: "iana",
      charset: "UTF-8",
      compressible: true,
      extensions: ["vtt"]
    },
    "text/x-asm": {
      source: "apache",
      extensions: ["s", "asm"]
    },
    "text/x-c": {
      source: "apache",
      extensions: ["c", "cc", "cxx", "cpp", "h", "hh", "dic"]
    },
    "text/x-component": {
      source: "nginx",
      extensions: ["htc"]
    },
    "text/x-fortran": {
      source: "apache",
      extensions: ["f", "for", "f77", "f90"]
    },
    "text/x-gwt-rpc": {
      compressible: true
    },
    "text/x-handlebars-template": {
      extensions: ["hbs"]
    },
    "text/x-java-source": {
      source: "apache",
      extensions: ["java"]
    },
    "text/x-jquery-tmpl": {
      compressible: true
    },
    "text/x-lua": {
      extensions: ["lua"]
    },
    "text/x-markdown": {
      compressible: true,
      extensions: ["mkd"]
    },
    "text/x-nfo": {
      source: "apache",
      extensions: ["nfo"]
    },
    "text/x-opml": {
      source: "apache",
      extensions: ["opml"]
    },
    "text/x-org": {
      compressible: true,
      extensions: ["org"]
    },
    "text/x-pascal": {
      source: "apache",
      extensions: ["p", "pas"]
    },
    "text/x-processing": {
      compressible: true,
      extensions: ["pde"]
    },
    "text/x-sass": {
      extensions: ["sass"]
    },
    "text/x-scss": {
      extensions: ["scss"]
    },
    "text/x-setext": {
      source: "apache",
      extensions: ["etx"]
    },
    "text/x-sfv": {
      source: "apache",
      extensions: ["sfv"]
    },
    "text/x-suse-ymp": {
      compressible: true,
      extensions: ["ymp"]
    },
    "text/x-uuencode": {
      source: "apache",
      extensions: ["uu"]
    },
    "text/x-vcalendar": {
      source: "apache",
      extensions: ["vcs"]
    },
    "text/x-vcard": {
      source: "apache",
      extensions: ["vcf"]
    },
    "text/xml": {
      source: "iana",
      compressible: true,
      extensions: ["xml"]
    },
    "text/xml-external-parsed-entity": {
      source: "iana"
    },
    "text/yaml": {
      compressible: true,
      extensions: ["yaml", "yml"]
    },
    "video/1d-interleaved-parityfec": {
      source: "iana"
    },
    "video/3gpp": {
      source: "iana",
      extensions: ["3gp", "3gpp"]
    },
    "video/3gpp-tt": {
      source: "iana"
    },
    "video/3gpp2": {
      source: "iana",
      extensions: ["3g2"]
    },
    "video/av1": {
      source: "iana"
    },
    "video/bmpeg": {
      source: "iana"
    },
    "video/bt656": {
      source: "iana"
    },
    "video/celb": {
      source: "iana"
    },
    "video/dv": {
      source: "iana"
    },
    "video/encaprtp": {
      source: "iana"
    },
    "video/ffv1": {
      source: "iana"
    },
    "video/flexfec": {
      source: "iana"
    },
    "video/h261": {
      source: "iana",
      extensions: ["h261"]
    },
    "video/h263": {
      source: "iana",
      extensions: ["h263"]
    },
    "video/h263-1998": {
      source: "iana"
    },
    "video/h263-2000": {
      source: "iana"
    },
    "video/h264": {
      source: "iana",
      extensions: ["h264"]
    },
    "video/h264-rcdo": {
      source: "iana"
    },
    "video/h264-svc": {
      source: "iana"
    },
    "video/h265": {
      source: "iana"
    },
    "video/iso.segment": {
      source: "iana",
      extensions: ["m4s"]
    },
    "video/jpeg": {
      source: "iana",
      extensions: ["jpgv"]
    },
    "video/jpeg2000": {
      source: "iana"
    },
    "video/jpm": {
      source: "apache",
      extensions: ["jpm", "jpgm"]
    },
    "video/jxsv": {
      source: "iana"
    },
    "video/mj2": {
      source: "iana",
      extensions: ["mj2", "mjp2"]
    },
    "video/mp1s": {
      source: "iana"
    },
    "video/mp2p": {
      source: "iana"
    },
    "video/mp2t": {
      source: "iana",
      extensions: ["ts"]
    },
    "video/mp4": {
      source: "iana",
      compressible: false,
      extensions: ["mp4", "mp4v", "mpg4"]
    },
    "video/mp4v-es": {
      source: "iana"
    },
    "video/mpeg": {
      source: "iana",
      compressible: false,
      extensions: ["mpeg", "mpg", "mpe", "m1v", "m2v"]
    },
    "video/mpeg4-generic": {
      source: "iana"
    },
    "video/mpv": {
      source: "iana"
    },
    "video/nv": {
      source: "iana"
    },
    "video/ogg": {
      source: "iana",
      compressible: false,
      extensions: ["ogv"]
    },
    "video/parityfec": {
      source: "iana"
    },
    "video/pointer": {
      source: "iana"
    },
    "video/quicktime": {
      source: "iana",
      compressible: false,
      extensions: ["qt", "mov"]
    },
    "video/raptorfec": {
      source: "iana"
    },
    "video/raw": {
      source: "iana"
    },
    "video/rtp-enc-aescm128": {
      source: "iana"
    },
    "video/rtploopback": {
      source: "iana"
    },
    "video/rtx": {
      source: "iana"
    },
    "video/scip": {
      source: "iana"
    },
    "video/smpte291": {
      source: "iana"
    },
    "video/smpte292m": {
      source: "iana"
    },
    "video/ulpfec": {
      source: "iana"
    },
    "video/vc1": {
      source: "iana"
    },
    "video/vc2": {
      source: "iana"
    },
    "video/vnd.cctv": {
      source: "iana"
    },
    "video/vnd.dece.hd": {
      source: "iana",
      extensions: ["uvh", "uvvh"]
    },
    "video/vnd.dece.mobile": {
      source: "iana",
      extensions: ["uvm", "uvvm"]
    },
    "video/vnd.dece.mp4": {
      source: "iana"
    },
    "video/vnd.dece.pd": {
      source: "iana",
      extensions: ["uvp", "uvvp"]
    },
    "video/vnd.dece.sd": {
      source: "iana",
      extensions: ["uvs", "uvvs"]
    },
    "video/vnd.dece.video": {
      source: "iana",
      extensions: ["uvv", "uvvv"]
    },
    "video/vnd.directv.mpeg": {
      source: "iana"
    },
    "video/vnd.directv.mpeg-tts": {
      source: "iana"
    },
    "video/vnd.dlna.mpeg-tts": {
      source: "iana"
    },
    "video/vnd.dvb.file": {
      source: "iana",
      extensions: ["dvb"]
    },
    "video/vnd.fvt": {
      source: "iana",
      extensions: ["fvt"]
    },
    "video/vnd.hns.video": {
      source: "iana"
    },
    "video/vnd.iptvforum.1dparityfec-1010": {
      source: "iana"
    },
    "video/vnd.iptvforum.1dparityfec-2005": {
      source: "iana"
    },
    "video/vnd.iptvforum.2dparityfec-1010": {
      source: "iana"
    },
    "video/vnd.iptvforum.2dparityfec-2005": {
      source: "iana"
    },
    "video/vnd.iptvforum.ttsavc": {
      source: "iana"
    },
    "video/vnd.iptvforum.ttsmpeg2": {
      source: "iana"
    },
    "video/vnd.motorola.video": {
      source: "iana"
    },
    "video/vnd.motorola.videop": {
      source: "iana"
    },
    "video/vnd.mpegurl": {
      source: "iana",
      extensions: ["mxu", "m4u"]
    },
    "video/vnd.ms-playready.media.pyv": {
      source: "iana",
      extensions: ["pyv"]
    },
    "video/vnd.nokia.interleaved-multimedia": {
      source: "iana"
    },
    "video/vnd.nokia.mp4vr": {
      source: "iana"
    },
    "video/vnd.nokia.videovoip": {
      source: "iana"
    },
    "video/vnd.objectvideo": {
      source: "iana"
    },
    "video/vnd.radgamettools.bink": {
      source: "iana"
    },
    "video/vnd.radgamettools.smacker": {
      source: "iana"
    },
    "video/vnd.sealed.mpeg1": {
      source: "iana"
    },
    "video/vnd.sealed.mpeg4": {
      source: "iana"
    },
    "video/vnd.sealed.swf": {
      source: "iana"
    },
    "video/vnd.sealedmedia.softseal.mov": {
      source: "iana"
    },
    "video/vnd.uvvu.mp4": {
      source: "iana",
      extensions: ["uvu", "uvvu"]
    },
    "video/vnd.vivo": {
      source: "iana",
      extensions: ["viv"]
    },
    "video/vnd.youtube.yt": {
      source: "iana"
    },
    "video/vp8": {
      source: "iana"
    },
    "video/vp9": {
      source: "iana"
    },
    "video/webm": {
      source: "apache",
      compressible: false,
      extensions: ["webm"]
    },
    "video/x-f4v": {
      source: "apache",
      extensions: ["f4v"]
    },
    "video/x-fli": {
      source: "apache",
      extensions: ["fli"]
    },
    "video/x-flv": {
      source: "apache",
      compressible: false,
      extensions: ["flv"]
    },
    "video/x-m4v": {
      source: "apache",
      extensions: ["m4v"]
    },
    "video/x-matroska": {
      source: "apache",
      compressible: false,
      extensions: ["mkv", "mk3d", "mks"]
    },
    "video/x-mng": {
      source: "apache",
      extensions: ["mng"]
    },
    "video/x-ms-asf": {
      source: "apache",
      extensions: ["asf", "asx"]
    },
    "video/x-ms-vob": {
      source: "apache",
      extensions: ["vob"]
    },
    "video/x-ms-wm": {
      source: "apache",
      extensions: ["wm"]
    },
    "video/x-ms-wmv": {
      source: "apache",
      compressible: false,
      extensions: ["wmv"]
    },
    "video/x-ms-wmx": {
      source: "apache",
      extensions: ["wmx"]
    },
    "video/x-ms-wvx": {
      source: "apache",
      extensions: ["wvx"]
    },
    "video/x-msvideo": {
      source: "apache",
      extensions: ["avi"]
    },
    "video/x-sgi-movie": {
      source: "apache",
      extensions: ["movie"]
    },
    "video/x-smv": {
      source: "apache",
      extensions: ["smv"]
    },
    "x-conference/x-cooltalk": {
      source: "apache",
      extensions: ["ice"]
    },
    "x-shader/x-fragment": {
      compressible: true
    },
    "x-shader/x-vertex": {
      compressible: true
    }
  };
});

// node_modules/form-data/node_modules/mime-types/node_modules/mime-db/index.js
var require_mime_db = __commonJS((exports, module) => {
  /*!
   * mime-db
   * Copyright(c) 2014 Jonathan Ong
   * Copyright(c) 2015-2022 Douglas Christopher Wilson
   * MIT Licensed
   */
  module.exports = require_db();
});

// node_modules/form-data/node_modules/mime-types/index.js
var require_mime_types = __commonJS((exports) => {
  /*!
   * mime-types
   * Copyright(c) 2014 Jonathan Ong
   * Copyright(c) 2015 Douglas Christopher Wilson
   * MIT Licensed
   */
  var db = require_mime_db();
  var extname = __require("path").extname;
  var EXTRACT_TYPE_REGEXP = /^\s*([^;\s]*)(?:;|\s|$)/;
  var TEXT_TYPE_REGEXP = /^text\//i;
  exports.charset = charset;
  exports.charsets = { lookup: charset };
  exports.contentType = contentType;
  exports.extension = extension;
  exports.extensions = Object.create(null);
  exports.lookup = lookup;
  exports.types = Object.create(null);
  populateMaps(exports.extensions, exports.types);
  function charset(type) {
    if (!type || typeof type !== "string") {
      return false;
    }
    var match = EXTRACT_TYPE_REGEXP.exec(type);
    var mime = match && db[match[1].toLowerCase()];
    if (mime && mime.charset) {
      return mime.charset;
    }
    if (match && TEXT_TYPE_REGEXP.test(match[1])) {
      return "UTF-8";
    }
    return false;
  }
  function contentType(str) {
    if (!str || typeof str !== "string") {
      return false;
    }
    var mime = str.indexOf("/") === -1 ? exports.lookup(str) : str;
    if (!mime) {
      return false;
    }
    if (mime.indexOf("charset") === -1) {
      var charset2 = exports.charset(mime);
      if (charset2)
        mime += "; charset=" + charset2.toLowerCase();
    }
    return mime;
  }
  function extension(type) {
    if (!type || typeof type !== "string") {
      return false;
    }
    var match = EXTRACT_TYPE_REGEXP.exec(type);
    var exts = match && exports.extensions[match[1].toLowerCase()];
    if (!exts || !exts.length) {
      return false;
    }
    return exts[0];
  }
  function lookup(path) {
    if (!path || typeof path !== "string") {
      return false;
    }
    var extension2 = extname("x." + path).toLowerCase().substr(1);
    if (!extension2) {
      return false;
    }
    return exports.types[extension2] || false;
  }
  function populateMaps(extensions, types2) {
    var preference = ["nginx", "apache", undefined, "iana"];
    Object.keys(db).forEach(function forEachMimeType(type) {
      var mime = db[type];
      var exts = mime.extensions;
      if (!exts || !exts.length) {
        return;
      }
      extensions[type] = exts;
      for (var i = 0;i < exts.length; i++) {
        var extension2 = exts[i];
        if (types2[extension2]) {
          var from = preference.indexOf(db[types2[extension2]].source);
          var to = preference.indexOf(mime.source);
          if (types2[extension2] !== "application/octet-stream" && (from > to || from === to && types2[extension2].substr(0, 12) === "application/")) {
            continue;
          }
        }
        types2[extension2] = type;
      }
    });
  }
});

// node_modules/asynckit/lib/defer.js
var require_defer = __commonJS((exports, module) => {
  module.exports = defer;
  function defer(fn) {
    var nextTick = typeof setImmediate == "function" ? setImmediate : typeof process == "object" && typeof process.nextTick == "function" ? process.nextTick : null;
    if (nextTick) {
      nextTick(fn);
    } else {
      setTimeout(fn, 0);
    }
  }
});

// node_modules/asynckit/lib/async.js
var require_async2 = __commonJS((exports, module) => {
  var defer = require_defer();
  module.exports = async;
  function async(callback) {
    var isAsync2 = false;
    defer(function() {
      isAsync2 = true;
    });
    return function async_callback(err, result) {
      if (isAsync2) {
        callback(err, result);
      } else {
        defer(function nextTick_callback() {
          callback(err, result);
        });
      }
    };
  }
});

// node_modules/asynckit/lib/abort.js
var require_abort = __commonJS((exports, module) => {
  module.exports = abort;
  function abort(state) {
    Object.keys(state.jobs).forEach(clean.bind(state));
    state.jobs = {};
  }
  function clean(key) {
    if (typeof this.jobs[key] == "function") {
      this.jobs[key]();
    }
  }
});

// node_modules/asynckit/lib/iterate.js
var require_iterate = __commonJS((exports, module) => {
  var async = require_async2();
  var abort = require_abort();
  module.exports = iterate;
  function iterate(list, iterator2, state, callback) {
    var key = state["keyedList"] ? state["keyedList"][state.index] : state.index;
    state.jobs[key] = runJob(iterator2, key, list[key], function(error, output) {
      if (!(key in state.jobs)) {
        return;
      }
      delete state.jobs[key];
      if (error) {
        abort(state);
      } else {
        state.results[key] = output;
      }
      callback(error, state.results);
    });
  }
  function runJob(iterator2, key, item, callback) {
    var aborter;
    if (iterator2.length == 2) {
      aborter = iterator2(item, async(callback));
    } else {
      aborter = iterator2(item, key, async(callback));
    }
    return aborter;
  }
});

// node_modules/asynckit/lib/state.js
var require_state = __commonJS((exports, module) => {
  module.exports = state;
  function state(list, sortMethod) {
    var isNamedList = !Array.isArray(list), initState = {
      index: 0,
      keyedList: isNamedList || sortMethod ? Object.keys(list) : null,
      jobs: {},
      results: isNamedList ? {} : [],
      size: isNamedList ? Object.keys(list).length : list.length
    };
    if (sortMethod) {
      initState.keyedList.sort(isNamedList ? sortMethod : function(a, b) {
        return sortMethod(list[a], list[b]);
      });
    }
    return initState;
  }
});

// node_modules/asynckit/lib/terminator.js
var require_terminator = __commonJS((exports, module) => {
  var abort = require_abort();
  var async = require_async2();
  module.exports = terminator;
  function terminator(callback) {
    if (!Object.keys(this.jobs).length) {
      return;
    }
    this.index = this.size;
    abort(this);
    async(callback)(null, this.results);
  }
});

// node_modules/asynckit/parallel.js
var require_parallel = __commonJS((exports, module) => {
  var iterate = require_iterate();
  var initState = require_state();
  var terminator = require_terminator();
  module.exports = parallel;
  function parallel(list, iterator2, callback) {
    var state = initState(list);
    while (state.index < (state["keyedList"] || list).length) {
      iterate(list, iterator2, state, function(error, result) {
        if (error) {
          callback(error, result);
          return;
        }
        if (Object.keys(state.jobs).length === 0) {
          callback(null, state.results);
          return;
        }
      });
      state.index++;
    }
    return terminator.bind(state, callback);
  }
});

// node_modules/asynckit/serialOrdered.js
var require_serialOrdered = __commonJS((exports, module) => {
  var iterate = require_iterate();
  var initState = require_state();
  var terminator = require_terminator();
  module.exports = serialOrdered;
  module.exports.ascending = ascending;
  module.exports.descending = descending;
  function serialOrdered(list, iterator2, sortMethod, callback) {
    var state = initState(list, sortMethod);
    iterate(list, iterator2, state, function iteratorHandler(error, result) {
      if (error) {
        callback(error, result);
        return;
      }
      state.index++;
      if (state.index < (state["keyedList"] || list).length) {
        iterate(list, iterator2, state, iteratorHandler);
        return;
      }
      callback(null, state.results);
    });
    return terminator.bind(state, callback);
  }
  function ascending(a, b) {
    return a < b ? -1 : a > b ? 1 : 0;
  }
  function descending(a, b) {
    return -1 * ascending(a, b);
  }
});

// node_modules/asynckit/serial.js
var require_serial = __commonJS((exports, module) => {
  var serialOrdered = require_serialOrdered();
  module.exports = serial;
  function serial(list, iterator2, callback) {
    return serialOrdered(list, iterator2, null, callback);
  }
});

// node_modules/asynckit/index.js
var require_asynckit = __commonJS((exports, module) => {
  module.exports = {
    parallel: require_parallel(),
    serial: require_serial(),
    serialOrdered: require_serialOrdered()
  };
});

// node_modules/es-object-atoms/index.js
var require_es_object_atoms = __commonJS((exports, module) => {
  module.exports = Object;
});

// node_modules/es-errors/index.js
var require_es_errors = __commonJS((exports, module) => {
  module.exports = Error;
});

// node_modules/es-errors/eval.js
var require_eval = __commonJS((exports, module) => {
  module.exports = EvalError;
});

// node_modules/es-errors/range.js
var require_range = __commonJS((exports, module) => {
  module.exports = RangeError;
});

// node_modules/es-errors/ref.js
var require_ref2 = __commonJS((exports, module) => {
  module.exports = ReferenceError;
});

// node_modules/es-errors/syntax.js
var require_syntax = __commonJS((exports, module) => {
  module.exports = SyntaxError;
});

// node_modules/es-errors/type.js
var require_type = __commonJS((exports, module) => {
  module.exports = TypeError;
});

// node_modules/es-errors/uri.js
var require_uri = __commonJS((exports, module) => {
  module.exports = URIError;
});

// node_modules/math-intrinsics/abs.js
var require_abs = __commonJS((exports, module) => {
  module.exports = Math.abs;
});

// node_modules/math-intrinsics/floor.js
var require_floor = __commonJS((exports, module) => {
  module.exports = Math.floor;
});

// node_modules/math-intrinsics/max.js
var require_max = __commonJS((exports, module) => {
  module.exports = Math.max;
});

// node_modules/math-intrinsics/min.js
var require_min = __commonJS((exports, module) => {
  module.exports = Math.min;
});

// node_modules/math-intrinsics/pow.js
var require_pow = __commonJS((exports, module) => {
  module.exports = Math.pow;
});

// node_modules/math-intrinsics/round.js
var require_round = __commonJS((exports, module) => {
  module.exports = Math.round;
});

// node_modules/math-intrinsics/isNaN.js
var require_isNaN = __commonJS((exports, module) => {
  module.exports = Number.isNaN || function isNaN(a) {
    return a !== a;
  };
});

// node_modules/math-intrinsics/sign.js
var require_sign = __commonJS((exports, module) => {
  var $isNaN = require_isNaN();
  module.exports = function sign(number2) {
    if ($isNaN(number2) || number2 === 0) {
      return number2;
    }
    return number2 < 0 ? -1 : 1;
  };
});

// node_modules/gopd/gOPD.js
var require_gOPD = __commonJS((exports, module) => {
  module.exports = Object.getOwnPropertyDescriptor;
});

// node_modules/gopd/index.js
var require_gopd = __commonJS((exports, module) => {
  var $gOPD = require_gOPD();
  if ($gOPD) {
    try {
      $gOPD([], "length");
    } catch (e) {
      $gOPD = null;
    }
  }
  module.exports = $gOPD;
});

// node_modules/es-define-property/index.js
var require_es_define_property = __commonJS((exports, module) => {
  var $defineProperty = Object.defineProperty || false;
  if ($defineProperty) {
    try {
      $defineProperty({}, "a", { value: 1 });
    } catch (e) {
      $defineProperty = false;
    }
  }
  module.exports = $defineProperty;
});

// node_modules/has-symbols/shams.js
var require_shams = __commonJS((exports, module) => {
  module.exports = function hasSymbols() {
    if (typeof Symbol !== "function" || typeof Object.getOwnPropertySymbols !== "function") {
      return false;
    }
    if (typeof Symbol.iterator === "symbol") {
      return true;
    }
    var obj = {};
    var sym = Symbol("test");
    var symObj = Object(sym);
    if (typeof sym === "string") {
      return false;
    }
    if (Object.prototype.toString.call(sym) !== "[object Symbol]") {
      return false;
    }
    if (Object.prototype.toString.call(symObj) !== "[object Symbol]") {
      return false;
    }
    var symVal = 42;
    obj[sym] = symVal;
    for (var _ in obj) {
      return false;
    }
    if (typeof Object.keys === "function" && Object.keys(obj).length !== 0) {
      return false;
    }
    if (typeof Object.getOwnPropertyNames === "function" && Object.getOwnPropertyNames(obj).length !== 0) {
      return false;
    }
    var syms = Object.getOwnPropertySymbols(obj);
    if (syms.length !== 1 || syms[0] !== sym) {
      return false;
    }
    if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) {
      return false;
    }
    if (typeof Object.getOwnPropertyDescriptor === "function") {
      var descriptor = Object.getOwnPropertyDescriptor(obj, sym);
      if (descriptor.value !== symVal || descriptor.enumerable !== true) {
        return false;
      }
    }
    return true;
  };
});

// node_modules/has-symbols/index.js
var require_has_symbols = __commonJS((exports, module) => {
  var origSymbol = typeof Symbol !== "undefined" && Symbol;
  var hasSymbolSham = require_shams();
  module.exports = function hasNativeSymbols() {
    if (typeof origSymbol !== "function") {
      return false;
    }
    if (typeof Symbol !== "function") {
      return false;
    }
    if (typeof origSymbol("foo") !== "symbol") {
      return false;
    }
    if (typeof Symbol("bar") !== "symbol") {
      return false;
    }
    return hasSymbolSham();
  };
});

// node_modules/get-proto/Reflect.getPrototypeOf.js
var require_Reflect_getPrototypeOf = __commonJS((exports, module) => {
  module.exports = typeof Reflect !== "undefined" && Reflect.getPrototypeOf || null;
});

// node_modules/get-proto/Object.getPrototypeOf.js
var require_Object_getPrototypeOf = __commonJS((exports, module) => {
  var $Object = require_es_object_atoms();
  module.exports = $Object.getPrototypeOf || null;
});

// node_modules/function-bind/implementation.js
var require_implementation = __commonJS((exports, module) => {
  var ERROR_MESSAGE = "Function.prototype.bind called on incompatible ";
  var toStr = Object.prototype.toString;
  var max = Math.max;
  var funcType = "[object Function]";
  var concatty = function concatty(a, b) {
    var arr = [];
    for (var i = 0;i < a.length; i += 1) {
      arr[i] = a[i];
    }
    for (var j = 0;j < b.length; j += 1) {
      arr[j + a.length] = b[j];
    }
    return arr;
  };
  var slicy = function slicy(arrLike, offset) {
    var arr = [];
    for (var i = offset || 0, j = 0;i < arrLike.length; i += 1, j += 1) {
      arr[j] = arrLike[i];
    }
    return arr;
  };
  var joiny = function(arr, joiner) {
    var str = "";
    for (var i = 0;i < arr.length; i += 1) {
      str += arr[i];
      if (i + 1 < arr.length) {
        str += joiner;
      }
    }
    return str;
  };
  module.exports = function bind(that) {
    var target = this;
    if (typeof target !== "function" || toStr.apply(target) !== funcType) {
      throw new TypeError(ERROR_MESSAGE + target);
    }
    var args = slicy(arguments, 1);
    var bound;
    var binder = function() {
      if (this instanceof bound) {
        var result = target.apply(this, concatty(args, arguments));
        if (Object(result) === result) {
          return result;
        }
        return this;
      }
      return target.apply(that, concatty(args, arguments));
    };
    var boundLength = max(0, target.length - args.length);
    var boundArgs = [];
    for (var i = 0;i < boundLength; i++) {
      boundArgs[i] = "$" + i;
    }
    bound = Function("binder", "return function (" + joiny(boundArgs, ",") + "){ return binder.apply(this,arguments); }")(binder);
    if (target.prototype) {
      var Empty = function Empty() {};
      Empty.prototype = target.prototype;
      bound.prototype = new Empty;
      Empty.prototype = null;
    }
    return bound;
  };
});

// node_modules/function-bind/index.js
var require_function_bind = __commonJS((exports, module) => {
  var implementation = require_implementation();
  module.exports = Function.prototype.bind || implementation;
});

// node_modules/call-bind-apply-helpers/functionCall.js
var require_functionCall = __commonJS((exports, module) => {
  module.exports = Function.prototype.call;
});

// node_modules/call-bind-apply-helpers/functionApply.js
var require_functionApply = __commonJS((exports, module) => {
  module.exports = Function.prototype.apply;
});

// node_modules/call-bind-apply-helpers/reflectApply.js
var require_reflectApply = __commonJS((exports, module) => {
  module.exports = typeof Reflect !== "undefined" && Reflect && Reflect.apply;
});

// node_modules/call-bind-apply-helpers/actualApply.js
var require_actualApply = __commonJS((exports, module) => {
  var bind2 = require_function_bind();
  var $apply = require_functionApply();
  var $call = require_functionCall();
  var $reflectApply = require_reflectApply();
  module.exports = $reflectApply || bind2.call($call, $apply);
});

// node_modules/call-bind-apply-helpers/index.js
var require_call_bind_apply_helpers = __commonJS((exports, module) => {
  var bind2 = require_function_bind();
  var $TypeError = require_type();
  var $call = require_functionCall();
  var $actualApply = require_actualApply();
  module.exports = function callBindBasic(args) {
    if (args.length < 1 || typeof args[0] !== "function") {
      throw new $TypeError("a function is required");
    }
    return $actualApply(bind2, $call, args);
  };
});

// node_modules/dunder-proto/get.js
var require_get = __commonJS((exports, module) => {
  var callBind = require_call_bind_apply_helpers();
  var gOPD = require_gopd();
  var hasProtoAccessor;
  try {
    hasProtoAccessor = [].__proto__ === Array.prototype;
  } catch (e) {
    if (!e || typeof e !== "object" || !("code" in e) || e.code !== "ERR_PROTO_ACCESS") {
      throw e;
    }
  }
  var desc = !!hasProtoAccessor && gOPD && gOPD(Object.prototype, "__proto__");
  var $Object = Object;
  var $getPrototypeOf = $Object.getPrototypeOf;
  module.exports = desc && typeof desc.get === "function" ? callBind([desc.get]) : typeof $getPrototypeOf === "function" ? function getDunder(value) {
    return $getPrototypeOf(value == null ? value : $Object(value));
  } : false;
});

// node_modules/get-proto/index.js
var require_get_proto = __commonJS((exports, module) => {
  var reflectGetProto = require_Reflect_getPrototypeOf();
  var originalGetProto = require_Object_getPrototypeOf();
  var getDunderProto = require_get();
  module.exports = reflectGetProto ? function getProto(O) {
    return reflectGetProto(O);
  } : originalGetProto ? function getProto(O) {
    if (!O || typeof O !== "object" && typeof O !== "function") {
      throw new TypeError("getProto: not an object");
    }
    return originalGetProto(O);
  } : getDunderProto ? function getProto(O) {
    return getDunderProto(O);
  } : null;
});

// node_modules/hasown/index.js
var require_hasown = __commonJS((exports, module) => {
  var call = Function.prototype.call;
  var $hasOwn = Object.prototype.hasOwnProperty;
  var bind2 = require_function_bind();
  module.exports = bind2.call(call, $hasOwn);
});

// node_modules/get-intrinsic/index.js
var require_get_intrinsic = __commonJS((exports, module) => {
  var undefined3;
  var $Object = require_es_object_atoms();
  var $Error = require_es_errors();
  var $EvalError = require_eval();
  var $RangeError = require_range();
  var $ReferenceError = require_ref2();
  var $SyntaxError = require_syntax();
  var $TypeError = require_type();
  var $URIError = require_uri();
  var abs = require_abs();
  var floor = require_floor();
  var max = require_max();
  var min = require_min();
  var pow = require_pow();
  var round = require_round();
  var sign = require_sign();
  var $Function = Function;
  var getEvalledConstructor = function(expressionSyntax) {
    try {
      return $Function('"use strict"; return (' + expressionSyntax + ").constructor;")();
    } catch (e) {}
  };
  var $gOPD = require_gopd();
  var $defineProperty = require_es_define_property();
  var throwTypeError = function() {
    throw new $TypeError;
  };
  var ThrowTypeError = $gOPD ? function() {
    try {
      arguments.callee;
      return throwTypeError;
    } catch (calleeThrows) {
      try {
        return $gOPD(arguments, "callee").get;
      } catch (gOPDthrows) {
        return throwTypeError;
      }
    }
  }() : throwTypeError;
  var hasSymbols = require_has_symbols()();
  var getProto = require_get_proto();
  var $ObjectGPO = require_Object_getPrototypeOf();
  var $ReflectGPO = require_Reflect_getPrototypeOf();
  var $apply = require_functionApply();
  var $call = require_functionCall();
  var needsEval = {};
  var TypedArray = typeof Uint8Array === "undefined" || !getProto ? undefined3 : getProto(Uint8Array);
  var INTRINSICS = {
    __proto__: null,
    "%AggregateError%": typeof AggregateError === "undefined" ? undefined3 : AggregateError,
    "%Array%": Array,
    "%ArrayBuffer%": typeof ArrayBuffer === "undefined" ? undefined3 : ArrayBuffer,
    "%ArrayIteratorPrototype%": hasSymbols && getProto ? getProto([][Symbol.iterator]()) : undefined3,
    "%AsyncFromSyncIteratorPrototype%": undefined3,
    "%AsyncFunction%": needsEval,
    "%AsyncGenerator%": needsEval,
    "%AsyncGeneratorFunction%": needsEval,
    "%AsyncIteratorPrototype%": needsEval,
    "%Atomics%": typeof Atomics === "undefined" ? undefined3 : Atomics,
    "%BigInt%": typeof BigInt === "undefined" ? undefined3 : BigInt,
    "%BigInt64Array%": typeof BigInt64Array === "undefined" ? undefined3 : BigInt64Array,
    "%BigUint64Array%": typeof BigUint64Array === "undefined" ? undefined3 : BigUint64Array,
    "%Boolean%": Boolean,
    "%DataView%": typeof DataView === "undefined" ? undefined3 : DataView,
    "%Date%": Date,
    "%decodeURI%": decodeURI,
    "%decodeURIComponent%": decodeURIComponent,
    "%encodeURI%": encodeURI,
    "%encodeURIComponent%": encodeURIComponent,
    "%Error%": $Error,
    "%eval%": eval,
    "%EvalError%": $EvalError,
    "%Float16Array%": typeof Float16Array === "undefined" ? undefined3 : Float16Array,
    "%Float32Array%": typeof Float32Array === "undefined" ? undefined3 : Float32Array,
    "%Float64Array%": typeof Float64Array === "undefined" ? undefined3 : Float64Array,
    "%FinalizationRegistry%": typeof FinalizationRegistry === "undefined" ? undefined3 : FinalizationRegistry,
    "%Function%": $Function,
    "%GeneratorFunction%": needsEval,
    "%Int8Array%": typeof Int8Array === "undefined" ? undefined3 : Int8Array,
    "%Int16Array%": typeof Int16Array === "undefined" ? undefined3 : Int16Array,
    "%Int32Array%": typeof Int32Array === "undefined" ? undefined3 : Int32Array,
    "%isFinite%": isFinite,
    "%isNaN%": isNaN,
    "%IteratorPrototype%": hasSymbols && getProto ? getProto(getProto([][Symbol.iterator]())) : undefined3,
    "%JSON%": typeof JSON === "object" ? JSON : undefined3,
    "%Map%": typeof Map === "undefined" ? undefined3 : Map,
    "%MapIteratorPrototype%": typeof Map === "undefined" || !hasSymbols || !getProto ? undefined3 : getProto(new Map()[Symbol.iterator]()),
    "%Math%": Math,
    "%Number%": Number,
    "%Object%": $Object,
    "%Object.getOwnPropertyDescriptor%": $gOPD,
    "%parseFloat%": parseFloat,
    "%parseInt%": parseInt,
    "%Promise%": typeof Promise === "undefined" ? undefined3 : Promise,
    "%Proxy%": typeof Proxy === "undefined" ? undefined3 : Proxy,
    "%RangeError%": $RangeError,
    "%ReferenceError%": $ReferenceError,
    "%Reflect%": typeof Reflect === "undefined" ? undefined3 : Reflect,
    "%RegExp%": RegExp,
    "%Set%": typeof Set === "undefined" ? undefined3 : Set,
    "%SetIteratorPrototype%": typeof Set === "undefined" || !hasSymbols || !getProto ? undefined3 : getProto(new Set()[Symbol.iterator]()),
    "%SharedArrayBuffer%": typeof SharedArrayBuffer === "undefined" ? undefined3 : SharedArrayBuffer,
    "%String%": String,
    "%StringIteratorPrototype%": hasSymbols && getProto ? getProto(""[Symbol.iterator]()) : undefined3,
    "%Symbol%": hasSymbols ? Symbol : undefined3,
    "%SyntaxError%": $SyntaxError,
    "%ThrowTypeError%": ThrowTypeError,
    "%TypedArray%": TypedArray,
    "%TypeError%": $TypeError,
    "%Uint8Array%": typeof Uint8Array === "undefined" ? undefined3 : Uint8Array,
    "%Uint8ClampedArray%": typeof Uint8ClampedArray === "undefined" ? undefined3 : Uint8ClampedArray,
    "%Uint16Array%": typeof Uint16Array === "undefined" ? undefined3 : Uint16Array,
    "%Uint32Array%": typeof Uint32Array === "undefined" ? undefined3 : Uint32Array,
    "%URIError%": $URIError,
    "%WeakMap%": typeof WeakMap === "undefined" ? undefined3 : WeakMap,
    "%WeakRef%": typeof WeakRef === "undefined" ? undefined3 : WeakRef,
    "%WeakSet%": typeof WeakSet === "undefined" ? undefined3 : WeakSet,
    "%Function.prototype.call%": $call,
    "%Function.prototype.apply%": $apply,
    "%Object.defineProperty%": $defineProperty,
    "%Object.getPrototypeOf%": $ObjectGPO,
    "%Math.abs%": abs,
    "%Math.floor%": floor,
    "%Math.max%": max,
    "%Math.min%": min,
    "%Math.pow%": pow,
    "%Math.round%": round,
    "%Math.sign%": sign,
    "%Reflect.getPrototypeOf%": $ReflectGPO
  };
  if (getProto) {
    try {
      null.error;
    } catch (e) {
      errorProto = getProto(getProto(e));
      INTRINSICS["%Error.prototype%"] = errorProto;
    }
  }
  var errorProto;
  var doEval = function doEval(name17) {
    var value;
    if (name17 === "%AsyncFunction%") {
      value = getEvalledConstructor("async function () {}");
    } else if (name17 === "%GeneratorFunction%") {
      value = getEvalledConstructor("function* () {}");
    } else if (name17 === "%AsyncGeneratorFunction%") {
      value = getEvalledConstructor("async function* () {}");
    } else if (name17 === "%AsyncGenerator%") {
      var fn = doEval("%AsyncGeneratorFunction%");
      if (fn) {
        value = fn.prototype;
      }
    } else if (name17 === "%AsyncIteratorPrototype%") {
      var gen = doEval("%AsyncGenerator%");
      if (gen && getProto) {
        value = getProto(gen.prototype);
      }
    }
    INTRINSICS[name17] = value;
    return value;
  };
  var LEGACY_ALIASES = {
    __proto__: null,
    "%ArrayBufferPrototype%": ["ArrayBuffer", "prototype"],
    "%ArrayPrototype%": ["Array", "prototype"],
    "%ArrayProto_entries%": ["Array", "prototype", "entries"],
    "%ArrayProto_forEach%": ["Array", "prototype", "forEach"],
    "%ArrayProto_keys%": ["Array", "prototype", "keys"],
    "%ArrayProto_values%": ["Array", "prototype", "values"],
    "%AsyncFunctionPrototype%": ["AsyncFunction", "prototype"],
    "%AsyncGenerator%": ["AsyncGeneratorFunction", "prototype"],
    "%AsyncGeneratorPrototype%": ["AsyncGeneratorFunction", "prototype", "prototype"],
    "%BooleanPrototype%": ["Boolean", "prototype"],
    "%DataViewPrototype%": ["DataView", "prototype"],
    "%DatePrototype%": ["Date", "prototype"],
    "%ErrorPrototype%": ["Error", "prototype"],
    "%EvalErrorPrototype%": ["EvalError", "prototype"],
    "%Float32ArrayPrototype%": ["Float32Array", "prototype"],
    "%Float64ArrayPrototype%": ["Float64Array", "prototype"],
    "%FunctionPrototype%": ["Function", "prototype"],
    "%Generator%": ["GeneratorFunction", "prototype"],
    "%GeneratorPrototype%": ["GeneratorFunction", "prototype", "prototype"],
    "%Int8ArrayPrototype%": ["Int8Array", "prototype"],
    "%Int16ArrayPrototype%": ["Int16Array", "prototype"],
    "%Int32ArrayPrototype%": ["Int32Array", "prototype"],
    "%JSONParse%": ["JSON", "parse"],
    "%JSONStringify%": ["JSON", "stringify"],
    "%MapPrototype%": ["Map", "prototype"],
    "%NumberPrototype%": ["Number", "prototype"],
    "%ObjectPrototype%": ["Object", "prototype"],
    "%ObjProto_toString%": ["Object", "prototype", "toString"],
    "%ObjProto_valueOf%": ["Object", "prototype", "valueOf"],
    "%PromisePrototype%": ["Promise", "prototype"],
    "%PromiseProto_then%": ["Promise", "prototype", "then"],
    "%Promise_all%": ["Promise", "all"],
    "%Promise_reject%": ["Promise", "reject"],
    "%Promise_resolve%": ["Promise", "resolve"],
    "%RangeErrorPrototype%": ["RangeError", "prototype"],
    "%ReferenceErrorPrototype%": ["ReferenceError", "prototype"],
    "%RegExpPrototype%": ["RegExp", "prototype"],
    "%SetPrototype%": ["Set", "prototype"],
    "%SharedArrayBufferPrototype%": ["SharedArrayBuffer", "prototype"],
    "%StringPrototype%": ["String", "prototype"],
    "%SymbolPrototype%": ["Symbol", "prototype"],
    "%SyntaxErrorPrototype%": ["SyntaxError", "prototype"],
    "%TypedArrayPrototype%": ["TypedArray", "prototype"],
    "%TypeErrorPrototype%": ["TypeError", "prototype"],
    "%Uint8ArrayPrototype%": ["Uint8Array", "prototype"],
    "%Uint8ClampedArrayPrototype%": ["Uint8ClampedArray", "prototype"],
    "%Uint16ArrayPrototype%": ["Uint16Array", "prototype"],
    "%Uint32ArrayPrototype%": ["Uint32Array", "prototype"],
    "%URIErrorPrototype%": ["URIError", "prototype"],
    "%WeakMapPrototype%": ["WeakMap", "prototype"],
    "%WeakSetPrototype%": ["WeakSet", "prototype"]
  };
  var bind2 = require_function_bind();
  var hasOwn = require_hasown();
  var $concat = bind2.call($call, Array.prototype.concat);
  var $spliceApply = bind2.call($apply, Array.prototype.splice);
  var $replace = bind2.call($call, String.prototype.replace);
  var $strSlice = bind2.call($call, String.prototype.slice);
  var $exec = bind2.call($call, RegExp.prototype.exec);
  var rePropName = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g;
  var reEscapeChar = /\\(\\)?/g;
  var stringToPath = function stringToPath(string2) {
    var first = $strSlice(string2, 0, 1);
    var last = $strSlice(string2, -1);
    if (first === "%" && last !== "%") {
      throw new $SyntaxError("invalid intrinsic syntax, expected closing `%`");
    } else if (last === "%" && first !== "%") {
      throw new $SyntaxError("invalid intrinsic syntax, expected opening `%`");
    }
    var result = [];
    $replace(string2, rePropName, function(match, number2, quote, subString) {
      result[result.length] = quote ? $replace(subString, reEscapeChar, "$1") : number2 || match;
    });
    return result;
  };
  var getBaseIntrinsic = function getBaseIntrinsic(name17, allowMissing) {
    var intrinsicName = name17;
    var alias;
    if (hasOwn(LEGACY_ALIASES, intrinsicName)) {
      alias = LEGACY_ALIASES[intrinsicName];
      intrinsicName = "%" + alias[0] + "%";
    }
    if (hasOwn(INTRINSICS, intrinsicName)) {
      var value = INTRINSICS[intrinsicName];
      if (value === needsEval) {
        value = doEval(intrinsicName);
      }
      if (typeof value === "undefined" && !allowMissing) {
        throw new $TypeError("intrinsic " + name17 + " exists, but is not available. Please file an issue!");
      }
      return {
        alias,
        name: intrinsicName,
        value
      };
    }
    throw new $SyntaxError("intrinsic " + name17 + " does not exist!");
  };
  module.exports = function GetIntrinsic(name17, allowMissing) {
    if (typeof name17 !== "string" || name17.length === 0) {
      throw new $TypeError("intrinsic name must be a non-empty string");
    }
    if (arguments.length > 1 && typeof allowMissing !== "boolean") {
      throw new $TypeError('"allowMissing" argument must be a boolean');
    }
    if ($exec(/^%?[^%]*%?$/, name17) === null) {
      throw new $SyntaxError("`%` may not be present anywhere but at the beginning and end of the intrinsic name");
    }
    var parts = stringToPath(name17);
    var intrinsicBaseName = parts.length > 0 ? parts[0] : "";
    var intrinsic = getBaseIntrinsic("%" + intrinsicBaseName + "%", allowMissing);
    var intrinsicRealName = intrinsic.name;
    var value = intrinsic.value;
    var skipFurtherCaching = false;
    var alias = intrinsic.alias;
    if (alias) {
      intrinsicBaseName = alias[0];
      $spliceApply(parts, $concat([0, 1], alias));
    }
    for (var i = 1, isOwn = true;i < parts.length; i += 1) {
      var part = parts[i];
      var first = $strSlice(part, 0, 1);
      var last = $strSlice(part, -1);
      if ((first === '"' || first === "'" || first === "`" || (last === '"' || last === "'" || last === "`")) && first !== last) {
        throw new $SyntaxError("property names with quotes must have matching quotes");
      }
      if (part === "constructor" || !isOwn) {
        skipFurtherCaching = true;
      }
      intrinsicBaseName += "." + part;
      intrinsicRealName = "%" + intrinsicBaseName + "%";
      if (hasOwn(INTRINSICS, intrinsicRealName)) {
        value = INTRINSICS[intrinsicRealName];
      } else if (value != null) {
        if (!(part in value)) {
          if (!allowMissing) {
            throw new $TypeError("base intrinsic for " + name17 + " exists, but the property is not available.");
          }
          return;
        }
        if ($gOPD && i + 1 >= parts.length) {
          var desc = $gOPD(value, part);
          isOwn = !!desc;
          if (isOwn && "get" in desc && !("originalValue" in desc.get)) {
            value = desc.get;
          } else {
            value = value[part];
          }
        } else {
          isOwn = hasOwn(value, part);
          value = value[part];
        }
        if (isOwn && !skipFurtherCaching) {
          INTRINSICS[intrinsicRealName] = value;
        }
      }
    }
    return value;
  };
});

// node_modules/has-tostringtag/shams.js
var require_shams2 = __commonJS((exports, module) => {
  var hasSymbols = require_shams();
  module.exports = function hasToStringTagShams() {
    return hasSymbols() && !!Symbol.toStringTag;
  };
});

// node_modules/es-set-tostringtag/index.js
var require_es_set_tostringtag = __commonJS((exports, module) => {
  var GetIntrinsic = require_get_intrinsic();
  var $defineProperty = GetIntrinsic("%Object.defineProperty%", true);
  var hasToStringTag = require_shams2()();
  var hasOwn = require_hasown();
  var $TypeError = require_type();
  var toStringTag2 = hasToStringTag ? Symbol.toStringTag : null;
  module.exports = function setToStringTag(object3, value) {
    var overrideIfSet = arguments.length > 2 && !!arguments[2] && arguments[2].force;
    var nonConfigurable = arguments.length > 2 && !!arguments[2] && arguments[2].nonConfigurable;
    if (typeof overrideIfSet !== "undefined" && typeof overrideIfSet !== "boolean" || typeof nonConfigurable !== "undefined" && typeof nonConfigurable !== "boolean") {
      throw new $TypeError("if provided, the `overrideIfSet` and `nonConfigurable` options must be booleans");
    }
    if (toStringTag2 && (overrideIfSet || !hasOwn(object3, toStringTag2))) {
      if ($defineProperty) {
        $defineProperty(object3, toStringTag2, {
          configurable: !nonConfigurable,
          enumerable: false,
          value,
          writable: false
        });
      } else {
        object3[toStringTag2] = value;
      }
    }
  };
});

// node_modules/form-data/lib/populate.js
var require_populate = __commonJS((exports, module) => {
  module.exports = function(dst, src) {
    Object.keys(src).forEach(function(prop) {
      dst[prop] = dst[prop] || src[prop];
    });
    return dst;
  };
});

// node_modules/form-data/lib/form_data.js
var require_form_data = __commonJS((exports, module) => {
  var CombinedStream = require_combined_stream();
  var util3 = __require("util");
  var path = __require("path");
  var http = __require("http");
  var https = __require("https");
  var parseUrl = __require("url").parse;
  var fs = __require("fs");
  var Stream = __require("stream").Stream;
  var mime = require_mime_types();
  var asynckit = require_asynckit();
  var setToStringTag = require_es_set_tostringtag();
  var hasOwn = require_hasown();
  var populate = require_populate();
  function FormData2(options) {
    if (!(this instanceof FormData2)) {
      return new FormData2(options);
    }
    this._overheadLength = 0;
    this._valueLength = 0;
    this._valuesToMeasure = [];
    CombinedStream.call(this);
    options = options || {};
    for (var option in options) {
      this[option] = options[option];
    }
  }
  util3.inherits(FormData2, CombinedStream);
  FormData2.LINE_BREAK = `\r
`;
  FormData2.DEFAULT_CONTENT_TYPE = "application/octet-stream";
  FormData2.prototype.append = function(field, value, options) {
    options = options || {};
    if (typeof options === "string") {
      options = { filename: options };
    }
    var append = CombinedStream.prototype.append.bind(this);
    if (typeof value === "number" || value == null) {
      value = String(value);
    }
    if (Array.isArray(value)) {
      this._error(new Error("Arrays are not supported."));
      return;
    }
    var header = this._multiPartHeader(field, value, options);
    var footer = this._multiPartFooter();
    append(header);
    append(value);
    append(footer);
    this._trackLength(header, value, options);
  };
  FormData2.prototype._trackLength = function(header, value, options) {
    var valueLength = 0;
    if (options.knownLength != null) {
      valueLength += Number(options.knownLength);
    } else if (Buffer.isBuffer(value)) {
      valueLength = value.length;
    } else if (typeof value === "string") {
      valueLength = Buffer.byteLength(value);
    }
    this._valueLength += valueLength;
    this._overheadLength += Buffer.byteLength(header) + FormData2.LINE_BREAK.length;
    if (!value || !value.path && !(value.readable && hasOwn(value, "httpVersion")) && !(value instanceof Stream)) {
      return;
    }
    if (!options.knownLength) {
      this._valuesToMeasure.push(value);
    }
  };
  FormData2.prototype._lengthRetriever = function(value, callback) {
    if (hasOwn(value, "fd")) {
      if (value.end != null && value.end != Infinity && value.start != null) {
        callback(null, value.end + 1 - (value.start ? value.start : 0));
      } else {
        fs.stat(value.path, function(err, stat) {
          if (err) {
            callback(err);
            return;
          }
          var fileSize = stat.size - (value.start ? value.start : 0);
          callback(null, fileSize);
        });
      }
    } else if (hasOwn(value, "httpVersion")) {
      callback(null, Number(value.headers["content-length"]));
    } else if (hasOwn(value, "httpModule")) {
      value.on("response", function(response) {
        value.pause();
        callback(null, Number(response.headers["content-length"]));
      });
      value.resume();
    } else {
      callback("Unknown stream");
    }
  };
  FormData2.prototype._multiPartHeader = function(field, value, options) {
    if (typeof options.header === "string") {
      return options.header;
    }
    var contentDisposition = this._getContentDisposition(value, options);
    var contentType = this._getContentType(value, options);
    var contents = "";
    var headers = {
      "Content-Disposition": ["form-data", 'name="' + field + '"'].concat(contentDisposition || []),
      "Content-Type": [].concat(contentType || [])
    };
    if (typeof options.header === "object") {
      populate(headers, options.header);
    }
    var header;
    for (var prop in headers) {
      if (hasOwn(headers, prop)) {
        header = headers[prop];
        if (header == null) {
          continue;
        }
        if (!Array.isArray(header)) {
          header = [header];
        }
        if (header.length) {
          contents += prop + ": " + header.join("; ") + FormData2.LINE_BREAK;
        }
      }
    }
    return "--" + this.getBoundary() + FormData2.LINE_BREAK + contents + FormData2.LINE_BREAK;
  };
  FormData2.prototype._getContentDisposition = function(value, options) {
    var filename;
    if (typeof options.filepath === "string") {
      filename = path.normalize(options.filepath).replace(/\\/g, "/");
    } else if (options.filename || value && (value.name || value.path)) {
      filename = path.basename(options.filename || value && (value.name || value.path));
    } else if (value && value.readable && hasOwn(value, "httpVersion")) {
      filename = path.basename(value.client._httpMessage.path || "");
    }
    if (filename) {
      return 'filename="' + filename + '"';
    }
  };
  FormData2.prototype._getContentType = function(value, options) {
    var contentType = options.contentType;
    if (!contentType && value && value.name) {
      contentType = mime.lookup(value.name);
    }
    if (!contentType && value && value.path) {
      contentType = mime.lookup(value.path);
    }
    if (!contentType && value && value.readable && hasOwn(value, "httpVersion")) {
      contentType = value.headers["content-type"];
    }
    if (!contentType && (options.filepath || options.filename)) {
      contentType = mime.lookup(options.filepath || options.filename);
    }
    if (!contentType && value && typeof value === "object") {
      contentType = FormData2.DEFAULT_CONTENT_TYPE;
    }
    return contentType;
  };
  FormData2.prototype._multiPartFooter = function() {
    return function(next) {
      var footer = FormData2.LINE_BREAK;
      var lastPart = this._streams.length === 0;
      if (lastPart) {
        footer += this._lastBoundary();
      }
      next(footer);
    }.bind(this);
  };
  FormData2.prototype._lastBoundary = function() {
    return "--" + this.getBoundary() + "--" + FormData2.LINE_BREAK;
  };
  FormData2.prototype.getHeaders = function(userHeaders) {
    var header;
    var formHeaders = {
      "content-type": "multipart/form-data; boundary=" + this.getBoundary()
    };
    for (header in userHeaders) {
      if (hasOwn(userHeaders, header)) {
        formHeaders[header.toLowerCase()] = userHeaders[header];
      }
    }
    return formHeaders;
  };
  FormData2.prototype.setBoundary = function(boundary) {
    if (typeof boundary !== "string") {
      throw new TypeError("FormData boundary must be a string");
    }
    this._boundary = boundary;
  };
  FormData2.prototype.getBoundary = function() {
    if (!this._boundary) {
      this._generateBoundary();
    }
    return this._boundary;
  };
  FormData2.prototype.getBuffer = function() {
    var dataBuffer = new Buffer.alloc(0);
    var boundary = this.getBoundary();
    for (var i = 0, len = this._streams.length;i < len; i++) {
      if (typeof this._streams[i] !== "function") {
        if (Buffer.isBuffer(this._streams[i])) {
          dataBuffer = Buffer.concat([dataBuffer, this._streams[i]]);
        } else {
          dataBuffer = Buffer.concat([dataBuffer, Buffer.from(this._streams[i])]);
        }
        if (typeof this._streams[i] !== "string" || this._streams[i].substring(2, boundary.length + 2) !== boundary) {
          dataBuffer = Buffer.concat([dataBuffer, Buffer.from(FormData2.LINE_BREAK)]);
        }
      }
    }
    return Buffer.concat([dataBuffer, Buffer.from(this._lastBoundary())]);
  };
  FormData2.prototype._generateBoundary = function() {
    var boundary = "--------------------------";
    for (var i = 0;i < 24; i++) {
      boundary += Math.floor(Math.random() * 10).toString(16);
    }
    this._boundary = boundary;
  };
  FormData2.prototype.getLengthSync = function() {
    var knownLength = this._overheadLength + this._valueLength;
    if (this._streams.length) {
      knownLength += this._lastBoundary().length;
    }
    if (!this.hasKnownLength()) {
      this._error(new Error("Cannot calculate proper length in synchronous way."));
    }
    return knownLength;
  };
  FormData2.prototype.hasKnownLength = function() {
    var hasKnownLength = true;
    if (this._valuesToMeasure.length) {
      hasKnownLength = false;
    }
    return hasKnownLength;
  };
  FormData2.prototype.getLength = function(cb) {
    var knownLength = this._overheadLength + this._valueLength;
    if (this._streams.length) {
      knownLength += this._lastBoundary().length;
    }
    if (!this._valuesToMeasure.length) {
      process.nextTick(cb.bind(this, null, knownLength));
      return;
    }
    asynckit.parallel(this._valuesToMeasure, this._lengthRetriever, function(err, values) {
      if (err) {
        cb(err);
        return;
      }
      values.forEach(function(length) {
        knownLength += length;
      });
      cb(null, knownLength);
    });
  };
  FormData2.prototype.submit = function(params, cb) {
    var request;
    var options;
    var defaults = { method: "post" };
    if (typeof params === "string") {
      params = parseUrl(params);
      options = populate({
        port: params.port,
        path: params.pathname,
        host: params.hostname,
        protocol: params.protocol
      }, defaults);
    } else {
      options = populate(params, defaults);
      if (!options.port) {
        options.port = options.protocol === "https:" ? 443 : 80;
      }
    }
    options.headers = this.getHeaders(params.headers);
    if (options.protocol === "https:") {
      request = https.request(options);
    } else {
      request = http.request(options);
    }
    this.getLength(function(err, length) {
      if (err && err !== "Unknown stream") {
        this._error(err);
        return;
      }
      if (length) {
        request.setHeader("Content-Length", length);
      }
      this.pipe(request);
      if (cb) {
        var onResponse;
        var callback = function(error, responce) {
          request.removeListener("error", callback);
          request.removeListener("response", onResponse);
          return cb.call(this, error, responce);
        };
        onResponse = callback.bind(this, null);
        request.on("error", callback);
        request.on("response", onResponse);
      }
    }.bind(this));
    return request;
  };
  FormData2.prototype._error = function(err) {
    if (!this.error) {
      this.error = err;
      this.pause();
      this.emit("error", err);
    }
  };
  FormData2.prototype.toString = function() {
    return "[object FormData]";
  };
  setToStringTag(FormData2, "FormData");
  module.exports = FormData2;
});

// node_modules/proxy-from-env/index.js
var require_proxy_from_env = __commonJS((exports) => {
  var parseUrl = __require("url").parse;
  var DEFAULT_PORTS = {
    ftp: 21,
    gopher: 70,
    http: 80,
    https: 443,
    ws: 80,
    wss: 443
  };
  var stringEndsWith = String.prototype.endsWith || function(s) {
    return s.length <= this.length && this.indexOf(s, this.length - s.length) !== -1;
  };
  function getProxyForUrl(url2) {
    var parsedUrl = typeof url2 === "string" ? parseUrl(url2) : url2 || {};
    var proto = parsedUrl.protocol;
    var hostname = parsedUrl.host;
    var port = parsedUrl.port;
    if (typeof hostname !== "string" || !hostname || typeof proto !== "string") {
      return "";
    }
    proto = proto.split(":", 1)[0];
    hostname = hostname.replace(/:\d*$/, "");
    port = parseInt(port) || DEFAULT_PORTS[proto] || 0;
    if (!shouldProxy(hostname, port)) {
      return "";
    }
    var proxy = getEnv("npm_config_" + proto + "_proxy") || getEnv(proto + "_proxy") || getEnv("npm_config_proxy") || getEnv("all_proxy");
    if (proxy && proxy.indexOf("://") === -1) {
      proxy = proto + "://" + proxy;
    }
    return proxy;
  }
  function shouldProxy(hostname, port) {
    var NO_PROXY = (getEnv("npm_config_no_proxy") || getEnv("no_proxy")).toLowerCase();
    if (!NO_PROXY) {
      return true;
    }
    if (NO_PROXY === "*") {
      return false;
    }
    return NO_PROXY.split(/[,\s]/).every(function(proxy) {
      if (!proxy) {
        return true;
      }
      var parsedProxy = proxy.match(/^(.+):(\d+)$/);
      var parsedProxyHostname = parsedProxy ? parsedProxy[1] : proxy;
      var parsedProxyPort = parsedProxy ? parseInt(parsedProxy[2]) : 0;
      if (parsedProxyPort && parsedProxyPort !== port) {
        return true;
      }
      if (!/^[.*]/.test(parsedProxyHostname)) {
        return hostname !== parsedProxyHostname;
      }
      if (parsedProxyHostname.charAt(0) === "*") {
        parsedProxyHostname = parsedProxyHostname.slice(1);
      }
      return !stringEndsWith.call(hostname, parsedProxyHostname);
    });
  }
  function getEnv(key) {
    return process.env[key.toLowerCase()] || process.env[key.toUpperCase()] || "";
  }
  exports.getProxyForUrl = getProxyForUrl;
});

// node_modules/ms/index.js
var require_ms = __commonJS((exports, module) => {
  var s = 1000;
  var m = s * 60;
  var h = m * 60;
  var d = h * 24;
  var w = d * 7;
  var y = d * 365.25;
  module.exports = function(val, options) {
    options = options || {};
    var type = typeof val;
    if (type === "string" && val.length > 0) {
      return parse(val);
    } else if (type === "number" && isFinite(val)) {
      return options.long ? fmtLong(val) : fmtShort(val);
    }
    throw new Error("val is not a non-empty string or a valid number. val=" + JSON.stringify(val));
  };
  function parse(str) {
    str = String(str);
    if (str.length > 100) {
      return;
    }
    var match = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(str);
    if (!match) {
      return;
    }
    var n = parseFloat(match[1]);
    var type = (match[2] || "ms").toLowerCase();
    switch (type) {
      case "years":
      case "year":
      case "yrs":
      case "yr":
      case "y":
        return n * y;
      case "weeks":
      case "week":
      case "w":
        return n * w;
      case "days":
      case "day":
      case "d":
        return n * d;
      case "hours":
      case "hour":
      case "hrs":
      case "hr":
      case "h":
        return n * h;
      case "minutes":
      case "minute":
      case "mins":
      case "min":
      case "m":
        return n * m;
      case "seconds":
      case "second":
      case "secs":
      case "sec":
      case "s":
        return n * s;
      case "milliseconds":
      case "millisecond":
      case "msecs":
      case "msec":
      case "ms":
        return n;
      default:
        return;
    }
  }
  function fmtShort(ms) {
    var msAbs = Math.abs(ms);
    if (msAbs >= d) {
      return Math.round(ms / d) + "d";
    }
    if (msAbs >= h) {
      return Math.round(ms / h) + "h";
    }
    if (msAbs >= m) {
      return Math.round(ms / m) + "m";
    }
    if (msAbs >= s) {
      return Math.round(ms / s) + "s";
    }
    return ms + "ms";
  }
  function fmtLong(ms) {
    var msAbs = Math.abs(ms);
    if (msAbs >= d) {
      return plural(ms, msAbs, d, "day");
    }
    if (msAbs >= h) {
      return plural(ms, msAbs, h, "hour");
    }
    if (msAbs >= m) {
      return plural(ms, msAbs, m, "minute");
    }
    if (msAbs >= s) {
      return plural(ms, msAbs, s, "second");
    }
    return ms + " ms";
  }
  function plural(ms, msAbs, n, name17) {
    var isPlural = msAbs >= n * 1.5;
    return Math.round(ms / n) + " " + name17 + (isPlural ? "s" : "");
  }
});

// node_modules/debug/src/common.js
var require_common = __commonJS((exports, module) => {
  function setup(env) {
    createDebug.debug = createDebug;
    createDebug.default = createDebug;
    createDebug.coerce = coerce2;
    createDebug.disable = disable;
    createDebug.enable = enable;
    createDebug.enabled = enabled;
    createDebug.humanize = require_ms();
    createDebug.destroy = destroy;
    Object.keys(env).forEach((key) => {
      createDebug[key] = env[key];
    });
    createDebug.names = [];
    createDebug.skips = [];
    createDebug.formatters = {};
    function selectColor(namespace) {
      let hash = 0;
      for (let i = 0;i < namespace.length; i++) {
        hash = (hash << 5) - hash + namespace.charCodeAt(i);
        hash |= 0;
      }
      return createDebug.colors[Math.abs(hash) % createDebug.colors.length];
    }
    createDebug.selectColor = selectColor;
    function createDebug(namespace) {
      let prevTime;
      let enableOverride = null;
      let namespacesCache;
      let enabledCache;
      function debug(...args) {
        if (!debug.enabled) {
          return;
        }
        const self2 = debug;
        const curr = Number(new Date);
        const ms = curr - (prevTime || curr);
        self2.diff = ms;
        self2.prev = prevTime;
        self2.curr = curr;
        prevTime = curr;
        args[0] = createDebug.coerce(args[0]);
        if (typeof args[0] !== "string") {
          args.unshift("%O");
        }
        let index = 0;
        args[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {
          if (match === "%%") {
            return "%";
          }
          index++;
          const formatter = createDebug.formatters[format];
          if (typeof formatter === "function") {
            const val = args[index];
            match = formatter.call(self2, val);
            args.splice(index, 1);
            index--;
          }
          return match;
        });
        createDebug.formatArgs.call(self2, args);
        const logFn = self2.log || createDebug.log;
        logFn.apply(self2, args);
      }
      debug.namespace = namespace;
      debug.useColors = createDebug.useColors();
      debug.color = createDebug.selectColor(namespace);
      debug.extend = extend2;
      debug.destroy = createDebug.destroy;
      Object.defineProperty(debug, "enabled", {
        enumerable: true,
        configurable: false,
        get: () => {
          if (enableOverride !== null) {
            return enableOverride;
          }
          if (namespacesCache !== createDebug.namespaces) {
            namespacesCache = createDebug.namespaces;
            enabledCache = createDebug.enabled(namespace);
          }
          return enabledCache;
        },
        set: (v) => {
          enableOverride = v;
        }
      });
      if (typeof createDebug.init === "function") {
        createDebug.init(debug);
      }
      return debug;
    }
    function extend2(namespace, delimiter) {
      const newDebug = createDebug(this.namespace + (typeof delimiter === "undefined" ? ":" : delimiter) + namespace);
      newDebug.log = this.log;
      return newDebug;
    }
    function enable(namespaces) {
      createDebug.save(namespaces);
      createDebug.namespaces = namespaces;
      createDebug.names = [];
      createDebug.skips = [];
      const split = (typeof namespaces === "string" ? namespaces : "").trim().replace(/\s+/g, ",").split(",").filter(Boolean);
      for (const ns of split) {
        if (ns[0] === "-") {
          createDebug.skips.push(ns.slice(1));
        } else {
          createDebug.names.push(ns);
        }
      }
    }
    function matchesTemplate(search, template) {
      let searchIndex = 0;
      let templateIndex = 0;
      let starIndex = -1;
      let matchIndex = 0;
      while (searchIndex < search.length) {
        if (templateIndex < template.length && (template[templateIndex] === search[searchIndex] || template[templateIndex] === "*")) {
          if (template[templateIndex] === "*") {
            starIndex = templateIndex;
            matchIndex = searchIndex;
            templateIndex++;
          } else {
            searchIndex++;
            templateIndex++;
          }
        } else if (starIndex !== -1) {
          templateIndex = starIndex + 1;
          matchIndex++;
          searchIndex = matchIndex;
        } else {
          return false;
        }
      }
      while (templateIndex < template.length && template[templateIndex] === "*") {
        templateIndex++;
      }
      return templateIndex === template.length;
    }
    function disable() {
      const namespaces = [
        ...createDebug.names,
        ...createDebug.skips.map((namespace) => "-" + namespace)
      ].join(",");
      createDebug.enable("");
      return namespaces;
    }
    function enabled(name17) {
      for (const skip of createDebug.skips) {
        if (matchesTemplate(name17, skip)) {
          return false;
        }
      }
      for (const ns of createDebug.names) {
        if (matchesTemplate(name17, ns)) {
          return true;
        }
      }
      return false;
    }
    function coerce2(val) {
      if (val instanceof Error) {
        return val.stack || val.message;
      }
      return val;
    }
    function destroy() {
      console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
    }
    createDebug.enable(createDebug.load());
    return createDebug;
  }
  module.exports = setup;
});

// node_modules/debug/src/browser.js
var require_browser = __commonJS((exports, module) => {
  exports.formatArgs = formatArgs;
  exports.save = save;
  exports.load = load;
  exports.useColors = useColors;
  exports.storage = localstorage();
  exports.destroy = (() => {
    let warned = false;
    return () => {
      if (!warned) {
        warned = true;
        console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
      }
    };
  })();
  exports.colors = [
    "#0000CC",
    "#0000FF",
    "#0033CC",
    "#0033FF",
    "#0066CC",
    "#0066FF",
    "#0099CC",
    "#0099FF",
    "#00CC00",
    "#00CC33",
    "#00CC66",
    "#00CC99",
    "#00CCCC",
    "#00CCFF",
    "#3300CC",
    "#3300FF",
    "#3333CC",
    "#3333FF",
    "#3366CC",
    "#3366FF",
    "#3399CC",
    "#3399FF",
    "#33CC00",
    "#33CC33",
    "#33CC66",
    "#33CC99",
    "#33CCCC",
    "#33CCFF",
    "#6600CC",
    "#6600FF",
    "#6633CC",
    "#6633FF",
    "#66CC00",
    "#66CC33",
    "#9900CC",
    "#9900FF",
    "#9933CC",
    "#9933FF",
    "#99CC00",
    "#99CC33",
    "#CC0000",
    "#CC0033",
    "#CC0066",
    "#CC0099",
    "#CC00CC",
    "#CC00FF",
    "#CC3300",
    "#CC3333",
    "#CC3366",
    "#CC3399",
    "#CC33CC",
    "#CC33FF",
    "#CC6600",
    "#CC6633",
    "#CC9900",
    "#CC9933",
    "#CCCC00",
    "#CCCC33",
    "#FF0000",
    "#FF0033",
    "#FF0066",
    "#FF0099",
    "#FF00CC",
    "#FF00FF",
    "#FF3300",
    "#FF3333",
    "#FF3366",
    "#FF3399",
    "#FF33CC",
    "#FF33FF",
    "#FF6600",
    "#FF6633",
    "#FF9900",
    "#FF9933",
    "#FFCC00",
    "#FFCC33"
  ];
  function useColors() {
    if (typeof window !== "undefined" && window.process && (window.process.type === "renderer" || window.process.__nwjs)) {
      return true;
    }
    if (typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
      return false;
    }
    let m;
    return typeof document !== "undefined" && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || typeof window !== "undefined" && window.console && (window.console.firebug || window.console.exception && window.console.table) || typeof navigator !== "undefined" && navigator.userAgent && (m = navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)) && parseInt(m[1], 10) >= 31 || typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
  }
  function formatArgs(args) {
    args[0] = (this.useColors ? "%c" : "") + this.namespace + (this.useColors ? " %c" : " ") + args[0] + (this.useColors ? "%c " : " ") + "+" + module.exports.humanize(this.diff);
    if (!this.useColors) {
      return;
    }
    const c = "color: " + this.color;
    args.splice(1, 0, c, "color: inherit");
    let index = 0;
    let lastC = 0;
    args[0].replace(/%[a-zA-Z%]/g, (match) => {
      if (match === "%%") {
        return;
      }
      index++;
      if (match === "%c") {
        lastC = index;
      }
    });
    args.splice(lastC, 0, c);
  }
  exports.log = console.debug || console.log || (() => {});
  function save(namespaces) {
    try {
      if (namespaces) {
        exports.storage.setItem("debug", namespaces);
      } else {
        exports.storage.removeItem("debug");
      }
    } catch (error) {}
  }
  function load() {
    let r;
    try {
      r = exports.storage.getItem("debug") || exports.storage.getItem("DEBUG");
    } catch (error) {}
    if (!r && typeof process !== "undefined" && "env" in process) {
      r = process.env.DEBUG;
    }
    return r;
  }
  function localstorage() {
    try {
      return localStorage;
    } catch (error) {}
  }
  module.exports = require_common()(exports);
  var { formatters } = module.exports;
  formatters.j = function(v) {
    try {
      return JSON.stringify(v);
    } catch (error) {
      return "[UnexpectedJSONParseError]: " + error.message;
    }
  };
});

// node_modules/debug/src/node.js
var require_node = __commonJS((exports, module) => {
  var tty = __require("tty");
  var util3 = __require("util");
  exports.init = init;
  exports.log = log;
  exports.formatArgs = formatArgs;
  exports.save = save;
  exports.load = load;
  exports.useColors = useColors;
  exports.destroy = util3.deprecate(() => {}, "Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
  exports.colors = [6, 2, 3, 4, 5, 1];
  try {
    const supportsColor = (()=>{throw new Error("Cannot require module "+"supports-color");})();
    if (supportsColor && (supportsColor.stderr || supportsColor).level >= 2) {
      exports.colors = [
        20,
        21,
        26,
        27,
        32,
        33,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        56,
        57,
        62,
        63,
        68,
        69,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        92,
        93,
        98,
        99,
        112,
        113,
        128,
        129,
        134,
        135,
        148,
        149,
        160,
        161,
        162,
        163,
        164,
        165,
        166,
        167,
        168,
        169,
        170,
        171,
        172,
        173,
        178,
        179,
        184,
        185,
        196,
        197,
        198,
        199,
        200,
        201,
        202,
        203,
        204,
        205,
        206,
        207,
        208,
        209,
        214,
        215,
        220,
        221
      ];
    }
  } catch (error) {}
  exports.inspectOpts = Object.keys(process.env).filter((key) => {
    return /^debug_/i.test(key);
  }).reduce((obj, key) => {
    const prop = key.substring(6).toLowerCase().replace(/_([a-z])/g, (_, k) => {
      return k.toUpperCase();
    });
    let val = process.env[key];
    if (/^(yes|on|true|enabled)$/i.test(val)) {
      val = true;
    } else if (/^(no|off|false|disabled)$/i.test(val)) {
      val = false;
    } else if (val === "null") {
      val = null;
    } else {
      val = Number(val);
    }
    obj[prop] = val;
    return obj;
  }, {});
  function useColors() {
    return "colors" in exports.inspectOpts ? Boolean(exports.inspectOpts.colors) : tty.isatty(process.stderr.fd);
  }
  function formatArgs(args) {
    const { namespace: name17, useColors: useColors2 } = this;
    if (useColors2) {
      const c = this.color;
      const colorCode = "\x1B[3" + (c < 8 ? c : "8;5;" + c);
      const prefix = `  ${colorCode};1m${name17} \x1B[0m`;
      args[0] = prefix + args[0].split(`
`).join(`
` + prefix);
      args.push(colorCode + "m+" + module.exports.humanize(this.diff) + "\x1B[0m");
    } else {
      args[0] = getDate() + name17 + " " + args[0];
    }
  }
  function getDate() {
    if (exports.inspectOpts.hideDate) {
      return "";
    }
    return new Date().toISOString() + " ";
  }
  function log(...args) {
    return process.stderr.write(util3.formatWithOptions(exports.inspectOpts, ...args) + `
`);
  }
  function save(namespaces) {
    if (namespaces) {
      process.env.DEBUG = namespaces;
    } else {
      delete process.env.DEBUG;
    }
  }
  function load() {
    return process.env.DEBUG;
  }
  function init(debug) {
    debug.inspectOpts = {};
    const keys = Object.keys(exports.inspectOpts);
    for (let i = 0;i < keys.length; i++) {
      debug.inspectOpts[keys[i]] = exports.inspectOpts[keys[i]];
    }
  }
  module.exports = require_common()(exports);
  var { formatters } = module.exports;
  formatters.o = function(v) {
    this.inspectOpts.colors = this.useColors;
    return util3.inspect(v, this.inspectOpts).split(`
`).map((str) => str.trim()).join(" ");
  };
  formatters.O = function(v) {
    this.inspectOpts.colors = this.useColors;
    return util3.inspect(v, this.inspectOpts);
  };
});

// node_modules/debug/src/index.js
var require_src = __commonJS((exports, module) => {
  if (typeof process === "undefined" || process.type === "renderer" || false || process.__nwjs) {
    module.exports = require_browser();
  } else {
    module.exports = require_node();
  }
});

// node_modules/follow-redirects/debug.js
var require_debug = __commonJS((exports, module) => {
  var debug;
  module.exports = function() {
    if (!debug) {
      try {
        debug = require_src()("follow-redirects");
      } catch (error) {}
      if (typeof debug !== "function") {
        debug = function() {};
      }
    }
    debug.apply(null, arguments);
  };
});

// node_modules/follow-redirects/index.js
var require_follow_redirects = __commonJS((exports, module) => {
  var url2 = __require("url");
  var URL2 = url2.URL;
  var http = __require("http");
  var https = __require("https");
  var Writable = __require("stream").Writable;
  var assert = __require("assert");
  var debug = require_debug();
  (function detectUnsupportedEnvironment() {
    var looksLikeNode = typeof process !== "undefined";
    var looksLikeBrowser = typeof window !== "undefined" && typeof document !== "undefined";
    var looksLikeV8 = isFunction2(Error.captureStackTrace);
    if (!looksLikeNode && (looksLikeBrowser || !looksLikeV8)) {
      console.warn("The follow-redirects package should be excluded from browser builds.");
    }
  })();
  var useNativeURL = false;
  try {
    assert(new URL2(""));
  } catch (error) {
    useNativeURL = error.code === "ERR_INVALID_URL";
  }
  var preservedUrlFields = [
    "auth",
    "host",
    "hostname",
    "href",
    "path",
    "pathname",
    "port",
    "protocol",
    "query",
    "search",
    "hash"
  ];
  var events = ["abort", "aborted", "connect", "error", "socket", "timeout"];
  var eventHandlers = Object.create(null);
  events.forEach(function(event) {
    eventHandlers[event] = function(arg1, arg2, arg3) {
      this._redirectable.emit(event, arg1, arg2, arg3);
    };
  });
  var InvalidUrlError = createErrorType("ERR_INVALID_URL", "Invalid URL", TypeError);
  var RedirectionError = createErrorType("ERR_FR_REDIRECTION_FAILURE", "Redirected request failed");
  var TooManyRedirectsError = createErrorType("ERR_FR_TOO_MANY_REDIRECTS", "Maximum number of redirects exceeded", RedirectionError);
  var MaxBodyLengthExceededError = createErrorType("ERR_FR_MAX_BODY_LENGTH_EXCEEDED", "Request body larger than maxBodyLength limit");
  var WriteAfterEndError = createErrorType("ERR_STREAM_WRITE_AFTER_END", "write after end");
  var destroy = Writable.prototype.destroy || noop2;
  function RedirectableRequest(options, responseCallback) {
    Writable.call(this);
    this._sanitizeOptions(options);
    this._options = options;
    this._ended = false;
    this._ending = false;
    this._redirectCount = 0;
    this._redirects = [];
    this._requestBodyLength = 0;
    this._requestBodyBuffers = [];
    if (responseCallback) {
      this.on("response", responseCallback);
    }
    var self2 = this;
    this._onNativeResponse = function(response) {
      try {
        self2._processResponse(response);
      } catch (cause) {
        self2.emit("error", cause instanceof RedirectionError ? cause : new RedirectionError({ cause }));
      }
    };
    this._performRequest();
  }
  RedirectableRequest.prototype = Object.create(Writable.prototype);
  RedirectableRequest.prototype.abort = function() {
    destroyRequest(this._currentRequest);
    this._currentRequest.abort();
    this.emit("abort");
  };
  RedirectableRequest.prototype.destroy = function(error) {
    destroyRequest(this._currentRequest, error);
    destroy.call(this, error);
    return this;
  };
  RedirectableRequest.prototype.write = function(data, encoding, callback) {
    if (this._ending) {
      throw new WriteAfterEndError;
    }
    if (!isString2(data) && !isBuffer2(data)) {
      throw new TypeError("data should be a string, Buffer or Uint8Array");
    }
    if (isFunction2(encoding)) {
      callback = encoding;
      encoding = null;
    }
    if (data.length === 0) {
      if (callback) {
        callback();
      }
      return;
    }
    if (this._requestBodyLength + data.length <= this._options.maxBodyLength) {
      this._requestBodyLength += data.length;
      this._requestBodyBuffers.push({ data, encoding });
      this._currentRequest.write(data, encoding, callback);
    } else {
      this.emit("error", new MaxBodyLengthExceededError);
      this.abort();
    }
  };
  RedirectableRequest.prototype.end = function(data, encoding, callback) {
    if (isFunction2(data)) {
      callback = data;
      data = encoding = null;
    } else if (isFunction2(encoding)) {
      callback = encoding;
      encoding = null;
    }
    if (!data) {
      this._ended = this._ending = true;
      this._currentRequest.end(null, null, callback);
    } else {
      var self2 = this;
      var currentRequest = this._currentRequest;
      this.write(data, encoding, function() {
        self2._ended = true;
        currentRequest.end(null, null, callback);
      });
      this._ending = true;
    }
  };
  RedirectableRequest.prototype.setHeader = function(name17, value) {
    this._options.headers[name17] = value;
    this._currentRequest.setHeader(name17, value);
  };
  RedirectableRequest.prototype.removeHeader = function(name17) {
    delete this._options.headers[name17];
    this._currentRequest.removeHeader(name17);
  };
  RedirectableRequest.prototype.setTimeout = function(msecs, callback) {
    var self2 = this;
    function destroyOnTimeout(socket) {
      socket.setTimeout(msecs);
      socket.removeListener("timeout", socket.destroy);
      socket.addListener("timeout", socket.destroy);
    }
    function startTimer(socket) {
      if (self2._timeout) {
        clearTimeout(self2._timeout);
      }
      self2._timeout = setTimeout(function() {
        self2.emit("timeout");
        clearTimer();
      }, msecs);
      destroyOnTimeout(socket);
    }
    function clearTimer() {
      if (self2._timeout) {
        clearTimeout(self2._timeout);
        self2._timeout = null;
      }
      self2.removeListener("abort", clearTimer);
      self2.removeListener("error", clearTimer);
      self2.removeListener("response", clearTimer);
      self2.removeListener("close", clearTimer);
      if (callback) {
        self2.removeListener("timeout", callback);
      }
      if (!self2.socket) {
        self2._currentRequest.removeListener("socket", startTimer);
      }
    }
    if (callback) {
      this.on("timeout", callback);
    }
    if (this.socket) {
      startTimer(this.socket);
    } else {
      this._currentRequest.once("socket", startTimer);
    }
    this.on("socket", destroyOnTimeout);
    this.on("abort", clearTimer);
    this.on("error", clearTimer);
    this.on("response", clearTimer);
    this.on("close", clearTimer);
    return this;
  };
  [
    "flushHeaders",
    "getHeader",
    "setNoDelay",
    "setSocketKeepAlive"
  ].forEach(function(method) {
    RedirectableRequest.prototype[method] = function(a, b) {
      return this._currentRequest[method](a, b);
    };
  });
  ["aborted", "connection", "socket"].forEach(function(property) {
    Object.defineProperty(RedirectableRequest.prototype, property, {
      get: function() {
        return this._currentRequest[property];
      }
    });
  });
  RedirectableRequest.prototype._sanitizeOptions = function(options) {
    if (!options.headers) {
      options.headers = {};
    }
    if (options.host) {
      if (!options.hostname) {
        options.hostname = options.host;
      }
      delete options.host;
    }
    if (!options.pathname && options.path) {
      var searchPos = options.path.indexOf("?");
      if (searchPos < 0) {
        options.pathname = options.path;
      } else {
        options.pathname = options.path.substring(0, searchPos);
        options.search = options.path.substring(searchPos);
      }
    }
  };
  RedirectableRequest.prototype._performRequest = function() {
    var protocol = this._options.protocol;
    var nativeProtocol = this._options.nativeProtocols[protocol];
    if (!nativeProtocol) {
      throw new TypeError("Unsupported protocol " + protocol);
    }
    if (this._options.agents) {
      var scheme = protocol.slice(0, -1);
      this._options.agent = this._options.agents[scheme];
    }
    var request = this._currentRequest = nativeProtocol.request(this._options, this._onNativeResponse);
    request._redirectable = this;
    for (var event of events) {
      request.on(event, eventHandlers[event]);
    }
    this._currentUrl = /^\//.test(this._options.path) ? url2.format(this._options) : this._options.path;
    if (this._isRedirect) {
      var i = 0;
      var self2 = this;
      var buffers = this._requestBodyBuffers;
      (function writeNext(error) {
        if (request === self2._currentRequest) {
          if (error) {
            self2.emit("error", error);
          } else if (i < buffers.length) {
            var buffer = buffers[i++];
            if (!request.finished) {
              request.write(buffer.data, buffer.encoding, writeNext);
            }
          } else if (self2._ended) {
            request.end();
          }
        }
      })();
    }
  };
  RedirectableRequest.prototype._processResponse = function(response) {
    var statusCode = response.statusCode;
    if (this._options.trackRedirects) {
      this._redirects.push({
        url: this._currentUrl,
        headers: response.headers,
        statusCode
      });
    }
    var location = response.headers.location;
    if (!location || this._options.followRedirects === false || statusCode < 300 || statusCode >= 400) {
      response.responseUrl = this._currentUrl;
      response.redirects = this._redirects;
      this.emit("response", response);
      this._requestBodyBuffers = [];
      return;
    }
    destroyRequest(this._currentRequest);
    response.destroy();
    if (++this._redirectCount > this._options.maxRedirects) {
      throw new TooManyRedirectsError;
    }
    var requestHeaders;
    var beforeRedirect = this._options.beforeRedirect;
    if (beforeRedirect) {
      requestHeaders = Object.assign({
        Host: response.req.getHeader("host")
      }, this._options.headers);
    }
    var method = this._options.method;
    if ((statusCode === 301 || statusCode === 302) && this._options.method === "POST" || statusCode === 303 && !/^(?:GET|HEAD)$/.test(this._options.method)) {
      this._options.method = "GET";
      this._requestBodyBuffers = [];
      removeMatchingHeaders(/^content-/i, this._options.headers);
    }
    var currentHostHeader = removeMatchingHeaders(/^host$/i, this._options.headers);
    var currentUrlParts = parseUrl(this._currentUrl);
    var currentHost = currentHostHeader || currentUrlParts.host;
    var currentUrl = /^\w+:/.test(location) ? this._currentUrl : url2.format(Object.assign(currentUrlParts, { host: currentHost }));
    var redirectUrl = resolveUrl(location, currentUrl);
    debug("redirecting to", redirectUrl.href);
    this._isRedirect = true;
    spreadUrlObject(redirectUrl, this._options);
    if (redirectUrl.protocol !== currentUrlParts.protocol && redirectUrl.protocol !== "https:" || redirectUrl.host !== currentHost && !isSubdomain(redirectUrl.host, currentHost)) {
      removeMatchingHeaders(/^(?:(?:proxy-)?authorization|cookie)$/i, this._options.headers);
    }
    if (isFunction2(beforeRedirect)) {
      var responseDetails = {
        headers: response.headers,
        statusCode
      };
      var requestDetails = {
        url: currentUrl,
        method,
        headers: requestHeaders
      };
      beforeRedirect(this._options, responseDetails, requestDetails);
      this._sanitizeOptions(this._options);
    }
    this._performRequest();
  };
  function wrap(protocols) {
    var exports2 = {
      maxRedirects: 21,
      maxBodyLength: 10 * 1024 * 1024
    };
    var nativeProtocols = {};
    Object.keys(protocols).forEach(function(scheme) {
      var protocol = scheme + ":";
      var nativeProtocol = nativeProtocols[protocol] = protocols[scheme];
      var wrappedProtocol = exports2[scheme] = Object.create(nativeProtocol);
      function request(input, options, callback) {
        if (isURL(input)) {
          input = spreadUrlObject(input);
        } else if (isString2(input)) {
          input = spreadUrlObject(parseUrl(input));
        } else {
          callback = options;
          options = validateUrl(input);
          input = { protocol };
        }
        if (isFunction2(options)) {
          callback = options;
          options = null;
        }
        options = Object.assign({
          maxRedirects: exports2.maxRedirects,
          maxBodyLength: exports2.maxBodyLength
        }, input, options);
        options.nativeProtocols = nativeProtocols;
        if (!isString2(options.host) && !isString2(options.hostname)) {
          options.hostname = "::1";
        }
        assert.equal(options.protocol, protocol, "protocol mismatch");
        debug("options", options);
        return new RedirectableRequest(options, callback);
      }
      function get(input, options, callback) {
        var wrappedRequest = wrappedProtocol.request(input, options, callback);
        wrappedRequest.end();
        return wrappedRequest;
      }
      Object.defineProperties(wrappedProtocol, {
        request: { value: request, configurable: true, enumerable: true, writable: true },
        get: { value: get, configurable: true, enumerable: true, writable: true }
      });
    });
    return exports2;
  }
  function noop2() {}
  function parseUrl(input) {
    var parsed;
    if (useNativeURL) {
      parsed = new URL2(input);
    } else {
      parsed = validateUrl(url2.parse(input));
      if (!isString2(parsed.protocol)) {
        throw new InvalidUrlError({ input });
      }
    }
    return parsed;
  }
  function resolveUrl(relative, base) {
    return useNativeURL ? new URL2(relative, base) : parseUrl(url2.resolve(base, relative));
  }
  function validateUrl(input) {
    if (/^\[/.test(input.hostname) && !/^\[[:0-9a-f]+\]$/i.test(input.hostname)) {
      throw new InvalidUrlError({ input: input.href || input });
    }
    if (/^\[/.test(input.host) && !/^\[[:0-9a-f]+\](:\d+)?$/i.test(input.host)) {
      throw new InvalidUrlError({ input: input.href || input });
    }
    return input;
  }
  function spreadUrlObject(urlObject, target) {
    var spread = target || {};
    for (var key of preservedUrlFields) {
      spread[key] = urlObject[key];
    }
    if (spread.hostname.startsWith("[")) {
      spread.hostname = spread.hostname.slice(1, -1);
    }
    if (spread.port !== "") {
      spread.port = Number(spread.port);
    }
    spread.path = spread.search ? spread.pathname + spread.search : spread.pathname;
    return spread;
  }
  function removeMatchingHeaders(regex, headers) {
    var lastValue;
    for (var header in headers) {
      if (regex.test(header)) {
        lastValue = headers[header];
        delete headers[header];
      }
    }
    return lastValue === null || typeof lastValue === "undefined" ? undefined : String(lastValue).trim();
  }
  function createErrorType(code, message, baseClass) {
    function CustomError(properties) {
      if (isFunction2(Error.captureStackTrace)) {
        Error.captureStackTrace(this, this.constructor);
      }
      Object.assign(this, properties || {});
      this.code = code;
      this.message = this.cause ? message + ": " + this.cause.message : message;
    }
    CustomError.prototype = new (baseClass || Error);
    Object.defineProperties(CustomError.prototype, {
      constructor: {
        value: CustomError,
        enumerable: false
      },
      name: {
        value: "Error [" + code + "]",
        enumerable: false
      }
    });
    return CustomError;
  }
  function destroyRequest(request, error) {
    for (var event of events) {
      request.removeListener(event, eventHandlers[event]);
    }
    request.on("error", noop2);
    request.destroy(error);
  }
  function isSubdomain(subdomain, domain) {
    assert(isString2(subdomain) && isString2(domain));
    var dot = subdomain.length - domain.length - 1;
    return dot > 0 && subdomain[dot] === "." && subdomain.endsWith(domain);
  }
  function isString2(value) {
    return typeof value === "string" || value instanceof String;
  }
  function isFunction2(value) {
    return typeof value === "function";
  }
  function isBuffer2(value) {
    return typeof value === "object" && "length" in value;
  }
  function isURL(value) {
    return URL2 && value instanceof URL2;
  }
  module.exports = wrap({ http, https });
  module.exports.wrap = wrap;
});

// node_modules/bignumber.js/bignumber.js
var require_bignumber = __commonJS((exports, module) => {
  (function(globalObject) {
    var BigNumber, isNumeric = /^-?(?:\d+(?:\.\d*)?|\.\d+)(?:e[+-]?\d+)?$/i, mathceil = Math.ceil, mathfloor = Math.floor, bignumberError = "[BigNumber Error] ", tooManyDigits = bignumberError + "Number primitive has more than 15 significant digits: ", BASE = 100000000000000, LOG_BASE = 14, MAX_SAFE_INTEGER = 9007199254740991, POWS_TEN = [1, 10, 100, 1000, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 10000000000, 100000000000, 1000000000000, 10000000000000], SQRT_BASE = 1e7, MAX = 1e9;
    function clone(configObject) {
      var div, convertBase, parseNumeric, P2 = BigNumber2.prototype = { constructor: BigNumber2, toString: null, valueOf: null }, ONE = new BigNumber2(1), DECIMAL_PLACES = 20, ROUNDING_MODE = 4, TO_EXP_NEG = -7, TO_EXP_POS = 21, MIN_EXP = -1e7, MAX_EXP = 1e7, CRYPTO = false, MODULO_MODE = 1, POW_PRECISION = 0, FORMAT = {
        prefix: "",
        groupSize: 3,
        secondaryGroupSize: 0,
        groupSeparator: ",",
        decimalSeparator: ".",
        fractionGroupSize: 0,
        fractionGroupSeparator: " ",
        suffix: ""
      }, ALPHABET2 = "0123456789abcdefghijklmnopqrstuvwxyz", alphabetHasNormalDecimalDigits = true;
      function BigNumber2(v2, b2) {
        var alphabet, c, caseChanged, e, i, isNum, len, str, x = this;
        if (!(x instanceof BigNumber2))
          return new BigNumber2(v2, b2);
        if (b2 == null) {
          if (v2 && v2._isBigNumber === true) {
            x.s = v2.s;
            if (!v2.c || v2.e > MAX_EXP) {
              x.c = x.e = null;
            } else if (v2.e < MIN_EXP) {
              x.c = [x.e = 0];
            } else {
              x.e = v2.e;
              x.c = v2.c.slice();
            }
            return;
          }
          if ((isNum = typeof v2 == "number") && v2 * 0 == 0) {
            x.s = 1 / v2 < 0 ? (v2 = -v2, -1) : 1;
            if (v2 === ~~v2) {
              for (e = 0, i = v2;i >= 10; i /= 10, e++)
                ;
              if (e > MAX_EXP) {
                x.c = x.e = null;
              } else {
                x.e = e;
                x.c = [v2];
              }
              return;
            }
            str = String(v2);
          } else {
            if (!isNumeric.test(str = String(v2)))
              return parseNumeric(x, str, isNum);
            x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;
          }
          if ((e = str.indexOf(".")) > -1)
            str = str.replace(".", "");
          if ((i = str.search(/e/i)) > 0) {
            if (e < 0)
              e = i;
            e += +str.slice(i + 1);
            str = str.substring(0, i);
          } else if (e < 0) {
            e = str.length;
          }
        } else {
          intCheck(b2, 2, ALPHABET2.length, "Base");
          if (b2 == 10 && alphabetHasNormalDecimalDigits) {
            x = new BigNumber2(v2);
            return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);
          }
          str = String(v2);
          if (isNum = typeof v2 == "number") {
            if (v2 * 0 != 0)
              return parseNumeric(x, str, isNum, b2);
            x.s = 1 / v2 < 0 ? (str = str.slice(1), -1) : 1;
            if (BigNumber2.DEBUG && str.replace(/^0\.0*|\./, "").length > 15) {
              throw Error(tooManyDigits + v2);
            }
          } else {
            x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;
          }
          alphabet = ALPHABET2.slice(0, b2);
          e = i = 0;
          for (len = str.length;i < len; i++) {
            if (alphabet.indexOf(c = str.charAt(i)) < 0) {
              if (c == ".") {
                if (i > e) {
                  e = len;
                  continue;
                }
              } else if (!caseChanged) {
                if (str == str.toUpperCase() && (str = str.toLowerCase()) || str == str.toLowerCase() && (str = str.toUpperCase())) {
                  caseChanged = true;
                  i = -1;
                  e = 0;
                  continue;
                }
              }
              return parseNumeric(x, String(v2), isNum, b2);
            }
          }
          isNum = false;
          str = convertBase(str, b2, 10, x.s);
          if ((e = str.indexOf(".")) > -1)
            str = str.replace(".", "");
          else
            e = str.length;
        }
        for (i = 0;str.charCodeAt(i) === 48; i++)
          ;
        for (len = str.length;str.charCodeAt(--len) === 48; )
          ;
        if (str = str.slice(i, ++len)) {
          len -= i;
          if (isNum && BigNumber2.DEBUG && len > 15 && (v2 > MAX_SAFE_INTEGER || v2 !== mathfloor(v2))) {
            throw Error(tooManyDigits + x.s * v2);
          }
          if ((e = e - i - 1) > MAX_EXP) {
            x.c = x.e = null;
          } else if (e < MIN_EXP) {
            x.c = [x.e = 0];
          } else {
            x.e = e;
            x.c = [];
            i = (e + 1) % LOG_BASE;
            if (e < 0)
              i += LOG_BASE;
            if (i < len) {
              if (i)
                x.c.push(+str.slice(0, i));
              for (len -= LOG_BASE;i < len; ) {
                x.c.push(+str.slice(i, i += LOG_BASE));
              }
              i = LOG_BASE - (str = str.slice(i)).length;
            } else {
              i -= len;
            }
            for (;i--; str += "0")
              ;
            x.c.push(+str);
          }
        } else {
          x.c = [x.e = 0];
        }
      }
      BigNumber2.clone = clone;
      BigNumber2.ROUND_UP = 0;
      BigNumber2.ROUND_DOWN = 1;
      BigNumber2.ROUND_CEIL = 2;
      BigNumber2.ROUND_FLOOR = 3;
      BigNumber2.ROUND_HALF_UP = 4;
      BigNumber2.ROUND_HALF_DOWN = 5;
      BigNumber2.ROUND_HALF_EVEN = 6;
      BigNumber2.ROUND_HALF_CEIL = 7;
      BigNumber2.ROUND_HALF_FLOOR = 8;
      BigNumber2.EUCLID = 9;
      BigNumber2.config = BigNumber2.set = function(obj) {
        var p2, v2;
        if (obj != null) {
          if (typeof obj == "object") {
            if (obj.hasOwnProperty(p2 = "DECIMAL_PLACES")) {
              v2 = obj[p2];
              intCheck(v2, 0, MAX, p2);
              DECIMAL_PLACES = v2;
            }
            if (obj.hasOwnProperty(p2 = "ROUNDING_MODE")) {
              v2 = obj[p2];
              intCheck(v2, 0, 8, p2);
              ROUNDING_MODE = v2;
            }
            if (obj.hasOwnProperty(p2 = "EXPONENTIAL_AT")) {
              v2 = obj[p2];
              if (v2 && v2.pop) {
                intCheck(v2[0], -MAX, 0, p2);
                intCheck(v2[1], 0, MAX, p2);
                TO_EXP_NEG = v2[0];
                TO_EXP_POS = v2[1];
              } else {
                intCheck(v2, -MAX, MAX, p2);
                TO_EXP_NEG = -(TO_EXP_POS = v2 < 0 ? -v2 : v2);
              }
            }
            if (obj.hasOwnProperty(p2 = "RANGE")) {
              v2 = obj[p2];
              if (v2 && v2.pop) {
                intCheck(v2[0], -MAX, -1, p2);
                intCheck(v2[1], 1, MAX, p2);
                MIN_EXP = v2[0];
                MAX_EXP = v2[1];
              } else {
                intCheck(v2, -MAX, MAX, p2);
                if (v2) {
                  MIN_EXP = -(MAX_EXP = v2 < 0 ? -v2 : v2);
                } else {
                  throw Error(bignumberError + p2 + " cannot be zero: " + v2);
                }
              }
            }
            if (obj.hasOwnProperty(p2 = "CRYPTO")) {
              v2 = obj[p2];
              if (v2 === !!v2) {
                if (v2) {
                  if (typeof crypto != "undefined" && crypto && (crypto.getRandomValues || crypto.randomBytes)) {
                    CRYPTO = v2;
                  } else {
                    CRYPTO = !v2;
                    throw Error(bignumberError + "crypto unavailable");
                  }
                } else {
                  CRYPTO = v2;
                }
              } else {
                throw Error(bignumberError + p2 + " not true or false: " + v2);
              }
            }
            if (obj.hasOwnProperty(p2 = "MODULO_MODE")) {
              v2 = obj[p2];
              intCheck(v2, 0, 9, p2);
              MODULO_MODE = v2;
            }
            if (obj.hasOwnProperty(p2 = "POW_PRECISION")) {
              v2 = obj[p2];
              intCheck(v2, 0, MAX, p2);
              POW_PRECISION = v2;
            }
            if (obj.hasOwnProperty(p2 = "FORMAT")) {
              v2 = obj[p2];
              if (typeof v2 == "object")
                FORMAT = v2;
              else
                throw Error(bignumberError + p2 + " not an object: " + v2);
            }
            if (obj.hasOwnProperty(p2 = "ALPHABET")) {
              v2 = obj[p2];
              if (typeof v2 == "string" && !/^.?$|[+\-.\s]|(.).*\1/.test(v2)) {
                alphabetHasNormalDecimalDigits = v2.slice(0, 10) == "0123456789";
                ALPHABET2 = v2;
              } else {
                throw Error(bignumberError + p2 + " invalid: " + v2);
              }
            }
          } else {
            throw Error(bignumberError + "Object expected: " + obj);
          }
        }
        return {
          DECIMAL_PLACES,
          ROUNDING_MODE,
          EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],
          RANGE: [MIN_EXP, MAX_EXP],
          CRYPTO,
          MODULO_MODE,
          POW_PRECISION,
          FORMAT,
          ALPHABET: ALPHABET2
        };
      };
      BigNumber2.isBigNumber = function(v2) {
        if (!v2 || v2._isBigNumber !== true)
          return false;
        if (!BigNumber2.DEBUG)
          return true;
        var i, n, c = v2.c, e = v2.e, s = v2.s;
        out:
          if ({}.toString.call(c) == "[object Array]") {
            if ((s === 1 || s === -1) && e >= -MAX && e <= MAX && e === mathfloor(e)) {
              if (c[0] === 0) {
                if (e === 0 && c.length === 1)
                  return true;
                break out;
              }
              i = (e + 1) % LOG_BASE;
              if (i < 1)
                i += LOG_BASE;
              if (String(c[0]).length == i) {
                for (i = 0;i < c.length; i++) {
                  n = c[i];
                  if (n < 0 || n >= BASE || n !== mathfloor(n))
                    break out;
                }
                if (n !== 0)
                  return true;
              }
            }
          } else if (c === null && e === null && (s === null || s === 1 || s === -1)) {
            return true;
          }
        throw Error(bignumberError + "Invalid BigNumber: " + v2);
      };
      BigNumber2.maximum = BigNumber2.max = function() {
        return maxOrMin(arguments, -1);
      };
      BigNumber2.minimum = BigNumber2.min = function() {
        return maxOrMin(arguments, 1);
      };
      BigNumber2.random = function() {
        var pow2_53 = 9007199254740992;
        var random53bitInt = Math.random() * pow2_53 & 2097151 ? function() {
          return mathfloor(Math.random() * pow2_53);
        } : function() {
          return (Math.random() * 1073741824 | 0) * 8388608 + (Math.random() * 8388608 | 0);
        };
        return function(dp) {
          var a, b2, e, k, v2, i = 0, c = [], rand = new BigNumber2(ONE);
          if (dp == null)
            dp = DECIMAL_PLACES;
          else
            intCheck(dp, 0, MAX);
          k = mathceil(dp / LOG_BASE);
          if (CRYPTO) {
            if (crypto.getRandomValues) {
              a = crypto.getRandomValues(new Uint32Array(k *= 2));
              for (;i < k; ) {
                v2 = a[i] * 131072 + (a[i + 1] >>> 11);
                if (v2 >= 9000000000000000) {
                  b2 = crypto.getRandomValues(new Uint32Array(2));
                  a[i] = b2[0];
                  a[i + 1] = b2[1];
                } else {
                  c.push(v2 % 100000000000000);
                  i += 2;
                }
              }
              i = k / 2;
            } else if (crypto.randomBytes) {
              a = crypto.randomBytes(k *= 7);
              for (;i < k; ) {
                v2 = (a[i] & 31) * 281474976710656 + a[i + 1] * 1099511627776 + a[i + 2] * 4294967296 + a[i + 3] * 16777216 + (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];
                if (v2 >= 9000000000000000) {
                  crypto.randomBytes(7).copy(a, i);
                } else {
                  c.push(v2 % 100000000000000);
                  i += 7;
                }
              }
              i = k / 7;
            } else {
              CRYPTO = false;
              throw Error(bignumberError + "crypto unavailable");
            }
          }
          if (!CRYPTO) {
            for (;i < k; ) {
              v2 = random53bitInt();
              if (v2 < 9000000000000000)
                c[i++] = v2 % 100000000000000;
            }
          }
          k = c[--i];
          dp %= LOG_BASE;
          if (k && dp) {
            v2 = POWS_TEN[LOG_BASE - dp];
            c[i] = mathfloor(k / v2) * v2;
          }
          for (;c[i] === 0; c.pop(), i--)
            ;
          if (i < 0) {
            c = [e = 0];
          } else {
            for (e = -1;c[0] === 0; c.splice(0, 1), e -= LOG_BASE)
              ;
            for (i = 1, v2 = c[0];v2 >= 10; v2 /= 10, i++)
              ;
            if (i < LOG_BASE)
              e -= LOG_BASE - i;
          }
          rand.e = e;
          rand.c = c;
          return rand;
        };
      }();
      BigNumber2.sum = function() {
        var i = 1, args = arguments, sum = new BigNumber2(args[0]);
        for (;i < args.length; )
          sum = sum.plus(args[i++]);
        return sum;
      };
      convertBase = function() {
        var decimal = "0123456789";
        function toBaseOut(str, baseIn, baseOut, alphabet) {
          var j2, arr = [0], arrL, i = 0, len = str.length;
          for (;i < len; ) {
            for (arrL = arr.length;arrL--; arr[arrL] *= baseIn)
              ;
            arr[0] += alphabet.indexOf(str.charAt(i++));
            for (j2 = 0;j2 < arr.length; j2++) {
              if (arr[j2] > baseOut - 1) {
                if (arr[j2 + 1] == null)
                  arr[j2 + 1] = 0;
                arr[j2 + 1] += arr[j2] / baseOut | 0;
                arr[j2] %= baseOut;
              }
            }
          }
          return arr.reverse();
        }
        return function(str, baseIn, baseOut, sign, callerIsToString) {
          var alphabet, d, e, k, r, x, xc, y, i = str.indexOf("."), dp = DECIMAL_PLACES, rm = ROUNDING_MODE;
          if (i >= 0) {
            k = POW_PRECISION;
            POW_PRECISION = 0;
            str = str.replace(".", "");
            y = new BigNumber2(baseIn);
            x = y.pow(str.length - i);
            POW_PRECISION = k;
            y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e, "0"), 10, baseOut, decimal);
            y.e = y.c.length;
          }
          xc = toBaseOut(str, baseIn, baseOut, callerIsToString ? (alphabet = ALPHABET2, decimal) : (alphabet = decimal, ALPHABET2));
          e = k = xc.length;
          for (;xc[--k] == 0; xc.pop())
            ;
          if (!xc[0])
            return alphabet.charAt(0);
          if (i < 0) {
            --e;
          } else {
            x.c = xc;
            x.e = e;
            x.s = sign;
            x = div(x, y, dp, rm, baseOut);
            xc = x.c;
            r = x.r;
            e = x.e;
          }
          d = e + dp + 1;
          i = xc[d];
          k = baseOut / 2;
          r = r || d < 0 || xc[d + 1] != null;
          r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2)) : i > k || i == k && (rm == 4 || r || rm == 6 && xc[d - 1] & 1 || rm == (x.s < 0 ? 8 : 7));
          if (d < 1 || !xc[0]) {
            str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0)) : alphabet.charAt(0);
          } else {
            xc.length = d;
            if (r) {
              for (--baseOut;++xc[--d] > baseOut; ) {
                xc[d] = 0;
                if (!d) {
                  ++e;
                  xc = [1].concat(xc);
                }
              }
            }
            for (k = xc.length;!xc[--k]; )
              ;
            for (i = 0, str = "";i <= k; str += alphabet.charAt(xc[i++]))
              ;
            str = toFixedPoint(str, e, alphabet.charAt(0));
          }
          return str;
        };
      }();
      div = function() {
        function multiply(x, k, base) {
          var m2, temp, xlo, xhi, carry = 0, i = x.length, klo = k % SQRT_BASE, khi = k / SQRT_BASE | 0;
          for (x = x.slice();i--; ) {
            xlo = x[i] % SQRT_BASE;
            xhi = x[i] / SQRT_BASE | 0;
            m2 = khi * xlo + xhi * klo;
            temp = klo * xlo + m2 % SQRT_BASE * SQRT_BASE + carry;
            carry = (temp / base | 0) + (m2 / SQRT_BASE | 0) + khi * xhi;
            x[i] = temp % base;
          }
          if (carry)
            x = [carry].concat(x);
          return x;
        }
        function compare2(a, b2, aL, bL) {
          var i, cmp;
          if (aL != bL) {
            cmp = aL > bL ? 1 : -1;
          } else {
            for (i = cmp = 0;i < aL; i++) {
              if (a[i] != b2[i]) {
                cmp = a[i] > b2[i] ? 1 : -1;
                break;
              }
            }
          }
          return cmp;
        }
        function subtract(a, b2, aL, base) {
          var i = 0;
          for (;aL--; ) {
            a[aL] -= i;
            i = a[aL] < b2[aL] ? 1 : 0;
            a[aL] = i * base + a[aL] - b2[aL];
          }
          for (;!a[0] && a.length > 1; a.splice(0, 1))
            ;
        }
        return function(x, y, dp, rm, base) {
          var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0, yL, yz, s = x.s == y.s ? 1 : -1, xc = x.c, yc = y.c;
          if (!xc || !xc[0] || !yc || !yc[0]) {
            return new BigNumber2(!x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN : xc && xc[0] == 0 || !yc ? s * 0 : s / 0);
          }
          q = new BigNumber2(s);
          qc = q.c = [];
          e = x.e - y.e;
          s = dp + e + 1;
          if (!base) {
            base = BASE;
            e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);
            s = s / LOG_BASE | 0;
          }
          for (i = 0;yc[i] == (xc[i] || 0); i++)
            ;
          if (yc[i] > (xc[i] || 0))
            e--;
          if (s < 0) {
            qc.push(1);
            more = true;
          } else {
            xL = xc.length;
            yL = yc.length;
            i = 0;
            s += 2;
            n = mathfloor(base / (yc[0] + 1));
            if (n > 1) {
              yc = multiply(yc, n, base);
              xc = multiply(xc, n, base);
              yL = yc.length;
              xL = xc.length;
            }
            xi = yL;
            rem = xc.slice(0, yL);
            remL = rem.length;
            for (;remL < yL; rem[remL++] = 0)
              ;
            yz = yc.slice();
            yz = [0].concat(yz);
            yc0 = yc[0];
            if (yc[1] >= base / 2)
              yc0++;
            do {
              n = 0;
              cmp = compare2(yc, rem, yL, remL);
              if (cmp < 0) {
                rem0 = rem[0];
                if (yL != remL)
                  rem0 = rem0 * base + (rem[1] || 0);
                n = mathfloor(rem0 / yc0);
                if (n > 1) {
                  if (n >= base)
                    n = base - 1;
                  prod = multiply(yc, n, base);
                  prodL = prod.length;
                  remL = rem.length;
                  while (compare2(prod, rem, prodL, remL) == 1) {
                    n--;
                    subtract(prod, yL < prodL ? yz : yc, prodL, base);
                    prodL = prod.length;
                    cmp = 1;
                  }
                } else {
                  if (n == 0) {
                    cmp = n = 1;
                  }
                  prod = yc.slice();
                  prodL = prod.length;
                }
                if (prodL < remL)
                  prod = [0].concat(prod);
                subtract(rem, prod, remL, base);
                remL = rem.length;
                if (cmp == -1) {
                  while (compare2(yc, rem, yL, remL) < 1) {
                    n++;
                    subtract(rem, yL < remL ? yz : yc, remL, base);
                    remL = rem.length;
                  }
                }
              } else if (cmp === 0) {
                n++;
                rem = [0];
              }
              qc[i++] = n;
              if (rem[0]) {
                rem[remL++] = xc[xi] || 0;
              } else {
                rem = [xc[xi]];
                remL = 1;
              }
            } while ((xi++ < xL || rem[0] != null) && s--);
            more = rem[0] != null;
            if (!qc[0])
              qc.splice(0, 1);
          }
          if (base == BASE) {
            for (i = 1, s = qc[0];s >= 10; s /= 10, i++)
              ;
            round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);
          } else {
            q.e = e;
            q.r = +more;
          }
          return q;
        };
      }();
      function format(n, i, rm, id) {
        var c0, e, ne, len, str;
        if (rm == null)
          rm = ROUNDING_MODE;
        else
          intCheck(rm, 0, 8);
        if (!n.c)
          return n.toString();
        c0 = n.c[0];
        ne = n.e;
        if (i == null) {
          str = coeffToString(n.c);
          str = id == 1 || id == 2 && (ne <= TO_EXP_NEG || ne >= TO_EXP_POS) ? toExponential(str, ne) : toFixedPoint(str, ne, "0");
        } else {
          n = round(new BigNumber2(n), i, rm);
          e = n.e;
          str = coeffToString(n.c);
          len = str.length;
          if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {
            for (;len < i; str += "0", len++)
              ;
            str = toExponential(str, e);
          } else {
            i -= ne;
            str = toFixedPoint(str, e, "0");
            if (e + 1 > len) {
              if (--i > 0)
                for (str += ".";i--; str += "0")
                  ;
            } else {
              i += e - len;
              if (i > 0) {
                if (e + 1 == len)
                  str += ".";
                for (;i--; str += "0")
                  ;
              }
            }
          }
        }
        return n.s < 0 && c0 ? "-" + str : str;
      }
      function maxOrMin(args, n) {
        var k, y, i = 1, x = new BigNumber2(args[0]);
        for (;i < args.length; i++) {
          y = new BigNumber2(args[i]);
          if (!y.s || (k = compare(x, y)) === n || k === 0 && x.s === n) {
            x = y;
          }
        }
        return x;
      }
      function normalise(n, c, e) {
        var i = 1, j2 = c.length;
        for (;!c[--j2]; c.pop())
          ;
        for (j2 = c[0];j2 >= 10; j2 /= 10, i++)
          ;
        if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {
          n.c = n.e = null;
        } else if (e < MIN_EXP) {
          n.c = [n.e = 0];
        } else {
          n.e = e;
          n.c = c;
        }
        return n;
      }
      parseNumeric = function() {
        var basePrefix = /^(-?)0([xbo])(?=\w[\w.]*$)/i, dotAfter = /^([^.]+)\.$/, dotBefore = /^\.([^.]+)$/, isInfinityOrNaN = /^-?(Infinity|NaN)$/, whitespaceOrPlus = /^\s*\+(?=[\w.])|^\s+|\s+$/g;
        return function(x, str, isNum, b2) {
          var base, s = isNum ? str : str.replace(whitespaceOrPlus, "");
          if (isInfinityOrNaN.test(s)) {
            x.s = isNaN(s) ? null : s < 0 ? -1 : 1;
          } else {
            if (!isNum) {
              s = s.replace(basePrefix, function(m2, p1, p2) {
                base = (p2 = p2.toLowerCase()) == "x" ? 16 : p2 == "b" ? 2 : 8;
                return !b2 || b2 == base ? p1 : m2;
              });
              if (b2) {
                base = b2;
                s = s.replace(dotAfter, "$1").replace(dotBefore, "0.$1");
              }
              if (str != s)
                return new BigNumber2(s, base);
            }
            if (BigNumber2.DEBUG) {
              throw Error(bignumberError + "Not a" + (b2 ? " base " + b2 : "") + " number: " + str);
            }
            x.s = null;
          }
          x.c = x.e = null;
        };
      }();
      function round(x, sd, rm, r) {
        var d, i, j2, k, n, ni, rd, xc = x.c, pows10 = POWS_TEN;
        if (xc) {
          out: {
            for (d = 1, k = xc[0];k >= 10; k /= 10, d++)
              ;
            i = sd - d;
            if (i < 0) {
              i += LOG_BASE;
              j2 = sd;
              n = xc[ni = 0];
              rd = mathfloor(n / pows10[d - j2 - 1] % 10);
            } else {
              ni = mathceil((i + 1) / LOG_BASE);
              if (ni >= xc.length) {
                if (r) {
                  for (;xc.length <= ni; xc.push(0))
                    ;
                  n = rd = 0;
                  d = 1;
                  i %= LOG_BASE;
                  j2 = i - LOG_BASE + 1;
                } else {
                  break out;
                }
              } else {
                n = k = xc[ni];
                for (d = 1;k >= 10; k /= 10, d++)
                  ;
                i %= LOG_BASE;
                j2 = i - LOG_BASE + d;
                rd = j2 < 0 ? 0 : mathfloor(n / pows10[d - j2 - 1] % 10);
              }
            }
            r = r || sd < 0 || xc[ni + 1] != null || (j2 < 0 ? n : n % pows10[d - j2 - 1]);
            r = rm < 4 ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2)) : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 && (i > 0 ? j2 > 0 ? n / pows10[d - j2] : 0 : xc[ni - 1]) % 10 & 1 || rm == (x.s < 0 ? 8 : 7));
            if (sd < 1 || !xc[0]) {
              xc.length = 0;
              if (r) {
                sd -= x.e + 1;
                xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];
                x.e = -sd || 0;
              } else {
                xc[0] = x.e = 0;
              }
              return x;
            }
            if (i == 0) {
              xc.length = ni;
              k = 1;
              ni--;
            } else {
              xc.length = ni + 1;
              k = pows10[LOG_BASE - i];
              xc[ni] = j2 > 0 ? mathfloor(n / pows10[d - j2] % pows10[j2]) * k : 0;
            }
            if (r) {
              for (;; ) {
                if (ni == 0) {
                  for (i = 1, j2 = xc[0];j2 >= 10; j2 /= 10, i++)
                    ;
                  j2 = xc[0] += k;
                  for (k = 1;j2 >= 10; j2 /= 10, k++)
                    ;
                  if (i != k) {
                    x.e++;
                    if (xc[0] == BASE)
                      xc[0] = 1;
                  }
                  break;
                } else {
                  xc[ni] += k;
                  if (xc[ni] != BASE)
                    break;
                  xc[ni--] = 0;
                  k = 1;
                }
              }
            }
            for (i = xc.length;xc[--i] === 0; xc.pop())
              ;
          }
          if (x.e > MAX_EXP) {
            x.c = x.e = null;
          } else if (x.e < MIN_EXP) {
            x.c = [x.e = 0];
          }
        }
        return x;
      }
      function valueOf(n) {
        var str, e = n.e;
        if (e === null)
          return n.toString();
        str = coeffToString(n.c);
        str = e <= TO_EXP_NEG || e >= TO_EXP_POS ? toExponential(str, e) : toFixedPoint(str, e, "0");
        return n.s < 0 ? "-" + str : str;
      }
      P2.absoluteValue = P2.abs = function() {
        var x = new BigNumber2(this);
        if (x.s < 0)
          x.s = 1;
        return x;
      };
      P2.comparedTo = function(y, b2) {
        return compare(this, new BigNumber2(y, b2));
      };
      P2.decimalPlaces = P2.dp = function(dp, rm) {
        var c, n, v2, x = this;
        if (dp != null) {
          intCheck(dp, 0, MAX);
          if (rm == null)
            rm = ROUNDING_MODE;
          else
            intCheck(rm, 0, 8);
          return round(new BigNumber2(x), dp + x.e + 1, rm);
        }
        if (!(c = x.c))
          return null;
        n = ((v2 = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;
        if (v2 = c[v2])
          for (;v2 % 10 == 0; v2 /= 10, n--)
            ;
        if (n < 0)
          n = 0;
        return n;
      };
      P2.dividedBy = P2.div = function(y, b2) {
        return div(this, new BigNumber2(y, b2), DECIMAL_PLACES, ROUNDING_MODE);
      };
      P2.dividedToIntegerBy = P2.idiv = function(y, b2) {
        return div(this, new BigNumber2(y, b2), 0, 1);
      };
      P2.exponentiatedBy = P2.pow = function(n, m2) {
        var half, isModExp, i, k, more, nIsBig, nIsNeg, nIsOdd, y, x = this;
        n = new BigNumber2(n);
        if (n.c && !n.isInteger()) {
          throw Error(bignumberError + "Exponent not an integer: " + valueOf(n));
        }
        if (m2 != null)
          m2 = new BigNumber2(m2);
        nIsBig = n.e > 14;
        if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {
          y = new BigNumber2(Math.pow(+valueOf(x), nIsBig ? n.s * (2 - isOdd(n)) : +valueOf(n)));
          return m2 ? y.mod(m2) : y;
        }
        nIsNeg = n.s < 0;
        if (m2) {
          if (m2.c ? !m2.c[0] : !m2.s)
            return new BigNumber2(NaN);
          isModExp = !nIsNeg && x.isInteger() && m2.isInteger();
          if (isModExp)
            x = x.mod(m2);
        } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0 ? x.c[0] > 1 || nIsBig && x.c[1] >= 240000000 : x.c[0] < 80000000000000 || nIsBig && x.c[0] <= 99999750000000))) {
          k = x.s < 0 && isOdd(n) ? -0 : 0;
          if (x.e > -1)
            k = 1 / k;
          return new BigNumber2(nIsNeg ? 1 / k : k);
        } else if (POW_PRECISION) {
          k = mathceil(POW_PRECISION / LOG_BASE + 2);
        }
        if (nIsBig) {
          half = new BigNumber2(0.5);
          if (nIsNeg)
            n.s = 1;
          nIsOdd = isOdd(n);
        } else {
          i = Math.abs(+valueOf(n));
          nIsOdd = i % 2;
        }
        y = new BigNumber2(ONE);
        for (;; ) {
          if (nIsOdd) {
            y = y.times(x);
            if (!y.c)
              break;
            if (k) {
              if (y.c.length > k)
                y.c.length = k;
            } else if (isModExp) {
              y = y.mod(m2);
            }
          }
          if (i) {
            i = mathfloor(i / 2);
            if (i === 0)
              break;
            nIsOdd = i % 2;
          } else {
            n = n.times(half);
            round(n, n.e + 1, 1);
            if (n.e > 14) {
              nIsOdd = isOdd(n);
            } else {
              i = +valueOf(n);
              if (i === 0)
                break;
              nIsOdd = i % 2;
            }
          }
          x = x.times(x);
          if (k) {
            if (x.c && x.c.length > k)
              x.c.length = k;
          } else if (isModExp) {
            x = x.mod(m2);
          }
        }
        if (isModExp)
          return y;
        if (nIsNeg)
          y = ONE.div(y);
        return m2 ? y.mod(m2) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;
      };
      P2.integerValue = function(rm) {
        var n = new BigNumber2(this);
        if (rm == null)
          rm = ROUNDING_MODE;
        else
          intCheck(rm, 0, 8);
        return round(n, n.e + 1, rm);
      };
      P2.isEqualTo = P2.eq = function(y, b2) {
        return compare(this, new BigNumber2(y, b2)) === 0;
      };
      P2.isFinite = function() {
        return !!this.c;
      };
      P2.isGreaterThan = P2.gt = function(y, b2) {
        return compare(this, new BigNumber2(y, b2)) > 0;
      };
      P2.isGreaterThanOrEqualTo = P2.gte = function(y, b2) {
        return (b2 = compare(this, new BigNumber2(y, b2))) === 1 || b2 === 0;
      };
      P2.isInteger = function() {
        return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;
      };
      P2.isLessThan = P2.lt = function(y, b2) {
        return compare(this, new BigNumber2(y, b2)) < 0;
      };
      P2.isLessThanOrEqualTo = P2.lte = function(y, b2) {
        return (b2 = compare(this, new BigNumber2(y, b2))) === -1 || b2 === 0;
      };
      P2.isNaN = function() {
        return !this.s;
      };
      P2.isNegative = function() {
        return this.s < 0;
      };
      P2.isPositive = function() {
        return this.s > 0;
      };
      P2.isZero = function() {
        return !!this.c && this.c[0] == 0;
      };
      P2.minus = function(y, b2) {
        var i, j2, t, xLTy, x = this, a = x.s;
        y = new BigNumber2(y, b2);
        b2 = y.s;
        if (!a || !b2)
          return new BigNumber2(NaN);
        if (a != b2) {
          y.s = -b2;
          return x.plus(y);
        }
        var xe = x.e / LOG_BASE, ye = y.e / LOG_BASE, xc = x.c, yc = y.c;
        if (!xe || !ye) {
          if (!xc || !yc)
            return xc ? (y.s = -b2, y) : new BigNumber2(yc ? x : NaN);
          if (!xc[0] || !yc[0]) {
            return yc[0] ? (y.s = -b2, y) : new BigNumber2(xc[0] ? x : ROUNDING_MODE == 3 ? -0 : 0);
          }
        }
        xe = bitFloor(xe);
        ye = bitFloor(ye);
        xc = xc.slice();
        if (a = xe - ye) {
          if (xLTy = a < 0) {
            a = -a;
            t = xc;
          } else {
            ye = xe;
            t = yc;
          }
          t.reverse();
          for (b2 = a;b2--; t.push(0))
            ;
          t.reverse();
        } else {
          j2 = (xLTy = (a = xc.length) < (b2 = yc.length)) ? a : b2;
          for (a = b2 = 0;b2 < j2; b2++) {
            if (xc[b2] != yc[b2]) {
              xLTy = xc[b2] < yc[b2];
              break;
            }
          }
        }
        if (xLTy) {
          t = xc;
          xc = yc;
          yc = t;
          y.s = -y.s;
        }
        b2 = (j2 = yc.length) - (i = xc.length);
        if (b2 > 0)
          for (;b2--; xc[i++] = 0)
            ;
        b2 = BASE - 1;
        for (;j2 > a; ) {
          if (xc[--j2] < yc[j2]) {
            for (i = j2;i && !xc[--i]; xc[i] = b2)
              ;
            --xc[i];
            xc[j2] += BASE;
          }
          xc[j2] -= yc[j2];
        }
        for (;xc[0] == 0; xc.splice(0, 1), --ye)
          ;
        if (!xc[0]) {
          y.s = ROUNDING_MODE == 3 ? -1 : 1;
          y.c = [y.e = 0];
          return y;
        }
        return normalise(y, xc, ye);
      };
      P2.modulo = P2.mod = function(y, b2) {
        var q, s, x = this;
        y = new BigNumber2(y, b2);
        if (!x.c || !y.s || y.c && !y.c[0]) {
          return new BigNumber2(NaN);
        } else if (!y.c || x.c && !x.c[0]) {
          return new BigNumber2(x);
        }
        if (MODULO_MODE == 9) {
          s = y.s;
          y.s = 1;
          q = div(x, y, 0, 3);
          y.s = s;
          q.s *= s;
        } else {
          q = div(x, y, 0, MODULO_MODE);
        }
        y = x.minus(q.times(y));
        if (!y.c[0] && MODULO_MODE == 1)
          y.s = x.s;
        return y;
      };
      P2.multipliedBy = P2.times = function(y, b2) {
        var c, e, i, j2, k, m2, xcL, xlo, xhi, ycL, ylo, yhi, zc, base, sqrtBase, x = this, xc = x.c, yc = (y = new BigNumber2(y, b2)).c;
        if (!xc || !yc || !xc[0] || !yc[0]) {
          if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {
            y.c = y.e = y.s = null;
          } else {
            y.s *= x.s;
            if (!xc || !yc) {
              y.c = y.e = null;
            } else {
              y.c = [0];
              y.e = 0;
            }
          }
          return y;
        }
        e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);
        y.s *= x.s;
        xcL = xc.length;
        ycL = yc.length;
        if (xcL < ycL) {
          zc = xc;
          xc = yc;
          yc = zc;
          i = xcL;
          xcL = ycL;
          ycL = i;
        }
        for (i = xcL + ycL, zc = [];i--; zc.push(0))
          ;
        base = BASE;
        sqrtBase = SQRT_BASE;
        for (i = ycL;--i >= 0; ) {
          c = 0;
          ylo = yc[i] % sqrtBase;
          yhi = yc[i] / sqrtBase | 0;
          for (k = xcL, j2 = i + k;j2 > i; ) {
            xlo = xc[--k] % sqrtBase;
            xhi = xc[k] / sqrtBase | 0;
            m2 = yhi * xlo + xhi * ylo;
            xlo = ylo * xlo + m2 % sqrtBase * sqrtBase + zc[j2] + c;
            c = (xlo / base | 0) + (m2 / sqrtBase | 0) + yhi * xhi;
            zc[j2--] = xlo % base;
          }
          zc[j2] = c;
        }
        if (c) {
          ++e;
        } else {
          zc.splice(0, 1);
        }
        return normalise(y, zc, e);
      };
      P2.negated = function() {
        var x = new BigNumber2(this);
        x.s = -x.s || null;
        return x;
      };
      P2.plus = function(y, b2) {
        var t, x = this, a = x.s;
        y = new BigNumber2(y, b2);
        b2 = y.s;
        if (!a || !b2)
          return new BigNumber2(NaN);
        if (a != b2) {
          y.s = -b2;
          return x.minus(y);
        }
        var xe = x.e / LOG_BASE, ye = y.e / LOG_BASE, xc = x.c, yc = y.c;
        if (!xe || !ye) {
          if (!xc || !yc)
            return new BigNumber2(a / 0);
          if (!xc[0] || !yc[0])
            return yc[0] ? y : new BigNumber2(xc[0] ? x : a * 0);
        }
        xe = bitFloor(xe);
        ye = bitFloor(ye);
        xc = xc.slice();
        if (a = xe - ye) {
          if (a > 0) {
            ye = xe;
            t = yc;
          } else {
            a = -a;
            t = xc;
          }
          t.reverse();
          for (;a--; t.push(0))
            ;
          t.reverse();
        }
        a = xc.length;
        b2 = yc.length;
        if (a - b2 < 0) {
          t = yc;
          yc = xc;
          xc = t;
          b2 = a;
        }
        for (a = 0;b2; ) {
          a = (xc[--b2] = xc[b2] + yc[b2] + a) / BASE | 0;
          xc[b2] = BASE === xc[b2] ? 0 : xc[b2] % BASE;
        }
        if (a) {
          xc = [a].concat(xc);
          ++ye;
        }
        return normalise(y, xc, ye);
      };
      P2.precision = P2.sd = function(sd, rm) {
        var c, n, v2, x = this;
        if (sd != null && sd !== !!sd) {
          intCheck(sd, 1, MAX);
          if (rm == null)
            rm = ROUNDING_MODE;
          else
            intCheck(rm, 0, 8);
          return round(new BigNumber2(x), sd, rm);
        }
        if (!(c = x.c))
          return null;
        v2 = c.length - 1;
        n = v2 * LOG_BASE + 1;
        if (v2 = c[v2]) {
          for (;v2 % 10 == 0; v2 /= 10, n--)
            ;
          for (v2 = c[0];v2 >= 10; v2 /= 10, n++)
            ;
        }
        if (sd && x.e + 1 > n)
          n = x.e + 1;
        return n;
      };
      P2.shiftedBy = function(k) {
        intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);
        return this.times("1e" + k);
      };
      P2.squareRoot = P2.sqrt = function() {
        var m2, n, r, rep, t, x = this, c = x.c, s = x.s, e = x.e, dp = DECIMAL_PLACES + 4, half = new BigNumber2("0.5");
        if (s !== 1 || !c || !c[0]) {
          return new BigNumber2(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);
        }
        s = Math.sqrt(+valueOf(x));
        if (s == 0 || s == 1 / 0) {
          n = coeffToString(c);
          if ((n.length + e) % 2 == 0)
            n += "0";
          s = Math.sqrt(+n);
          e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);
          if (s == 1 / 0) {
            n = "5e" + e;
          } else {
            n = s.toExponential();
            n = n.slice(0, n.indexOf("e") + 1) + e;
          }
          r = new BigNumber2(n);
        } else {
          r = new BigNumber2(s + "");
        }
        if (r.c[0]) {
          e = r.e;
          s = e + dp;
          if (s < 3)
            s = 0;
          for (;; ) {
            t = r;
            r = half.times(t.plus(div(x, t, dp, 1)));
            if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r.c)).slice(0, s)) {
              if (r.e < e)
                --s;
              n = n.slice(s - 3, s + 1);
              if (n == "9999" || !rep && n == "4999") {
                if (!rep) {
                  round(t, t.e + DECIMAL_PLACES + 2, 0);
                  if (t.times(t).eq(x)) {
                    r = t;
                    break;
                  }
                }
                dp += 4;
                s += 4;
                rep = 1;
              } else {
                if (!+n || !+n.slice(1) && n.charAt(0) == "5") {
                  round(r, r.e + DECIMAL_PLACES + 2, 1);
                  m2 = !r.times(r).eq(x);
                }
                break;
              }
            }
          }
        }
        return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m2);
      };
      P2.toExponential = function(dp, rm) {
        if (dp != null) {
          intCheck(dp, 0, MAX);
          dp++;
        }
        return format(this, dp, rm, 1);
      };
      P2.toFixed = function(dp, rm) {
        if (dp != null) {
          intCheck(dp, 0, MAX);
          dp = dp + this.e + 1;
        }
        return format(this, dp, rm);
      };
      P2.toFormat = function(dp, rm, format2) {
        var str, x = this;
        if (format2 == null) {
          if (dp != null && rm && typeof rm == "object") {
            format2 = rm;
            rm = null;
          } else if (dp && typeof dp == "object") {
            format2 = dp;
            dp = rm = null;
          } else {
            format2 = FORMAT;
          }
        } else if (typeof format2 != "object") {
          throw Error(bignumberError + "Argument not an object: " + format2);
        }
        str = x.toFixed(dp, rm);
        if (x.c) {
          var i, arr = str.split("."), g1 = +format2.groupSize, g2 = +format2.secondaryGroupSize, groupSeparator = format2.groupSeparator || "", intPart = arr[0], fractionPart = arr[1], isNeg = x.s < 0, intDigits = isNeg ? intPart.slice(1) : intPart, len = intDigits.length;
          if (g2) {
            i = g1;
            g1 = g2;
            g2 = i;
            len -= i;
          }
          if (g1 > 0 && len > 0) {
            i = len % g1 || g1;
            intPart = intDigits.substr(0, i);
            for (;i < len; i += g1)
              intPart += groupSeparator + intDigits.substr(i, g1);
            if (g2 > 0)
              intPart += groupSeparator + intDigits.slice(i);
            if (isNeg)
              intPart = "-" + intPart;
          }
          str = fractionPart ? intPart + (format2.decimalSeparator || "") + ((g2 = +format2.fractionGroupSize) ? fractionPart.replace(new RegExp("\\d{" + g2 + "}\\B", "g"), "$&" + (format2.fractionGroupSeparator || "")) : fractionPart) : intPart;
        }
        return (format2.prefix || "") + str + (format2.suffix || "");
      };
      P2.toFraction = function(md) {
        var d, d0, d1, d2, e, exp, n, n0, n1, q, r, s, x = this, xc = x.c;
        if (md != null) {
          n = new BigNumber2(md);
          if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {
            throw Error(bignumberError + "Argument " + (n.isInteger() ? "out of range: " : "not an integer: ") + valueOf(n));
          }
        }
        if (!xc)
          return new BigNumber2(x);
        d = new BigNumber2(ONE);
        n1 = d0 = new BigNumber2(ONE);
        d1 = n0 = new BigNumber2(ONE);
        s = coeffToString(xc);
        e = d.e = s.length - x.e - 1;
        d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];
        md = !md || n.comparedTo(d) > 0 ? e > 0 ? d : n1 : n;
        exp = MAX_EXP;
        MAX_EXP = 1 / 0;
        n = new BigNumber2(s);
        n0.c[0] = 0;
        for (;; ) {
          q = div(n, d, 0, 1);
          d2 = d0.plus(q.times(d1));
          if (d2.comparedTo(md) == 1)
            break;
          d0 = d1;
          d1 = d2;
          n1 = n0.plus(q.times(d2 = n1));
          n0 = d2;
          d = n.minus(q.times(d2 = d));
          n = d2;
        }
        d2 = div(md.minus(d0), d1, 0, 1);
        n0 = n0.plus(d2.times(n1));
        d0 = d0.plus(d2.times(d1));
        n0.s = n1.s = x.s;
        e = e * 2;
        r = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1 ? [n1, d1] : [n0, d0];
        MAX_EXP = exp;
        return r;
      };
      P2.toNumber = function() {
        return +valueOf(this);
      };
      P2.toPrecision = function(sd, rm) {
        if (sd != null)
          intCheck(sd, 1, MAX);
        return format(this, sd, rm, 2);
      };
      P2.toString = function(b2) {
        var str, n = this, s = n.s, e = n.e;
        if (e === null) {
          if (s) {
            str = "Infinity";
            if (s < 0)
              str = "-" + str;
          } else {
            str = "NaN";
          }
        } else {
          if (b2 == null) {
            str = e <= TO_EXP_NEG || e >= TO_EXP_POS ? toExponential(coeffToString(n.c), e) : toFixedPoint(coeffToString(n.c), e, "0");
          } else if (b2 === 10 && alphabetHasNormalDecimalDigits) {
            n = round(new BigNumber2(n), DECIMAL_PLACES + e + 1, ROUNDING_MODE);
            str = toFixedPoint(coeffToString(n.c), n.e, "0");
          } else {
            intCheck(b2, 2, ALPHABET2.length, "Base");
            str = convertBase(toFixedPoint(coeffToString(n.c), e, "0"), 10, b2, s, true);
          }
          if (s < 0 && n.c[0])
            str = "-" + str;
        }
        return str;
      };
      P2.valueOf = P2.toJSON = function() {
        return valueOf(this);
      };
      P2._isBigNumber = true;
      if (configObject != null)
        BigNumber2.set(configObject);
      return BigNumber2;
    }
    function bitFloor(n) {
      var i = n | 0;
      return n > 0 || n === i ? i : i - 1;
    }
    function coeffToString(a) {
      var s, z, i = 1, j2 = a.length, r = a[0] + "";
      for (;i < j2; ) {
        s = a[i++] + "";
        z = LOG_BASE - s.length;
        for (;z--; s = "0" + s)
          ;
        r += s;
      }
      for (j2 = r.length;r.charCodeAt(--j2) === 48; )
        ;
      return r.slice(0, j2 + 1 || 1);
    }
    function compare(x, y) {
      var a, b2, xc = x.c, yc = y.c, i = x.s, j2 = y.s, k = x.e, l = y.e;
      if (!i || !j2)
        return null;
      a = xc && !xc[0];
      b2 = yc && !yc[0];
      if (a || b2)
        return a ? b2 ? 0 : -j2 : i;
      if (i != j2)
        return i;
      a = i < 0;
      b2 = k == l;
      if (!xc || !yc)
        return b2 ? 0 : !xc ^ a ? 1 : -1;
      if (!b2)
        return k > l ^ a ? 1 : -1;
      j2 = (k = xc.length) < (l = yc.length) ? k : l;
      for (i = 0;i < j2; i++)
        if (xc[i] != yc[i])
          return xc[i] > yc[i] ^ a ? 1 : -1;
      return k == l ? 0 : k > l ^ a ? 1 : -1;
    }
    function intCheck(n, min, max, name17) {
      if (n < min || n > max || n !== mathfloor(n)) {
        throw Error(bignumberError + (name17 || "Argument") + (typeof n == "number" ? n < min || n > max ? " out of range: " : " not an integer: " : " not a primitive number: ") + String(n));
      }
    }
    function isOdd(n) {
      var k = n.c.length - 1;
      return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;
    }
    function toExponential(str, e) {
      return (str.length > 1 ? str.charAt(0) + "." + str.slice(1) : str) + (e < 0 ? "e" : "e+") + e;
    }
    function toFixedPoint(str, e, z) {
      var len, zs;
      if (e < 0) {
        for (zs = z + ".";++e; zs += z)
          ;
        str = zs + str;
      } else {
        len = str.length;
        if (++e > len) {
          for (zs = z, e -= len;--e; zs += z)
            ;
          str += zs;
        } else if (e < len) {
          str = str.slice(0, e) + "." + str.slice(e);
        }
      }
      return str;
    }
    BigNumber = clone();
    BigNumber["default"] = BigNumber.BigNumber = BigNumber;
    if (typeof define == "function" && define.amd) {
      define(function() {
        return BigNumber;
      });
    } else if (typeof module != "undefined" && module.exports) {
      module.exports = BigNumber;
    } else {
      if (!globalObject) {
        globalObject = typeof self != "undefined" && self ? self : window;
      }
      globalObject.BigNumber = BigNumber;
    }
  })(exports);
});

// node_modules/json-bigint/lib/stringify.js
var require_stringify = __commonJS((exports, module) => {
  var BigNumber = require_bignumber();
  var JSON2 = exports;
  (function() {
    function f(n) {
      return n < 10 ? "0" + n : n;
    }
    var cx = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g, escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g, gap, indent, meta = {
      "\b": "\\b",
      "\t": "\\t",
      "\n": "\\n",
      "\f": "\\f",
      "\r": "\\r",
      '"': "\\\"",
      "\\": "\\\\"
    }, rep;
    function quote(string2) {
      escapable.lastIndex = 0;
      return escapable.test(string2) ? '"' + string2.replace(escapable, function(a) {
        var c = meta[a];
        return typeof c === "string" ? c : "\\u" + ("0000" + a.charCodeAt(0).toString(16)).slice(-4);
      }) + '"' : '"' + string2 + '"';
    }
    function str(key, holder) {
      var i, k, v2, length, mind = gap, partial, value = holder[key], isBigNumber = value != null && (value instanceof BigNumber || BigNumber.isBigNumber(value));
      if (value && typeof value === "object" && typeof value.toJSON === "function") {
        value = value.toJSON(key);
      }
      if (typeof rep === "function") {
        value = rep.call(holder, key, value);
      }
      switch (typeof value) {
        case "string":
          if (isBigNumber) {
            return value;
          } else {
            return quote(value);
          }
        case "number":
          return isFinite(value) ? String(value) : "null";
        case "boolean":
        case "null":
        case "bigint":
          return String(value);
        case "object":
          if (!value) {
            return "null";
          }
          gap += indent;
          partial = [];
          if (Object.prototype.toString.apply(value) === "[object Array]") {
            length = value.length;
            for (i = 0;i < length; i += 1) {
              partial[i] = str(i, value) || "null";
            }
            v2 = partial.length === 0 ? "[]" : gap ? `[
` + gap + partial.join(`,
` + gap) + `
` + mind + "]" : "[" + partial.join(",") + "]";
            gap = mind;
            return v2;
          }
          if (rep && typeof rep === "object") {
            length = rep.length;
            for (i = 0;i < length; i += 1) {
              if (typeof rep[i] === "string") {
                k = rep[i];
                v2 = str(k, value);
                if (v2) {
                  partial.push(quote(k) + (gap ? ": " : ":") + v2);
                }
              }
            }
          } else {
            Object.keys(value).forEach(function(k2) {
              var v3 = str(k2, value);
              if (v3) {
                partial.push(quote(k2) + (gap ? ": " : ":") + v3);
              }
            });
          }
          v2 = partial.length === 0 ? "{}" : gap ? `{
` + gap + partial.join(`,
` + gap) + `
` + mind + "}" : "{" + partial.join(",") + "}";
          gap = mind;
          return v2;
      }
    }
    if (typeof JSON2.stringify !== "function") {
      JSON2.stringify = function(value, replacer, space) {
        var i;
        gap = "";
        indent = "";
        if (typeof space === "number") {
          for (i = 0;i < space; i += 1) {
            indent += " ";
          }
        } else if (typeof space === "string") {
          indent = space;
        }
        rep = replacer;
        if (replacer && typeof replacer !== "function" && (typeof replacer !== "object" || typeof replacer.length !== "number")) {
          throw new Error("JSON.stringify");
        }
        return str("", { "": value });
      };
    }
  })();
});

// node_modules/json-bigint/lib/parse.js
var require_parse = __commonJS((exports, module) => {
  var BigNumber = null;
  var suspectProtoRx = /(?:_|\\u005[Ff])(?:_|\\u005[Ff])(?:p|\\u0070)(?:r|\\u0072)(?:o|\\u006[Ff])(?:t|\\u0074)(?:o|\\u006[Ff])(?:_|\\u005[Ff])(?:_|\\u005[Ff])/;
  var suspectConstructorRx = /(?:c|\\u0063)(?:o|\\u006[Ff])(?:n|\\u006[Ee])(?:s|\\u0073)(?:t|\\u0074)(?:r|\\u0072)(?:u|\\u0075)(?:c|\\u0063)(?:t|\\u0074)(?:o|\\u006[Ff])(?:r|\\u0072)/;
  var json_parse = function(options) {
    var _options = {
      strict: false,
      storeAsString: false,
      alwaysParseAsBig: false,
      useNativeBigInt: false,
      protoAction: "error",
      constructorAction: "error"
    };
    if (options !== undefined && options !== null) {
      if (options.strict === true) {
        _options.strict = true;
      }
      if (options.storeAsString === true) {
        _options.storeAsString = true;
      }
      _options.alwaysParseAsBig = options.alwaysParseAsBig === true ? options.alwaysParseAsBig : false;
      _options.useNativeBigInt = options.useNativeBigInt === true ? options.useNativeBigInt : false;
      if (typeof options.constructorAction !== "undefined") {
        if (options.constructorAction === "error" || options.constructorAction === "ignore" || options.constructorAction === "preserve") {
          _options.constructorAction = options.constructorAction;
        } else {
          throw new Error(`Incorrect value for constructorAction option, must be "error", "ignore" or undefined but passed ${options.constructorAction}`);
        }
      }
      if (typeof options.protoAction !== "undefined") {
        if (options.protoAction === "error" || options.protoAction === "ignore" || options.protoAction === "preserve") {
          _options.protoAction = options.protoAction;
        } else {
          throw new Error(`Incorrect value for protoAction option, must be "error", "ignore" or undefined but passed ${options.protoAction}`);
        }
      }
    }
    var at, ch, escapee = {
      '"': '"',
      "\\": "\\",
      "/": "/",
      b: "\b",
      f: "\f",
      n: `
`,
      r: "\r",
      t: "\t"
    }, text2, error = function(m2) {
      throw {
        name: "SyntaxError",
        message: m2,
        at,
        text: text2
      };
    }, next = function(c) {
      if (c && c !== ch) {
        error("Expected '" + c + "' instead of '" + ch + "'");
      }
      ch = text2.charAt(at);
      at += 1;
      return ch;
    }, number2 = function() {
      var number3, string3 = "";
      if (ch === "-") {
        string3 = "-";
        next("-");
      }
      while (ch >= "0" && ch <= "9") {
        string3 += ch;
        next();
      }
      if (ch === ".") {
        string3 += ".";
        while (next() && ch >= "0" && ch <= "9") {
          string3 += ch;
        }
      }
      if (ch === "e" || ch === "E") {
        string3 += ch;
        next();
        if (ch === "-" || ch === "+") {
          string3 += ch;
          next();
        }
        while (ch >= "0" && ch <= "9") {
          string3 += ch;
          next();
        }
      }
      number3 = +string3;
      if (!isFinite(number3)) {
        error("Bad number");
      } else {
        if (BigNumber == null)
          BigNumber = require_bignumber();
        if (string3.length > 15)
          return _options.storeAsString ? string3 : _options.useNativeBigInt ? BigInt(string3) : new BigNumber(string3);
        else
          return !_options.alwaysParseAsBig ? number3 : _options.useNativeBigInt ? BigInt(number3) : new BigNumber(number3);
      }
    }, string2 = function() {
      var hex, i, string3 = "", uffff;
      if (ch === '"') {
        var startAt = at;
        while (next()) {
          if (ch === '"') {
            if (at - 1 > startAt)
              string3 += text2.substring(startAt, at - 1);
            next();
            return string3;
          }
          if (ch === "\\") {
            if (at - 1 > startAt)
              string3 += text2.substring(startAt, at - 1);
            next();
            if (ch === "u") {
              uffff = 0;
              for (i = 0;i < 4; i += 1) {
                hex = parseInt(next(), 16);
                if (!isFinite(hex)) {
                  break;
                }
                uffff = uffff * 16 + hex;
              }
              string3 += String.fromCharCode(uffff);
            } else if (typeof escapee[ch] === "string") {
              string3 += escapee[ch];
            } else {
              break;
            }
            startAt = at;
          }
        }
      }
      error("Bad string");
    }, white = function() {
      while (ch && ch <= " ") {
        next();
      }
    }, word = function() {
      switch (ch) {
        case "t":
          next("t");
          next("r");
          next("u");
          next("e");
          return true;
        case "f":
          next("f");
          next("a");
          next("l");
          next("s");
          next("e");
          return false;
        case "n":
          next("n");
          next("u");
          next("l");
          next("l");
          return null;
      }
      error("Unexpected '" + ch + "'");
    }, value, array2 = function() {
      var array3 = [];
      if (ch === "[") {
        next("[");
        white();
        if (ch === "]") {
          next("]");
          return array3;
        }
        while (ch) {
          array3.push(value());
          white();
          if (ch === "]") {
            next("]");
            return array3;
          }
          next(",");
          white();
        }
      }
      error("Bad array");
    }, object3 = function() {
      var key, object4 = Object.create(null);
      if (ch === "{") {
        next("{");
        white();
        if (ch === "}") {
          next("}");
          return object4;
        }
        while (ch) {
          key = string2();
          white();
          next(":");
          if (_options.strict === true && Object.hasOwnProperty.call(object4, key)) {
            error('Duplicate key "' + key + '"');
          }
          if (suspectProtoRx.test(key) === true) {
            if (_options.protoAction === "error") {
              error("Object contains forbidden prototype property");
            } else if (_options.protoAction === "ignore") {
              value();
            } else {
              object4[key] = value();
            }
          } else if (suspectConstructorRx.test(key) === true) {
            if (_options.constructorAction === "error") {
              error("Object contains forbidden constructor property");
            } else if (_options.constructorAction === "ignore") {
              value();
            } else {
              object4[key] = value();
            }
          } else {
            object4[key] = value();
          }
          white();
          if (ch === "}") {
            next("}");
            return object4;
          }
          next(",");
          white();
        }
      }
      error("Bad object");
    };
    value = function() {
      white();
      switch (ch) {
        case "{":
          return object3();
        case "[":
          return array2();
        case '"':
          return string2();
        case "-":
          return number2();
        default:
          return ch >= "0" && ch <= "9" ? number2() : word();
      }
    };
    return function(source, reviver) {
      var result;
      text2 = source + "";
      at = 0;
      ch = " ";
      result = value();
      white();
      if (ch) {
        error("Syntax error");
      }
      return typeof reviver === "function" ? function walk(holder, key) {
        var k, v2, value2 = holder[key];
        if (value2 && typeof value2 === "object") {
          Object.keys(value2).forEach(function(k2) {
            v2 = walk(value2, k2);
            if (v2 !== undefined) {
              value2[k2] = v2;
            } else {
              delete value2[k2];
            }
          });
        }
        return reviver.call(holder, key, value2);
      }({ "": result }, "") : result;
    };
  };
  module.exports = json_parse;
});

// node_modules/json-bigint/index.js
var require_json_bigint = __commonJS((exports, module) => {
  var json_stringify = require_stringify().stringify;
  var json_parse = require_parse();
  module.exports = function(options) {
    return {
      parse: json_parse(options),
      stringify: json_stringify
    };
  };
  module.exports.parse = json_parse();
  module.exports.stringify = json_stringify;
});

// node_modules/zod/v3/external.js
var exports_external = {};
__export(exports_external, {
  void: () => voidType,
  util: () => util,
  unknown: () => unknownType,
  union: () => unionType,
  undefined: () => undefinedType,
  tuple: () => tupleType,
  transformer: () => effectsType,
  symbol: () => symbolType,
  string: () => stringType,
  strictObject: () => strictObjectType,
  setErrorMap: () => setErrorMap,
  set: () => setType,
  record: () => recordType,
  quotelessJson: () => quotelessJson,
  promise: () => promiseType,
  preprocess: () => preprocessType,
  pipeline: () => pipelineType,
  ostring: () => ostring,
  optional: () => optionalType,
  onumber: () => onumber,
  oboolean: () => oboolean,
  objectUtil: () => objectUtil,
  object: () => objectType,
  number: () => numberType,
  nullable: () => nullableType,
  null: () => nullType,
  never: () => neverType,
  nativeEnum: () => nativeEnumType,
  nan: () => nanType,
  map: () => mapType,
  makeIssue: () => makeIssue,
  literal: () => literalType,
  lazy: () => lazyType,
  late: () => late,
  isValid: () => isValid,
  isDirty: () => isDirty,
  isAsync: () => isAsync,
  isAborted: () => isAborted,
  intersection: () => intersectionType,
  instanceof: () => instanceOfType,
  getParsedType: () => getParsedType,
  getErrorMap: () => getErrorMap,
  function: () => functionType,
  enum: () => enumType,
  effect: () => effectsType,
  discriminatedUnion: () => discriminatedUnionType,
  defaultErrorMap: () => en_default,
  datetimeRegex: () => datetimeRegex,
  date: () => dateType,
  custom: () => custom,
  coerce: () => coerce,
  boolean: () => booleanType,
  bigint: () => bigIntType,
  array: () => arrayType,
  any: () => anyType,
  addIssueToContext: () => addIssueToContext,
  ZodVoid: () => ZodVoid,
  ZodUnknown: () => ZodUnknown,
  ZodUnion: () => ZodUnion,
  ZodUndefined: () => ZodUndefined,
  ZodType: () => ZodType,
  ZodTuple: () => ZodTuple,
  ZodTransformer: () => ZodEffects,
  ZodSymbol: () => ZodSymbol,
  ZodString: () => ZodString,
  ZodSet: () => ZodSet,
  ZodSchema: () => ZodType,
  ZodRecord: () => ZodRecord,
  ZodReadonly: () => ZodReadonly,
  ZodPromise: () => ZodPromise,
  ZodPipeline: () => ZodPipeline,
  ZodParsedType: () => ZodParsedType,
  ZodOptional: () => ZodOptional,
  ZodObject: () => ZodObject,
  ZodNumber: () => ZodNumber,
  ZodNullable: () => ZodNullable,
  ZodNull: () => ZodNull,
  ZodNever: () => ZodNever,
  ZodNativeEnum: () => ZodNativeEnum,
  ZodNaN: () => ZodNaN,
  ZodMap: () => ZodMap,
  ZodLiteral: () => ZodLiteral,
  ZodLazy: () => ZodLazy,
  ZodIssueCode: () => ZodIssueCode,
  ZodIntersection: () => ZodIntersection,
  ZodFunction: () => ZodFunction,
  ZodFirstPartyTypeKind: () => ZodFirstPartyTypeKind,
  ZodError: () => ZodError,
  ZodEnum: () => ZodEnum,
  ZodEffects: () => ZodEffects,
  ZodDiscriminatedUnion: () => ZodDiscriminatedUnion,
  ZodDefault: () => ZodDefault,
  ZodDate: () => ZodDate,
  ZodCatch: () => ZodCatch,
  ZodBranded: () => ZodBranded,
  ZodBoolean: () => ZodBoolean,
  ZodBigInt: () => ZodBigInt,
  ZodArray: () => ZodArray,
  ZodAny: () => ZodAny,
  Schema: () => ZodType,
  ParseStatus: () => ParseStatus,
  OK: () => OK,
  NEVER: () => NEVER,
  INVALID: () => INVALID,
  EMPTY_PATH: () => EMPTY_PATH,
  DIRTY: () => DIRTY,
  BRAND: () => BRAND
});

// node_modules/zod/v3/helpers/util.js
var util;
(function(util2) {
  util2.assertEqual = (_) => {};
  function assertIs(_arg) {}
  util2.assertIs = assertIs;
  function assertNever(_x) {
    throw new Error;
  }
  util2.assertNever = assertNever;
  util2.arrayToEnum = (items) => {
    const obj = {};
    for (const item of items) {
      obj[item] = item;
    }
    return obj;
  };
  util2.getValidEnumValues = (obj) => {
    const validKeys = util2.objectKeys(obj).filter((k) => typeof obj[obj[k]] !== "number");
    const filtered = {};
    for (const k of validKeys) {
      filtered[k] = obj[k];
    }
    return util2.objectValues(filtered);
  };
  util2.objectValues = (obj) => {
    return util2.objectKeys(obj).map(function(e) {
      return obj[e];
    });
  };
  util2.objectKeys = typeof Object.keys === "function" ? (obj) => Object.keys(obj) : (object) => {
    const keys = [];
    for (const key in object) {
      if (Object.prototype.hasOwnProperty.call(object, key)) {
        keys.push(key);
      }
    }
    return keys;
  };
  util2.find = (arr, checker) => {
    for (const item of arr) {
      if (checker(item))
        return item;
    }
    return;
  };
  util2.isInteger = typeof Number.isInteger === "function" ? (val) => Number.isInteger(val) : (val) => typeof val === "number" && Number.isFinite(val) && Math.floor(val) === val;
  function joinValues(array, separator = " | ") {
    return array.map((val) => typeof val === "string" ? `'${val}'` : val).join(separator);
  }
  util2.joinValues = joinValues;
  util2.jsonStringifyReplacer = (_, value) => {
    if (typeof value === "bigint") {
      return value.toString();
    }
    return value;
  };
})(util || (util = {}));
var objectUtil;
(function(objectUtil2) {
  objectUtil2.mergeShapes = (first, second) => {
    return {
      ...first,
      ...second
    };
  };
})(objectUtil || (objectUtil = {}));
var ZodParsedType = util.arrayToEnum([
  "string",
  "nan",
  "number",
  "integer",
  "float",
  "boolean",
  "date",
  "bigint",
  "symbol",
  "function",
  "undefined",
  "null",
  "array",
  "object",
  "unknown",
  "promise",
  "void",
  "never",
  "map",
  "set"
]);
var getParsedType = (data) => {
  const t = typeof data;
  switch (t) {
    case "undefined":
      return ZodParsedType.undefined;
    case "string":
      return ZodParsedType.string;
    case "number":
      return Number.isNaN(data) ? ZodParsedType.nan : ZodParsedType.number;
    case "boolean":
      return ZodParsedType.boolean;
    case "function":
      return ZodParsedType.function;
    case "bigint":
      return ZodParsedType.bigint;
    case "symbol":
      return ZodParsedType.symbol;
    case "object":
      if (Array.isArray(data)) {
        return ZodParsedType.array;
      }
      if (data === null) {
        return ZodParsedType.null;
      }
      if (data.then && typeof data.then === "function" && data.catch && typeof data.catch === "function") {
        return ZodParsedType.promise;
      }
      if (typeof Map !== "undefined" && data instanceof Map) {
        return ZodParsedType.map;
      }
      if (typeof Set !== "undefined" && data instanceof Set) {
        return ZodParsedType.set;
      }
      if (typeof Date !== "undefined" && data instanceof Date) {
        return ZodParsedType.date;
      }
      return ZodParsedType.object;
    default:
      return ZodParsedType.unknown;
  }
};

// node_modules/zod/v3/ZodError.js
var ZodIssueCode = util.arrayToEnum([
  "invalid_type",
  "invalid_literal",
  "custom",
  "invalid_union",
  "invalid_union_discriminator",
  "invalid_enum_value",
  "unrecognized_keys",
  "invalid_arguments",
  "invalid_return_type",
  "invalid_date",
  "invalid_string",
  "too_small",
  "too_big",
  "invalid_intersection_types",
  "not_multiple_of",
  "not_finite"
]);
var quotelessJson = (obj) => {
  const json = JSON.stringify(obj, null, 2);
  return json.replace(/"([^"]+)":/g, "$1:");
};

class ZodError extends Error {
  get errors() {
    return this.issues;
  }
  constructor(issues) {
    super();
    this.issues = [];
    this.addIssue = (sub) => {
      this.issues = [...this.issues, sub];
    };
    this.addIssues = (subs = []) => {
      this.issues = [...this.issues, ...subs];
    };
    const actualProto = new.target.prototype;
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(this, actualProto);
    } else {
      this.__proto__ = actualProto;
    }
    this.name = "ZodError";
    this.issues = issues;
  }
  format(_mapper) {
    const mapper = _mapper || function(issue) {
      return issue.message;
    };
    const fieldErrors = { _errors: [] };
    const processError = (error) => {
      for (const issue of error.issues) {
        if (issue.code === "invalid_union") {
          issue.unionErrors.map(processError);
        } else if (issue.code === "invalid_return_type") {
          processError(issue.returnTypeError);
        } else if (issue.code === "invalid_arguments") {
          processError(issue.argumentsError);
        } else if (issue.path.length === 0) {
          fieldErrors._errors.push(mapper(issue));
        } else {
          let curr = fieldErrors;
          let i = 0;
          while (i < issue.path.length) {
            const el = issue.path[i];
            const terminal = i === issue.path.length - 1;
            if (!terminal) {
              curr[el] = curr[el] || { _errors: [] };
            } else {
              curr[el] = curr[el] || { _errors: [] };
              curr[el]._errors.push(mapper(issue));
            }
            curr = curr[el];
            i++;
          }
        }
      }
    };
    processError(this);
    return fieldErrors;
  }
  static assert(value) {
    if (!(value instanceof ZodError)) {
      throw new Error(`Not a ZodError: ${value}`);
    }
  }
  toString() {
    return this.message;
  }
  get message() {
    return JSON.stringify(this.issues, util.jsonStringifyReplacer, 2);
  }
  get isEmpty() {
    return this.issues.length === 0;
  }
  flatten(mapper = (issue) => issue.message) {
    const fieldErrors = {};
    const formErrors = [];
    for (const sub of this.issues) {
      if (sub.path.length > 0) {
        const firstEl = sub.path[0];
        fieldErrors[firstEl] = fieldErrors[firstEl] || [];
        fieldErrors[firstEl].push(mapper(sub));
      } else {
        formErrors.push(mapper(sub));
      }
    }
    return { formErrors, fieldErrors };
  }
  get formErrors() {
    return this.flatten();
  }
}
ZodError.create = (issues) => {
  const error = new ZodError(issues);
  return error;
};

// node_modules/zod/v3/locales/en.js
var errorMap = (issue, _ctx) => {
  let message;
  switch (issue.code) {
    case ZodIssueCode.invalid_type:
      if (issue.received === ZodParsedType.undefined) {
        message = "Required";
      } else {
        message = `Expected ${issue.expected}, received ${issue.received}`;
      }
      break;
    case ZodIssueCode.invalid_literal:
      message = `Invalid literal value, expected ${JSON.stringify(issue.expected, util.jsonStringifyReplacer)}`;
      break;
    case ZodIssueCode.unrecognized_keys:
      message = `Unrecognized key(s) in object: ${util.joinValues(issue.keys, ", ")}`;
      break;
    case ZodIssueCode.invalid_union:
      message = `Invalid input`;
      break;
    case ZodIssueCode.invalid_union_discriminator:
      message = `Invalid discriminator value. Expected ${util.joinValues(issue.options)}`;
      break;
    case ZodIssueCode.invalid_enum_value:
      message = `Invalid enum value. Expected ${util.joinValues(issue.options)}, received '${issue.received}'`;
      break;
    case ZodIssueCode.invalid_arguments:
      message = `Invalid function arguments`;
      break;
    case ZodIssueCode.invalid_return_type:
      message = `Invalid function return type`;
      break;
    case ZodIssueCode.invalid_date:
      message = `Invalid date`;
      break;
    case ZodIssueCode.invalid_string:
      if (typeof issue.validation === "object") {
        if ("includes" in issue.validation) {
          message = `Invalid input: must include "${issue.validation.includes}"`;
          if (typeof issue.validation.position === "number") {
            message = `${message} at one or more positions greater than or equal to ${issue.validation.position}`;
          }
        } else if ("startsWith" in issue.validation) {
          message = `Invalid input: must start with "${issue.validation.startsWith}"`;
        } else if ("endsWith" in issue.validation) {
          message = `Invalid input: must end with "${issue.validation.endsWith}"`;
        } else {
          util.assertNever(issue.validation);
        }
      } else if (issue.validation !== "regex") {
        message = `Invalid ${issue.validation}`;
      } else {
        message = "Invalid";
      }
      break;
    case ZodIssueCode.too_small:
      if (issue.type === "array")
        message = `Array must contain ${issue.exact ? "exactly" : issue.inclusive ? `at least` : `more than`} ${issue.minimum} element(s)`;
      else if (issue.type === "string")
        message = `String must contain ${issue.exact ? "exactly" : issue.inclusive ? `at least` : `over`} ${issue.minimum} character(s)`;
      else if (issue.type === "number")
        message = `Number must be ${issue.exact ? `exactly equal to ` : issue.inclusive ? `greater than or equal to ` : `greater than `}${issue.minimum}`;
      else if (issue.type === "bigint")
        message = `Number must be ${issue.exact ? `exactly equal to ` : issue.inclusive ? `greater than or equal to ` : `greater than `}${issue.minimum}`;
      else if (issue.type === "date")
        message = `Date must be ${issue.exact ? `exactly equal to ` : issue.inclusive ? `greater than or equal to ` : `greater than `}${new Date(Number(issue.minimum))}`;
      else
        message = "Invalid input";
      break;
    case ZodIssueCode.too_big:
      if (issue.type === "array")
        message = `Array must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `less than`} ${issue.maximum} element(s)`;
      else if (issue.type === "string")
        message = `String must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `under`} ${issue.maximum} character(s)`;
      else if (issue.type === "number")
        message = `Number must be ${issue.exact ? `exactly` : issue.inclusive ? `less than or equal to` : `less than`} ${issue.maximum}`;
      else if (issue.type === "bigint")
        message = `BigInt must be ${issue.exact ? `exactly` : issue.inclusive ? `less than or equal to` : `less than`} ${issue.maximum}`;
      else if (issue.type === "date")
        message = `Date must be ${issue.exact ? `exactly` : issue.inclusive ? `smaller than or equal to` : `smaller than`} ${new Date(Number(issue.maximum))}`;
      else
        message = "Invalid input";
      break;
    case ZodIssueCode.custom:
      message = `Invalid input`;
      break;
    case ZodIssueCode.invalid_intersection_types:
      message = `Intersection results could not be merged`;
      break;
    case ZodIssueCode.not_multiple_of:
      message = `Number must be a multiple of ${issue.multipleOf}`;
      break;
    case ZodIssueCode.not_finite:
      message = "Number must be finite";
      break;
    default:
      message = _ctx.defaultError;
      util.assertNever(issue);
  }
  return { message };
};
var en_default = errorMap;

// node_modules/zod/v3/errors.js
var overrideErrorMap = en_default;
function setErrorMap(map) {
  overrideErrorMap = map;
}
function getErrorMap() {
  return overrideErrorMap;
}
// node_modules/zod/v3/helpers/parseUtil.js
var makeIssue = (params) => {
  const { data, path, errorMaps, issueData } = params;
  const fullPath = [...path, ...issueData.path || []];
  const fullIssue = {
    ...issueData,
    path: fullPath
  };
  if (issueData.message !== undefined) {
    return {
      ...issueData,
      path: fullPath,
      message: issueData.message
    };
  }
  let errorMessage = "";
  const maps = errorMaps.filter((m) => !!m).slice().reverse();
  for (const map of maps) {
    errorMessage = map(fullIssue, { data, defaultError: errorMessage }).message;
  }
  return {
    ...issueData,
    path: fullPath,
    message: errorMessage
  };
};
var EMPTY_PATH = [];
function addIssueToContext(ctx, issueData) {
  const overrideMap = getErrorMap();
  const issue = makeIssue({
    issueData,
    data: ctx.data,
    path: ctx.path,
    errorMaps: [
      ctx.common.contextualErrorMap,
      ctx.schemaErrorMap,
      overrideMap,
      overrideMap === en_default ? undefined : en_default
    ].filter((x) => !!x)
  });
  ctx.common.issues.push(issue);
}

class ParseStatus {
  constructor() {
    this.value = "valid";
  }
  dirty() {
    if (this.value === "valid")
      this.value = "dirty";
  }
  abort() {
    if (this.value !== "aborted")
      this.value = "aborted";
  }
  static mergeArray(status, results) {
    const arrayValue = [];
    for (const s of results) {
      if (s.status === "aborted")
        return INVALID;
      if (s.status === "dirty")
        status.dirty();
      arrayValue.push(s.value);
    }
    return { status: status.value, value: arrayValue };
  }
  static async mergeObjectAsync(status, pairs) {
    const syncPairs = [];
    for (const pair of pairs) {
      const key = await pair.key;
      const value = await pair.value;
      syncPairs.push({
        key,
        value
      });
    }
    return ParseStatus.mergeObjectSync(status, syncPairs);
  }
  static mergeObjectSync(status, pairs) {
    const finalObject = {};
    for (const pair of pairs) {
      const { key, value } = pair;
      if (key.status === "aborted")
        return INVALID;
      if (value.status === "aborted")
        return INVALID;
      if (key.status === "dirty")
        status.dirty();
      if (value.status === "dirty")
        status.dirty();
      if (key.value !== "__proto__" && (typeof value.value !== "undefined" || pair.alwaysSet)) {
        finalObject[key.value] = value.value;
      }
    }
    return { status: status.value, value: finalObject };
  }
}
var INVALID = Object.freeze({
  status: "aborted"
});
var DIRTY = (value) => ({ status: "dirty", value });
var OK = (value) => ({ status: "valid", value });
var isAborted = (x) => x.status === "aborted";
var isDirty = (x) => x.status === "dirty";
var isValid = (x) => x.status === "valid";
var isAsync = (x) => typeof Promise !== "undefined" && x instanceof Promise;
// node_modules/zod/v3/helpers/errorUtil.js
var errorUtil;
(function(errorUtil2) {
  errorUtil2.errToObj = (message) => typeof message === "string" ? { message } : message || {};
  errorUtil2.toString = (message) => typeof message === "string" ? message : message?.message;
})(errorUtil || (errorUtil = {}));

// node_modules/zod/v3/types.js
class ParseInputLazyPath {
  constructor(parent, value, path, key) {
    this._cachedPath = [];
    this.parent = parent;
    this.data = value;
    this._path = path;
    this._key = key;
  }
  get path() {
    if (!this._cachedPath.length) {
      if (Array.isArray(this._key)) {
        this._cachedPath.push(...this._path, ...this._key);
      } else {
        this._cachedPath.push(...this._path, this._key);
      }
    }
    return this._cachedPath;
  }
}
var handleResult = (ctx, result) => {
  if (isValid(result)) {
    return { success: true, data: result.value };
  } else {
    if (!ctx.common.issues.length) {
      throw new Error("Validation failed but no issues detected.");
    }
    return {
      success: false,
      get error() {
        if (this._error)
          return this._error;
        const error = new ZodError(ctx.common.issues);
        this._error = error;
        return this._error;
      }
    };
  }
};
function processCreateParams(params) {
  if (!params)
    return {};
  const { errorMap: errorMap2, invalid_type_error, required_error, description } = params;
  if (errorMap2 && (invalid_type_error || required_error)) {
    throw new Error(`Can't use "invalid_type_error" or "required_error" in conjunction with custom error map.`);
  }
  if (errorMap2)
    return { errorMap: errorMap2, description };
  const customMap = (iss, ctx) => {
    const { message } = params;
    if (iss.code === "invalid_enum_value") {
      return { message: message ?? ctx.defaultError };
    }
    if (typeof ctx.data === "undefined") {
      return { message: message ?? required_error ?? ctx.defaultError };
    }
    if (iss.code !== "invalid_type")
      return { message: ctx.defaultError };
    return { message: message ?? invalid_type_error ?? ctx.defaultError };
  };
  return { errorMap: customMap, description };
}

class ZodType {
  get description() {
    return this._def.description;
  }
  _getType(input) {
    return getParsedType(input.data);
  }
  _getOrReturnCtx(input, ctx) {
    return ctx || {
      common: input.parent.common,
      data: input.data,
      parsedType: getParsedType(input.data),
      schemaErrorMap: this._def.errorMap,
      path: input.path,
      parent: input.parent
    };
  }
  _processInputParams(input) {
    return {
      status: new ParseStatus,
      ctx: {
        common: input.parent.common,
        data: input.data,
        parsedType: getParsedType(input.data),
        schemaErrorMap: this._def.errorMap,
        path: input.path,
        parent: input.parent
      }
    };
  }
  _parseSync(input) {
    const result = this._parse(input);
    if (isAsync(result)) {
      throw new Error("Synchronous parse encountered promise.");
    }
    return result;
  }
  _parseAsync(input) {
    const result = this._parse(input);
    return Promise.resolve(result);
  }
  parse(data, params) {
    const result = this.safeParse(data, params);
    if (result.success)
      return result.data;
    throw result.error;
  }
  safeParse(data, params) {
    const ctx = {
      common: {
        issues: [],
        async: params?.async ?? false,
        contextualErrorMap: params?.errorMap
      },
      path: params?.path || [],
      schemaErrorMap: this._def.errorMap,
      parent: null,
      data,
      parsedType: getParsedType(data)
    };
    const result = this._parseSync({ data, path: ctx.path, parent: ctx });
    return handleResult(ctx, result);
  }
  "~validate"(data) {
    const ctx = {
      common: {
        issues: [],
        async: !!this["~standard"].async
      },
      path: [],
      schemaErrorMap: this._def.errorMap,
      parent: null,
      data,
      parsedType: getParsedType(data)
    };
    if (!this["~standard"].async) {
      try {
        const result = this._parseSync({ data, path: [], parent: ctx });
        return isValid(result) ? {
          value: result.value
        } : {
          issues: ctx.common.issues
        };
      } catch (err) {
        if (err?.message?.toLowerCase()?.includes("encountered")) {
          this["~standard"].async = true;
        }
        ctx.common = {
          issues: [],
          async: true
        };
      }
    }
    return this._parseAsync({ data, path: [], parent: ctx }).then((result) => isValid(result) ? {
      value: result.value
    } : {
      issues: ctx.common.issues
    });
  }
  async parseAsync(data, params) {
    const result = await this.safeParseAsync(data, params);
    if (result.success)
      return result.data;
    throw result.error;
  }
  async safeParseAsync(data, params) {
    const ctx = {
      common: {
        issues: [],
        contextualErrorMap: params?.errorMap,
        async: true
      },
      path: params?.path || [],
      schemaErrorMap: this._def.errorMap,
      parent: null,
      data,
      parsedType: getParsedType(data)
    };
    const maybeAsyncResult = this._parse({ data, path: ctx.path, parent: ctx });
    const result = await (isAsync(maybeAsyncResult) ? maybeAsyncResult : Promise.resolve(maybeAsyncResult));
    return handleResult(ctx, result);
  }
  refine(check, message) {
    const getIssueProperties = (val) => {
      if (typeof message === "string" || typeof message === "undefined") {
        return { message };
      } else if (typeof message === "function") {
        return message(val);
      } else {
        return message;
      }
    };
    return this._refinement((val, ctx) => {
      const result = check(val);
      const setError = () => ctx.addIssue({
        code: ZodIssueCode.custom,
        ...getIssueProperties(val)
      });
      if (typeof Promise !== "undefined" && result instanceof Promise) {
        return result.then((data) => {
          if (!data) {
            setError();
            return false;
          } else {
            return true;
          }
        });
      }
      if (!result) {
        setError();
        return false;
      } else {
        return true;
      }
    });
  }
  refinement(check, refinementData) {
    return this._refinement((val, ctx) => {
      if (!check(val)) {
        ctx.addIssue(typeof refinementData === "function" ? refinementData(val, ctx) : refinementData);
        return false;
      } else {
        return true;
      }
    });
  }
  _refinement(refinement) {
    return new ZodEffects({
      schema: this,
      typeName: ZodFirstPartyTypeKind.ZodEffects,
      effect: { type: "refinement", refinement }
    });
  }
  superRefine(refinement) {
    return this._refinement(refinement);
  }
  constructor(def) {
    this.spa = this.safeParseAsync;
    this._def = def;
    this.parse = this.parse.bind(this);
    this.safeParse = this.safeParse.bind(this);
    this.parseAsync = this.parseAsync.bind(this);
    this.safeParseAsync = this.safeParseAsync.bind(this);
    this.spa = this.spa.bind(this);
    this.refine = this.refine.bind(this);
    this.refinement = this.refinement.bind(this);
    this.superRefine = this.superRefine.bind(this);
    this.optional = this.optional.bind(this);
    this.nullable = this.nullable.bind(this);
    this.nullish = this.nullish.bind(this);
    this.array = this.array.bind(this);
    this.promise = this.promise.bind(this);
    this.or = this.or.bind(this);
    this.and = this.and.bind(this);
    this.transform = this.transform.bind(this);
    this.brand = this.brand.bind(this);
    this.default = this.default.bind(this);
    this.catch = this.catch.bind(this);
    this.describe = this.describe.bind(this);
    this.pipe = this.pipe.bind(this);
    this.readonly = this.readonly.bind(this);
    this.isNullable = this.isNullable.bind(this);
    this.isOptional = this.isOptional.bind(this);
    this["~standard"] = {
      version: 1,
      vendor: "zod",
      validate: (data) => this["~validate"](data)
    };
  }
  optional() {
    return ZodOptional.create(this, this._def);
  }
  nullable() {
    return ZodNullable.create(this, this._def);
  }
  nullish() {
    return this.nullable().optional();
  }
  array() {
    return ZodArray.create(this);
  }
  promise() {
    return ZodPromise.create(this, this._def);
  }
  or(option) {
    return ZodUnion.create([this, option], this._def);
  }
  and(incoming) {
    return ZodIntersection.create(this, incoming, this._def);
  }
  transform(transform) {
    return new ZodEffects({
      ...processCreateParams(this._def),
      schema: this,
      typeName: ZodFirstPartyTypeKind.ZodEffects,
      effect: { type: "transform", transform }
    });
  }
  default(def) {
    const defaultValueFunc = typeof def === "function" ? def : () => def;
    return new ZodDefault({
      ...processCreateParams(this._def),
      innerType: this,
      defaultValue: defaultValueFunc,
      typeName: ZodFirstPartyTypeKind.ZodDefault
    });
  }
  brand() {
    return new ZodBranded({
      typeName: ZodFirstPartyTypeKind.ZodBranded,
      type: this,
      ...processCreateParams(this._def)
    });
  }
  catch(def) {
    const catchValueFunc = typeof def === "function" ? def : () => def;
    return new ZodCatch({
      ...processCreateParams(this._def),
      innerType: this,
      catchValue: catchValueFunc,
      typeName: ZodFirstPartyTypeKind.ZodCatch
    });
  }
  describe(description) {
    const This = this.constructor;
    return new This({
      ...this._def,
      description
    });
  }
  pipe(target) {
    return ZodPipeline.create(this, target);
  }
  readonly() {
    return ZodReadonly.create(this);
  }
  isOptional() {
    return this.safeParse(undefined).success;
  }
  isNullable() {
    return this.safeParse(null).success;
  }
}
var cuidRegex = /^c[^\s-]{8,}$/i;
var cuid2Regex = /^[0-9a-z]+$/;
var ulidRegex = /^[0-9A-HJKMNP-TV-Z]{26}$/i;
var uuidRegex = /^[0-9a-fA-F]{8}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{12}$/i;
var nanoidRegex = /^[a-z0-9_-]{21}$/i;
var jwtRegex = /^[A-Za-z0-9-_]+\.[A-Za-z0-9-_]+\.[A-Za-z0-9-_]*$/;
var durationRegex = /^[-+]?P(?!$)(?:(?:[-+]?\d+Y)|(?:[-+]?\d+[.,]\d+Y$))?(?:(?:[-+]?\d+M)|(?:[-+]?\d+[.,]\d+M$))?(?:(?:[-+]?\d+W)|(?:[-+]?\d+[.,]\d+W$))?(?:(?:[-+]?\d+D)|(?:[-+]?\d+[.,]\d+D$))?(?:T(?=[\d+-])(?:(?:[-+]?\d+H)|(?:[-+]?\d+[.,]\d+H$))?(?:(?:[-+]?\d+M)|(?:[-+]?\d+[.,]\d+M$))?(?:[-+]?\d+(?:[.,]\d+)?S)?)??$/;
var emailRegex = /^(?!\.)(?!.*\.\.)([A-Z0-9_'+\-\.]*)[A-Z0-9_+-]@([A-Z0-9][A-Z0-9\-]*\.)+[A-Z]{2,}$/i;
var _emojiRegex = `^(\\p{Extended_Pictographic}|\\p{Emoji_Component})+$`;
var emojiRegex;
var ipv4Regex = /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])$/;
var ipv4CidrRegex = /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\/(3[0-2]|[12]?[0-9])$/;
var ipv6Regex = /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))$/;
var ipv6CidrRegex = /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))\/(12[0-8]|1[01][0-9]|[1-9]?[0-9])$/;
var base64Regex = /^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/;
var base64urlRegex = /^([0-9a-zA-Z-_]{4})*(([0-9a-zA-Z-_]{2}(==)?)|([0-9a-zA-Z-_]{3}(=)?))?$/;
var dateRegexSource = `((\\d\\d[2468][048]|\\d\\d[13579][26]|\\d\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\d{4}-((0[13578]|1[02])-(0[1-9]|[12]\\d|3[01])|(0[469]|11)-(0[1-9]|[12]\\d|30)|(02)-(0[1-9]|1\\d|2[0-8])))`;
var dateRegex = new RegExp(`^${dateRegexSource}$`);
function timeRegexSource(args) {
  let secondsRegexSource = `[0-5]\\d`;
  if (args.precision) {
    secondsRegexSource = `${secondsRegexSource}\\.\\d{${args.precision}}`;
  } else if (args.precision == null) {
    secondsRegexSource = `${secondsRegexSource}(\\.\\d+)?`;
  }
  const secondsQuantifier = args.precision ? "+" : "?";
  return `([01]\\d|2[0-3]):[0-5]\\d(:${secondsRegexSource})${secondsQuantifier}`;
}
function timeRegex(args) {
  return new RegExp(`^${timeRegexSource(args)}$`);
}
function datetimeRegex(args) {
  let regex = `${dateRegexSource}T${timeRegexSource(args)}`;
  const opts = [];
  opts.push(args.local ? `Z?` : `Z`);
  if (args.offset)
    opts.push(`([+-]\\d{2}:?\\d{2})`);
  regex = `${regex}(${opts.join("|")})`;
  return new RegExp(`^${regex}$`);
}
function isValidIP(ip, version) {
  if ((version === "v4" || !version) && ipv4Regex.test(ip)) {
    return true;
  }
  if ((version === "v6" || !version) && ipv6Regex.test(ip)) {
    return true;
  }
  return false;
}
function isValidJWT(jwt, alg) {
  if (!jwtRegex.test(jwt))
    return false;
  try {
    const [header] = jwt.split(".");
    if (!header)
      return false;
    const base64 = header.replace(/-/g, "+").replace(/_/g, "/").padEnd(header.length + (4 - header.length % 4) % 4, "=");
    const decoded = JSON.parse(atob(base64));
    if (typeof decoded !== "object" || decoded === null)
      return false;
    if ("typ" in decoded && decoded?.typ !== "JWT")
      return false;
    if (!decoded.alg)
      return false;
    if (alg && decoded.alg !== alg)
      return false;
    return true;
  } catch {
    return false;
  }
}
function isValidCidr(ip, version) {
  if ((version === "v4" || !version) && ipv4CidrRegex.test(ip)) {
    return true;
  }
  if ((version === "v6" || !version) && ipv6CidrRegex.test(ip)) {
    return true;
  }
  return false;
}

class ZodString extends ZodType {
  _parse(input) {
    if (this._def.coerce) {
      input.data = String(input.data);
    }
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.string) {
      const ctx2 = this._getOrReturnCtx(input);
      addIssueToContext(ctx2, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.string,
        received: ctx2.parsedType
      });
      return INVALID;
    }
    const status = new ParseStatus;
    let ctx = undefined;
    for (const check of this._def.checks) {
      if (check.kind === "min") {
        if (input.data.length < check.value) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_small,
            minimum: check.value,
            type: "string",
            inclusive: true,
            exact: false,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "max") {
        if (input.data.length > check.value) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_big,
            maximum: check.value,
            type: "string",
            inclusive: true,
            exact: false,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "length") {
        const tooBig = input.data.length > check.value;
        const tooSmall = input.data.length < check.value;
        if (tooBig || tooSmall) {
          ctx = this._getOrReturnCtx(input, ctx);
          if (tooBig) {
            addIssueToContext(ctx, {
              code: ZodIssueCode.too_big,
              maximum: check.value,
              type: "string",
              inclusive: true,
              exact: true,
              message: check.message
            });
          } else if (tooSmall) {
            addIssueToContext(ctx, {
              code: ZodIssueCode.too_small,
              minimum: check.value,
              type: "string",
              inclusive: true,
              exact: true,
              message: check.message
            });
          }
          status.dirty();
        }
      } else if (check.kind === "email") {
        if (!emailRegex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "email",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "emoji") {
        if (!emojiRegex) {
          emojiRegex = new RegExp(_emojiRegex, "u");
        }
        if (!emojiRegex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "emoji",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "uuid") {
        if (!uuidRegex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "uuid",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "nanoid") {
        if (!nanoidRegex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "nanoid",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "cuid") {
        if (!cuidRegex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "cuid",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "cuid2") {
        if (!cuid2Regex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "cuid2",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "ulid") {
        if (!ulidRegex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "ulid",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "url") {
        try {
          new URL(input.data);
        } catch {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "url",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "regex") {
        check.regex.lastIndex = 0;
        const testResult = check.regex.test(input.data);
        if (!testResult) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "regex",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "trim") {
        input.data = input.data.trim();
      } else if (check.kind === "includes") {
        if (!input.data.includes(check.value, check.position)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_string,
            validation: { includes: check.value, position: check.position },
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "toLowerCase") {
        input.data = input.data.toLowerCase();
      } else if (check.kind === "toUpperCase") {
        input.data = input.data.toUpperCase();
      } else if (check.kind === "startsWith") {
        if (!input.data.startsWith(check.value)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_string,
            validation: { startsWith: check.value },
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "endsWith") {
        if (!input.data.endsWith(check.value)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_string,
            validation: { endsWith: check.value },
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "datetime") {
        const regex = datetimeRegex(check);
        if (!regex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_string,
            validation: "datetime",
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "date") {
        const regex = dateRegex;
        if (!regex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_string,
            validation: "date",
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "time") {
        const regex = timeRegex(check);
        if (!regex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_string,
            validation: "time",
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "duration") {
        if (!durationRegex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "duration",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "ip") {
        if (!isValidIP(input.data, check.version)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "ip",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "jwt") {
        if (!isValidJWT(input.data, check.alg)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "jwt",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "cidr") {
        if (!isValidCidr(input.data, check.version)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "cidr",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "base64") {
        if (!base64Regex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "base64",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "base64url") {
        if (!base64urlRegex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "base64url",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else {
        util.assertNever(check);
      }
    }
    return { status: status.value, value: input.data };
  }
  _regex(regex, validation, message) {
    return this.refinement((data) => regex.test(data), {
      validation,
      code: ZodIssueCode.invalid_string,
      ...errorUtil.errToObj(message)
    });
  }
  _addCheck(check) {
    return new ZodString({
      ...this._def,
      checks: [...this._def.checks, check]
    });
  }
  email(message) {
    return this._addCheck({ kind: "email", ...errorUtil.errToObj(message) });
  }
  url(message) {
    return this._addCheck({ kind: "url", ...errorUtil.errToObj(message) });
  }
  emoji(message) {
    return this._addCheck({ kind: "emoji", ...errorUtil.errToObj(message) });
  }
  uuid(message) {
    return this._addCheck({ kind: "uuid", ...errorUtil.errToObj(message) });
  }
  nanoid(message) {
    return this._addCheck({ kind: "nanoid", ...errorUtil.errToObj(message) });
  }
  cuid(message) {
    return this._addCheck({ kind: "cuid", ...errorUtil.errToObj(message) });
  }
  cuid2(message) {
    return this._addCheck({ kind: "cuid2", ...errorUtil.errToObj(message) });
  }
  ulid(message) {
    return this._addCheck({ kind: "ulid", ...errorUtil.errToObj(message) });
  }
  base64(message) {
    return this._addCheck({ kind: "base64", ...errorUtil.errToObj(message) });
  }
  base64url(message) {
    return this._addCheck({
      kind: "base64url",
      ...errorUtil.errToObj(message)
    });
  }
  jwt(options) {
    return this._addCheck({ kind: "jwt", ...errorUtil.errToObj(options) });
  }
  ip(options) {
    return this._addCheck({ kind: "ip", ...errorUtil.errToObj(options) });
  }
  cidr(options) {
    return this._addCheck({ kind: "cidr", ...errorUtil.errToObj(options) });
  }
  datetime(options) {
    if (typeof options === "string") {
      return this._addCheck({
        kind: "datetime",
        precision: null,
        offset: false,
        local: false,
        message: options
      });
    }
    return this._addCheck({
      kind: "datetime",
      precision: typeof options?.precision === "undefined" ? null : options?.precision,
      offset: options?.offset ?? false,
      local: options?.local ?? false,
      ...errorUtil.errToObj(options?.message)
    });
  }
  date(message) {
    return this._addCheck({ kind: "date", message });
  }
  time(options) {
    if (typeof options === "string") {
      return this._addCheck({
        kind: "time",
        precision: null,
        message: options
      });
    }
    return this._addCheck({
      kind: "time",
      precision: typeof options?.precision === "undefined" ? null : options?.precision,
      ...errorUtil.errToObj(options?.message)
    });
  }
  duration(message) {
    return this._addCheck({ kind: "duration", ...errorUtil.errToObj(message) });
  }
  regex(regex, message) {
    return this._addCheck({
      kind: "regex",
      regex,
      ...errorUtil.errToObj(message)
    });
  }
  includes(value, options) {
    return this._addCheck({
      kind: "includes",
      value,
      position: options?.position,
      ...errorUtil.errToObj(options?.message)
    });
  }
  startsWith(value, message) {
    return this._addCheck({
      kind: "startsWith",
      value,
      ...errorUtil.errToObj(message)
    });
  }
  endsWith(value, message) {
    return this._addCheck({
      kind: "endsWith",
      value,
      ...errorUtil.errToObj(message)
    });
  }
  min(minLength, message) {
    return this._addCheck({
      kind: "min",
      value: minLength,
      ...errorUtil.errToObj(message)
    });
  }
  max(maxLength, message) {
    return this._addCheck({
      kind: "max",
      value: maxLength,
      ...errorUtil.errToObj(message)
    });
  }
  length(len, message) {
    return this._addCheck({
      kind: "length",
      value: len,
      ...errorUtil.errToObj(message)
    });
  }
  nonempty(message) {
    return this.min(1, errorUtil.errToObj(message));
  }
  trim() {
    return new ZodString({
      ...this._def,
      checks: [...this._def.checks, { kind: "trim" }]
    });
  }
  toLowerCase() {
    return new ZodString({
      ...this._def,
      checks: [...this._def.checks, { kind: "toLowerCase" }]
    });
  }
  toUpperCase() {
    return new ZodString({
      ...this._def,
      checks: [...this._def.checks, { kind: "toUpperCase" }]
    });
  }
  get isDatetime() {
    return !!this._def.checks.find((ch) => ch.kind === "datetime");
  }
  get isDate() {
    return !!this._def.checks.find((ch) => ch.kind === "date");
  }
  get isTime() {
    return !!this._def.checks.find((ch) => ch.kind === "time");
  }
  get isDuration() {
    return !!this._def.checks.find((ch) => ch.kind === "duration");
  }
  get isEmail() {
    return !!this._def.checks.find((ch) => ch.kind === "email");
  }
  get isURL() {
    return !!this._def.checks.find((ch) => ch.kind === "url");
  }
  get isEmoji() {
    return !!this._def.checks.find((ch) => ch.kind === "emoji");
  }
  get isUUID() {
    return !!this._def.checks.find((ch) => ch.kind === "uuid");
  }
  get isNANOID() {
    return !!this._def.checks.find((ch) => ch.kind === "nanoid");
  }
  get isCUID() {
    return !!this._def.checks.find((ch) => ch.kind === "cuid");
  }
  get isCUID2() {
    return !!this._def.checks.find((ch) => ch.kind === "cuid2");
  }
  get isULID() {
    return !!this._def.checks.find((ch) => ch.kind === "ulid");
  }
  get isIP() {
    return !!this._def.checks.find((ch) => ch.kind === "ip");
  }
  get isCIDR() {
    return !!this._def.checks.find((ch) => ch.kind === "cidr");
  }
  get isBase64() {
    return !!this._def.checks.find((ch) => ch.kind === "base64");
  }
  get isBase64url() {
    return !!this._def.checks.find((ch) => ch.kind === "base64url");
  }
  get minLength() {
    let min = null;
    for (const ch of this._def.checks) {
      if (ch.kind === "min") {
        if (min === null || ch.value > min)
          min = ch.value;
      }
    }
    return min;
  }
  get maxLength() {
    let max = null;
    for (const ch of this._def.checks) {
      if (ch.kind === "max") {
        if (max === null || ch.value < max)
          max = ch.value;
      }
    }
    return max;
  }
}
ZodString.create = (params) => {
  return new ZodString({
    checks: [],
    typeName: ZodFirstPartyTypeKind.ZodString,
    coerce: params?.coerce ?? false,
    ...processCreateParams(params)
  });
};
function floatSafeRemainder(val, step) {
  const valDecCount = (val.toString().split(".")[1] || "").length;
  const stepDecCount = (step.toString().split(".")[1] || "").length;
  const decCount = valDecCount > stepDecCount ? valDecCount : stepDecCount;
  const valInt = Number.parseInt(val.toFixed(decCount).replace(".", ""));
  const stepInt = Number.parseInt(step.toFixed(decCount).replace(".", ""));
  return valInt % stepInt / 10 ** decCount;
}

class ZodNumber extends ZodType {
  constructor() {
    super(...arguments);
    this.min = this.gte;
    this.max = this.lte;
    this.step = this.multipleOf;
  }
  _parse(input) {
    if (this._def.coerce) {
      input.data = Number(input.data);
    }
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.number) {
      const ctx2 = this._getOrReturnCtx(input);
      addIssueToContext(ctx2, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.number,
        received: ctx2.parsedType
      });
      return INVALID;
    }
    let ctx = undefined;
    const status = new ParseStatus;
    for (const check of this._def.checks) {
      if (check.kind === "int") {
        if (!util.isInteger(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_type,
            expected: "integer",
            received: "float",
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "min") {
        const tooSmall = check.inclusive ? input.data < check.value : input.data <= check.value;
        if (tooSmall) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_small,
            minimum: check.value,
            type: "number",
            inclusive: check.inclusive,
            exact: false,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "max") {
        const tooBig = check.inclusive ? input.data > check.value : input.data >= check.value;
        if (tooBig) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_big,
            maximum: check.value,
            type: "number",
            inclusive: check.inclusive,
            exact: false,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "multipleOf") {
        if (floatSafeRemainder(input.data, check.value) !== 0) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.not_multiple_of,
            multipleOf: check.value,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "finite") {
        if (!Number.isFinite(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.not_finite,
            message: check.message
          });
          status.dirty();
        }
      } else {
        util.assertNever(check);
      }
    }
    return { status: status.value, value: input.data };
  }
  gte(value, message) {
    return this.setLimit("min", value, true, errorUtil.toString(message));
  }
  gt(value, message) {
    return this.setLimit("min", value, false, errorUtil.toString(message));
  }
  lte(value, message) {
    return this.setLimit("max", value, true, errorUtil.toString(message));
  }
  lt(value, message) {
    return this.setLimit("max", value, false, errorUtil.toString(message));
  }
  setLimit(kind, value, inclusive, message) {
    return new ZodNumber({
      ...this._def,
      checks: [
        ...this._def.checks,
        {
          kind,
          value,
          inclusive,
          message: errorUtil.toString(message)
        }
      ]
    });
  }
  _addCheck(check) {
    return new ZodNumber({
      ...this._def,
      checks: [...this._def.checks, check]
    });
  }
  int(message) {
    return this._addCheck({
      kind: "int",
      message: errorUtil.toString(message)
    });
  }
  positive(message) {
    return this._addCheck({
      kind: "min",
      value: 0,
      inclusive: false,
      message: errorUtil.toString(message)
    });
  }
  negative(message) {
    return this._addCheck({
      kind: "max",
      value: 0,
      inclusive: false,
      message: errorUtil.toString(message)
    });
  }
  nonpositive(message) {
    return this._addCheck({
      kind: "max",
      value: 0,
      inclusive: true,
      message: errorUtil.toString(message)
    });
  }
  nonnegative(message) {
    return this._addCheck({
      kind: "min",
      value: 0,
      inclusive: true,
      message: errorUtil.toString(message)
    });
  }
  multipleOf(value, message) {
    return this._addCheck({
      kind: "multipleOf",
      value,
      message: errorUtil.toString(message)
    });
  }
  finite(message) {
    return this._addCheck({
      kind: "finite",
      message: errorUtil.toString(message)
    });
  }
  safe(message) {
    return this._addCheck({
      kind: "min",
      inclusive: true,
      value: Number.MIN_SAFE_INTEGER,
      message: errorUtil.toString(message)
    })._addCheck({
      kind: "max",
      inclusive: true,
      value: Number.MAX_SAFE_INTEGER,
      message: errorUtil.toString(message)
    });
  }
  get minValue() {
    let min = null;
    for (const ch of this._def.checks) {
      if (ch.kind === "min") {
        if (min === null || ch.value > min)
          min = ch.value;
      }
    }
    return min;
  }
  get maxValue() {
    let max = null;
    for (const ch of this._def.checks) {
      if (ch.kind === "max") {
        if (max === null || ch.value < max)
          max = ch.value;
      }
    }
    return max;
  }
  get isInt() {
    return !!this._def.checks.find((ch) => ch.kind === "int" || ch.kind === "multipleOf" && util.isInteger(ch.value));
  }
  get isFinite() {
    let max = null;
    let min = null;
    for (const ch of this._def.checks) {
      if (ch.kind === "finite" || ch.kind === "int" || ch.kind === "multipleOf") {
        return true;
      } else if (ch.kind === "min") {
        if (min === null || ch.value > min)
          min = ch.value;
      } else if (ch.kind === "max") {
        if (max === null || ch.value < max)
          max = ch.value;
      }
    }
    return Number.isFinite(min) && Number.isFinite(max);
  }
}
ZodNumber.create = (params) => {
  return new ZodNumber({
    checks: [],
    typeName: ZodFirstPartyTypeKind.ZodNumber,
    coerce: params?.coerce || false,
    ...processCreateParams(params)
  });
};

class ZodBigInt extends ZodType {
  constructor() {
    super(...arguments);
    this.min = this.gte;
    this.max = this.lte;
  }
  _parse(input) {
    if (this._def.coerce) {
      try {
        input.data = BigInt(input.data);
      } catch {
        return this._getInvalidInput(input);
      }
    }
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.bigint) {
      return this._getInvalidInput(input);
    }
    let ctx = undefined;
    const status = new ParseStatus;
    for (const check of this._def.checks) {
      if (check.kind === "min") {
        const tooSmall = check.inclusive ? input.data < check.value : input.data <= check.value;
        if (tooSmall) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_small,
            type: "bigint",
            minimum: check.value,
            inclusive: check.inclusive,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "max") {
        const tooBig = check.inclusive ? input.data > check.value : input.data >= check.value;
        if (tooBig) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_big,
            type: "bigint",
            maximum: check.value,
            inclusive: check.inclusive,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "multipleOf") {
        if (input.data % check.value !== BigInt(0)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.not_multiple_of,
            multipleOf: check.value,
            message: check.message
          });
          status.dirty();
        }
      } else {
        util.assertNever(check);
      }
    }
    return { status: status.value, value: input.data };
  }
  _getInvalidInput(input) {
    const ctx = this._getOrReturnCtx(input);
    addIssueToContext(ctx, {
      code: ZodIssueCode.invalid_type,
      expected: ZodParsedType.bigint,
      received: ctx.parsedType
    });
    return INVALID;
  }
  gte(value, message) {
    return this.setLimit("min", value, true, errorUtil.toString(message));
  }
  gt(value, message) {
    return this.setLimit("min", value, false, errorUtil.toString(message));
  }
  lte(value, message) {
    return this.setLimit("max", value, true, errorUtil.toString(message));
  }
  lt(value, message) {
    return this.setLimit("max", value, false, errorUtil.toString(message));
  }
  setLimit(kind, value, inclusive, message) {
    return new ZodBigInt({
      ...this._def,
      checks: [
        ...this._def.checks,
        {
          kind,
          value,
          inclusive,
          message: errorUtil.toString(message)
        }
      ]
    });
  }
  _addCheck(check) {
    return new ZodBigInt({
      ...this._def,
      checks: [...this._def.checks, check]
    });
  }
  positive(message) {
    return this._addCheck({
      kind: "min",
      value: BigInt(0),
      inclusive: false,
      message: errorUtil.toString(message)
    });
  }
  negative(message) {
    return this._addCheck({
      kind: "max",
      value: BigInt(0),
      inclusive: false,
      message: errorUtil.toString(message)
    });
  }
  nonpositive(message) {
    return this._addCheck({
      kind: "max",
      value: BigInt(0),
      inclusive: true,
      message: errorUtil.toString(message)
    });
  }
  nonnegative(message) {
    return this._addCheck({
      kind: "min",
      value: BigInt(0),
      inclusive: true,
      message: errorUtil.toString(message)
    });
  }
  multipleOf(value, message) {
    return this._addCheck({
      kind: "multipleOf",
      value,
      message: errorUtil.toString(message)
    });
  }
  get minValue() {
    let min = null;
    for (const ch of this._def.checks) {
      if (ch.kind === "min") {
        if (min === null || ch.value > min)
          min = ch.value;
      }
    }
    return min;
  }
  get maxValue() {
    let max = null;
    for (const ch of this._def.checks) {
      if (ch.kind === "max") {
        if (max === null || ch.value < max)
          max = ch.value;
      }
    }
    return max;
  }
}
ZodBigInt.create = (params) => {
  return new ZodBigInt({
    checks: [],
    typeName: ZodFirstPartyTypeKind.ZodBigInt,
    coerce: params?.coerce ?? false,
    ...processCreateParams(params)
  });
};

class ZodBoolean extends ZodType {
  _parse(input) {
    if (this._def.coerce) {
      input.data = Boolean(input.data);
    }
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.boolean) {
      const ctx = this._getOrReturnCtx(input);
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.boolean,
        received: ctx.parsedType
      });
      return INVALID;
    }
    return OK(input.data);
  }
}
ZodBoolean.create = (params) => {
  return new ZodBoolean({
    typeName: ZodFirstPartyTypeKind.ZodBoolean,
    coerce: params?.coerce || false,
    ...processCreateParams(params)
  });
};

class ZodDate extends ZodType {
  _parse(input) {
    if (this._def.coerce) {
      input.data = new Date(input.data);
    }
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.date) {
      const ctx2 = this._getOrReturnCtx(input);
      addIssueToContext(ctx2, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.date,
        received: ctx2.parsedType
      });
      return INVALID;
    }
    if (Number.isNaN(input.data.getTime())) {
      const ctx2 = this._getOrReturnCtx(input);
      addIssueToContext(ctx2, {
        code: ZodIssueCode.invalid_date
      });
      return INVALID;
    }
    const status = new ParseStatus;
    let ctx = undefined;
    for (const check of this._def.checks) {
      if (check.kind === "min") {
        if (input.data.getTime() < check.value) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_small,
            message: check.message,
            inclusive: true,
            exact: false,
            minimum: check.value,
            type: "date"
          });
          status.dirty();
        }
      } else if (check.kind === "max") {
        if (input.data.getTime() > check.value) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_big,
            message: check.message,
            inclusive: true,
            exact: false,
            maximum: check.value,
            type: "date"
          });
          status.dirty();
        }
      } else {
        util.assertNever(check);
      }
    }
    return {
      status: status.value,
      value: new Date(input.data.getTime())
    };
  }
  _addCheck(check) {
    return new ZodDate({
      ...this._def,
      checks: [...this._def.checks, check]
    });
  }
  min(minDate, message) {
    return this._addCheck({
      kind: "min",
      value: minDate.getTime(),
      message: errorUtil.toString(message)
    });
  }
  max(maxDate, message) {
    return this._addCheck({
      kind: "max",
      value: maxDate.getTime(),
      message: errorUtil.toString(message)
    });
  }
  get minDate() {
    let min = null;
    for (const ch of this._def.checks) {
      if (ch.kind === "min") {
        if (min === null || ch.value > min)
          min = ch.value;
      }
    }
    return min != null ? new Date(min) : null;
  }
  get maxDate() {
    let max = null;
    for (const ch of this._def.checks) {
      if (ch.kind === "max") {
        if (max === null || ch.value < max)
          max = ch.value;
      }
    }
    return max != null ? new Date(max) : null;
  }
}
ZodDate.create = (params) => {
  return new ZodDate({
    checks: [],
    coerce: params?.coerce || false,
    typeName: ZodFirstPartyTypeKind.ZodDate,
    ...processCreateParams(params)
  });
};

class ZodSymbol extends ZodType {
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.symbol) {
      const ctx = this._getOrReturnCtx(input);
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.symbol,
        received: ctx.parsedType
      });
      return INVALID;
    }
    return OK(input.data);
  }
}
ZodSymbol.create = (params) => {
  return new ZodSymbol({
    typeName: ZodFirstPartyTypeKind.ZodSymbol,
    ...processCreateParams(params)
  });
};

class ZodUndefined extends ZodType {
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.undefined) {
      const ctx = this._getOrReturnCtx(input);
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.undefined,
        received: ctx.parsedType
      });
      return INVALID;
    }
    return OK(input.data);
  }
}
ZodUndefined.create = (params) => {
  return new ZodUndefined({
    typeName: ZodFirstPartyTypeKind.ZodUndefined,
    ...processCreateParams(params)
  });
};

class ZodNull extends ZodType {
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.null) {
      const ctx = this._getOrReturnCtx(input);
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.null,
        received: ctx.parsedType
      });
      return INVALID;
    }
    return OK(input.data);
  }
}
ZodNull.create = (params) => {
  return new ZodNull({
    typeName: ZodFirstPartyTypeKind.ZodNull,
    ...processCreateParams(params)
  });
};

class ZodAny extends ZodType {
  constructor() {
    super(...arguments);
    this._any = true;
  }
  _parse(input) {
    return OK(input.data);
  }
}
ZodAny.create = (params) => {
  return new ZodAny({
    typeName: ZodFirstPartyTypeKind.ZodAny,
    ...processCreateParams(params)
  });
};

class ZodUnknown extends ZodType {
  constructor() {
    super(...arguments);
    this._unknown = true;
  }
  _parse(input) {
    return OK(input.data);
  }
}
ZodUnknown.create = (params) => {
  return new ZodUnknown({
    typeName: ZodFirstPartyTypeKind.ZodUnknown,
    ...processCreateParams(params)
  });
};

class ZodNever extends ZodType {
  _parse(input) {
    const ctx = this._getOrReturnCtx(input);
    addIssueToContext(ctx, {
      code: ZodIssueCode.invalid_type,
      expected: ZodParsedType.never,
      received: ctx.parsedType
    });
    return INVALID;
  }
}
ZodNever.create = (params) => {
  return new ZodNever({
    typeName: ZodFirstPartyTypeKind.ZodNever,
    ...processCreateParams(params)
  });
};

class ZodVoid extends ZodType {
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.undefined) {
      const ctx = this._getOrReturnCtx(input);
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.void,
        received: ctx.parsedType
      });
      return INVALID;
    }
    return OK(input.data);
  }
}
ZodVoid.create = (params) => {
  return new ZodVoid({
    typeName: ZodFirstPartyTypeKind.ZodVoid,
    ...processCreateParams(params)
  });
};

class ZodArray extends ZodType {
  _parse(input) {
    const { ctx, status } = this._processInputParams(input);
    const def = this._def;
    if (ctx.parsedType !== ZodParsedType.array) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.array,
        received: ctx.parsedType
      });
      return INVALID;
    }
    if (def.exactLength !== null) {
      const tooBig = ctx.data.length > def.exactLength.value;
      const tooSmall = ctx.data.length < def.exactLength.value;
      if (tooBig || tooSmall) {
        addIssueToContext(ctx, {
          code: tooBig ? ZodIssueCode.too_big : ZodIssueCode.too_small,
          minimum: tooSmall ? def.exactLength.value : undefined,
          maximum: tooBig ? def.exactLength.value : undefined,
          type: "array",
          inclusive: true,
          exact: true,
          message: def.exactLength.message
        });
        status.dirty();
      }
    }
    if (def.minLength !== null) {
      if (ctx.data.length < def.minLength.value) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.too_small,
          minimum: def.minLength.value,
          type: "array",
          inclusive: true,
          exact: false,
          message: def.minLength.message
        });
        status.dirty();
      }
    }
    if (def.maxLength !== null) {
      if (ctx.data.length > def.maxLength.value) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.too_big,
          maximum: def.maxLength.value,
          type: "array",
          inclusive: true,
          exact: false,
          message: def.maxLength.message
        });
        status.dirty();
      }
    }
    if (ctx.common.async) {
      return Promise.all([...ctx.data].map((item, i) => {
        return def.type._parseAsync(new ParseInputLazyPath(ctx, item, ctx.path, i));
      })).then((result2) => {
        return ParseStatus.mergeArray(status, result2);
      });
    }
    const result = [...ctx.data].map((item, i) => {
      return def.type._parseSync(new ParseInputLazyPath(ctx, item, ctx.path, i));
    });
    return ParseStatus.mergeArray(status, result);
  }
  get element() {
    return this._def.type;
  }
  min(minLength, message) {
    return new ZodArray({
      ...this._def,
      minLength: { value: minLength, message: errorUtil.toString(message) }
    });
  }
  max(maxLength, message) {
    return new ZodArray({
      ...this._def,
      maxLength: { value: maxLength, message: errorUtil.toString(message) }
    });
  }
  length(len, message) {
    return new ZodArray({
      ...this._def,
      exactLength: { value: len, message: errorUtil.toString(message) }
    });
  }
  nonempty(message) {
    return this.min(1, message);
  }
}
ZodArray.create = (schema, params) => {
  return new ZodArray({
    type: schema,
    minLength: null,
    maxLength: null,
    exactLength: null,
    typeName: ZodFirstPartyTypeKind.ZodArray,
    ...processCreateParams(params)
  });
};
function deepPartialify(schema) {
  if (schema instanceof ZodObject) {
    const newShape = {};
    for (const key in schema.shape) {
      const fieldSchema = schema.shape[key];
      newShape[key] = ZodOptional.create(deepPartialify(fieldSchema));
    }
    return new ZodObject({
      ...schema._def,
      shape: () => newShape
    });
  } else if (schema instanceof ZodArray) {
    return new ZodArray({
      ...schema._def,
      type: deepPartialify(schema.element)
    });
  } else if (schema instanceof ZodOptional) {
    return ZodOptional.create(deepPartialify(schema.unwrap()));
  } else if (schema instanceof ZodNullable) {
    return ZodNullable.create(deepPartialify(schema.unwrap()));
  } else if (schema instanceof ZodTuple) {
    return ZodTuple.create(schema.items.map((item) => deepPartialify(item)));
  } else {
    return schema;
  }
}

class ZodObject extends ZodType {
  constructor() {
    super(...arguments);
    this._cached = null;
    this.nonstrict = this.passthrough;
    this.augment = this.extend;
  }
  _getCached() {
    if (this._cached !== null)
      return this._cached;
    const shape = this._def.shape();
    const keys = util.objectKeys(shape);
    this._cached = { shape, keys };
    return this._cached;
  }
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.object) {
      const ctx2 = this._getOrReturnCtx(input);
      addIssueToContext(ctx2, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.object,
        received: ctx2.parsedType
      });
      return INVALID;
    }
    const { status, ctx } = this._processInputParams(input);
    const { shape, keys: shapeKeys } = this._getCached();
    const extraKeys = [];
    if (!(this._def.catchall instanceof ZodNever && this._def.unknownKeys === "strip")) {
      for (const key in ctx.data) {
        if (!shapeKeys.includes(key)) {
          extraKeys.push(key);
        }
      }
    }
    const pairs = [];
    for (const key of shapeKeys) {
      const keyValidator = shape[key];
      const value = ctx.data[key];
      pairs.push({
        key: { status: "valid", value: key },
        value: keyValidator._parse(new ParseInputLazyPath(ctx, value, ctx.path, key)),
        alwaysSet: key in ctx.data
      });
    }
    if (this._def.catchall instanceof ZodNever) {
      const unknownKeys = this._def.unknownKeys;
      if (unknownKeys === "passthrough") {
        for (const key of extraKeys) {
          pairs.push({
            key: { status: "valid", value: key },
            value: { status: "valid", value: ctx.data[key] }
          });
        }
      } else if (unknownKeys === "strict") {
        if (extraKeys.length > 0) {
          addIssueToContext(ctx, {
            code: ZodIssueCode.unrecognized_keys,
            keys: extraKeys
          });
          status.dirty();
        }
      } else if (unknownKeys === "strip") {} else {
        throw new Error(`Internal ZodObject error: invalid unknownKeys value.`);
      }
    } else {
      const catchall = this._def.catchall;
      for (const key of extraKeys) {
        const value = ctx.data[key];
        pairs.push({
          key: { status: "valid", value: key },
          value: catchall._parse(new ParseInputLazyPath(ctx, value, ctx.path, key)),
          alwaysSet: key in ctx.data
        });
      }
    }
    if (ctx.common.async) {
      return Promise.resolve().then(async () => {
        const syncPairs = [];
        for (const pair of pairs) {
          const key = await pair.key;
          const value = await pair.value;
          syncPairs.push({
            key,
            value,
            alwaysSet: pair.alwaysSet
          });
        }
        return syncPairs;
      }).then((syncPairs) => {
        return ParseStatus.mergeObjectSync(status, syncPairs);
      });
    } else {
      return ParseStatus.mergeObjectSync(status, pairs);
    }
  }
  get shape() {
    return this._def.shape();
  }
  strict(message) {
    errorUtil.errToObj;
    return new ZodObject({
      ...this._def,
      unknownKeys: "strict",
      ...message !== undefined ? {
        errorMap: (issue, ctx) => {
          const defaultError = this._def.errorMap?.(issue, ctx).message ?? ctx.defaultError;
          if (issue.code === "unrecognized_keys")
            return {
              message: errorUtil.errToObj(message).message ?? defaultError
            };
          return {
            message: defaultError
          };
        }
      } : {}
    });
  }
  strip() {
    return new ZodObject({
      ...this._def,
      unknownKeys: "strip"
    });
  }
  passthrough() {
    return new ZodObject({
      ...this._def,
      unknownKeys: "passthrough"
    });
  }
  extend(augmentation) {
    return new ZodObject({
      ...this._def,
      shape: () => ({
        ...this._def.shape(),
        ...augmentation
      })
    });
  }
  merge(merging) {
    const merged = new ZodObject({
      unknownKeys: merging._def.unknownKeys,
      catchall: merging._def.catchall,
      shape: () => ({
        ...this._def.shape(),
        ...merging._def.shape()
      }),
      typeName: ZodFirstPartyTypeKind.ZodObject
    });
    return merged;
  }
  setKey(key, schema) {
    return this.augment({ [key]: schema });
  }
  catchall(index) {
    return new ZodObject({
      ...this._def,
      catchall: index
    });
  }
  pick(mask) {
    const shape = {};
    for (const key of util.objectKeys(mask)) {
      if (mask[key] && this.shape[key]) {
        shape[key] = this.shape[key];
      }
    }
    return new ZodObject({
      ...this._def,
      shape: () => shape
    });
  }
  omit(mask) {
    const shape = {};
    for (const key of util.objectKeys(this.shape)) {
      if (!mask[key]) {
        shape[key] = this.shape[key];
      }
    }
    return new ZodObject({
      ...this._def,
      shape: () => shape
    });
  }
  deepPartial() {
    return deepPartialify(this);
  }
  partial(mask) {
    const newShape = {};
    for (const key of util.objectKeys(this.shape)) {
      const fieldSchema = this.shape[key];
      if (mask && !mask[key]) {
        newShape[key] = fieldSchema;
      } else {
        newShape[key] = fieldSchema.optional();
      }
    }
    return new ZodObject({
      ...this._def,
      shape: () => newShape
    });
  }
  required(mask) {
    const newShape = {};
    for (const key of util.objectKeys(this.shape)) {
      if (mask && !mask[key]) {
        newShape[key] = this.shape[key];
      } else {
        const fieldSchema = this.shape[key];
        let newField = fieldSchema;
        while (newField instanceof ZodOptional) {
          newField = newField._def.innerType;
        }
        newShape[key] = newField;
      }
    }
    return new ZodObject({
      ...this._def,
      shape: () => newShape
    });
  }
  keyof() {
    return createZodEnum(util.objectKeys(this.shape));
  }
}
ZodObject.create = (shape, params) => {
  return new ZodObject({
    shape: () => shape,
    unknownKeys: "strip",
    catchall: ZodNever.create(),
    typeName: ZodFirstPartyTypeKind.ZodObject,
    ...processCreateParams(params)
  });
};
ZodObject.strictCreate = (shape, params) => {
  return new ZodObject({
    shape: () => shape,
    unknownKeys: "strict",
    catchall: ZodNever.create(),
    typeName: ZodFirstPartyTypeKind.ZodObject,
    ...processCreateParams(params)
  });
};
ZodObject.lazycreate = (shape, params) => {
  return new ZodObject({
    shape,
    unknownKeys: "strip",
    catchall: ZodNever.create(),
    typeName: ZodFirstPartyTypeKind.ZodObject,
    ...processCreateParams(params)
  });
};

class ZodUnion extends ZodType {
  _parse(input) {
    const { ctx } = this._processInputParams(input);
    const options = this._def.options;
    function handleResults(results) {
      for (const result of results) {
        if (result.result.status === "valid") {
          return result.result;
        }
      }
      for (const result of results) {
        if (result.result.status === "dirty") {
          ctx.common.issues.push(...result.ctx.common.issues);
          return result.result;
        }
      }
      const unionErrors = results.map((result) => new ZodError(result.ctx.common.issues));
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_union,
        unionErrors
      });
      return INVALID;
    }
    if (ctx.common.async) {
      return Promise.all(options.map(async (option) => {
        const childCtx = {
          ...ctx,
          common: {
            ...ctx.common,
            issues: []
          },
          parent: null
        };
        return {
          result: await option._parseAsync({
            data: ctx.data,
            path: ctx.path,
            parent: childCtx
          }),
          ctx: childCtx
        };
      })).then(handleResults);
    } else {
      let dirty = undefined;
      const issues = [];
      for (const option of options) {
        const childCtx = {
          ...ctx,
          common: {
            ...ctx.common,
            issues: []
          },
          parent: null
        };
        const result = option._parseSync({
          data: ctx.data,
          path: ctx.path,
          parent: childCtx
        });
        if (result.status === "valid") {
          return result;
        } else if (result.status === "dirty" && !dirty) {
          dirty = { result, ctx: childCtx };
        }
        if (childCtx.common.issues.length) {
          issues.push(childCtx.common.issues);
        }
      }
      if (dirty) {
        ctx.common.issues.push(...dirty.ctx.common.issues);
        return dirty.result;
      }
      const unionErrors = issues.map((issues2) => new ZodError(issues2));
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_union,
        unionErrors
      });
      return INVALID;
    }
  }
  get options() {
    return this._def.options;
  }
}
ZodUnion.create = (types, params) => {
  return new ZodUnion({
    options: types,
    typeName: ZodFirstPartyTypeKind.ZodUnion,
    ...processCreateParams(params)
  });
};
var getDiscriminator = (type) => {
  if (type instanceof ZodLazy) {
    return getDiscriminator(type.schema);
  } else if (type instanceof ZodEffects) {
    return getDiscriminator(type.innerType());
  } else if (type instanceof ZodLiteral) {
    return [type.value];
  } else if (type instanceof ZodEnum) {
    return type.options;
  } else if (type instanceof ZodNativeEnum) {
    return util.objectValues(type.enum);
  } else if (type instanceof ZodDefault) {
    return getDiscriminator(type._def.innerType);
  } else if (type instanceof ZodUndefined) {
    return [undefined];
  } else if (type instanceof ZodNull) {
    return [null];
  } else if (type instanceof ZodOptional) {
    return [undefined, ...getDiscriminator(type.unwrap())];
  } else if (type instanceof ZodNullable) {
    return [null, ...getDiscriminator(type.unwrap())];
  } else if (type instanceof ZodBranded) {
    return getDiscriminator(type.unwrap());
  } else if (type instanceof ZodReadonly) {
    return getDiscriminator(type.unwrap());
  } else if (type instanceof ZodCatch) {
    return getDiscriminator(type._def.innerType);
  } else {
    return [];
  }
};

class ZodDiscriminatedUnion extends ZodType {
  _parse(input) {
    const { ctx } = this._processInputParams(input);
    if (ctx.parsedType !== ZodParsedType.object) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.object,
        received: ctx.parsedType
      });
      return INVALID;
    }
    const discriminator = this.discriminator;
    const discriminatorValue = ctx.data[discriminator];
    const option = this.optionsMap.get(discriminatorValue);
    if (!option) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_union_discriminator,
        options: Array.from(this.optionsMap.keys()),
        path: [discriminator]
      });
      return INVALID;
    }
    if (ctx.common.async) {
      return option._parseAsync({
        data: ctx.data,
        path: ctx.path,
        parent: ctx
      });
    } else {
      return option._parseSync({
        data: ctx.data,
        path: ctx.path,
        parent: ctx
      });
    }
  }
  get discriminator() {
    return this._def.discriminator;
  }
  get options() {
    return this._def.options;
  }
  get optionsMap() {
    return this._def.optionsMap;
  }
  static create(discriminator, options, params) {
    const optionsMap = new Map;
    for (const type of options) {
      const discriminatorValues = getDiscriminator(type.shape[discriminator]);
      if (!discriminatorValues.length) {
        throw new Error(`A discriminator value for key \`${discriminator}\` could not be extracted from all schema options`);
      }
      for (const value of discriminatorValues) {
        if (optionsMap.has(value)) {
          throw new Error(`Discriminator property ${String(discriminator)} has duplicate value ${String(value)}`);
        }
        optionsMap.set(value, type);
      }
    }
    return new ZodDiscriminatedUnion({
      typeName: ZodFirstPartyTypeKind.ZodDiscriminatedUnion,
      discriminator,
      options,
      optionsMap,
      ...processCreateParams(params)
    });
  }
}
function mergeValues(a, b) {
  const aType = getParsedType(a);
  const bType = getParsedType(b);
  if (a === b) {
    return { valid: true, data: a };
  } else if (aType === ZodParsedType.object && bType === ZodParsedType.object) {
    const bKeys = util.objectKeys(b);
    const sharedKeys = util.objectKeys(a).filter((key) => bKeys.indexOf(key) !== -1);
    const newObj = { ...a, ...b };
    for (const key of sharedKeys) {
      const sharedValue = mergeValues(a[key], b[key]);
      if (!sharedValue.valid) {
        return { valid: false };
      }
      newObj[key] = sharedValue.data;
    }
    return { valid: true, data: newObj };
  } else if (aType === ZodParsedType.array && bType === ZodParsedType.array) {
    if (a.length !== b.length) {
      return { valid: false };
    }
    const newArray = [];
    for (let index = 0;index < a.length; index++) {
      const itemA = a[index];
      const itemB = b[index];
      const sharedValue = mergeValues(itemA, itemB);
      if (!sharedValue.valid) {
        return { valid: false };
      }
      newArray.push(sharedValue.data);
    }
    return { valid: true, data: newArray };
  } else if (aType === ZodParsedType.date && bType === ZodParsedType.date && +a === +b) {
    return { valid: true, data: a };
  } else {
    return { valid: false };
  }
}

class ZodIntersection extends ZodType {
  _parse(input) {
    const { status, ctx } = this._processInputParams(input);
    const handleParsed = (parsedLeft, parsedRight) => {
      if (isAborted(parsedLeft) || isAborted(parsedRight)) {
        return INVALID;
      }
      const merged = mergeValues(parsedLeft.value, parsedRight.value);
      if (!merged.valid) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.invalid_intersection_types
        });
        return INVALID;
      }
      if (isDirty(parsedLeft) || isDirty(parsedRight)) {
        status.dirty();
      }
      return { status: status.value, value: merged.data };
    };
    if (ctx.common.async) {
      return Promise.all([
        this._def.left._parseAsync({
          data: ctx.data,
          path: ctx.path,
          parent: ctx
        }),
        this._def.right._parseAsync({
          data: ctx.data,
          path: ctx.path,
          parent: ctx
        })
      ]).then(([left, right]) => handleParsed(left, right));
    } else {
      return handleParsed(this._def.left._parseSync({
        data: ctx.data,
        path: ctx.path,
        parent: ctx
      }), this._def.right._parseSync({
        data: ctx.data,
        path: ctx.path,
        parent: ctx
      }));
    }
  }
}
ZodIntersection.create = (left, right, params) => {
  return new ZodIntersection({
    left,
    right,
    typeName: ZodFirstPartyTypeKind.ZodIntersection,
    ...processCreateParams(params)
  });
};

class ZodTuple extends ZodType {
  _parse(input) {
    const { status, ctx } = this._processInputParams(input);
    if (ctx.parsedType !== ZodParsedType.array) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.array,
        received: ctx.parsedType
      });
      return INVALID;
    }
    if (ctx.data.length < this._def.items.length) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.too_small,
        minimum: this._def.items.length,
        inclusive: true,
        exact: false,
        type: "array"
      });
      return INVALID;
    }
    const rest = this._def.rest;
    if (!rest && ctx.data.length > this._def.items.length) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.too_big,
        maximum: this._def.items.length,
        inclusive: true,
        exact: false,
        type: "array"
      });
      status.dirty();
    }
    const items = [...ctx.data].map((item, itemIndex) => {
      const schema = this._def.items[itemIndex] || this._def.rest;
      if (!schema)
        return null;
      return schema._parse(new ParseInputLazyPath(ctx, item, ctx.path, itemIndex));
    }).filter((x) => !!x);
    if (ctx.common.async) {
      return Promise.all(items).then((results) => {
        return ParseStatus.mergeArray(status, results);
      });
    } else {
      return ParseStatus.mergeArray(status, items);
    }
  }
  get items() {
    return this._def.items;
  }
  rest(rest) {
    return new ZodTuple({
      ...this._def,
      rest
    });
  }
}
ZodTuple.create = (schemas, params) => {
  if (!Array.isArray(schemas)) {
    throw new Error("You must pass an array of schemas to z.tuple([ ... ])");
  }
  return new ZodTuple({
    items: schemas,
    typeName: ZodFirstPartyTypeKind.ZodTuple,
    rest: null,
    ...processCreateParams(params)
  });
};

class ZodRecord extends ZodType {
  get keySchema() {
    return this._def.keyType;
  }
  get valueSchema() {
    return this._def.valueType;
  }
  _parse(input) {
    const { status, ctx } = this._processInputParams(input);
    if (ctx.parsedType !== ZodParsedType.object) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.object,
        received: ctx.parsedType
      });
      return INVALID;
    }
    const pairs = [];
    const keyType = this._def.keyType;
    const valueType = this._def.valueType;
    for (const key in ctx.data) {
      pairs.push({
        key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, key)),
        value: valueType._parse(new ParseInputLazyPath(ctx, ctx.data[key], ctx.path, key)),
        alwaysSet: key in ctx.data
      });
    }
    if (ctx.common.async) {
      return ParseStatus.mergeObjectAsync(status, pairs);
    } else {
      return ParseStatus.mergeObjectSync(status, pairs);
    }
  }
  get element() {
    return this._def.valueType;
  }
  static create(first, second, third) {
    if (second instanceof ZodType) {
      return new ZodRecord({
        keyType: first,
        valueType: second,
        typeName: ZodFirstPartyTypeKind.ZodRecord,
        ...processCreateParams(third)
      });
    }
    return new ZodRecord({
      keyType: ZodString.create(),
      valueType: first,
      typeName: ZodFirstPartyTypeKind.ZodRecord,
      ...processCreateParams(second)
    });
  }
}

class ZodMap extends ZodType {
  get keySchema() {
    return this._def.keyType;
  }
  get valueSchema() {
    return this._def.valueType;
  }
  _parse(input) {
    const { status, ctx } = this._processInputParams(input);
    if (ctx.parsedType !== ZodParsedType.map) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.map,
        received: ctx.parsedType
      });
      return INVALID;
    }
    const keyType = this._def.keyType;
    const valueType = this._def.valueType;
    const pairs = [...ctx.data.entries()].map(([key, value], index) => {
      return {
        key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, [index, "key"])),
        value: valueType._parse(new ParseInputLazyPath(ctx, value, ctx.path, [index, "value"]))
      };
    });
    if (ctx.common.async) {
      const finalMap = new Map;
      return Promise.resolve().then(async () => {
        for (const pair of pairs) {
          const key = await pair.key;
          const value = await pair.value;
          if (key.status === "aborted" || value.status === "aborted") {
            return INVALID;
          }
          if (key.status === "dirty" || value.status === "dirty") {
            status.dirty();
          }
          finalMap.set(key.value, value.value);
        }
        return { status: status.value, value: finalMap };
      });
    } else {
      const finalMap = new Map;
      for (const pair of pairs) {
        const key = pair.key;
        const value = pair.value;
        if (key.status === "aborted" || value.status === "aborted") {
          return INVALID;
        }
        if (key.status === "dirty" || value.status === "dirty") {
          status.dirty();
        }
        finalMap.set(key.value, value.value);
      }
      return { status: status.value, value: finalMap };
    }
  }
}
ZodMap.create = (keyType, valueType, params) => {
  return new ZodMap({
    valueType,
    keyType,
    typeName: ZodFirstPartyTypeKind.ZodMap,
    ...processCreateParams(params)
  });
};

class ZodSet extends ZodType {
  _parse(input) {
    const { status, ctx } = this._processInputParams(input);
    if (ctx.parsedType !== ZodParsedType.set) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.set,
        received: ctx.parsedType
      });
      return INVALID;
    }
    const def = this._def;
    if (def.minSize !== null) {
      if (ctx.data.size < def.minSize.value) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.too_small,
          minimum: def.minSize.value,
          type: "set",
          inclusive: true,
          exact: false,
          message: def.minSize.message
        });
        status.dirty();
      }
    }
    if (def.maxSize !== null) {
      if (ctx.data.size > def.maxSize.value) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.too_big,
          maximum: def.maxSize.value,
          type: "set",
          inclusive: true,
          exact: false,
          message: def.maxSize.message
        });
        status.dirty();
      }
    }
    const valueType = this._def.valueType;
    function finalizeSet(elements2) {
      const parsedSet = new Set;
      for (const element of elements2) {
        if (element.status === "aborted")
          return INVALID;
        if (element.status === "dirty")
          status.dirty();
        parsedSet.add(element.value);
      }
      return { status: status.value, value: parsedSet };
    }
    const elements = [...ctx.data.values()].map((item, i) => valueType._parse(new ParseInputLazyPath(ctx, item, ctx.path, i)));
    if (ctx.common.async) {
      return Promise.all(elements).then((elements2) => finalizeSet(elements2));
    } else {
      return finalizeSet(elements);
    }
  }
  min(minSize, message) {
    return new ZodSet({
      ...this._def,
      minSize: { value: minSize, message: errorUtil.toString(message) }
    });
  }
  max(maxSize, message) {
    return new ZodSet({
      ...this._def,
      maxSize: { value: maxSize, message: errorUtil.toString(message) }
    });
  }
  size(size, message) {
    return this.min(size, message).max(size, message);
  }
  nonempty(message) {
    return this.min(1, message);
  }
}
ZodSet.create = (valueType, params) => {
  return new ZodSet({
    valueType,
    minSize: null,
    maxSize: null,
    typeName: ZodFirstPartyTypeKind.ZodSet,
    ...processCreateParams(params)
  });
};

class ZodFunction extends ZodType {
  constructor() {
    super(...arguments);
    this.validate = this.implement;
  }
  _parse(input) {
    const { ctx } = this._processInputParams(input);
    if (ctx.parsedType !== ZodParsedType.function) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.function,
        received: ctx.parsedType
      });
      return INVALID;
    }
    function makeArgsIssue(args, error) {
      return makeIssue({
        data: args,
        path: ctx.path,
        errorMaps: [ctx.common.contextualErrorMap, ctx.schemaErrorMap, getErrorMap(), en_default].filter((x) => !!x),
        issueData: {
          code: ZodIssueCode.invalid_arguments,
          argumentsError: error
        }
      });
    }
    function makeReturnsIssue(returns, error) {
      return makeIssue({
        data: returns,
        path: ctx.path,
        errorMaps: [ctx.common.contextualErrorMap, ctx.schemaErrorMap, getErrorMap(), en_default].filter((x) => !!x),
        issueData: {
          code: ZodIssueCode.invalid_return_type,
          returnTypeError: error
        }
      });
    }
    const params = { errorMap: ctx.common.contextualErrorMap };
    const fn = ctx.data;
    if (this._def.returns instanceof ZodPromise) {
      const me = this;
      return OK(async function(...args) {
        const error = new ZodError([]);
        const parsedArgs = await me._def.args.parseAsync(args, params).catch((e) => {
          error.addIssue(makeArgsIssue(args, e));
          throw error;
        });
        const result = await Reflect.apply(fn, this, parsedArgs);
        const parsedReturns = await me._def.returns._def.type.parseAsync(result, params).catch((e) => {
          error.addIssue(makeReturnsIssue(result, e));
          throw error;
        });
        return parsedReturns;
      });
    } else {
      const me = this;
      return OK(function(...args) {
        const parsedArgs = me._def.args.safeParse(args, params);
        if (!parsedArgs.success) {
          throw new ZodError([makeArgsIssue(args, parsedArgs.error)]);
        }
        const result = Reflect.apply(fn, this, parsedArgs.data);
        const parsedReturns = me._def.returns.safeParse(result, params);
        if (!parsedReturns.success) {
          throw new ZodError([makeReturnsIssue(result, parsedReturns.error)]);
        }
        return parsedReturns.data;
      });
    }
  }
  parameters() {
    return this._def.args;
  }
  returnType() {
    return this._def.returns;
  }
  args(...items) {
    return new ZodFunction({
      ...this._def,
      args: ZodTuple.create(items).rest(ZodUnknown.create())
    });
  }
  returns(returnType) {
    return new ZodFunction({
      ...this._def,
      returns: returnType
    });
  }
  implement(func) {
    const validatedFunc = this.parse(func);
    return validatedFunc;
  }
  strictImplement(func) {
    const validatedFunc = this.parse(func);
    return validatedFunc;
  }
  static create(args, returns, params) {
    return new ZodFunction({
      args: args ? args : ZodTuple.create([]).rest(ZodUnknown.create()),
      returns: returns || ZodUnknown.create(),
      typeName: ZodFirstPartyTypeKind.ZodFunction,
      ...processCreateParams(params)
    });
  }
}

class ZodLazy extends ZodType {
  get schema() {
    return this._def.getter();
  }
  _parse(input) {
    const { ctx } = this._processInputParams(input);
    const lazySchema = this._def.getter();
    return lazySchema._parse({ data: ctx.data, path: ctx.path, parent: ctx });
  }
}
ZodLazy.create = (getter, params) => {
  return new ZodLazy({
    getter,
    typeName: ZodFirstPartyTypeKind.ZodLazy,
    ...processCreateParams(params)
  });
};

class ZodLiteral extends ZodType {
  _parse(input) {
    if (input.data !== this._def.value) {
      const ctx = this._getOrReturnCtx(input);
      addIssueToContext(ctx, {
        received: ctx.data,
        code: ZodIssueCode.invalid_literal,
        expected: this._def.value
      });
      return INVALID;
    }
    return { status: "valid", value: input.data };
  }
  get value() {
    return this._def.value;
  }
}
ZodLiteral.create = (value, params) => {
  return new ZodLiteral({
    value,
    typeName: ZodFirstPartyTypeKind.ZodLiteral,
    ...processCreateParams(params)
  });
};
function createZodEnum(values, params) {
  return new ZodEnum({
    values,
    typeName: ZodFirstPartyTypeKind.ZodEnum,
    ...processCreateParams(params)
  });
}

class ZodEnum extends ZodType {
  _parse(input) {
    if (typeof input.data !== "string") {
      const ctx = this._getOrReturnCtx(input);
      const expectedValues = this._def.values;
      addIssueToContext(ctx, {
        expected: util.joinValues(expectedValues),
        received: ctx.parsedType,
        code: ZodIssueCode.invalid_type
      });
      return INVALID;
    }
    if (!this._cache) {
      this._cache = new Set(this._def.values);
    }
    if (!this._cache.has(input.data)) {
      const ctx = this._getOrReturnCtx(input);
      const expectedValues = this._def.values;
      addIssueToContext(ctx, {
        received: ctx.data,
        code: ZodIssueCode.invalid_enum_value,
        options: expectedValues
      });
      return INVALID;
    }
    return OK(input.data);
  }
  get options() {
    return this._def.values;
  }
  get enum() {
    const enumValues = {};
    for (const val of this._def.values) {
      enumValues[val] = val;
    }
    return enumValues;
  }
  get Values() {
    const enumValues = {};
    for (const val of this._def.values) {
      enumValues[val] = val;
    }
    return enumValues;
  }
  get Enum() {
    const enumValues = {};
    for (const val of this._def.values) {
      enumValues[val] = val;
    }
    return enumValues;
  }
  extract(values, newDef = this._def) {
    return ZodEnum.create(values, {
      ...this._def,
      ...newDef
    });
  }
  exclude(values, newDef = this._def) {
    return ZodEnum.create(this.options.filter((opt) => !values.includes(opt)), {
      ...this._def,
      ...newDef
    });
  }
}
ZodEnum.create = createZodEnum;

class ZodNativeEnum extends ZodType {
  _parse(input) {
    const nativeEnumValues = util.getValidEnumValues(this._def.values);
    const ctx = this._getOrReturnCtx(input);
    if (ctx.parsedType !== ZodParsedType.string && ctx.parsedType !== ZodParsedType.number) {
      const expectedValues = util.objectValues(nativeEnumValues);
      addIssueToContext(ctx, {
        expected: util.joinValues(expectedValues),
        received: ctx.parsedType,
        code: ZodIssueCode.invalid_type
      });
      return INVALID;
    }
    if (!this._cache) {
      this._cache = new Set(util.getValidEnumValues(this._def.values));
    }
    if (!this._cache.has(input.data)) {
      const expectedValues = util.objectValues(nativeEnumValues);
      addIssueToContext(ctx, {
        received: ctx.data,
        code: ZodIssueCode.invalid_enum_value,
        options: expectedValues
      });
      return INVALID;
    }
    return OK(input.data);
  }
  get enum() {
    return this._def.values;
  }
}
ZodNativeEnum.create = (values, params) => {
  return new ZodNativeEnum({
    values,
    typeName: ZodFirstPartyTypeKind.ZodNativeEnum,
    ...processCreateParams(params)
  });
};

class ZodPromise extends ZodType {
  unwrap() {
    return this._def.type;
  }
  _parse(input) {
    const { ctx } = this._processInputParams(input);
    if (ctx.parsedType !== ZodParsedType.promise && ctx.common.async === false) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.promise,
        received: ctx.parsedType
      });
      return INVALID;
    }
    const promisified = ctx.parsedType === ZodParsedType.promise ? ctx.data : Promise.resolve(ctx.data);
    return OK(promisified.then((data) => {
      return this._def.type.parseAsync(data, {
        path: ctx.path,
        errorMap: ctx.common.contextualErrorMap
      });
    }));
  }
}
ZodPromise.create = (schema, params) => {
  return new ZodPromise({
    type: schema,
    typeName: ZodFirstPartyTypeKind.ZodPromise,
    ...processCreateParams(params)
  });
};

class ZodEffects extends ZodType {
  innerType() {
    return this._def.schema;
  }
  sourceType() {
    return this._def.schema._def.typeName === ZodFirstPartyTypeKind.ZodEffects ? this._def.schema.sourceType() : this._def.schema;
  }
  _parse(input) {
    const { status, ctx } = this._processInputParams(input);
    const effect = this._def.effect || null;
    const checkCtx = {
      addIssue: (arg) => {
        addIssueToContext(ctx, arg);
        if (arg.fatal) {
          status.abort();
        } else {
          status.dirty();
        }
      },
      get path() {
        return ctx.path;
      }
    };
    checkCtx.addIssue = checkCtx.addIssue.bind(checkCtx);
    if (effect.type === "preprocess") {
      const processed = effect.transform(ctx.data, checkCtx);
      if (ctx.common.async) {
        return Promise.resolve(processed).then(async (processed2) => {
          if (status.value === "aborted")
            return INVALID;
          const result = await this._def.schema._parseAsync({
            data: processed2,
            path: ctx.path,
            parent: ctx
          });
          if (result.status === "aborted")
            return INVALID;
          if (result.status === "dirty")
            return DIRTY(result.value);
          if (status.value === "dirty")
            return DIRTY(result.value);
          return result;
        });
      } else {
        if (status.value === "aborted")
          return INVALID;
        const result = this._def.schema._parseSync({
          data: processed,
          path: ctx.path,
          parent: ctx
        });
        if (result.status === "aborted")
          return INVALID;
        if (result.status === "dirty")
          return DIRTY(result.value);
        if (status.value === "dirty")
          return DIRTY(result.value);
        return result;
      }
    }
    if (effect.type === "refinement") {
      const executeRefinement = (acc) => {
        const result = effect.refinement(acc, checkCtx);
        if (ctx.common.async) {
          return Promise.resolve(result);
        }
        if (result instanceof Promise) {
          throw new Error("Async refinement encountered during synchronous parse operation. Use .parseAsync instead.");
        }
        return acc;
      };
      if (ctx.common.async === false) {
        const inner = this._def.schema._parseSync({
          data: ctx.data,
          path: ctx.path,
          parent: ctx
        });
        if (inner.status === "aborted")
          return INVALID;
        if (inner.status === "dirty")
          status.dirty();
        executeRefinement(inner.value);
        return { status: status.value, value: inner.value };
      } else {
        return this._def.schema._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx }).then((inner) => {
          if (inner.status === "aborted")
            return INVALID;
          if (inner.status === "dirty")
            status.dirty();
          return executeRefinement(inner.value).then(() => {
            return { status: status.value, value: inner.value };
          });
        });
      }
    }
    if (effect.type === "transform") {
      if (ctx.common.async === false) {
        const base = this._def.schema._parseSync({
          data: ctx.data,
          path: ctx.path,
          parent: ctx
        });
        if (!isValid(base))
          return INVALID;
        const result = effect.transform(base.value, checkCtx);
        if (result instanceof Promise) {
          throw new Error(`Asynchronous transform encountered during synchronous parse operation. Use .parseAsync instead.`);
        }
        return { status: status.value, value: result };
      } else {
        return this._def.schema._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx }).then((base) => {
          if (!isValid(base))
            return INVALID;
          return Promise.resolve(effect.transform(base.value, checkCtx)).then((result) => ({
            status: status.value,
            value: result
          }));
        });
      }
    }
    util.assertNever(effect);
  }
}
ZodEffects.create = (schema, effect, params) => {
  return new ZodEffects({
    schema,
    typeName: ZodFirstPartyTypeKind.ZodEffects,
    effect,
    ...processCreateParams(params)
  });
};
ZodEffects.createWithPreprocess = (preprocess, schema, params) => {
  return new ZodEffects({
    schema,
    effect: { type: "preprocess", transform: preprocess },
    typeName: ZodFirstPartyTypeKind.ZodEffects,
    ...processCreateParams(params)
  });
};
class ZodOptional extends ZodType {
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType === ZodParsedType.undefined) {
      return OK(undefined);
    }
    return this._def.innerType._parse(input);
  }
  unwrap() {
    return this._def.innerType;
  }
}
ZodOptional.create = (type, params) => {
  return new ZodOptional({
    innerType: type,
    typeName: ZodFirstPartyTypeKind.ZodOptional,
    ...processCreateParams(params)
  });
};

class ZodNullable extends ZodType {
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType === ZodParsedType.null) {
      return OK(null);
    }
    return this._def.innerType._parse(input);
  }
  unwrap() {
    return this._def.innerType;
  }
}
ZodNullable.create = (type, params) => {
  return new ZodNullable({
    innerType: type,
    typeName: ZodFirstPartyTypeKind.ZodNullable,
    ...processCreateParams(params)
  });
};

class ZodDefault extends ZodType {
  _parse(input) {
    const { ctx } = this._processInputParams(input);
    let data = ctx.data;
    if (ctx.parsedType === ZodParsedType.undefined) {
      data = this._def.defaultValue();
    }
    return this._def.innerType._parse({
      data,
      path: ctx.path,
      parent: ctx
    });
  }
  removeDefault() {
    return this._def.innerType;
  }
}
ZodDefault.create = (type, params) => {
  return new ZodDefault({
    innerType: type,
    typeName: ZodFirstPartyTypeKind.ZodDefault,
    defaultValue: typeof params.default === "function" ? params.default : () => params.default,
    ...processCreateParams(params)
  });
};

class ZodCatch extends ZodType {
  _parse(input) {
    const { ctx } = this._processInputParams(input);
    const newCtx = {
      ...ctx,
      common: {
        ...ctx.common,
        issues: []
      }
    };
    const result = this._def.innerType._parse({
      data: newCtx.data,
      path: newCtx.path,
      parent: {
        ...newCtx
      }
    });
    if (isAsync(result)) {
      return result.then((result2) => {
        return {
          status: "valid",
          value: result2.status === "valid" ? result2.value : this._def.catchValue({
            get error() {
              return new ZodError(newCtx.common.issues);
            },
            input: newCtx.data
          })
        };
      });
    } else {
      return {
        status: "valid",
        value: result.status === "valid" ? result.value : this._def.catchValue({
          get error() {
            return new ZodError(newCtx.common.issues);
          },
          input: newCtx.data
        })
      };
    }
  }
  removeCatch() {
    return this._def.innerType;
  }
}
ZodCatch.create = (type, params) => {
  return new ZodCatch({
    innerType: type,
    typeName: ZodFirstPartyTypeKind.ZodCatch,
    catchValue: typeof params.catch === "function" ? params.catch : () => params.catch,
    ...processCreateParams(params)
  });
};

class ZodNaN extends ZodType {
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.nan) {
      const ctx = this._getOrReturnCtx(input);
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.nan,
        received: ctx.parsedType
      });
      return INVALID;
    }
    return { status: "valid", value: input.data };
  }
}
ZodNaN.create = (params) => {
  return new ZodNaN({
    typeName: ZodFirstPartyTypeKind.ZodNaN,
    ...processCreateParams(params)
  });
};
var BRAND = Symbol("zod_brand");

class ZodBranded extends ZodType {
  _parse(input) {
    const { ctx } = this._processInputParams(input);
    const data = ctx.data;
    return this._def.type._parse({
      data,
      path: ctx.path,
      parent: ctx
    });
  }
  unwrap() {
    return this._def.type;
  }
}

class ZodPipeline extends ZodType {
  _parse(input) {
    const { status, ctx } = this._processInputParams(input);
    if (ctx.common.async) {
      const handleAsync = async () => {
        const inResult = await this._def.in._parseAsync({
          data: ctx.data,
          path: ctx.path,
          parent: ctx
        });
        if (inResult.status === "aborted")
          return INVALID;
        if (inResult.status === "dirty") {
          status.dirty();
          return DIRTY(inResult.value);
        } else {
          return this._def.out._parseAsync({
            data: inResult.value,
            path: ctx.path,
            parent: ctx
          });
        }
      };
      return handleAsync();
    } else {
      const inResult = this._def.in._parseSync({
        data: ctx.data,
        path: ctx.path,
        parent: ctx
      });
      if (inResult.status === "aborted")
        return INVALID;
      if (inResult.status === "dirty") {
        status.dirty();
        return {
          status: "dirty",
          value: inResult.value
        };
      } else {
        return this._def.out._parseSync({
          data: inResult.value,
          path: ctx.path,
          parent: ctx
        });
      }
    }
  }
  static create(a, b) {
    return new ZodPipeline({
      in: a,
      out: b,
      typeName: ZodFirstPartyTypeKind.ZodPipeline
    });
  }
}

class ZodReadonly extends ZodType {
  _parse(input) {
    const result = this._def.innerType._parse(input);
    const freeze = (data) => {
      if (isValid(data)) {
        data.value = Object.freeze(data.value);
      }
      return data;
    };
    return isAsync(result) ? result.then((data) => freeze(data)) : freeze(result);
  }
  unwrap() {
    return this._def.innerType;
  }
}
ZodReadonly.create = (type, params) => {
  return new ZodReadonly({
    innerType: type,
    typeName: ZodFirstPartyTypeKind.ZodReadonly,
    ...processCreateParams(params)
  });
};
function cleanParams(params, data) {
  const p = typeof params === "function" ? params(data) : typeof params === "string" ? { message: params } : params;
  const p2 = typeof p === "string" ? { message: p } : p;
  return p2;
}
function custom(check, _params = {}, fatal) {
  if (check)
    return ZodAny.create().superRefine((data, ctx) => {
      const r = check(data);
      if (r instanceof Promise) {
        return r.then((r2) => {
          if (!r2) {
            const params = cleanParams(_params, data);
            const _fatal = params.fatal ?? fatal ?? true;
            ctx.addIssue({ code: "custom", ...params, fatal: _fatal });
          }
        });
      }
      if (!r) {
        const params = cleanParams(_params, data);
        const _fatal = params.fatal ?? fatal ?? true;
        ctx.addIssue({ code: "custom", ...params, fatal: _fatal });
      }
      return;
    });
  return ZodAny.create();
}
var late = {
  object: ZodObject.lazycreate
};
var ZodFirstPartyTypeKind;
(function(ZodFirstPartyTypeKind2) {
  ZodFirstPartyTypeKind2["ZodString"] = "ZodString";
  ZodFirstPartyTypeKind2["ZodNumber"] = "ZodNumber";
  ZodFirstPartyTypeKind2["ZodNaN"] = "ZodNaN";
  ZodFirstPartyTypeKind2["ZodBigInt"] = "ZodBigInt";
  ZodFirstPartyTypeKind2["ZodBoolean"] = "ZodBoolean";
  ZodFirstPartyTypeKind2["ZodDate"] = "ZodDate";
  ZodFirstPartyTypeKind2["ZodSymbol"] = "ZodSymbol";
  ZodFirstPartyTypeKind2["ZodUndefined"] = "ZodUndefined";
  ZodFirstPartyTypeKind2["ZodNull"] = "ZodNull";
  ZodFirstPartyTypeKind2["ZodAny"] = "ZodAny";
  ZodFirstPartyTypeKind2["ZodUnknown"] = "ZodUnknown";
  ZodFirstPartyTypeKind2["ZodNever"] = "ZodNever";
  ZodFirstPartyTypeKind2["ZodVoid"] = "ZodVoid";
  ZodFirstPartyTypeKind2["ZodArray"] = "ZodArray";
  ZodFirstPartyTypeKind2["ZodObject"] = "ZodObject";
  ZodFirstPartyTypeKind2["ZodUnion"] = "ZodUnion";
  ZodFirstPartyTypeKind2["ZodDiscriminatedUnion"] = "ZodDiscriminatedUnion";
  ZodFirstPartyTypeKind2["ZodIntersection"] = "ZodIntersection";
  ZodFirstPartyTypeKind2["ZodTuple"] = "ZodTuple";
  ZodFirstPartyTypeKind2["ZodRecord"] = "ZodRecord";
  ZodFirstPartyTypeKind2["ZodMap"] = "ZodMap";
  ZodFirstPartyTypeKind2["ZodSet"] = "ZodSet";
  ZodFirstPartyTypeKind2["ZodFunction"] = "ZodFunction";
  ZodFirstPartyTypeKind2["ZodLazy"] = "ZodLazy";
  ZodFirstPartyTypeKind2["ZodLiteral"] = "ZodLiteral";
  ZodFirstPartyTypeKind2["ZodEnum"] = "ZodEnum";
  ZodFirstPartyTypeKind2["ZodEffects"] = "ZodEffects";
  ZodFirstPartyTypeKind2["ZodNativeEnum"] = "ZodNativeEnum";
  ZodFirstPartyTypeKind2["ZodOptional"] = "ZodOptional";
  ZodFirstPartyTypeKind2["ZodNullable"] = "ZodNullable";
  ZodFirstPartyTypeKind2["ZodDefault"] = "ZodDefault";
  ZodFirstPartyTypeKind2["ZodCatch"] = "ZodCatch";
  ZodFirstPartyTypeKind2["ZodPromise"] = "ZodPromise";
  ZodFirstPartyTypeKind2["ZodBranded"] = "ZodBranded";
  ZodFirstPartyTypeKind2["ZodPipeline"] = "ZodPipeline";
  ZodFirstPartyTypeKind2["ZodReadonly"] = "ZodReadonly";
})(ZodFirstPartyTypeKind || (ZodFirstPartyTypeKind = {}));
var instanceOfType = (cls, params = {
  message: `Input not instance of ${cls.name}`
}) => custom((data) => data instanceof cls, params);
var stringType = ZodString.create;
var numberType = ZodNumber.create;
var nanType = ZodNaN.create;
var bigIntType = ZodBigInt.create;
var booleanType = ZodBoolean.create;
var dateType = ZodDate.create;
var symbolType = ZodSymbol.create;
var undefinedType = ZodUndefined.create;
var nullType = ZodNull.create;
var anyType = ZodAny.create;
var unknownType = ZodUnknown.create;
var neverType = ZodNever.create;
var voidType = ZodVoid.create;
var arrayType = ZodArray.create;
var objectType = ZodObject.create;
var strictObjectType = ZodObject.strictCreate;
var unionType = ZodUnion.create;
var discriminatedUnionType = ZodDiscriminatedUnion.create;
var intersectionType = ZodIntersection.create;
var tupleType = ZodTuple.create;
var recordType = ZodRecord.create;
var mapType = ZodMap.create;
var setType = ZodSet.create;
var functionType = ZodFunction.create;
var lazyType = ZodLazy.create;
var literalType = ZodLiteral.create;
var enumType = ZodEnum.create;
var nativeEnumType = ZodNativeEnum.create;
var promiseType = ZodPromise.create;
var effectsType = ZodEffects.create;
var optionalType = ZodOptional.create;
var nullableType = ZodNullable.create;
var preprocessType = ZodEffects.createWithPreprocess;
var pipelineType = ZodPipeline.create;
var ostring = () => stringType().optional();
var onumber = () => numberType().optional();
var oboolean = () => booleanType().optional();
var coerce = {
  string: (arg) => ZodString.create({ ...arg, coerce: true }),
  number: (arg) => ZodNumber.create({ ...arg, coerce: true }),
  boolean: (arg) => ZodBoolean.create({
    ...arg,
    coerce: true
  }),
  bigint: (arg) => ZodBigInt.create({ ...arg, coerce: true }),
  date: (arg) => ZodDate.create({ ...arg, coerce: true })
};
var NEVER = INVALID;
// node_modules/@modelcontextprotocol/sdk/dist/esm/types.js
var LATEST_PROTOCOL_VERSION = "2025-06-18";
var SUPPORTED_PROTOCOL_VERSIONS = [
  LATEST_PROTOCOL_VERSION,
  "2025-03-26",
  "2024-11-05",
  "2024-10-07"
];
var JSONRPC_VERSION = "2.0";
var ProgressTokenSchema = exports_external.union([exports_external.string(), exports_external.number().int()]);
var CursorSchema = exports_external.string();
var RequestMetaSchema = exports_external.object({
  progressToken: exports_external.optional(ProgressTokenSchema)
}).passthrough();
var BaseRequestParamsSchema = exports_external.object({
  _meta: exports_external.optional(RequestMetaSchema)
}).passthrough();
var RequestSchema = exports_external.object({
  method: exports_external.string(),
  params: exports_external.optional(BaseRequestParamsSchema)
});
var BaseNotificationParamsSchema = exports_external.object({
  _meta: exports_external.optional(exports_external.object({}).passthrough())
}).passthrough();
var NotificationSchema = exports_external.object({
  method: exports_external.string(),
  params: exports_external.optional(BaseNotificationParamsSchema)
});
var ResultSchema = exports_external.object({
  _meta: exports_external.optional(exports_external.object({}).passthrough())
}).passthrough();
var RequestIdSchema = exports_external.union([exports_external.string(), exports_external.number().int()]);
var JSONRPCRequestSchema = exports_external.object({
  jsonrpc: exports_external.literal(JSONRPC_VERSION),
  id: RequestIdSchema
}).merge(RequestSchema).strict();
var isJSONRPCRequest = (value) => JSONRPCRequestSchema.safeParse(value).success;
var JSONRPCNotificationSchema = exports_external.object({
  jsonrpc: exports_external.literal(JSONRPC_VERSION)
}).merge(NotificationSchema).strict();
var isJSONRPCNotification = (value) => JSONRPCNotificationSchema.safeParse(value).success;
var JSONRPCResponseSchema = exports_external.object({
  jsonrpc: exports_external.literal(JSONRPC_VERSION),
  id: RequestIdSchema,
  result: ResultSchema
}).strict();
var isJSONRPCResponse = (value) => JSONRPCResponseSchema.safeParse(value).success;
var ErrorCode;
(function(ErrorCode2) {
  ErrorCode2[ErrorCode2["ConnectionClosed"] = -32000] = "ConnectionClosed";
  ErrorCode2[ErrorCode2["RequestTimeout"] = -32001] = "RequestTimeout";
  ErrorCode2[ErrorCode2["ParseError"] = -32700] = "ParseError";
  ErrorCode2[ErrorCode2["InvalidRequest"] = -32600] = "InvalidRequest";
  ErrorCode2[ErrorCode2["MethodNotFound"] = -32601] = "MethodNotFound";
  ErrorCode2[ErrorCode2["InvalidParams"] = -32602] = "InvalidParams";
  ErrorCode2[ErrorCode2["InternalError"] = -32603] = "InternalError";
})(ErrorCode || (ErrorCode = {}));
var JSONRPCErrorSchema = exports_external.object({
  jsonrpc: exports_external.literal(JSONRPC_VERSION),
  id: RequestIdSchema,
  error: exports_external.object({
    code: exports_external.number().int(),
    message: exports_external.string(),
    data: exports_external.optional(exports_external.unknown())
  })
}).strict();
var isJSONRPCError = (value) => JSONRPCErrorSchema.safeParse(value).success;
var JSONRPCMessageSchema = exports_external.union([
  JSONRPCRequestSchema,
  JSONRPCNotificationSchema,
  JSONRPCResponseSchema,
  JSONRPCErrorSchema
]);
var EmptyResultSchema = ResultSchema.strict();
var CancelledNotificationSchema = NotificationSchema.extend({
  method: exports_external.literal("notifications/cancelled"),
  params: BaseNotificationParamsSchema.extend({
    requestId: RequestIdSchema,
    reason: exports_external.string().optional()
  })
});
var BaseMetadataSchema = exports_external.object({
  name: exports_external.string(),
  title: exports_external.optional(exports_external.string())
}).passthrough();
var ImplementationSchema = BaseMetadataSchema.extend({
  version: exports_external.string()
});
var ClientCapabilitiesSchema = exports_external.object({
  experimental: exports_external.optional(exports_external.object({}).passthrough()),
  sampling: exports_external.optional(exports_external.object({}).passthrough()),
  elicitation: exports_external.optional(exports_external.object({}).passthrough()),
  roots: exports_external.optional(exports_external.object({
    listChanged: exports_external.optional(exports_external.boolean())
  }).passthrough())
}).passthrough();
var InitializeRequestSchema = RequestSchema.extend({
  method: exports_external.literal("initialize"),
  params: BaseRequestParamsSchema.extend({
    protocolVersion: exports_external.string(),
    capabilities: ClientCapabilitiesSchema,
    clientInfo: ImplementationSchema
  })
});
var ServerCapabilitiesSchema = exports_external.object({
  experimental: exports_external.optional(exports_external.object({}).passthrough()),
  logging: exports_external.optional(exports_external.object({}).passthrough()),
  completions: exports_external.optional(exports_external.object({}).passthrough()),
  prompts: exports_external.optional(exports_external.object({
    listChanged: exports_external.optional(exports_external.boolean())
  }).passthrough()),
  resources: exports_external.optional(exports_external.object({
    subscribe: exports_external.optional(exports_external.boolean()),
    listChanged: exports_external.optional(exports_external.boolean())
  }).passthrough()),
  tools: exports_external.optional(exports_external.object({
    listChanged: exports_external.optional(exports_external.boolean())
  }).passthrough())
}).passthrough();
var InitializeResultSchema = ResultSchema.extend({
  protocolVersion: exports_external.string(),
  capabilities: ServerCapabilitiesSchema,
  serverInfo: ImplementationSchema,
  instructions: exports_external.optional(exports_external.string())
});
var InitializedNotificationSchema = NotificationSchema.extend({
  method: exports_external.literal("notifications/initialized")
});
var PingRequestSchema = RequestSchema.extend({
  method: exports_external.literal("ping")
});
var ProgressSchema = exports_external.object({
  progress: exports_external.number(),
  total: exports_external.optional(exports_external.number()),
  message: exports_external.optional(exports_external.string())
}).passthrough();
var ProgressNotificationSchema = NotificationSchema.extend({
  method: exports_external.literal("notifications/progress"),
  params: BaseNotificationParamsSchema.merge(ProgressSchema).extend({
    progressToken: ProgressTokenSchema
  })
});
var PaginatedRequestSchema = RequestSchema.extend({
  params: BaseRequestParamsSchema.extend({
    cursor: exports_external.optional(CursorSchema)
  }).optional()
});
var PaginatedResultSchema = ResultSchema.extend({
  nextCursor: exports_external.optional(CursorSchema)
});
var ResourceContentsSchema = exports_external.object({
  uri: exports_external.string(),
  mimeType: exports_external.optional(exports_external.string()),
  _meta: exports_external.optional(exports_external.object({}).passthrough())
}).passthrough();
var TextResourceContentsSchema = ResourceContentsSchema.extend({
  text: exports_external.string()
});
var BlobResourceContentsSchema = ResourceContentsSchema.extend({
  blob: exports_external.string().base64()
});
var ResourceSchema = BaseMetadataSchema.extend({
  uri: exports_external.string(),
  description: exports_external.optional(exports_external.string()),
  mimeType: exports_external.optional(exports_external.string()),
  _meta: exports_external.optional(exports_external.object({}).passthrough())
});
var ResourceTemplateSchema = BaseMetadataSchema.extend({
  uriTemplate: exports_external.string(),
  description: exports_external.optional(exports_external.string()),
  mimeType: exports_external.optional(exports_external.string()),
  _meta: exports_external.optional(exports_external.object({}).passthrough())
});
var ListResourcesRequestSchema = PaginatedRequestSchema.extend({
  method: exports_external.literal("resources/list")
});
var ListResourcesResultSchema = PaginatedResultSchema.extend({
  resources: exports_external.array(ResourceSchema)
});
var ListResourceTemplatesRequestSchema = PaginatedRequestSchema.extend({
  method: exports_external.literal("resources/templates/list")
});
var ListResourceTemplatesResultSchema = PaginatedResultSchema.extend({
  resourceTemplates: exports_external.array(ResourceTemplateSchema)
});
var ReadResourceRequestSchema = RequestSchema.extend({
  method: exports_external.literal("resources/read"),
  params: BaseRequestParamsSchema.extend({
    uri: exports_external.string()
  })
});
var ReadResourceResultSchema = ResultSchema.extend({
  contents: exports_external.array(exports_external.union([TextResourceContentsSchema, BlobResourceContentsSchema]))
});
var ResourceListChangedNotificationSchema = NotificationSchema.extend({
  method: exports_external.literal("notifications/resources/list_changed")
});
var SubscribeRequestSchema = RequestSchema.extend({
  method: exports_external.literal("resources/subscribe"),
  params: BaseRequestParamsSchema.extend({
    uri: exports_external.string()
  })
});
var UnsubscribeRequestSchema = RequestSchema.extend({
  method: exports_external.literal("resources/unsubscribe"),
  params: BaseRequestParamsSchema.extend({
    uri: exports_external.string()
  })
});
var ResourceUpdatedNotificationSchema = NotificationSchema.extend({
  method: exports_external.literal("notifications/resources/updated"),
  params: BaseNotificationParamsSchema.extend({
    uri: exports_external.string()
  })
});
var PromptArgumentSchema = exports_external.object({
  name: exports_external.string(),
  description: exports_external.optional(exports_external.string()),
  required: exports_external.optional(exports_external.boolean())
}).passthrough();
var PromptSchema = BaseMetadataSchema.extend({
  description: exports_external.optional(exports_external.string()),
  arguments: exports_external.optional(exports_external.array(PromptArgumentSchema)),
  _meta: exports_external.optional(exports_external.object({}).passthrough())
});
var ListPromptsRequestSchema = PaginatedRequestSchema.extend({
  method: exports_external.literal("prompts/list")
});
var ListPromptsResultSchema = PaginatedResultSchema.extend({
  prompts: exports_external.array(PromptSchema)
});
var GetPromptRequestSchema = RequestSchema.extend({
  method: exports_external.literal("prompts/get"),
  params: BaseRequestParamsSchema.extend({
    name: exports_external.string(),
    arguments: exports_external.optional(exports_external.record(exports_external.string()))
  })
});
var TextContentSchema = exports_external.object({
  type: exports_external.literal("text"),
  text: exports_external.string(),
  _meta: exports_external.optional(exports_external.object({}).passthrough())
}).passthrough();
var ImageContentSchema = exports_external.object({
  type: exports_external.literal("image"),
  data: exports_external.string().base64(),
  mimeType: exports_external.string(),
  _meta: exports_external.optional(exports_external.object({}).passthrough())
}).passthrough();
var AudioContentSchema = exports_external.object({
  type: exports_external.literal("audio"),
  data: exports_external.string().base64(),
  mimeType: exports_external.string(),
  _meta: exports_external.optional(exports_external.object({}).passthrough())
}).passthrough();
var EmbeddedResourceSchema = exports_external.object({
  type: exports_external.literal("resource"),
  resource: exports_external.union([TextResourceContentsSchema, BlobResourceContentsSchema]),
  _meta: exports_external.optional(exports_external.object({}).passthrough())
}).passthrough();
var ResourceLinkSchema = ResourceSchema.extend({
  type: exports_external.literal("resource_link")
});
var ContentBlockSchema = exports_external.union([
  TextContentSchema,
  ImageContentSchema,
  AudioContentSchema,
  ResourceLinkSchema,
  EmbeddedResourceSchema
]);
var PromptMessageSchema = exports_external.object({
  role: exports_external.enum(["user", "assistant"]),
  content: ContentBlockSchema
}).passthrough();
var GetPromptResultSchema = ResultSchema.extend({
  description: exports_external.optional(exports_external.string()),
  messages: exports_external.array(PromptMessageSchema)
});
var PromptListChangedNotificationSchema = NotificationSchema.extend({
  method: exports_external.literal("notifications/prompts/list_changed")
});
var ToolAnnotationsSchema = exports_external.object({
  title: exports_external.optional(exports_external.string()),
  readOnlyHint: exports_external.optional(exports_external.boolean()),
  destructiveHint: exports_external.optional(exports_external.boolean()),
  idempotentHint: exports_external.optional(exports_external.boolean()),
  openWorldHint: exports_external.optional(exports_external.boolean())
}).passthrough();
var ToolSchema = BaseMetadataSchema.extend({
  description: exports_external.optional(exports_external.string()),
  inputSchema: exports_external.object({
    type: exports_external.literal("object"),
    properties: exports_external.optional(exports_external.object({}).passthrough()),
    required: exports_external.optional(exports_external.array(exports_external.string()))
  }).passthrough(),
  outputSchema: exports_external.optional(exports_external.object({
    type: exports_external.literal("object"),
    properties: exports_external.optional(exports_external.object({}).passthrough()),
    required: exports_external.optional(exports_external.array(exports_external.string()))
  }).passthrough()),
  annotations: exports_external.optional(ToolAnnotationsSchema),
  _meta: exports_external.optional(exports_external.object({}).passthrough())
});
var ListToolsRequestSchema = PaginatedRequestSchema.extend({
  method: exports_external.literal("tools/list")
});
var ListToolsResultSchema = PaginatedResultSchema.extend({
  tools: exports_external.array(ToolSchema)
});
var CallToolResultSchema = ResultSchema.extend({
  content: exports_external.array(ContentBlockSchema).default([]),
  structuredContent: exports_external.object({}).passthrough().optional(),
  isError: exports_external.optional(exports_external.boolean())
});
var CompatibilityCallToolResultSchema = CallToolResultSchema.or(ResultSchema.extend({
  toolResult: exports_external.unknown()
}));
var CallToolRequestSchema = RequestSchema.extend({
  method: exports_external.literal("tools/call"),
  params: BaseRequestParamsSchema.extend({
    name: exports_external.string(),
    arguments: exports_external.optional(exports_external.record(exports_external.unknown()))
  })
});
var ToolListChangedNotificationSchema = NotificationSchema.extend({
  method: exports_external.literal("notifications/tools/list_changed")
});
var LoggingLevelSchema = exports_external.enum([
  "debug",
  "info",
  "notice",
  "warning",
  "error",
  "critical",
  "alert",
  "emergency"
]);
var SetLevelRequestSchema = RequestSchema.extend({
  method: exports_external.literal("logging/setLevel"),
  params: BaseRequestParamsSchema.extend({
    level: LoggingLevelSchema
  })
});
var LoggingMessageNotificationSchema = NotificationSchema.extend({
  method: exports_external.literal("notifications/message"),
  params: BaseNotificationParamsSchema.extend({
    level: LoggingLevelSchema,
    logger: exports_external.optional(exports_external.string()),
    data: exports_external.unknown()
  })
});
var ModelHintSchema = exports_external.object({
  name: exports_external.string().optional()
}).passthrough();
var ModelPreferencesSchema = exports_external.object({
  hints: exports_external.optional(exports_external.array(ModelHintSchema)),
  costPriority: exports_external.optional(exports_external.number().min(0).max(1)),
  speedPriority: exports_external.optional(exports_external.number().min(0).max(1)),
  intelligencePriority: exports_external.optional(exports_external.number().min(0).max(1))
}).passthrough();
var SamplingMessageSchema = exports_external.object({
  role: exports_external.enum(["user", "assistant"]),
  content: exports_external.union([TextContentSchema, ImageContentSchema, AudioContentSchema])
}).passthrough();
var CreateMessageRequestSchema = RequestSchema.extend({
  method: exports_external.literal("sampling/createMessage"),
  params: BaseRequestParamsSchema.extend({
    messages: exports_external.array(SamplingMessageSchema),
    systemPrompt: exports_external.optional(exports_external.string()),
    includeContext: exports_external.optional(exports_external.enum(["none", "thisServer", "allServers"])),
    temperature: exports_external.optional(exports_external.number()),
    maxTokens: exports_external.number().int(),
    stopSequences: exports_external.optional(exports_external.array(exports_external.string())),
    metadata: exports_external.optional(exports_external.object({}).passthrough()),
    modelPreferences: exports_external.optional(ModelPreferencesSchema)
  })
});
var CreateMessageResultSchema = ResultSchema.extend({
  model: exports_external.string(),
  stopReason: exports_external.optional(exports_external.enum(["endTurn", "stopSequence", "maxTokens"]).or(exports_external.string())),
  role: exports_external.enum(["user", "assistant"]),
  content: exports_external.discriminatedUnion("type", [
    TextContentSchema,
    ImageContentSchema,
    AudioContentSchema
  ])
});
var BooleanSchemaSchema = exports_external.object({
  type: exports_external.literal("boolean"),
  title: exports_external.optional(exports_external.string()),
  description: exports_external.optional(exports_external.string()),
  default: exports_external.optional(exports_external.boolean())
}).passthrough();
var StringSchemaSchema = exports_external.object({
  type: exports_external.literal("string"),
  title: exports_external.optional(exports_external.string()),
  description: exports_external.optional(exports_external.string()),
  minLength: exports_external.optional(exports_external.number()),
  maxLength: exports_external.optional(exports_external.number()),
  format: exports_external.optional(exports_external.enum(["email", "uri", "date", "date-time"]))
}).passthrough();
var NumberSchemaSchema = exports_external.object({
  type: exports_external.enum(["number", "integer"]),
  title: exports_external.optional(exports_external.string()),
  description: exports_external.optional(exports_external.string()),
  minimum: exports_external.optional(exports_external.number()),
  maximum: exports_external.optional(exports_external.number())
}).passthrough();
var EnumSchemaSchema = exports_external.object({
  type: exports_external.literal("string"),
  title: exports_external.optional(exports_external.string()),
  description: exports_external.optional(exports_external.string()),
  enum: exports_external.array(exports_external.string()),
  enumNames: exports_external.optional(exports_external.array(exports_external.string()))
}).passthrough();
var PrimitiveSchemaDefinitionSchema = exports_external.union([
  BooleanSchemaSchema,
  StringSchemaSchema,
  NumberSchemaSchema,
  EnumSchemaSchema
]);
var ElicitRequestSchema = RequestSchema.extend({
  method: exports_external.literal("elicitation/create"),
  params: BaseRequestParamsSchema.extend({
    message: exports_external.string(),
    requestedSchema: exports_external.object({
      type: exports_external.literal("object"),
      properties: exports_external.record(exports_external.string(), PrimitiveSchemaDefinitionSchema),
      required: exports_external.optional(exports_external.array(exports_external.string()))
    }).passthrough()
  })
});
var ElicitResultSchema = ResultSchema.extend({
  action: exports_external.enum(["accept", "decline", "cancel"]),
  content: exports_external.optional(exports_external.record(exports_external.string(), exports_external.unknown()))
});
var ResourceTemplateReferenceSchema = exports_external.object({
  type: exports_external.literal("ref/resource"),
  uri: exports_external.string()
}).passthrough();
var PromptReferenceSchema = exports_external.object({
  type: exports_external.literal("ref/prompt"),
  name: exports_external.string()
}).passthrough();
var CompleteRequestSchema = RequestSchema.extend({
  method: exports_external.literal("completion/complete"),
  params: BaseRequestParamsSchema.extend({
    ref: exports_external.union([PromptReferenceSchema, ResourceTemplateReferenceSchema]),
    argument: exports_external.object({
      name: exports_external.string(),
      value: exports_external.string()
    }).passthrough(),
    context: exports_external.optional(exports_external.object({
      arguments: exports_external.optional(exports_external.record(exports_external.string(), exports_external.string()))
    }))
  })
});
var CompleteResultSchema = ResultSchema.extend({
  completion: exports_external.object({
    values: exports_external.array(exports_external.string()).max(100),
    total: exports_external.optional(exports_external.number().int()),
    hasMore: exports_external.optional(exports_external.boolean())
  }).passthrough()
});
var RootSchema = exports_external.object({
  uri: exports_external.string().startsWith("file://"),
  name: exports_external.optional(exports_external.string()),
  _meta: exports_external.optional(exports_external.object({}).passthrough())
}).passthrough();
var ListRootsRequestSchema = RequestSchema.extend({
  method: exports_external.literal("roots/list")
});
var ListRootsResultSchema = ResultSchema.extend({
  roots: exports_external.array(RootSchema)
});
var RootsListChangedNotificationSchema = NotificationSchema.extend({
  method: exports_external.literal("notifications/roots/list_changed")
});
var ClientRequestSchema = exports_external.union([
  PingRequestSchema,
  InitializeRequestSchema,
  CompleteRequestSchema,
  SetLevelRequestSchema,
  GetPromptRequestSchema,
  ListPromptsRequestSchema,
  ListResourcesRequestSchema,
  ListResourceTemplatesRequestSchema,
  ReadResourceRequestSchema,
  SubscribeRequestSchema,
  UnsubscribeRequestSchema,
  CallToolRequestSchema,
  ListToolsRequestSchema
]);
var ClientNotificationSchema = exports_external.union([
  CancelledNotificationSchema,
  ProgressNotificationSchema,
  InitializedNotificationSchema,
  RootsListChangedNotificationSchema
]);
var ClientResultSchema = exports_external.union([
  EmptyResultSchema,
  CreateMessageResultSchema,
  ElicitResultSchema,
  ListRootsResultSchema
]);
var ServerRequestSchema = exports_external.union([
  PingRequestSchema,
  CreateMessageRequestSchema,
  ElicitRequestSchema,
  ListRootsRequestSchema
]);
var ServerNotificationSchema = exports_external.union([
  CancelledNotificationSchema,
  ProgressNotificationSchema,
  LoggingMessageNotificationSchema,
  ResourceUpdatedNotificationSchema,
  ResourceListChangedNotificationSchema,
  ToolListChangedNotificationSchema,
  PromptListChangedNotificationSchema
]);
var ServerResultSchema = exports_external.union([
  EmptyResultSchema,
  InitializeResultSchema,
  CompleteResultSchema,
  GetPromptResultSchema,
  ListPromptsResultSchema,
  ListResourcesResultSchema,
  ListResourceTemplatesResultSchema,
  ReadResourceResultSchema,
  CallToolResultSchema,
  ListToolsResultSchema
]);

class McpError extends Error {
  constructor(code, message, data) {
    super(`MCP error ${code}: ${message}`);
    this.code = code;
    this.data = data;
    this.name = "McpError";
  }
}

// node_modules/@modelcontextprotocol/sdk/dist/esm/shared/protocol.js
var DEFAULT_REQUEST_TIMEOUT_MSEC = 60000;

class Protocol {
  constructor(_options) {
    this._options = _options;
    this._requestMessageId = 0;
    this._requestHandlers = new Map;
    this._requestHandlerAbortControllers = new Map;
    this._notificationHandlers = new Map;
    this._responseHandlers = new Map;
    this._progressHandlers = new Map;
    this._timeoutInfo = new Map;
    this.setNotificationHandler(CancelledNotificationSchema, (notification) => {
      const controller = this._requestHandlerAbortControllers.get(notification.params.requestId);
      controller === null || controller === undefined || controller.abort(notification.params.reason);
    });
    this.setNotificationHandler(ProgressNotificationSchema, (notification) => {
      this._onprogress(notification);
    });
    this.setRequestHandler(PingRequestSchema, (_request) => ({}));
  }
  _setupTimeout(messageId, timeout, maxTotalTimeout, onTimeout, resetTimeoutOnProgress = false) {
    this._timeoutInfo.set(messageId, {
      timeoutId: setTimeout(onTimeout, timeout),
      startTime: Date.now(),
      timeout,
      maxTotalTimeout,
      resetTimeoutOnProgress,
      onTimeout
    });
  }
  _resetTimeout(messageId) {
    const info = this._timeoutInfo.get(messageId);
    if (!info)
      return false;
    const totalElapsed = Date.now() - info.startTime;
    if (info.maxTotalTimeout && totalElapsed >= info.maxTotalTimeout) {
      this._timeoutInfo.delete(messageId);
      throw new McpError(ErrorCode.RequestTimeout, "Maximum total timeout exceeded", { maxTotalTimeout: info.maxTotalTimeout, totalElapsed });
    }
    clearTimeout(info.timeoutId);
    info.timeoutId = setTimeout(info.onTimeout, info.timeout);
    return true;
  }
  _cleanupTimeout(messageId) {
    const info = this._timeoutInfo.get(messageId);
    if (info) {
      clearTimeout(info.timeoutId);
      this._timeoutInfo.delete(messageId);
    }
  }
  async connect(transport) {
    var _a, _b, _c;
    this._transport = transport;
    const _onclose = (_a = this.transport) === null || _a === undefined ? undefined : _a.onclose;
    this._transport.onclose = () => {
      _onclose === null || _onclose === undefined || _onclose();
      this._onclose();
    };
    const _onerror = (_b = this.transport) === null || _b === undefined ? undefined : _b.onerror;
    this._transport.onerror = (error) => {
      _onerror === null || _onerror === undefined || _onerror(error);
      this._onerror(error);
    };
    const _onmessage = (_c = this._transport) === null || _c === undefined ? undefined : _c.onmessage;
    this._transport.onmessage = (message, extra) => {
      _onmessage === null || _onmessage === undefined || _onmessage(message, extra);
      if (isJSONRPCResponse(message) || isJSONRPCError(message)) {
        this._onresponse(message);
      } else if (isJSONRPCRequest(message)) {
        this._onrequest(message, extra);
      } else if (isJSONRPCNotification(message)) {
        this._onnotification(message);
      } else {
        this._onerror(new Error(`Unknown message type: ${JSON.stringify(message)}`));
      }
    };
    await this._transport.start();
  }
  _onclose() {
    var _a;
    const responseHandlers = this._responseHandlers;
    this._responseHandlers = new Map;
    this._progressHandlers.clear();
    this._transport = undefined;
    (_a = this.onclose) === null || _a === undefined || _a.call(this);
    const error = new McpError(ErrorCode.ConnectionClosed, "Connection closed");
    for (const handler of responseHandlers.values()) {
      handler(error);
    }
  }
  _onerror(error) {
    var _a;
    (_a = this.onerror) === null || _a === undefined || _a.call(this, error);
  }
  _onnotification(notification) {
    var _a;
    const handler = (_a = this._notificationHandlers.get(notification.method)) !== null && _a !== undefined ? _a : this.fallbackNotificationHandler;
    if (handler === undefined) {
      return;
    }
    Promise.resolve().then(() => handler(notification)).catch((error) => this._onerror(new Error(`Uncaught error in notification handler: ${error}`)));
  }
  _onrequest(request, extra) {
    var _a, _b, _c, _d;
    const handler = (_a = this._requestHandlers.get(request.method)) !== null && _a !== undefined ? _a : this.fallbackRequestHandler;
    if (handler === undefined) {
      (_b = this._transport) === null || _b === undefined || _b.send({
        jsonrpc: "2.0",
        id: request.id,
        error: {
          code: ErrorCode.MethodNotFound,
          message: "Method not found"
        }
      }).catch((error) => this._onerror(new Error(`Failed to send an error response: ${error}`)));
      return;
    }
    const abortController = new AbortController;
    this._requestHandlerAbortControllers.set(request.id, abortController);
    const fullExtra = {
      signal: abortController.signal,
      sessionId: (_c = this._transport) === null || _c === undefined ? undefined : _c.sessionId,
      _meta: (_d = request.params) === null || _d === undefined ? undefined : _d._meta,
      sendNotification: (notification) => this.notification(notification, { relatedRequestId: request.id }),
      sendRequest: (r, resultSchema, options) => this.request(r, resultSchema, { ...options, relatedRequestId: request.id }),
      authInfo: extra === null || extra === undefined ? undefined : extra.authInfo,
      requestId: request.id,
      requestInfo: extra === null || extra === undefined ? undefined : extra.requestInfo
    };
    Promise.resolve().then(() => handler(request, fullExtra)).then((result) => {
      var _a2;
      if (abortController.signal.aborted) {
        return;
      }
      return (_a2 = this._transport) === null || _a2 === undefined ? undefined : _a2.send({
        result,
        jsonrpc: "2.0",
        id: request.id
      });
    }, (error) => {
      var _a2, _b2;
      if (abortController.signal.aborted) {
        return;
      }
      return (_a2 = this._transport) === null || _a2 === undefined ? undefined : _a2.send({
        jsonrpc: "2.0",
        id: request.id,
        error: {
          code: Number.isSafeInteger(error["code"]) ? error["code"] : ErrorCode.InternalError,
          message: (_b2 = error.message) !== null && _b2 !== undefined ? _b2 : "Internal error"
        }
      });
    }).catch((error) => this._onerror(new Error(`Failed to send response: ${error}`))).finally(() => {
      this._requestHandlerAbortControllers.delete(request.id);
    });
  }
  _onprogress(notification) {
    const { progressToken, ...params } = notification.params;
    const messageId = Number(progressToken);
    const handler = this._progressHandlers.get(messageId);
    if (!handler) {
      this._onerror(new Error(`Received a progress notification for an unknown token: ${JSON.stringify(notification)}`));
      return;
    }
    const responseHandler = this._responseHandlers.get(messageId);
    const timeoutInfo = this._timeoutInfo.get(messageId);
    if (timeoutInfo && responseHandler && timeoutInfo.resetTimeoutOnProgress) {
      try {
        this._resetTimeout(messageId);
      } catch (error) {
        responseHandler(error);
        return;
      }
    }
    handler(params);
  }
  _onresponse(response) {
    const messageId = Number(response.id);
    const handler = this._responseHandlers.get(messageId);
    if (handler === undefined) {
      this._onerror(new Error(`Received a response for an unknown message ID: ${JSON.stringify(response)}`));
      return;
    }
    this._responseHandlers.delete(messageId);
    this._progressHandlers.delete(messageId);
    this._cleanupTimeout(messageId);
    if (isJSONRPCResponse(response)) {
      handler(response);
    } else {
      const error = new McpError(response.error.code, response.error.message, response.error.data);
      handler(error);
    }
  }
  get transport() {
    return this._transport;
  }
  async close() {
    var _a;
    await ((_a = this._transport) === null || _a === undefined ? undefined : _a.close());
  }
  request(request, resultSchema, options) {
    const { relatedRequestId, resumptionToken, onresumptiontoken } = options !== null && options !== undefined ? options : {};
    return new Promise((resolve, reject) => {
      var _a, _b, _c, _d, _e, _f;
      if (!this._transport) {
        reject(new Error("Not connected"));
        return;
      }
      if (((_a = this._options) === null || _a === undefined ? undefined : _a.enforceStrictCapabilities) === true) {
        this.assertCapabilityForMethod(request.method);
      }
      (_b = options === null || options === undefined ? undefined : options.signal) === null || _b === undefined || _b.throwIfAborted();
      const messageId = this._requestMessageId++;
      const jsonrpcRequest = {
        ...request,
        jsonrpc: "2.0",
        id: messageId
      };
      if (options === null || options === undefined ? undefined : options.onprogress) {
        this._progressHandlers.set(messageId, options.onprogress);
        jsonrpcRequest.params = {
          ...request.params,
          _meta: {
            ...((_c = request.params) === null || _c === undefined ? undefined : _c._meta) || {},
            progressToken: messageId
          }
        };
      }
      const cancel = (reason) => {
        var _a2;
        this._responseHandlers.delete(messageId);
        this._progressHandlers.delete(messageId);
        this._cleanupTimeout(messageId);
        (_a2 = this._transport) === null || _a2 === undefined || _a2.send({
          jsonrpc: "2.0",
          method: "notifications/cancelled",
          params: {
            requestId: messageId,
            reason: String(reason)
          }
        }, { relatedRequestId, resumptionToken, onresumptiontoken }).catch((error) => this._onerror(new Error(`Failed to send cancellation: ${error}`)));
        reject(reason);
      };
      this._responseHandlers.set(messageId, (response) => {
        var _a2;
        if ((_a2 = options === null || options === undefined ? undefined : options.signal) === null || _a2 === undefined ? undefined : _a2.aborted) {
          return;
        }
        if (response instanceof Error) {
          return reject(response);
        }
        try {
          const result = resultSchema.parse(response.result);
          resolve(result);
        } catch (error) {
          reject(error);
        }
      });
      (_d = options === null || options === undefined ? undefined : options.signal) === null || _d === undefined || _d.addEventListener("abort", () => {
        var _a2;
        cancel((_a2 = options === null || options === undefined ? undefined : options.signal) === null || _a2 === undefined ? undefined : _a2.reason);
      });
      const timeout = (_e = options === null || options === undefined ? undefined : options.timeout) !== null && _e !== undefined ? _e : DEFAULT_REQUEST_TIMEOUT_MSEC;
      const timeoutHandler = () => cancel(new McpError(ErrorCode.RequestTimeout, "Request timed out", { timeout }));
      this._setupTimeout(messageId, timeout, options === null || options === undefined ? undefined : options.maxTotalTimeout, timeoutHandler, (_f = options === null || options === undefined ? undefined : options.resetTimeoutOnProgress) !== null && _f !== undefined ? _f : false);
      this._transport.send(jsonrpcRequest, { relatedRequestId, resumptionToken, onresumptiontoken }).catch((error) => {
        this._cleanupTimeout(messageId);
        reject(error);
      });
    });
  }
  async notification(notification, options) {
    if (!this._transport) {
      throw new Error("Not connected");
    }
    this.assertNotificationCapability(notification.method);
    const jsonrpcNotification = {
      ...notification,
      jsonrpc: "2.0"
    };
    await this._transport.send(jsonrpcNotification, options);
  }
  setRequestHandler(requestSchema, handler) {
    const method = requestSchema.shape.method.value;
    this.assertRequestHandlerCapability(method);
    this._requestHandlers.set(method, (request, extra) => {
      return Promise.resolve(handler(requestSchema.parse(request), extra));
    });
  }
  removeRequestHandler(method) {
    this._requestHandlers.delete(method);
  }
  assertCanSetRequestHandler(method) {
    if (this._requestHandlers.has(method)) {
      throw new Error(`A request handler for ${method} already exists, which would be overridden`);
    }
  }
  setNotificationHandler(notificationSchema, handler) {
    this._notificationHandlers.set(notificationSchema.shape.method.value, (notification) => Promise.resolve(handler(notificationSchema.parse(notification))));
  }
  removeNotificationHandler(method) {
    this._notificationHandlers.delete(method);
  }
}
function mergeCapabilities(base, additional) {
  return Object.entries(additional).reduce((acc, [key, value]) => {
    if (value && typeof value === "object") {
      acc[key] = acc[key] ? { ...acc[key], ...value } : value;
    } else {
      acc[key] = value;
    }
    return acc;
  }, { ...base });
}

// node_modules/@modelcontextprotocol/sdk/dist/esm/server/index.js
var import_ajv = __toESM(require_ajv(), 1);

class Server extends Protocol {
  constructor(_serverInfo, options) {
    var _a;
    super(options);
    this._serverInfo = _serverInfo;
    this._capabilities = (_a = options === null || options === undefined ? undefined : options.capabilities) !== null && _a !== undefined ? _a : {};
    this._instructions = options === null || options === undefined ? undefined : options.instructions;
    this.setRequestHandler(InitializeRequestSchema, (request) => this._oninitialize(request));
    this.setNotificationHandler(InitializedNotificationSchema, () => {
      var _a2;
      return (_a2 = this.oninitialized) === null || _a2 === undefined ? undefined : _a2.call(this);
    });
  }
  registerCapabilities(capabilities) {
    if (this.transport) {
      throw new Error("Cannot register capabilities after connecting to transport");
    }
    this._capabilities = mergeCapabilities(this._capabilities, capabilities);
  }
  assertCapabilityForMethod(method) {
    var _a, _b, _c;
    switch (method) {
      case "sampling/createMessage":
        if (!((_a = this._clientCapabilities) === null || _a === undefined ? undefined : _a.sampling)) {
          throw new Error(`Client does not support sampling (required for ${method})`);
        }
        break;
      case "elicitation/create":
        if (!((_b = this._clientCapabilities) === null || _b === undefined ? undefined : _b.elicitation)) {
          throw new Error(`Client does not support elicitation (required for ${method})`);
        }
        break;
      case "roots/list":
        if (!((_c = this._clientCapabilities) === null || _c === undefined ? undefined : _c.roots)) {
          throw new Error(`Client does not support listing roots (required for ${method})`);
        }
        break;
      case "ping":
        break;
    }
  }
  assertNotificationCapability(method) {
    switch (method) {
      case "notifications/message":
        if (!this._capabilities.logging) {
          throw new Error(`Server does not support logging (required for ${method})`);
        }
        break;
      case "notifications/resources/updated":
      case "notifications/resources/list_changed":
        if (!this._capabilities.resources) {
          throw new Error(`Server does not support notifying about resources (required for ${method})`);
        }
        break;
      case "notifications/tools/list_changed":
        if (!this._capabilities.tools) {
          throw new Error(`Server does not support notifying of tool list changes (required for ${method})`);
        }
        break;
      case "notifications/prompts/list_changed":
        if (!this._capabilities.prompts) {
          throw new Error(`Server does not support notifying of prompt list changes (required for ${method})`);
        }
        break;
      case "notifications/cancelled":
        break;
      case "notifications/progress":
        break;
    }
  }
  assertRequestHandlerCapability(method) {
    switch (method) {
      case "sampling/createMessage":
        if (!this._capabilities.sampling) {
          throw new Error(`Server does not support sampling (required for ${method})`);
        }
        break;
      case "logging/setLevel":
        if (!this._capabilities.logging) {
          throw new Error(`Server does not support logging (required for ${method})`);
        }
        break;
      case "prompts/get":
      case "prompts/list":
        if (!this._capabilities.prompts) {
          throw new Error(`Server does not support prompts (required for ${method})`);
        }
        break;
      case "resources/list":
      case "resources/templates/list":
      case "resources/read":
        if (!this._capabilities.resources) {
          throw new Error(`Server does not support resources (required for ${method})`);
        }
        break;
      case "tools/call":
      case "tools/list":
        if (!this._capabilities.tools) {
          throw new Error(`Server does not support tools (required for ${method})`);
        }
        break;
      case "ping":
      case "initialize":
        break;
    }
  }
  async _oninitialize(request) {
    const requestedVersion = request.params.protocolVersion;
    this._clientCapabilities = request.params.capabilities;
    this._clientVersion = request.params.clientInfo;
    const protocolVersion = SUPPORTED_PROTOCOL_VERSIONS.includes(requestedVersion) ? requestedVersion : LATEST_PROTOCOL_VERSION;
    return {
      protocolVersion,
      capabilities: this.getCapabilities(),
      serverInfo: this._serverInfo,
      ...this._instructions && { instructions: this._instructions }
    };
  }
  getClientCapabilities() {
    return this._clientCapabilities;
  }
  getClientVersion() {
    return this._clientVersion;
  }
  getCapabilities() {
    return this._capabilities;
  }
  async ping() {
    return this.request({ method: "ping" }, EmptyResultSchema);
  }
  async createMessage(params, options) {
    return this.request({ method: "sampling/createMessage", params }, CreateMessageResultSchema, options);
  }
  async elicitInput(params, options) {
    const result = await this.request({ method: "elicitation/create", params }, ElicitResultSchema, options);
    if (result.action === "accept" && result.content) {
      try {
        const ajv = new import_ajv.default;
        const validate = ajv.compile(params.requestedSchema);
        const isValid2 = validate(result.content);
        if (!isValid2) {
          throw new McpError(ErrorCode.InvalidParams, `Elicitation response content does not match requested schema: ${ajv.errorsText(validate.errors)}`);
        }
      } catch (error) {
        if (error instanceof McpError) {
          throw error;
        }
        throw new McpError(ErrorCode.InternalError, `Error validating elicitation response: ${error}`);
      }
    }
    return result;
  }
  async listRoots(params, options) {
    return this.request({ method: "roots/list", params }, ListRootsResultSchema, options);
  }
  async sendLoggingMessage(params) {
    return this.notification({ method: "notifications/message", params });
  }
  async sendResourceUpdated(params) {
    return this.notification({
      method: "notifications/resources/updated",
      params
    });
  }
  async sendResourceListChanged() {
    return this.notification({
      method: "notifications/resources/list_changed"
    });
  }
  async sendToolListChanged() {
    return this.notification({ method: "notifications/tools/list_changed" });
  }
  async sendPromptListChanged() {
    return this.notification({ method: "notifications/prompts/list_changed" });
  }
}

// node_modules/zod-to-json-schema/dist/esm/Options.js
var ignoreOverride = Symbol("Let zodToJsonSchema decide on which parser to use");
var defaultOptions = {
  name: undefined,
  $refStrategy: "root",
  basePath: ["#"],
  effectStrategy: "input",
  pipeStrategy: "all",
  dateStrategy: "format:date-time",
  mapStrategy: "entries",
  removeAdditionalStrategy: "passthrough",
  allowedAdditionalProperties: true,
  rejectedAdditionalProperties: false,
  definitionPath: "definitions",
  target: "jsonSchema7",
  strictUnions: false,
  definitions: {},
  errorMessages: false,
  markdownDescription: false,
  patternStrategy: "escape",
  applyRegexFlags: false,
  emailStrategy: "format:email",
  base64Strategy: "contentEncoding:base64",
  nameStrategy: "ref",
  openAiAnyTypeName: "OpenAiAnyType"
};
var getDefaultOptions = (options) => typeof options === "string" ? {
  ...defaultOptions,
  name: options
} : {
  ...defaultOptions,
  ...options
};
// node_modules/zod-to-json-schema/dist/esm/Refs.js
var getRefs = (options) => {
  const _options = getDefaultOptions(options);
  const currentPath = _options.name !== undefined ? [..._options.basePath, _options.definitionPath, _options.name] : _options.basePath;
  return {
    ..._options,
    flags: { hasReferencedOpenAiAnyType: false },
    currentPath,
    propertyPath: undefined,
    seen: new Map(Object.entries(_options.definitions).map(([name, def]) => [
      def._def,
      {
        def: def._def,
        path: [..._options.basePath, _options.definitionPath, name],
        jsonSchema: undefined
      }
    ]))
  };
};
// node_modules/zod-to-json-schema/dist/esm/errorMessages.js
function addErrorMessage(res, key, errorMessage, refs) {
  if (!refs?.errorMessages)
    return;
  if (errorMessage) {
    res.errorMessage = {
      ...res.errorMessage,
      [key]: errorMessage
    };
  }
}
function setResponseValueAndErrors(res, key, value, errorMessage, refs) {
  res[key] = value;
  addErrorMessage(res, key, errorMessage, refs);
}
// node_modules/zod-to-json-schema/dist/esm/getRelativePath.js
var getRelativePath = (pathA, pathB) => {
  let i = 0;
  for (;i < pathA.length && i < pathB.length; i++) {
    if (pathA[i] !== pathB[i])
      break;
  }
  return [(pathA.length - i).toString(), ...pathB.slice(i)].join("/");
};
// node_modules/zod-to-json-schema/dist/esm/parsers/any.js
function parseAnyDef(refs) {
  if (refs.target !== "openAi") {
    return {};
  }
  const anyDefinitionPath = [
    ...refs.basePath,
    refs.definitionPath,
    refs.openAiAnyTypeName
  ];
  refs.flags.hasReferencedOpenAiAnyType = true;
  return {
    $ref: refs.$refStrategy === "relative" ? getRelativePath(anyDefinitionPath, refs.currentPath) : anyDefinitionPath.join("/")
  };
}

// node_modules/zod-to-json-schema/dist/esm/parsers/array.js
function parseArrayDef(def, refs) {
  const res = {
    type: "array"
  };
  if (def.type?._def && def.type?._def?.typeName !== ZodFirstPartyTypeKind.ZodAny) {
    res.items = parseDef(def.type._def, {
      ...refs,
      currentPath: [...refs.currentPath, "items"]
    });
  }
  if (def.minLength) {
    setResponseValueAndErrors(res, "minItems", def.minLength.value, def.minLength.message, refs);
  }
  if (def.maxLength) {
    setResponseValueAndErrors(res, "maxItems", def.maxLength.value, def.maxLength.message, refs);
  }
  if (def.exactLength) {
    setResponseValueAndErrors(res, "minItems", def.exactLength.value, def.exactLength.message, refs);
    setResponseValueAndErrors(res, "maxItems", def.exactLength.value, def.exactLength.message, refs);
  }
  return res;
}

// node_modules/zod-to-json-schema/dist/esm/parsers/bigint.js
function parseBigintDef(def, refs) {
  const res = {
    type: "integer",
    format: "int64"
  };
  if (!def.checks)
    return res;
  for (const check of def.checks) {
    switch (check.kind) {
      case "min":
        if (refs.target === "jsonSchema7") {
          if (check.inclusive) {
            setResponseValueAndErrors(res, "minimum", check.value, check.message, refs);
          } else {
            setResponseValueAndErrors(res, "exclusiveMinimum", check.value, check.message, refs);
          }
        } else {
          if (!check.inclusive) {
            res.exclusiveMinimum = true;
          }
          setResponseValueAndErrors(res, "minimum", check.value, check.message, refs);
        }
        break;
      case "max":
        if (refs.target === "jsonSchema7") {
          if (check.inclusive) {
            setResponseValueAndErrors(res, "maximum", check.value, check.message, refs);
          } else {
            setResponseValueAndErrors(res, "exclusiveMaximum", check.value, check.message, refs);
          }
        } else {
          if (!check.inclusive) {
            res.exclusiveMaximum = true;
          }
          setResponseValueAndErrors(res, "maximum", check.value, check.message, refs);
        }
        break;
      case "multipleOf":
        setResponseValueAndErrors(res, "multipleOf", check.value, check.message, refs);
        break;
    }
  }
  return res;
}

// node_modules/zod-to-json-schema/dist/esm/parsers/boolean.js
function parseBooleanDef() {
  return {
    type: "boolean"
  };
}

// node_modules/zod-to-json-schema/dist/esm/parsers/branded.js
function parseBrandedDef(_def, refs) {
  return parseDef(_def.type._def, refs);
}

// node_modules/zod-to-json-schema/dist/esm/parsers/catch.js
var parseCatchDef = (def, refs) => {
  return parseDef(def.innerType._def, refs);
};

// node_modules/zod-to-json-schema/dist/esm/parsers/date.js
function parseDateDef(def, refs, overrideDateStrategy) {
  const strategy = overrideDateStrategy ?? refs.dateStrategy;
  if (Array.isArray(strategy)) {
    return {
      anyOf: strategy.map((item, i) => parseDateDef(def, refs, item))
    };
  }
  switch (strategy) {
    case "string":
    case "format:date-time":
      return {
        type: "string",
        format: "date-time"
      };
    case "format:date":
      return {
        type: "string",
        format: "date"
      };
    case "integer":
      return integerDateParser(def, refs);
  }
}
var integerDateParser = (def, refs) => {
  const res = {
    type: "integer",
    format: "unix-time"
  };
  if (refs.target === "openApi3") {
    return res;
  }
  for (const check of def.checks) {
    switch (check.kind) {
      case "min":
        setResponseValueAndErrors(res, "minimum", check.value, check.message, refs);
        break;
      case "max":
        setResponseValueAndErrors(res, "maximum", check.value, check.message, refs);
        break;
    }
  }
  return res;
};

// node_modules/zod-to-json-schema/dist/esm/parsers/default.js
function parseDefaultDef(_def, refs) {
  return {
    ...parseDef(_def.innerType._def, refs),
    default: _def.defaultValue()
  };
}

// node_modules/zod-to-json-schema/dist/esm/parsers/effects.js
function parseEffectsDef(_def, refs) {
  return refs.effectStrategy === "input" ? parseDef(_def.schema._def, refs) : parseAnyDef(refs);
}

// node_modules/zod-to-json-schema/dist/esm/parsers/enum.js
function parseEnumDef(def) {
  return {
    type: "string",
    enum: Array.from(def.values)
  };
}

// node_modules/zod-to-json-schema/dist/esm/parsers/intersection.js
var isJsonSchema7AllOfType = (type) => {
  if ("type" in type && type.type === "string")
    return false;
  return "allOf" in type;
};
function parseIntersectionDef(def, refs) {
  const allOf = [
    parseDef(def.left._def, {
      ...refs,
      currentPath: [...refs.currentPath, "allOf", "0"]
    }),
    parseDef(def.right._def, {
      ...refs,
      currentPath: [...refs.currentPath, "allOf", "1"]
    })
  ].filter((x) => !!x);
  let unevaluatedProperties = refs.target === "jsonSchema2019-09" ? { unevaluatedProperties: false } : undefined;
  const mergedAllOf = [];
  allOf.forEach((schema) => {
    if (isJsonSchema7AllOfType(schema)) {
      mergedAllOf.push(...schema.allOf);
      if (schema.unevaluatedProperties === undefined) {
        unevaluatedProperties = undefined;
      }
    } else {
      let nestedSchema = schema;
      if ("additionalProperties" in schema && schema.additionalProperties === false) {
        const { additionalProperties, ...rest } = schema;
        nestedSchema = rest;
      } else {
        unevaluatedProperties = undefined;
      }
      mergedAllOf.push(nestedSchema);
    }
  });
  return mergedAllOf.length ? {
    allOf: mergedAllOf,
    ...unevaluatedProperties
  } : undefined;
}

// node_modules/zod-to-json-schema/dist/esm/parsers/literal.js
function parseLiteralDef(def, refs) {
  const parsedType = typeof def.value;
  if (parsedType !== "bigint" && parsedType !== "number" && parsedType !== "boolean" && parsedType !== "string") {
    return {
      type: Array.isArray(def.value) ? "array" : "object"
    };
  }
  if (refs.target === "openApi3") {
    return {
      type: parsedType === "bigint" ? "integer" : parsedType,
      enum: [def.value]
    };
  }
  return {
    type: parsedType === "bigint" ? "integer" : parsedType,
    const: def.value
  };
}

// node_modules/zod-to-json-schema/dist/esm/parsers/string.js
var emojiRegex2 = undefined;
var zodPatterns = {
  cuid: /^[cC][^\s-]{8,}$/,
  cuid2: /^[0-9a-z]+$/,
  ulid: /^[0-9A-HJKMNP-TV-Z]{26}$/,
  email: /^(?!\.)(?!.*\.\.)([a-zA-Z0-9_'+\-\.]*)[a-zA-Z0-9_+-]@([a-zA-Z0-9][a-zA-Z0-9\-]*\.)+[a-zA-Z]{2,}$/,
  emoji: () => {
    if (emojiRegex2 === undefined) {
      emojiRegex2 = RegExp("^(\\p{Extended_Pictographic}|\\p{Emoji_Component})+$", "u");
    }
    return emojiRegex2;
  },
  uuid: /^[0-9a-fA-F]{8}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{12}$/,
  ipv4: /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])$/,
  ipv4Cidr: /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\/(3[0-2]|[12]?[0-9])$/,
  ipv6: /^(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))$/,
  ipv6Cidr: /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))\/(12[0-8]|1[01][0-9]|[1-9]?[0-9])$/,
  base64: /^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/,
  base64url: /^([0-9a-zA-Z-_]{4})*(([0-9a-zA-Z-_]{2}(==)?)|([0-9a-zA-Z-_]{3}(=)?))?$/,
  nanoid: /^[a-zA-Z0-9_-]{21}$/,
  jwt: /^[A-Za-z0-9-_]+\.[A-Za-z0-9-_]+\.[A-Za-z0-9-_]*$/
};
function parseStringDef(def, refs) {
  const res = {
    type: "string"
  };
  if (def.checks) {
    for (const check of def.checks) {
      switch (check.kind) {
        case "min":
          setResponseValueAndErrors(res, "minLength", typeof res.minLength === "number" ? Math.max(res.minLength, check.value) : check.value, check.message, refs);
          break;
        case "max":
          setResponseValueAndErrors(res, "maxLength", typeof res.maxLength === "number" ? Math.min(res.maxLength, check.value) : check.value, check.message, refs);
          break;
        case "email":
          switch (refs.emailStrategy) {
            case "format:email":
              addFormat(res, "email", check.message, refs);
              break;
            case "format:idn-email":
              addFormat(res, "idn-email", check.message, refs);
              break;
            case "pattern:zod":
              addPattern(res, zodPatterns.email, check.message, refs);
              break;
          }
          break;
        case "url":
          addFormat(res, "uri", check.message, refs);
          break;
        case "uuid":
          addFormat(res, "uuid", check.message, refs);
          break;
        case "regex":
          addPattern(res, check.regex, check.message, refs);
          break;
        case "cuid":
          addPattern(res, zodPatterns.cuid, check.message, refs);
          break;
        case "cuid2":
          addPattern(res, zodPatterns.cuid2, check.message, refs);
          break;
        case "startsWith":
          addPattern(res, RegExp(`^${escapeLiteralCheckValue(check.value, refs)}`), check.message, refs);
          break;
        case "endsWith":
          addPattern(res, RegExp(`${escapeLiteralCheckValue(check.value, refs)}$`), check.message, refs);
          break;
        case "datetime":
          addFormat(res, "date-time", check.message, refs);
          break;
        case "date":
          addFormat(res, "date", check.message, refs);
          break;
        case "time":
          addFormat(res, "time", check.message, refs);
          break;
        case "duration":
          addFormat(res, "duration", check.message, refs);
          break;
        case "length":
          setResponseValueAndErrors(res, "minLength", typeof res.minLength === "number" ? Math.max(res.minLength, check.value) : check.value, check.message, refs);
          setResponseValueAndErrors(res, "maxLength", typeof res.maxLength === "number" ? Math.min(res.maxLength, check.value) : check.value, check.message, refs);
          break;
        case "includes": {
          addPattern(res, RegExp(escapeLiteralCheckValue(check.value, refs)), check.message, refs);
          break;
        }
        case "ip": {
          if (check.version !== "v6") {
            addFormat(res, "ipv4", check.message, refs);
          }
          if (check.version !== "v4") {
            addFormat(res, "ipv6", check.message, refs);
          }
          break;
        }
        case "base64url":
          addPattern(res, zodPatterns.base64url, check.message, refs);
          break;
        case "jwt":
          addPattern(res, zodPatterns.jwt, check.message, refs);
          break;
        case "cidr": {
          if (check.version !== "v6") {
            addPattern(res, zodPatterns.ipv4Cidr, check.message, refs);
          }
          if (check.version !== "v4") {
            addPattern(res, zodPatterns.ipv6Cidr, check.message, refs);
          }
          break;
        }
        case "emoji":
          addPattern(res, zodPatterns.emoji(), check.message, refs);
          break;
        case "ulid": {
          addPattern(res, zodPatterns.ulid, check.message, refs);
          break;
        }
        case "base64": {
          switch (refs.base64Strategy) {
            case "format:binary": {
              addFormat(res, "binary", check.message, refs);
              break;
            }
            case "contentEncoding:base64": {
              setResponseValueAndErrors(res, "contentEncoding", "base64", check.message, refs);
              break;
            }
            case "pattern:zod": {
              addPattern(res, zodPatterns.base64, check.message, refs);
              break;
            }
          }
          break;
        }
        case "nanoid": {
          addPattern(res, zodPatterns.nanoid, check.message, refs);
        }
        case "toLowerCase":
        case "toUpperCase":
        case "trim":
          break;
        default:
          ((_) => {})(check);
      }
    }
  }
  return res;
}
function escapeLiteralCheckValue(literal, refs) {
  return refs.patternStrategy === "escape" ? escapeNonAlphaNumeric(literal) : literal;
}
var ALPHA_NUMERIC = new Set("ABCDEFGHIJKLMNOPQRSTUVXYZabcdefghijklmnopqrstuvxyz0123456789");
function escapeNonAlphaNumeric(source) {
  let result = "";
  for (let i = 0;i < source.length; i++) {
    if (!ALPHA_NUMERIC.has(source[i])) {
      result += "\\";
    }
    result += source[i];
  }
  return result;
}
function addFormat(schema, value, message, refs) {
  if (schema.format || schema.anyOf?.some((x) => x.format)) {
    if (!schema.anyOf) {
      schema.anyOf = [];
    }
    if (schema.format) {
      schema.anyOf.push({
        format: schema.format,
        ...schema.errorMessage && refs.errorMessages && {
          errorMessage: { format: schema.errorMessage.format }
        }
      });
      delete schema.format;
      if (schema.errorMessage) {
        delete schema.errorMessage.format;
        if (Object.keys(schema.errorMessage).length === 0) {
          delete schema.errorMessage;
        }
      }
    }
    schema.anyOf.push({
      format: value,
      ...message && refs.errorMessages && { errorMessage: { format: message } }
    });
  } else {
    setResponseValueAndErrors(schema, "format", value, message, refs);
  }
}
function addPattern(schema, regex, message, refs) {
  if (schema.pattern || schema.allOf?.some((x) => x.pattern)) {
    if (!schema.allOf) {
      schema.allOf = [];
    }
    if (schema.pattern) {
      schema.allOf.push({
        pattern: schema.pattern,
        ...schema.errorMessage && refs.errorMessages && {
          errorMessage: { pattern: schema.errorMessage.pattern }
        }
      });
      delete schema.pattern;
      if (schema.errorMessage) {
        delete schema.errorMessage.pattern;
        if (Object.keys(schema.errorMessage).length === 0) {
          delete schema.errorMessage;
        }
      }
    }
    schema.allOf.push({
      pattern: stringifyRegExpWithFlags(regex, refs),
      ...message && refs.errorMessages && { errorMessage: { pattern: message } }
    });
  } else {
    setResponseValueAndErrors(schema, "pattern", stringifyRegExpWithFlags(regex, refs), message, refs);
  }
}
function stringifyRegExpWithFlags(regex, refs) {
  if (!refs.applyRegexFlags || !regex.flags) {
    return regex.source;
  }
  const flags = {
    i: regex.flags.includes("i"),
    m: regex.flags.includes("m"),
    s: regex.flags.includes("s")
  };
  const source = flags.i ? regex.source.toLowerCase() : regex.source;
  let pattern = "";
  let isEscaped = false;
  let inCharGroup = false;
  let inCharRange = false;
  for (let i = 0;i < source.length; i++) {
    if (isEscaped) {
      pattern += source[i];
      isEscaped = false;
      continue;
    }
    if (flags.i) {
      if (inCharGroup) {
        if (source[i].match(/[a-z]/)) {
          if (inCharRange) {
            pattern += source[i];
            pattern += `${source[i - 2]}-${source[i]}`.toUpperCase();
            inCharRange = false;
          } else if (source[i + 1] === "-" && source[i + 2]?.match(/[a-z]/)) {
            pattern += source[i];
            inCharRange = true;
          } else {
            pattern += `${source[i]}${source[i].toUpperCase()}`;
          }
          continue;
        }
      } else if (source[i].match(/[a-z]/)) {
        pattern += `[${source[i]}${source[i].toUpperCase()}]`;
        continue;
      }
    }
    if (flags.m) {
      if (source[i] === "^") {
        pattern += `(^|(?<=[\r
]))`;
        continue;
      } else if (source[i] === "$") {
        pattern += `($|(?=[\r
]))`;
        continue;
      }
    }
    if (flags.s && source[i] === ".") {
      pattern += inCharGroup ? `${source[i]}\r
` : `[${source[i]}\r
]`;
      continue;
    }
    pattern += source[i];
    if (source[i] === "\\") {
      isEscaped = true;
    } else if (inCharGroup && source[i] === "]") {
      inCharGroup = false;
    } else if (!inCharGroup && source[i] === "[") {
      inCharGroup = true;
    }
  }
  try {
    new RegExp(pattern);
  } catch {
    console.warn(`Could not convert regex pattern at ${refs.currentPath.join("/")} to a flag-independent form! Falling back to the flag-ignorant source`);
    return regex.source;
  }
  return pattern;
}

// node_modules/zod-to-json-schema/dist/esm/parsers/record.js
function parseRecordDef(def, refs) {
  if (refs.target === "openAi") {
    console.warn("Warning: OpenAI may not support records in schemas! Try an array of key-value pairs instead.");
  }
  if (refs.target === "openApi3" && def.keyType?._def.typeName === ZodFirstPartyTypeKind.ZodEnum) {
    return {
      type: "object",
      required: def.keyType._def.values,
      properties: def.keyType._def.values.reduce((acc, key) => ({
        ...acc,
        [key]: parseDef(def.valueType._def, {
          ...refs,
          currentPath: [...refs.currentPath, "properties", key]
        }) ?? parseAnyDef(refs)
      }), {}),
      additionalProperties: refs.rejectedAdditionalProperties
    };
  }
  const schema = {
    type: "object",
    additionalProperties: parseDef(def.valueType._def, {
      ...refs,
      currentPath: [...refs.currentPath, "additionalProperties"]
    }) ?? refs.allowedAdditionalProperties
  };
  if (refs.target === "openApi3") {
    return schema;
  }
  if (def.keyType?._def.typeName === ZodFirstPartyTypeKind.ZodString && def.keyType._def.checks?.length) {
    const { type, ...keyType } = parseStringDef(def.keyType._def, refs);
    return {
      ...schema,
      propertyNames: keyType
    };
  } else if (def.keyType?._def.typeName === ZodFirstPartyTypeKind.ZodEnum) {
    return {
      ...schema,
      propertyNames: {
        enum: def.keyType._def.values
      }
    };
  } else if (def.keyType?._def.typeName === ZodFirstPartyTypeKind.ZodBranded && def.keyType._def.type._def.typeName === ZodFirstPartyTypeKind.ZodString && def.keyType._def.type._def.checks?.length) {
    const { type, ...keyType } = parseBrandedDef(def.keyType._def, refs);
    return {
      ...schema,
      propertyNames: keyType
    };
  }
  return schema;
}

// node_modules/zod-to-json-schema/dist/esm/parsers/map.js
function parseMapDef(def, refs) {
  if (refs.mapStrategy === "record") {
    return parseRecordDef(def, refs);
  }
  const keys = parseDef(def.keyType._def, {
    ...refs,
    currentPath: [...refs.currentPath, "items", "items", "0"]
  }) || parseAnyDef(refs);
  const values = parseDef(def.valueType._def, {
    ...refs,
    currentPath: [...refs.currentPath, "items", "items", "1"]
  }) || parseAnyDef(refs);
  return {
    type: "array",
    maxItems: 125,
    items: {
      type: "array",
      items: [keys, values],
      minItems: 2,
      maxItems: 2
    }
  };
}

// node_modules/zod-to-json-schema/dist/esm/parsers/nativeEnum.js
function parseNativeEnumDef(def) {
  const object = def.values;
  const actualKeys = Object.keys(def.values).filter((key) => {
    return typeof object[object[key]] !== "number";
  });
  const actualValues = actualKeys.map((key) => object[key]);
  const parsedTypes = Array.from(new Set(actualValues.map((values) => typeof values)));
  return {
    type: parsedTypes.length === 1 ? parsedTypes[0] === "string" ? "string" : "number" : ["string", "number"],
    enum: actualValues
  };
}

// node_modules/zod-to-json-schema/dist/esm/parsers/never.js
function parseNeverDef(refs) {
  return refs.target === "openAi" ? undefined : {
    not: parseAnyDef({
      ...refs,
      currentPath: [...refs.currentPath, "not"]
    })
  };
}

// node_modules/zod-to-json-schema/dist/esm/parsers/null.js
function parseNullDef(refs) {
  return refs.target === "openApi3" ? {
    enum: ["null"],
    nullable: true
  } : {
    type: "null"
  };
}

// node_modules/zod-to-json-schema/dist/esm/parsers/union.js
var primitiveMappings = {
  ZodString: "string",
  ZodNumber: "number",
  ZodBigInt: "integer",
  ZodBoolean: "boolean",
  ZodNull: "null"
};
function parseUnionDef(def, refs) {
  if (refs.target === "openApi3")
    return asAnyOf(def, refs);
  const options = def.options instanceof Map ? Array.from(def.options.values()) : def.options;
  if (options.every((x) => (x._def.typeName in primitiveMappings) && (!x._def.checks || !x._def.checks.length))) {
    const types2 = options.reduce((types3, x) => {
      const type = primitiveMappings[x._def.typeName];
      return type && !types3.includes(type) ? [...types3, type] : types3;
    }, []);
    return {
      type: types2.length > 1 ? types2 : types2[0]
    };
  } else if (options.every((x) => x._def.typeName === "ZodLiteral" && !x.description)) {
    const types2 = options.reduce((acc, x) => {
      const type = typeof x._def.value;
      switch (type) {
        case "string":
        case "number":
        case "boolean":
          return [...acc, type];
        case "bigint":
          return [...acc, "integer"];
        case "object":
          if (x._def.value === null)
            return [...acc, "null"];
        case "symbol":
        case "undefined":
        case "function":
        default:
          return acc;
      }
    }, []);
    if (types2.length === options.length) {
      const uniqueTypes = types2.filter((x, i, a) => a.indexOf(x) === i);
      return {
        type: uniqueTypes.length > 1 ? uniqueTypes : uniqueTypes[0],
        enum: options.reduce((acc, x) => {
          return acc.includes(x._def.value) ? acc : [...acc, x._def.value];
        }, [])
      };
    }
  } else if (options.every((x) => x._def.typeName === "ZodEnum")) {
    return {
      type: "string",
      enum: options.reduce((acc, x) => [
        ...acc,
        ...x._def.values.filter((x2) => !acc.includes(x2))
      ], [])
    };
  }
  return asAnyOf(def, refs);
}
var asAnyOf = (def, refs) => {
  const anyOf = (def.options instanceof Map ? Array.from(def.options.values()) : def.options).map((x, i) => parseDef(x._def, {
    ...refs,
    currentPath: [...refs.currentPath, "anyOf", `${i}`]
  })).filter((x) => !!x && (!refs.strictUnions || typeof x === "object" && Object.keys(x).length > 0));
  return anyOf.length ? { anyOf } : undefined;
};

// node_modules/zod-to-json-schema/dist/esm/parsers/nullable.js
function parseNullableDef(def, refs) {
  if (["ZodString", "ZodNumber", "ZodBigInt", "ZodBoolean", "ZodNull"].includes(def.innerType._def.typeName) && (!def.innerType._def.checks || !def.innerType._def.checks.length)) {
    if (refs.target === "openApi3") {
      return {
        type: primitiveMappings[def.innerType._def.typeName],
        nullable: true
      };
    }
    return {
      type: [
        primitiveMappings[def.innerType._def.typeName],
        "null"
      ]
    };
  }
  if (refs.target === "openApi3") {
    const base2 = parseDef(def.innerType._def, {
      ...refs,
      currentPath: [...refs.currentPath]
    });
    if (base2 && "$ref" in base2)
      return { allOf: [base2], nullable: true };
    return base2 && { ...base2, nullable: true };
  }
  const base = parseDef(def.innerType._def, {
    ...refs,
    currentPath: [...refs.currentPath, "anyOf", "0"]
  });
  return base && { anyOf: [base, { type: "null" }] };
}

// node_modules/zod-to-json-schema/dist/esm/parsers/number.js
function parseNumberDef(def, refs) {
  const res = {
    type: "number"
  };
  if (!def.checks)
    return res;
  for (const check of def.checks) {
    switch (check.kind) {
      case "int":
        res.type = "integer";
        addErrorMessage(res, "type", check.message, refs);
        break;
      case "min":
        if (refs.target === "jsonSchema7") {
          if (check.inclusive) {
            setResponseValueAndErrors(res, "minimum", check.value, check.message, refs);
          } else {
            setResponseValueAndErrors(res, "exclusiveMinimum", check.value, check.message, refs);
          }
        } else {
          if (!check.inclusive) {
            res.exclusiveMinimum = true;
          }
          setResponseValueAndErrors(res, "minimum", check.value, check.message, refs);
        }
        break;
      case "max":
        if (refs.target === "jsonSchema7") {
          if (check.inclusive) {
            setResponseValueAndErrors(res, "maximum", check.value, check.message, refs);
          } else {
            setResponseValueAndErrors(res, "exclusiveMaximum", check.value, check.message, refs);
          }
        } else {
          if (!check.inclusive) {
            res.exclusiveMaximum = true;
          }
          setResponseValueAndErrors(res, "maximum", check.value, check.message, refs);
        }
        break;
      case "multipleOf":
        setResponseValueAndErrors(res, "multipleOf", check.value, check.message, refs);
        break;
    }
  }
  return res;
}

// node_modules/zod-to-json-schema/dist/esm/parsers/object.js
function parseObjectDef(def, refs) {
  const forceOptionalIntoNullable = refs.target === "openAi";
  const result = {
    type: "object",
    properties: {}
  };
  const required = [];
  const shape = def.shape();
  for (const propName in shape) {
    let propDef = shape[propName];
    if (propDef === undefined || propDef._def === undefined) {
      continue;
    }
    let propOptional = safeIsOptional(propDef);
    if (propOptional && forceOptionalIntoNullable) {
      if (propDef._def.typeName === "ZodOptional") {
        propDef = propDef._def.innerType;
      }
      if (!propDef.isNullable()) {
        propDef = propDef.nullable();
      }
      propOptional = false;
    }
    const parsedDef = parseDef(propDef._def, {
      ...refs,
      currentPath: [...refs.currentPath, "properties", propName],
      propertyPath: [...refs.currentPath, "properties", propName]
    });
    if (parsedDef === undefined) {
      continue;
    }
    result.properties[propName] = parsedDef;
    if (!propOptional) {
      required.push(propName);
    }
  }
  if (required.length) {
    result.required = required;
  }
  const additionalProperties = decideAdditionalProperties(def, refs);
  if (additionalProperties !== undefined) {
    result.additionalProperties = additionalProperties;
  }
  return result;
}
function decideAdditionalProperties(def, refs) {
  if (def.catchall._def.typeName !== "ZodNever") {
    return parseDef(def.catchall._def, {
      ...refs,
      currentPath: [...refs.currentPath, "additionalProperties"]
    });
  }
  switch (def.unknownKeys) {
    case "passthrough":
      return refs.allowedAdditionalProperties;
    case "strict":
      return refs.rejectedAdditionalProperties;
    case "strip":
      return refs.removeAdditionalStrategy === "strict" ? refs.allowedAdditionalProperties : refs.rejectedAdditionalProperties;
  }
}
function safeIsOptional(schema) {
  try {
    return schema.isOptional();
  } catch {
    return true;
  }
}

// node_modules/zod-to-json-schema/dist/esm/parsers/optional.js
var parseOptionalDef = (def, refs) => {
  if (refs.currentPath.toString() === refs.propertyPath?.toString()) {
    return parseDef(def.innerType._def, refs);
  }
  const innerSchema = parseDef(def.innerType._def, {
    ...refs,
    currentPath: [...refs.currentPath, "anyOf", "1"]
  });
  return innerSchema ? {
    anyOf: [
      {
        not: parseAnyDef(refs)
      },
      innerSchema
    ]
  } : parseAnyDef(refs);
};

// node_modules/zod-to-json-schema/dist/esm/parsers/pipeline.js
var parsePipelineDef = (def, refs) => {
  if (refs.pipeStrategy === "input") {
    return parseDef(def.in._def, refs);
  } else if (refs.pipeStrategy === "output") {
    return parseDef(def.out._def, refs);
  }
  const a = parseDef(def.in._def, {
    ...refs,
    currentPath: [...refs.currentPath, "allOf", "0"]
  });
  const b = parseDef(def.out._def, {
    ...refs,
    currentPath: [...refs.currentPath, "allOf", a ? "1" : "0"]
  });
  return {
    allOf: [a, b].filter((x) => x !== undefined)
  };
};

// node_modules/zod-to-json-schema/dist/esm/parsers/promise.js
function parsePromiseDef(def, refs) {
  return parseDef(def.type._def, refs);
}

// node_modules/zod-to-json-schema/dist/esm/parsers/set.js
function parseSetDef(def, refs) {
  const items = parseDef(def.valueType._def, {
    ...refs,
    currentPath: [...refs.currentPath, "items"]
  });
  const schema = {
    type: "array",
    uniqueItems: true,
    items
  };
  if (def.minSize) {
    setResponseValueAndErrors(schema, "minItems", def.minSize.value, def.minSize.message, refs);
  }
  if (def.maxSize) {
    setResponseValueAndErrors(schema, "maxItems", def.maxSize.value, def.maxSize.message, refs);
  }
  return schema;
}

// node_modules/zod-to-json-schema/dist/esm/parsers/tuple.js
function parseTupleDef(def, refs) {
  if (def.rest) {
    return {
      type: "array",
      minItems: def.items.length,
      items: def.items.map((x, i) => parseDef(x._def, {
        ...refs,
        currentPath: [...refs.currentPath, "items", `${i}`]
      })).reduce((acc, x) => x === undefined ? acc : [...acc, x], []),
      additionalItems: parseDef(def.rest._def, {
        ...refs,
        currentPath: [...refs.currentPath, "additionalItems"]
      })
    };
  } else {
    return {
      type: "array",
      minItems: def.items.length,
      maxItems: def.items.length,
      items: def.items.map((x, i) => parseDef(x._def, {
        ...refs,
        currentPath: [...refs.currentPath, "items", `${i}`]
      })).reduce((acc, x) => x === undefined ? acc : [...acc, x], [])
    };
  }
}

// node_modules/zod-to-json-schema/dist/esm/parsers/undefined.js
function parseUndefinedDef(refs) {
  return {
    not: parseAnyDef(refs)
  };
}

// node_modules/zod-to-json-schema/dist/esm/parsers/unknown.js
function parseUnknownDef(refs) {
  return parseAnyDef(refs);
}

// node_modules/zod-to-json-schema/dist/esm/parsers/readonly.js
var parseReadonlyDef = (def, refs) => {
  return parseDef(def.innerType._def, refs);
};

// node_modules/zod-to-json-schema/dist/esm/selectParser.js
var selectParser = (def, typeName, refs) => {
  switch (typeName) {
    case ZodFirstPartyTypeKind.ZodString:
      return parseStringDef(def, refs);
    case ZodFirstPartyTypeKind.ZodNumber:
      return parseNumberDef(def, refs);
    case ZodFirstPartyTypeKind.ZodObject:
      return parseObjectDef(def, refs);
    case ZodFirstPartyTypeKind.ZodBigInt:
      return parseBigintDef(def, refs);
    case ZodFirstPartyTypeKind.ZodBoolean:
      return parseBooleanDef();
    case ZodFirstPartyTypeKind.ZodDate:
      return parseDateDef(def, refs);
    case ZodFirstPartyTypeKind.ZodUndefined:
      return parseUndefinedDef(refs);
    case ZodFirstPartyTypeKind.ZodNull:
      return parseNullDef(refs);
    case ZodFirstPartyTypeKind.ZodArray:
      return parseArrayDef(def, refs);
    case ZodFirstPartyTypeKind.ZodUnion:
    case ZodFirstPartyTypeKind.ZodDiscriminatedUnion:
      return parseUnionDef(def, refs);
    case ZodFirstPartyTypeKind.ZodIntersection:
      return parseIntersectionDef(def, refs);
    case ZodFirstPartyTypeKind.ZodTuple:
      return parseTupleDef(def, refs);
    case ZodFirstPartyTypeKind.ZodRecord:
      return parseRecordDef(def, refs);
    case ZodFirstPartyTypeKind.ZodLiteral:
      return parseLiteralDef(def, refs);
    case ZodFirstPartyTypeKind.ZodEnum:
      return parseEnumDef(def);
    case ZodFirstPartyTypeKind.ZodNativeEnum:
      return parseNativeEnumDef(def);
    case ZodFirstPartyTypeKind.ZodNullable:
      return parseNullableDef(def, refs);
    case ZodFirstPartyTypeKind.ZodOptional:
      return parseOptionalDef(def, refs);
    case ZodFirstPartyTypeKind.ZodMap:
      return parseMapDef(def, refs);
    case ZodFirstPartyTypeKind.ZodSet:
      return parseSetDef(def, refs);
    case ZodFirstPartyTypeKind.ZodLazy:
      return () => def.getter()._def;
    case ZodFirstPartyTypeKind.ZodPromise:
      return parsePromiseDef(def, refs);
    case ZodFirstPartyTypeKind.ZodNaN:
    case ZodFirstPartyTypeKind.ZodNever:
      return parseNeverDef(refs);
    case ZodFirstPartyTypeKind.ZodEffects:
      return parseEffectsDef(def, refs);
    case ZodFirstPartyTypeKind.ZodAny:
      return parseAnyDef(refs);
    case ZodFirstPartyTypeKind.ZodUnknown:
      return parseUnknownDef(refs);
    case ZodFirstPartyTypeKind.ZodDefault:
      return parseDefaultDef(def, refs);
    case ZodFirstPartyTypeKind.ZodBranded:
      return parseBrandedDef(def, refs);
    case ZodFirstPartyTypeKind.ZodReadonly:
      return parseReadonlyDef(def, refs);
    case ZodFirstPartyTypeKind.ZodCatch:
      return parseCatchDef(def, refs);
    case ZodFirstPartyTypeKind.ZodPipeline:
      return parsePipelineDef(def, refs);
    case ZodFirstPartyTypeKind.ZodFunction:
    case ZodFirstPartyTypeKind.ZodVoid:
    case ZodFirstPartyTypeKind.ZodSymbol:
      return;
    default:
      return ((_) => {
        return;
      })(typeName);
  }
};

// node_modules/zod-to-json-schema/dist/esm/parseDef.js
function parseDef(def, refs, forceResolution = false) {
  const seenItem = refs.seen.get(def);
  if (refs.override) {
    const overrideResult = refs.override?.(def, refs, seenItem, forceResolution);
    if (overrideResult !== ignoreOverride) {
      return overrideResult;
    }
  }
  if (seenItem && !forceResolution) {
    const seenSchema = get$ref(seenItem, refs);
    if (seenSchema !== undefined) {
      return seenSchema;
    }
  }
  const newItem = { def, path: refs.currentPath, jsonSchema: undefined };
  refs.seen.set(def, newItem);
  const jsonSchemaOrGetter = selectParser(def, def.typeName, refs);
  const jsonSchema = typeof jsonSchemaOrGetter === "function" ? parseDef(jsonSchemaOrGetter(), refs) : jsonSchemaOrGetter;
  if (jsonSchema) {
    addMeta(def, refs, jsonSchema);
  }
  if (refs.postProcess) {
    const postProcessResult = refs.postProcess(jsonSchema, def, refs);
    newItem.jsonSchema = jsonSchema;
    return postProcessResult;
  }
  newItem.jsonSchema = jsonSchema;
  return jsonSchema;
}
var get$ref = (item, refs) => {
  switch (refs.$refStrategy) {
    case "root":
      return { $ref: item.path.join("/") };
    case "relative":
      return { $ref: getRelativePath(refs.currentPath, item.path) };
    case "none":
    case "seen": {
      if (item.path.length < refs.currentPath.length && item.path.every((value, index) => refs.currentPath[index] === value)) {
        console.warn(`Recursive reference detected at ${refs.currentPath.join("/")}! Defaulting to any`);
        return parseAnyDef(refs);
      }
      return refs.$refStrategy === "seen" ? parseAnyDef(refs) : undefined;
    }
  }
};
var addMeta = (def, refs, jsonSchema) => {
  if (def.description) {
    jsonSchema.description = def.description;
    if (refs.markdownDescription) {
      jsonSchema.markdownDescription = def.description;
    }
  }
  return jsonSchema;
};
// node_modules/zod-to-json-schema/dist/esm/zodToJsonSchema.js
var zodToJsonSchema = (schema, options) => {
  const refs = getRefs(options);
  let definitions = typeof options === "object" && options.definitions ? Object.entries(options.definitions).reduce((acc, [name2, schema2]) => ({
    ...acc,
    [name2]: parseDef(schema2._def, {
      ...refs,
      currentPath: [...refs.basePath, refs.definitionPath, name2]
    }, true) ?? parseAnyDef(refs)
  }), {}) : undefined;
  const name = typeof options === "string" ? options : options?.nameStrategy === "title" ? undefined : options?.name;
  const main = parseDef(schema._def, name === undefined ? refs : {
    ...refs,
    currentPath: [...refs.basePath, refs.definitionPath, name]
  }, false) ?? parseAnyDef(refs);
  const title = typeof options === "object" && options.name !== undefined && options.nameStrategy === "title" ? options.name : undefined;
  if (title !== undefined) {
    main.title = title;
  }
  if (refs.flags.hasReferencedOpenAiAnyType) {
    if (!definitions) {
      definitions = {};
    }
    if (!definitions[refs.openAiAnyTypeName]) {
      definitions[refs.openAiAnyTypeName] = {
        type: ["string", "number", "integer", "boolean", "array", "null"],
        items: {
          $ref: refs.$refStrategy === "relative" ? "1" : [
            ...refs.basePath,
            refs.definitionPath,
            refs.openAiAnyTypeName
          ].join("/")
        }
      };
    }
  }
  const combined = name === undefined ? definitions ? {
    ...main,
    [refs.definitionPath]: definitions
  } : main : {
    $ref: [
      ...refs.$refStrategy === "relative" ? [] : refs.basePath,
      refs.definitionPath,
      name
    ].join("/"),
    [refs.definitionPath]: {
      ...definitions,
      [name]: main
    }
  };
  if (refs.target === "jsonSchema7") {
    combined.$schema = "http://json-schema.org/draft-07/schema#";
  } else if (refs.target === "jsonSchema2019-09" || refs.target === "openAi") {
    combined.$schema = "https://json-schema.org/draft/2019-09/schema#";
  }
  if (refs.target === "openAi" && (("anyOf" in combined) || ("oneOf" in combined) || ("allOf" in combined) || ("type" in combined) && Array.isArray(combined.type))) {
    console.warn("Warning: OpenAI may not support schemas with unions as roots! Try wrapping it in an object property.");
  }
  return combined;
};
// node_modules/zod-to-json-schema/dist/esm/index.js
var esm_default = zodToJsonSchema;

// node_modules/@modelcontextprotocol/sdk/dist/esm/server/completable.js
var McpZodTypeKind;
(function(McpZodTypeKind2) {
  McpZodTypeKind2["Completable"] = "McpCompletable";
})(McpZodTypeKind || (McpZodTypeKind = {}));

class Completable extends ZodType {
  _parse(input) {
    const { ctx } = this._processInputParams(input);
    const data = ctx.data;
    return this._def.type._parse({
      data,
      path: ctx.path,
      parent: ctx
    });
  }
  unwrap() {
    return this._def.type;
  }
}
Completable.create = (type, params) => {
  return new Completable({
    type,
    typeName: McpZodTypeKind.Completable,
    complete: params.complete,
    ...processCreateParams2(params)
  });
};
function processCreateParams2(params) {
  if (!params)
    return {};
  const { errorMap: errorMap2, invalid_type_error, required_error, description } = params;
  if (errorMap2 && (invalid_type_error || required_error)) {
    throw new Error(`Can't use "invalid_type_error" or "required_error" in conjunction with custom error map.`);
  }
  if (errorMap2)
    return { errorMap: errorMap2, description };
  const customMap = (iss, ctx) => {
    var _a, _b;
    const { message } = params;
    if (iss.code === "invalid_enum_value") {
      return { message: message !== null && message !== undefined ? message : ctx.defaultError };
    }
    if (typeof ctx.data === "undefined") {
      return { message: (_a = message !== null && message !== undefined ? message : required_error) !== null && _a !== undefined ? _a : ctx.defaultError };
    }
    if (iss.code !== "invalid_type")
      return { message: ctx.defaultError };
    return { message: (_b = message !== null && message !== undefined ? message : invalid_type_error) !== null && _b !== undefined ? _b : ctx.defaultError };
  };
  return { errorMap: customMap, description };
}

// node_modules/@modelcontextprotocol/sdk/dist/esm/server/mcp.js
class McpServer {
  constructor(serverInfo, options) {
    this._registeredResources = {};
    this._registeredResourceTemplates = {};
    this._registeredTools = {};
    this._registeredPrompts = {};
    this._toolHandlersInitialized = false;
    this._completionHandlerInitialized = false;
    this._resourceHandlersInitialized = false;
    this._promptHandlersInitialized = false;
    this.server = new Server(serverInfo, options);
  }
  async connect(transport) {
    return await this.server.connect(transport);
  }
  async close() {
    await this.server.close();
  }
  setToolRequestHandlers() {
    if (this._toolHandlersInitialized) {
      return;
    }
    this.server.assertCanSetRequestHandler(ListToolsRequestSchema.shape.method.value);
    this.server.assertCanSetRequestHandler(CallToolRequestSchema.shape.method.value);
    this.server.registerCapabilities({
      tools: {
        listChanged: true
      }
    });
    this.server.setRequestHandler(ListToolsRequestSchema, () => ({
      tools: Object.entries(this._registeredTools).filter(([, tool]) => tool.enabled).map(([name, tool]) => {
        const toolDefinition = {
          name,
          title: tool.title,
          description: tool.description,
          inputSchema: tool.inputSchema ? zodToJsonSchema(tool.inputSchema, {
            strictUnions: true
          }) : EMPTY_OBJECT_JSON_SCHEMA,
          annotations: tool.annotations
        };
        if (tool.outputSchema) {
          toolDefinition.outputSchema = zodToJsonSchema(tool.outputSchema, { strictUnions: true });
        }
        return toolDefinition;
      })
    }));
    this.server.setRequestHandler(CallToolRequestSchema, async (request, extra) => {
      const tool = this._registeredTools[request.params.name];
      if (!tool) {
        throw new McpError(ErrorCode.InvalidParams, `Tool ${request.params.name} not found`);
      }
      if (!tool.enabled) {
        throw new McpError(ErrorCode.InvalidParams, `Tool ${request.params.name} disabled`);
      }
      let result;
      if (tool.inputSchema) {
        const parseResult = await tool.inputSchema.safeParseAsync(request.params.arguments);
        if (!parseResult.success) {
          throw new McpError(ErrorCode.InvalidParams, `Invalid arguments for tool ${request.params.name}: ${parseResult.error.message}`);
        }
        const args = parseResult.data;
        const cb = tool.callback;
        try {
          result = await Promise.resolve(cb(args, extra));
        } catch (error) {
          result = {
            content: [
              {
                type: "text",
                text: error instanceof Error ? error.message : String(error)
              }
            ],
            isError: true
          };
        }
      } else {
        const cb = tool.callback;
        try {
          result = await Promise.resolve(cb(extra));
        } catch (error) {
          result = {
            content: [
              {
                type: "text",
                text: error instanceof Error ? error.message : String(error)
              }
            ],
            isError: true
          };
        }
      }
      if (tool.outputSchema && !result.isError) {
        if (!result.structuredContent) {
          throw new McpError(ErrorCode.InvalidParams, `Tool ${request.params.name} has an output schema but no structured content was provided`);
        }
        const parseResult = await tool.outputSchema.safeParseAsync(result.structuredContent);
        if (!parseResult.success) {
          throw new McpError(ErrorCode.InvalidParams, `Invalid structured content for tool ${request.params.name}: ${parseResult.error.message}`);
        }
      }
      return result;
    });
    this._toolHandlersInitialized = true;
  }
  setCompletionRequestHandler() {
    if (this._completionHandlerInitialized) {
      return;
    }
    this.server.assertCanSetRequestHandler(CompleteRequestSchema.shape.method.value);
    this.server.registerCapabilities({
      completions: {}
    });
    this.server.setRequestHandler(CompleteRequestSchema, async (request) => {
      switch (request.params.ref.type) {
        case "ref/prompt":
          return this.handlePromptCompletion(request, request.params.ref);
        case "ref/resource":
          return this.handleResourceCompletion(request, request.params.ref);
        default:
          throw new McpError(ErrorCode.InvalidParams, `Invalid completion reference: ${request.params.ref}`);
      }
    });
    this._completionHandlerInitialized = true;
  }
  async handlePromptCompletion(request, ref) {
    const prompt = this._registeredPrompts[ref.name];
    if (!prompt) {
      throw new McpError(ErrorCode.InvalidParams, `Prompt ${ref.name} not found`);
    }
    if (!prompt.enabled) {
      throw new McpError(ErrorCode.InvalidParams, `Prompt ${ref.name} disabled`);
    }
    if (!prompt.argsSchema) {
      return EMPTY_COMPLETION_RESULT;
    }
    const field = prompt.argsSchema.shape[request.params.argument.name];
    if (!(field instanceof Completable)) {
      return EMPTY_COMPLETION_RESULT;
    }
    const def = field._def;
    const suggestions = await def.complete(request.params.argument.value, request.params.context);
    return createCompletionResult(suggestions);
  }
  async handleResourceCompletion(request, ref) {
    const template = Object.values(this._registeredResourceTemplates).find((t) => t.resourceTemplate.uriTemplate.toString() === ref.uri);
    if (!template) {
      if (this._registeredResources[ref.uri]) {
        return EMPTY_COMPLETION_RESULT;
      }
      throw new McpError(ErrorCode.InvalidParams, `Resource template ${request.params.ref.uri} not found`);
    }
    const completer = template.resourceTemplate.completeCallback(request.params.argument.name);
    if (!completer) {
      return EMPTY_COMPLETION_RESULT;
    }
    const suggestions = await completer(request.params.argument.value, request.params.context);
    return createCompletionResult(suggestions);
  }
  setResourceRequestHandlers() {
    if (this._resourceHandlersInitialized) {
      return;
    }
    this.server.assertCanSetRequestHandler(ListResourcesRequestSchema.shape.method.value);
    this.server.assertCanSetRequestHandler(ListResourceTemplatesRequestSchema.shape.method.value);
    this.server.assertCanSetRequestHandler(ReadResourceRequestSchema.shape.method.value);
    this.server.registerCapabilities({
      resources: {
        listChanged: true
      }
    });
    this.server.setRequestHandler(ListResourcesRequestSchema, async (request, extra) => {
      const resources = Object.entries(this._registeredResources).filter(([_, resource]) => resource.enabled).map(([uri, resource]) => ({
        uri,
        name: resource.name,
        ...resource.metadata
      }));
      const templateResources = [];
      for (const template of Object.values(this._registeredResourceTemplates)) {
        if (!template.resourceTemplate.listCallback) {
          continue;
        }
        const result = await template.resourceTemplate.listCallback(extra);
        for (const resource of result.resources) {
          templateResources.push({
            ...template.metadata,
            ...resource
          });
        }
      }
      return { resources: [...resources, ...templateResources] };
    });
    this.server.setRequestHandler(ListResourceTemplatesRequestSchema, async () => {
      const resourceTemplates = Object.entries(this._registeredResourceTemplates).map(([name, template]) => ({
        name,
        uriTemplate: template.resourceTemplate.uriTemplate.toString(),
        ...template.metadata
      }));
      return { resourceTemplates };
    });
    this.server.setRequestHandler(ReadResourceRequestSchema, async (request, extra) => {
      const uri = new URL(request.params.uri);
      const resource = this._registeredResources[uri.toString()];
      if (resource) {
        if (!resource.enabled) {
          throw new McpError(ErrorCode.InvalidParams, `Resource ${uri} disabled`);
        }
        return resource.readCallback(uri, extra);
      }
      for (const template of Object.values(this._registeredResourceTemplates)) {
        const variables = template.resourceTemplate.uriTemplate.match(uri.toString());
        if (variables) {
          return template.readCallback(uri, variables, extra);
        }
      }
      throw new McpError(ErrorCode.InvalidParams, `Resource ${uri} not found`);
    });
    this.setCompletionRequestHandler();
    this._resourceHandlersInitialized = true;
  }
  setPromptRequestHandlers() {
    if (this._promptHandlersInitialized) {
      return;
    }
    this.server.assertCanSetRequestHandler(ListPromptsRequestSchema.shape.method.value);
    this.server.assertCanSetRequestHandler(GetPromptRequestSchema.shape.method.value);
    this.server.registerCapabilities({
      prompts: {
        listChanged: true
      }
    });
    this.server.setRequestHandler(ListPromptsRequestSchema, () => ({
      prompts: Object.entries(this._registeredPrompts).filter(([, prompt]) => prompt.enabled).map(([name, prompt]) => {
        return {
          name,
          title: prompt.title,
          description: prompt.description,
          arguments: prompt.argsSchema ? promptArgumentsFromSchema(prompt.argsSchema) : undefined
        };
      })
    }));
    this.server.setRequestHandler(GetPromptRequestSchema, async (request, extra) => {
      const prompt = this._registeredPrompts[request.params.name];
      if (!prompt) {
        throw new McpError(ErrorCode.InvalidParams, `Prompt ${request.params.name} not found`);
      }
      if (!prompt.enabled) {
        throw new McpError(ErrorCode.InvalidParams, `Prompt ${request.params.name} disabled`);
      }
      if (prompt.argsSchema) {
        const parseResult = await prompt.argsSchema.safeParseAsync(request.params.arguments);
        if (!parseResult.success) {
          throw new McpError(ErrorCode.InvalidParams, `Invalid arguments for prompt ${request.params.name}: ${parseResult.error.message}`);
        }
        const args = parseResult.data;
        const cb = prompt.callback;
        return await Promise.resolve(cb(args, extra));
      } else {
        const cb = prompt.callback;
        return await Promise.resolve(cb(extra));
      }
    });
    this.setCompletionRequestHandler();
    this._promptHandlersInitialized = true;
  }
  resource(name, uriOrTemplate, ...rest) {
    let metadata;
    if (typeof rest[0] === "object") {
      metadata = rest.shift();
    }
    const readCallback = rest[0];
    if (typeof uriOrTemplate === "string") {
      if (this._registeredResources[uriOrTemplate]) {
        throw new Error(`Resource ${uriOrTemplate} is already registered`);
      }
      const registeredResource = this._createRegisteredResource(name, undefined, uriOrTemplate, metadata, readCallback);
      this.setResourceRequestHandlers();
      this.sendResourceListChanged();
      return registeredResource;
    } else {
      if (this._registeredResourceTemplates[name]) {
        throw new Error(`Resource template ${name} is already registered`);
      }
      const registeredResourceTemplate = this._createRegisteredResourceTemplate(name, undefined, uriOrTemplate, metadata, readCallback);
      this.setResourceRequestHandlers();
      this.sendResourceListChanged();
      return registeredResourceTemplate;
    }
  }
  registerResource(name, uriOrTemplate, config, readCallback) {
    if (typeof uriOrTemplate === "string") {
      if (this._registeredResources[uriOrTemplate]) {
        throw new Error(`Resource ${uriOrTemplate} is already registered`);
      }
      const registeredResource = this._createRegisteredResource(name, config.title, uriOrTemplate, config, readCallback);
      this.setResourceRequestHandlers();
      this.sendResourceListChanged();
      return registeredResource;
    } else {
      if (this._registeredResourceTemplates[name]) {
        throw new Error(`Resource template ${name} is already registered`);
      }
      const registeredResourceTemplate = this._createRegisteredResourceTemplate(name, config.title, uriOrTemplate, config, readCallback);
      this.setResourceRequestHandlers();
      this.sendResourceListChanged();
      return registeredResourceTemplate;
    }
  }
  _createRegisteredResource(name, title, uri, metadata, readCallback) {
    const registeredResource = {
      name,
      title,
      metadata,
      readCallback,
      enabled: true,
      disable: () => registeredResource.update({ enabled: false }),
      enable: () => registeredResource.update({ enabled: true }),
      remove: () => registeredResource.update({ uri: null }),
      update: (updates) => {
        if (typeof updates.uri !== "undefined" && updates.uri !== uri) {
          delete this._registeredResources[uri];
          if (updates.uri)
            this._registeredResources[updates.uri] = registeredResource;
        }
        if (typeof updates.name !== "undefined")
          registeredResource.name = updates.name;
        if (typeof updates.title !== "undefined")
          registeredResource.title = updates.title;
        if (typeof updates.metadata !== "undefined")
          registeredResource.metadata = updates.metadata;
        if (typeof updates.callback !== "undefined")
          registeredResource.readCallback = updates.callback;
        if (typeof updates.enabled !== "undefined")
          registeredResource.enabled = updates.enabled;
        this.sendResourceListChanged();
      }
    };
    this._registeredResources[uri] = registeredResource;
    return registeredResource;
  }
  _createRegisteredResourceTemplate(name, title, template, metadata, readCallback) {
    const registeredResourceTemplate = {
      resourceTemplate: template,
      title,
      metadata,
      readCallback,
      enabled: true,
      disable: () => registeredResourceTemplate.update({ enabled: false }),
      enable: () => registeredResourceTemplate.update({ enabled: true }),
      remove: () => registeredResourceTemplate.update({ name: null }),
      update: (updates) => {
        if (typeof updates.name !== "undefined" && updates.name !== name) {
          delete this._registeredResourceTemplates[name];
          if (updates.name)
            this._registeredResourceTemplates[updates.name] = registeredResourceTemplate;
        }
        if (typeof updates.title !== "undefined")
          registeredResourceTemplate.title = updates.title;
        if (typeof updates.template !== "undefined")
          registeredResourceTemplate.resourceTemplate = updates.template;
        if (typeof updates.metadata !== "undefined")
          registeredResourceTemplate.metadata = updates.metadata;
        if (typeof updates.callback !== "undefined")
          registeredResourceTemplate.readCallback = updates.callback;
        if (typeof updates.enabled !== "undefined")
          registeredResourceTemplate.enabled = updates.enabled;
        this.sendResourceListChanged();
      }
    };
    this._registeredResourceTemplates[name] = registeredResourceTemplate;
    return registeredResourceTemplate;
  }
  _createRegisteredPrompt(name, title, description, argsSchema, callback) {
    const registeredPrompt = {
      title,
      description,
      argsSchema: argsSchema === undefined ? undefined : exports_external.object(argsSchema),
      callback,
      enabled: true,
      disable: () => registeredPrompt.update({ enabled: false }),
      enable: () => registeredPrompt.update({ enabled: true }),
      remove: () => registeredPrompt.update({ name: null }),
      update: (updates) => {
        if (typeof updates.name !== "undefined" && updates.name !== name) {
          delete this._registeredPrompts[name];
          if (updates.name)
            this._registeredPrompts[updates.name] = registeredPrompt;
        }
        if (typeof updates.title !== "undefined")
          registeredPrompt.title = updates.title;
        if (typeof updates.description !== "undefined")
          registeredPrompt.description = updates.description;
        if (typeof updates.argsSchema !== "undefined")
          registeredPrompt.argsSchema = exports_external.object(updates.argsSchema);
        if (typeof updates.callback !== "undefined")
          registeredPrompt.callback = updates.callback;
        if (typeof updates.enabled !== "undefined")
          registeredPrompt.enabled = updates.enabled;
        this.sendPromptListChanged();
      }
    };
    this._registeredPrompts[name] = registeredPrompt;
    return registeredPrompt;
  }
  _createRegisteredTool(name, title, description, inputSchema, outputSchema, annotations, callback) {
    const registeredTool = {
      title,
      description,
      inputSchema: inputSchema === undefined ? undefined : exports_external.object(inputSchema),
      outputSchema: outputSchema === undefined ? undefined : exports_external.object(outputSchema),
      annotations,
      callback,
      enabled: true,
      disable: () => registeredTool.update({ enabled: false }),
      enable: () => registeredTool.update({ enabled: true }),
      remove: () => registeredTool.update({ name: null }),
      update: (updates) => {
        if (typeof updates.name !== "undefined" && updates.name !== name) {
          delete this._registeredTools[name];
          if (updates.name)
            this._registeredTools[updates.name] = registeredTool;
        }
        if (typeof updates.title !== "undefined")
          registeredTool.title = updates.title;
        if (typeof updates.description !== "undefined")
          registeredTool.description = updates.description;
        if (typeof updates.paramsSchema !== "undefined")
          registeredTool.inputSchema = exports_external.object(updates.paramsSchema);
        if (typeof updates.callback !== "undefined")
          registeredTool.callback = updates.callback;
        if (typeof updates.annotations !== "undefined")
          registeredTool.annotations = updates.annotations;
        if (typeof updates.enabled !== "undefined")
          registeredTool.enabled = updates.enabled;
        this.sendToolListChanged();
      }
    };
    this._registeredTools[name] = registeredTool;
    this.setToolRequestHandlers();
    this.sendToolListChanged();
    return registeredTool;
  }
  tool(name, ...rest) {
    if (this._registeredTools[name]) {
      throw new Error(`Tool ${name} is already registered`);
    }
    let description;
    let inputSchema;
    let outputSchema;
    let annotations;
    if (typeof rest[0] === "string") {
      description = rest.shift();
    }
    if (rest.length > 1) {
      const firstArg = rest[0];
      if (isZodRawShape(firstArg)) {
        inputSchema = rest.shift();
        if (rest.length > 1 && typeof rest[0] === "object" && rest[0] !== null && !isZodRawShape(rest[0])) {
          annotations = rest.shift();
        }
      } else if (typeof firstArg === "object" && firstArg !== null) {
        annotations = rest.shift();
      }
    }
    const callback = rest[0];
    return this._createRegisteredTool(name, undefined, description, inputSchema, outputSchema, annotations, callback);
  }
  registerTool(name, config, cb) {
    if (this._registeredTools[name]) {
      throw new Error(`Tool ${name} is already registered`);
    }
    const { title, description, inputSchema, outputSchema, annotations } = config;
    return this._createRegisteredTool(name, title, description, inputSchema, outputSchema, annotations, cb);
  }
  prompt(name, ...rest) {
    if (this._registeredPrompts[name]) {
      throw new Error(`Prompt ${name} is already registered`);
    }
    let description;
    if (typeof rest[0] === "string") {
      description = rest.shift();
    }
    let argsSchema;
    if (rest.length > 1) {
      argsSchema = rest.shift();
    }
    const cb = rest[0];
    const registeredPrompt = this._createRegisteredPrompt(name, undefined, description, argsSchema, cb);
    this.setPromptRequestHandlers();
    this.sendPromptListChanged();
    return registeredPrompt;
  }
  registerPrompt(name, config, cb) {
    if (this._registeredPrompts[name]) {
      throw new Error(`Prompt ${name} is already registered`);
    }
    const { title, description, argsSchema } = config;
    const registeredPrompt = this._createRegisteredPrompt(name, title, description, argsSchema, cb);
    this.setPromptRequestHandlers();
    this.sendPromptListChanged();
    return registeredPrompt;
  }
  isConnected() {
    return this.server.transport !== undefined;
  }
  sendResourceListChanged() {
    if (this.isConnected()) {
      this.server.sendResourceListChanged();
    }
  }
  sendToolListChanged() {
    if (this.isConnected()) {
      this.server.sendToolListChanged();
    }
  }
  sendPromptListChanged() {
    if (this.isConnected()) {
      this.server.sendPromptListChanged();
    }
  }
}
var EMPTY_OBJECT_JSON_SCHEMA = {
  type: "object",
  properties: {}
};
function isZodRawShape(obj) {
  if (typeof obj !== "object" || obj === null)
    return false;
  const isEmptyObject = Object.keys(obj).length === 0;
  return isEmptyObject || Object.values(obj).some(isZodTypeLike);
}
function isZodTypeLike(value) {
  return value !== null && typeof value === "object" && "parse" in value && typeof value.parse === "function" && "safeParse" in value && typeof value.safeParse === "function";
}
function promptArgumentsFromSchema(schema) {
  return Object.entries(schema.shape).map(([name, field]) => ({
    name,
    description: field.description,
    required: !field.isOptional()
  }));
}
function createCompletionResult(suggestions) {
  return {
    completion: {
      values: suggestions.slice(0, 100),
      total: suggestions.length,
      hasMore: suggestions.length > 100
    }
  };
}
var EMPTY_COMPLETION_RESULT = {
  completion: {
    values: [],
    hasMore: false
  }
};

// node_modules/@modelcontextprotocol/sdk/dist/esm/server/stdio.js
import process2 from "node:process";

// node_modules/@modelcontextprotocol/sdk/dist/esm/shared/stdio.js
class ReadBuffer {
  append(chunk) {
    this._buffer = this._buffer ? Buffer.concat([this._buffer, chunk]) : chunk;
  }
  readMessage() {
    if (!this._buffer) {
      return null;
    }
    const index = this._buffer.indexOf(`
`);
    if (index === -1) {
      return null;
    }
    const line = this._buffer.toString("utf8", 0, index).replace(/\r$/, "");
    this._buffer = this._buffer.subarray(index + 1);
    return deserializeMessage(line);
  }
  clear() {
    this._buffer = undefined;
  }
}
function deserializeMessage(line) {
  return JSONRPCMessageSchema.parse(JSON.parse(line));
}
function serializeMessage(message) {
  return JSON.stringify(message) + `
`;
}

// node_modules/@modelcontextprotocol/sdk/dist/esm/server/stdio.js
class StdioServerTransport {
  constructor(_stdin = process2.stdin, _stdout = process2.stdout) {
    this._stdin = _stdin;
    this._stdout = _stdout;
    this._readBuffer = new ReadBuffer;
    this._started = false;
    this._ondata = (chunk) => {
      this._readBuffer.append(chunk);
      this.processReadBuffer();
    };
    this._onerror = (error) => {
      var _a;
      (_a = this.onerror) === null || _a === undefined || _a.call(this, error);
    };
  }
  async start() {
    if (this._started) {
      throw new Error("StdioServerTransport already started! If using Server class, note that connect() calls start() automatically.");
    }
    this._started = true;
    this._stdin.on("data", this._ondata);
    this._stdin.on("error", this._onerror);
  }
  processReadBuffer() {
    var _a, _b;
    while (true) {
      try {
        const message = this._readBuffer.readMessage();
        if (message === null) {
          break;
        }
        (_a = this.onmessage) === null || _a === undefined || _a.call(this, message);
      } catch (error) {
        (_b = this.onerror) === null || _b === undefined || _b.call(this, error);
      }
    }
  }
  async close() {
    var _a;
    this._stdin.off("data", this._ondata);
    this._stdin.off("error", this._onerror);
    const remainingDataListeners = this._stdin.listenerCount("data");
    if (remainingDataListeners === 0) {
      this._stdin.pause();
    }
    this._readBuffer.clear();
    (_a = this.onclose) === null || _a === undefined || _a.call(this);
  }
  send(message) {
    return new Promise((resolve) => {
      const json = serializeMessage(message);
      if (this._stdout.write(json)) {
        resolve();
      } else {
        this._stdout.once("drain", resolve);
      }
    });
  }
}

// node_modules/@ai-sdk/provider/dist/index.mjs
var marker = "vercel.ai.error";
var symbol = Symbol.for(marker);
var _a;
var _AISDKError = class _AISDKError2 extends Error {
  constructor({
    name: name14,
    message,
    cause
  }) {
    super(message);
    this[_a] = true;
    this.name = name14;
    this.cause = cause;
  }
  static isInstance(error) {
    return _AISDKError2.hasMarker(error, marker);
  }
  static hasMarker(error, marker15) {
    const markerSymbol = Symbol.for(marker15);
    return error != null && typeof error === "object" && markerSymbol in error && typeof error[markerSymbol] === "boolean" && error[markerSymbol] === true;
  }
};
_a = symbol;
var AISDKError = _AISDKError;
var name = "AI_APICallError";
var marker2 = `vercel.ai.error.${name}`;
var symbol2 = Symbol.for(marker2);
var _a2;
_a2 = symbol2;
var name2 = "AI_EmptyResponseBodyError";
var marker3 = `vercel.ai.error.${name2}`;
var symbol3 = Symbol.for(marker3);
var _a3;
_a3 = symbol3;
function getErrorMessage(error) {
  if (error == null) {
    return "unknown error";
  }
  if (typeof error === "string") {
    return error;
  }
  if (error instanceof Error) {
    return error.message;
  }
  return JSON.stringify(error);
}
var name3 = "AI_InvalidArgumentError";
var marker4 = `vercel.ai.error.${name3}`;
var symbol4 = Symbol.for(marker4);
var _a4;
var InvalidArgumentError = class extends AISDKError {
  constructor({
    message,
    cause,
    argument
  }) {
    super({ name: name3, message, cause });
    this[_a4] = true;
    this.argument = argument;
  }
  static isInstance(error) {
    return AISDKError.hasMarker(error, marker4);
  }
};
_a4 = symbol4;
var name4 = "AI_InvalidPromptError";
var marker5 = `vercel.ai.error.${name4}`;
var symbol5 = Symbol.for(marker5);
var _a5;
_a5 = symbol5;
var name5 = "AI_InvalidResponseDataError";
var marker6 = `vercel.ai.error.${name5}`;
var symbol6 = Symbol.for(marker6);
var _a6;
_a6 = symbol6;
var name6 = "AI_JSONParseError";
var marker7 = `vercel.ai.error.${name6}`;
var symbol7 = Symbol.for(marker7);
var _a7;
var JSONParseError = class extends AISDKError {
  constructor({ text, cause }) {
    super({
      name: name6,
      message: `JSON parsing failed: Text: ${text}.
Error message: ${getErrorMessage(cause)}`,
      cause
    });
    this[_a7] = true;
    this.text = text;
  }
  static isInstance(error) {
    return AISDKError.hasMarker(error, marker7);
  }
};
_a7 = symbol7;
var name7 = "AI_LoadAPIKeyError";
var marker8 = `vercel.ai.error.${name7}`;
var symbol8 = Symbol.for(marker8);
var _a8;
_a8 = symbol8;
var name8 = "AI_LoadSettingError";
var marker9 = `vercel.ai.error.${name8}`;
var symbol9 = Symbol.for(marker9);
var _a9;
_a9 = symbol9;
var name9 = "AI_NoContentGeneratedError";
var marker10 = `vercel.ai.error.${name9}`;
var symbol10 = Symbol.for(marker10);
var _a10;
_a10 = symbol10;
var name10 = "AI_NoSuchModelError";
var marker11 = `vercel.ai.error.${name10}`;
var symbol11 = Symbol.for(marker11);
var _a11;
_a11 = symbol11;
var name11 = "AI_TooManyEmbeddingValuesForCallError";
var marker12 = `vercel.ai.error.${name11}`;
var symbol12 = Symbol.for(marker12);
var _a12;
_a12 = symbol12;
var name12 = "AI_TypeValidationError";
var marker13 = `vercel.ai.error.${name12}`;
var symbol13 = Symbol.for(marker13);
var _a13;
var _TypeValidationError = class _TypeValidationError2 extends AISDKError {
  constructor({ value, cause }) {
    super({
      name: name12,
      message: `Type validation failed: Value: ${JSON.stringify(value)}.
Error message: ${getErrorMessage(cause)}`,
      cause
    });
    this[_a13] = true;
    this.value = value;
  }
  static isInstance(error) {
    return AISDKError.hasMarker(error, marker13);
  }
  static wrap({
    value,
    cause
  }) {
    return _TypeValidationError2.isInstance(cause) && cause.value === value ? cause : new _TypeValidationError2({ value, cause });
  }
};
_a13 = symbol13;
var TypeValidationError = _TypeValidationError;
var name13 = "AI_UnsupportedFunctionalityError";
var marker14 = `vercel.ai.error.${name13}`;
var symbol14 = Symbol.for(marker14);
var _a14;
_a14 = symbol14;

// node_modules/nanoid/non-secure/index.js
var customAlphabet = (alphabet, defaultSize = 21) => {
  return (size = defaultSize) => {
    let id = "";
    let i = size | 0;
    while (i--) {
      id += alphabet[Math.random() * alphabet.length | 0];
    }
    return id;
  };
};

// node_modules/@ai-sdk/provider-utils/dist/index.mjs
var import_secure_json_parse = __toESM(require_secure_json_parse(), 1);
function convertAsyncIteratorToReadableStream(iterator) {
  return new ReadableStream({
    async pull(controller) {
      try {
        const { value, done } = await iterator.next();
        if (done) {
          controller.close();
        } else {
          controller.enqueue(value);
        }
      } catch (error) {
        controller.error(error);
      }
    },
    cancel() {}
  });
}
var createIdGenerator = ({
  prefix,
  size: defaultSize = 16,
  alphabet = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz",
  separator = "-"
} = {}) => {
  const generator = customAlphabet(alphabet, defaultSize);
  if (prefix == null) {
    return generator;
  }
  if (alphabet.includes(separator)) {
    throw new InvalidArgumentError({
      argument: "separator",
      message: `The separator "${separator}" must not be part of the alphabet "${alphabet}".`
    });
  }
  return (size) => `${prefix}${separator}${generator(size)}`;
};
var generateId = createIdGenerator();
var validatorSymbol = Symbol.for("vercel.ai.validator");
function validator(validate) {
  return { [validatorSymbol]: true, validate };
}
function isValidator(value) {
  return typeof value === "object" && value !== null && validatorSymbol in value && value[validatorSymbol] === true && "validate" in value;
}
function asValidator(value) {
  return isValidator(value) ? value : zodValidator(value);
}
function zodValidator(zodSchema) {
  return validator((value) => {
    const result = zodSchema.safeParse(value);
    return result.success ? { success: true, value: result.data } : { success: false, error: result.error };
  });
}
function safeValidateTypes({
  value,
  schema
}) {
  const validator2 = asValidator(schema);
  try {
    if (validator2.validate == null) {
      return { success: true, value };
    }
    const result = validator2.validate(value);
    if (result.success) {
      return result;
    }
    return {
      success: false,
      error: TypeValidationError.wrap({ value, cause: result.error })
    };
  } catch (error) {
    return {
      success: false,
      error: TypeValidationError.wrap({ value, cause: error })
    };
  }
}
function safeParseJSON({
  text,
  schema
}) {
  try {
    const value = import_secure_json_parse.default.parse(text);
    if (schema == null) {
      return { success: true, value, rawValue: value };
    }
    const validationResult = safeValidateTypes({ value, schema });
    return validationResult.success ? { ...validationResult, rawValue: value } : validationResult;
  } catch (error) {
    return {
      success: false,
      error: JSONParseError.isInstance(error) ? error : new JSONParseError({ text, cause: error })
    };
  }
}

// node_modules/@ai-sdk/ui-utils/dist/index.mjs
var textStreamPart = {
  code: "0",
  name: "text",
  parse: (value) => {
    if (typeof value !== "string") {
      throw new Error('"text" parts expect a string value.');
    }
    return { type: "text", value };
  }
};
var errorStreamPart = {
  code: "3",
  name: "error",
  parse: (value) => {
    if (typeof value !== "string") {
      throw new Error('"error" parts expect a string value.');
    }
    return { type: "error", value };
  }
};
var assistantMessageStreamPart = {
  code: "4",
  name: "assistant_message",
  parse: (value) => {
    if (value == null || typeof value !== "object" || !("id" in value) || !("role" in value) || !("content" in value) || typeof value.id !== "string" || typeof value.role !== "string" || value.role !== "assistant" || !Array.isArray(value.content) || !value.content.every((item) => item != null && typeof item === "object" && ("type" in item) && item.type === "text" && ("text" in item) && item.text != null && typeof item.text === "object" && ("value" in item.text) && typeof item.text.value === "string")) {
      throw new Error('"assistant_message" parts expect an object with an "id", "role", and "content" property.');
    }
    return {
      type: "assistant_message",
      value
    };
  }
};
var assistantControlDataStreamPart = {
  code: "5",
  name: "assistant_control_data",
  parse: (value) => {
    if (value == null || typeof value !== "object" || !("threadId" in value) || !("messageId" in value) || typeof value.threadId !== "string" || typeof value.messageId !== "string") {
      throw new Error('"assistant_control_data" parts expect an object with a "threadId" and "messageId" property.');
    }
    return {
      type: "assistant_control_data",
      value: {
        threadId: value.threadId,
        messageId: value.messageId
      }
    };
  }
};
var dataMessageStreamPart = {
  code: "6",
  name: "data_message",
  parse: (value) => {
    if (value == null || typeof value !== "object" || !("role" in value) || !("data" in value) || typeof value.role !== "string" || value.role !== "data") {
      throw new Error('"data_message" parts expect an object with a "role" and "data" property.');
    }
    return {
      type: "data_message",
      value
    };
  }
};
var assistantStreamParts = [
  textStreamPart,
  errorStreamPart,
  assistantMessageStreamPart,
  assistantControlDataStreamPart,
  dataMessageStreamPart
];
var assistantStreamPartsByCode = {
  [textStreamPart.code]: textStreamPart,
  [errorStreamPart.code]: errorStreamPart,
  [assistantMessageStreamPart.code]: assistantMessageStreamPart,
  [assistantControlDataStreamPart.code]: assistantControlDataStreamPart,
  [dataMessageStreamPart.code]: dataMessageStreamPart
};
var StreamStringPrefixes = {
  [textStreamPart.name]: textStreamPart.code,
  [errorStreamPart.name]: errorStreamPart.code,
  [assistantMessageStreamPart.name]: assistantMessageStreamPart.code,
  [assistantControlDataStreamPart.name]: assistantControlDataStreamPart.code,
  [dataMessageStreamPart.name]: dataMessageStreamPart.code
};
var validCodes = assistantStreamParts.map((part) => part.code);
function fixJson(input) {
  const stack = ["ROOT"];
  let lastValidIndex = -1;
  let literalStart = null;
  function processValueStart(char, i, swapState) {
    {
      switch (char) {
        case '"': {
          lastValidIndex = i;
          stack.pop();
          stack.push(swapState);
          stack.push("INSIDE_STRING");
          break;
        }
        case "f":
        case "t":
        case "n": {
          lastValidIndex = i;
          literalStart = i;
          stack.pop();
          stack.push(swapState);
          stack.push("INSIDE_LITERAL");
          break;
        }
        case "-": {
          stack.pop();
          stack.push(swapState);
          stack.push("INSIDE_NUMBER");
          break;
        }
        case "0":
        case "1":
        case "2":
        case "3":
        case "4":
        case "5":
        case "6":
        case "7":
        case "8":
        case "9": {
          lastValidIndex = i;
          stack.pop();
          stack.push(swapState);
          stack.push("INSIDE_NUMBER");
          break;
        }
        case "{": {
          lastValidIndex = i;
          stack.pop();
          stack.push(swapState);
          stack.push("INSIDE_OBJECT_START");
          break;
        }
        case "[": {
          lastValidIndex = i;
          stack.pop();
          stack.push(swapState);
          stack.push("INSIDE_ARRAY_START");
          break;
        }
      }
    }
  }
  function processAfterObjectValue(char, i) {
    switch (char) {
      case ",": {
        stack.pop();
        stack.push("INSIDE_OBJECT_AFTER_COMMA");
        break;
      }
      case "}": {
        lastValidIndex = i;
        stack.pop();
        break;
      }
    }
  }
  function processAfterArrayValue(char, i) {
    switch (char) {
      case ",": {
        stack.pop();
        stack.push("INSIDE_ARRAY_AFTER_COMMA");
        break;
      }
      case "]": {
        lastValidIndex = i;
        stack.pop();
        break;
      }
    }
  }
  for (let i = 0;i < input.length; i++) {
    const char = input[i];
    const currentState = stack[stack.length - 1];
    switch (currentState) {
      case "ROOT":
        processValueStart(char, i, "FINISH");
        break;
      case "INSIDE_OBJECT_START": {
        switch (char) {
          case '"': {
            stack.pop();
            stack.push("INSIDE_OBJECT_KEY");
            break;
          }
          case "}": {
            lastValidIndex = i;
            stack.pop();
            break;
          }
        }
        break;
      }
      case "INSIDE_OBJECT_AFTER_COMMA": {
        switch (char) {
          case '"': {
            stack.pop();
            stack.push("INSIDE_OBJECT_KEY");
            break;
          }
        }
        break;
      }
      case "INSIDE_OBJECT_KEY": {
        switch (char) {
          case '"': {
            stack.pop();
            stack.push("INSIDE_OBJECT_AFTER_KEY");
            break;
          }
        }
        break;
      }
      case "INSIDE_OBJECT_AFTER_KEY": {
        switch (char) {
          case ":": {
            stack.pop();
            stack.push("INSIDE_OBJECT_BEFORE_VALUE");
            break;
          }
        }
        break;
      }
      case "INSIDE_OBJECT_BEFORE_VALUE": {
        processValueStart(char, i, "INSIDE_OBJECT_AFTER_VALUE");
        break;
      }
      case "INSIDE_OBJECT_AFTER_VALUE": {
        processAfterObjectValue(char, i);
        break;
      }
      case "INSIDE_STRING": {
        switch (char) {
          case '"': {
            stack.pop();
            lastValidIndex = i;
            break;
          }
          case "\\": {
            stack.push("INSIDE_STRING_ESCAPE");
            break;
          }
          default: {
            lastValidIndex = i;
          }
        }
        break;
      }
      case "INSIDE_ARRAY_START": {
        switch (char) {
          case "]": {
            lastValidIndex = i;
            stack.pop();
            break;
          }
          default: {
            lastValidIndex = i;
            processValueStart(char, i, "INSIDE_ARRAY_AFTER_VALUE");
            break;
          }
        }
        break;
      }
      case "INSIDE_ARRAY_AFTER_VALUE": {
        switch (char) {
          case ",": {
            stack.pop();
            stack.push("INSIDE_ARRAY_AFTER_COMMA");
            break;
          }
          case "]": {
            lastValidIndex = i;
            stack.pop();
            break;
          }
          default: {
            lastValidIndex = i;
            break;
          }
        }
        break;
      }
      case "INSIDE_ARRAY_AFTER_COMMA": {
        processValueStart(char, i, "INSIDE_ARRAY_AFTER_VALUE");
        break;
      }
      case "INSIDE_STRING_ESCAPE": {
        stack.pop();
        lastValidIndex = i;
        break;
      }
      case "INSIDE_NUMBER": {
        switch (char) {
          case "0":
          case "1":
          case "2":
          case "3":
          case "4":
          case "5":
          case "6":
          case "7":
          case "8":
          case "9": {
            lastValidIndex = i;
            break;
          }
          case "e":
          case "E":
          case "-":
          case ".": {
            break;
          }
          case ",": {
            stack.pop();
            if (stack[stack.length - 1] === "INSIDE_ARRAY_AFTER_VALUE") {
              processAfterArrayValue(char, i);
            }
            if (stack[stack.length - 1] === "INSIDE_OBJECT_AFTER_VALUE") {
              processAfterObjectValue(char, i);
            }
            break;
          }
          case "}": {
            stack.pop();
            if (stack[stack.length - 1] === "INSIDE_OBJECT_AFTER_VALUE") {
              processAfterObjectValue(char, i);
            }
            break;
          }
          case "]": {
            stack.pop();
            if (stack[stack.length - 1] === "INSIDE_ARRAY_AFTER_VALUE") {
              processAfterArrayValue(char, i);
            }
            break;
          }
          default: {
            stack.pop();
            break;
          }
        }
        break;
      }
      case "INSIDE_LITERAL": {
        const partialLiteral = input.substring(literalStart, i + 1);
        if (!"false".startsWith(partialLiteral) && !"true".startsWith(partialLiteral) && !"null".startsWith(partialLiteral)) {
          stack.pop();
          if (stack[stack.length - 1] === "INSIDE_OBJECT_AFTER_VALUE") {
            processAfterObjectValue(char, i);
          } else if (stack[stack.length - 1] === "INSIDE_ARRAY_AFTER_VALUE") {
            processAfterArrayValue(char, i);
          }
        } else {
          lastValidIndex = i;
        }
        break;
      }
    }
  }
  let result = input.slice(0, lastValidIndex + 1);
  for (let i = stack.length - 1;i >= 0; i--) {
    const state = stack[i];
    switch (state) {
      case "INSIDE_STRING": {
        result += '"';
        break;
      }
      case "INSIDE_OBJECT_KEY":
      case "INSIDE_OBJECT_AFTER_KEY":
      case "INSIDE_OBJECT_AFTER_COMMA":
      case "INSIDE_OBJECT_START":
      case "INSIDE_OBJECT_BEFORE_VALUE":
      case "INSIDE_OBJECT_AFTER_VALUE": {
        result += "}";
        break;
      }
      case "INSIDE_ARRAY_START":
      case "INSIDE_ARRAY_AFTER_COMMA":
      case "INSIDE_ARRAY_AFTER_VALUE": {
        result += "]";
        break;
      }
      case "INSIDE_LITERAL": {
        const partialLiteral = input.substring(literalStart, input.length);
        if ("true".startsWith(partialLiteral)) {
          result += "true".slice(partialLiteral.length);
        } else if ("false".startsWith(partialLiteral)) {
          result += "false".slice(partialLiteral.length);
        } else if ("null".startsWith(partialLiteral)) {
          result += "null".slice(partialLiteral.length);
        }
      }
    }
  }
  return result;
}
function parsePartialJson(jsonText) {
  if (jsonText === undefined) {
    return { value: undefined, state: "undefined-input" };
  }
  let result = safeParseJSON({ text: jsonText });
  if (result.success) {
    return { value: result.value, state: "successful-parse" };
  }
  result = safeParseJSON({ text: fixJson(jsonText) });
  if (result.success) {
    return { value: result.value, state: "repaired-parse" };
  }
  return { value: undefined, state: "failed-parse" };
}
var textStreamPart2 = {
  code: "0",
  name: "text",
  parse: (value) => {
    if (typeof value !== "string") {
      throw new Error('"text" parts expect a string value.');
    }
    return { type: "text", value };
  }
};
var dataStreamPart = {
  code: "2",
  name: "data",
  parse: (value) => {
    if (!Array.isArray(value)) {
      throw new Error('"data" parts expect an array value.');
    }
    return { type: "data", value };
  }
};
var errorStreamPart2 = {
  code: "3",
  name: "error",
  parse: (value) => {
    if (typeof value !== "string") {
      throw new Error('"error" parts expect a string value.');
    }
    return { type: "error", value };
  }
};
var messageAnnotationsStreamPart = {
  code: "8",
  name: "message_annotations",
  parse: (value) => {
    if (!Array.isArray(value)) {
      throw new Error('"message_annotations" parts expect an array value.');
    }
    return { type: "message_annotations", value };
  }
};
var toolCallStreamPart = {
  code: "9",
  name: "tool_call",
  parse: (value) => {
    if (value == null || typeof value !== "object" || !("toolCallId" in value) || typeof value.toolCallId !== "string" || !("toolName" in value) || typeof value.toolName !== "string" || !("args" in value) || typeof value.args !== "object") {
      throw new Error('"tool_call" parts expect an object with a "toolCallId", "toolName", and "args" property.');
    }
    return {
      type: "tool_call",
      value
    };
  }
};
var toolResultStreamPart = {
  code: "a",
  name: "tool_result",
  parse: (value) => {
    if (value == null || typeof value !== "object" || !("toolCallId" in value) || typeof value.toolCallId !== "string" || !("result" in value)) {
      throw new Error('"tool_result" parts expect an object with a "toolCallId" and a "result" property.');
    }
    return {
      type: "tool_result",
      value
    };
  }
};
var toolCallStreamingStartStreamPart = {
  code: "b",
  name: "tool_call_streaming_start",
  parse: (value) => {
    if (value == null || typeof value !== "object" || !("toolCallId" in value) || typeof value.toolCallId !== "string" || !("toolName" in value) || typeof value.toolName !== "string") {
      throw new Error('"tool_call_streaming_start" parts expect an object with a "toolCallId" and "toolName" property.');
    }
    return {
      type: "tool_call_streaming_start",
      value
    };
  }
};
var toolCallDeltaStreamPart = {
  code: "c",
  name: "tool_call_delta",
  parse: (value) => {
    if (value == null || typeof value !== "object" || !("toolCallId" in value) || typeof value.toolCallId !== "string" || !("argsTextDelta" in value) || typeof value.argsTextDelta !== "string") {
      throw new Error('"tool_call_delta" parts expect an object with a "toolCallId" and "argsTextDelta" property.');
    }
    return {
      type: "tool_call_delta",
      value
    };
  }
};
var finishMessageStreamPart = {
  code: "d",
  name: "finish_message",
  parse: (value) => {
    if (value == null || typeof value !== "object" || !("finishReason" in value) || typeof value.finishReason !== "string") {
      throw new Error('"finish_message" parts expect an object with a "finishReason" property.');
    }
    const result = {
      finishReason: value.finishReason
    };
    if ("usage" in value && value.usage != null && typeof value.usage === "object" && "promptTokens" in value.usage && "completionTokens" in value.usage) {
      result.usage = {
        promptTokens: typeof value.usage.promptTokens === "number" ? value.usage.promptTokens : Number.NaN,
        completionTokens: typeof value.usage.completionTokens === "number" ? value.usage.completionTokens : Number.NaN
      };
    }
    return {
      type: "finish_message",
      value: result
    };
  }
};
var finishStepStreamPart = {
  code: "e",
  name: "finish_step",
  parse: (value) => {
    if (value == null || typeof value !== "object" || !("finishReason" in value) || typeof value.finishReason !== "string") {
      throw new Error('"finish_step" parts expect an object with a "finishReason" property.');
    }
    const result = {
      finishReason: value.finishReason,
      isContinued: false
    };
    if ("usage" in value && value.usage != null && typeof value.usage === "object" && "promptTokens" in value.usage && "completionTokens" in value.usage) {
      result.usage = {
        promptTokens: typeof value.usage.promptTokens === "number" ? value.usage.promptTokens : Number.NaN,
        completionTokens: typeof value.usage.completionTokens === "number" ? value.usage.completionTokens : Number.NaN
      };
    }
    if ("isContinued" in value && typeof value.isContinued === "boolean") {
      result.isContinued = value.isContinued;
    }
    return {
      type: "finish_step",
      value: result
    };
  }
};
var startStepStreamPart = {
  code: "f",
  name: "start_step",
  parse: (value) => {
    if (value == null || typeof value !== "object" || !("messageId" in value) || typeof value.messageId !== "string") {
      throw new Error('"start_step" parts expect an object with an "id" property.');
    }
    return {
      type: "start_step",
      value: {
        messageId: value.messageId
      }
    };
  }
};
var reasoningStreamPart = {
  code: "g",
  name: "reasoning",
  parse: (value) => {
    if (typeof value !== "string") {
      throw new Error('"reasoning" parts expect a string value.');
    }
    return { type: "reasoning", value };
  }
};
var sourcePart = {
  code: "h",
  name: "source",
  parse: (value) => {
    if (value == null || typeof value !== "object") {
      throw new Error('"source" parts expect a Source object.');
    }
    return {
      type: "source",
      value
    };
  }
};
var redactedReasoningStreamPart = {
  code: "i",
  name: "redacted_reasoning",
  parse: (value) => {
    if (value == null || typeof value !== "object" || !("data" in value) || typeof value.data !== "string") {
      throw new Error('"redacted_reasoning" parts expect an object with a "data" property.');
    }
    return { type: "redacted_reasoning", value: { data: value.data } };
  }
};
var reasoningSignatureStreamPart = {
  code: "j",
  name: "reasoning_signature",
  parse: (value) => {
    if (value == null || typeof value !== "object" || !("signature" in value) || typeof value.signature !== "string") {
      throw new Error('"reasoning_signature" parts expect an object with a "signature" property.');
    }
    return {
      type: "reasoning_signature",
      value: { signature: value.signature }
    };
  }
};
var fileStreamPart = {
  code: "k",
  name: "file",
  parse: (value) => {
    if (value == null || typeof value !== "object" || !("data" in value) || typeof value.data !== "string" || !("mimeType" in value) || typeof value.mimeType !== "string") {
      throw new Error('"file" parts expect an object with a "data" and "mimeType" property.');
    }
    return { type: "file", value };
  }
};
var dataStreamParts = [
  textStreamPart2,
  dataStreamPart,
  errorStreamPart2,
  messageAnnotationsStreamPart,
  toolCallStreamPart,
  toolResultStreamPart,
  toolCallStreamingStartStreamPart,
  toolCallDeltaStreamPart,
  finishMessageStreamPart,
  finishStepStreamPart,
  startStepStreamPart,
  reasoningStreamPart,
  sourcePart,
  redactedReasoningStreamPart,
  reasoningSignatureStreamPart,
  fileStreamPart
];
var dataStreamPartsByCode = Object.fromEntries(dataStreamParts.map((part) => [part.code, part]));
var DataStreamStringPrefixes = Object.fromEntries(dataStreamParts.map((part) => [part.name, part.code]));
var validCodes2 = dataStreamParts.map((part) => part.code);
function formatDataStreamPart(type, value) {
  const streamPart = dataStreamParts.find((part) => part.name === type);
  if (!streamPart) {
    throw new Error(`Invalid stream part type: ${type}`);
  }
  return `${streamPart.code}:${JSON.stringify(value)}
`;
}
function zodSchema(zodSchema2, options) {
  var _a15;
  const useReferences = (_a15 = options == null ? undefined : options.useReferences) != null ? _a15 : false;
  return jsonSchema(esm_default(zodSchema2, {
    $refStrategy: useReferences ? "root" : "none",
    target: "jsonSchema7"
  }), {
    validate: (value) => {
      const result = zodSchema2.safeParse(value);
      return result.success ? { success: true, value: result.data } : { success: false, error: result.error };
    }
  });
}
var schemaSymbol = Symbol.for("vercel.ai.schema");
function jsonSchema(jsonSchema2, {
  validate
} = {}) {
  return {
    [schemaSymbol]: true,
    _type: undefined,
    [validatorSymbol]: true,
    jsonSchema: jsonSchema2,
    validate
  };
}
function isSchema(value) {
  return typeof value === "object" && value !== null && schemaSymbol in value && value[schemaSymbol] === true && "jsonSchema" in value && "validate" in value;
}
function asSchema(schema) {
  return isSchema(schema) ? schema : zodSchema(schema);
}

// node_modules/ai/dist/index.mjs
var __defProp2 = Object.defineProperty;
var __export2 = (target, all) => {
  for (var name17 in all)
    __defProp2(target, name17, { get: all[name17], enumerable: true });
};
function prepareResponseHeaders(headers, {
  contentType,
  dataStreamVersion
}) {
  const responseHeaders = new Headers(headers != null ? headers : {});
  if (!responseHeaders.has("Content-Type")) {
    responseHeaders.set("Content-Type", contentType);
  }
  if (dataStreamVersion !== undefined) {
    responseHeaders.set("X-Vercel-AI-Data-Stream", dataStreamVersion);
  }
  return responseHeaders;
}
var name14 = "AI_InvalidArgumentError";
var marker15 = `vercel.ai.error.${name14}`;
var symbol15 = Symbol.for(marker15);
var _a15;
_a15 = symbol15;
var name22 = "AI_RetryError";
var marker22 = `vercel.ai.error.${name22}`;
var symbol22 = Symbol.for(marker22);
var _a22;
_a22 = symbol22;
var name32 = "AI_NoImageGeneratedError";
var marker32 = `vercel.ai.error.${name32}`;
var symbol32 = Symbol.for(marker32);
var _a32;
_a32 = symbol32;
var name42 = "AI_NoObjectGeneratedError";
var marker42 = `vercel.ai.error.${name42}`;
var symbol42 = Symbol.for(marker42);
var _a42;
var NoObjectGeneratedError = class extends AISDKError {
  constructor({
    message = "No object generated.",
    cause,
    text: text2,
    response,
    usage,
    finishReason
  }) {
    super({ name: name42, message, cause });
    this[_a42] = true;
    this.text = text2;
    this.response = response;
    this.usage = usage;
    this.finishReason = finishReason;
  }
  static isInstance(error) {
    return AISDKError.hasMarker(error, marker42);
  }
};
_a42 = symbol42;
var name52 = "AI_DownloadError";
var marker52 = `vercel.ai.error.${name52}`;
var symbol52 = Symbol.for(marker52);
var _a52;
_a52 = symbol52;
var name62 = "AI_InvalidDataContentError";
var marker62 = `vercel.ai.error.${name62}`;
var symbol62 = Symbol.for(marker62);
var _a62;
_a62 = symbol62;
var dataContentSchema = exports_external.union([
  exports_external.string(),
  exports_external.instanceof(Uint8Array),
  exports_external.instanceof(ArrayBuffer),
  exports_external.custom((value) => {
    var _a17, _b;
    return (_b = (_a17 = globalThis.Buffer) == null ? undefined : _a17.isBuffer(value)) != null ? _b : false;
  }, { message: "Must be a Buffer" })
]);
var name72 = "AI_InvalidMessageRoleError";
var marker72 = `vercel.ai.error.${name72}`;
var symbol72 = Symbol.for(marker72);
var _a72;
_a72 = symbol72;
var name82 = "AI_MessageConversionError";
var marker82 = `vercel.ai.error.${name82}`;
var symbol82 = Symbol.for(marker82);
var _a82;
_a82 = symbol82;
var jsonValueSchema = exports_external.lazy(() => exports_external.union([
  exports_external.null(),
  exports_external.string(),
  exports_external.number(),
  exports_external.boolean(),
  exports_external.record(exports_external.string(), jsonValueSchema),
  exports_external.array(jsonValueSchema)
]));
var providerMetadataSchema = exports_external.record(exports_external.string(), exports_external.record(exports_external.string(), jsonValueSchema));
var toolResultContentSchema = exports_external.array(exports_external.union([
  exports_external.object({ type: exports_external.literal("text"), text: exports_external.string() }),
  exports_external.object({
    type: exports_external.literal("image"),
    data: exports_external.string(),
    mimeType: exports_external.string().optional()
  })
]));
var textPartSchema = exports_external.object({
  type: exports_external.literal("text"),
  text: exports_external.string(),
  providerOptions: providerMetadataSchema.optional(),
  experimental_providerMetadata: providerMetadataSchema.optional()
});
var imagePartSchema = exports_external.object({
  type: exports_external.literal("image"),
  image: exports_external.union([dataContentSchema, exports_external.instanceof(URL)]),
  mimeType: exports_external.string().optional(),
  providerOptions: providerMetadataSchema.optional(),
  experimental_providerMetadata: providerMetadataSchema.optional()
});
var filePartSchema = exports_external.object({
  type: exports_external.literal("file"),
  data: exports_external.union([dataContentSchema, exports_external.instanceof(URL)]),
  filename: exports_external.string().optional(),
  mimeType: exports_external.string(),
  providerOptions: providerMetadataSchema.optional(),
  experimental_providerMetadata: providerMetadataSchema.optional()
});
var reasoningPartSchema = exports_external.object({
  type: exports_external.literal("reasoning"),
  text: exports_external.string(),
  providerOptions: providerMetadataSchema.optional(),
  experimental_providerMetadata: providerMetadataSchema.optional()
});
var redactedReasoningPartSchema = exports_external.object({
  type: exports_external.literal("redacted-reasoning"),
  data: exports_external.string(),
  providerOptions: providerMetadataSchema.optional(),
  experimental_providerMetadata: providerMetadataSchema.optional()
});
var toolCallPartSchema = exports_external.object({
  type: exports_external.literal("tool-call"),
  toolCallId: exports_external.string(),
  toolName: exports_external.string(),
  args: exports_external.unknown(),
  providerOptions: providerMetadataSchema.optional(),
  experimental_providerMetadata: providerMetadataSchema.optional()
});
var toolResultPartSchema = exports_external.object({
  type: exports_external.literal("tool-result"),
  toolCallId: exports_external.string(),
  toolName: exports_external.string(),
  result: exports_external.unknown(),
  content: toolResultContentSchema.optional(),
  isError: exports_external.boolean().optional(),
  providerOptions: providerMetadataSchema.optional(),
  experimental_providerMetadata: providerMetadataSchema.optional()
});
var coreSystemMessageSchema = exports_external.object({
  role: exports_external.literal("system"),
  content: exports_external.string(),
  providerOptions: providerMetadataSchema.optional(),
  experimental_providerMetadata: providerMetadataSchema.optional()
});
var coreUserMessageSchema = exports_external.object({
  role: exports_external.literal("user"),
  content: exports_external.union([
    exports_external.string(),
    exports_external.array(exports_external.union([textPartSchema, imagePartSchema, filePartSchema]))
  ]),
  providerOptions: providerMetadataSchema.optional(),
  experimental_providerMetadata: providerMetadataSchema.optional()
});
var coreAssistantMessageSchema = exports_external.object({
  role: exports_external.literal("assistant"),
  content: exports_external.union([
    exports_external.string(),
    exports_external.array(exports_external.union([
      textPartSchema,
      filePartSchema,
      reasoningPartSchema,
      redactedReasoningPartSchema,
      toolCallPartSchema
    ]))
  ]),
  providerOptions: providerMetadataSchema.optional(),
  experimental_providerMetadata: providerMetadataSchema.optional()
});
var coreToolMessageSchema = exports_external.object({
  role: exports_external.literal("tool"),
  content: exports_external.array(toolResultPartSchema),
  providerOptions: providerMetadataSchema.optional(),
  experimental_providerMetadata: providerMetadataSchema.optional()
});
var coreMessageSchema = exports_external.union([
  coreSystemMessageSchema,
  coreUserMessageSchema,
  coreAssistantMessageSchema,
  coreToolMessageSchema
]);
var DEFAULT_SCHEMA_PREFIX = "JSON schema:";
var DEFAULT_SCHEMA_SUFFIX = "You MUST answer with a JSON object that matches the JSON schema above.";
var DEFAULT_GENERIC_SUFFIX = "You MUST answer with JSON.";
function injectJsonInstruction({
  prompt,
  schema,
  schemaPrefix = schema != null ? DEFAULT_SCHEMA_PREFIX : undefined,
  schemaSuffix = schema != null ? DEFAULT_SCHEMA_SUFFIX : DEFAULT_GENERIC_SUFFIX
}) {
  return [
    prompt != null && prompt.length > 0 ? prompt : undefined,
    prompt != null && prompt.length > 0 ? "" : undefined,
    schemaPrefix,
    schema != null ? JSON.stringify(schema) : undefined,
    schemaSuffix
  ].filter((line) => line != null).join(`
`);
}
var originalGenerateId = createIdGenerator({ prefix: "aiobj", size: 24 });
var originalGenerateId2 = createIdGenerator({ prefix: "aiobj", size: 24 });
var name92 = "AI_NoOutputSpecifiedError";
var marker92 = `vercel.ai.error.${name92}`;
var symbol92 = Symbol.for(marker92);
var _a92;
_a92 = symbol92;
var name102 = "AI_ToolExecutionError";
var marker102 = `vercel.ai.error.${name102}`;
var symbol102 = Symbol.for(marker102);
var _a102;
_a102 = symbol102;
var name112 = "AI_InvalidToolArgumentsError";
var marker112 = `vercel.ai.error.${name112}`;
var symbol112 = Symbol.for(marker112);
var _a112;
_a112 = symbol112;
var name122 = "AI_NoSuchToolError";
var marker122 = `vercel.ai.error.${name122}`;
var symbol122 = Symbol.for(marker122);
var _a122;
_a122 = symbol122;
var name132 = "AI_ToolCallRepairError";
var marker132 = `vercel.ai.error.${name132}`;
var symbol132 = Symbol.for(marker132);
var _a132;
_a132 = symbol132;
var originalGenerateId3 = createIdGenerator({
  prefix: "aitxt",
  size: 24
});
var originalGenerateMessageId = createIdGenerator({
  prefix: "msg",
  size: 24
});
var output_exports = {};
__export2(output_exports, {
  object: () => object2,
  text: () => text
});
var name142 = "AI_InvalidStreamPartError";
var marker142 = `vercel.ai.error.${name142}`;
var symbol142 = Symbol.for(marker142);
var _a142;
_a142 = symbol142;
var name15 = "AI_MCPClientError";
var marker152 = `vercel.ai.error.${name15}`;
var symbol152 = Symbol.for(marker152);
var _a152;
_a152 = symbol152;
var text = () => ({
  type: "text",
  responseFormat: () => ({ type: "text" }),
  injectIntoSystemPrompt({ system }) {
    return system;
  },
  parsePartial({ text: text2 }) {
    return { partial: text2 };
  },
  parseOutput({ text: text2 }) {
    return text2;
  }
});
var object2 = ({
  schema: inputSchema
}) => {
  const schema = asSchema(inputSchema);
  return {
    type: "object",
    responseFormat: ({ model }) => ({
      type: "json",
      schema: model.supportsStructuredOutputs ? schema.jsonSchema : undefined
    }),
    injectIntoSystemPrompt({ system, model }) {
      return model.supportsStructuredOutputs ? system : injectJsonInstruction({
        prompt: system,
        schema: schema.jsonSchema
      });
    },
    parsePartial({ text: text2 }) {
      const result = parsePartialJson(text2);
      switch (result.state) {
        case "failed-parse":
        case "undefined-input":
          return;
        case "repaired-parse":
        case "successful-parse":
          return {
            partial: result.value
          };
        default: {
          const _exhaustiveCheck = result.state;
          throw new Error(`Unsupported parse state: ${_exhaustiveCheck}`);
        }
      }
    },
    parseOutput({ text: text2 }, context) {
      const parseResult = safeParseJSON({ text: text2 });
      if (!parseResult.success) {
        throw new NoObjectGeneratedError({
          message: "No object generated: could not parse the response.",
          cause: parseResult.error,
          text: text2,
          response: context.response,
          usage: context.usage,
          finishReason: context.finishReason
        });
      }
      const validationResult = safeValidateTypes({
        value: parseResult.value,
        schema
      });
      if (!validationResult.success) {
        throw new NoObjectGeneratedError({
          message: "No object generated: response did not match schema.",
          cause: validationResult.error,
          text: text2,
          response: context.response,
          usage: context.usage,
          finishReason: context.finishReason
        });
      }
      return validationResult.value;
    }
  };
};
function mergeStreams(stream1, stream2) {
  const reader1 = stream1.getReader();
  const reader2 = stream2.getReader();
  let lastRead1 = undefined;
  let lastRead2 = undefined;
  let stream1Done = false;
  let stream2Done = false;
  async function readStream1(controller) {
    try {
      if (lastRead1 == null) {
        lastRead1 = reader1.read();
      }
      const result = await lastRead1;
      lastRead1 = undefined;
      if (!result.done) {
        controller.enqueue(result.value);
      } else {
        controller.close();
      }
    } catch (error) {
      controller.error(error);
    }
  }
  async function readStream2(controller) {
    try {
      if (lastRead2 == null) {
        lastRead2 = reader2.read();
      }
      const result = await lastRead2;
      lastRead2 = undefined;
      if (!result.done) {
        controller.enqueue(result.value);
      } else {
        controller.close();
      }
    } catch (error) {
      controller.error(error);
    }
  }
  return new ReadableStream({
    async pull(controller) {
      try {
        if (stream1Done) {
          await readStream2(controller);
          return;
        }
        if (stream2Done) {
          await readStream1(controller);
          return;
        }
        if (lastRead1 == null) {
          lastRead1 = reader1.read();
        }
        if (lastRead2 == null) {
          lastRead2 = reader2.read();
        }
        const { result, reader } = await Promise.race([
          lastRead1.then((result2) => ({ result: result2, reader: reader1 })),
          lastRead2.then((result2) => ({ result: result2, reader: reader2 }))
        ]);
        if (!result.done) {
          controller.enqueue(result.value);
        }
        if (reader === reader1) {
          lastRead1 = undefined;
          if (result.done) {
            await readStream2(controller);
            stream1Done = true;
          }
        } else {
          lastRead2 = undefined;
          if (result.done) {
            stream2Done = true;
            await readStream1(controller);
          }
        }
      } catch (error) {
        controller.error(error);
      }
    },
    cancel() {
      reader1.cancel();
      reader2.cancel();
    }
  });
}
var originalGenerateId4 = createIdGenerator({
  prefix: "aitxt",
  size: 24
});
var originalGenerateMessageId2 = createIdGenerator({
  prefix: "msg",
  size: 24
});
var name16 = "AI_NoSuchProviderError";
var marker16 = `vercel.ai.error.${name16}`;
var symbol16 = Symbol.for(marker16);
var _a16;
_a16 = symbol16;
function tool(tool2) {
  return tool2;
}
var ClientOrServerImplementationSchema = exports_external.object({
  name: exports_external.string(),
  version: exports_external.string()
}).passthrough();
var BaseParamsSchema = exports_external.object({
  _meta: exports_external.optional(exports_external.object({}).passthrough())
}).passthrough();
var ResultSchema2 = BaseParamsSchema;
var RequestSchema2 = exports_external.object({
  method: exports_external.string(),
  params: exports_external.optional(BaseParamsSchema)
});
var ServerCapabilitiesSchema2 = exports_external.object({
  experimental: exports_external.optional(exports_external.object({}).passthrough()),
  logging: exports_external.optional(exports_external.object({}).passthrough()),
  prompts: exports_external.optional(exports_external.object({
    listChanged: exports_external.optional(exports_external.boolean())
  }).passthrough()),
  resources: exports_external.optional(exports_external.object({
    subscribe: exports_external.optional(exports_external.boolean()),
    listChanged: exports_external.optional(exports_external.boolean())
  }).passthrough()),
  tools: exports_external.optional(exports_external.object({
    listChanged: exports_external.optional(exports_external.boolean())
  }).passthrough())
}).passthrough();
var InitializeResultSchema2 = ResultSchema2.extend({
  protocolVersion: exports_external.string(),
  capabilities: ServerCapabilitiesSchema2,
  serverInfo: ClientOrServerImplementationSchema,
  instructions: exports_external.optional(exports_external.string())
});
var PaginatedResultSchema2 = ResultSchema2.extend({
  nextCursor: exports_external.optional(exports_external.string())
});
var ToolSchema2 = exports_external.object({
  name: exports_external.string(),
  description: exports_external.optional(exports_external.string()),
  inputSchema: exports_external.object({
    type: exports_external.literal("object"),
    properties: exports_external.optional(exports_external.object({}).passthrough())
  }).passthrough()
}).passthrough();
var ListToolsResultSchema2 = PaginatedResultSchema2.extend({
  tools: exports_external.array(ToolSchema2)
});
var TextContentSchema2 = exports_external.object({
  type: exports_external.literal("text"),
  text: exports_external.string()
}).passthrough();
var ImageContentSchema2 = exports_external.object({
  type: exports_external.literal("image"),
  data: exports_external.string().base64(),
  mimeType: exports_external.string()
}).passthrough();
var ResourceContentsSchema2 = exports_external.object({
  uri: exports_external.string(),
  mimeType: exports_external.optional(exports_external.string())
}).passthrough();
var TextResourceContentsSchema2 = ResourceContentsSchema2.extend({
  text: exports_external.string()
});
var BlobResourceContentsSchema2 = ResourceContentsSchema2.extend({
  blob: exports_external.string().base64()
});
var EmbeddedResourceSchema2 = exports_external.object({
  type: exports_external.literal("resource"),
  resource: exports_external.union([TextResourceContentsSchema2, BlobResourceContentsSchema2])
}).passthrough();
var CallToolResultSchema2 = ResultSchema2.extend({
  content: exports_external.array(exports_external.union([TextContentSchema2, ImageContentSchema2, EmbeddedResourceSchema2])),
  isError: exports_external.boolean().default(false).optional()
}).or(ResultSchema2.extend({
  toolResult: exports_external.unknown()
}));
var JSONRPC_VERSION2 = "2.0";
var JSONRPCRequestSchema2 = exports_external.object({
  jsonrpc: exports_external.literal(JSONRPC_VERSION2),
  id: exports_external.union([exports_external.string(), exports_external.number().int()])
}).merge(RequestSchema2).strict();
var JSONRPCResponseSchema2 = exports_external.object({
  jsonrpc: exports_external.literal(JSONRPC_VERSION2),
  id: exports_external.union([exports_external.string(), exports_external.number().int()]),
  result: ResultSchema2
}).strict();
var JSONRPCErrorSchema2 = exports_external.object({
  jsonrpc: exports_external.literal(JSONRPC_VERSION2),
  id: exports_external.union([exports_external.string(), exports_external.number().int()]),
  error: exports_external.object({
    code: exports_external.number().int(),
    message: exports_external.string(),
    data: exports_external.optional(exports_external.unknown())
  })
}).strict();
var JSONRPCNotificationSchema2 = exports_external.object({
  jsonrpc: exports_external.literal(JSONRPC_VERSION2)
}).merge(exports_external.object({
  method: exports_external.string(),
  params: exports_external.optional(BaseParamsSchema)
})).strict();
var JSONRPCMessageSchema2 = exports_external.union([
  JSONRPCRequestSchema2,
  JSONRPCNotificationSchema2,
  JSONRPCResponseSchema2,
  JSONRPCErrorSchema2
]);
var langchain_adapter_exports = {};
__export2(langchain_adapter_exports, {
  mergeIntoDataStream: () => mergeIntoDataStream,
  toDataStream: () => toDataStream,
  toDataStreamResponse: () => toDataStreamResponse
});
function createCallbacksTransformer(callbacks = {}) {
  const textEncoder = new TextEncoder;
  let aggregatedResponse = "";
  return new TransformStream({
    async start() {
      if (callbacks.onStart)
        await callbacks.onStart();
    },
    async transform(message, controller) {
      controller.enqueue(textEncoder.encode(message));
      aggregatedResponse += message;
      if (callbacks.onToken)
        await callbacks.onToken(message);
      if (callbacks.onText && typeof message === "string") {
        await callbacks.onText(message);
      }
    },
    async flush() {
      if (callbacks.onCompletion) {
        await callbacks.onCompletion(aggregatedResponse);
      }
      if (callbacks.onFinal) {
        await callbacks.onFinal(aggregatedResponse);
      }
    }
  });
}
function toDataStreamInternal(stream, callbacks) {
  return stream.pipeThrough(new TransformStream({
    transform: async (value, controller) => {
      var _a17;
      if (typeof value === "string") {
        controller.enqueue(value);
        return;
      }
      if ("event" in value) {
        if (value.event === "on_chat_model_stream") {
          forwardAIMessageChunk((_a17 = value.data) == null ? undefined : _a17.chunk, controller);
        }
        return;
      }
      forwardAIMessageChunk(value, controller);
    }
  })).pipeThrough(createCallbacksTransformer(callbacks)).pipeThrough(new TextDecoderStream).pipeThrough(new TransformStream({
    transform: async (chunk, controller) => {
      controller.enqueue(formatDataStreamPart("text", chunk));
    }
  }));
}
function toDataStream(stream, callbacks) {
  return toDataStreamInternal(stream, callbacks).pipeThrough(new TextEncoderStream);
}
function toDataStreamResponse(stream, options) {
  var _a17;
  const dataStream = toDataStreamInternal(stream, options == null ? undefined : options.callbacks).pipeThrough(new TextEncoderStream);
  const data = options == null ? undefined : options.data;
  const init = options == null ? undefined : options.init;
  const responseStream = data ? mergeStreams(data.stream, dataStream) : dataStream;
  return new Response(responseStream, {
    status: (_a17 = init == null ? undefined : init.status) != null ? _a17 : 200,
    statusText: init == null ? undefined : init.statusText,
    headers: prepareResponseHeaders(init == null ? undefined : init.headers, {
      contentType: "text/plain; charset=utf-8",
      dataStreamVersion: "v1"
    })
  });
}
function mergeIntoDataStream(stream, options) {
  options.dataStream.merge(toDataStreamInternal(stream, options.callbacks));
}
function forwardAIMessageChunk(chunk, controller) {
  if (typeof chunk.content === "string") {
    controller.enqueue(chunk.content);
  } else {
    const content = chunk.content;
    for (const item of content) {
      if (item.type === "text") {
        controller.enqueue(item.text);
      }
    }
  }
}
var llamaindex_adapter_exports = {};
__export2(llamaindex_adapter_exports, {
  mergeIntoDataStream: () => mergeIntoDataStream2,
  toDataStream: () => toDataStream2,
  toDataStreamResponse: () => toDataStreamResponse2
});
function toDataStreamInternal2(stream, callbacks) {
  const trimStart = trimStartOfStream();
  return convertAsyncIteratorToReadableStream(stream[Symbol.asyncIterator]()).pipeThrough(new TransformStream({
    async transform(message, controller) {
      controller.enqueue(trimStart(message.delta));
    }
  })).pipeThrough(createCallbacksTransformer(callbacks)).pipeThrough(new TextDecoderStream).pipeThrough(new TransformStream({
    transform: async (chunk, controller) => {
      controller.enqueue(formatDataStreamPart("text", chunk));
    }
  }));
}
function toDataStream2(stream, callbacks) {
  return toDataStreamInternal2(stream, callbacks).pipeThrough(new TextEncoderStream);
}
function toDataStreamResponse2(stream, options = {}) {
  var _a17;
  const { init, data, callbacks } = options;
  const dataStream = toDataStreamInternal2(stream, callbacks).pipeThrough(new TextEncoderStream);
  const responseStream = data ? mergeStreams(data.stream, dataStream) : dataStream;
  return new Response(responseStream, {
    status: (_a17 = init == null ? undefined : init.status) != null ? _a17 : 200,
    statusText: init == null ? undefined : init.statusText,
    headers: prepareResponseHeaders(init == null ? undefined : init.headers, {
      contentType: "text/plain; charset=utf-8",
      dataStreamVersion: "v1"
    })
  });
}
function mergeIntoDataStream2(stream, options) {
  options.dataStream.merge(toDataStreamInternal2(stream, options.callbacks));
}
function trimStartOfStream() {
  let isStreamStart = true;
  return (text2) => {
    if (isStreamStart) {
      text2 = text2.trimStart();
      if (text2)
        isStreamStart = false;
    }
    return text2;
  };
}
var HANGING_STREAM_WARNING_TIME_MS = 15 * 1000;

// canvas-generated/tools/aitm.schema.ts
var accountSchema = exports_external.object({
  default_group_storage_quota_mb: exports_external.number().optional().nullable(),
  default_storage_quota_mb: exports_external.number().optional().nullable(),
  default_time_zone: exports_external.string().optional().nullable(),
  default_user_storage_quota_mb: exports_external.number().optional().nullable(),
  id: exports_external.number().optional().nullable(),
  integration_id: exports_external.string().optional().nullable(),
  lti_guid: exports_external.string().optional().nullable(),
  name: exports_external.string().optional().nullable(),
  parent_account_id: exports_external.number().optional().nullable(),
  root_account_id: exports_external.number().optional().nullable(),
  sis_account_id: exports_external.string().optional().nullable(),
  sis_import_id: exports_external.number().optional().nullable(),
  uuid: exports_external.string().optional().nullable(),
  workflow_state: exports_external.string().optional().nullable()
});
var accountNotificationSchema = exports_external.object({
  end_at: exports_external.string().optional().nullable(),
  icon: exports_external.string().optional().nullable(),
  message: exports_external.string().optional().nullable(),
  role_ids: exports_external.array(exports_external.number()).optional().nullable(),
  roles: exports_external.array(exports_external.string()).optional().nullable(),
  start_at: exports_external.string().optional().nullable(),
  subject: exports_external.string().optional().nullable()
});
var activityStreamSchema = exports_external.object({
  created_at: exports_external.string().optional(),
  updated_at: exports_external.string().optional(),
  id: exports_external.number().optional(),
  title: exports_external.string().optional(),
  message: exports_external.string().optional(),
  type: exports_external.string().optional(),
  read_state: exports_external.boolean().optional(),
  context_type: exports_external.string().optional(),
  course_id: exports_external.number().optional(),
  group_id: exports_external.number().optional(),
  html_url: exports_external.string().optional()
});
var answerSchema = exports_external.object({
  answer_comments: exports_external.string().optional().nullable(),
  answer_match_left: exports_external.string().optional().nullable(),
  answer_match_right: exports_external.string().optional().nullable(),
  answer_text: exports_external.string(),
  answer_weight: exports_external.number(),
  approximate: exports_external.number().optional().nullable(),
  blank_id: exports_external.number().optional().nullable(),
  end: exports_external.number().optional().nullable(),
  exact: exports_external.number().optional().nullable(),
  id: exports_external.number().optional().nullable(),
  margin: exports_external.number().optional().nullable(),
  matching_answer_incorrect_matches: exports_external.string().optional().nullable(),
  numerical_answer_type: exports_external.string().optional().nullable(),
  precision: exports_external.number().optional().nullable(),
  start: exports_external.number().optional().nullable(),
  text_after_answers: exports_external.string().optional().nullable()
});
var assignmentDateSchema = exports_external.object({
  base: exports_external.boolean().optional().nullable(),
  due_at: exports_external.string().optional().nullable(),
  id: exports_external.number().optional().nullable(),
  lock_at: exports_external.string().optional().nullable(),
  title: exports_external.string().optional().nullable(),
  unlock_at: exports_external.string().optional().nullable()
});
var externalToolTagAttributesSchema = exports_external.object({
  new_tab: exports_external.boolean().optional().nullable(),
  resource_link_id: exports_external.string().optional().nullable(),
  url: exports_external.string().optional().nullable()
}).nullable();
var lockInfoSchema = exports_external.object({
  asset_string: exports_external.string().optional().nullable(),
  context_module: exports_external.string().optional().nullable(),
  lock_at: exports_external.string().optional().nullable(),
  manually_locked: exports_external.boolean().optional().nullable(),
  unlock_at: exports_external.string().optional().nullable()
}).nullable();
var needsGradingCountSchema = exports_external.object({
  needs_grading_count: exports_external.number().optional().nullable(),
  section_id: exports_external.string().optional().nullable()
});
var assignmentOverrideSchema = exports_external.object({
  all_day: exports_external.number().optional().nullable(),
  all_day_date: exports_external.string().optional().nullable(),
  assignment_id: exports_external.number().optional().nullable(),
  course_section_id: exports_external.number().optional().nullable(),
  due_at: exports_external.string().optional().nullable(),
  group_id: exports_external.number().optional().nullable(),
  id: exports_external.number().optional().nullable(),
  lock_at: exports_external.string().optional().nullable(),
  student_ids: exports_external.array(exports_external.number()).optional().nullable(),
  title: exports_external.string().optional().nullable(),
  unlock_at: exports_external.string().optional().nullable()
});
var rubricSettingsSchema = exports_external.object({
  id: exports_external.number().optional().nullable(),
  title: exports_external.string().optional().nullable(),
  points_possible: exports_external.number().optional().nullable(),
  free_form_criterion_comments: exports_external.boolean().optional().nullable(),
  hide_score_total: exports_external.boolean().optional().nullable(),
  hide_points: exports_external.boolean().optional().nullable()
}).nullable();
var turnitinSettingsSchema = exports_external.object({
  exclude_biblio: exports_external.boolean().optional().nullable(),
  exclude_quoted: exports_external.boolean().optional().nullable(),
  exclude_small_matches_type: exports_external.string().optional().nullable(),
  exclude_small_matches_value: exports_external.number().optional().nullable(),
  internet_check: exports_external.boolean().optional().nullable(),
  journal_check: exports_external.boolean().optional().nullable(),
  originality_report_visibility: exports_external.string().optional().nullable(),
  s_paper_check: exports_external.boolean().optional().nullable()
}).nullable();
var gradingRulesSchema = exports_external.object({
  drop_highest: exports_external.number().optional().nullable(),
  drop_lowest: exports_external.number().optional().nullable(),
  never_drop: exports_external.array(exports_external.number()).optional().nullable()
}).nullable();
var federatedAttributesConfigSchema = exports_external.object({
  admin_roles: exports_external.string().optional().nullable(),
  display_name: exports_external.string().optional().nullable(),
  email: exports_external.string().optional().nullable(),
  given_name: exports_external.string().optional().nullable(),
  integration_id: exports_external.string().optional().nullable(),
  locale: exports_external.string().optional().nullable(),
  name: exports_external.string().optional().nullable(),
  sis_user_id: exports_external.string().optional().nullable(),
  sortable_name: exports_external.string().optional().nullable(),
  surname: exports_external.string().optional().nullable(),
  timezone: exports_external.string().optional().nullable()
}).nullable();
var avatarSchema = exports_external.object({
  "content-type": exports_external.string().optional().nullable(),
  display_name: exports_external.string(),
  filename: exports_external.string().optional().nullable(),
  id: exports_external.number().optional().nullable(),
  size: exports_external.number().optional().nullable(),
  token: exports_external.string(),
  type: exports_external.string(),
  url: exports_external.string()
});
var blueprintMigrationSchema = exports_external.object({
  comment: exports_external.string().optional().nullable(),
  created_at: exports_external.string().optional().nullable(),
  exports_started_at: exports_external.string().optional().nullable(),
  id: exports_external.number().optional().nullable(),
  imports_completed_at: exports_external.string().optional().nullable(),
  imports_queued_at: exports_external.string().optional().nullable(),
  subscription_id: exports_external.number().optional().nullable(),
  template_id: exports_external.number().optional().nullable(),
  user_id: exports_external.number().optional().nullable(),
  workflow_state: exports_external.string().optional().nullable()
});
var blueprintMigrationNullableSchema = exports_external.object({
  comment: exports_external.string().optional().nullable(),
  created_at: exports_external.string().optional().nullable(),
  exports_started_at: exports_external.string().optional().nullable(),
  id: exports_external.number().optional().nullable(),
  imports_completed_at: exports_external.string().optional().nullable(),
  imports_queued_at: exports_external.string().optional().nullable(),
  subscription_id: exports_external.number().optional().nullable(),
  template_id: exports_external.number().optional().nullable(),
  user_id: exports_external.number().optional().nullable(),
  workflow_state: exports_external.string().optional().nullable()
}).nullable();
var blueprintSubscriptionSchema = exports_external.object({
  blueprint_course: exports_external.record(exports_external.unknown()).optional().nullable(),
  id: exports_external.number().optional().nullable(),
  template_id: exports_external.number().optional().nullable()
});
var blueprintTemplateSchema = exports_external.object({
  associated_course_count: exports_external.number().optional().nullable(),
  course_id: exports_external.number().optional().nullable(),
  id: exports_external.number().optional().nullable(),
  last_export_completed_at: exports_external.string().optional().nullable(),
  latest_migration: blueprintMigrationNullableSchema.optional()
});
var bookmarkSchema = exports_external.object({
  data: exports_external.record(exports_external.unknown()).optional().nullable(),
  id: exports_external.number().optional().nullable(),
  name: exports_external.string().optional().nullable(),
  position: exports_external.number().optional().nullable(),
  url: exports_external.string().optional()
});
var calendarEventSchema = exports_external.object({
  all_context_codes: exports_external.string().optional().nullable(),
  all_day: exports_external.boolean().optional().nullable(),
  all_day_date: exports_external.string().optional().nullable(),
  appointment_group_id: exports_external.number().optional().nullable(),
  appointment_group_url: exports_external.string().optional().nullable(),
  available_slots: exports_external.number().optional().nullable(),
  child_events: exports_external.array(exports_external.number()).optional().nullable(),
  child_events_count: exports_external.number().optional().nullable(),
  context_code: exports_external.string().optional().nullable(),
  created_at: exports_external.string().optional().nullable(),
  description: exports_external.string().optional().nullable(),
  effective_context_code: exports_external.string().optional().nullable(),
  end_at: exports_external.string().optional().nullable(),
  group: exports_external.string().optional().nullable(),
  hidden: exports_external.boolean().optional().nullable(),
  html_url: exports_external.string().optional().nullable(),
  id: exports_external.number().optional().nullable(),
  location_address: exports_external.string().optional().nullable(),
  location_name: exports_external.string().optional().nullable(),
  own_reservation: exports_external.boolean().optional().nullable(),
  parent_event_id: exports_external.number().optional().nullable(),
  participant_type: exports_external.string().optional().nullable(),
  participants_per_appointment: exports_external.number().optional().nullable(),
  reserve_url: exports_external.string().optional().nullable(),
  reserved: exports_external.boolean().optional().nullable(),
  start_at: exports_external.string().optional().nullable(),
  title: exports_external.string().optional().nullable(),
  updated_at: exports_external.string().optional().nullable(),
  url: exports_external.string().optional(),
  user: exports_external.string().optional().nullable(),
  workflow_state: exports_external.string().optional().nullable()
});
var calendarLinkSchema = exports_external.object({
  ics: exports_external.string().optional().nullable()
}).nullable();
var changeRecordSchema = exports_external.object({
  asset_id: exports_external.number().optional().nullable(),
  asset_name: exports_external.string().optional().nullable(),
  asset_type: exports_external.string().optional().nullable(),
  change_type: exports_external.string().optional().nullable(),
  exceptions: exports_external.array(exports_external.record(exports_external.unknown())).optional().nullable(),
  html_url: exports_external.string().optional().nullable(),
  locked: exports_external.boolean().optional().nullable()
});
var collaborationSchema = exports_external.object({
  collaboration_type: exports_external.string().optional().nullable(),
  context_id: exports_external.number().optional().nullable(),
  context_type: exports_external.string().optional().nullable(),
  created_at: exports_external.string().optional().nullable(),
  description: exports_external.string().optional().nullable(),
  document_id: exports_external.string().optional().nullable(),
  id: exports_external.number().optional().nullable(),
  title: exports_external.string().optional().nullable(),
  type: exports_external.string().optional(),
  update_url: exports_external.string().optional().nullable(),
  updated_at: exports_external.string().optional().nullable(),
  url: exports_external.string().optional(),
  user_id: exports_external.number().optional().nullable(),
  user_name: exports_external.string().optional().nullable()
});
var collaboratorSchema = exports_external.object({
  id: exports_external.number(),
  name: exports_external.string().optional().nullable(),
  type: exports_external.string().optional().nullable()
});
var columnDatumSchema = exports_external.object({
  content: exports_external.string().optional().nullable(),
  user_id: exports_external.number().optional().nullable()
});
var commMessageSchema = exports_external.object({
  body: exports_external.string().optional().nullable(),
  created_at: exports_external.string().optional().nullable(),
  from: exports_external.string().optional().nullable(),
  from_name: exports_external.string().optional().nullable(),
  html_body: exports_external.string().optional().nullable(),
  id: exports_external.number().optional(),
  reply_to: exports_external.string().optional().nullable(),
  sent_at: exports_external.string().optional().nullable(),
  subject: exports_external.string().optional().nullable(),
  to: exports_external.string().optional().nullable(),
  workflow_state: exports_external.string().optional().nullable()
});
var communicationChannelSchema = exports_external.object({
  address: exports_external.string().optional().nullable(),
  id: exports_external.number().optional(),
  position: exports_external.number().optional().nullable(),
  type: exports_external.string().optional().nullable(),
  user_id: exports_external.number().optional().nullable(),
  workflow_state: exports_external.string().optional().nullable()
});
var completionRequirementSchema = exports_external.object({
  completed: exports_external.boolean().optional().nullable(),
  min_score: exports_external.number().optional().nullable(),
  type: exports_external.string().optional().nullable()
}).nullable();
var conferenceRecordingSchema = exports_external.object({
  created_at: exports_external.string().optional().nullable(),
  duration_minutes: exports_external.number().optional().nullable(),
  playback_url: exports_external.string().optional().nullable(),
  title: exports_external.string().optional().nullable(),
  updated_at: exports_external.string().optional().nullable()
});
var contentDetailsSchema = exports_external.object({
  due_at: exports_external.string().optional().nullable(),
  lock_at: exports_external.string().optional().nullable(),
  lock_explanation: exports_external.string().optional().nullable(),
  lock_info: lockInfoSchema.optional(),
  locked_for_user: exports_external.boolean().optional().nullable(),
  points_possible: exports_external.number().optional().nullable(),
  unlock_at: exports_external.string().optional().nullable()
}).nullable();
var fileNullableSchema = exports_external.object({
  "content-type": exports_external.string().optional().nullable(),
  created_at: exports_external.string().optional().nullable(),
  display_name: exports_external.string().optional().nullable(),
  id: exports_external.number().optional(),
  size: exports_external.number().optional().nullable(),
  updated_at: exports_external.string().optional().nullable(),
  url: exports_external.string().optional().nullable()
}).nullable();
var contentMigrationSchema = exports_external.object({
  attachment: exports_external.string().optional().nullable(),
  finished_at: exports_external.string().optional().nullable(),
  id: exports_external.number().optional(),
  migration_issues_url: exports_external.string().optional().nullable(),
  migration_type: exports_external.string().optional().nullable(),
  migration_type_title: exports_external.string().optional().nullable(),
  pre_attachment: exports_external.string().optional().nullable(),
  progress_url: exports_external.string().optional().nullable(),
  started_at: exports_external.string().optional().nullable(),
  user_id: exports_external.number().optional().nullable(),
  workflow_state: exports_external.string().optional().nullable()
});
var contextExternalToolSchema = exports_external.object({
  consumer_key: exports_external.string().optional().nullable(),
  domain: exports_external.string().optional().nullable(),
  id: exports_external.number().optional(),
  name: exports_external.string().optional().nullable(),
  url: exports_external.string().optional().nullable()
});
var conversationParticipantSchema = exports_external.object({
  avatar_url: exports_external.string().optional().nullable(),
  full_name: exports_external.string().optional().nullable(),
  id: exports_external.number().optional(),
  name: exports_external.string().optional().nullable()
});
var courseProgressSchema = exports_external.object({
  completed_at: exports_external.string().optional().nullable(),
  next_requirement_url: exports_external.string().optional().nullable(),
  requirement_completed_count: exports_external.number().optional().nullable(),
  requirement_count: exports_external.number().optional().nullable()
}).nullable();
var gradingPeriodSchema = exports_external.object({
  close_date: exports_external.string().optional().nullable(),
  end_date: exports_external.string().optional().nullable(),
  id: exports_external.number().optional(),
  is_closed: exports_external.boolean().optional().nullable(),
  start_date: exports_external.string().optional().nullable(),
  title: exports_external.string().optional().nullable(),
  weight: exports_external.number().optional().nullable()
});
var termSchema = exports_external.object({
  end_at: exports_external.string().optional().nullable(),
  id: exports_external.number().optional(),
  name: exports_external.string().optional().nullable(),
  start_at: exports_external.string().optional().nullable()
}).nullable();
var epubExportNullableSchema = exports_external.object({
  attachment: fileNullableSchema.optional(),
  created_at: exports_external.string().optional().nullable(),
  id: exports_external.number().optional(),
  progress_url: exports_external.string().optional().nullable(),
  user_id: exports_external.number().optional().nullable(),
  workflow_state: exports_external.string().optional().nullable()
}).nullable();
var courseEventLinkSchema = exports_external.object({
  copied_from: exports_external.number().optional().nullable(),
  copied_to: exports_external.number().optional().nullable(),
  course: exports_external.number().optional().nullable(),
  page_view: exports_external.string().optional().nullable(),
  sis_batch: exports_external.number().optional().nullable(),
  user: exports_external.number().optional().nullable()
}).nullable();
var courseNicknameSchema = exports_external.object({
  course_id: exports_external.number().optional().nullable(),
  name: exports_external.string().optional().nullable(),
  nickname: exports_external.string().optional().nullable()
});
var customColorsSchema = exports_external.object({
  custom_colors: exports_external.record(exports_external.string()).optional().nullable()
});
var customColumnSchema = exports_external.object({
  hidden: exports_external.boolean().optional().nullable(),
  id: exports_external.number().optional(),
  position: exports_external.number().optional().nullable(),
  read_only: exports_external.boolean().optional().nullable(),
  teacher_notes: exports_external.boolean().optional().nullable(),
  title: exports_external.string().optional().nullable()
});
var daySchema = exports_external.object({
  date: exports_external.string().optional().nullable(),
  graders: exports_external.number().optional().nullable()
});
var fileAttachmentSchema = exports_external.object({
  "content-type": exports_external.string().optional().nullable(),
  display_name: exports_external.string().optional().nullable(),
  filename: exports_external.string().optional().nullable(),
  url: exports_external.string().optional().nullable()
});
var discussionTopicNullableSchema = exports_external.object({
  allow_rating: exports_external.boolean().optional().nullable(),
  assignment_id: exports_external.number().optional().nullable(),
  attachments: exports_external.array(fileAttachmentSchema).optional().nullable(),
  delayed_post_at: exports_external.string().optional().nullable(),
  discussion_subentry_count: exports_external.number().optional().nullable(),
  discussion_type: exports_external.string().optional().nullable(),
  group_category_id: exports_external.number().optional().nullable(),
  group_topic_children: exports_external.array(exports_external.record(exports_external.unknown())).optional().nullable(),
  html_url: exports_external.string().optional().nullable(),
  id: exports_external.number().optional(),
  last_reply_at: exports_external.string().optional().nullable(),
  lock_at: exports_external.string().optional().nullable(),
  lock_explanation: exports_external.string().optional().nullable(),
  lock_info: lockInfoSchema.optional(),
  locked: exports_external.boolean().optional().nullable(),
  locked_for_user: exports_external.boolean().optional().nullable(),
  message: exports_external.string().optional().nullable(),
  only_graders_can_rate: exports_external.boolean().optional().nullable(),
  permissions: exports_external.record(exports_external.unknown()).optional().nullable(),
  pinned: exports_external.boolean().optional().nullable(),
  podcast_url: exports_external.string().optional().nullable(),
  posted_at: exports_external.string().optional().nullable(),
  published: exports_external.boolean().optional().nullable(),
  read_state: exports_external.string().optional().nullable(),
  require_initial_post: exports_external.boolean().optional().nullable(),
  root_topic_id: exports_external.number().optional().nullable(),
  sort_by_rating: exports_external.boolean().optional().nullable(),
  subscribed: exports_external.boolean().optional().nullable(),
  subscription_hold: exports_external.string().optional().nullable(),
  title: exports_external.string().optional().nullable(),
  topic_children: exports_external.array(exports_external.number()).optional().nullable(),
  unread_count: exports_external.number().optional().nullable(),
  user_can_see_posts: exports_external.boolean().optional().nullable(),
  user_name: exports_external.string().optional().nullable()
}).nullable();
var gradeSchema = exports_external.object({
  current_grade: exports_external.string().optional().nullable(),
  current_score: exports_external.number().optional().nullable(),
  final_grade: exports_external.string().optional().nullable(),
  final_score: exports_external.number().optional().nullable(),
  html_url: exports_external.string().optional().nullable(),
  unposted_current_grade: exports_external.string().optional().nullable(),
  unposted_current_score: exports_external.number().optional().nullable(),
  unposted_final_grade: exports_external.string().optional().nullable(),
  unposted_final_score: exports_external.number().optional().nullable()
}).nullable();
var enrollmentTermSchema = exports_external.object({
  end_at: exports_external.string().optional().nullable(),
  id: exports_external.number().optional(),
  name: exports_external.string().optional().nullable(),
  overrides: exports_external.record(exports_external.unknown()).optional().nullable(),
  sis_import_id: exports_external.number().optional().nullable(),
  sis_term_id: exports_external.string().optional().nullable(),
  start_at: exports_external.string().optional().nullable(),
  workflow_state: exports_external.string().optional().nullable()
});
var epubExportSchema = exports_external.object({
  attachment: fileNullableSchema.optional(),
  created_at: exports_external.string().optional().nullable(),
  id: exports_external.number().optional(),
  progress_url: exports_external.string().optional().nullable(),
  user_id: exports_external.number().optional().nullable(),
  workflow_state: exports_external.string().optional().nullable()
});
var externalFeedSchema = exports_external.object({
  created_at: exports_external.string().optional().nullable(),
  display_name: exports_external.string().optional().nullable(),
  header_match: exports_external.string().optional().nullable(),
  id: exports_external.number().optional(),
  url: exports_external.string().optional().nullable(),
  verbosity: exports_external.string().optional().nullable()
});
var favoriteSchema = exports_external.object({
  context_id: exports_external.number().optional().nullable(),
  context_type: exports_external.string().optional().nullable()
});
var featureFlagNullableSchema = exports_external.object({
  context_id: exports_external.number().optional().nullable(),
  context_type: exports_external.string().optional().nullable(),
  feature: exports_external.string().optional().nullable(),
  locked: exports_external.boolean().optional().nullable(),
  state: exports_external.string().optional().nullable()
}).nullable();
var featureFlagSchema = exports_external.object({
  context_id: exports_external.number().optional().nullable(),
  context_type: exports_external.string().optional().nullable(),
  feature: exports_external.string().optional().nullable(),
  locked: exports_external.boolean().optional().nullable(),
  state: exports_external.string().optional().nullable()
});
var fileSchema = exports_external.object({
  "content-type": exports_external.string().optional().nullable(),
  created_at: exports_external.string().optional().nullable(),
  display_name: exports_external.string().optional().nullable(),
  id: exports_external.number().optional(),
  size: exports_external.number().optional().nullable(),
  updated_at: exports_external.string().optional().nullable(),
  url: exports_external.string().optional().nullable()
});
var folderSchema = exports_external.object({
  context_id: exports_external.number().optional().nullable(),
  context_type: exports_external.string().optional().nullable(),
  created_at: exports_external.string().optional().nullable(),
  files_count: exports_external.number().optional().nullable(),
  files_url: exports_external.string().optional().nullable(),
  folders_count: exports_external.number().optional().nullable(),
  folders_url: exports_external.string().optional().nullable(),
  for_submissions: exports_external.boolean().optional().nullable(),
  full_name: exports_external.string().optional().nullable(),
  hidden: exports_external.boolean().optional().nullable(),
  hidden_for_user: exports_external.boolean().optional().nullable(),
  id: exports_external.number().optional(),
  lock_at: exports_external.string().optional().nullable(),
  locked: exports_external.boolean().optional().nullable(),
  locked_for_user: exports_external.boolean().optional().nullable(),
  name: exports_external.string().optional().nullable(),
  parent_folder_id: exports_external.number().optional().nullable(),
  position: exports_external.number().optional().nullable(),
  unlock_at: exports_external.string().optional().nullable(),
  updated_at: exports_external.string().optional().nullable()
});
var gradeChangeEventLinksSchema = exports_external.object({
  assignment: exports_external.number().optional().nullable(),
  course: exports_external.number().optional().nullable(),
  grader: exports_external.number().optional().nullable(),
  page_view: exports_external.string().optional().nullable(),
  student: exports_external.number().optional().nullable()
}).nullable();
var graderSchema = exports_external.object({
  assignments: exports_external.array(exports_external.number()).optional().nullable(),
  id: exports_external.number().optional(),
  name: exports_external.string().optional().nullable()
});
var gradingSchemeEntrySchema = exports_external.object({
  name: exports_external.string().optional().nullable(),
  value: exports_external.number().optional().nullable()
});
var gradingStandardSchema = exports_external.object({
  context_id: exports_external.number().optional().nullable(),
  context_type: exports_external.string().optional().nullable(),
  grading_scheme: exports_external.array(gradingSchemeEntrySchema).optional().nullable(),
  id: exports_external.number().optional(),
  title: exports_external.string().optional().nullable()
});
var groupSchema = exports_external.object({
  avatar_url: exports_external.string().optional().nullable(),
  context_type: exports_external.string().optional().nullable(),
  course_id: exports_external.number().optional().nullable(),
  description: exports_external.string().optional().nullable(),
  followed_by_user: exports_external.boolean().optional().nullable(),
  group_category_id: exports_external.number().optional().nullable(),
  id: exports_external.number().optional(),
  is_public: exports_external.boolean().optional().nullable(),
  join_level: exports_external.string().optional().nullable(),
  members_count: exports_external.number().optional().nullable(),
  name: exports_external.string().optional().nullable(),
  permissions: exports_external.record(exports_external.unknown()).optional().nullable(),
  role: exports_external.string().optional().nullable(),
  sis_group_id: exports_external.string().optional().nullable(),
  sis_import_id: exports_external.number().optional().nullable(),
  storage_quota_mb: exports_external.number().optional().nullable()
});
var progressNullableSchema = exports_external.object({
  completion: exports_external.number().optional().nullable(),
  context_id: exports_external.number().optional().nullable(),
  context_type: exports_external.string().optional().nullable(),
  created_at: exports_external.string().optional().nullable(),
  id: exports_external.number().optional(),
  message: exports_external.string().optional().nullable(),
  results: exports_external.record(exports_external.unknown()).optional().nullable(),
  tag: exports_external.string().optional().nullable(),
  updated_at: exports_external.string().optional().nullable(),
  url: exports_external.string().optional().nullable(),
  user_id: exports_external.number().optional().nullable(),
  workflow_state: exports_external.string().optional().nullable()
}).nullable();
var groupMembershipSchema = exports_external.object({
  group_id: exports_external.number().optional().nullable(),
  id: exports_external.number().optional(),
  just_created: exports_external.boolean().optional().nullable(),
  moderator: exports_external.boolean().optional().nullable(),
  sis_import_id: exports_external.number().optional().nullable(),
  user_id: exports_external.number().optional().nullable(),
  workflow_state: exports_external.string().optional().nullable()
});
var helpLinkSchema = exports_external.object({
  available_to: exports_external.array(exports_external.string()).optional().nullable(),
  id: exports_external.string().optional(),
  subtext: exports_external.string().optional().nullable(),
  text: exports_external.string().optional().nullable(),
  type: exports_external.union([exports_external.literal("default"), exports_external.literal("custom")]).optional(),
  url: exports_external.string().optional().nullable()
});
var helpLinksSchema = exports_external.object({
  custom_help_links: exports_external.array(helpLinkSchema).optional().nullable(),
  default_help_links: exports_external.array(helpLinkSchema).optional().nullable(),
  help_link_icon: exports_external.string().optional().nullable(),
  help_link_name: exports_external.string().optional().nullable()
});
var jwtSchema = exports_external.object({
  token: exports_external.string().optional().nullable()
});
var licenseSchema = exports_external.object({
  id: exports_external.string().optional(),
  name: exports_external.string().optional().nullable(),
  url: exports_external.string().optional().nullable()
});
var ltiAssignmentSchema = exports_external.object({
  course_id: exports_external.number().optional().nullable(),
  description: exports_external.string().optional().nullable(),
  due_at: exports_external.string().optional().nullable(),
  id: exports_external.number().optional(),
  lti_course_id: exports_external.string().optional().nullable(),
  lti_id: exports_external.string().optional().nullable(),
  name: exports_external.string().optional().nullable(),
  points_possible: exports_external.number().optional().nullable()
});
var mediaCommentSchema = exports_external.object({
  "content-type": exports_external.string().optional().nullable(),
  display_name: exports_external.string().optional().nullable(),
  media_id: exports_external.string().optional().nullable(),
  media_type: exports_external.string().optional().nullable(),
  url: exports_external.string().optional().nullable()
}).nullable();
var migrationIssueSchema = exports_external.object({
  content_migration_url: exports_external.string().optional().nullable(),
  created_at: exports_external.string().optional().nullable(),
  description: exports_external.string().optional().nullable(),
  error_message: exports_external.string().optional().nullable(),
  error_report_html_url: exports_external.string().optional().nullable(),
  fix_issue_html_url: exports_external.string().optional().nullable(),
  id: exports_external.number().optional(),
  issue_type: exports_external.string().optional().nullable(),
  updated_at: exports_external.string().optional().nullable(),
  workflow_state: exports_external.string().optional().nullable()
});
var migratorSchema = exports_external.object({
  name: exports_external.string().optional().nullable(),
  required_settings: exports_external.array(exports_external.string()).optional().nullable(),
  requires_file_upload: exports_external.boolean().optional().nullable(),
  type: exports_external.string().optional().nullable()
});
var moduleItemSchema = exports_external.object({
  completion_requirement: completionRequirementSchema.optional(),
  content_details: contentDetailsSchema.optional(),
  content_id: exports_external.number().optional().nullable(),
  external_url: exports_external.string().optional().nullable(),
  html_url: exports_external.string().optional().nullable(),
  id: exports_external.number().optional(),
  indent: exports_external.number().optional().nullable(),
  module_id: exports_external.number().optional().nullable(),
  new_tab: exports_external.boolean().optional().nullable(),
  page_url: exports_external.string().optional().nullable(),
  position: exports_external.number().optional().nullable(),
  published: exports_external.boolean().optional().nullable(),
  title: exports_external.string().optional().nullable(),
  type: exports_external.string().optional().nullable(),
  url: exports_external.string().optional().nullable()
});
var moduleItemNullableSchema = exports_external.object({
  completion_requirement: completionRequirementSchema.optional(),
  content_details: contentDetailsSchema.optional(),
  content_id: exports_external.number().optional().nullable(),
  external_url: exports_external.string().optional().nullable(),
  html_url: exports_external.string().optional().nullable(),
  id: exports_external.number().optional(),
  indent: exports_external.number().optional().nullable(),
  module_id: exports_external.number().optional().nullable(),
  new_tab: exports_external.boolean().optional().nullable(),
  page_url: exports_external.string().optional().nullable(),
  position: exports_external.number().optional().nullable(),
  published: exports_external.boolean().optional().nullable(),
  title: exports_external.string().optional().nullable(),
  type: exports_external.string().optional().nullable(),
  url: exports_external.string().optional().nullable()
}).nullable();
var moduleItemSequenceNodeSchema = exports_external.object({
  current: moduleItemNullableSchema.optional(),
  mastery_path: exports_external.record(exports_external.unknown()).optional().nullable(),
  next: moduleItemNullableSchema.optional(),
  prev: moduleItemNullableSchema.optional()
});
var moduleSchema = exports_external.object({
  completed_at: exports_external.string().optional().nullable(),
  id: exports_external.number().optional(),
  items: exports_external.array(moduleItemSchema).optional().nullable(),
  items_count: exports_external.number().optional().nullable(),
  items_url: exports_external.string().optional().nullable(),
  name: exports_external.string().optional().nullable(),
  position: exports_external.number().optional().nullable(),
  prerequisite_module_ids: exports_external.array(exports_external.number()).optional().nullable(),
  publish_final_grade: exports_external.boolean().optional().nullable(),
  published: exports_external.boolean().optional().nullable(),
  require_sequential_progress: exports_external.boolean().optional().nullable(),
  state: exports_external.string().optional().nullable(),
  unlock_at: exports_external.string().optional().nullable(),
  workflow_state: exports_external.string().optional().nullable()
});
var notificationPreferenceSchema = exports_external.object({
  category: exports_external.string().optional().nullable(),
  frequency: exports_external.string().optional().nullable(),
  href: exports_external.string().optional().nullable(),
  notification: exports_external.string().optional().nullable()
});
var toolSettingSchema = exports_external.object({
  resource_type_code: exports_external.string().optional().nullable(),
  resource_url: exports_external.string().optional().nullable()
}).nullable();
var rubricRatingSchema = exports_external.object({
  description: exports_external.string().optional().nullable(),
  id: exports_external.string().optional(),
  long_description: exports_external.string().optional().nullable(),
  points: exports_external.number().optional().nullable()
});
var outcomeNullableSchema = exports_external.object({
  assessed: exports_external.boolean().optional().nullable(),
  calculation_int: exports_external.number().optional().nullable(),
  calculation_method: exports_external.string().optional().nullable(),
  can_edit: exports_external.boolean().optional().nullable(),
  can_unlink: exports_external.boolean().optional().nullable(),
  context_id: exports_external.number().optional().nullable(),
  context_type: exports_external.string().optional().nullable(),
  description: exports_external.string().optional().nullable(),
  display_name: exports_external.string().optional().nullable(),
  has_updateable_rubrics: exports_external.boolean().optional().nullable(),
  id: exports_external.number().optional(),
  mastery_points: exports_external.number().optional().nullable(),
  points_possible: exports_external.number().optional().nullable(),
  ratings: exports_external.array(rubricRatingSchema).optional().nullable(),
  title: exports_external.string().optional().nullable(),
  url: exports_external.string().optional().nullable(),
  vendor_guid: exports_external.string().optional().nullable()
}).nullable();
var outcomeAlignmentSchema = exports_external.object({
  assignment_id: exports_external.number().optional().nullable(),
  id: exports_external.number().optional(),
  submission_types: exports_external.string().optional().nullable(),
  title: exports_external.string().optional().nullable(),
  url: exports_external.string().optional().nullable()
});
var outcomeGroupNullableSchema = exports_external.lazy(() => exports_external.object({
  can_edit: exports_external.boolean().optional().nullable(),
  context_id: exports_external.number().optional().nullable(),
  context_type: exports_external.string().optional().nullable(),
  description: exports_external.string().optional().nullable(),
  id: exports_external.number().optional(),
  import_url: exports_external.string().optional().nullable(),
  outcomes_url: exports_external.string().optional().nullable(),
  parent_outcome_group: outcomeGroupNullableSchema.optional(),
  subgroups_url: exports_external.string().optional().nullable(),
  title: exports_external.string().optional().nullable(),
  url: exports_external.string().optional().nullable(),
  vendor_guid: exports_external.string().optional().nullable()
}).nullable());
var outcomeImportDataSchema = exports_external.object({
  import_type: exports_external.string().optional().nullable()
}).nullable();
var outcomeLinkSchema = exports_external.object({
  assessed: exports_external.boolean().optional().nullable(),
  can_unlink: exports_external.boolean().optional().nullable(),
  context_id: exports_external.number().optional().nullable(),
  context_type: exports_external.string().optional().nullable(),
  outcome: outcomeNullableSchema.optional(),
  outcome_group: outcomeGroupNullableSchema.optional(),
  url: exports_external.string().optional().nullable()
});
var outcomeResultSchema = exports_external.object({
  id: exports_external.number().optional(),
  mastery: exports_external.boolean().optional(),
  score: exports_external.number().optional(),
  possible: exports_external.number().optional(),
  submitted_or_assessed_at: exports_external.string().optional(),
  links: exports_external.record(exports_external.unknown()).optional(),
  percent: exports_external.number().optional(),
  hidden: exports_external.boolean().optional(),
  hide_points: exports_external.boolean().optional()
});
var outcomeSchema = exports_external.object({
  assessed: exports_external.boolean().optional().nullable(),
  calculation_int: exports_external.number().optional().nullable(),
  calculation_method: exports_external.string().optional().nullable(),
  can_edit: exports_external.boolean().optional().nullable(),
  can_unlink: exports_external.boolean().optional().nullable(),
  context_id: exports_external.number().optional().nullable(),
  context_type: exports_external.string().optional().nullable(),
  description: exports_external.string().optional().nullable(),
  display_name: exports_external.string().optional().nullable(),
  has_updateable_rubrics: exports_external.boolean().optional().nullable(),
  id: exports_external.number().optional(),
  mastery_points: exports_external.number().optional().nullable(),
  points_possible: exports_external.number().optional().nullable(),
  ratings: exports_external.array(rubricRatingSchema).optional().nullable(),
  title: exports_external.string().optional().nullable(),
  url: exports_external.string().optional().nullable(),
  vendor_guid: exports_external.string().optional().nullable()
});
var outcomeGroupSchema = exports_external.object({
  can_edit: exports_external.boolean().optional().nullable(),
  context_id: exports_external.number().optional().nullable(),
  context_type: exports_external.string().optional().nullable(),
  description: exports_external.string().optional().nullable(),
  id: exports_external.number().optional(),
  import_url: exports_external.string().optional().nullable(),
  outcomes_url: exports_external.string().optional().nullable(),
  parent_outcome_group: outcomeGroupNullableSchema.optional(),
  subgroups_url: exports_external.string().optional().nullable(),
  title: exports_external.string().optional().nullable(),
  url: exports_external.string().optional().nullable(),
  vendor_guid: exports_external.string().optional().nullable()
});
var outcomeRollupScoreLinksSchema = exports_external.object({
  outcome: exports_external.number().optional()
});
var outcomeRollupScoreSchema = exports_external.object({
  score: exports_external.number().optional(),
  count: exports_external.number().optional(),
  links: outcomeRollupScoreLinksSchema.optional()
});
var outcomeRollupLinksSchema = exports_external.object({
  course: exports_external.number().optional(),
  user: exports_external.number().optional(),
  section: exports_external.number().optional()
});
var outcomeRollupSchema = exports_external.object({
  scores: exports_external.array(outcomeRollupScoreSchema).optional(),
  links: outcomeRollupLinksSchema.optional()
});
var outcomePathPartSchema = exports_external.object({
  name: exports_external.string().optional()
});
var pageViewLinksSchema = exports_external.object({
  account: exports_external.number().optional().nullable(),
  asset: exports_external.number().optional().nullable(),
  context: exports_external.number().optional().nullable(),
  real_user: exports_external.number().optional().nullable(),
  user: exports_external.number().optional().nullable()
}).nullable();
var peerReviewSchema = exports_external.object({
  assessor: exports_external.string().optional().nullable(),
  assessor_id: exports_external.number().optional().nullable(),
  asset_id: exports_external.number().optional().nullable(),
  asset_type: exports_external.string().optional().nullable(),
  id: exports_external.number().optional(),
  submission_comments: exports_external.string().optional().nullable(),
  user: exports_external.string().optional().nullable(),
  user_id: exports_external.number().optional().nullable(),
  workflow_state: exports_external.string().optional().nullable()
});
var permissionSchema = exports_external.object({
  add_course_template: exports_external.boolean().optional().nullable(),
  add_designer_to_course: exports_external.boolean().optional().nullable(),
  add_observer_to_course: exports_external.boolean().optional().nullable(),
  add_student_to_course: exports_external.boolean().optional().nullable(),
  add_ta_to_course: exports_external.boolean().optional().nullable(),
  add_teacher_to_course: exports_external.boolean().optional().nullable(),
  allow_course_admin_actions: exports_external.boolean().optional().nullable(),
  become_user: exports_external.boolean().optional().nullable(),
  change_course_state: exports_external.boolean().optional().nullable(),
  create_accounts: exports_external.boolean().optional().nullable(),
  create_collaborations: exports_external.boolean().optional().nullable(),
  create_conferences: exports_external.boolean().optional().nullable(),
  create_forum: exports_external.boolean().optional().nullable(),
  create_tool_manually: exports_external.boolean().optional().nullable(),
  delete: exports_external.boolean().optional().nullable(),
  delete_course_template: exports_external.boolean().optional().nullable(),
  direct_share: exports_external.boolean().optional().nullable(),
  edit_course_template: exports_external.boolean().optional().nullable(),
  generate_observer_pairing_code: exports_external.boolean().optional().nullable(),
  import_outcomes: exports_external.boolean().optional().nullable(),
  import_sis: exports_external.boolean().optional().nullable(),
  lti_add_edit: exports_external.boolean().optional().nullable(),
  manage: exports_external.boolean().optional().nullable(),
  manage_account_banks: exports_external.boolean().optional().nullable(),
  manage_account_calendar_events: exports_external.boolean().optional().nullable(),
  manage_account_calendar_visibility: exports_external.boolean().optional().nullable(),
  manage_account_memberships: exports_external.boolean().optional().nullable(),
  manage_account_settings: exports_external.boolean().optional().nullable(),
  manage_admin_users: exports_external.boolean().optional().nullable(),
  manage_alerts: exports_external.boolean().optional().nullable(),
  manage_assignments: exports_external.boolean().optional().nullable(),
  manage_assignments_add: exports_external.boolean().optional().nullable(),
  manage_assignments_delete: exports_external.boolean().optional().nullable(),
  manage_assignments_edit: exports_external.boolean().optional().nullable(),
  manage_calendar: exports_external.boolean().optional().nullable(),
  manage_canvasnet_courses: exports_external.boolean().optional().nullable(),
  manage_catalog: exports_external.boolean().optional().nullable(),
  manage_content: exports_external.boolean().optional().nullable(),
  manage_course_content_add: exports_external.boolean().optional().nullable(),
  manage_course_content_delete: exports_external.boolean().optional().nullable(),
  manage_course_content_edit: exports_external.boolean().optional().nullable(),
  manage_course_visibility: exports_external.boolean().optional().nullable(),
  manage_courses: exports_external.boolean().optional().nullable(),
  manage_courses_add: exports_external.boolean().optional().nullable(),
  manage_courses_admin: exports_external.boolean().optional().nullable(),
  manage_courses_conclude: exports_external.boolean().optional().nullable(),
  manage_courses_delete: exports_external.boolean().optional().nullable(),
  manage_courses_publish: exports_external.boolean().optional().nullable(),
  manage_courses_reset: exports_external.boolean().optional().nullable(),
  manage_data_services: exports_external.boolean().optional().nullable(),
  manage_demos: exports_external.boolean().optional().nullable(),
  manage_developer_keys: exports_external.boolean().optional().nullable(),
  manage_feature_flags: exports_external.boolean().optional().nullable(),
  manage_files_add: exports_external.boolean().optional().nullable(),
  manage_files_delete: exports_external.boolean().optional().nullable(),
  manage_files_edit: exports_external.boolean().optional().nullable(),
  manage_frozen_assignments: exports_external.boolean().optional().nullable(),
  manage_global_outcomes: exports_external.boolean().optional().nullable(),
  manage_grades: exports_external.boolean().optional().nullable(),
  manage_groups: exports_external.boolean().optional().nullable(),
  manage_groups_add: exports_external.boolean().optional().nullable(),
  manage_groups_delete: exports_external.boolean().optional().nullable(),
  manage_groups_manage: exports_external.boolean().optional().nullable(),
  manage_interaction_alerts: exports_external.boolean().optional().nullable(),
  manage_internal_analytics: exports_external.boolean().optional().nullable(),
  manage_internal_settings: exports_external.boolean().optional().nullable(),
  manage_jobs: exports_external.boolean().optional().nullable(),
  manage_links: exports_external.boolean().optional().nullable(),
  manage_lti_add: exports_external.boolean().optional().nullable(),
  manage_lti_delete: exports_external.boolean().optional().nullable(),
  manage_lti_edit: exports_external.boolean().optional().nullable(),
  manage_master_courses: exports_external.boolean().optional().nullable(),
  manage_outcomes: exports_external.boolean().optional().nullable(),
  manage_proficiency_calculations: exports_external.boolean().optional().nullable(),
  manage_proficiency_scales: exports_external.boolean().optional().nullable(),
  manage_release_notes: exports_external.boolean().optional().nullable(),
  manage_role_overrides: exports_external.boolean().optional().nullable(),
  manage_rubrics: exports_external.boolean().optional().nullable(),
  manage_sections_add: exports_external.boolean().optional().nullable(),
  manage_sections_delete: exports_external.boolean().optional().nullable(),
  manage_sections_edit: exports_external.boolean().optional().nullable(),
  manage_sftp_user_settings: exports_external.boolean().optional().nullable(),
  manage_sis: exports_external.boolean().optional().nullable(),
  manage_site_settings: exports_external.boolean().optional().nullable(),
  manage_storage_quotas: exports_external.boolean().optional().nullable(),
  manage_students: exports_external.boolean().optional().nullable(),
  manage_user_logins: exports_external.boolean().optional().nullable(),
  manage_user_notes: exports_external.boolean().optional().nullable(),
  manage_user_observers: exports_external.boolean().optional().nullable(),
  manage_wiki_create: exports_external.boolean().optional().nullable(),
  manage_wiki_delete: exports_external.boolean().optional().nullable(),
  manage_wiki_update: exports_external.boolean().optional().nullable(),
  moderate_forum: exports_external.boolean().optional().nullable(),
  moderate_user_content: exports_external.boolean().optional().nullable(),
  participate_as_student: exports_external.boolean().optional().nullable(),
  post_to_forum: exports_external.boolean().optional().nullable(),
  provision_catalog: exports_external.boolean().optional().nullable(),
  proxy_assignment_submission: exports_external.boolean().optional().nullable(),
  read: exports_external.boolean().optional().nullable(),
  read_announcements: exports_external.boolean().optional().nullable(),
  read_as_admin: exports_external.boolean().optional().nullable(),
  read_as_member: exports_external.boolean().optional().nullable(),
  read_course_content: exports_external.boolean().optional().nullable(),
  read_course_list: exports_external.boolean().optional().nullable(),
  read_email_addresses: exports_external.boolean().optional().nullable(),
  read_files: exports_external.boolean().optional().nullable(),
  read_forum: exports_external.boolean().optional().nullable(),
  read_grades: exports_external.boolean().optional().nullable(),
  read_messages: exports_external.boolean().optional().nullable(),
  read_outcomes: exports_external.boolean().optional().nullable(),
  read_prior_roster: exports_external.boolean().optional().nullable(),
  read_question_banks: exports_external.boolean().optional().nullable(),
  read_reports: exports_external.boolean().optional().nullable(),
  read_roster: exports_external.boolean().optional().nullable(),
  read_rubrics: exports_external.boolean().optional().nullable(),
  read_sis: exports_external.boolean().optional().nullable(),
  read_syllabus: exports_external.boolean().optional().nullable(),
  remove_designer_from_course: exports_external.boolean().optional().nullable(),
  remove_observer_from_course: exports_external.boolean().optional().nullable(),
  remove_student_from_course: exports_external.boolean().optional().nullable(),
  remove_ta_from_course: exports_external.boolean().optional().nullable(),
  remove_teacher_from_course: exports_external.boolean().optional().nullable(),
  reset_any_mfa: exports_external.boolean().optional().nullable(),
  reset_content: exports_external.boolean().optional().nullable(),
  ruby_profile: exports_external.boolean().optional().nullable(),
  select_final_grade: exports_external.boolean().optional().nullable(),
  send_messages: exports_external.boolean().optional().nullable(),
  send_messages_all: exports_external.boolean().optional().nullable(),
  suspend_accounts: exports_external.boolean().optional().nullable(),
  undelete_courses: exports_external.boolean().optional().nullable(),
  update: exports_external.boolean().optional().nullable(),
  use_student_view: exports_external.boolean().optional().nullable(),
  view_all_grades: exports_external.boolean().optional().nullable(),
  view_analytics: exports_external.boolean().optional().nullable(),
  view_audit_trail: exports_external.boolean().optional().nullable(),
  view_course_changes: exports_external.boolean().optional().nullable(),
  view_error_reports: exports_external.boolean().optional().nullable(),
  view_feature_flags: exports_external.boolean().optional().nullable(),
  view_grade_changes: exports_external.boolean().optional().nullable(),
  view_group_pages: exports_external.boolean().optional().nullable(),
  view_jobs: exports_external.boolean().optional().nullable(),
  view_notifications: exports_external.boolean().optional().nullable(),
  view_quiz_answer_audits: exports_external.boolean().optional().nullable(),
  view_statistics: exports_external.boolean().optional().nullable(),
  view_unpublished_items: exports_external.boolean().optional().nullable(),
  view_user_logins: exports_external.boolean().optional().nullable()
});
var plannerNoteSchema = exports_external.object({
  course_id: exports_external.number().optional().nullable(),
  description: exports_external.string().optional().nullable(),
  id: exports_external.number().optional(),
  linked_object_html_url: exports_external.string().optional().nullable(),
  linked_object_id: exports_external.number().optional().nullable(),
  linked_object_type: exports_external.string().optional().nullable(),
  linked_object_url: exports_external.string().optional().nullable(),
  title: exports_external.string().optional().nullable(),
  todo_date: exports_external.string().optional().nullable(),
  user_id: exports_external.number().optional().nullable(),
  workflow_state: exports_external.string().optional().nullable()
});
var plannerOverrideSchema = exports_external.object({
  assignment_id: exports_external.number().optional().nullable(),
  created_at: exports_external.string().optional().nullable(),
  deleted_at: exports_external.string().optional().nullable(),
  dismissed: exports_external.boolean().optional().nullable(),
  id: exports_external.number().optional(),
  marked_complete: exports_external.boolean().optional().nullable(),
  plannable_id: exports_external.number().optional().nullable(),
  plannable_type: exports_external.string().optional().nullable(),
  updated_at: exports_external.string().optional().nullable(),
  user_id: exports_external.number().optional().nullable(),
  workflow_state: exports_external.string().optional().nullable()
});
var pollSchema = exports_external.object({
  id: exports_external.number().optional(),
  question: exports_external.string().optional(),
  description: exports_external.string().optional(),
  created_at: exports_external.string().optional(),
  user_id: exports_external.number().optional(),
  total_results: exports_external.record(exports_external.unknown()).optional()
});
var proficiencySchema = exports_external.object({
  ratings: exports_external.array(exports_external.record(exports_external.unknown())).optional().nullable()
});
var profileSchema = exports_external.object({
  avatar_url: exports_external.string().optional().nullable(),
  bio: exports_external.string().optional().nullable(),
  calendar: calendarLinkSchema.optional(),
  effective_locale: exports_external.string().optional().nullable(),
  id: exports_external.number().optional(),
  integration_id: exports_external.string().optional().nullable(),
  locale: exports_external.string().optional().nullable(),
  login_id: exports_external.string().optional().nullable(),
  lti_user_id: exports_external.string().optional().nullable(),
  name: exports_external.string().optional().nullable(),
  primary_email: exports_external.string().optional().nullable(),
  pronouns: exports_external.string().optional().nullable(),
  short_name: exports_external.string().optional().nullable(),
  sis_user_id: exports_external.string().optional().nullable(),
  sortable_name: exports_external.string().optional().nullable(),
  time_zone: exports_external.string().optional().nullable(),
  title: exports_external.string().optional().nullable()
});
var progressSchema = exports_external.object({
  completion: exports_external.number().optional().nullable(),
  context_id: exports_external.number().optional().nullable(),
  context_type: exports_external.string().optional().nullable(),
  created_at: exports_external.string().optional().nullable(),
  id: exports_external.number().optional(),
  message: exports_external.string().optional().nullable(),
  results: exports_external.record(exports_external.unknown()).optional().nullable(),
  tag: exports_external.string().optional().nullable(),
  updated_at: exports_external.string().optional().nullable(),
  url: exports_external.string().optional().nullable(),
  user_id: exports_external.number().optional().nullable(),
  workflow_state: exports_external.string().optional().nullable()
});
var provisionalGradeSchema = exports_external.object({
  final: exports_external.boolean().optional().nullable(),
  grade: exports_external.string().optional().nullable(),
  grade_matches_current_submission: exports_external.boolean().optional().nullable(),
  graded_at: exports_external.string().optional().nullable(),
  provisional_grade_id: exports_external.number().optional().nullable(),
  score: exports_external.number().optional().nullable(),
  speedgrader_url: exports_external.string().optional().nullable()
});
var quizPermissionsSchema = exports_external.object({
  create: exports_external.boolean().optional().nullable(),
  manage: exports_external.boolean().optional().nullable(),
  read: exports_external.boolean().optional().nullable(),
  read_statistics: exports_external.boolean().optional().nullable(),
  review_grades: exports_external.boolean().optional().nullable(),
  submit: exports_external.boolean().optional().nullable(),
  update: exports_external.boolean().optional().nullable()
}).nullable();
var quizAssignmentOverrideSchema = exports_external.object({
  base: exports_external.boolean().optional().nullable(),
  due_at: exports_external.string().optional().nullable(),
  id: exports_external.number().optional(),
  lock_at: exports_external.string().optional().nullable(),
  title: exports_external.string().optional().nullable(),
  unlock_at: exports_external.string().optional().nullable()
}).nullable();
var quizAssignmentOverrideSetSchema = exports_external.object({
  all_dates: quizAssignmentOverrideSchema.optional(),
  due_dates: quizAssignmentOverrideSchema.optional(),
  quiz_id: exports_external.string().optional().nullable()
});
var quizAssignmentOverrideSetContainerSchema = exports_external.object({
  quiz_assignment_overrides: exports_external.array(quizAssignmentOverrideSetSchema).optional().nullable()
});
var quizGroupSchema = exports_external.object({
  assessment_question_bank_id: exports_external.number().optional().nullable(),
  id: exports_external.number(),
  name: exports_external.string().optional().nullable(),
  pick_count: exports_external.number().optional().nullable(),
  position: exports_external.number().optional().nullable(),
  question_points: exports_external.number().optional().nullable(),
  quiz_id: exports_external.number()
});
var quizQuestionSchema = exports_external.object({
  answers: exports_external.array(answerSchema).optional().nullable(),
  correct_comments: exports_external.string().optional().nullable(),
  id: exports_external.number(),
  incorrect_comments: exports_external.string().optional().nullable(),
  neutral_comments: exports_external.string().optional().nullable(),
  points_possible: exports_external.number().optional().nullable(),
  position: exports_external.number().optional().nullable(),
  question_name: exports_external.string().optional().nullable(),
  question_text: exports_external.string().optional().nullable(),
  question_type: exports_external.string().optional().nullable(),
  quiz_id: exports_external.number()
});
var quizReportSchema = exports_external.object({
  anonymous: exports_external.boolean().optional().nullable(),
  created_at: exports_external.string().optional().nullable(),
  file: fileNullableSchema.optional(),
  generatable: exports_external.boolean().optional().nullable(),
  id: exports_external.number().optional(),
  includes_all_versions: exports_external.boolean().optional().nullable(),
  progress: progressNullableSchema.optional(),
  progress_url: exports_external.string().optional().nullable(),
  quiz_id: exports_external.number().optional(),
  readable_type: exports_external.string().optional().nullable(),
  report_type: exports_external.string().optional().nullable(),
  updated_at: exports_external.string().optional().nullable(),
  url: exports_external.string().optional().nullable()
});
var quizSubmissionSchema = exports_external.object({
  attempt: exports_external.number().optional().nullable(),
  end_at: exports_external.string().optional().nullable(),
  extra_attempts: exports_external.number().optional().nullable(),
  extra_time: exports_external.number().optional().nullable(),
  finished_at: exports_external.string().optional().nullable(),
  fudge_points: exports_external.number().optional().nullable(),
  has_seen_results: exports_external.boolean().optional().nullable(),
  id: exports_external.number(),
  kept_score: exports_external.number().optional().nullable(),
  manually_unlocked: exports_external.boolean().optional().nullable(),
  overdue_and_needs_submission: exports_external.boolean().optional().nullable(),
  quiz_id: exports_external.number(),
  score: exports_external.number().optional().nullable(),
  score_before_regrade: exports_external.number().optional().nullable(),
  started_at: exports_external.string().optional().nullable(),
  submission_id: exports_external.number().optional().nullable(),
  time_spent: exports_external.number().optional().nullable(),
  user_id: exports_external.number().optional().nullable(),
  workflow_state: exports_external.string().optional().nullable()
});
var quizSubmissionQuestionSchema = exports_external.object({
  answer: exports_external.string().optional().nullable(),
  answers: exports_external.array(exports_external.string()).optional().nullable(),
  flagged: exports_external.boolean().optional().nullable(),
  id: exports_external.number()
});
var reportParametersSchema = exports_external.object({
  accounts: exports_external.boolean().optional().nullable(),
  course_id: exports_external.number().optional().nullable(),
  courses: exports_external.boolean().optional().nullable(),
  end_at: exports_external.string().optional().nullable(),
  enrollment_state: exports_external.array(exports_external.string()).optional().nullable(),
  enrollment_term_id: exports_external.number().optional().nullable(),
  enrollments: exports_external.boolean().optional().nullable(),
  groups: exports_external.boolean().optional().nullable(),
  include_deleted: exports_external.boolean().optional().nullable(),
  include_enrollment_state: exports_external.boolean().optional().nullable(),
  order: exports_external.string().optional().nullable(),
  sections: exports_external.boolean().optional().nullable(),
  sis_accounts_csv: exports_external.number().optional().nullable(),
  sis_terms_csv: exports_external.number().optional().nullable(),
  start_at: exports_external.string().optional().nullable(),
  terms: exports_external.boolean().optional().nullable(),
  users: exports_external.boolean().optional().nullable(),
  xlist: exports_external.boolean().optional().nullable()
}).nullable();
var roleSchema = exports_external.object({
  account: exports_external.record(exports_external.unknown()).optional().nullable(),
  base_role_type: exports_external.string().optional().nullable(),
  label: exports_external.string().optional().nullable(),
  permissions: exports_external.record(exports_external.unknown()).optional().nullable(),
  role: exports_external.string().optional().nullable(),
  workflow_state: exports_external.string().optional().nullable()
});
var rubricAssessmentSchema = exports_external.object({
  artifact_attempt: exports_external.number().optional().nullable(),
  artifact_id: exports_external.number().optional().nullable(),
  artifact_type: exports_external.string().optional().nullable(),
  assessment_type: exports_external.string().optional().nullable(),
  assessor_id: exports_external.number().optional().nullable(),
  comments: exports_external.array(exports_external.string()).optional().nullable(),
  data: exports_external.array(exports_external.record(exports_external.unknown())).optional().nullable(),
  id: exports_external.number().optional(),
  rubric_association_id: exports_external.number().optional().nullable(),
  rubric_id: exports_external.number().optional().nullable(),
  score: exports_external.number().optional().nullable()
});
var rubricCriteriaSchema = exports_external.object({
  criterion_use_range: exports_external.boolean().optional().nullable(),
  description: exports_external.string().optional().nullable(),
  id: exports_external.string().optional(),
  learning_outcome_id: exports_external.string().optional().nullable(),
  long_description: exports_external.string().optional().nullable(),
  points: exports_external.number().optional().nullable(),
  ratings: exports_external.array(rubricRatingSchema).optional().nullable(),
  vendor_guid: exports_external.string().optional().nullable()
});
var ssoSettingsSchema = exports_external.object({
  auth_discovery_url: exports_external.string().optional().nullable(),
  change_password_url: exports_external.string().optional().nullable(),
  login_handle_name: exports_external.string().optional().nullable(),
  unknown_user_url: exports_external.string().optional().nullable()
});
var scopeSchema = exports_external.object({
  action: exports_external.string().optional().nullable(),
  controller: exports_external.string().optional().nullable(),
  resource: exports_external.string().optional().nullable(),
  resource_name: exports_external.string().optional().nullable(),
  scope: exports_external.string().optional().nullable(),
  verb: exports_external.string().optional().nullable()
});
var userSectionIncludeSchema = exports_external.object({
  created_at: exports_external.string().optional().nullable(),
  id: exports_external.number(),
  integration_id: exports_external.string().optional().nullable(),
  login_id: exports_external.string().optional().nullable(),
  name: exports_external.string().optional().nullable(),
  short_name: exports_external.string().optional().nullable(),
  sis_import_id: exports_external.number().optional().nullable(),
  sis_user_id: exports_external.string().optional().nullable(),
  sortable_name: exports_external.string().optional().nullable()
});
var sharedBrandConfigSchema = exports_external.object({
  account_id: exports_external.string().optional().nullable(),
  brand_config_md5: exports_external.string().optional().nullable(),
  created_at: exports_external.string().optional().nullable(),
  id: exports_external.number().optional(),
  name: exports_external.string().optional().nullable(),
  updated_at: exports_external.string().optional().nullable()
});
var sisImportCountsSchema = exports_external.object({
  abstract_courses: exports_external.number().optional().nullable(),
  accounts: exports_external.number().optional().nullable(),
  batch_courses_deleted: exports_external.number().optional().nullable(),
  batch_enrollments_deleted: exports_external.number().optional().nullable(),
  batch_sections_deleted: exports_external.number().optional().nullable(),
  courses: exports_external.number().optional().nullable(),
  enrollments: exports_external.number().optional().nullable(),
  error_count: exports_external.number().optional().nullable(),
  grade_publishing_results: exports_external.number().optional().nullable(),
  group_memberships: exports_external.number().optional().nullable(),
  groups: exports_external.number().optional().nullable(),
  sections: exports_external.number().optional().nullable(),
  terms: exports_external.number().optional().nullable(),
  users: exports_external.number().optional().nullable(),
  warning_count: exports_external.number().optional().nullable(),
  xlists: exports_external.number().optional().nullable()
}).nullable();
var sisImportDataSchema = exports_external.object({
  counts: sisImportCountsSchema.optional(),
  import_type: exports_external.string().optional().nullable(),
  supplied_batches: exports_external.array(exports_external.string()).optional().nullable()
}).nullable();
var sisImportErrorSchema = exports_external.object({
  file: exports_external.string().optional().nullable(),
  message: exports_external.string().optional().nullable(),
  row: exports_external.number().optional().nullable(),
  sis_import_id: exports_external.number().optional().nullable()
});
var userDisplaySchema = exports_external.object({
  id: exports_external.number().optional().nullable(),
  anonymous_id: exports_external.string().optional().nullable(),
  display_name: exports_external.string().optional().nullable(),
  avatar_image_url: exports_external.string().optional().nullable(),
  pronouns: exports_external.string().optional().nullable()
}).nullable();
var submissionVersionSchema = exports_external.object({
  assignment_id: exports_external.number().optional().nullable(),
  assignment_name: exports_external.string().optional().nullable(),
  body: exports_external.string().optional().nullable(),
  current_grade: exports_external.string().optional().nullable(),
  current_graded_at: exports_external.string().optional().nullable(),
  current_grader: exports_external.string().optional().nullable(),
  grade_matches_current_submission: exports_external.boolean().optional().nullable(),
  graded_at: exports_external.string().optional().nullable(),
  grader: exports_external.string().optional().nullable(),
  grader_id: exports_external.number().optional().nullable(),
  id: exports_external.number().optional(),
  new_grade: exports_external.string().optional().nullable(),
  new_graded_at: exports_external.string().optional().nullable(),
  new_grader: exports_external.string().optional().nullable(),
  previous_grade: exports_external.string().optional().nullable(),
  previous_graded_at: exports_external.string().optional().nullable(),
  previous_grader: exports_external.string().optional().nullable(),
  score: exports_external.number().optional().nullable(),
  submission_type: exports_external.string().optional().nullable(),
  url: exports_external.string().optional().nullable(),
  user_id: exports_external.number().optional().nullable(),
  user_name: exports_external.string().optional().nullable(),
  workflow_state: exports_external.string().optional().nullable()
});
var successTrueSchema = exports_external.object({
  success: exports_external.boolean().optional().nullable()
});
var tabSchema = exports_external.object({
  hidden: exports_external.boolean().optional().nullable(),
  html_url: exports_external.string().optional().nullable(),
  id: exports_external.string().optional(),
  label: exports_external.string().optional().nullable(),
  position: exports_external.number().optional().nullable(),
  type: exports_external.string().optional().nullable(),
  visibility: exports_external.string().optional().nullable()
});
var termsOfServiceSchema = exports_external.object({
  account_id: exports_external.number().optional().nullable(),
  content: exports_external.string().optional().nullable(),
  id: exports_external.number().optional(),
  passive: exports_external.boolean().optional().nullable(),
  terms_type: exports_external.union([exports_external.literal("default"), exports_external.literal("custom"), exports_external.literal("no_terms")]).optional()
});
var usageRightsSchema = exports_external.object({
  file_ids: exports_external.array(exports_external.number()).optional().nullable(),
  legal_copyright: exports_external.string().optional().nullable(),
  license: exports_external.string().optional().nullable(),
  license_name: exports_external.string().optional().nullable(),
  message: exports_external.string().optional().nullable(),
  use_justification: exports_external.string().optional().nullable()
});
var pageParamSchema = exports_external.string();
var perPageParamSchema = exports_external.number();
var getSingleAssignmentLtiDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    assignment_id: exports_external.string()
  }),
  query: exports_external.object({
    user_id: exports_external.string().optional()
  }).optional(),
  url: exports_external.literal("/lti/assignments/{assignment_id}")
});
var getSingleAssignmentLtiResponsesSchema = exports_external.object({
  200: ltiAssignmentSchema
});
var getSingleAssignmentLtiResponseSchema = getSingleAssignmentLtiResponsesSchema.shape["keyof GetSingleAssignmentLtiResponses"];
var showOriginalityReportFilesDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    assignment_id: exports_external.string(),
    file_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/lti/assignments/{assignment_id}/files/{file_id}/originality_report")
});
var originalityReportSchema = exports_external.object({
  file_id: exports_external.number().optional().nullable(),
  id: exports_external.number().optional(),
  originality_report_file_id: exports_external.number().optional().nullable(),
  originality_report_url: exports_external.string().optional().nullable(),
  originality_score: exports_external.number().optional().nullable(),
  tool_setting: toolSettingSchema.optional()
});
var showOriginalityReportFilesResponsesSchema = exports_external.object({
  200: originalityReportSchema
});
var editOriginalityReportFilesDataSchema = exports_external.object({
  body: exports_external.object({
    "originality_report[originality_report_file_id]": exports_external.number().optional(),
    "originality_report[originality_report_url]": exports_external.string().optional(),
    "originality_report[originality_score]": exports_external.number().optional(),
    "originality_report[tool_setting][resource_type_code]": exports_external.string().optional(),
    "originality_report[tool_setting][resource_url]": exports_external.string().optional(),
    "originality_report[workflow_state]": exports_external.string().optional()
  }).optional(),
  path: exports_external.object({
    assignment_id: exports_external.string(),
    file_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/lti/assignments/{assignment_id}/files/{file_id}/originality_report")
});
var editOriginalityReportFilesResponsesSchema = exports_external.object({
  200: originalityReportSchema
});
var editOriginalityReportFilesResponseSchema = editOriginalityReportFilesResponsesSchema.shape["keyof EditOriginalityReportFilesResponses"];
var getSingleSubmissionDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    assignment_id: exports_external.string(),
    submission_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/lti/assignments/{assignment_id}/submissions/{submission_id}")
});
var getSingleSubmissionResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var getHistoryOfSingleSubmissionDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    assignment_id: exports_external.string(),
    submission_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/lti/assignments/{assignment_id}/submissions/{submission_id}/history")
});
var getHistoryOfSingleSubmissionResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var createOriginalityReportDataSchema = exports_external.object({
  body: exports_external.object({
    "originality_report[file_id]": exports_external.number().optional(),
    "originality_report[originality_report_file_id]": exports_external.number().optional(),
    "originality_report[originality_report_url]": exports_external.string().optional(),
    "originality_report[originality_score]": exports_external.number(),
    "originality_report[tool_setting][resource_type_code]": exports_external.string().optional(),
    "originality_report[tool_setting][resource_url]": exports_external.string().optional(),
    "originality_report[workflow_state]": exports_external.string().optional()
  }),
  path: exports_external.object({
    assignment_id: exports_external.string(),
    submission_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/lti/assignments/{assignment_id}/submissions/{submission_id}/originality_report")
});
var createOriginalityReportResponsesSchema = exports_external.object({
  200: originalityReportSchema
});
var createOriginalityReportResponseSchema = createOriginalityReportResponsesSchema.shape["keyof CreateOriginalityReportResponses"];
var showOriginalityReportSubmissionsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    assignment_id: exports_external.string(),
    submission_id: exports_external.string(),
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/lti/assignments/{assignment_id}/submissions/{submission_id}/originality_report/{id}")
});
var showOriginalityReportSubmissionsResponsesSchema = exports_external.object({
  200: originalityReportSchema
});
var showOriginalityReportSubmissionsResponseSchema = showOriginalityReportSubmissionsResponsesSchema.shape["keyof ShowOriginalityReportSubmissionsResponses"];
var editOriginalityReportSubmissionsDataSchema = exports_external.object({
  body: exports_external.object({
    "originality_report[originality_report_file_id]": exports_external.number().optional(),
    "originality_report[originality_report_url]": exports_external.string().optional(),
    "originality_report[originality_score]": exports_external.number().optional(),
    "originality_report[tool_setting][resource_type_code]": exports_external.string().optional(),
    "originality_report[tool_setting][resource_url]": exports_external.string().optional(),
    "originality_report[workflow_state]": exports_external.string().optional()
  }).optional(),
  path: exports_external.object({
    assignment_id: exports_external.string(),
    submission_id: exports_external.string(),
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/lti/assignments/{assignment_id}/submissions/{submission_id}/originality_report/{id}")
});
var editOriginalityReportSubmissionsResponsesSchema = exports_external.object({
  200: originalityReportSchema
});
var editOriginalityReportSubmissionsResponseSchema = editOriginalityReportSubmissionsResponsesSchema.shape["keyof EditOriginalityReportSubmissionsResponses"];
var getAllUsersInGroupLtiDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    group_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/lti/groups/{group_id}/users")
});
var listAllWebhookSubscriptionForToolProxyDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.never().optional(),
  query: exports_external.never().optional(),
  url: exports_external.literal("/lti/subscriptions")
});
var listAllWebhookSubscriptionForToolProxyResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var createWebhookSubscriptionDataSchema = exports_external.object({
  body: exports_external.object({
    "submission[ContextId]": exports_external.string(),
    "subscription[ContextType]": exports_external.string(),
    "subscription[EventTypes]": exports_external.array(exports_external.string()),
    "subscription[Format]": exports_external.string(),
    "subscription[TransportMetadata]": exports_external.record(exports_external.unknown()),
    "subscription[TransportType]": exports_external.string()
  }),
  path: exports_external.never().optional(),
  query: exports_external.never().optional(),
  url: exports_external.literal("/lti/subscriptions")
});
var createWebhookSubscriptionResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var deleteWebhookSubscriptionDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/lti/subscriptions/{id}")
});
var deleteWebhookSubscriptionResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var showSingleWebhookSubscriptionDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/lti/subscriptions/{id}")
});
var showSingleWebhookSubscriptionResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var updateWebhookSubscriptionDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/lti/subscriptions/{id}")
});
var updateWebhookSubscriptionResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var getSingleUserLtiDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/lti/users/{id}")
});
var retrieveAssignmentsEnabledForGradeExportToSisAccountsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    account_id: exports_external.number()
  }),
  query: exports_external.object({
    course_id: exports_external.number().optional(),
    starts_before: exports_external.string().optional(),
    ends_after: exports_external.string().optional(),
    include: exports_external.literal("student_overrides").optional()
  }).optional(),
  url: exports_external.literal("/sis/accounts/{account_id}/assignments")
});
var retrieveAssignmentsEnabledForGradeExportToSisAccountsResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var retrieveAssignmentsEnabledForGradeExportToSisCoursesDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.number()
  }),
  query: exports_external.object({
    account_id: exports_external.number().optional(),
    starts_before: exports_external.string().optional(),
    ends_after: exports_external.string().optional(),
    include: exports_external.literal("student_overrides").optional()
  }).optional(),
  url: exports_external.literal("/sis/courses/{course_id}/assignments")
});
var retrieveAssignmentsEnabledForGradeExportToSisCoursesResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var disableAssignmentsCurrentlyEnabledForGradeExportToSisDataSchema = exports_external.object({
  body: exports_external.object({
    grading_period_id: exports_external.number().optional()
  }).optional(),
  path: exports_external.object({
    course_id: exports_external.number()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/sis/courses/{course_id}/disable_post_to_sis")
});
var disableAssignmentsCurrentlyEnabledForGradeExportToSisResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var listAccountsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.never().optional(),
  query: exports_external.object({
    include: exports_external.array(exports_external.union([exports_external.literal("lti_guid"), exports_external.literal("registration_settings"), exports_external.literal("services")])).optional(),
    page: exports_external.string().optional(),
    per_page: exports_external.number().optional()
  }).optional(),
  url: exports_external.literal("/v1/accounts")
});
var listAccountsResponsesSchema = exports_external.object({
  200: exports_external.array(accountSchema)
});
var listAccountsResponseSchema = listAccountsResponsesSchema.shape["keyof ListAccountsResponses"];
var searchAccountDomainsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.never().optional(),
  query: exports_external.object({
    name: exports_external.string().optional(),
    domain: exports_external.string().optional(),
    latitude: exports_external.number().optional(),
    longitude: exports_external.number().optional()
  }).optional(),
  url: exports_external.literal("/v1/accounts/search")
});
var searchAccountDomainsResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var indexOfActiveGlobalNotificationForUserDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    account_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/accounts/{account_id}/account_notifications")
});
var indexOfActiveGlobalNotificationForUserResponsesSchema = exports_external.object({
  200: exports_external.array(accountNotificationSchema)
});
var indexOfActiveGlobalNotificationForUserResponseSchema = indexOfActiveGlobalNotificationForUserResponsesSchema.shape["keyof IndexOfActiveGlobalNotificationForUserResponses"];
var createGlobalNotificationDataSchema = exports_external.object({
  body: exports_external.object({
    "account_notification[end_at]": exports_external.string(),
    "account_notification[icon]": exports_external.union([exports_external.literal("warning"), exports_external.literal("information"), exports_external.literal("question"), exports_external.literal("error"), exports_external.literal("calendar")]).optional(),
    "account_notification[message]": exports_external.string(),
    "account_notification[start_at]": exports_external.string(),
    "account_notification[subject]": exports_external.string(),
    account_notification_roles: exports_external.array(exports_external.string()).optional()
  }),
  path: exports_external.object({
    account_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/accounts/{account_id}/account_notifications")
});
var createGlobalNotificationResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var closeNotificationForUserDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    account_id: exports_external.string(),
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/accounts/{account_id}/account_notifications/{id}")
});
var closeNotificationForUserResponsesSchema = exports_external.object({
  200: accountNotificationSchema
});
var closeNotificationForUserResponseSchema = closeNotificationForUserResponsesSchema.shape["keyof CloseNotificationForUserResponses"];
var showGlobalNotificationDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    account_id: exports_external.string(),
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/accounts/{account_id}/account_notifications/{id}")
});
var showGlobalNotificationResponsesSchema = exports_external.object({
  200: accountNotificationSchema
});
var showGlobalNotificationResponseSchema = showGlobalNotificationResponsesSchema.shape["keyof ShowGlobalNotificationResponses"];
var updateGlobalNotificationDataSchema = exports_external.object({
  body: exports_external.object({
    "account_notification[end_at]": exports_external.string().optional(),
    "account_notification[icon]": exports_external.union([exports_external.literal("warning"), exports_external.literal("information"), exports_external.literal("question"), exports_external.literal("error"), exports_external.literal("calendar")]).optional(),
    "account_notification[message]": exports_external.string().optional(),
    "account_notification[start_at]": exports_external.string().optional(),
    "account_notification[subject]": exports_external.string().optional(),
    account_notification_roles: exports_external.array(exports_external.string()).optional()
  }).optional(),
  path: exports_external.object({
    account_id: exports_external.string(),
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/accounts/{account_id}/account_notifications/{id}")
});
var updateGlobalNotificationResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var listAccountAdminsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    account_id: exports_external.string()
  }),
  query: exports_external.object({
    user_id: exports_external.string().optional(),
    page: exports_external.string().optional(),
    per_page: exports_external.number().optional()
  }).optional(),
  url: exports_external.literal("/v1/accounts/{account_id}/admins")
});
var makeAccountAdminDataSchema = exports_external.object({
  body: exports_external.object({
    role: exports_external.string().optional(),
    role_id: exports_external.number().optional(),
    send_confirmation: exports_external.boolean().optional(),
    user_id: exports_external.number()
  }),
  path: exports_external.object({
    account_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/accounts/{account_id}/admins")
});
var removeAccountAdminDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    account_id: exports_external.string(),
    user_id: exports_external.string()
  }),
  query: exports_external.object({
    role: exports_external.string().optional(),
    role_id: exports_external.number().optional()
  }).optional(),
  url: exports_external.literal("/v1/accounts/{account_id}/admins/{user_id}")
});
var getDepartmentLevelParticipationDataCompletedDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    account_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/accounts/{account_id}/analytics/completed/activity")
});
var getDepartmentLevelParticipationDataCompletedResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var getDepartmentLevelGradeDataCompletedDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    account_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/accounts/{account_id}/analytics/completed/grades")
});
var getDepartmentLevelGradeDataCompletedResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var getDepartmentLevelStatisticsCompletedDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    account_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/accounts/{account_id}/analytics/completed/statistics")
});
var getDepartmentLevelStatisticsCompletedResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var getDepartmentLevelParticipationDataCurrentDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    account_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/accounts/{account_id}/analytics/current/activity")
});
var getDepartmentLevelParticipationDataCurrentResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var getDepartmentLevelGradeDataCurrentDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    account_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/accounts/{account_id}/analytics/current/grades")
});
var getDepartmentLevelGradeDataCurrentResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var getDepartmentLevelStatisticsCurrentDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    account_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/accounts/{account_id}/analytics/current/statistics")
});
var getDepartmentLevelStatisticsCurrentResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var getDepartmentLevelParticipationDataTermsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    account_id: exports_external.string(),
    term_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/accounts/{account_id}/analytics/terms/{term_id}/activity")
});
var getDepartmentLevelParticipationDataTermsResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var getDepartmentLevelGradeDataTermsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    account_id: exports_external.string(),
    term_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/accounts/{account_id}/analytics/terms/{term_id}/grades")
});
var getDepartmentLevelGradeDataTermsResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var getDepartmentLevelStatisticsTermsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    account_id: exports_external.string(),
    term_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/accounts/{account_id}/analytics/terms/{term_id}/statistics")
});
var getDepartmentLevelStatisticsTermsResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var listAuthenticationProvidersDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    account_id: exports_external.string()
  }),
  query: exports_external.object({
    page: exports_external.string().optional(),
    per_page: exports_external.number().optional()
  }).optional(),
  url: exports_external.literal("/v1/accounts/{account_id}/authentication_providers")
});
var authenticationProviderSchema = exports_external.object({
  auth_base: exports_external.string().optional().nullable(),
  auth_filter: exports_external.string().optional().nullable(),
  auth_host: exports_external.string().optional().nullable(),
  auth_over_tls: exports_external.number().optional().nullable(),
  auth_port: exports_external.number().optional().nullable(),
  auth_type: exports_external.string().optional().nullable(),
  auth_username: exports_external.string().optional().nullable(),
  certificate_fingerprint: exports_external.string().optional().nullable(),
  federated_attributes: federatedAttributesConfigSchema.optional(),
  id: exports_external.number().optional().nullable(),
  identifier_format: exports_external.string().optional().nullable(),
  idp_entity_id: exports_external.string().optional().nullable(),
  jit_provisioning: exports_external.boolean().optional().nullable(),
  log_in_url: exports_external.string().optional().nullable(),
  log_out_url: exports_external.string().optional().nullable(),
  login_attribute: exports_external.string().optional().nullable(),
  position: exports_external.number().optional().nullable(),
  requested_authn_context: exports_external.string().optional().nullable(),
  sig_alg: exports_external.string().optional().nullable()
});
var listAuthenticationProvidersResponsesSchema = exports_external.object({
  200: exports_external.array(authenticationProviderSchema)
});
var addAuthenticationProviderDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    account_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/accounts/{account_id}/authentication_providers")
});
var addAuthenticationProviderResponsesSchema = exports_external.object({
  200: authenticationProviderSchema
});
var addAuthenticationProviderResponseSchema = addAuthenticationProviderResponsesSchema.shape["keyof AddAuthenticationProviderResponses"];
var deleteAuthenticationProviderDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    account_id: exports_external.string(),
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/accounts/{account_id}/authentication_providers/{id}")
});
var deleteAuthenticationProviderResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var getAuthenticationProviderDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    account_id: exports_external.string(),
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/accounts/{account_id}/authentication_providers/{id}")
});
var getAuthenticationProviderResponsesSchema = exports_external.object({
  200: authenticationProviderSchema
});
var getAuthenticationProviderResponseSchema = getAuthenticationProviderResponsesSchema.shape["keyof GetAuthenticationProviderResponses"];
var updateAuthenticationProviderDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    account_id: exports_external.string(),
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/accounts/{account_id}/authentication_providers/{id}")
});
var updateAuthenticationProviderResponsesSchema = exports_external.object({
  200: authenticationProviderSchema
});
var updateAuthenticationProviderResponseSchema = updateAuthenticationProviderResponsesSchema.shape["keyof UpdateAuthenticationProviderResponses"];
var listContentMigrationsAccountsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    account_id: exports_external.string()
  }),
  query: exports_external.object({
    page: exports_external.string().optional(),
    per_page: exports_external.number().optional()
  }).optional(),
  url: exports_external.literal("/v1/accounts/{account_id}/content_migrations")
});
var listContentMigrationsAccountsResponsesSchema = exports_external.object({
  200: exports_external.array(contentMigrationSchema)
});
var listContentMigrationsAccountsResponseSchema = listContentMigrationsAccountsResponsesSchema.shape["keyof ListContentMigrationsAccountsResponses"];
var createContentMigrationAccountsDataSchema = exports_external.object({
  body: exports_external.object({
    "date_shift_options[day_substitutions][X]": exports_external.number().optional(),
    "date_shift_options[new_end_date]": exports_external.string().optional(),
    "date_shift_options[new_start_date]": exports_external.string().optional(),
    "date_shift_options[old_end_date]": exports_external.string().optional(),
    "date_shift_options[old_start_date]": exports_external.string().optional(),
    "date_shift_options[remove_dates]": exports_external.boolean().optional(),
    "date_shift_options[shift_dates]": exports_external.boolean().optional(),
    migration_type: exports_external.string(),
    "pre_attachment[name]": exports_external.string().optional(),
    "pre_attachment[todo]": exports_external.string().optional(),
    "settings[file_url]": exports_external.string().optional(),
    "settings[folder_id]": exports_external.string().optional(),
    "settings[overwrite_quizzes]": exports_external.boolean().optional(),
    "settings[question_bank_id]": exports_external.number().optional(),
    "settings[question_bank_name]": exports_external.string().optional(),
    "settings[source_course_id]": exports_external.string().optional()
  }),
  path: exports_external.object({
    account_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/accounts/{account_id}/content_migrations")
});
var createContentMigrationAccountsResponsesSchema = exports_external.object({
  200: contentMigrationSchema
});
var createContentMigrationAccountsResponseSchema = createContentMigrationAccountsResponsesSchema.shape["keyof CreateContentMigrationAccountsResponses"];
var listMigrationSystemsAccountsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    account_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/accounts/{account_id}/content_migrations/migrators")
});
var listMigrationSystemsAccountsResponsesSchema = exports_external.object({
  200: exports_external.array(migratorSchema)
});
var listMigrationSystemsAccountsResponseSchema = listMigrationSystemsAccountsResponsesSchema.shape["keyof ListMigrationSystemsAccountsResponses"];
var listMigrationIssuesAccountsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    account_id: exports_external.string(),
    content_migration_id: exports_external.string()
  }),
  query: exports_external.object({
    page: exports_external.string().optional(),
    per_page: exports_external.number().optional()
  }).optional(),
  url: exports_external.literal("/v1/accounts/{account_id}/content_migrations/{content_migration_id}/migration_issues")
});
var listMigrationIssuesAccountsResponsesSchema = exports_external.object({
  200: exports_external.array(migrationIssueSchema)
});
var listMigrationIssuesAccountsResponseSchema = listMigrationIssuesAccountsResponsesSchema.shape["keyof ListMigrationIssuesAccountsResponses"];
var getMigrationIssueAccountsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    account_id: exports_external.string(),
    content_migration_id: exports_external.string(),
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/accounts/{account_id}/content_migrations/{content_migration_id}/migration_issues/{id}")
});
var getMigrationIssueAccountsResponsesSchema = exports_external.object({
  200: migrationIssueSchema
});
var getMigrationIssueAccountsResponseSchema = getMigrationIssueAccountsResponsesSchema.shape["keyof GetMigrationIssueAccountsResponses"];
var updateMigrationIssueAccountsDataSchema = exports_external.object({
  body: exports_external.object({
    workflow_state: exports_external.union([exports_external.literal("active"), exports_external.literal("resolved")])
  }),
  path: exports_external.object({
    account_id: exports_external.string(),
    content_migration_id: exports_external.string(),
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/accounts/{account_id}/content_migrations/{content_migration_id}/migration_issues/{id}")
});
var updateMigrationIssueAccountsResponsesSchema = exports_external.object({
  200: migrationIssueSchema
});
var updateMigrationIssueAccountsResponseSchema = updateMigrationIssueAccountsResponsesSchema.shape["keyof UpdateMigrationIssueAccountsResponses"];
var getContentMigrationAccountsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    account_id: exports_external.string(),
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/accounts/{account_id}/content_migrations/{id}")
});
var getContentMigrationAccountsResponsesSchema = exports_external.object({
  200: contentMigrationSchema
});
var getContentMigrationAccountsResponseSchema = getContentMigrationAccountsResponsesSchema.shape["keyof GetContentMigrationAccountsResponses"];
var updateContentMigrationAccountsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    account_id: exports_external.string(),
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/accounts/{account_id}/content_migrations/{id}")
});
var updateContentMigrationAccountsResponsesSchema = exports_external.object({
  200: contentMigrationSchema
});
var updateContentMigrationAccountsResponseSchema = updateContentMigrationAccountsResponsesSchema.shape["keyof UpdateContentMigrationAccountsResponses"];
var getAllCoursesAccountsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    account_id: exports_external.string()
  }),
  query: exports_external.object({
    with_enrollments: exports_external.boolean().optional(),
    "enrollment_type[]": exports_external.array(exports_external.union([exports_external.literal("teacher"), exports_external.literal("student"), exports_external.literal("ta"), exports_external.literal("observer"), exports_external.literal("designer")])).optional(),
    published: exports_external.boolean().optional(),
    completed: exports_external.boolean().optional(),
    blueprint: exports_external.boolean().optional(),
    blueprint_associated: exports_external.boolean().optional(),
    public: exports_external.boolean().optional(),
    "by_teachers[]": exports_external.array(exports_external.number()).optional(),
    "by_subaccounts[]": exports_external.array(exports_external.number()).optional(),
    hide_enrollmentless_courses: exports_external.boolean().optional(),
    "state[]": exports_external.array(exports_external.union([exports_external.literal("created"), exports_external.literal("claimed"), exports_external.literal("available"), exports_external.literal("completed"), exports_external.literal("deleted"), exports_external.literal("all")])).optional(),
    enrollment_term_id: exports_external.number().optional(),
    search_term: exports_external.string().optional(),
    "include[]": exports_external.array(exports_external.union([exports_external.literal("syllabus_body"), exports_external.literal("term"), exports_external.literal("course_progress"), exports_external.literal("storage_quota_used_mb"), exports_external.literal("total_students"), exports_external.literal("teachers"), exports_external.literal("account_name"), exports_external.literal("concluded"), exports_external.literal("post_manually")])).optional(),
    sort: exports_external.union([exports_external.literal("course_status"), exports_external.literal("course_name"), exports_external.literal("sis_course_id"), exports_external.literal("teacher"), exports_external.literal("account_name")]).optional(),
    order: exports_external.union([exports_external.literal("asc"), exports_external.literal("desc")]).optional(),
    search_by: exports_external.union([exports_external.literal("course"), exports_external.literal("teacher")]).optional(),
    starts_before: exports_external.string().optional(),
    ends_after: exports_external.string().optional(),
    homeroom: exports_external.boolean().optional()
  }).optional(),
  url: exports_external.literal("/v1/accounts/{account_id}/courses")
});
var createNewCourseDataSchema = exports_external.object({
  body: exports_external.object({
    "course[allow_student_forum_attachments]": exports_external.boolean().optional(),
    "course[allow_student_wiki_edits]": exports_external.boolean().optional(),
    "course[allow_wiki_comments]": exports_external.boolean().optional(),
    "course[apply_assignment_group_weights]": exports_external.boolean().optional(),
    "course[course_code]": exports_external.string().optional(),
    "course[course_format]": exports_external.string().optional(),
    "course[default_view]": exports_external.union([exports_external.literal("feed"), exports_external.literal("wiki"), exports_external.literal("modules"), exports_external.literal("syllabus"), exports_external.literal("assignments")]).optional(),
    "course[end_at]": exports_external.string().optional(),
    "course[grading_standard_id]": exports_external.number().optional(),
    "course[hide_final_grades]": exports_external.boolean().optional(),
    "course[integration_id]": exports_external.string().optional(),
    "course[is_public]": exports_external.boolean().optional(),
    "course[is_public_to_auth_users]": exports_external.boolean().optional(),
    "course[license]": exports_external.string().optional(),
    "course[name]": exports_external.string().optional(),
    "course[open_enrollment]": exports_external.boolean().optional(),
    "course[public_description]": exports_external.string().optional(),
    "course[public_syllabus]": exports_external.boolean().optional(),
    "course[public_syllabus_to_auth]": exports_external.boolean().optional(),
    "course[restrict_enrollments_to_course_dates]": exports_external.boolean().optional(),
    "course[self_enrollment]": exports_external.boolean().optional(),
    "course[sis_course_id]": exports_external.string().optional(),
    "course[start_at]": exports_external.string().optional(),
    "course[syllabus_body]": exports_external.string().optional(),
    "course[term_id]": exports_external.number().optional(),
    "course[time_zone]": exports_external.string().optional(),
    enable_sis_reactivation: exports_external.boolean().optional(),
    enroll_me: exports_external.boolean().optional(),
    offer: exports_external.boolean().optional()
  }).optional(),
  path: exports_external.object({
    account_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/accounts/{account_id}/courses")
});
var updateCoursesDataSchema = exports_external.object({
  body: exports_external.object({
    course_ids: exports_external.array(exports_external.string()),
    event: exports_external.union([exports_external.literal("offer"), exports_external.literal("conclude"), exports_external.literal("delete"), exports_external.literal("undelete")])
  }),
  path: exports_external.object({
    account_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/accounts/{account_id}/courses")
});
var updateCoursesResponsesSchema = exports_external.object({
  200: progressSchema
});
var updateCoursesResponseSchema = updateCoursesResponsesSchema.shape["keyof UpdateCoursesResponses"];
var getSingleCourseAccountsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    account_id: exports_external.string(),
    id: exports_external.string()
  }),
  query: exports_external.object({
    include: exports_external.array(exports_external.union([exports_external.literal("needs_grading_count"), exports_external.literal("syllabus_body"), exports_external.literal("public_description"), exports_external.literal("total_scores"), exports_external.literal("current_grading_period_scores"), exports_external.literal("term"), exports_external.literal("account"), exports_external.literal("course_progress"), exports_external.literal("sections"), exports_external.literal("storage_quota_used_mb"), exports_external.literal("total_students"), exports_external.literal("passback_status"), exports_external.literal("favorites"), exports_external.literal("teachers"), exports_external.literal("observed_users"), exports_external.literal("all_courses"), exports_external.literal("permissions"), exports_external.literal("course_image")])).optional()
  }).optional(),
  url: exports_external.literal("/v1/accounts/{account_id}/courses/{id}")
});
var createToolFromToolconfigurationAccountsDataSchema = exports_external.object({
  body: exports_external.object({
    course_id: exports_external.string().optional()
  }).optional(),
  path: exports_external.object({
    account_id: exports_external.string(),
    developer_key_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/accounts/{account_id}/developer_keys/{developer_key_id}/create_tool")
});
var createToolFromToolconfigurationAccountsResponsesSchema = exports_external.object({
  200: contextExternalToolSchema
});
var createToolFromToolconfigurationAccountsResponseSchema = createToolFromToolconfigurationAccountsResponsesSchema.shape["keyof CreateToolFromToolconfigurationAccountsResponses"];
var enrollmentByIdDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    account_id: exports_external.string(),
    id: exports_external.number()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/accounts/{account_id}/enrollments/{id}")
});
var listExternalToolsAccountsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    account_id: exports_external.string()
  }),
  query: exports_external.object({
    search_term: exports_external.string().optional(),
    selectable: exports_external.boolean().optional(),
    include_parents: exports_external.boolean().optional(),
    page: exports_external.string().optional(),
    per_page: exports_external.number().optional()
  }).optional(),
  url: exports_external.literal("/v1/accounts/{account_id}/external_tools")
});
var listExternalToolsAccountsResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var createExternalToolAccountsDataSchema = exports_external.object({
  body: exports_external.object({
    "account_navigation[display_type]": exports_external.string().optional(),
    "account_navigation[enabled]": exports_external.boolean().optional(),
    "account_navigation[selection_height]": exports_external.string().optional(),
    "account_navigation[selection_width]": exports_external.string().optional(),
    "account_navigation[text]": exports_external.string().optional(),
    "account_navigation[url]": exports_external.string().optional(),
    config_type: exports_external.string().optional(),
    config_url: exports_external.string().optional(),
    config_xml: exports_external.string().optional(),
    consumer_key: exports_external.string(),
    "course_home_sub_navigation[enabled]": exports_external.boolean().optional(),
    "course_home_sub_navigation[icon_url]": exports_external.string().optional(),
    "course_home_sub_navigation[text]": exports_external.string().optional(),
    "course_home_sub_navigation[url]": exports_external.string().optional(),
    "course_navigation[default]": exports_external.boolean().optional(),
    "course_navigation[display_type]": exports_external.string().optional(),
    "course_navigation[enabled]": exports_external.boolean().optional(),
    "course_navigation[text]": exports_external.string().optional(),
    "course_navigation[visibility]": exports_external.union([exports_external.literal("admins"), exports_external.literal("members")]).optional(),
    "course_navigation[windowTarget]": exports_external.union([exports_external.literal("_blank"), exports_external.literal("_self")]).optional(),
    "custom_fields[field_name]": exports_external.string().optional(),
    description: exports_external.string().optional(),
    domain: exports_external.string().optional(),
    "editor_button[enabled]": exports_external.boolean().optional(),
    "editor_button[icon_url]": exports_external.string().optional(),
    "editor_button[message_type]": exports_external.string().optional(),
    "editor_button[selection_height]": exports_external.string().optional(),
    "editor_button[selection_width]": exports_external.string().optional(),
    "editor_button[url]": exports_external.string().optional(),
    "homework_submission[enabled]": exports_external.boolean().optional(),
    "homework_submission[message_type]": exports_external.string().optional(),
    "homework_submission[text]": exports_external.string().optional(),
    "homework_submission[url]": exports_external.string().optional(),
    icon_url: exports_external.string().optional(),
    "link_selection[enabled]": exports_external.boolean().optional(),
    "link_selection[message_type]": exports_external.string().optional(),
    "link_selection[text]": exports_external.string().optional(),
    "link_selection[url]": exports_external.string().optional(),
    "migration_selection[enabled]": exports_external.boolean().optional(),
    "migration_selection[message_type]": exports_external.string().optional(),
    "migration_selection[url]": exports_external.string().optional(),
    name: exports_external.string(),
    not_selectable: exports_external.boolean().optional(),
    oauth_compliant: exports_external.boolean().optional(),
    privacy_level: exports_external.union([exports_external.literal("anonymous"), exports_external.literal("name_only"), exports_external.literal("public")]),
    "resource_selection[enabled]": exports_external.boolean().optional(),
    "resource_selection[icon_url]": exports_external.string().optional(),
    "resource_selection[selection_height]": exports_external.string().optional(),
    "resource_selection[selection_width]": exports_external.string().optional(),
    "resource_selection[url]": exports_external.string().optional(),
    shared_secret: exports_external.string(),
    text: exports_external.string().optional(),
    "tool_configuration[enabled]": exports_external.boolean().optional(),
    "tool_configuration[message_type]": exports_external.string().optional(),
    "tool_configuration[prefer_sis_email]": exports_external.boolean().optional(),
    "tool_configuration[url]": exports_external.string().optional(),
    url: exports_external.string().optional(),
    "user_navigation[enabled]": exports_external.boolean().optional(),
    "user_navigation[text]": exports_external.string().optional(),
    "user_navigation[url]": exports_external.string().optional(),
    "user_navigation[visibility]": exports_external.union([exports_external.literal("admins"), exports_external.literal("members"), exports_external.literal("public")]).optional()
  }),
  path: exports_external.object({
    account_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/accounts/{account_id}/external_tools")
});
var createExternalToolAccountsResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var getSessionlessLaunchUrlForExternalToolAccountsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    account_id: exports_external.string()
  }),
  query: exports_external.object({
    id: exports_external.string().optional(),
    url: exports_external.string().optional(),
    assignment_id: exports_external.string().optional(),
    module_item_id: exports_external.string().optional(),
    launch_type: exports_external.union([exports_external.literal("assessment"), exports_external.literal("module_item")]).optional()
  }).optional(),
  url: exports_external.literal("/v1/accounts/{account_id}/external_tools/sessionless_launch")
});
var getSessionlessLaunchUrlForExternalToolAccountsResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var deleteExternalToolAccountsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    account_id: exports_external.string(),
    external_tool_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/accounts/{account_id}/external_tools/{external_tool_id}")
});
var deleteExternalToolAccountsResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var getSingleExternalToolAccountsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    account_id: exports_external.string(),
    external_tool_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/accounts/{account_id}/external_tools/{external_tool_id}")
});
var getSingleExternalToolAccountsResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var editExternalToolAccountsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    account_id: exports_external.string(),
    external_tool_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/accounts/{account_id}/external_tools/{external_tool_id}")
});
var editExternalToolAccountsResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var listFeaturesAccountsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    account_id: exports_external.string()
  }),
  query: exports_external.object({
    page: exports_external.string().optional(),
    per_page: exports_external.number().optional()
  }).optional(),
  url: exports_external.literal("/v1/accounts/{account_id}/features")
});
var featureSchema = exports_external.object({
  applies_to: exports_external.string().optional().nullable(),
  autoexpand: exports_external.boolean().optional().nullable(),
  beta: exports_external.boolean().optional().nullable(),
  development: exports_external.boolean().optional().nullable(),
  display_name: exports_external.string().optional().nullable(),
  enable_at: exports_external.string().optional().nullable(),
  feature_flag: featureFlagNullableSchema.optional(),
  name: exports_external.string().optional().nullable(),
  release_notes_url: exports_external.string().optional().nullable(),
  root_opt_in: exports_external.boolean().optional().nullable()
});
var listFeaturesAccountsResponsesSchema = exports_external.object({
  200: exports_external.array(featureSchema)
});
var listEnabledFeaturesAccountsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    account_id: exports_external.string()
  }),
  query: exports_external.object({
    page: exports_external.string().optional(),
    per_page: exports_external.number().optional()
  }).optional(),
  url: exports_external.literal("/v1/accounts/{account_id}/features/enabled")
});
var listEnabledFeaturesAccountsResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var removeFeatureFlagAccountsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    account_id: exports_external.string(),
    feature: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/accounts/{account_id}/features/flags/{feature}")
});
var removeFeatureFlagAccountsResponsesSchema = exports_external.object({
  200: featureFlagSchema
});
var removeFeatureFlagAccountsResponseSchema = removeFeatureFlagAccountsResponsesSchema.shape["keyof RemoveFeatureFlagAccountsResponses"];
var getFeatureFlagAccountsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    account_id: exports_external.string(),
    feature: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/accounts/{account_id}/features/flags/{feature}")
});
var getFeatureFlagAccountsResponsesSchema = exports_external.object({
  200: featureFlagSchema
});
var getFeatureFlagAccountsResponseSchema = getFeatureFlagAccountsResponsesSchema.shape["keyof GetFeatureFlagAccountsResponses"];
var setFeatureFlagAccountsDataSchema = exports_external.object({
  body: exports_external.object({
    state: exports_external.union([exports_external.literal(false), exports_external.literal("allowed"), exports_external.literal(true)]).optional()
  }).optional(),
  path: exports_external.object({
    account_id: exports_external.string(),
    feature: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/accounts/{account_id}/features/flags/{feature}")
});
var setFeatureFlagAccountsResponsesSchema = exports_external.object({
  200: featureFlagSchema
});
var setFeatureFlagAccountsResponseSchema = setFeatureFlagAccountsResponsesSchema.shape["keyof SetFeatureFlagAccountsResponses"];
var listGradingPeriodsAccountsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    account_id: exports_external.string()
  }),
  query: exports_external.object({
    page: exports_external.string().optional(),
    per_page: exports_external.number().optional()
  }).optional(),
  url: exports_external.literal("/v1/accounts/{account_id}/grading_periods")
});
var listGradingPeriodsAccountsResponsesSchema = exports_external.object({
  200: exports_external.array(gradingPeriodSchema)
});
var listGradingPeriodsAccountsResponseSchema = listGradingPeriodsAccountsResponsesSchema.shape["keyof ListGradingPeriodsAccountsResponses"];
var deleteGradingPeriodAccountsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    account_id: exports_external.string(),
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/accounts/{account_id}/grading_periods/{id}")
});
var deleteGradingPeriodAccountsResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var listGradingStandardsAvailableInContextAccountsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    account_id: exports_external.string()
  }),
  query: exports_external.object({
    page: exports_external.string().optional(),
    per_page: exports_external.number().optional()
  }).optional(),
  url: exports_external.literal("/v1/accounts/{account_id}/grading_standards")
});
var listGradingStandardsAvailableInContextAccountsResponsesSchema = exports_external.object({
  200: exports_external.array(gradingStandardSchema)
});
var listGradingStandardsAvailableInContextAccountsResponseSchema = listGradingStandardsAvailableInContextAccountsResponsesSchema.shape["keyof ListGradingStandardsAvailableInContextAccountsResponses"];
var createNewGradingStandardAccountsDataSchema = exports_external.object({
  body: exports_external.object({
    "grading_scheme_entry[name]": exports_external.array(exports_external.string()),
    "grading_scheme_entry[value]": exports_external.array(exports_external.number()),
    title: exports_external.string()
  }),
  path: exports_external.object({
    account_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/accounts/{account_id}/grading_standards")
});
var createNewGradingStandardAccountsResponsesSchema = exports_external.object({
  200: gradingStandardSchema
});
var createNewGradingStandardAccountsResponseSchema = createNewGradingStandardAccountsResponsesSchema.shape["keyof CreateNewGradingStandardAccountsResponses"];
var getSingleGradingStandardInContextAccountsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    account_id: exports_external.string(),
    grading_standard_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/accounts/{account_id}/grading_standards/{grading_standard_id}")
});
var getSingleGradingStandardInContextAccountsResponsesSchema = exports_external.object({
  200: gradingStandardSchema
});
var getSingleGradingStandardInContextAccountsResponseSchema = getSingleGradingStandardInContextAccountsResponsesSchema.shape["keyof GetSingleGradingStandardInContextAccountsResponses"];
var listGroupCategoriesForContextAccountsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    account_id: exports_external.string()
  }),
  query: exports_external.object({
    page: exports_external.string().optional(),
    per_page: exports_external.number().optional()
  }).optional(),
  url: exports_external.literal("/v1/accounts/{account_id}/group_categories")
});
var groupCategorySchema = exports_external.object({
  account_id: exports_external.number().optional().nullable(),
  auto_leader: exports_external.string().optional().nullable(),
  context_type: exports_external.string().optional().nullable(),
  group_limit: exports_external.number().optional().nullable(),
  id: exports_external.number().optional(),
  name: exports_external.string().optional().nullable(),
  progress: progressNullableSchema.optional(),
  role: exports_external.string().optional().nullable(),
  self_signup: exports_external.string().optional().nullable(),
  sis_group_category_id: exports_external.string().optional().nullable(),
  sis_import_id: exports_external.number().optional().nullable()
});
var listGroupCategoriesForContextAccountsResponsesSchema = exports_external.object({
  200: exports_external.array(groupCategorySchema)
});
var createGroupCategoryAccountsDataSchema = exports_external.object({
  body: exports_external.object({
    auto_leader: exports_external.union([exports_external.literal("first"), exports_external.literal("random")]).optional(),
    create_group_count: exports_external.number().optional(),
    group_limit: exports_external.number().optional(),
    name: exports_external.string(),
    self_signup: exports_external.union([exports_external.literal("enabled"), exports_external.literal("restricted")]).optional(),
    sis_group_category_id: exports_external.string().optional(),
    split_group_count: exports_external.string().optional()
  }),
  path: exports_external.object({
    account_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/accounts/{account_id}/group_categories")
});
var createGroupCategoryAccountsResponsesSchema = exports_external.object({
  200: groupCategorySchema
});
var createGroupCategoryAccountsResponseSchema = createGroupCategoryAccountsResponsesSchema.shape["keyof CreateGroupCategoryAccountsResponses"];
var listGroupsAvailableInContextAccountsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    account_id: exports_external.string()
  }),
  query: exports_external.object({
    only_own_groups: exports_external.boolean().optional(),
    include: exports_external.array(exports_external.literal("tabs")).optional(),
    page: exports_external.string().optional(),
    per_page: exports_external.number().optional()
  }).optional(),
  url: exports_external.literal("/v1/accounts/{account_id}/groups")
});
var listGroupsAvailableInContextAccountsResponsesSchema = exports_external.object({
  200: exports_external.array(groupSchema)
});
var listGroupsAvailableInContextAccountsResponseSchema = listGroupsAvailableInContextAccountsResponsesSchema.shape["keyof ListGroupsAvailableInContextAccountsResponses"];
var getHelpLinksDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    account_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/accounts/{account_id}/help_links")
});
var getHelpLinksResponsesSchema = exports_external.object({
  200: helpLinksSchema
});
var getHelpLinksResponseSchema = getHelpLinksResponsesSchema.shape["keyof GetHelpLinksResponses"];
var listUserLoginsAccountsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    account_id: exports_external.string()
  }),
  query: exports_external.object({
    page: exports_external.string().optional(),
    per_page: exports_external.number().optional()
  }).optional(),
  url: exports_external.literal("/v1/accounts/{account_id}/logins")
});
var listUserLoginsAccountsResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var createUserLoginDataSchema = exports_external.object({
  body: exports_external.object({
    "login[authentication_provider_id]": exports_external.string().optional(),
    "login[integration_id]": exports_external.string().optional(),
    "login[password]": exports_external.string().optional(),
    "login[sis_user_id]": exports_external.string().optional(),
    "login[unique_id]": exports_external.string(),
    "user[id]": exports_external.string()
  }),
  path: exports_external.object({
    account_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/accounts/{account_id}/logins")
});
var createUserLoginResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var editUserLoginDataSchema = exports_external.object({
  body: exports_external.object({
    "login[integration_id]": exports_external.string().optional(),
    "login[password]": exports_external.string().optional(),
    "login[sis_user_id]": exports_external.string().optional(),
    "login[unique_id]": exports_external.string().optional()
  }).optional(),
  path: exports_external.object({
    account_id: exports_external.string(),
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/accounts/{account_id}/logins/{id}")
});
var editUserLoginResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var getAllOutcomeLinksForContextAccountsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    account_id: exports_external.string()
  }),
  query: exports_external.object({
    outcome_style: exports_external.string().optional(),
    outcome_group_style: exports_external.string().optional()
  }).optional(),
  url: exports_external.literal("/v1/accounts/{account_id}/outcome_group_links")
});
var getAllOutcomeLinksForContextAccountsResponsesSchema = exports_external.object({
  200: exports_external.array(outcomeLinkSchema)
});
var getAllOutcomeLinksForContextAccountsResponseSchema = getAllOutcomeLinksForContextAccountsResponsesSchema.shape["keyof GetAllOutcomeLinksForContextAccountsResponses"];
var getAllOutcomeGroupsForContextAccountsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    account_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/accounts/{account_id}/outcome_groups")
});
var getAllOutcomeGroupsForContextAccountsResponsesSchema = exports_external.object({
  200: exports_external.array(outcomeGroupSchema)
});
var getAllOutcomeGroupsForContextAccountsResponseSchema = getAllOutcomeGroupsForContextAccountsResponsesSchema.shape["keyof GetAllOutcomeGroupsForContextAccountsResponses"];
var deleteOutcomeGroupAccountsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    account_id: exports_external.string(),
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/accounts/{account_id}/outcome_groups/{id}")
});
var deleteOutcomeGroupAccountsResponsesSchema = exports_external.object({
  200: outcomeGroupSchema
});
var deleteOutcomeGroupAccountsResponseSchema = deleteOutcomeGroupAccountsResponsesSchema.shape["keyof DeleteOutcomeGroupAccountsResponses"];
var showOutcomeGroupAccountsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    account_id: exports_external.string(),
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/accounts/{account_id}/outcome_groups/{id}")
});
var showOutcomeGroupAccountsResponsesSchema = exports_external.object({
  200: outcomeGroupSchema
});
var showOutcomeGroupAccountsResponseSchema = showOutcomeGroupAccountsResponsesSchema.shape["keyof ShowOutcomeGroupAccountsResponses"];
var updateOutcomeGroupAccountsDataSchema = exports_external.object({
  body: exports_external.object({
    description: exports_external.string().optional(),
    parent_outcome_group_id: exports_external.number().optional(),
    title: exports_external.string().optional(),
    vendor_guid: exports_external.string().optional()
  }).optional(),
  path: exports_external.object({
    account_id: exports_external.string(),
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/accounts/{account_id}/outcome_groups/{id}")
});
var updateOutcomeGroupAccountsResponsesSchema = exports_external.object({
  200: outcomeGroupSchema
});
var updateOutcomeGroupAccountsResponseSchema = updateOutcomeGroupAccountsResponsesSchema.shape["keyof UpdateOutcomeGroupAccountsResponses"];
var importOutcomeGroupAccountsDataSchema = exports_external.object({
  body: exports_external.object({
    async: exports_external.boolean().optional(),
    source_outcome_group_id: exports_external.number()
  }),
  path: exports_external.object({
    account_id: exports_external.string(),
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/accounts/{account_id}/outcome_groups/{id}/import")
});
var importOutcomeGroupAccountsResponsesSchema = exports_external.object({
  200: outcomeGroupSchema
});
var importOutcomeGroupAccountsResponseSchema = importOutcomeGroupAccountsResponsesSchema.shape["keyof ImportOutcomeGroupAccountsResponses"];
var listLinkedOutcomesAccountsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    account_id: exports_external.string(),
    id: exports_external.string()
  }),
  query: exports_external.object({
    outcome_style: exports_external.string().optional(),
    page: exports_external.string().optional(),
    per_page: exports_external.number().optional()
  }).optional(),
  url: exports_external.literal("/v1/accounts/{account_id}/outcome_groups/{id}/outcomes")
});
var listLinkedOutcomesAccountsResponsesSchema = exports_external.object({
  200: exports_external.array(outcomeLinkSchema)
});
var listLinkedOutcomesAccountsResponseSchema = listLinkedOutcomesAccountsResponsesSchema.shape["keyof ListLinkedOutcomesAccountsResponses"];
var createLinkOutcomeAccountsDataSchema = exports_external.object({
  body: exports_external.object({
    calculation_int: exports_external.number().optional(),
    calculation_method: exports_external.union([exports_external.literal("decaying_average"), exports_external.literal("n_mastery"), exports_external.literal("latest"), exports_external.literal("highest")]).optional(),
    description: exports_external.string().optional(),
    display_name: exports_external.string().optional(),
    mastery_points: exports_external.number().optional(),
    move_from: exports_external.number().optional(),
    outcome_id: exports_external.number().optional(),
    "ratings[description]": exports_external.array(exports_external.string()).optional(),
    "ratings[points]": exports_external.array(exports_external.number()).optional(),
    title: exports_external.string().optional(),
    vendor_guid: exports_external.string().optional()
  }).optional(),
  path: exports_external.object({
    account_id: exports_external.string(),
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/accounts/{account_id}/outcome_groups/{id}/outcomes")
});
var createLinkOutcomeAccountsResponsesSchema = exports_external.object({
  200: outcomeLinkSchema
});
var createLinkOutcomeAccountsResponseSchema = createLinkOutcomeAccountsResponsesSchema.shape["keyof CreateLinkOutcomeAccountsResponses"];
var unlinkOutcomeAccountsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    account_id: exports_external.string(),
    id: exports_external.string(),
    outcome_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/accounts/{account_id}/outcome_groups/{id}/outcomes/{outcome_id}")
});
var unlinkOutcomeAccountsResponsesSchema = exports_external.object({
  200: outcomeLinkSchema
});
var unlinkOutcomeAccountsResponseSchema = unlinkOutcomeAccountsResponsesSchema.shape["keyof UnlinkOutcomeAccountsResponses"];
var createLinkOutcomeAccountsOutcomeIdDataSchema = exports_external.object({
  body: exports_external.object({
    calculation_int: exports_external.number().optional(),
    calculation_method: exports_external.union([exports_external.literal("decaying_average"), exports_external.literal("n_mastery"), exports_external.literal("latest"), exports_external.literal("highest")]).optional(),
    description: exports_external.string().optional(),
    display_name: exports_external.string().optional(),
    mastery_points: exports_external.number().optional(),
    move_from: exports_external.number().optional(),
    "ratings[description]": exports_external.array(exports_external.string()).optional(),
    "ratings[points]": exports_external.array(exports_external.number()).optional(),
    title: exports_external.string().optional(),
    vendor_guid: exports_external.string().optional()
  }).optional(),
  path: exports_external.object({
    account_id: exports_external.string(),
    id: exports_external.string(),
    outcome_id: exports_external.number()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/accounts/{account_id}/outcome_groups/{id}/outcomes/{outcome_id}")
});
var createLinkOutcomeAccountsOutcomeIdResponsesSchema = exports_external.object({
  200: outcomeLinkSchema
});
var createLinkOutcomeAccountsOutcomeIdResponseSchema = createLinkOutcomeAccountsOutcomeIdResponsesSchema.shape["keyof CreateLinkOutcomeAccountsOutcomeIdResponses"];
var listSubgroupsAccountsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    account_id: exports_external.string(),
    id: exports_external.string()
  }),
  query: exports_external.object({
    page: exports_external.string().optional(),
    per_page: exports_external.number().optional()
  }).optional(),
  url: exports_external.literal("/v1/accounts/{account_id}/outcome_groups/{id}/subgroups")
});
var listSubgroupsAccountsResponsesSchema = exports_external.object({
  200: exports_external.array(outcomeGroupSchema)
});
var listSubgroupsAccountsResponseSchema = listSubgroupsAccountsResponsesSchema.shape["keyof ListSubgroupsAccountsResponses"];
var createSubgroupAccountsDataSchema = exports_external.object({
  body: exports_external.object({
    description: exports_external.string().optional(),
    title: exports_external.string(),
    vendor_guid: exports_external.string().optional()
  }),
  path: exports_external.object({
    account_id: exports_external.string(),
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/accounts/{account_id}/outcome_groups/{id}/subgroups")
});
var createSubgroupAccountsResponsesSchema = exports_external.object({
  200: outcomeGroupSchema
});
var createSubgroupAccountsResponseSchema = createSubgroupAccountsResponsesSchema.shape["keyof CreateSubgroupAccountsResponses"];
var importOutcomesAccountsDataSchema = exports_external.object({
  body: exports_external.object({
    attachment: exports_external.string().optional(),
    extension: exports_external.string().optional(),
    import_type: exports_external.string().optional()
  }).optional(),
  path: exports_external.object({
    account_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/accounts/{account_id}/outcome_imports")
});
var getOutcomeImportStatusAccountsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    account_id: exports_external.string(),
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/accounts/{account_id}/outcome_imports/{id}")
});
var getProficiencyRatingsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    account_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/accounts/{account_id}/outcome_proficiency")
});
var getProficiencyRatingsResponsesSchema = exports_external.object({
  200: proficiencySchema
});
var getProficiencyRatingsResponseSchema = getProficiencyRatingsResponsesSchema.shape["keyof GetProficiencyRatingsResponses"];
var createUpdateProficiencyRatingsDataSchema = exports_external.object({
  body: exports_external.object({
    "ratings[color]": exports_external.array(exports_external.number()).optional(),
    "ratings[description]": exports_external.array(exports_external.string()).optional(),
    "ratings[mastery]": exports_external.array(exports_external.number()).optional(),
    "ratings[points]": exports_external.array(exports_external.number()).optional()
  }).optional(),
  path: exports_external.object({
    account_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/accounts/{account_id}/outcome_proficiency")
});
var createUpdateProficiencyRatingsResponsesSchema = exports_external.object({
  200: proficiencySchema
});
var createUpdateProficiencyRatingsResponseSchema = createUpdateProficiencyRatingsResponsesSchema.shape["keyof CreateUpdateProficiencyRatingsResponses"];
var accountPermissionsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    account_id: exports_external.string()
  }),
  query: exports_external.object({
    permissions: exports_external.array(exports_external.string()).optional()
  }).optional(),
  url: exports_external.literal("/v1/accounts/{account_id}/permissions")
});
var accountPermissionsResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var listAvailableReportsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    account_id: exports_external.string()
  }),
  query: exports_external.object({
    page: exports_external.string().optional(),
    per_page: exports_external.number().optional()
  }).optional(),
  url: exports_external.literal("/v1/accounts/{account_id}/reports")
});
var listAvailableReportsResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var indexOfReportsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    account_id: exports_external.string(),
    report: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/accounts/{account_id}/reports/{report}")
});
var reportSchema = exports_external.object({
  attachment: fileNullableSchema.optional(),
  created_at: exports_external.string().optional().nullable(),
  current_line: exports_external.number().optional().nullable(),
  ended_at: exports_external.string().optional().nullable(),
  file_url: exports_external.string().optional().nullable(),
  id: exports_external.number().optional(),
  parameters: reportParametersSchema.optional(),
  progress: exports_external.number().optional().nullable(),
  report: exports_external.string().optional().nullable(),
  started_at: exports_external.string().optional().nullable(),
  status: exports_external.string().optional().nullable()
});
var indexOfReportsResponsesSchema = exports_external.object({
  200: exports_external.array(reportSchema)
});
var startReportDataSchema = exports_external.object({
  body: exports_external.object({
    parameters: exports_external.string().optional(),
    "parameters[course_id]": exports_external.number().optional(),
    "parameters[users]": exports_external.boolean().optional()
  }).optional(),
  path: exports_external.object({
    account_id: exports_external.string(),
    report: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/accounts/{account_id}/reports/{report}")
});
var startReportResponsesSchema = exports_external.object({
  200: reportSchema
});
var startReportResponseSchema = startReportResponsesSchema.shape["keyof StartReportResponses"];
var deleteReportDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    account_id: exports_external.string(),
    report: exports_external.string(),
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/accounts/{account_id}/reports/{report}/{id}")
});
var deleteReportResponsesSchema = exports_external.object({
  200: reportSchema
});
var deleteReportResponseSchema = deleteReportResponsesSchema.shape["keyof DeleteReportResponses"];
var statusOfReportDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    account_id: exports_external.string(),
    report: exports_external.string(),
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/accounts/{account_id}/reports/{report}/{id}")
});
var statusOfReportResponsesSchema = exports_external.object({
  200: reportSchema
});
var statusOfReportResponseSchema = statusOfReportResponsesSchema.shape["keyof StatusOfReportResponses"];
var listRolesDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    account_id: exports_external.string()
  }),
  query: exports_external.object({
    state: exports_external.array(exports_external.union([exports_external.literal("active"), exports_external.literal("inactive")])).optional(),
    show_inherited: exports_external.boolean().optional(),
    page: exports_external.string().optional(),
    per_page: exports_external.number().optional()
  }).optional(),
  url: exports_external.literal("/v1/accounts/{account_id}/roles")
});
var listRolesResponsesSchema = exports_external.object({
  200: exports_external.array(roleSchema)
});
var listRolesResponseSchema = listRolesResponsesSchema.shape["keyof ListRolesResponses"];
var createNewRoleDataSchema = exports_external.object({
  body: exports_external.object({
    base_role_type: exports_external.union([exports_external.literal("AccountMembership"), exports_external.literal("StudentEnrollment"), exports_external.literal("TeacherEnrollment"), exports_external.literal("TaEnrollment"), exports_external.literal("ObserverEnrollment"), exports_external.literal("DesignerEnrollment")]).optional(),
    label: exports_external.string(),
    "permissions[X][applies_to_descendants]": exports_external.boolean().optional(),
    "permissions[X][applies_to_self]": exports_external.boolean().optional(),
    "permissions[X][enabled]": exports_external.boolean().optional(),
    "permissions[X][explicit]": exports_external.boolean().optional(),
    "permissions[X][locked]": exports_external.boolean().optional(),
    role: exports_external.string().optional()
  }),
  path: exports_external.object({
    account_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/accounts/{account_id}/roles")
});
var createNewRoleResponsesSchema = exports_external.object({
  200: roleSchema
});
var createNewRoleResponseSchema = createNewRoleResponsesSchema.shape["keyof CreateNewRoleResponses"];
var deactivateRoleDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    account_id: exports_external.string(),
    id: exports_external.string()
  }),
  query: exports_external.object({
    role_id: exports_external.number(),
    role: exports_external.string().optional()
  }),
  url: exports_external.literal("/v1/accounts/{account_id}/roles/{id}")
});
var deactivateRoleResponsesSchema = exports_external.object({
  200: roleSchema
});
var deactivateRoleResponseSchema = deactivateRoleResponsesSchema.shape["keyof DeactivateRoleResponses"];
var getSingleRoleDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    id: exports_external.string(),
    account_id: exports_external.string()
  }),
  query: exports_external.object({
    role_id: exports_external.number(),
    role: exports_external.string().optional()
  }),
  url: exports_external.literal("/v1/accounts/{account_id}/roles/{id}")
});
var getSingleRoleResponsesSchema = exports_external.object({
  200: roleSchema
});
var getSingleRoleResponseSchema = getSingleRoleResponsesSchema.shape["keyof GetSingleRoleResponses"];
var updateRoleDataSchema = exports_external.object({
  body: exports_external.object({
    label: exports_external.string().optional(),
    "permissions[X][applies_to_descendants]": exports_external.boolean().optional(),
    "permissions[X][applies_to_self]": exports_external.boolean().optional(),
    "permissions[X][enabled]": exports_external.boolean().optional(),
    "permissions[X][explicit]": exports_external.boolean().optional()
  }).optional(),
  path: exports_external.object({
    account_id: exports_external.string(),
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/accounts/{account_id}/roles/{id}")
});
var updateRoleResponsesSchema = exports_external.object({
  200: roleSchema
});
var updateRoleResponseSchema = updateRoleResponsesSchema.shape["keyof UpdateRoleResponses"];
var activateRoleDataSchema = exports_external.object({
  body: exports_external.object({
    role: exports_external.unknown().optional(),
    role_id: exports_external.number()
  }),
  path: exports_external.object({
    account_id: exports_external.string(),
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/accounts/{account_id}/roles/{id}/activate")
});
var activateRoleResponsesSchema = exports_external.object({
  200: roleSchema
});
var activateRoleResponseSchema = activateRoleResponsesSchema.shape["keyof ActivateRoleResponses"];
var redirectToRootOutcomeGroupForContextAccountsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    account_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/accounts/{account_id}/root_outcome_group")
});
var redirectToRootOutcomeGroupForContextAccountsResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var listRubricsAccountsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    account_id: exports_external.string()
  }),
  query: exports_external.object({
    page: exports_external.string().optional(),
    per_page: exports_external.number().optional()
  }).optional(),
  url: exports_external.literal("/v1/accounts/{account_id}/rubrics")
});
var rubricSchema = exports_external.object({
  assessments: exports_external.array(rubricAssessmentSchema).optional().nullable(),
  context_id: exports_external.number().optional().nullable(),
  context_type: exports_external.string().optional().nullable(),
  free_form_criterion_comments: exports_external.boolean().optional().nullable(),
  hide_score_total: exports_external.boolean().optional().nullable(),
  id: exports_external.number().optional(),
  points_possible: exports_external.number().optional().nullable(),
  read_only: exports_external.boolean().optional().nullable(),
  reusable: exports_external.boolean().optional().nullable(),
  title: exports_external.string().optional().nullable()
});
var listRubricsAccountsResponsesSchema = exports_external.object({
  200: rubricSchema
});
var getSingleRubricAccountsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    account_id: exports_external.string(),
    id: exports_external.string()
  }),
  query: exports_external.object({
    include: exports_external.union([exports_external.literal("assessments"), exports_external.literal("graded_assessments"), exports_external.literal("peer_assessments")]).optional(),
    style: exports_external.union([exports_external.literal("full"), exports_external.literal("comments_only")]).optional()
  }).optional(),
  url: exports_external.literal("/v1/accounts/{account_id}/rubrics/{id}")
});
var getSingleRubricAccountsResponsesSchema = exports_external.object({
  200: rubricSchema
});
var getSingleRubricAccountsResponseSchema = getSingleRubricAccountsResponsesSchema.shape["keyof GetSingleRubricAccountsResponses"];
var listScopesDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    account_id: exports_external.string()
  }),
  query: exports_external.object({
    group_by: exports_external.literal("resource_name").optional()
  }).optional(),
  url: exports_external.literal("/v1/accounts/{account_id}/scopes")
});
var listScopesResponsesSchema = exports_external.object({
  200: exports_external.array(scopeSchema)
});
var listScopesResponseSchema = listScopesResponsesSchema.shape["keyof ListScopesResponses"];
var selfRegisterUserDataSchema = exports_external.object({
  body: exports_external.object({
    "communication_channel[address]": exports_external.string().optional(),
    "communication_channel[type]": exports_external.string().optional(),
    "pseudonym[unique_id]": exports_external.string(),
    "user[birthdate]": exports_external.string().optional(),
    "user[locale]": exports_external.string().optional(),
    "user[name]": exports_external.string(),
    "user[short_name]": exports_external.string().optional(),
    "user[sortable_name]": exports_external.string().optional(),
    "user[terms_of_use]": exports_external.boolean(),
    "user[time_zone]": exports_external.string().optional()
  }),
  path: exports_external.object({
    account_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/accounts/{account_id}/self_registration")
});
var shareBrandconfigThemeDataSchema = exports_external.object({
  body: exports_external.object({
    "shared_brand_config[brand_config_md5]": exports_external.string(),
    "shared_brand_config[name]": exports_external.string()
  }),
  path: exports_external.object({
    account_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/accounts/{account_id}/shared_brand_configs")
});
var shareBrandconfigThemeResponsesSchema = exports_external.object({
  200: sharedBrandConfigSchema
});
var shareBrandconfigThemeResponseSchema = shareBrandconfigThemeResponsesSchema.shape["keyof ShareBrandconfigThemeResponses"];
var updateSharedThemeDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    account_id: exports_external.string(),
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/accounts/{account_id}/shared_brand_configs/{id}")
});
var updateSharedThemeResponsesSchema = exports_external.object({
  200: sharedBrandConfigSchema
});
var updateSharedThemeResponseSchema = updateSharedThemeResponsesSchema.shape["keyof UpdateSharedThemeResponses"];
var getSisImportErrorListSisImportErrorsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    account_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/accounts/{account_id}/sis_import_errors")
});
var getSisImportErrorListSisImportErrorsResponsesSchema = exports_external.object({
  200: exports_external.array(sisImportErrorSchema)
});
var getSisImportErrorListSisImportErrorsResponseSchema = getSisImportErrorListSisImportErrorsResponsesSchema.shape["keyof GetSisImportErrorListSisImportErrorsResponses"];
var getSisImportListDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    account_id: exports_external.string()
  }),
  query: exports_external.object({
    created_since: exports_external.string().optional()
  }).optional(),
  url: exports_external.literal("/v1/accounts/{account_id}/sis_imports")
});
var importSisDataDataSchema = exports_external.object({
  body: exports_external.object({
    add_sis_stickiness: exports_external.boolean().optional(),
    attachment: exports_external.string().optional(),
    batch_mode: exports_external.boolean().optional(),
    batch_mode_term_id: exports_external.string().optional(),
    change_threshold: exports_external.number().optional(),
    clear_sis_stickiness: exports_external.boolean().optional(),
    diffing_data_set_identifier: exports_external.string().optional(),
    diffing_drop_status: exports_external.union([exports_external.literal("deleted"), exports_external.literal("completed"), exports_external.literal("inactive")]).optional(),
    diffing_remaster_data_set: exports_external.boolean().optional(),
    extension: exports_external.string().optional(),
    import_type: exports_external.string().optional(),
    multi_term_batch_mode: exports_external.boolean().optional(),
    override_sis_stickiness: exports_external.boolean().optional(),
    skip_deletes: exports_external.boolean().optional()
  }).optional(),
  path: exports_external.object({
    account_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/accounts/{account_id}/sis_imports")
});
var abortAllPendingSisImportsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    account_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/accounts/{account_id}/sis_imports/abort_all_pending")
});
var abortAllPendingSisImportsResponsesSchema = exports_external.object({
  200: exports_external.boolean()
});
var abortAllPendingSisImportsResponseSchema = abortAllPendingSisImportsResponsesSchema.shape["keyof AbortAllPendingSisImportsResponses"];
var getSisImportStatusDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    account_id: exports_external.string(),
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/accounts/{account_id}/sis_imports/{id}")
});
var abortSisImportDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    account_id: exports_external.string(),
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/accounts/{account_id}/sis_imports/{id}/abort")
});
var getSisImportErrorListSisImportsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    account_id: exports_external.string(),
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/accounts/{account_id}/sis_imports/{id}/errors")
});
var getSisImportErrorListSisImportsResponsesSchema = exports_external.object({
  200: exports_external.array(sisImportErrorSchema)
});
var getSisImportErrorListSisImportsResponseSchema = getSisImportErrorListSisImportsResponsesSchema.shape["keyof GetSisImportErrorListSisImportsResponses"];
var restoreWorkflowStatesOfSisImportedItemsDataSchema = exports_external.object({
  body: exports_external.object({
    batch_mode: exports_external.boolean().optional(),
    unconclude_only: exports_external.boolean().optional(),
    undelete_only: exports_external.boolean().optional()
  }).optional(),
  path: exports_external.object({
    account_id: exports_external.string(),
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/accounts/{account_id}/sis_imports/{id}/restore_states")
});
var restoreWorkflowStatesOfSisImportedItemsResponsesSchema = exports_external.object({
  200: progressSchema
});
var restoreWorkflowStatesOfSisImportedItemsResponseSchema = restoreWorkflowStatesOfSisImportedItemsResponsesSchema.shape["keyof RestoreWorkflowStatesOfSisImportedItemsResponses"];
var showAccountAuthSettingsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    account_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/accounts/{account_id}/sso_settings")
});
var showAccountAuthSettingsResponsesSchema = exports_external.object({
  200: ssoSettingsSchema
});
var showAccountAuthSettingsResponseSchema = showAccountAuthSettingsResponsesSchema.shape["keyof ShowAccountAuthSettingsResponses"];
var updateAccountAuthSettingsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    account_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/accounts/{account_id}/sso_settings")
});
var updateAccountAuthSettingsResponsesSchema = exports_external.object({
  200: ssoSettingsSchema
});
var updateAccountAuthSettingsResponseSchema = updateAccountAuthSettingsResponsesSchema.shape["keyof UpdateAccountAuthSettingsResponses"];
var getSubAccountsOfAccountDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    account_id: exports_external.string()
  }),
  query: exports_external.object({
    recursive: exports_external.boolean().optional()
  }).optional(),
  url: exports_external.literal("/v1/accounts/{account_id}/sub_accounts")
});
var getSubAccountsOfAccountResponsesSchema = exports_external.object({
  200: exports_external.array(accountSchema)
});
var getSubAccountsOfAccountResponseSchema = getSubAccountsOfAccountResponsesSchema.shape["keyof GetSubAccountsOfAccountResponses"];
var createNewSubAccountDataSchema = exports_external.object({
  body: exports_external.object({
    "account[default_group_storage_quota_mb]": exports_external.number().optional(),
    "account[default_storage_quota_mb]": exports_external.number().optional(),
    "account[default_user_storage_quota_mb]": exports_external.number().optional(),
    "account[name]": exports_external.string(),
    "account[sis_account_id]": exports_external.string().optional()
  }),
  path: exports_external.object({
    account_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/accounts/{account_id}/sub_accounts")
});
var createNewSubAccountResponsesSchema = exports_external.object({
  200: accountSchema
});
var createNewSubAccountResponseSchema = createNewSubAccountResponsesSchema.shape["keyof CreateNewSubAccountResponses"];
var deleteSubAccountDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    account_id: exports_external.string(),
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/accounts/{account_id}/sub_accounts/{id}")
});
var deleteSubAccountResponsesSchema = exports_external.object({
  200: accountSchema
});
var deleteSubAccountResponseSchema = deleteSubAccountResponsesSchema.shape["keyof DeleteSubAccountResponses"];
var listEnrollmentTermsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    account_id: exports_external.string()
  }),
  query: exports_external.object({
    page: exports_external.string().optional(),
    per_page: exports_external.number().optional(),
    workflow_state: exports_external.array(exports_external.union([exports_external.literal("active"), exports_external.literal("deleted"), exports_external.literal("all")])).optional(),
    include: exports_external.array(exports_external.literal("overrides")).optional()
  }).optional(),
  url: exports_external.literal("/v1/accounts/{account_id}/terms")
});
var listEnrollmentTermsResponsesSchema = exports_external.object({
  200: exports_external.array(enrollmentTermSchema)
});
var listEnrollmentTermsResponseSchema = listEnrollmentTermsResponsesSchema.shape["keyof ListEnrollmentTermsResponses"];
var createEnrollmentTermDataSchema = exports_external.object({
  body: exports_external.object({
    "enrollment_term[end_at]": exports_external.string().optional(),
    "enrollment_term[name]": exports_external.string().optional(),
    "enrollment_term[overrides][enrollment_type][end_at]": exports_external.string().optional(),
    "enrollment_term[overrides][enrollment_type][start_at]": exports_external.string().optional(),
    "enrollment_term[sis_term_id]": exports_external.string().optional(),
    "enrollment_term[start_at]": exports_external.string().optional()
  }).optional(),
  path: exports_external.object({
    account_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/accounts/{account_id}/terms")
});
var createEnrollmentTermResponsesSchema = exports_external.object({
  200: enrollmentTermSchema
});
var createEnrollmentTermResponseSchema = createEnrollmentTermResponsesSchema.shape["keyof CreateEnrollmentTermResponses"];
var deleteEnrollmentTermDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    account_id: exports_external.string(),
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/accounts/{account_id}/terms/{id}")
});
var deleteEnrollmentTermResponsesSchema = exports_external.object({
  200: enrollmentTermSchema
});
var deleteEnrollmentTermResponseSchema = deleteEnrollmentTermResponsesSchema.shape["keyof DeleteEnrollmentTermResponses"];
var updateEnrollmentTermDataSchema = exports_external.object({
  body: exports_external.object({
    "enrollment_term[end_at]": exports_external.string().optional(),
    "enrollment_term[name]": exports_external.string().optional(),
    "enrollment_term[overrides][enrollment_type][end_at]": exports_external.string().optional(),
    "enrollment_term[overrides][enrollment_type][start_at]": exports_external.string().optional(),
    "enrollment_term[sis_term_id]": exports_external.string().optional(),
    "enrollment_term[start_at]": exports_external.string().optional()
  }).optional(),
  path: exports_external.object({
    account_id: exports_external.string(),
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/accounts/{account_id}/terms/{id}")
});
var updateEnrollmentTermResponsesSchema = exports_external.object({
  200: enrollmentTermSchema
});
var updateEnrollmentTermResponseSchema = updateEnrollmentTermResponsesSchema.shape["keyof UpdateEnrollmentTermResponses"];
var getTermsOfServiceDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    account_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/accounts/{account_id}/terms_of_service")
});
var getTermsOfServiceResponsesSchema = exports_external.object({
  200: termsOfServiceSchema
});
var getTermsOfServiceResponseSchema = getTermsOfServiceResponsesSchema.shape["keyof GetTermsOfServiceResponses"];
var listUsersInAccountDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    account_id: exports_external.string()
  }),
  query: exports_external.object({
    search_term: exports_external.string().optional(),
    sort: exports_external.union([exports_external.literal("username"), exports_external.literal("email"), exports_external.literal("sis_id"), exports_external.literal("last_login")]).optional(),
    order: exports_external.union([exports_external.literal("asc"), exports_external.literal("desc")]).optional(),
    page: exports_external.string().optional(),
    per_page: exports_external.number().optional()
  }).optional(),
  url: exports_external.literal("/v1/accounts/{account_id}/users")
});
var createUserDataSchema = exports_external.object({
  body: exports_external.object({
    "communication_channel[address]": exports_external.string().optional(),
    "communication_channel[confirmation_url]": exports_external.boolean().optional(),
    "communication_channel[skip_confirmation]": exports_external.boolean().optional(),
    "communication_channel[type]": exports_external.string().optional(),
    destination: exports_external.unknown().optional(),
    enable_sis_reactivation: exports_external.boolean().optional(),
    force_validations: exports_external.boolean().optional(),
    "pseudonym[authentication_provider_id]": exports_external.string().optional(),
    "pseudonym[force_self_registration]": exports_external.boolean().optional(),
    "pseudonym[integration_id]": exports_external.string().optional(),
    "pseudonym[password]": exports_external.string().optional(),
    "pseudonym[send_confirmation]": exports_external.boolean().optional(),
    "pseudonym[sis_user_id]": exports_external.string().optional(),
    "pseudonym[unique_id]": exports_external.string(),
    "user[birthdate]": exports_external.string().optional(),
    "user[locale]": exports_external.string().optional(),
    "user[name]": exports_external.string().optional(),
    "user[short_name]": exports_external.string().optional(),
    "user[skip_registration]": exports_external.boolean().optional(),
    "user[sortable_name]": exports_external.string().optional(),
    "user[terms_of_use]": exports_external.boolean().optional(),
    "user[time_zone]": exports_external.string().optional()
  }),
  path: exports_external.object({
    account_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/accounts/{account_id}/users")
});
var deleteUserFromRootAccountDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    account_id: exports_external.string(),
    user_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/accounts/{account_id}/users/{user_id}")
});
var getSingleAccountDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/accounts/{id}")
});
var getSingleAccountResponsesSchema = exports_external.object({
  200: accountSchema
});
var getSingleAccountResponseSchema = getSingleAccountResponsesSchema.shape["keyof GetSingleAccountResponses"];
var updateAccountDataSchema = exports_external.object({
  body: exports_external.object({
    "account[default_group_storage_quota_mb]": exports_external.number().optional(),
    "account[default_storage_quota_mb]": exports_external.number().optional(),
    "account[default_time_zone]": exports_external.string().optional(),
    "account[default_user_storage_quota_mb]": exports_external.number().optional(),
    "account[name]": exports_external.string().optional(),
    "account[services]": exports_external.unknown().optional(),
    "account[settings][lock_all_announcements][locked]": exports_external.boolean().optional(),
    "account[settings][lock_all_announcements][value]": exports_external.boolean().optional(),
    "account[settings][restrict_student_future_listing][locked]": exports_external.boolean().optional(),
    "account[settings][restrict_student_future_listing][value]": exports_external.boolean().optional(),
    "account[settings][restrict_student_future_view][locked]": exports_external.boolean().optional(),
    "account[settings][restrict_student_future_view][value]": exports_external.boolean().optional(),
    "account[settings][restrict_student_past_view][locked]": exports_external.boolean().optional(),
    "account[settings][restrict_student_past_view][value]": exports_external.boolean().optional(),
    "account[sis_account_id]": exports_external.string().optional()
  }).optional(),
  path: exports_external.object({
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/accounts/{id}")
});
var updateAccountResponsesSchema = exports_external.object({
  200: accountSchema
});
var updateAccountResponseSchema = updateAccountResponsesSchema.shape["keyof UpdateAccountResponses"];
var listAnnouncementsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.never().optional(),
  query: exports_external.object({
    context_codes: exports_external.array(exports_external.string()),
    start_date: exports_external.string().optional(),
    end_date: exports_external.string().optional(),
    active_only: exports_external.boolean().optional(),
    include: exports_external.array(exports_external.string()).optional(),
    page: exports_external.string().optional(),
    per_page: exports_external.number().optional()
  }),
  url: exports_external.literal("/v1/announcements")
});
var discussionTopicSchema = exports_external.object({
  allow_rating: exports_external.boolean().optional().nullable(),
  assignment_id: exports_external.number().optional().nullable(),
  attachments: exports_external.array(fileAttachmentSchema).optional().nullable(),
  delayed_post_at: exports_external.string().optional().nullable(),
  discussion_subentry_count: exports_external.number().optional().nullable(),
  discussion_type: exports_external.string().optional().nullable(),
  group_category_id: exports_external.number().optional().nullable(),
  group_topic_children: exports_external.array(exports_external.record(exports_external.unknown())).optional().nullable(),
  html_url: exports_external.string().optional().nullable(),
  id: exports_external.number().optional(),
  last_reply_at: exports_external.string().optional().nullable(),
  lock_at: exports_external.string().optional().nullable(),
  lock_explanation: exports_external.string().optional().nullable(),
  lock_info: lockInfoSchema.optional(),
  locked: exports_external.boolean().optional().nullable(),
  locked_for_user: exports_external.boolean().optional().nullable(),
  message: exports_external.string().optional().nullable(),
  only_graders_can_rate: exports_external.boolean().optional().nullable(),
  permissions: exports_external.record(exports_external.unknown()).optional().nullable(),
  pinned: exports_external.boolean().optional().nullable(),
  podcast_url: exports_external.string().optional().nullable(),
  posted_at: exports_external.string().optional().nullable(),
  published: exports_external.boolean().optional().nullable(),
  read_state: exports_external.string().optional().nullable(),
  require_initial_post: exports_external.boolean().optional().nullable(),
  root_topic_id: exports_external.number().optional().nullable(),
  sort_by_rating: exports_external.boolean().optional().nullable(),
  subscribed: exports_external.boolean().optional().nullable(),
  subscription_hold: exports_external.string().optional().nullable(),
  title: exports_external.string().optional().nullable(),
  topic_children: exports_external.array(exports_external.number()).optional().nullable(),
  unread_count: exports_external.number().optional().nullable(),
  user_can_see_posts: exports_external.boolean().optional().nullable(),
  user_name: exports_external.string().optional().nullable()
});
var listAnnouncementsResponsesSchema = exports_external.object({
  200: exports_external.array(discussionTopicSchema)
});
var listAppointmentGroupsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.never().optional(),
  query: exports_external.object({
    scope: exports_external.union([exports_external.literal("reservable"), exports_external.literal("manageable")]).optional(),
    context_codes: exports_external.array(exports_external.string()).optional(),
    include_past_appointments: exports_external.boolean().optional(),
    include: exports_external.array(exports_external.union([exports_external.literal("appointments"), exports_external.literal("child_events"), exports_external.literal("participant_count"), exports_external.literal("reserved_times"), exports_external.literal("all_context_codes")])).optional(),
    page: exports_external.string().optional(),
    per_page: exports_external.number().optional()
  }).optional(),
  url: exports_external.literal("/v1/appointment_groups")
});
var listAppointmentGroupsResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var createAppointmentGroupDataSchema = exports_external.object({
  body: exports_external.object({
    "appointment_group[context_codes]": exports_external.array(exports_external.string()),
    "appointment_group[description]": exports_external.string().optional(),
    "appointment_group[location_address]": exports_external.string().optional(),
    "appointment_group[location_name]": exports_external.string().optional(),
    "appointment_group[max_appointments_per_participant]": exports_external.number().optional(),
    "appointment_group[min_appointments_per_participant]": exports_external.number().optional(),
    "appointment_group[new_appointments][X]": exports_external.array(exports_external.string()).optional(),
    "appointment_group[participant_visibility]": exports_external.union([exports_external.literal("private"), exports_external.literal("protected")]).optional(),
    "appointment_group[participants_per_appointment]": exports_external.number().optional(),
    "appointment_group[publish]": exports_external.boolean().optional(),
    "appointment_group[sub_context_codes]": exports_external.array(exports_external.string()).optional(),
    "appointment_group[title]": exports_external.string()
  }),
  path: exports_external.never().optional(),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/appointment_groups")
});
var createAppointmentGroupResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var getNextAppointmentDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.never().optional(),
  query: exports_external.object({
    appointment_group_ids: exports_external.array(exports_external.string()).optional()
  }).optional(),
  url: exports_external.literal("/v1/appointment_groups/next_appointment")
});
var getNextAppointmentResponsesSchema = exports_external.object({
  200: exports_external.array(calendarEventSchema)
});
var getNextAppointmentResponseSchema = getNextAppointmentResponsesSchema.shape["keyof GetNextAppointmentResponses"];
var deleteAppointmentGroupDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    id: exports_external.string()
  }),
  query: exports_external.object({
    cancel_reason: exports_external.string().optional()
  }).optional(),
  url: exports_external.literal("/v1/appointment_groups/{id}")
});
var deleteAppointmentGroupResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var getSingleAppointmentGroupDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    id: exports_external.string()
  }),
  query: exports_external.object({
    include: exports_external.array(exports_external.union([exports_external.literal("child_events"), exports_external.literal("appointments"), exports_external.literal("all_context_codes")])).optional()
  }).optional(),
  url: exports_external.literal("/v1/appointment_groups/{id}")
});
var getSingleAppointmentGroupResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var updateAppointmentGroupDataSchema = exports_external.object({
  body: exports_external.object({
    "appointment_group[context_codes]": exports_external.array(exports_external.string()),
    "appointment_group[description]": exports_external.string().optional(),
    "appointment_group[location_address]": exports_external.string().optional(),
    "appointment_group[location_name]": exports_external.string().optional(),
    "appointment_group[max_appointments_per_participant]": exports_external.number().optional(),
    "appointment_group[min_appointments_per_participant]": exports_external.number().optional(),
    "appointment_group[new_appointments][X]": exports_external.array(exports_external.string()).optional(),
    "appointment_group[participant_visibility]": exports_external.union([exports_external.literal("private"), exports_external.literal("protected")]).optional(),
    "appointment_group[participants_per_appointment]": exports_external.number().optional(),
    "appointment_group[publish]": exports_external.boolean().optional(),
    "appointment_group[sub_context_codes]": exports_external.array(exports_external.string()).optional(),
    "appointment_group[title]": exports_external.string().optional()
  }),
  path: exports_external.object({
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/appointment_groups/{id}")
});
var updateAppointmentGroupResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var listStudentGroupParticipantsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    id: exports_external.string()
  }),
  query: exports_external.object({
    registration_status: exports_external.union([exports_external.literal("all"), exports_external.literal("registered")]).optional(),
    page: exports_external.string().optional(),
    per_page: exports_external.number().optional()
  }).optional(),
  url: exports_external.literal("/v1/appointment_groups/{id}/groups")
});
var listStudentGroupParticipantsResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var listUserParticipantsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    id: exports_external.string()
  }),
  query: exports_external.object({
    registration_status: exports_external.union([exports_external.literal("all"), exports_external.literal("registered")]).optional(),
    page: exports_external.string().optional(),
    per_page: exports_external.number().optional()
  }).optional(),
  url: exports_external.literal("/v1/appointment_groups/{id}/users")
});
var listUserParticipantsResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var queryByAccountDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    account_id: exports_external.string()
  }),
  query: exports_external.object({
    start_time: exports_external.string().optional(),
    end_time: exports_external.string().optional()
  }).optional(),
  url: exports_external.literal("/v1/audit/authentication/accounts/{account_id}")
});
var queryByAccountResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var queryByLoginDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    login_id: exports_external.string()
  }),
  query: exports_external.object({
    start_time: exports_external.string().optional(),
    end_time: exports_external.string().optional()
  }).optional(),
  url: exports_external.literal("/v1/audit/authentication/logins/{login_id}")
});
var queryByLoginResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var queryByUserDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    user_id: exports_external.string()
  }),
  query: exports_external.object({
    start_time: exports_external.string().optional(),
    end_time: exports_external.string().optional()
  }).optional(),
  url: exports_external.literal("/v1/audit/authentication/users/{user_id}")
});
var queryByUserResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var queryByCourseDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string()
  }),
  query: exports_external.object({
    start_time: exports_external.string().optional(),
    end_time: exports_external.string().optional()
  }).optional(),
  url: exports_external.literal("/v1/audit/course/courses/{course_id}")
});
var courseEventSchema = exports_external.object({
  created_at: exports_external.string().optional().nullable(),
  event_data: exports_external.string().optional().nullable(),
  event_source: exports_external.string().optional().nullable(),
  event_type: exports_external.string().optional().nullable(),
  id: exports_external.string().optional(),
  links: courseEventLinkSchema.optional()
});
var queryByCourseResponsesSchema = exports_external.object({
  200: exports_external.array(courseEventSchema)
});
var queryByAssignmentDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    assignment_id: exports_external.string()
  }),
  query: exports_external.object({
    start_time: exports_external.string().optional(),
    end_time: exports_external.string().optional()
  }).optional(),
  url: exports_external.literal("/v1/audit/grade_change/assignments/{assignment_id}")
});
var gradeChangeEventSchema = exports_external.object({
  created_at: exports_external.string().optional().nullable(),
  event_type: exports_external.string().optional().nullable(),
  excused_after: exports_external.boolean().optional().nullable(),
  excused_before: exports_external.boolean().optional().nullable(),
  grade_after: exports_external.string().optional().nullable(),
  grade_before: exports_external.string().optional().nullable(),
  graded_anonymously: exports_external.boolean().optional().nullable(),
  id: exports_external.string().optional(),
  links: gradeChangeEventLinksSchema.optional(),
  request_id: exports_external.string().optional().nullable(),
  version_number: exports_external.string().optional().nullable()
});
var queryByAssignmentResponsesSchema = exports_external.object({
  200: exports_external.array(gradeChangeEventSchema)
});
var queryByCourseGradeChangeDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string()
  }),
  query: exports_external.object({
    start_time: exports_external.string().optional(),
    end_time: exports_external.string().optional()
  }).optional(),
  url: exports_external.literal("/v1/audit/grade_change/courses/{course_id}")
});
var queryByCourseGradeChangeResponsesSchema = exports_external.object({
  200: exports_external.array(gradeChangeEventSchema)
});
var queryByCourseGradeChangeResponseSchema = queryByCourseGradeChangeResponsesSchema.shape["keyof QueryByCourseGradeChangeResponses"];
var queryByGraderDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    grader_id: exports_external.string()
  }),
  query: exports_external.object({
    start_time: exports_external.string().optional(),
    end_time: exports_external.string().optional()
  }).optional(),
  url: exports_external.literal("/v1/audit/grade_change/graders/{grader_id}")
});
var queryByGraderResponsesSchema = exports_external.object({
  200: exports_external.array(gradeChangeEventSchema)
});
var queryByGraderResponseSchema = queryByGraderResponsesSchema.shape["keyof QueryByGraderResponses"];
var queryByStudentDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    student_id: exports_external.string()
  }),
  query: exports_external.object({
    start_time: exports_external.string().optional(),
    end_time: exports_external.string().optional()
  }).optional(),
  url: exports_external.literal("/v1/audit/grade_change/students/{student_id}")
});
var queryByStudentResponsesSchema = exports_external.object({
  200: exports_external.array(gradeChangeEventSchema)
});
var queryByStudentResponseSchema = queryByStudentResponsesSchema.shape["keyof QueryByStudentResponses"];
var getBrandConfigVariablesThatShouldBeUsedForThisDomainDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.never().optional(),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/brand_variables")
});
var getBrandConfigVariablesThatShouldBeUsedForThisDomainResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var listCalendarEventsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.never().optional(),
  query: exports_external.object({
    type: exports_external.union([exports_external.literal("event"), exports_external.literal("assignment")]).optional(),
    start_date: exports_external.string().optional(),
    end_date: exports_external.string().optional(),
    undated: exports_external.boolean().optional(),
    all_events: exports_external.boolean().optional(),
    context_codes: exports_external.array(exports_external.string()).optional(),
    excludes: exports_external.array(exports_external.array(exports_external.record(exports_external.unknown()))).optional(),
    page: exports_external.string().optional(),
    per_page: exports_external.number().optional()
  }).optional(),
  url: exports_external.literal("/v1/calendar_events")
});
var listCalendarEventsResponsesSchema = exports_external.object({
  200: exports_external.array(calendarEventSchema)
});
var listCalendarEventsResponseSchema = listCalendarEventsResponsesSchema.shape["keyof ListCalendarEventsResponses"];
var createCalendarEventDataSchema = exports_external.object({
  body: exports_external.object({
    "calendar_event[all_day]": exports_external.boolean().optional(),
    "calendar_event[child_event_data][X][context_code]": exports_external.string().optional(),
    "calendar_event[child_event_data][X][end_at]": exports_external.string().optional(),
    "calendar_event[child_event_data][X][start_at]": exports_external.string().optional(),
    "calendar_event[context_code]": exports_external.string(),
    "calendar_event[description]": exports_external.string().optional(),
    "calendar_event[duplicate][append_iterator]": exports_external.boolean().optional(),
    "calendar_event[duplicate][count]": exports_external.number().optional(),
    "calendar_event[duplicate][frequency]": exports_external.union([exports_external.literal("daily"), exports_external.literal("weekly"), exports_external.literal("monthly")]).optional(),
    "calendar_event[duplicate][interval]": exports_external.number().optional(),
    "calendar_event[end_at]": exports_external.string().optional(),
    "calendar_event[location_address]": exports_external.string().optional(),
    "calendar_event[location_name]": exports_external.string().optional(),
    "calendar_event[start_at]": exports_external.string().optional(),
    "calendar_event[time_zone_edited]": exports_external.string().optional(),
    "calendar_event[title]": exports_external.string().optional()
  }),
  path: exports_external.never().optional(),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/calendar_events")
});
var createCalendarEventResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var deleteCalendarEventDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    id: exports_external.string()
  }),
  query: exports_external.object({
    cancel_reason: exports_external.string().optional()
  }).optional(),
  url: exports_external.literal("/v1/calendar_events/{id}")
});
var deleteCalendarEventResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var getSingleCalendarEventOrAssignmentDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/calendar_events/{id}")
});
var getSingleCalendarEventOrAssignmentResponsesSchema = exports_external.object({
  200: calendarEventSchema
});
var getSingleCalendarEventOrAssignmentResponseSchema = getSingleCalendarEventOrAssignmentResponsesSchema.shape["keyof GetSingleCalendarEventOrAssignmentResponses"];
var updateCalendarEventDataSchema = exports_external.object({
  body: exports_external.object({
    "calendar_event[all_day]": exports_external.boolean().optional(),
    "calendar_event[child_event_data][X][context_code]": exports_external.string().optional(),
    "calendar_event[child_event_data][X][end_at]": exports_external.string().optional(),
    "calendar_event[child_event_data][X][start_at]": exports_external.string().optional(),
    "calendar_event[context_code]": exports_external.string().optional(),
    "calendar_event[description]": exports_external.string().optional(),
    "calendar_event[end_at]": exports_external.string().optional(),
    "calendar_event[location_address]": exports_external.string().optional(),
    "calendar_event[location_name]": exports_external.string().optional(),
    "calendar_event[start_at]": exports_external.string().optional(),
    "calendar_event[time_zone_edited]": exports_external.string().optional(),
    "calendar_event[title]": exports_external.string().optional()
  }).optional(),
  path: exports_external.object({
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/calendar_events/{id}")
});
var updateCalendarEventResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var reserveTimeSlotDataSchema = exports_external.object({
  body: exports_external.object({
    cancel_existing: exports_external.boolean().optional(),
    comments: exports_external.string().optional(),
    participant_id: exports_external.string().optional()
  }).optional(),
  path: exports_external.object({
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/calendar_events/{id}/reservations")
});
var reserveTimeSlotResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var reserveTimeSlotParticipantIdDataSchema = exports_external.object({
  body: exports_external.object({
    cancel_existing: exports_external.boolean().optional(),
    comments: exports_external.string().optional()
  }).optional(),
  path: exports_external.object({
    id: exports_external.string(),
    participant_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/calendar_events/{id}/reservations/{participant_id}")
});
var reserveTimeSlotParticipantIdResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var listMembersOfCollaborationDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    id: exports_external.string()
  }),
  query: exports_external.object({
    include: exports_external.array(exports_external.union([exports_external.literal("collaborator_lti_id"), exports_external.literal("avatar_image_url")])).optional(),
    page: exports_external.string().optional(),
    per_page: exports_external.number().optional()
  }).optional(),
  url: exports_external.literal("/v1/collaborations/{id}/members")
});
var listMembersOfCollaborationResponsesSchema = exports_external.object({
  200: exports_external.array(collaboratorSchema)
});
var listMembersOfCollaborationResponseSchema = listMembersOfCollaborationResponsesSchema.shape["keyof ListMembersOfCollaborationResponses"];
var listOfCommmessagesForUserDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.never().optional(),
  query: exports_external.object({
    user_id: exports_external.string(),
    start_time: exports_external.string().optional(),
    end_time: exports_external.string().optional(),
    page: exports_external.string().optional(),
    per_page: exports_external.number().optional()
  }),
  url: exports_external.literal("/v1/comm_messages")
});
var listOfCommmessagesForUserResponsesSchema = exports_external.object({
  200: exports_external.array(commMessageSchema)
});
var listOfCommmessagesForUserResponseSchema = listOfCommmessagesForUserResponsesSchema.shape["keyof ListOfCommmessagesForUserResponses"];
var listConversationsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.never().optional(),
  query: exports_external.object({
    scope: exports_external.union([exports_external.literal("unread"), exports_external.literal("starred"), exports_external.literal("archived")]).optional(),
    filter: exports_external.array(exports_external.string()).optional(),
    filter_mode: exports_external.union([exports_external.literal("and"), exports_external.literal("or"), exports_external.literal("default or")]).optional(),
    interleave_submissions: exports_external.boolean().optional(),
    include_all_conversation_ids: exports_external.boolean().optional(),
    include: exports_external.array(exports_external.literal("participant_avatars")).optional(),
    page: exports_external.string().optional(),
    per_page: exports_external.number().optional()
  }).optional(),
  url: exports_external.literal("/v1/conversations")
});
var conversationSchema = exports_external.object({
  audience: exports_external.array(exports_external.number()).optional().nullable(),
  audience_contexts: exports_external.array(exports_external.string()).optional().nullable(),
  avatar_url: exports_external.string().optional().nullable(),
  context_name: exports_external.string().optional().nullable(),
  id: exports_external.number().optional(),
  last_message: exports_external.string().optional().nullable(),
  message_count: exports_external.number().optional().nullable(),
  participants: exports_external.array(conversationParticipantSchema).optional().nullable(),
  private: exports_external.boolean().optional().nullable(),
  properties: exports_external.array(exports_external.string()).optional().nullable(),
  starred: exports_external.boolean().optional().nullable(),
  start_at: exports_external.string().optional().nullable(),
  subject: exports_external.string().optional().nullable(),
  subscribed: exports_external.boolean().optional().nullable(),
  visible: exports_external.boolean().optional().nullable(),
  workflow_state: exports_external.string().optional().nullable()
});
var listConversationsResponsesSchema = exports_external.object({
  200: exports_external.array(conversationSchema)
});
var createConversationDataSchema = exports_external.object({
  body: exports_external.object({
    attachment_ids: exports_external.array(exports_external.string()).optional(),
    body: exports_external.string(),
    context_code: exports_external.string().optional(),
    filter: exports_external.array(exports_external.string()).optional(),
    filter_mode: exports_external.union([exports_external.literal("and"), exports_external.literal("or"), exports_external.literal("default or")]).optional(),
    group_conversation: exports_external.boolean().optional(),
    media_comment_id: exports_external.string().optional(),
    media_comment_type: exports_external.union([exports_external.literal("audio"), exports_external.literal("video")]).optional(),
    mode: exports_external.union([exports_external.literal("sync"), exports_external.literal("async")]).optional(),
    recipients: exports_external.array(exports_external.string()),
    scope: exports_external.union([exports_external.literal("unread"), exports_external.literal("starred"), exports_external.literal("archived")]).optional(),
    subject: exports_external.string().optional(),
    user_note: exports_external.boolean().optional()
  }),
  path: exports_external.never().optional(),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/conversations")
});
var createConversationResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var batchUpdateConversationsDataSchema = exports_external.object({
  body: exports_external.object({
    conversation_ids: exports_external.array(exports_external.string()),
    event: exports_external.union([exports_external.literal("mark_as_read"), exports_external.literal("mark_as_unread"), exports_external.literal("star"), exports_external.literal("unstar"), exports_external.literal("archive"), exports_external.literal("destroy")])
  }),
  path: exports_external.never().optional(),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/conversations")
});
var batchUpdateConversationsResponsesSchema = exports_external.object({
  200: progressSchema
});
var batchUpdateConversationsResponseSchema = batchUpdateConversationsResponsesSchema.shape["keyof BatchUpdateConversationsResponses"];
var getRunningBatchesDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.never().optional(),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/conversations/batches")
});
var getRunningBatchesResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var findRecipientsConversationsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.never().optional(),
  query: exports_external.object({
    search: exports_external.string().optional(),
    context: exports_external.string().optional(),
    exclude: exports_external.array(exports_external.string()).optional(),
    type: exports_external.union([exports_external.literal("user"), exports_external.literal("context")]).optional(),
    user_id: exports_external.number().optional(),
    from_conversation_id: exports_external.number().optional(),
    permissions: exports_external.array(exports_external.string()).optional()
  }).optional(),
  url: exports_external.literal("/v1/conversations/find_recipients")
});
var findRecipientsConversationsResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var markAllAsReadDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.never().optional(),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/conversations/mark_all_as_read")
});
var markAllAsReadResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var unreadCountDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.never().optional(),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/conversations/unread_count")
});
var unreadCountResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var deleteConversationDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/conversations/{id}")
});
var deleteConversationResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var getSingleConversationDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    id: exports_external.string()
  }),
  query: exports_external.object({
    interleave_submissions: exports_external.boolean().optional(),
    scope: exports_external.union([exports_external.literal("unread"), exports_external.literal("starred"), exports_external.literal("archived")]).optional(),
    filter: exports_external.array(exports_external.string()).optional(),
    filter_mode: exports_external.union([exports_external.literal("and"), exports_external.literal("or"), exports_external.literal("default or")]).optional(),
    auto_mark_as_read: exports_external.boolean().optional()
  }).optional(),
  url: exports_external.literal("/v1/conversations/{id}")
});
var getSingleConversationResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var editConversationDataSchema = exports_external.object({
  body: exports_external.object({
    "conversation[starred]": exports_external.boolean().optional(),
    "conversation[subscribed]": exports_external.boolean().optional(),
    "conversation[workflow_state]": exports_external.union([exports_external.literal("read"), exports_external.literal("unread"), exports_external.literal("archived")]).optional(),
    filter: exports_external.array(exports_external.string()).optional(),
    filter_mode: exports_external.union([exports_external.literal("and"), exports_external.literal("or"), exports_external.literal("default or")]).optional(),
    scope: exports_external.union([exports_external.literal("unread"), exports_external.literal("starred"), exports_external.literal("archived")]).optional()
  }).optional(),
  path: exports_external.object({
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/conversations/{id}")
});
var editConversationResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var addMessageDataSchema = exports_external.object({
  body: exports_external.object({
    attachment_ids: exports_external.array(exports_external.string()).optional(),
    body: exports_external.string(),
    included_messages: exports_external.array(exports_external.string()).optional(),
    media_comment_id: exports_external.string().optional(),
    media_comment_type: exports_external.union([exports_external.literal("audio"), exports_external.literal("video")]).optional(),
    recipients: exports_external.array(exports_external.string()).optional(),
    user_note: exports_external.boolean().optional()
  }),
  path: exports_external.object({
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/conversations/{id}/add_message")
});
var addMessageResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var addRecipientsDataSchema = exports_external.object({
  body: exports_external.object({
    recipients: exports_external.array(exports_external.string())
  }),
  path: exports_external.object({
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/conversations/{id}/add_recipients")
});
var addRecipientsResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var deleteMessageDataSchema = exports_external.object({
  body: exports_external.object({
    remove: exports_external.array(exports_external.string())
  }),
  path: exports_external.object({
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/conversations/{id}/remove_messages")
});
var deleteMessageResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var listAccountsForCourseAdminsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.never().optional(),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/course_accounts")
});
var listAccountsForCourseAdminsResponsesSchema = exports_external.object({
  200: exports_external.array(accountSchema)
});
var listAccountsForCourseAdminsResponseSchema = listAccountsForCourseAdminsResponsesSchema.shape["keyof ListAccountsForCourseAdminsResponses"];
var listYourCoursesDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.never().optional(),
  query: exports_external.object({
    page: exports_external.string().optional(),
    per_page: exports_external.number().optional(),
    enrollment_type: exports_external.union([exports_external.literal("teacher"), exports_external.literal("student"), exports_external.literal("ta"), exports_external.literal("observer"), exports_external.literal("designer")]).optional(),
    enrollment_role: exports_external.string().optional(),
    enrollment_role_id: exports_external.number().optional(),
    enrollment_state: exports_external.union([exports_external.literal("active"), exports_external.literal("invited_or_pending"), exports_external.literal("completed")]).optional(),
    exclude_blueprint_courses: exports_external.boolean().optional(),
    include: exports_external.array(exports_external.union([exports_external.literal("needs_grading_count"), exports_external.literal("syllabus_body"), exports_external.literal("public_description"), exports_external.literal("total_scores"), exports_external.literal("current_grading_period_scores"), exports_external.literal("term"), exports_external.literal("account"), exports_external.literal("course_progress"), exports_external.literal("sections"), exports_external.literal("storage_quota_used_mb"), exports_external.literal("total_students"), exports_external.literal("passback_status"), exports_external.literal("favorites"), exports_external.literal("teachers"), exports_external.literal("observed_users"), exports_external.literal("course_image")])).optional(),
    state: exports_external.array(exports_external.union([exports_external.literal("unpublished"), exports_external.literal("available"), exports_external.literal("completed"), exports_external.literal("deleted")])).optional()
  }).optional(),
  url: exports_external.literal("/v1/courses")
});
var courseActivityStreamDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string()
  }),
  query: exports_external.object({
    page: exports_external.string().optional(),
    per_page: exports_external.number().optional()
  }).optional(),
  url: exports_external.literal("/v1/courses/{course_id}/activity_stream")
});
var courseActivityStreamResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var courseActivityStreamSummaryDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/activity_stream/summary")
});
var courseActivityStreamSummaryResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var getCourseLevelParticipationDataDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/analytics/activity")
});
var getCourseLevelParticipationDataResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var getCourseLevelAssignmentDataDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string()
  }),
  query: exports_external.object({
    async: exports_external.boolean().optional()
  }).optional(),
  url: exports_external.literal("/v1/courses/{course_id}/analytics/assignments")
});
var getCourseLevelAssignmentDataResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var getCourseLevelStudentSummaryDataDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string()
  }),
  query: exports_external.object({
    sort_column: exports_external.union([exports_external.literal("name"), exports_external.literal("name_descending"), exports_external.literal("score"), exports_external.literal("score_descending"), exports_external.literal("participations"), exports_external.literal("participations_descending"), exports_external.literal("page_views"), exports_external.literal("page_views_descending")]).optional(),
    student_id: exports_external.string().optional()
  }).optional(),
  url: exports_external.literal("/v1/courses/{course_id}/analytics/student_summaries")
});
var getCourseLevelStudentSummaryDataResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var getUserInACourseLevelParticipationDataDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string(),
    student_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/analytics/users/{student_id}/activity")
});
var getUserInACourseLevelParticipationDataResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var getUserInACourseLevelAssignmentDataDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string(),
    student_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/analytics/users/{student_id}/assignments")
});
var getUserInACourseLevelMessagingDataDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string(),
    student_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/analytics/users/{student_id}/communication")
});
var getUserInACourseLevelMessagingDataResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var listAssignmentGroupsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string()
  }),
  query: exports_external.object({
    include: exports_external.array(exports_external.union([exports_external.literal("assignments"), exports_external.literal("discussion_topic"), exports_external.literal("all_dates"), exports_external.literal("assignment_visibility"), exports_external.literal("overrides"), exports_external.literal("submission")])).optional(),
    exclude_assignment_submission_types: exports_external.array(exports_external.union([exports_external.literal("online_quiz"), exports_external.literal("discussion_topic"), exports_external.literal("wiki_page"), exports_external.literal("external_tool")])).optional(),
    override_assignment_dates: exports_external.boolean().optional(),
    grading_period_id: exports_external.number().optional(),
    scope_assignments_to_student: exports_external.boolean().optional(),
    page: exports_external.string().optional(),
    per_page: exports_external.number().optional()
  }).optional(),
  url: exports_external.literal("/v1/courses/{course_id}/assignment_groups")
});
var assignmentGroupSchema = exports_external.object({
  assignments: exports_external.array(exports_external.number()).optional().nullable(),
  group_weight: exports_external.number().optional().nullable(),
  id: exports_external.number().optional().nullable(),
  integration_data: exports_external.record(exports_external.unknown()).optional().nullable(),
  name: exports_external.string().optional().nullable(),
  position: exports_external.number().optional().nullable(),
  rules: gradingRulesSchema.optional(),
  sis_source_id: exports_external.string().optional().nullable()
});
var listAssignmentGroupsResponsesSchema = exports_external.object({
  200: exports_external.array(assignmentGroupSchema)
});
var createAssignmentGroupDataSchema = exports_external.object({
  body: exports_external.object({
    group_weight: exports_external.number().optional(),
    integration_data: exports_external.record(exports_external.unknown()).optional(),
    name: exports_external.string().optional(),
    position: exports_external.number().optional(),
    rules: exports_external.string().optional(),
    sis_source_id: exports_external.string().optional()
  }).optional(),
  path: exports_external.object({
    course_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/assignment_groups")
});
var createAssignmentGroupResponsesSchema = exports_external.object({
  200: assignmentGroupSchema
});
var createAssignmentGroupResponseSchema = createAssignmentGroupResponsesSchema.shape["keyof CreateAssignmentGroupResponses"];
var destroyAssignmentGroupDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string(),
    assignment_group_id: exports_external.string()
  }),
  query: exports_external.object({
    move_assignments_to: exports_external.number().optional()
  }).optional(),
  url: exports_external.literal("/v1/courses/{course_id}/assignment_groups/{assignment_group_id}")
});
var destroyAssignmentGroupResponsesSchema = exports_external.object({
  200: assignmentGroupSchema
});
var destroyAssignmentGroupResponseSchema = destroyAssignmentGroupResponsesSchema.shape["keyof DestroyAssignmentGroupResponses"];
var getAssignmentGroupDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string(),
    assignment_group_id: exports_external.string()
  }),
  query: exports_external.object({
    include: exports_external.array(exports_external.union([exports_external.literal("assignments"), exports_external.literal("discussion_topic"), exports_external.literal("assignment_visibility"), exports_external.literal("submission")])).optional(),
    override_assignment_dates: exports_external.boolean().optional(),
    grading_period_id: exports_external.number().optional()
  }).optional(),
  url: exports_external.literal("/v1/courses/{course_id}/assignment_groups/{assignment_group_id}")
});
var getAssignmentGroupResponsesSchema = exports_external.object({
  200: assignmentGroupSchema
});
var getAssignmentGroupResponseSchema = getAssignmentGroupResponsesSchema.shape["keyof GetAssignmentGroupResponses"];
var editAssignmentGroupDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string(),
    assignment_group_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/assignment_groups/{assignment_group_id}")
});
var editAssignmentGroupResponsesSchema = exports_external.object({
  200: assignmentGroupSchema
});
var editAssignmentGroupResponseSchema = editAssignmentGroupResponsesSchema.shape["keyof EditAssignmentGroupResponses"];
var listAssignmentsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string()
  }),
  query: exports_external.object({
    include: exports_external.array(exports_external.union([exports_external.literal("submission"), exports_external.literal("assignment_visibility"), exports_external.literal("all_dates"), exports_external.literal("overrides"), exports_external.literal("observed_users")])).optional(),
    search_term: exports_external.string().optional(),
    override_assignment_dates: exports_external.boolean().optional(),
    needs_grading_count_by_section: exports_external.boolean().optional(),
    bucket: exports_external.union([exports_external.literal("past"), exports_external.literal("overdue"), exports_external.literal("undated"), exports_external.literal("ungraded"), exports_external.literal("unsubmitted"), exports_external.literal("upcoming"), exports_external.literal("future")]).optional(),
    assignment_ids: exports_external.array(exports_external.string()).optional(),
    order_by: exports_external.union([exports_external.literal("position"), exports_external.literal("name")]).optional(),
    page: exports_external.string().optional(),
    per_page: exports_external.number().optional()
  }).optional(),
  url: exports_external.literal("/v1/courses/{course_id}/assignments")
});
var createAssignmentDataSchema = exports_external.object({
  body: exports_external.object({
    "assignment[allowed_extensions]": exports_external.array(exports_external.string()).optional(),
    "assignment[assignment_group_id]": exports_external.number().optional(),
    "assignment[assignment_overrides]": exports_external.array(assignmentOverrideSchema).optional(),
    "assignment[automatic_peer_reviews]": exports_external.boolean().optional(),
    "assignment[description]": exports_external.string().optional(),
    "assignment[due_at]": exports_external.string().optional(),
    "assignment[external_tool_tag_attributes]": exports_external.string().optional(),
    "assignment[grade_group_students_individually]": exports_external.number().optional(),
    "assignment[grading_standard_id]": exports_external.number().optional(),
    "assignment[grading_type]": exports_external.union([exports_external.literal("pass_fail"), exports_external.literal("percent"), exports_external.literal("letter_grade"), exports_external.literal("gpa_scale"), exports_external.literal("points")]).optional(),
    "assignment[group_category_id]": exports_external.number().optional(),
    "assignment[integration_data]": exports_external.string().optional(),
    "assignment[integration_id]": exports_external.string().optional(),
    "assignment[lock_at]": exports_external.string().optional(),
    "assignment[moderated_grading]": exports_external.boolean().optional(),
    "assignment[muted]": exports_external.boolean().optional(),
    "assignment[name]": exports_external.string(),
    "assignment[notify_of_update]": exports_external.boolean().optional(),
    "assignment[omit_from_final_grade]": exports_external.boolean().optional(),
    "assignment[only_visible_to_overrides]": exports_external.boolean().optional(),
    "assignment[peer_reviews]": exports_external.boolean().optional(),
    "assignment[points_possible]": exports_external.number().optional(),
    "assignment[position]": exports_external.number().optional(),
    "assignment[published]": exports_external.boolean().optional(),
    "assignment[quiz_lti]": exports_external.boolean().optional(),
    "assignment[submission_types]": exports_external.array(exports_external.union([exports_external.literal("online_quiz"), exports_external.literal("none"), exports_external.literal("on_paper"), exports_external.literal("discussion_topic"), exports_external.literal("external_tool"), exports_external.literal("online_upload"), exports_external.literal("online_text_entry"), exports_external.literal("online_url"), exports_external.literal("media_recording")])).optional(),
    "assignment[turnitin_enabled]": exports_external.boolean().optional(),
    "assignment[turnitin_settings]": exports_external.string().optional(),
    "assignment[unlock_at]": exports_external.string().optional(),
    "assignment[vericite_enabled]": exports_external.boolean().optional()
  }),
  path: exports_external.object({
    course_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/assignments")
});
var listMultipleAssignmentsGradeableStudentsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string()
  }),
  query: exports_external.object({
    assignment_ids: exports_external.array(exports_external.string()).optional(),
    page: exports_external.string().optional(),
    per_page: exports_external.number().optional()
  }).optional(),
  url: exports_external.literal("/v1/courses/{course_id}/assignments/gradeable_students")
});
var listMultipleAssignmentsGradeableStudentsResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var batchRetrieveOverridesInCourseDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string()
  }),
  query: exports_external.object({
    "assignment_overrides[id]": exports_external.array(exports_external.string()),
    "assignment_overrides[assignment_id]": exports_external.array(exports_external.string())
  }),
  url: exports_external.literal("/v1/courses/{course_id}/assignments/overrides")
});
var batchRetrieveOverridesInCourseResponsesSchema = exports_external.object({
  200: exports_external.array(assignmentOverrideSchema)
});
var batchRetrieveOverridesInCourseResponseSchema = batchRetrieveOverridesInCourseResponsesSchema.shape["keyof BatchRetrieveOverridesInCourseResponses"];
var batchCreateOverridesInCourseDataSchema = exports_external.object({
  body: exports_external.object({
    assignment_overrides: exports_external.array(assignmentOverrideSchema)
  }),
  path: exports_external.object({
    course_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/assignments/overrides")
});
var batchCreateOverridesInCourseResponsesSchema = exports_external.object({
  200: exports_external.array(assignmentOverrideSchema)
});
var batchCreateOverridesInCourseResponseSchema = batchCreateOverridesInCourseResponsesSchema.shape["keyof BatchCreateOverridesInCourseResponses"];
var batchUpdateOverridesInCourseDataSchema = exports_external.object({
  body: exports_external.object({
    assignment_overrides: exports_external.array(assignmentOverrideSchema)
  }),
  path: exports_external.object({
    course_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/assignments/overrides")
});
var batchUpdateOverridesInCourseResponsesSchema = exports_external.object({
  200: exports_external.array(assignmentOverrideSchema)
});
var batchUpdateOverridesInCourseResponseSchema = batchUpdateOverridesInCourseResponsesSchema.shape["keyof BatchUpdateOverridesInCourseResponses"];
var showProvisionalGradeStatusForStudentAnonymousDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string(),
    assignment_id: exports_external.string()
  }),
  query: exports_external.object({
    anonymous_id: exports_external.string().optional()
  }).optional(),
  url: exports_external.literal("/v1/courses/{course_id}/assignments/{assignment_id}/anonymous_provisional_grades/status")
});
var showProvisionalGradeStatusForStudentAnonymousResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var listGradeableStudentsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string(),
    assignment_id: exports_external.string()
  }),
  query: exports_external.object({
    page: exports_external.number().optional(),
    per_page: exports_external.number().optional()
  }).optional(),
  url: exports_external.literal("/v1/courses/{course_id}/assignments/{assignment_id}/gradeable_students")
});
var listGradeableStudentsResponsesSchema = exports_external.object({
  200: exports_external.array(userDisplaySchema)
});
var listGradeableStudentsResponseSchema = listGradeableStudentsResponsesSchema.shape["keyof ListGradeableStudentsResponses"];
var listStudentsSelectedForModerationDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string(),
    assignment_id: exports_external.string()
  }),
  query: exports_external.object({
    page: exports_external.string().optional(),
    per_page: exports_external.number().optional()
  }).optional(),
  url: exports_external.literal("/v1/courses/{course_id}/assignments/{assignment_id}/moderated_students")
});
var selectStudentsForModerationDataSchema = exports_external.object({
  body: exports_external.object({
    student_ids: exports_external.array(exports_external.number()).optional()
  }).optional(),
  path: exports_external.object({
    course_id: exports_external.string(),
    assignment_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/assignments/{assignment_id}/moderated_students")
});
var listAssignmentOverridesDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string(),
    assignment_id: exports_external.string()
  }),
  query: exports_external.object({
    page: exports_external.string().optional(),
    per_page: exports_external.number().optional()
  }).optional(),
  url: exports_external.literal("/v1/courses/{course_id}/assignments/{assignment_id}/overrides")
});
var listAssignmentOverridesResponsesSchema = exports_external.object({
  200: exports_external.array(assignmentOverrideSchema)
});
var listAssignmentOverridesResponseSchema = listAssignmentOverridesResponsesSchema.shape["keyof ListAssignmentOverridesResponses"];
var createAssignmentOverrideDataSchema = exports_external.object({
  body: exports_external.object({
    "assignment_override[course_section_id]": exports_external.number().optional(),
    "assignment_override[due_at]": exports_external.string().optional(),
    "assignment_override[group_id]": exports_external.number().optional(),
    "assignment_override[lock_at]": exports_external.string().optional(),
    "assignment_override[student_ids]": exports_external.array(exports_external.number()).optional(),
    "assignment_override[title]": exports_external.string().optional(),
    "assignment_override[unlock_at]": exports_external.string().optional()
  }).optional(),
  path: exports_external.object({
    course_id: exports_external.string(),
    assignment_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/assignments/{assignment_id}/overrides")
});
var createAssignmentOverrideResponsesSchema = exports_external.object({
  200: assignmentOverrideSchema
});
var createAssignmentOverrideResponseSchema = createAssignmentOverrideResponsesSchema.shape["keyof CreateAssignmentOverrideResponses"];
var deleteAssignmentOverrideDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string(),
    assignment_id: exports_external.string(),
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/assignments/{assignment_id}/overrides/{id}")
});
var deleteAssignmentOverrideResponsesSchema = exports_external.object({
  200: assignmentOverrideSchema
});
var deleteAssignmentOverrideResponseSchema = deleteAssignmentOverrideResponsesSchema.shape["keyof DeleteAssignmentOverrideResponses"];
var getSingleAssignmentOverrideDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string(),
    assignment_id: exports_external.string(),
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/assignments/{assignment_id}/overrides/{id}")
});
var getSingleAssignmentOverrideResponsesSchema = exports_external.object({
  200: assignmentOverrideSchema
});
var getSingleAssignmentOverrideResponseSchema = getSingleAssignmentOverrideResponsesSchema.shape["keyof GetSingleAssignmentOverrideResponses"];
var updateAssignmentOverrideDataSchema = exports_external.object({
  body: exports_external.object({
    "assignment_override[due_at]": exports_external.string().optional(),
    "assignment_override[lock_at]": exports_external.string().optional(),
    "assignment_override[student_ids]": exports_external.array(exports_external.number()).optional(),
    "assignment_override[title]": exports_external.string().optional(),
    "assignment_override[unlock_at]": exports_external.string().optional()
  }).optional(),
  path: exports_external.object({
    course_id: exports_external.string(),
    assignment_id: exports_external.string(),
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/assignments/{assignment_id}/overrides/{id}")
});
var updateAssignmentOverrideResponsesSchema = exports_external.object({
  200: assignmentOverrideSchema
});
var updateAssignmentOverrideResponseSchema = updateAssignmentOverrideResponsesSchema.shape["keyof UpdateAssignmentOverrideResponses"];
var getAllPeerReviewsCoursesPeerReviewsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string(),
    assignment_id: exports_external.string()
  }),
  query: exports_external.object({
    include: exports_external.array(exports_external.union([exports_external.literal("submission_comments"), exports_external.literal("user")])).optional()
  }).optional(),
  url: exports_external.literal("/v1/courses/{course_id}/assignments/{assignment_id}/peer_reviews")
});
var getAllPeerReviewsCoursesPeerReviewsResponsesSchema = exports_external.object({
  200: exports_external.array(peerReviewSchema)
});
var getAllPeerReviewsCoursesPeerReviewsResponseSchema = getAllPeerReviewsCoursesPeerReviewsResponsesSchema.shape["keyof GetAllPeerReviewsCoursesPeerReviewsResponses"];
var bulkSelectProvisionalGradesDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string(),
    assignment_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/assignments/{assignment_id}/provisional_grades/bulk_select")
});
var bulkSelectProvisionalGradesResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var publishProvisionalGradesForAssignmentDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string(),
    assignment_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/assignments/{assignment_id}/provisional_grades/publish")
});
var publishProvisionalGradesForAssignmentResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var showProvisionalGradeStatusForStudentDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string(),
    assignment_id: exports_external.string()
  }),
  query: exports_external.object({
    student_id: exports_external.number().optional()
  }).optional(),
  url: exports_external.literal("/v1/courses/{course_id}/assignments/{assignment_id}/provisional_grades/status")
});
var showProvisionalGradeStatusForStudentResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var copyProvisionalGradeDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string(),
    assignment_id: exports_external.string(),
    provisional_grade_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/assignments/{assignment_id}/provisional_grades/{provisional_grade_id}/copy_to_final_mark")
});
var copyProvisionalGradeResponsesSchema = exports_external.object({
  200: provisionalGradeSchema
});
var copyProvisionalGradeResponseSchema = copyProvisionalGradeResponsesSchema.shape["keyof CopyProvisionalGradeResponses"];
var selectProvisionalGradeDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string(),
    assignment_id: exports_external.string(),
    provisional_grade_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/assignments/{assignment_id}/provisional_grades/{provisional_grade_id}/select")
});
var selectProvisionalGradeResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var submissionSummaryCoursesDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string(),
    assignment_id: exports_external.string()
  }),
  query: exports_external.object({
    grouped: exports_external.boolean().optional()
  }).optional(),
  url: exports_external.literal("/v1/courses/{course_id}/assignments/{assignment_id}/submission_summary")
});
var submissionSummaryCoursesResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var listAssignmentSubmissionsCoursesDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string(),
    assignment_id: exports_external.string()
  }),
  query: exports_external.object({
    include: exports_external.array(exports_external.union([exports_external.literal("submission_history"), exports_external.literal("submission_comments"), exports_external.literal("rubric_assessment"), exports_external.literal("assignment"), exports_external.literal("visibility"), exports_external.literal("course"), exports_external.literal("user"), exports_external.literal("group")])).optional(),
    grouped: exports_external.boolean().optional(),
    page: exports_external.number().optional(),
    per_page: exports_external.number().optional()
  }).optional(),
  url: exports_external.literal("/v1/courses/{course_id}/assignments/{assignment_id}/submissions")
});
var submitAssignmentCoursesDataSchema = exports_external.object({
  body: exports_external.object({
    "comment[text_comment]": exports_external.string().optional(),
    "submission[body]": exports_external.string().optional(),
    "submission[file_ids]": exports_external.array(exports_external.number()).optional(),
    "submission[media_comment_id]": exports_external.string().optional(),
    "submission[media_comment_type]": exports_external.union([exports_external.literal("audio"), exports_external.literal("video")]).optional(),
    "submission[submission_type]": exports_external.union([exports_external.literal("online_text_entry"), exports_external.literal("online_url"), exports_external.literal("online_upload"), exports_external.literal("media_recording"), exports_external.literal("basic_lti_launch")]),
    "submission[url]": exports_external.string().optional()
  }),
  path: exports_external.object({
    course_id: exports_external.string(),
    assignment_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/assignments/{assignment_id}/submissions")
});
var submitAssignmentCoursesResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var gradeOrCommentOnMultipleSubmissionsCoursesAssignmentsDataSchema = exports_external.object({
  body: exports_external.object({
    "grade_data[student_id][assignment_id]": exports_external.number().optional(),
    "grade_data[student_id][excuse]": exports_external.boolean().optional(),
    "grade_data[student_id][file_ids]": exports_external.array(exports_external.number()).optional(),
    "grade_data[student_id][group_comment]": exports_external.boolean().optional(),
    "grade_data[student_id][media_comment_id]": exports_external.string().optional(),
    "grade_data[student_id][media_comment_type]": exports_external.union([exports_external.literal("audio"), exports_external.literal("video")]).optional(),
    "grade_data[student_id][posted_grade]": exports_external.string().optional(),
    "grade_data[student_id][rubric_assessment]": exports_external.unknown().optional(),
    "grade_data[student_id][text_comment]": exports_external.string().optional()
  }).optional(),
  path: exports_external.object({
    course_id: exports_external.string(),
    assignment_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/assignments/{assignment_id}/submissions/update_grades")
});
var gradeOrCommentOnMultipleSubmissionsCoursesAssignmentsResponsesSchema = exports_external.object({
  200: progressSchema
});
var gradeOrCommentOnMultipleSubmissionsCoursesAssignmentsResponseSchema = gradeOrCommentOnMultipleSubmissionsCoursesAssignmentsResponsesSchema.shape["keyof GradeOrCommentOnMultipleSubmissionsCoursesAssignmentsResponses"];
var deletePeerReviewCoursesDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string(),
    assignment_id: exports_external.string(),
    submission_id: exports_external.string()
  }),
  query: exports_external.object({
    user_id: exports_external.number()
  }),
  url: exports_external.literal("/v1/courses/{course_id}/assignments/{assignment_id}/submissions/{submission_id}/peer_reviews")
});
var deletePeerReviewCoursesResponsesSchema = exports_external.object({
  200: peerReviewSchema
});
var deletePeerReviewCoursesResponseSchema = deletePeerReviewCoursesResponsesSchema.shape["keyof DeletePeerReviewCoursesResponses"];
var getAllPeerReviewsCoursesSubmissionsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string(),
    assignment_id: exports_external.string(),
    submission_id: exports_external.string()
  }),
  query: exports_external.object({
    include: exports_external.array(exports_external.union([exports_external.literal("submission_comments"), exports_external.literal("user")])).optional()
  }).optional(),
  url: exports_external.literal("/v1/courses/{course_id}/assignments/{assignment_id}/submissions/{submission_id}/peer_reviews")
});
var getAllPeerReviewsCoursesSubmissionsResponsesSchema = exports_external.object({
  200: exports_external.array(peerReviewSchema)
});
var getAllPeerReviewsCoursesSubmissionsResponseSchema = getAllPeerReviewsCoursesSubmissionsResponsesSchema.shape["keyof GetAllPeerReviewsCoursesSubmissionsResponses"];
var createPeerReviewCoursesDataSchema = exports_external.object({
  body: exports_external.object({
    user_id: exports_external.number()
  }),
  path: exports_external.object({
    course_id: exports_external.string(),
    assignment_id: exports_external.string(),
    submission_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/assignments/{assignment_id}/submissions/{submission_id}/peer_reviews")
});
var createPeerReviewCoursesResponsesSchema = exports_external.object({
  200: peerReviewSchema
});
var createPeerReviewCoursesResponseSchema = createPeerReviewCoursesResponsesSchema.shape["keyof CreatePeerReviewCoursesResponses"];
var getSingleSubmissionCoursesDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string(),
    assignment_id: exports_external.string(),
    user_id: exports_external.string()
  }),
  query: exports_external.object({
    include: exports_external.array(exports_external.union([exports_external.literal("submission_history"), exports_external.literal("submission_comments"), exports_external.literal("rubric_assessment"), exports_external.literal("visibility"), exports_external.literal("course"), exports_external.literal("user")])).optional()
  }).optional(),
  url: exports_external.literal("/v1/courses/{course_id}/assignments/{assignment_id}/submissions/{user_id}")
});
var gradeOrCommentOnSubmissionCoursesDataSchema = exports_external.object({
  body: exports_external.object({
    "comment[file_ids]": exports_external.array(exports_external.number()).optional(),
    "comment[group_comment]": exports_external.boolean().optional(),
    "comment[media_comment_id]": exports_external.string().optional(),
    "comment[media_comment_type]": exports_external.union([exports_external.literal("audio"), exports_external.literal("video")]).optional(),
    "comment[text_comment]": exports_external.string().optional(),
    "include[visibility]": exports_external.string().optional(),
    rubric_assessment: exports_external.unknown().optional(),
    "submission[excuse]": exports_external.boolean().optional(),
    "submission[late_policy_status]": exports_external.string().optional(),
    "submission[posted_grade]": exports_external.string().optional(),
    "submission[seconds_late_override]": exports_external.number().optional()
  }).optional(),
  path: exports_external.object({
    course_id: exports_external.string(),
    assignment_id: exports_external.string(),
    user_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/assignments/{assignment_id}/submissions/{user_id}")
});
var uploadFileToSubmissionDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string(),
    assignment_id: exports_external.string(),
    user_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/assignments/{assignment_id}/submissions/{user_id}/comments/files")
});
var uploadFileToSubmissionResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var uploadFileCoursesDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string(),
    assignment_id: exports_external.string(),
    user_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/assignments/{assignment_id}/submissions/{user_id}/files")
});
var uploadFileCoursesResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var markSubmissionAsUnreadCoursesDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string(),
    assignment_id: exports_external.string(),
    user_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/assignments/{assignment_id}/submissions/{user_id}/read")
});
var markSubmissionAsUnreadCoursesResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var markSubmissionAsReadCoursesDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string(),
    assignment_id: exports_external.string(),
    user_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/assignments/{assignment_id}/submissions/{user_id}/read")
});
var markSubmissionAsReadCoursesResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var deleteAssignmentDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string(),
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/assignments/{id}")
});
var getSingleAssignmentDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string(),
    id: exports_external.string()
  }),
  query: exports_external.object({
    include: exports_external.array(exports_external.union([exports_external.literal("submission"), exports_external.literal("assignment_visibility"), exports_external.literal("overrides"), exports_external.literal("observed_users")])).optional(),
    override_assignment_dates: exports_external.boolean().optional(),
    needs_grading_count_by_section: exports_external.boolean().optional(),
    all_dates: exports_external.boolean().optional()
  }).optional(),
  url: exports_external.literal("/v1/courses/{course_id}/assignments/{id}")
});
var editAssignmentDataSchema = exports_external.object({
  body: exports_external.object({
    "assignment[allowed_extensions]": exports_external.array(exports_external.string()).optional(),
    "assignment[assignment_group_id]": exports_external.number().optional(),
    "assignment[assignment_overrides]": exports_external.array(assignmentOverrideSchema).optional(),
    "assignment[automatic_peer_reviews]": exports_external.boolean().optional(),
    "assignment[description]": exports_external.string().optional(),
    "assignment[due_at]": exports_external.string().optional(),
    "assignment[external_tool_tag_attributes]": exports_external.string().optional(),
    "assignment[grade_group_students_individually]": exports_external.number().optional(),
    "assignment[grading_standard_id]": exports_external.number().optional(),
    "assignment[grading_type]": exports_external.union([exports_external.literal("pass_fail"), exports_external.literal("percent"), exports_external.literal("letter_grade"), exports_external.literal("gpa_scale"), exports_external.literal("points")]).optional(),
    "assignment[group_category_id]": exports_external.number().optional(),
    "assignment[integration_data]": exports_external.string().optional(),
    "assignment[integration_id]": exports_external.string().optional(),
    "assignment[lock_at]": exports_external.string().optional(),
    "assignment[moderated_grading]": exports_external.boolean().optional(),
    "assignment[muted]": exports_external.boolean().optional(),
    "assignment[name]": exports_external.string().optional(),
    "assignment[notify_of_update]": exports_external.boolean().optional(),
    "assignment[omit_from_final_grade]": exports_external.boolean().optional(),
    "assignment[only_visible_to_overrides]": exports_external.boolean().optional(),
    "assignment[peer_reviews]": exports_external.boolean().optional(),
    "assignment[points_possible]": exports_external.number().optional(),
    "assignment[position]": exports_external.number().optional(),
    "assignment[published]": exports_external.boolean().optional(),
    "assignment[submission_types]": exports_external.array(exports_external.union([exports_external.literal("online_quiz"), exports_external.literal("none"), exports_external.literal("on_paper"), exports_external.literal("discussion_topic"), exports_external.literal("external_tool"), exports_external.literal("online_upload"), exports_external.literal("online_text_entry"), exports_external.literal("online_url"), exports_external.literal("media_recording")])).optional(),
    "assignment[turnitin_enabled]": exports_external.boolean().optional(),
    "assignment[turnitin_settings]": exports_external.string().optional(),
    "assignment[unlock_at]": exports_external.string().optional(),
    "assignment[vericite_enabled]": exports_external.boolean().optional()
  }).optional(),
  path: exports_external.object({
    course_id: exports_external.string(),
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/assignments/{id}")
});
var listBlueprintSubscriptionsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/blueprint_subscriptions")
});
var listBlueprintSubscriptionsResponsesSchema = exports_external.object({
  200: exports_external.array(blueprintSubscriptionSchema)
});
var listBlueprintSubscriptionsResponseSchema = listBlueprintSubscriptionsResponsesSchema.shape["keyof ListBlueprintSubscriptionsResponses"];
var listBlueprintImportsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string(),
    subscription_id: exports_external.string()
  }),
  query: exports_external.object({
    page: exports_external.string().optional(),
    per_page: exports_external.number().optional()
  }).optional(),
  url: exports_external.literal("/v1/courses/{course_id}/blueprint_subscriptions/{subscription_id}/migrations")
});
var listBlueprintImportsResponsesSchema = exports_external.object({
  200: exports_external.array(blueprintMigrationSchema)
});
var listBlueprintImportsResponseSchema = listBlueprintImportsResponsesSchema.shape["keyof ListBlueprintImportsResponses"];
var showBlueprintImportDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string(),
    subscription_id: exports_external.string(),
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/blueprint_subscriptions/{subscription_id}/migrations/{id}")
});
var showBlueprintImportResponsesSchema = exports_external.object({
  200: blueprintMigrationSchema
});
var showBlueprintImportResponseSchema = showBlueprintImportResponsesSchema.shape["keyof ShowBlueprintImportResponses"];
var getImportDetailsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string(),
    subscription_id: exports_external.string(),
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/blueprint_subscriptions/{subscription_id}/migrations/{id}/details")
});
var getImportDetailsResponsesSchema = exports_external.object({
  200: exports_external.array(changeRecordSchema)
});
var getImportDetailsResponseSchema = getImportDetailsResponsesSchema.shape["keyof GetImportDetailsResponses"];
var getBlueprintInformationDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string(),
    template_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/blueprint_templates/{template_id}")
});
var getBlueprintInformationResponsesSchema = exports_external.object({
  200: blueprintTemplateSchema
});
var getBlueprintInformationResponseSchema = getBlueprintInformationResponsesSchema.shape["keyof GetBlueprintInformationResponses"];
var getAssociatedCourseInformationDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string(),
    template_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/blueprint_templates/{template_id}/associated_courses")
});
var listBlueprintMigrationsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string(),
    template_id: exports_external.string()
  }),
  query: exports_external.object({
    page: exports_external.string().optional(),
    per_page: exports_external.number().optional()
  }).optional(),
  url: exports_external.literal("/v1/courses/{course_id}/blueprint_templates/{template_id}/migrations")
});
var listBlueprintMigrationsResponsesSchema = exports_external.object({
  200: exports_external.array(blueprintMigrationSchema)
});
var listBlueprintMigrationsResponseSchema = listBlueprintMigrationsResponsesSchema.shape["keyof ListBlueprintMigrationsResponses"];
var beginMigrationToPushToAssociatedCoursesDataSchema = exports_external.object({
  body: exports_external.object({
    comment: exports_external.string().optional(),
    copy_settings: exports_external.boolean().optional(),
    send_notification: exports_external.boolean().optional()
  }).optional(),
  path: exports_external.object({
    course_id: exports_external.string(),
    template_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/blueprint_templates/{template_id}/migrations")
});
var beginMigrationToPushToAssociatedCoursesResponsesSchema = exports_external.object({
  200: blueprintMigrationSchema
});
var beginMigrationToPushToAssociatedCoursesResponseSchema = beginMigrationToPushToAssociatedCoursesResponsesSchema.shape["keyof BeginMigrationToPushToAssociatedCoursesResponses"];
var showBlueprintMigrationDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string(),
    template_id: exports_external.string(),
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/blueprint_templates/{template_id}/migrations/{id}")
});
var showBlueprintMigrationResponsesSchema = exports_external.object({
  200: blueprintMigrationSchema
});
var showBlueprintMigrationResponseSchema = showBlueprintMigrationResponsesSchema.shape["keyof ShowBlueprintMigrationResponses"];
var getMigrationDetailsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string(),
    template_id: exports_external.string(),
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/blueprint_templates/{template_id}/migrations/{id}/details")
});
var getMigrationDetailsResponsesSchema = exports_external.object({
  200: exports_external.array(changeRecordSchema)
});
var getMigrationDetailsResponseSchema = getMigrationDetailsResponsesSchema.shape["keyof GetMigrationDetailsResponses"];
var setOrRemoveRestrictionsOnBlueprintCourseObjectDataSchema = exports_external.object({
  body: exports_external.object({
    content_id: exports_external.number().optional(),
    content_type: exports_external.union([exports_external.literal("assignment"), exports_external.literal("attachment"), exports_external.literal("discussion_topic"), exports_external.literal("external_tool"), exports_external.literal("quiz"), exports_external.literal("wiki_page")]).optional(),
    restricted: exports_external.boolean().optional(),
    restrictions: exports_external.unknown().optional()
  }).optional(),
  path: exports_external.object({
    course_id: exports_external.string(),
    template_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/blueprint_templates/{template_id}/restrict_item")
});
var setOrRemoveRestrictionsOnBlueprintCourseObjectResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var getUnsyncedChangesDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string(),
    template_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/blueprint_templates/{template_id}/unsynced_changes")
});
var getUnsyncedChangesResponsesSchema = exports_external.object({
  200: exports_external.array(changeRecordSchema)
});
var getUnsyncedChangesResponseSchema = getUnsyncedChangesResponsesSchema.shape["keyof GetUnsyncedChangesResponses"];
var updateAssociatedCoursesDataSchema = exports_external.object({
  body: exports_external.object({
    course_ids_to_add: exports_external.array(exports_external.string()).optional(),
    course_ids_to_remove: exports_external.array(exports_external.string()).optional()
  }).optional(),
  path: exports_external.object({
    course_id: exports_external.string(),
    template_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/blueprint_templates/{template_id}/update_associations")
});
var updateAssociatedCoursesResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var getCourseTimetableDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/calendar_events/timetable")
});
var getCourseTimetableResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var setCourseTimetableDataSchema = exports_external.object({
  body: exports_external.object({
    "timetables[course_section_id]": exports_external.array(exports_external.array(exports_external.record(exports_external.unknown()))).optional(),
    "timetables[course_section_id][end_time]": exports_external.array(exports_external.string()).optional(),
    "timetables[course_section_id][location_name]": exports_external.array(exports_external.string()).optional(),
    "timetables[course_section_id][start_time]": exports_external.array(exports_external.string()).optional(),
    "timetables[course_section_id][weekdays]": exports_external.array(exports_external.string()).optional()
  }).optional(),
  path: exports_external.object({
    course_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/calendar_events/timetable")
});
var setCourseTimetableResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var createOrUpdateEventsDirectlyForCourseTimetableDataSchema = exports_external.object({
  body: exports_external.object({
    course_section_id: exports_external.string().optional(),
    events: exports_external.array(exports_external.array(exports_external.record(exports_external.unknown()))).optional(),
    "events[code]": exports_external.array(exports_external.string()).optional(),
    "events[end_at]": exports_external.array(exports_external.string()).optional(),
    "events[location_name]": exports_external.array(exports_external.string()).optional(),
    "events[start_at]": exports_external.array(exports_external.string()).optional()
  }).optional(),
  path: exports_external.object({
    course_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/calendar_events/timetable_events")
});
var createOrUpdateEventsDirectlyForCourseTimetableResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var listCollaborationsCoursesDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string()
  }),
  query: exports_external.object({
    page: exports_external.string().optional(),
    per_page: exports_external.number().optional()
  }).optional(),
  url: exports_external.literal("/v1/courses/{course_id}/collaborations")
});
var listCollaborationsCoursesResponsesSchema = exports_external.object({
  200: exports_external.array(collaborationSchema)
});
var listCollaborationsCoursesResponseSchema = listCollaborationsCoursesResponsesSchema.shape["keyof ListCollaborationsCoursesResponses"];
var listConferencesCoursesDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string()
  }),
  query: exports_external.object({
    page: exports_external.string().optional(),
    per_page: exports_external.number().optional()
  }).optional(),
  url: exports_external.literal("/v1/courses/{course_id}/conferences")
});
var conferenceSchema = exports_external.object({
  conference_key: exports_external.string().optional().nullable(),
  conference_type: exports_external.string().optional().nullable(),
  description: exports_external.string().optional().nullable(),
  duration: exports_external.number().optional().nullable(),
  ended_at: exports_external.string().optional().nullable(),
  has_advanced_settings: exports_external.boolean().optional().nullable(),
  id: exports_external.number().optional(),
  join_url: exports_external.string().optional().nullable(),
  long_running: exports_external.boolean().optional().nullable(),
  recordings: exports_external.array(conferenceRecordingSchema).optional().nullable(),
  started_at: exports_external.string().optional().nullable(),
  title: exports_external.string().optional().nullable(),
  url: exports_external.string().optional().nullable(),
  user_settings: exports_external.record(exports_external.unknown()).optional().nullable(),
  users: exports_external.array(exports_external.number()).optional().nullable()
});
var listConferencesCoursesResponsesSchema = exports_external.object({
  200: exports_external.array(conferenceSchema)
});
var listContentExportsCoursesDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string()
  }),
  query: exports_external.object({
    page: exports_external.string().optional(),
    per_page: exports_external.number().optional()
  }).optional(),
  url: exports_external.literal("/v1/courses/{course_id}/content_exports")
});
var contentExportSchema = exports_external.object({
  attachment: fileNullableSchema.optional(),
  created_at: exports_external.string().optional().nullable(),
  export_type: exports_external.string().optional().nullable(),
  id: exports_external.number().optional(),
  progress_url: exports_external.string().optional().nullable(),
  user_id: exports_external.number().optional().nullable(),
  workflow_state: exports_external.string().optional().nullable()
});
var listContentExportsCoursesResponsesSchema = exports_external.object({
  200: exports_external.array(contentExportSchema)
});
var exportContentCoursesDataSchema = exports_external.object({
  body: exports_external.object({
    export_type: exports_external.union([exports_external.literal("common_cartridge"), exports_external.literal("qti"), exports_external.literal("zip")]),
    select: exports_external.union([exports_external.literal("folders"), exports_external.literal("files"), exports_external.literal("attachments"), exports_external.literal("quizzes"), exports_external.literal("assignments"), exports_external.literal("announcements"), exports_external.literal("calendar_events"), exports_external.literal("discussion_topics"), exports_external.literal("modules"), exports_external.literal("module_items"), exports_external.literal("pages"), exports_external.literal("rubrics")]).optional(),
    skip_notifications: exports_external.boolean().optional()
  }),
  path: exports_external.object({
    course_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/content_exports")
});
var exportContentCoursesResponsesSchema = exports_external.object({
  200: contentExportSchema
});
var exportContentCoursesResponseSchema = exportContentCoursesResponsesSchema.shape["keyof ExportContentCoursesResponses"];
var showContentExportCoursesDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string(),
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/content_exports/{id}")
});
var showContentExportCoursesResponsesSchema = exports_external.object({
  200: contentExportSchema
});
var showContentExportCoursesResponseSchema = showContentExportCoursesResponsesSchema.shape["keyof ShowContentExportCoursesResponses"];
var listLicensesCoursesDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string()
  }),
  query: exports_external.object({
    page: exports_external.string().optional(),
    per_page: exports_external.number().optional()
  }).optional(),
  url: exports_external.literal("/v1/courses/{course_id}/content_licenses")
});
var listLicensesCoursesResponsesSchema = exports_external.object({
  200: exports_external.array(licenseSchema)
});
var listLicensesCoursesResponseSchema = listLicensesCoursesResponsesSchema.shape["keyof ListLicensesCoursesResponses"];
var listContentMigrationsCoursesDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string()
  }),
  query: exports_external.object({
    page: exports_external.string().optional(),
    per_page: exports_external.number().optional()
  }).optional(),
  url: exports_external.literal("/v1/courses/{course_id}/content_migrations")
});
var listContentMigrationsCoursesResponsesSchema = exports_external.object({
  200: exports_external.array(contentMigrationSchema)
});
var listContentMigrationsCoursesResponseSchema = listContentMigrationsCoursesResponsesSchema.shape["keyof ListContentMigrationsCoursesResponses"];
var createContentMigrationCoursesDataSchema = exports_external.object({
  body: exports_external.object({
    "date_shift_options[day_substitutions][X]": exports_external.number().optional(),
    "date_shift_options[new_end_date]": exports_external.string().optional(),
    "date_shift_options[new_start_date]": exports_external.string().optional(),
    "date_shift_options[old_end_date]": exports_external.string().optional(),
    "date_shift_options[old_start_date]": exports_external.string().optional(),
    "date_shift_options[remove_dates]": exports_external.boolean().optional(),
    "date_shift_options[shift_dates]": exports_external.boolean().optional(),
    migration_type: exports_external.string(),
    "pre_attachment[name]": exports_external.string().optional(),
    "pre_attachment[todo]": exports_external.string().optional(),
    "settings[file_url]": exports_external.string().optional(),
    "settings[folder_id]": exports_external.string().optional(),
    "settings[overwrite_quizzes]": exports_external.boolean().optional(),
    "settings[question_bank_id]": exports_external.number().optional(),
    "settings[question_bank_name]": exports_external.string().optional(),
    "settings[source_course_id]": exports_external.string().optional()
  }),
  path: exports_external.object({
    course_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/content_migrations")
});
var createContentMigrationCoursesResponsesSchema = exports_external.object({
  200: contentMigrationSchema
});
var createContentMigrationCoursesResponseSchema = createContentMigrationCoursesResponsesSchema.shape["keyof CreateContentMigrationCoursesResponses"];
var listMigrationSystemsCoursesDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/content_migrations/migrators")
});
var listMigrationSystemsCoursesResponsesSchema = exports_external.object({
  200: exports_external.array(migratorSchema)
});
var listMigrationSystemsCoursesResponseSchema = listMigrationSystemsCoursesResponsesSchema.shape["keyof ListMigrationSystemsCoursesResponses"];
var listMigrationIssuesCoursesDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string(),
    content_migration_id: exports_external.string()
  }),
  query: exports_external.object({
    page: exports_external.string().optional(),
    per_page: exports_external.number().optional()
  }).optional(),
  url: exports_external.literal("/v1/courses/{course_id}/content_migrations/{content_migration_id}/migration_issues")
});
var listMigrationIssuesCoursesResponsesSchema = exports_external.object({
  200: exports_external.array(migrationIssueSchema)
});
var listMigrationIssuesCoursesResponseSchema = listMigrationIssuesCoursesResponsesSchema.shape["keyof ListMigrationIssuesCoursesResponses"];
var getMigrationIssueCoursesDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string(),
    content_migration_id: exports_external.string(),
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/content_migrations/{content_migration_id}/migration_issues/{id}")
});
var getMigrationIssueCoursesResponsesSchema = exports_external.object({
  200: migrationIssueSchema
});
var getMigrationIssueCoursesResponseSchema = getMigrationIssueCoursesResponsesSchema.shape["keyof GetMigrationIssueCoursesResponses"];
var updateMigrationIssueCoursesDataSchema = exports_external.object({
  body: exports_external.object({
    workflow_state: exports_external.union([exports_external.literal("active"), exports_external.literal("resolved")])
  }),
  path: exports_external.object({
    course_id: exports_external.string(),
    content_migration_id: exports_external.string(),
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/content_migrations/{content_migration_id}/migration_issues/{id}")
});
var updateMigrationIssueCoursesResponsesSchema = exports_external.object({
  200: migrationIssueSchema
});
var updateMigrationIssueCoursesResponseSchema = updateMigrationIssueCoursesResponsesSchema.shape["keyof UpdateMigrationIssueCoursesResponses"];
var getContentMigrationCoursesDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string(),
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/content_migrations/{id}")
});
var getContentMigrationCoursesResponsesSchema = exports_external.object({
  200: contentMigrationSchema
});
var getContentMigrationCoursesResponseSchema = getContentMigrationCoursesResponsesSchema.shape["keyof GetContentMigrationCoursesResponses"];
var updateContentMigrationCoursesDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string(),
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/content_migrations/{id}")
});
var updateContentMigrationCoursesResponsesSchema = exports_external.object({
  200: contentMigrationSchema
});
var updateContentMigrationCoursesResponseSchema = updateContentMigrationCoursesResponsesSchema.shape["keyof UpdateContentMigrationCoursesResponses"];
var copyCourseContentDataSchema = exports_external.object({
  body: exports_external.object({
    except: exports_external.array(exports_external.union([exports_external.literal("course_settings"), exports_external.literal("assignments"), exports_external.literal("external_tools"), exports_external.literal("files"), exports_external.literal("topics"), exports_external.literal("calendar_events"), exports_external.literal("quizzes"), exports_external.literal("wiki_pages"), exports_external.literal("modules"), exports_external.literal("outcomes")])).optional(),
    only: exports_external.array(exports_external.union([exports_external.literal("course_settings"), exports_external.literal("assignments"), exports_external.literal("external_tools"), exports_external.literal("files"), exports_external.literal("topics"), exports_external.literal("calendar_events"), exports_external.literal("quizzes"), exports_external.literal("wiki_pages"), exports_external.literal("modules"), exports_external.literal("outcomes")])).optional(),
    source_course: exports_external.string().optional()
  }).optional(),
  path: exports_external.object({
    course_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/course_copy")
});
var copyCourseContentResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var getCourseCopyStatusDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string(),
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/course_copy/{id}")
});
var getCourseCopyStatusResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var bulkUpdateColumnDataDataSchema = exports_external.object({
  body: exports_external.object({
    column_data: exports_external.array(exports_external.array(exports_external.record(exports_external.unknown())))
  }),
  path: exports_external.object({
    course_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/custom_gradebook_column_data")
});
var bulkUpdateColumnDataResponsesSchema = exports_external.object({
  200: progressSchema
});
var bulkUpdateColumnDataResponseSchema = bulkUpdateColumnDataResponsesSchema.shape["keyof BulkUpdateColumnDataResponses"];
var listCustomGradebookColumnsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string()
  }),
  query: exports_external.object({
    include_hidden: exports_external.boolean().optional(),
    page: exports_external.string().optional(),
    per_page: exports_external.number().optional()
  }).optional(),
  url: exports_external.literal("/v1/courses/{course_id}/custom_gradebook_columns")
});
var listCustomGradebookColumnsResponsesSchema = exports_external.object({
  200: exports_external.array(customColumnSchema)
});
var listCustomGradebookColumnsResponseSchema = listCustomGradebookColumnsResponsesSchema.shape["keyof ListCustomGradebookColumnsResponses"];
var createCustomGradebookColumnDataSchema = exports_external.object({
  body: exports_external.object({
    "column[hidden]": exports_external.boolean().optional(),
    "column[position]": exports_external.number().optional(),
    "column[read_only]": exports_external.boolean().optional(),
    "column[teacher_notes]": exports_external.boolean().optional(),
    "column[title]": exports_external.string()
  }),
  path: exports_external.object({
    course_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/custom_gradebook_columns")
});
var createCustomGradebookColumnResponsesSchema = exports_external.object({
  200: customColumnSchema
});
var createCustomGradebookColumnResponseSchema = createCustomGradebookColumnResponsesSchema.shape["keyof CreateCustomGradebookColumnResponses"];
var reorderCustomColumnsDataSchema = exports_external.object({
  body: exports_external.object({
    order: exports_external.array(exports_external.number())
  }),
  path: exports_external.object({
    course_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/custom_gradebook_columns/reorder")
});
var reorderCustomColumnsResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var deleteCustomGradebookColumnDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string(),
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/custom_gradebook_columns/{id}")
});
var deleteCustomGradebookColumnResponsesSchema = exports_external.object({
  200: customColumnSchema
});
var deleteCustomGradebookColumnResponseSchema = deleteCustomGradebookColumnResponsesSchema.shape["keyof DeleteCustomGradebookColumnResponses"];
var updateCustomGradebookColumnDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string(),
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/custom_gradebook_columns/{id}")
});
var updateCustomGradebookColumnResponsesSchema = exports_external.object({
  200: customColumnSchema
});
var updateCustomGradebookColumnResponseSchema = updateCustomGradebookColumnResponsesSchema.shape["keyof UpdateCustomGradebookColumnResponses"];
var listEntriesForColumnDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string(),
    id: exports_external.string()
  }),
  query: exports_external.object({
    include_hidden: exports_external.boolean().optional()
  }).optional(),
  url: exports_external.literal("/v1/courses/{course_id}/custom_gradebook_columns/{id}/data")
});
var listEntriesForColumnResponsesSchema = exports_external.object({
  200: exports_external.array(columnDatumSchema)
});
var listEntriesForColumnResponseSchema = listEntriesForColumnResponsesSchema.shape["keyof ListEntriesForColumnResponses"];
var updateColumnDataDataSchema = exports_external.object({
  body: exports_external.object({
    "column_data[content]": exports_external.string()
  }),
  path: exports_external.object({
    course_id: exports_external.string(),
    id: exports_external.string(),
    user_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/custom_gradebook_columns/{id}/data/{user_id}")
});
var updateColumnDataResponsesSchema = exports_external.object({
  200: columnDatumSchema
});
var updateColumnDataResponseSchema = updateColumnDataResponsesSchema.shape["keyof UpdateColumnDataResponses"];
var createToolFromToolconfigurationCoursesDataSchema = exports_external.object({
  body: exports_external.object({
    account_id: exports_external.string().optional()
  }).optional(),
  path: exports_external.object({
    course_id: exports_external.string(),
    developer_key_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/developer_keys/{developer_key_id}/create_tool")
});
var createToolFromToolconfigurationCoursesResponsesSchema = exports_external.object({
  200: contextExternalToolSchema
});
var createToolFromToolconfigurationCoursesResponseSchema = createToolFromToolconfigurationCoursesResponsesSchema.shape["keyof CreateToolFromToolconfigurationCoursesResponses"];
var listDiscussionTopicsCoursesDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string()
  }),
  query: exports_external.object({
    include: exports_external.array(exports_external.union([exports_external.literal("all_dates"), exports_external.literal("sections"), exports_external.literal("sections_user_count"), exports_external.literal("overrides")])).optional(),
    order_by: exports_external.union([exports_external.literal("position"), exports_external.literal("recent_activity"), exports_external.literal("title")]).optional(),
    scope: exports_external.union([exports_external.literal("locked"), exports_external.literal("unlocked"), exports_external.literal("pinned"), exports_external.literal("unpinned")]).optional(),
    only_announcements: exports_external.boolean().optional(),
    filter_by: exports_external.union([exports_external.literal("all"), exports_external.literal("unread")]).optional(),
    search_term: exports_external.string().optional(),
    exclude_context_module_locked_topics: exports_external.boolean().optional(),
    page: exports_external.string().optional(),
    per_page: exports_external.number().optional()
  }).optional(),
  url: exports_external.literal("/v1/courses/{course_id}/discussion_topics")
});
var listDiscussionTopicsCoursesResponsesSchema = exports_external.object({
  200: exports_external.array(discussionTopicSchema)
});
var listDiscussionTopicsCoursesResponseSchema = listDiscussionTopicsCoursesResponsesSchema.shape["keyof ListDiscussionTopicsCoursesResponses"];
var createNewDiscussionTopicCoursesResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var reorderPinnedTopicsCoursesDataSchema = exports_external.object({
  body: exports_external.object({
    order: exports_external.array(exports_external.number())
  }),
  path: exports_external.object({
    course_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/discussion_topics/reorder")
});
var reorderPinnedTopicsCoursesResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var deleteTopicCoursesDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string(),
    topic_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/discussion_topics/{topic_id}")
});
var deleteTopicCoursesResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var getSingleTopicCoursesDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string(),
    topic_id: exports_external.string()
  }),
  query: exports_external.object({
    include: exports_external.array(exports_external.union([exports_external.literal("all_dates"), exports_external.literal("sections"), exports_external.literal("sections_user_count"), exports_external.literal("overrides")])).optional()
  }).optional(),
  url: exports_external.literal("/v1/courses/{course_id}/discussion_topics/{topic_id}")
});
var getSingleTopicCoursesResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var updateTopicCoursesDataSchema = exports_external.object({
  body: exports_external.object({
    allow_rating: exports_external.boolean().optional(),
    assignment: exports_external.unknown().optional(),
    delayed_post_at: exports_external.string().optional(),
    discussion_type: exports_external.union([exports_external.literal("side_comment"), exports_external.literal("threaded")]).optional(),
    group_category_id: exports_external.number().optional(),
    is_announcement: exports_external.boolean().optional(),
    lock_at: exports_external.string().optional(),
    message: exports_external.string().optional(),
    only_graders_can_rate: exports_external.boolean().optional(),
    pinned: exports_external.boolean().optional(),
    podcast_enabled: exports_external.boolean().optional(),
    podcast_has_student_posts: exports_external.boolean().optional(),
    position_after: exports_external.string().optional(),
    published: exports_external.boolean().optional(),
    require_initial_post: exports_external.boolean().optional(),
    sort_by_rating: exports_external.boolean().optional(),
    specific_sections: exports_external.string().optional(),
    title: exports_external.string().optional()
  }).optional(),
  path: exports_external.object({
    course_id: exports_external.string(),
    topic_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/discussion_topics/{topic_id}")
});
var updateTopicCoursesResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var listTopicEntriesCoursesDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string(),
    topic_id: exports_external.string()
  }),
  query: exports_external.object({
    page: exports_external.string().optional(),
    per_page: exports_external.number().optional()
  }).optional(),
  url: exports_external.literal("/v1/courses/{course_id}/discussion_topics/{topic_id}/entries")
});
var listTopicEntriesCoursesResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var postEntryCoursesDataSchema = exports_external.object({
  body: exports_external.object({
    attachment: exports_external.string().optional(),
    message: exports_external.string().optional()
  }).optional(),
  path: exports_external.object({
    course_id: exports_external.string(),
    topic_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/discussion_topics/{topic_id}/entries")
});
var postEntryCoursesResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var rateEntryCoursesDataSchema = exports_external.object({
  body: exports_external.object({
    rating: exports_external.number().optional()
  }).optional(),
  path: exports_external.object({
    course_id: exports_external.string(),
    topic_id: exports_external.string(),
    entry_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/discussion_topics/{topic_id}/entries/{entry_id}/rating")
});
var rateEntryCoursesResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var markEntryAsUnreadCoursesDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string(),
    topic_id: exports_external.string(),
    entry_id: exports_external.string()
  }),
  query: exports_external.object({
    forced_read_state: exports_external.boolean().optional()
  }).optional(),
  url: exports_external.literal("/v1/courses/{course_id}/discussion_topics/{topic_id}/entries/{entry_id}/read")
});
var markEntryAsUnreadCoursesResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var markEntryAsReadCoursesDataSchema = exports_external.object({
  body: exports_external.object({
    forced_read_state: exports_external.boolean().optional()
  }).optional(),
  path: exports_external.object({
    course_id: exports_external.string(),
    topic_id: exports_external.string(),
    entry_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/discussion_topics/{topic_id}/entries/{entry_id}/read")
});
var markEntryAsReadCoursesResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var listEntryRepliesCoursesDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string(),
    topic_id: exports_external.string(),
    entry_id: exports_external.string()
  }),
  query: exports_external.object({
    page: exports_external.string().optional(),
    per_page: exports_external.number().optional()
  }).optional(),
  url: exports_external.literal("/v1/courses/{course_id}/discussion_topics/{topic_id}/entries/{entry_id}/replies")
});
var listEntryRepliesCoursesResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var postReplyCoursesDataSchema = exports_external.object({
  body: exports_external.object({
    attachment: exports_external.string().optional(),
    message: exports_external.string().optional()
  }).optional(),
  path: exports_external.object({
    course_id: exports_external.string(),
    topic_id: exports_external.string(),
    entry_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/discussion_topics/{topic_id}/entries/{entry_id}/replies")
});
var postReplyCoursesResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var deleteEntryCoursesDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string(),
    topic_id: exports_external.string(),
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/discussion_topics/{topic_id}/entries/{id}")
});
var deleteEntryCoursesResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var updateEntryCoursesDataSchema = exports_external.object({
  body: exports_external.object({
    message: exports_external.string().optional()
  }).optional(),
  path: exports_external.object({
    course_id: exports_external.string(),
    topic_id: exports_external.string(),
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/discussion_topics/{topic_id}/entries/{id}")
});
var updateEntryCoursesResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var listEntriesCoursesDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string(),
    topic_id: exports_external.string()
  }),
  query: exports_external.object({
    ids: exports_external.array(exports_external.string()).optional(),
    page: exports_external.string().optional(),
    per_page: exports_external.number().optional()
  }).optional(),
  url: exports_external.literal("/v1/courses/{course_id}/discussion_topics/{topic_id}/entry_list")
});
var listEntriesCoursesResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var markTopicAsUnreadCoursesDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string(),
    topic_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/discussion_topics/{topic_id}/read")
});
var markTopicAsUnreadCoursesResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var markTopicAsReadCoursesDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string(),
    topic_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/discussion_topics/{topic_id}/read")
});
var markTopicAsReadCoursesResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var markAllEntriesAsUnreadCoursesDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string(),
    topic_id: exports_external.string()
  }),
  query: exports_external.object({
    forced_read_state: exports_external.boolean().optional()
  }).optional(),
  url: exports_external.literal("/v1/courses/{course_id}/discussion_topics/{topic_id}/read_all")
});
var markAllEntriesAsUnreadCoursesResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var markAllEntriesAsReadCoursesDataSchema = exports_external.object({
  body: exports_external.object({
    forced_read_state: exports_external.boolean().optional()
  }).optional(),
  path: exports_external.object({
    course_id: exports_external.string(),
    topic_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/discussion_topics/{topic_id}/read_all")
});
var markAllEntriesAsReadCoursesResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var unsubscribeFromTopicCoursesDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string(),
    topic_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/discussion_topics/{topic_id}/subscribed")
});
var unsubscribeFromTopicCoursesResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var subscribeToTopicCoursesDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string(),
    topic_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/discussion_topics/{topic_id}/subscribed")
});
var subscribeToTopicCoursesResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var getFullTopicCoursesDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string(),
    topic_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/discussion_topics/{topic_id}/view")
});
var getFullTopicCoursesResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var getEffectiveDueDatesDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string()
  }),
  query: exports_external.object({
    assignment_ids: exports_external.array(exports_external.string()).optional()
  }).optional(),
  url: exports_external.literal("/v1/courses/{course_id}/effective_due_dates")
});
var getEffectiveDueDatesResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var listEnrollmentsCoursesDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string()
  }),
  query: exports_external.object({
    page: exports_external.string().optional(),
    per_page: exports_external.number().optional(),
    type: exports_external.array(exports_external.string()).optional(),
    role: exports_external.array(exports_external.string()).optional(),
    state: exports_external.array(exports_external.union([exports_external.literal("active"), exports_external.literal("invited"), exports_external.literal("creation_pending"), exports_external.literal("deleted"), exports_external.literal("rejected"), exports_external.literal("completed"), exports_external.literal("inactive")])).optional(),
    include: exports_external.array(exports_external.union([exports_external.literal("avatar_url"), exports_external.literal("group_ids"), exports_external.literal("locked"), exports_external.literal("observed_users"), exports_external.literal("can_be_removed")])).optional(),
    user_id: exports_external.string().optional(),
    grading_period_id: exports_external.number().optional(),
    enrollment_term_id: exports_external.number().optional(),
    sis_account_id: exports_external.array(exports_external.string()).optional(),
    sis_course_id: exports_external.array(exports_external.string()).optional(),
    sis_section_id: exports_external.array(exports_external.string()).optional(),
    sis_user_id: exports_external.array(exports_external.string()).optional()
  }).optional(),
  url: exports_external.literal("/v1/courses/{course_id}/enrollments")
});
var enrollUserCoursesDataSchema = exports_external.object({
  body: exports_external.object({
    "enrollment[associated_user_id]": exports_external.number().optional(),
    "enrollment[course_section_id]": exports_external.number().optional(),
    "enrollment[enrollment_state]": exports_external.union([exports_external.literal("active"), exports_external.literal("invited"), exports_external.literal("inactive")]).optional(),
    "enrollment[limit_privileges_to_course_section]": exports_external.boolean().optional(),
    "enrollment[notify]": exports_external.boolean().optional(),
    "enrollment[role]": exports_external.unknown().optional(),
    "enrollment[role_id]": exports_external.number().optional(),
    "enrollment[self_enrolled]": exports_external.boolean().optional(),
    "enrollment[self_enrollment_code]": exports_external.string().optional(),
    "enrollment[type]": exports_external.union([exports_external.literal("StudentEnrollment"), exports_external.literal("TeacherEnrollment"), exports_external.literal("TaEnrollment"), exports_external.literal("ObserverEnrollment"), exports_external.literal("DesignerEnrollment")]),
    "enrollment[user_id]": exports_external.string()
  }),
  path: exports_external.object({
    course_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/enrollments")
});
var concludeDeactivateOrDeleteEnrollmentDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string(),
    id: exports_external.string()
  }),
  query: exports_external.object({
    task: exports_external.union([exports_external.literal("conclude"), exports_external.literal("delete"), exports_external.literal("inactivate"), exports_external.literal("deactivate")]).optional()
  }).optional(),
  url: exports_external.literal("/v1/courses/{course_id}/enrollments/{id}")
});
var acceptCourseInvitationDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string(),
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/enrollments/{id}/accept")
});
var acceptCourseInvitationResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var reActivateEnrollmentDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string(),
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/enrollments/{id}/reactivate")
});
var rejectCourseInvitationDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string(),
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/enrollments/{id}/reject")
});
var rejectCourseInvitationResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var createEpubExportDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/epub_exports")
});
var createEpubExportResponsesSchema = exports_external.object({
  200: epubExportSchema
});
var createEpubExportResponseSchema = createEpubExportResponsesSchema.shape["keyof CreateEpubExportResponses"];
var showEpubExportDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string(),
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/epub_exports/{id}")
});
var showEpubExportResponsesSchema = exports_external.object({
  200: epubExportSchema
});
var showEpubExportResponseSchema = showEpubExportResponsesSchema.shape["keyof ShowEpubExportResponses"];
var listExternalFeedsCoursesDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string()
  }),
  query: exports_external.object({
    page: exports_external.string().optional(),
    per_page: exports_external.number().optional()
  }).optional(),
  url: exports_external.literal("/v1/courses/{course_id}/external_feeds")
});
var listExternalFeedsCoursesResponsesSchema = exports_external.object({
  200: exports_external.array(externalFeedSchema)
});
var listExternalFeedsCoursesResponseSchema = listExternalFeedsCoursesResponsesSchema.shape["keyof ListExternalFeedsCoursesResponses"];
var createExternalFeedCoursesDataSchema = exports_external.object({
  body: exports_external.object({
    header_match: exports_external.boolean().optional(),
    url: exports_external.string(),
    verbosity: exports_external.union([exports_external.literal("full"), exports_external.literal("truncate"), exports_external.literal("link_only")]).optional()
  }),
  path: exports_external.object({
    course_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/external_feeds")
});
var createExternalFeedCoursesResponsesSchema = exports_external.object({
  200: externalFeedSchema
});
var createExternalFeedCoursesResponseSchema = createExternalFeedCoursesResponsesSchema.shape["keyof CreateExternalFeedCoursesResponses"];
var deleteExternalFeedCoursesDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string(),
    external_feed_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/external_feeds/{external_feed_id}")
});
var deleteExternalFeedCoursesResponsesSchema = exports_external.object({
  200: externalFeedSchema
});
var deleteExternalFeedCoursesResponseSchema = deleteExternalFeedCoursesResponsesSchema.shape["keyof DeleteExternalFeedCoursesResponses"];
var listExternalToolsCoursesDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string()
  }),
  query: exports_external.object({
    search_term: exports_external.string().optional(),
    selectable: exports_external.boolean().optional(),
    include_parents: exports_external.boolean().optional(),
    page: exports_external.string().optional(),
    per_page: exports_external.number().optional()
  }).optional(),
  url: exports_external.literal("/v1/courses/{course_id}/external_tools")
});
var listExternalToolsCoursesResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var createExternalToolCoursesDataSchema = exports_external.object({
  body: exports_external.object({
    "account_navigation[display_type]": exports_external.string().optional(),
    "account_navigation[enabled]": exports_external.boolean().optional(),
    "account_navigation[selection_height]": exports_external.string().optional(),
    "account_navigation[selection_width]": exports_external.string().optional(),
    "account_navigation[text]": exports_external.string().optional(),
    "account_navigation[url]": exports_external.string().optional(),
    config_type: exports_external.string().optional(),
    config_url: exports_external.string().optional(),
    config_xml: exports_external.string().optional(),
    consumer_key: exports_external.string(),
    "course_home_sub_navigation[enabled]": exports_external.boolean().optional(),
    "course_home_sub_navigation[icon_url]": exports_external.string().optional(),
    "course_home_sub_navigation[text]": exports_external.string().optional(),
    "course_home_sub_navigation[url]": exports_external.string().optional(),
    "course_navigation[default]": exports_external.boolean().optional(),
    "course_navigation[display_type]": exports_external.string().optional(),
    "course_navigation[enabled]": exports_external.boolean().optional(),
    "course_navigation[text]": exports_external.string().optional(),
    "course_navigation[visibility]": exports_external.union([exports_external.literal("admins"), exports_external.literal("members")]).optional(),
    "course_navigation[windowTarget]": exports_external.union([exports_external.literal("_blank"), exports_external.literal("_self")]).optional(),
    "custom_fields[field_name]": exports_external.string().optional(),
    description: exports_external.string().optional(),
    domain: exports_external.string().optional(),
    "editor_button[enabled]": exports_external.boolean().optional(),
    "editor_button[icon_url]": exports_external.string().optional(),
    "editor_button[message_type]": exports_external.string().optional(),
    "editor_button[selection_height]": exports_external.string().optional(),
    "editor_button[selection_width]": exports_external.string().optional(),
    "editor_button[url]": exports_external.string().optional(),
    "homework_submission[enabled]": exports_external.boolean().optional(),
    "homework_submission[message_type]": exports_external.string().optional(),
    "homework_submission[text]": exports_external.string().optional(),
    "homework_submission[url]": exports_external.string().optional(),
    icon_url: exports_external.string().optional(),
    "link_selection[enabled]": exports_external.boolean().optional(),
    "link_selection[message_type]": exports_external.string().optional(),
    "link_selection[text]": exports_external.string().optional(),
    "link_selection[url]": exports_external.string().optional(),
    "migration_selection[enabled]": exports_external.boolean().optional(),
    "migration_selection[message_type]": exports_external.string().optional(),
    "migration_selection[url]": exports_external.string().optional(),
    name: exports_external.string(),
    not_selectable: exports_external.boolean().optional(),
    oauth_compliant: exports_external.boolean().optional(),
    privacy_level: exports_external.union([exports_external.literal("anonymous"), exports_external.literal("name_only"), exports_external.literal("public")]),
    "resource_selection[enabled]": exports_external.boolean().optional(),
    "resource_selection[icon_url]": exports_external.string().optional(),
    "resource_selection[selection_height]": exports_external.string().optional(),
    "resource_selection[selection_width]": exports_external.string().optional(),
    "resource_selection[url]": exports_external.string().optional(),
    shared_secret: exports_external.string(),
    text: exports_external.string().optional(),
    "tool_configuration[enabled]": exports_external.boolean().optional(),
    "tool_configuration[message_type]": exports_external.string().optional(),
    "tool_configuration[prefer_sis_email]": exports_external.boolean().optional(),
    "tool_configuration[url]": exports_external.string().optional(),
    url: exports_external.string().optional(),
    "user_navigation[enabled]": exports_external.boolean().optional(),
    "user_navigation[text]": exports_external.string().optional(),
    "user_navigation[url]": exports_external.string().optional(),
    "user_navigation[visibility]": exports_external.union([exports_external.literal("admins"), exports_external.literal("members"), exports_external.literal("public")]).optional()
  }),
  path: exports_external.object({
    course_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/external_tools")
});
var createExternalToolCoursesResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var getSessionlessLaunchUrlForExternalToolCoursesDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string()
  }),
  query: exports_external.object({
    id: exports_external.string().optional(),
    url: exports_external.string().optional(),
    assignment_id: exports_external.string().optional(),
    module_item_id: exports_external.string().optional(),
    launch_type: exports_external.union([exports_external.literal("assessment"), exports_external.literal("module_item")]).optional()
  }).optional(),
  url: exports_external.literal("/v1/courses/{course_id}/external_tools/sessionless_launch")
});
var getSessionlessLaunchUrlForExternalToolCoursesResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var deleteExternalToolCoursesDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string(),
    external_tool_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/external_tools/{external_tool_id}")
});
var deleteExternalToolCoursesResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var getSingleExternalToolCoursesDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string(),
    external_tool_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/external_tools/{external_tool_id}")
});
var getSingleExternalToolCoursesResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var editExternalToolCoursesDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string(),
    external_tool_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/external_tools/{external_tool_id}")
});
var editExternalToolCoursesResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var listFeaturesCoursesDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string()
  }),
  query: exports_external.object({
    page: exports_external.string().optional(),
    per_page: exports_external.number().optional()
  }).optional(),
  url: exports_external.literal("/v1/courses/{course_id}/features")
});
var listFeaturesCoursesResponsesSchema = exports_external.object({
  200: exports_external.array(featureSchema)
});
var listFeaturesCoursesResponseSchema = listFeaturesCoursesResponsesSchema.shape["keyof ListFeaturesCoursesResponses"];
var listEnabledFeaturesCoursesDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string()
  }),
  query: exports_external.object({
    page: exports_external.string().optional(),
    per_page: exports_external.number().optional()
  }).optional(),
  url: exports_external.literal("/v1/courses/{course_id}/features/enabled")
});
var listEnabledFeaturesCoursesResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var removeFeatureFlagCoursesDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string(),
    feature: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/features/flags/{feature}")
});
var removeFeatureFlagCoursesResponsesSchema = exports_external.object({
  200: featureFlagSchema
});
var removeFeatureFlagCoursesResponseSchema = removeFeatureFlagCoursesResponsesSchema.shape["keyof RemoveFeatureFlagCoursesResponses"];
var getFeatureFlagCoursesDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string(),
    feature: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/features/flags/{feature}")
});
var getFeatureFlagCoursesResponsesSchema = exports_external.object({
  200: featureFlagSchema
});
var getFeatureFlagCoursesResponseSchema = getFeatureFlagCoursesResponsesSchema.shape["keyof GetFeatureFlagCoursesResponses"];
var setFeatureFlagCoursesDataSchema = exports_external.object({
  body: exports_external.object({
    state: exports_external.union([exports_external.literal(false), exports_external.literal("allowed"), exports_external.literal(true)]).optional()
  }).optional(),
  path: exports_external.object({
    course_id: exports_external.string(),
    feature: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/features/flags/{feature}")
});
var setFeatureFlagCoursesResponsesSchema = exports_external.object({
  200: featureFlagSchema
});
var setFeatureFlagCoursesResponseSchema = setFeatureFlagCoursesResponsesSchema.shape["keyof SetFeatureFlagCoursesResponses"];
var listFilesCoursesDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string()
  }),
  query: exports_external.object({
    content_types: exports_external.array(exports_external.string()).optional(),
    search_term: exports_external.string().optional(),
    include: exports_external.array(exports_external.literal("user")).optional(),
    only: exports_external.array(exports_external.array(exports_external.record(exports_external.unknown()))).optional(),
    sort: exports_external.union([exports_external.literal("name"), exports_external.literal("size"), exports_external.literal("created_at"), exports_external.literal("updated_at"), exports_external.literal("content_type"), exports_external.literal("user")]).optional(),
    order: exports_external.union([exports_external.literal("asc"), exports_external.literal("desc")]).optional(),
    page: exports_external.string().optional(),
    per_page: exports_external.number().optional()
  }).optional(),
  url: exports_external.literal("/v1/courses/{course_id}/files")
});
var listFilesCoursesResponsesSchema = exports_external.object({
  200: exports_external.array(fileSchema)
});
var listFilesCoursesResponseSchema = listFilesCoursesResponsesSchema.shape["keyof ListFilesCoursesResponses"];
var getQuotaInformationCoursesDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/files/quota")
});
var getQuotaInformationCoursesResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var getFileCoursesDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string(),
    id: exports_external.string()
  }),
  query: exports_external.object({
    include: exports_external.array(exports_external.literal("user")).optional()
  }).optional(),
  url: exports_external.literal("/v1/courses/{course_id}/files/{id}")
});
var getFileCoursesResponsesSchema = exports_external.object({
  200: fileSchema
});
var getFileCoursesResponseSchema = getFileCoursesResponsesSchema.shape["keyof GetFileCoursesResponses"];
var listAllFoldersCoursesDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string()
  }),
  query: exports_external.object({
    page: exports_external.string().optional(),
    per_page: exports_external.number().optional()
  }).optional(),
  url: exports_external.literal("/v1/courses/{course_id}/folders")
});
var listAllFoldersCoursesResponsesSchema = exports_external.object({
  200: exports_external.array(folderSchema)
});
var listAllFoldersCoursesResponseSchema = listAllFoldersCoursesResponsesSchema.shape["keyof ListAllFoldersCoursesResponses"];
var createFolderCoursesDataSchema = exports_external.object({
  body: exports_external.object({
    hidden: exports_external.boolean().optional(),
    lock_at: exports_external.string().optional(),
    locked: exports_external.boolean().optional(),
    name: exports_external.string(),
    parent_folder_id: exports_external.string().optional(),
    parent_folder_path: exports_external.string().optional(),
    position: exports_external.number().optional(),
    unlock_at: exports_external.string().optional()
  }),
  path: exports_external.object({
    course_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/folders")
});
var createFolderCoursesResponsesSchema = exports_external.object({
  200: folderSchema
});
var createFolderCoursesResponseSchema = createFolderCoursesResponsesSchema.shape["keyof CreateFolderCoursesResponses"];
var resolvePathCoursesDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/folders/by_path")
});
var resolvePathCoursesResponsesSchema = exports_external.object({
  200: exports_external.array(folderSchema)
});
var resolvePathCoursesResponseSchema = resolvePathCoursesResponsesSchema.shape["keyof ResolvePathCoursesResponses"];
var resolvePathCoursesFullPathDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/folders/by_path/*full_path")
});
var resolvePathCoursesFullPathResponsesSchema = exports_external.object({
  200: exports_external.array(folderSchema)
});
var resolvePathCoursesFullPathResponseSchema = resolvePathCoursesFullPathResponsesSchema.shape["keyof ResolvePathCoursesFullPathResponses"];
var getFolderCoursesDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string(),
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/folders/{id}")
});
var getFolderCoursesResponsesSchema = exports_external.object({
  200: folderSchema
});
var getFolderCoursesResponseSchema = getFolderCoursesResponsesSchema.shape["keyof GetFolderCoursesResponses"];
var showFrontPageCoursesDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/front_page")
});
var updateCreateFrontPageCoursesDataSchema = exports_external.object({
  body: exports_external.object({
    "wiki_page[body]": exports_external.string().optional(),
    "wiki_page[editing_roles]": exports_external.union([exports_external.literal("teachers"), exports_external.literal("students"), exports_external.literal("members"), exports_external.literal("public")]).optional(),
    "wiki_page[notify_of_update]": exports_external.boolean().optional(),
    "wiki_page[published]": exports_external.boolean().optional(),
    "wiki_page[title]": exports_external.string().optional()
  }).optional(),
  path: exports_external.object({
    course_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/front_page")
});
var daysInGradebookHistoryForThisCourseDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.number()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/gradebook_history/days")
});
var daysInGradebookHistoryForThisCourseResponsesSchema = exports_external.object({
  200: exports_external.array(daySchema)
});
var daysInGradebookHistoryForThisCourseResponseSchema = daysInGradebookHistoryForThisCourseResponsesSchema.shape["keyof DaysInGradebookHistoryForThisCourseResponses"];
var listUncollatedSubmissionVersionsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.number()
  }),
  query: exports_external.object({
    assignment_id: exports_external.number().optional(),
    user_id: exports_external.number().optional(),
    ascending: exports_external.boolean().optional(),
    page: exports_external.string().optional(),
    per_page: exports_external.number().optional()
  }).optional(),
  url: exports_external.literal("/v1/courses/{course_id}/gradebook_history/feed")
});
var listUncollatedSubmissionVersionsResponsesSchema = exports_external.object({
  200: exports_external.array(submissionVersionSchema)
});
var listUncollatedSubmissionVersionsResponseSchema = listUncollatedSubmissionVersionsResponsesSchema.shape["keyof ListUncollatedSubmissionVersionsResponses"];
var detailsForGivenDateInGradebookHistoryForThisCourseDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.number(),
    date: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/gradebook_history/{date}")
});
var detailsForGivenDateInGradebookHistoryForThisCourseResponsesSchema = exports_external.object({
  200: exports_external.array(graderSchema)
});
var detailsForGivenDateInGradebookHistoryForThisCourseResponseSchema = detailsForGivenDateInGradebookHistoryForThisCourseResponsesSchema.shape["keyof DetailsForGivenDateInGradebookHistoryForThisCourseResponses"];
var listsSubmissionsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.number(),
    date: exports_external.string(),
    grader_id: exports_external.number(),
    assignment_id: exports_external.number()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/gradebook_history/{date}/graders/{grader_id}/assignments/{assignment_id}/submissions")
});
var submissionHistorySchema = exports_external.object({
  submission_id: exports_external.number().optional().nullable(),
  versions: exports_external.array(submissionVersionSchema).optional().nullable()
});
var listsSubmissionsResponsesSchema = exports_external.object({
  200: exports_external.array(submissionHistorySchema)
});
var listGradingPeriodsCoursesDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string()
  }),
  query: exports_external.object({
    page: exports_external.string().optional(),
    per_page: exports_external.number().optional()
  }).optional(),
  url: exports_external.literal("/v1/courses/{course_id}/grading_periods")
});
var listGradingPeriodsCoursesResponsesSchema = exports_external.object({
  200: exports_external.array(gradingPeriodSchema)
});
var listGradingPeriodsCoursesResponseSchema = listGradingPeriodsCoursesResponsesSchema.shape["keyof ListGradingPeriodsCoursesResponses"];
var deleteGradingPeriodCoursesDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string(),
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/grading_periods/{id}")
});
var deleteGradingPeriodCoursesResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var getSingleGradingPeriodDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string(),
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/grading_periods/{id}")
});
var getSingleGradingPeriodResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var updateSingleGradingPeriodDataSchema = exports_external.object({
  body: exports_external.object({
    "grading_periods[end_date]": exports_external.array(exports_external.string()),
    "grading_periods[start_date]": exports_external.array(exports_external.string()),
    "grading_periods[weight]": exports_external.array(exports_external.number()).optional()
  }),
  path: exports_external.object({
    course_id: exports_external.string(),
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/grading_periods/{id}")
});
var updateSingleGradingPeriodResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var listGradingStandardsAvailableInContextCoursesDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string()
  }),
  query: exports_external.object({
    page: exports_external.string().optional(),
    per_page: exports_external.number().optional()
  }).optional(),
  url: exports_external.literal("/v1/courses/{course_id}/grading_standards")
});
var listGradingStandardsAvailableInContextCoursesResponsesSchema = exports_external.object({
  200: exports_external.array(gradingStandardSchema)
});
var listGradingStandardsAvailableInContextCoursesResponseSchema = listGradingStandardsAvailableInContextCoursesResponsesSchema.shape["keyof ListGradingStandardsAvailableInContextCoursesResponses"];
var createNewGradingStandardCoursesDataSchema = exports_external.object({
  body: exports_external.object({
    "grading_scheme_entry[name]": exports_external.array(exports_external.string()),
    "grading_scheme_entry[value]": exports_external.array(exports_external.number()),
    title: exports_external.string()
  }),
  path: exports_external.object({
    course_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/grading_standards")
});
var createNewGradingStandardCoursesResponsesSchema = exports_external.object({
  200: gradingStandardSchema
});
var createNewGradingStandardCoursesResponseSchema = createNewGradingStandardCoursesResponsesSchema.shape["keyof CreateNewGradingStandardCoursesResponses"];
var getSingleGradingStandardInContextCoursesDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string(),
    grading_standard_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/grading_standards/{grading_standard_id}")
});
var getSingleGradingStandardInContextCoursesResponsesSchema = exports_external.object({
  200: gradingStandardSchema
});
var getSingleGradingStandardInContextCoursesResponseSchema = getSingleGradingStandardInContextCoursesResponsesSchema.shape["keyof GetSingleGradingStandardInContextCoursesResponses"];
var listGroupCategoriesForContextCoursesDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string()
  }),
  query: exports_external.object({
    page: exports_external.string().optional(),
    per_page: exports_external.number().optional()
  }).optional(),
  url: exports_external.literal("/v1/courses/{course_id}/group_categories")
});
var listGroupCategoriesForContextCoursesResponsesSchema = exports_external.object({
  200: exports_external.array(groupCategorySchema)
});
var listGroupCategoriesForContextCoursesResponseSchema = listGroupCategoriesForContextCoursesResponsesSchema.shape["keyof ListGroupCategoriesForContextCoursesResponses"];
var createGroupCategoryCoursesDataSchema = exports_external.object({
  body: exports_external.object({
    auto_leader: exports_external.union([exports_external.literal("first"), exports_external.literal("random")]).optional(),
    create_group_count: exports_external.number().optional(),
    group_limit: exports_external.number().optional(),
    name: exports_external.string(),
    self_signup: exports_external.union([exports_external.literal("enabled"), exports_external.literal("restricted")]).optional(),
    sis_group_category_id: exports_external.string().optional(),
    split_group_count: exports_external.string().optional()
  }),
  path: exports_external.object({
    course_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/group_categories")
});
var createGroupCategoryCoursesResponsesSchema = exports_external.object({
  200: groupCategorySchema
});
var createGroupCategoryCoursesResponseSchema = createGroupCategoryCoursesResponsesSchema.shape["keyof CreateGroupCategoryCoursesResponses"];
var listGroupsAvailableInContextCoursesDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string()
  }),
  query: exports_external.object({
    only_own_groups: exports_external.boolean().optional(),
    include: exports_external.array(exports_external.literal("tabs")).optional(),
    page: exports_external.string().optional(),
    per_page: exports_external.number().optional()
  }).optional(),
  url: exports_external.literal("/v1/courses/{course_id}/groups")
});
var listGroupsAvailableInContextCoursesResponsesSchema = exports_external.object({
  200: exports_external.array(groupSchema)
});
var listGroupsAvailableInContextCoursesResponseSchema = listGroupsAvailableInContextCoursesResponsesSchema.shape["keyof ListGroupsAvailableInContextCoursesResponses"];
var listLiveAssessmentsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string()
  }),
  query: exports_external.object({
    page: exports_external.string().optional(),
    per_page: exports_external.number().optional()
  }).optional(),
  url: exports_external.literal("/v1/courses/{course_id}/live_assessments")
});
var listLiveAssessmentsResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var createOrFindLiveAssessmentDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/live_assessments")
});
var createOrFindLiveAssessmentResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var listLiveAssessmentResultsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string(),
    assessment_id: exports_external.string()
  }),
  query: exports_external.object({
    user_id: exports_external.number().optional(),
    page: exports_external.string().optional(),
    per_page: exports_external.number().optional()
  }).optional(),
  url: exports_external.literal("/v1/courses/{course_id}/live_assessments/{assessment_id}/results")
});
var listLiveAssessmentResultsResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var createLiveAssessmentResultsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string(),
    assessment_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/live_assessments/{assessment_id}/results")
});
var createLiveAssessmentResultsResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var getModuleItemSequenceDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string()
  }),
  query: exports_external.object({
    asset_type: exports_external.union([exports_external.literal("ModuleItem"), exports_external.literal("File"), exports_external.literal("Page"), exports_external.literal("Discussion"), exports_external.literal("Assignment"), exports_external.literal("Quiz"), exports_external.literal("ExternalTool")]).optional(),
    asset_id: exports_external.number().optional()
  }).optional(),
  url: exports_external.literal("/v1/courses/{course_id}/module_item_sequence")
});
var moduleItemSequenceSchema = exports_external.object({
  items: exports_external.array(moduleItemSequenceNodeSchema).optional().nullable(),
  modules: exports_external.array(moduleSchema).optional().nullable()
});
var getModuleItemSequenceResponsesSchema = exports_external.object({
  200: moduleItemSequenceSchema
});
var listModulesDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string()
  }),
  query: exports_external.object({
    include: exports_external.array(exports_external.union([exports_external.literal("items"), exports_external.literal("content_details")])).optional(),
    search_term: exports_external.string().optional(),
    student_id: exports_external.string().optional(),
    page: exports_external.string().optional(),
    per_page: exports_external.number().optional()
  }).optional(),
  url: exports_external.literal("/v1/courses/{course_id}/modules")
});
var listModulesResponsesSchema = exports_external.object({
  200: exports_external.array(moduleSchema)
});
var listModulesResponseSchema = listModulesResponsesSchema.shape["keyof ListModulesResponses"];
var createModuleDataSchema = exports_external.object({
  body: exports_external.object({
    "module[name]": exports_external.string(),
    "module[position]": exports_external.number().optional(),
    "module[prerequisite_module_ids]": exports_external.array(exports_external.string()).optional(),
    "module[publish_final_grade]": exports_external.boolean().optional(),
    "module[require_sequential_progress]": exports_external.boolean().optional(),
    "module[unlock_at]": exports_external.string().optional()
  }),
  path: exports_external.object({
    course_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/modules")
});
var createModuleResponsesSchema = exports_external.object({
  200: moduleSchema
});
var createModuleResponseSchema = createModuleResponsesSchema.shape["keyof CreateModuleResponses"];
var deleteModuleDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string(),
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/modules/{id}")
});
var deleteModuleResponsesSchema = exports_external.object({
  200: moduleSchema
});
var deleteModuleResponseSchema = deleteModuleResponsesSchema.shape["keyof DeleteModuleResponses"];
var showModuleDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string(),
    id: exports_external.string()
  }),
  query: exports_external.object({
    include: exports_external.array(exports_external.union([exports_external.literal("items"), exports_external.literal("content_details")])).optional(),
    student_id: exports_external.string().optional()
  }).optional(),
  url: exports_external.literal("/v1/courses/{course_id}/modules/{id}")
});
var showModuleResponsesSchema = exports_external.object({
  200: moduleSchema
});
var showModuleResponseSchema = showModuleResponsesSchema.shape["keyof ShowModuleResponses"];
var updateModuleDataSchema = exports_external.object({
  body: exports_external.object({
    "module[name]": exports_external.string().optional(),
    "module[position]": exports_external.number().optional(),
    "module[prerequisite_module_ids]": exports_external.array(exports_external.string()).optional(),
    "module[publish_final_grade]": exports_external.boolean().optional(),
    "module[published]": exports_external.boolean().optional(),
    "module[require_sequential_progress]": exports_external.boolean().optional(),
    "module[unlock_at]": exports_external.string().optional()
  }).optional(),
  path: exports_external.object({
    course_id: exports_external.string(),
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/modules/{id}")
});
var updateModuleResponsesSchema = exports_external.object({
  200: moduleSchema
});
var updateModuleResponseSchema = updateModuleResponsesSchema.shape["keyof UpdateModuleResponses"];
var reLockModuleProgressionsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string(),
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/modules/{id}/relock")
});
var reLockModuleProgressionsResponsesSchema = exports_external.object({
  200: moduleSchema
});
var reLockModuleProgressionsResponseSchema = reLockModuleProgressionsResponsesSchema.shape["keyof ReLockModuleProgressionsResponses"];
var listModuleItemsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string(),
    module_id: exports_external.string()
  }),
  query: exports_external.object({
    include: exports_external.array(exports_external.literal("content_details")).optional(),
    search_term: exports_external.string().optional(),
    student_id: exports_external.string().optional(),
    page: exports_external.string().optional(),
    per_page: exports_external.number().optional()
  }).optional(),
  url: exports_external.literal("/v1/courses/{course_id}/modules/{module_id}/items")
});
var listModuleItemsResponsesSchema = exports_external.object({
  200: exports_external.array(moduleItemSchema)
});
var listModuleItemsResponseSchema = listModuleItemsResponsesSchema.shape["keyof ListModuleItemsResponses"];
var createModuleItemDataSchema = exports_external.object({
  body: exports_external.object({
    "module_item[completion_requirement][min_score]": exports_external.number().optional(),
    "module_item[completion_requirement][type]": exports_external.union([exports_external.literal("must_view"), exports_external.literal("must_contribute"), exports_external.literal("must_submit")]).optional(),
    "module_item[content_id]": exports_external.string(),
    "module_item[external_url]": exports_external.string().optional(),
    "module_item[indent]": exports_external.number().optional(),
    "module_item[new_tab]": exports_external.boolean().optional(),
    "module_item[page_url]": exports_external.string().optional(),
    "module_item[position]": exports_external.number().optional(),
    "module_item[title]": exports_external.string().optional(),
    "module_item[type]": exports_external.union([exports_external.literal("File"), exports_external.literal("Page"), exports_external.literal("Discussion"), exports_external.literal("Assignment"), exports_external.literal("Quiz"), exports_external.literal("SubHeader"), exports_external.literal("ExternalUrl"), exports_external.literal("ExternalTool")])
  }),
  path: exports_external.object({
    course_id: exports_external.string(),
    module_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/modules/{module_id}/items")
});
var createModuleItemResponsesSchema = exports_external.object({
  200: moduleItemSchema
});
var createModuleItemResponseSchema = createModuleItemResponsesSchema.shape["keyof CreateModuleItemResponses"];
var deleteModuleItemDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string(),
    module_id: exports_external.string(),
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/modules/{module_id}/items/{id}")
});
var deleteModuleItemResponsesSchema = exports_external.object({
  200: moduleItemSchema
});
var deleteModuleItemResponseSchema = deleteModuleItemResponsesSchema.shape["keyof DeleteModuleItemResponses"];
var showModuleItemDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string(),
    module_id: exports_external.string(),
    id: exports_external.string()
  }),
  query: exports_external.object({
    include: exports_external.array(exports_external.literal("content_details")).optional(),
    student_id: exports_external.string().optional()
  }).optional(),
  url: exports_external.literal("/v1/courses/{course_id}/modules/{module_id}/items/{id}")
});
var showModuleItemResponsesSchema = exports_external.object({
  200: moduleItemSchema
});
var showModuleItemResponseSchema = showModuleItemResponsesSchema.shape["keyof ShowModuleItemResponses"];
var updateModuleItemDataSchema = exports_external.object({
  body: exports_external.object({
    "module_item[completion_requirement][min_score]": exports_external.number().optional(),
    "module_item[completion_requirement][type]": exports_external.union([exports_external.literal("must_view"), exports_external.literal("must_contribute"), exports_external.literal("must_submit")]).optional(),
    "module_item[external_url]": exports_external.string().optional(),
    "module_item[indent]": exports_external.number().optional(),
    "module_item[module_id]": exports_external.string().optional(),
    "module_item[new_tab]": exports_external.boolean().optional(),
    "module_item[position]": exports_external.number().optional(),
    "module_item[published]": exports_external.boolean().optional(),
    "module_item[title]": exports_external.string().optional()
  }).optional(),
  path: exports_external.object({
    course_id: exports_external.string(),
    module_id: exports_external.string(),
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/modules/{module_id}/items/{id}")
});
var updateModuleItemResponsesSchema = exports_external.object({
  200: moduleItemSchema
});
var updateModuleItemResponseSchema = updateModuleItemResponsesSchema.shape["keyof UpdateModuleItemResponses"];
var markModuleItemAsDoneNotDoneDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string(),
    module_id: exports_external.string(),
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/modules/{module_id}/items/{id}/done")
});
var markModuleItemAsDoneNotDoneResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var markModuleItemReadDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string(),
    module_id: exports_external.string(),
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/modules/{module_id}/items/{id}/mark_read")
});
var markModuleItemReadResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var selectMasteryPathDataSchema = exports_external.object({
  body: exports_external.object({
    assignment_set_id: exports_external.string().optional(),
    student_id: exports_external.string().optional()
  }).optional(),
  path: exports_external.object({
    course_id: exports_external.string(),
    module_id: exports_external.string(),
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/modules/{module_id}/items/{id}/select_mastery_path")
});
var selectMasteryPathResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var getAlignedAssignmentsForOutcomeInCourseForParticularStudentDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.number()
  }),
  query: exports_external.object({
    student_id: exports_external.number().optional()
  }).optional(),
  url: exports_external.literal("/v1/courses/{course_id}/outcome_alignments")
});
var getAlignedAssignmentsForOutcomeInCourseForParticularStudentResponsesSchema = exports_external.object({
  200: exports_external.array(outcomeAlignmentSchema)
});
var getAlignedAssignmentsForOutcomeInCourseForParticularStudentResponseSchema = getAlignedAssignmentsForOutcomeInCourseForParticularStudentResponsesSchema.shape["keyof GetAlignedAssignmentsForOutcomeInCourseForParticularStudentResponses"];
var getAllOutcomeLinksForContextCoursesDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string()
  }),
  query: exports_external.object({
    outcome_style: exports_external.string().optional(),
    outcome_group_style: exports_external.string().optional()
  }).optional(),
  url: exports_external.literal("/v1/courses/{course_id}/outcome_group_links")
});
var getAllOutcomeLinksForContextCoursesResponsesSchema = exports_external.object({
  200: exports_external.array(outcomeLinkSchema)
});
var getAllOutcomeLinksForContextCoursesResponseSchema = getAllOutcomeLinksForContextCoursesResponsesSchema.shape["keyof GetAllOutcomeLinksForContextCoursesResponses"];
var getAllOutcomeGroupsForContextCoursesDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/outcome_groups")
});
var getAllOutcomeGroupsForContextCoursesResponsesSchema = exports_external.object({
  200: exports_external.array(outcomeGroupSchema)
});
var getAllOutcomeGroupsForContextCoursesResponseSchema = getAllOutcomeGroupsForContextCoursesResponsesSchema.shape["keyof GetAllOutcomeGroupsForContextCoursesResponses"];
var deleteOutcomeGroupCoursesDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string(),
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/outcome_groups/{id}")
});
var deleteOutcomeGroupCoursesResponsesSchema = exports_external.object({
  200: outcomeGroupSchema
});
var deleteOutcomeGroupCoursesResponseSchema = deleteOutcomeGroupCoursesResponsesSchema.shape["keyof DeleteOutcomeGroupCoursesResponses"];
var showOutcomeGroupCoursesDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string(),
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/outcome_groups/{id}")
});
var showOutcomeGroupCoursesResponsesSchema = exports_external.object({
  200: outcomeGroupSchema
});
var showOutcomeGroupCoursesResponseSchema = showOutcomeGroupCoursesResponsesSchema.shape["keyof ShowOutcomeGroupCoursesResponses"];
var updateOutcomeGroupCoursesDataSchema = exports_external.object({
  body: exports_external.object({
    description: exports_external.string().optional(),
    parent_outcome_group_id: exports_external.number().optional(),
    title: exports_external.string().optional(),
    vendor_guid: exports_external.string().optional()
  }).optional(),
  path: exports_external.object({
    course_id: exports_external.string(),
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/outcome_groups/{id}")
});
var updateOutcomeGroupCoursesResponsesSchema = exports_external.object({
  200: outcomeGroupSchema
});
var updateOutcomeGroupCoursesResponseSchema = updateOutcomeGroupCoursesResponsesSchema.shape["keyof UpdateOutcomeGroupCoursesResponses"];
var importOutcomeGroupCoursesDataSchema = exports_external.object({
  body: exports_external.object({
    async: exports_external.boolean().optional(),
    source_outcome_group_id: exports_external.number()
  }),
  path: exports_external.object({
    course_id: exports_external.string(),
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/outcome_groups/{id}/import")
});
var importOutcomeGroupCoursesResponsesSchema = exports_external.object({
  200: outcomeGroupSchema
});
var importOutcomeGroupCoursesResponseSchema = importOutcomeGroupCoursesResponsesSchema.shape["keyof ImportOutcomeGroupCoursesResponses"];
var listLinkedOutcomesCoursesDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string(),
    id: exports_external.string()
  }),
  query: exports_external.object({
    outcome_style: exports_external.string().optional(),
    page: exports_external.string().optional(),
    per_page: exports_external.number().optional()
  }).optional(),
  url: exports_external.literal("/v1/courses/{course_id}/outcome_groups/{id}/outcomes")
});
var listLinkedOutcomesCoursesResponsesSchema = exports_external.object({
  200: exports_external.array(outcomeLinkSchema)
});
var listLinkedOutcomesCoursesResponseSchema = listLinkedOutcomesCoursesResponsesSchema.shape["keyof ListLinkedOutcomesCoursesResponses"];
var createLinkOutcomeCoursesDataSchema = exports_external.object({
  body: exports_external.object({
    calculation_int: exports_external.number().optional(),
    calculation_method: exports_external.union([exports_external.literal("decaying_average"), exports_external.literal("n_mastery"), exports_external.literal("latest"), exports_external.literal("highest")]).optional(),
    description: exports_external.string().optional(),
    display_name: exports_external.string().optional(),
    mastery_points: exports_external.number().optional(),
    move_from: exports_external.number().optional(),
    outcome_id: exports_external.number().optional(),
    "ratings[description]": exports_external.array(exports_external.string()).optional(),
    "ratings[points]": exports_external.array(exports_external.number()).optional(),
    title: exports_external.string().optional(),
    vendor_guid: exports_external.string().optional()
  }).optional(),
  path: exports_external.object({
    course_id: exports_external.string(),
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/outcome_groups/{id}/outcomes")
});
var createLinkOutcomeCoursesResponsesSchema = exports_external.object({
  200: outcomeLinkSchema
});
var createLinkOutcomeCoursesResponseSchema = createLinkOutcomeCoursesResponsesSchema.shape["keyof CreateLinkOutcomeCoursesResponses"];
var unlinkOutcomeCoursesDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string(),
    id: exports_external.string(),
    outcome_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/outcome_groups/{id}/outcomes/{outcome_id}")
});
var unlinkOutcomeCoursesResponsesSchema = exports_external.object({
  200: outcomeLinkSchema
});
var unlinkOutcomeCoursesResponseSchema = unlinkOutcomeCoursesResponsesSchema.shape["keyof UnlinkOutcomeCoursesResponses"];
var createLinkOutcomeCoursesOutcomeIdDataSchema = exports_external.object({
  body: exports_external.object({
    calculation_int: exports_external.number().optional(),
    calculation_method: exports_external.union([exports_external.literal("decaying_average"), exports_external.literal("n_mastery"), exports_external.literal("latest"), exports_external.literal("highest")]).optional(),
    description: exports_external.string().optional(),
    display_name: exports_external.string().optional(),
    mastery_points: exports_external.number().optional(),
    move_from: exports_external.number().optional(),
    "ratings[description]": exports_external.array(exports_external.string()).optional(),
    "ratings[points]": exports_external.array(exports_external.number()).optional(),
    title: exports_external.string().optional(),
    vendor_guid: exports_external.string().optional()
  }).optional(),
  path: exports_external.object({
    course_id: exports_external.string(),
    id: exports_external.string(),
    outcome_id: exports_external.number()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/outcome_groups/{id}/outcomes/{outcome_id}")
});
var createLinkOutcomeCoursesOutcomeIdResponsesSchema = exports_external.object({
  200: outcomeLinkSchema
});
var createLinkOutcomeCoursesOutcomeIdResponseSchema = createLinkOutcomeCoursesOutcomeIdResponsesSchema.shape["keyof CreateLinkOutcomeCoursesOutcomeIdResponses"];
var listSubgroupsCoursesDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string(),
    id: exports_external.string()
  }),
  query: exports_external.object({
    page: exports_external.string().optional(),
    per_page: exports_external.number().optional()
  }).optional(),
  url: exports_external.literal("/v1/courses/{course_id}/outcome_groups/{id}/subgroups")
});
var listSubgroupsCoursesResponsesSchema = exports_external.object({
  200: exports_external.array(outcomeGroupSchema)
});
var listSubgroupsCoursesResponseSchema = listSubgroupsCoursesResponsesSchema.shape["keyof ListSubgroupsCoursesResponses"];
var createSubgroupCoursesDataSchema = exports_external.object({
  body: exports_external.object({
    description: exports_external.string().optional(),
    title: exports_external.string(),
    vendor_guid: exports_external.string().optional()
  }),
  path: exports_external.object({
    course_id: exports_external.string(),
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/outcome_groups/{id}/subgroups")
});
var createSubgroupCoursesResponsesSchema = exports_external.object({
  200: outcomeGroupSchema
});
var createSubgroupCoursesResponseSchema = createSubgroupCoursesResponsesSchema.shape["keyof CreateSubgroupCoursesResponses"];
var importOutcomesCoursesDataSchema = exports_external.object({
  body: exports_external.object({
    attachment: exports_external.string().optional(),
    extension: exports_external.string().optional(),
    import_type: exports_external.string().optional()
  }).optional(),
  path: exports_external.object({
    course_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/outcome_imports")
});
var getOutcomeImportStatusCoursesDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string(),
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/outcome_imports/{id}")
});
var getOutcomeResultsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string()
  }),
  query: exports_external.object({
    user_ids: exports_external.array(exports_external.number()).optional(),
    outcome_ids: exports_external.array(exports_external.number()).optional(),
    include: exports_external.array(exports_external.string()).optional(),
    include_hidden: exports_external.boolean().optional()
  }).optional(),
  url: exports_external.literal("/v1/courses/{course_id}/outcome_results")
});
var getOutcomeResultRollupsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string()
  }),
  query: exports_external.object({
    aggregate: exports_external.literal("course").optional(),
    aggregate_stat: exports_external.union([exports_external.literal("mean"), exports_external.literal("median")]).optional(),
    user_ids: exports_external.array(exports_external.number()).optional(),
    outcome_ids: exports_external.array(exports_external.number()).optional(),
    include: exports_external.array(exports_external.string()).optional(),
    exclude: exports_external.array(exports_external.literal("missing_user_rollups")).optional(),
    sort_by: exports_external.union([exports_external.literal("student"), exports_external.literal("outcome")]).optional(),
    sort_outcome_id: exports_external.number().optional(),
    sort_order: exports_external.union([exports_external.literal("asc"), exports_external.literal("desc")]).optional()
  }).optional(),
  url: exports_external.literal("/v1/courses/{course_id}/outcome_rollups")
});
var listPagesCoursesDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string()
  }),
  query: exports_external.object({
    sort: exports_external.union([exports_external.literal("title"), exports_external.literal("created_at"), exports_external.literal("updated_at")]).optional(),
    order: exports_external.union([exports_external.literal("asc"), exports_external.literal("desc")]).optional(),
    search_term: exports_external.string().optional(),
    published: exports_external.boolean().optional(),
    page: exports_external.string().optional(),
    per_page: exports_external.number().optional()
  }).optional(),
  url: exports_external.literal("/v1/courses/{course_id}/pages")
});
var createPageCoursesDataSchema = exports_external.object({
  body: exports_external.object({
    "wiki_page[body]": exports_external.string().optional(),
    "wiki_page[editing_roles]": exports_external.union([exports_external.literal("teachers"), exports_external.literal("students"), exports_external.literal("members"), exports_external.literal("public")]).optional(),
    "wiki_page[front_page]": exports_external.boolean().optional(),
    "wiki_page[notify_of_update]": exports_external.boolean().optional(),
    "wiki_page[published]": exports_external.boolean().optional(),
    "wiki_page[title]": exports_external.string()
  }),
  path: exports_external.object({
    course_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/pages")
});
var deletePageCoursesDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string(),
    url: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/pages/{url}")
});
var showPageCoursesDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string(),
    url: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/pages/{url}")
});
var updateCreatePageCoursesDataSchema = exports_external.object({
  body: exports_external.object({
    "wiki_page[body]": exports_external.string().optional(),
    "wiki_page[editing_roles]": exports_external.union([exports_external.literal("teachers"), exports_external.literal("students"), exports_external.literal("members"), exports_external.literal("public")]).optional(),
    "wiki_page[front_page]": exports_external.boolean().optional(),
    "wiki_page[notify_of_update]": exports_external.boolean().optional(),
    "wiki_page[published]": exports_external.boolean().optional(),
    "wiki_page[title]": exports_external.string().optional()
  }).optional(),
  path: exports_external.object({
    course_id: exports_external.string(),
    url: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/pages/{url}")
});
var duplicatePageDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string(),
    url: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/pages/{url}/duplicate")
});
var listRevisionsCoursesDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string(),
    url: exports_external.string()
  }),
  query: exports_external.object({
    page: exports_external.string().optional(),
    per_page: exports_external.number().optional()
  }).optional(),
  url: exports_external.literal("/v1/courses/{course_id}/pages/{url}/revisions")
});
var showRevisionCoursesLatestDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string(),
    url: exports_external.string()
  }),
  query: exports_external.object({
    summary: exports_external.boolean().optional()
  }).optional(),
  url: exports_external.literal("/v1/courses/{course_id}/pages/{url}/revisions/latest")
});
var showRevisionCoursesRevisionIdDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string(),
    url: exports_external.string(),
    revision_id: exports_external.string()
  }),
  query: exports_external.object({
    summary: exports_external.boolean().optional()
  }).optional(),
  url: exports_external.literal("/v1/courses/{course_id}/pages/{url}/revisions/{revision_id}")
});
var revertToRevisionCoursesDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string(),
    url: exports_external.string(),
    revision_id: exports_external.number()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/pages/{url}/revisions/{revision_id}")
});
var coursePermissionDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string()
  }),
  query: exports_external.object({
    permissions: exports_external.array(exports_external.string()).optional()
  }).optional(),
  url: exports_external.literal("/v1/courses/{course_id}/permissions")
});
var coursePermissionResponsesSchema = exports_external.object({
  200: exports_external.array(permissionSchema)
});
var coursePermissionResponseSchema = coursePermissionResponsesSchema.shape["keyof CoursePermissionResponses"];
var listPotentialMembersCoursesDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string()
  }),
  query: exports_external.object({
    page: exports_external.string().optional(),
    per_page: exports_external.number().optional()
  }).optional(),
  url: exports_external.literal("/v1/courses/{course_id}/potential_collaborators")
});
var previewProcessedHtmlCourseDataSchema = exports_external.object({
  body: exports_external.object({
    html: exports_external.string().optional()
  }).optional(),
  path: exports_external.object({
    course_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/preview_html")
});
var previewProcessedHtmlCourseResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var setExtensionsForStudentQuizSubmissionsDataSchema = exports_external.object({
  body: exports_external.object({
    extend_from_end_at: exports_external.number().optional(),
    extend_from_now: exports_external.number().optional(),
    extra_attempts: exports_external.number().optional(),
    extra_time: exports_external.number().optional(),
    manually_unlocked: exports_external.boolean().optional(),
    user_id: exports_external.number()
  }),
  path: exports_external.object({
    course_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/quiz_extensions")
});
var setExtensionsForStudentQuizSubmissionsResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var listQuizzesInCourseDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string()
  }),
  query: exports_external.object({
    search_term: exports_external.string().optional(),
    page: exports_external.string().optional(),
    per_page: exports_external.number().optional()
  }).optional(),
  url: exports_external.literal("/v1/courses/{course_id}/quizzes")
});
var quizSchema = exports_external.object({
  access_code: exports_external.string().optional().nullable(),
  all_dates: exports_external.array(assignmentDateSchema).optional().nullable(),
  allowed_attempts: exports_external.number().optional().nullable(),
  anonymous_submissions: exports_external.boolean().optional().nullable(),
  assignment_group_id: exports_external.number().optional().nullable(),
  cant_go_back: exports_external.boolean().optional().nullable(),
  description: exports_external.string().optional().nullable(),
  due_at: exports_external.string().optional().nullable(),
  hide_correct_answers_at: exports_external.string().optional().nullable(),
  hide_results: exports_external.string().optional().nullable(),
  html_url: exports_external.string().optional().nullable(),
  id: exports_external.number().optional(),
  ip_filter: exports_external.string().optional().nullable(),
  lock_at: exports_external.string().optional().nullable(),
  lock_explanation: exports_external.string().optional().nullable(),
  lock_info: lockInfoSchema.optional(),
  locked_for_user: exports_external.boolean().optional().nullable(),
  mobile_url: exports_external.string().optional().nullable(),
  one_question_at_a_time: exports_external.boolean().optional().nullable(),
  one_time_results: exports_external.boolean().optional().nullable(),
  permissions: quizPermissionsSchema.optional(),
  points_possible: exports_external.number().optional().nullable(),
  preview_url: exports_external.string().optional().nullable(),
  published: exports_external.boolean().optional().nullable(),
  question_count: exports_external.number().optional().nullable(),
  question_types: exports_external.array(exports_external.string()).optional().nullable(),
  quiz_extensions_url: exports_external.string().optional().nullable(),
  quiz_type: exports_external.string().optional().nullable(),
  scoring_policy: exports_external.string().optional().nullable(),
  show_correct_answers: exports_external.boolean().optional().nullable(),
  show_correct_answers_at: exports_external.string().optional().nullable(),
  show_correct_answers_last_attempt: exports_external.boolean().optional().nullable(),
  shuffle_answers: exports_external.boolean().optional().nullable(),
  speedgrader_url: exports_external.string().optional().nullable(),
  time_limit: exports_external.number().optional().nullable(),
  title: exports_external.string().optional().nullable(),
  unlock_at: exports_external.string().optional().nullable(),
  unpublishable: exports_external.boolean().optional().nullable(),
  version_number: exports_external.number().optional().nullable()
});
var listQuizzesInCourseResponsesSchema = exports_external.object({
  200: exports_external.array(quizSchema)
});
var createQuizDataSchema = exports_external.object({
  body: exports_external.object({
    "quiz[access_code]": exports_external.string().optional(),
    "quiz[allowed_attempts]": exports_external.number().optional(),
    "quiz[assignment_group_id]": exports_external.number().optional(),
    "quiz[cant_go_back]": exports_external.boolean().optional(),
    "quiz[description]": exports_external.string().optional(),
    "quiz[due_at]": exports_external.string().optional(),
    "quiz[hide_correct_answers_at]": exports_external.string().optional(),
    "quiz[hide_results]": exports_external.union([exports_external.literal("always"), exports_external.literal("until_after_last_attempt")]).optional(),
    "quiz[ip_filter]": exports_external.string().optional(),
    "quiz[lock_at]": exports_external.string().optional(),
    "quiz[one_question_at_a_time]": exports_external.boolean().optional(),
    "quiz[one_time_results]": exports_external.boolean().optional(),
    "quiz[only_visible_to_overrides]": exports_external.boolean().optional(),
    "quiz[published]": exports_external.boolean().optional(),
    "quiz[quiz_type]": exports_external.union([exports_external.literal("practice_quiz"), exports_external.literal("assignment"), exports_external.literal("graded_survey"), exports_external.literal("survey")]).optional(),
    "quiz[scoring_policy]": exports_external.union([exports_external.literal("keep_highest"), exports_external.literal("keep_latest")]).optional(),
    "quiz[show_correct_answers]": exports_external.boolean().optional(),
    "quiz[show_correct_answers_at]": exports_external.string().optional(),
    "quiz[show_correct_answers_last_attempt]": exports_external.boolean().optional(),
    "quiz[shuffle_answers]": exports_external.boolean().optional(),
    "quiz[time_limit]": exports_external.number().optional(),
    "quiz[title]": exports_external.string(),
    "quiz[unlock_at]": exports_external.string().optional()
  }),
  path: exports_external.object({
    course_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/quizzes")
});
var createQuizResponsesSchema = exports_external.object({
  200: quizSchema
});
var createQuizResponseSchema = createQuizResponsesSchema.shape["keyof CreateQuizResponses"];
var retrieveAssignmentOverriddenDatesForQuizzesDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string()
  }),
  query: exports_external.object({
    "quiz_assignment_overrides[0][quiz_ids]": exports_external.array(exports_external.number()).optional()
  }).optional(),
  url: exports_external.literal("/v1/courses/{course_id}/quizzes/assignment_overrides")
});
var retrieveAssignmentOverriddenDatesForQuizzesResponsesSchema = exports_external.object({
  200: quizAssignmentOverrideSetContainerSchema
});
var retrieveAssignmentOverriddenDatesForQuizzesResponseSchema = retrieveAssignmentOverriddenDatesForQuizzesResponsesSchema.shape["keyof RetrieveAssignmentOverriddenDatesForQuizzesResponses"];
var deleteQuizDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string(),
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/quizzes/{id}")
});
var deleteQuizResponsesSchema = exports_external.object({
  200: quizSchema
});
var deleteQuizResponseSchema = deleteQuizResponsesSchema.shape["keyof DeleteQuizResponses"];
var getSingleQuizDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string(),
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/quizzes/{id}")
});
var getSingleQuizResponsesSchema = exports_external.object({
  200: quizSchema
});
var getSingleQuizResponseSchema = getSingleQuizResponsesSchema.shape["keyof GetSingleQuizResponses"];
var editQuizDataSchema = exports_external.object({
  body: exports_external.object({
    "quiz[notify_of_update]": exports_external.boolean().optional()
  }).optional(),
  path: exports_external.object({
    course_id: exports_external.string(),
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/quizzes/{id}")
});
var editQuizResponsesSchema = exports_external.object({
  200: quizSchema
});
var editQuizResponseSchema = editQuizResponsesSchema.shape["keyof EditQuizResponses"];
var reorderQuizItemsDataSchema = exports_external.object({
  body: exports_external.object({
    "order[id]": exports_external.array(exports_external.number()),
    "order[type]": exports_external.array(exports_external.union([exports_external.literal("question"), exports_external.literal("group")])).optional()
  }),
  path: exports_external.object({
    course_id: exports_external.string(),
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/quizzes/{id}/reorder")
});
var reorderQuizItemsResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var sendMessageToUnsubmittedOrSubmittedUsersForQuizDataSchema = exports_external.object({
  body: exports_external.object({
    conversations: exports_external.unknown().optional()
  }).optional(),
  path: exports_external.object({
    course_id: exports_external.string(),
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/quizzes/{id}/submission_users/message")
});
var sendMessageToUnsubmittedOrSubmittedUsersForQuizResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var validateQuizAccessCodeDataSchema = exports_external.object({
  body: exports_external.object({
    access_code: exports_external.string()
  }),
  path: exports_external.object({
    course_id: exports_external.string(),
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/quizzes/{id}/validate_access_code")
});
var validateQuizAccessCodeResponsesSchema = exports_external.object({
  200: exports_external.boolean()
});
var validateQuizAccessCodeResponseSchema = validateQuizAccessCodeResponsesSchema.shape["keyof ValidateQuizAccessCodeResponses"];
var setExtensionsForStudentQuizDataSchema = exports_external.object({
  body: exports_external.object({
    "quiz_extensions[extend_from_end_at]": exports_external.array(exports_external.number()).optional(),
    "quiz_extensions[extend_from_now]": exports_external.array(exports_external.number()).optional(),
    "quiz_extensions[extra_attempts]": exports_external.array(exports_external.number()).optional(),
    "quiz_extensions[extra_time]": exports_external.array(exports_external.number()).optional(),
    "quiz_extensions[manually_unlocked]": exports_external.array(exports_external.boolean()).optional(),
    "quiz_extensions[user_id]": exports_external.array(exports_external.number())
  }),
  path: exports_external.object({
    course_id: exports_external.string(),
    quiz_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/quizzes/{quiz_id}/extensions")
});
var setExtensionsForStudentQuizResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var createQuestionGroupDataSchema = exports_external.object({
  body: exports_external.object({
    "quiz_groups[assessment_question_bank_id]": exports_external.array(exports_external.number()).optional(),
    "quiz_groups[name]": exports_external.array(exports_external.string()).optional(),
    "quiz_groups[pick_count]": exports_external.array(exports_external.number()).optional(),
    "quiz_groups[question_points]": exports_external.array(exports_external.number()).optional()
  }).optional(),
  path: exports_external.object({
    course_id: exports_external.string(),
    quiz_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/quizzes/{quiz_id}/groups")
});
var createQuestionGroupResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var deleteQuestionGroupDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string(),
    quiz_id: exports_external.string(),
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/quizzes/{quiz_id}/groups/{id}")
});
var deleteQuestionGroupResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var getSingleQuizGroupDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string(),
    quiz_id: exports_external.string(),
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/quizzes/{quiz_id}/groups/{id}")
});
var getSingleQuizGroupResponsesSchema = exports_external.object({
  200: quizGroupSchema
});
var getSingleQuizGroupResponseSchema = getSingleQuizGroupResponsesSchema.shape["keyof GetSingleQuizGroupResponses"];
var updateQuestionGroupDataSchema = exports_external.object({
  body: exports_external.object({
    "quiz_groups[name]": exports_external.array(exports_external.string()).optional(),
    "quiz_groups[pick_count]": exports_external.array(exports_external.number()).optional(),
    "quiz_groups[question_points]": exports_external.array(exports_external.number()).optional()
  }).optional(),
  path: exports_external.object({
    course_id: exports_external.string(),
    quiz_id: exports_external.string(),
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/quizzes/{quiz_id}/groups/{id}")
});
var updateQuestionGroupResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var reorderQuestionGroupsDataSchema = exports_external.object({
  body: exports_external.object({
    "order[id]": exports_external.array(exports_external.number()),
    "order[type]": exports_external.array(exports_external.literal("question")).optional()
  }),
  path: exports_external.object({
    course_id: exports_external.string(),
    quiz_id: exports_external.string(),
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/quizzes/{quiz_id}/groups/{id}/reorder")
});
var reorderQuestionGroupsResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var getAvailableQuizIpFiltersDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string(),
    quiz_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/quizzes/{quiz_id}/ip_filters")
});
var getAvailableQuizIpFiltersResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var listQuestionsInQuizOrSubmissionDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string(),
    quiz_id: exports_external.string()
  }),
  query: exports_external.object({
    quiz_submission_id: exports_external.number().optional(),
    quiz_submission_attempt: exports_external.number().optional(),
    page: exports_external.string().optional(),
    per_page: exports_external.number().optional()
  }).optional(),
  url: exports_external.literal("/v1/courses/{course_id}/quizzes/{quiz_id}/questions")
});
var listQuestionsInQuizOrSubmissionResponsesSchema = exports_external.object({
  200: exports_external.array(quizQuestionSchema)
});
var listQuestionsInQuizOrSubmissionResponseSchema = listQuestionsInQuizOrSubmissionResponsesSchema.shape["keyof ListQuestionsInQuizOrSubmissionResponses"];
var createSingleQuizQuestionDataSchema = exports_external.object({
  body: exports_external.object({
    "question[answers]": exports_external.unknown().optional(),
    "question[correct_comments]": exports_external.string().optional(),
    "question[incorrect_comments]": exports_external.string().optional(),
    "question[neutral_comments]": exports_external.string().optional(),
    "question[points_possible]": exports_external.number().optional(),
    "question[position]": exports_external.number().optional(),
    "question[question_name]": exports_external.string().optional(),
    "question[question_text]": exports_external.string().optional(),
    "question[question_type]": exports_external.union([exports_external.literal("calculated_question"), exports_external.literal("essay_question"), exports_external.literal("file_upload_question"), exports_external.literal("fill_in_multiple_blanks_question"), exports_external.literal("matching_question"), exports_external.literal("multiple_answers_question"), exports_external.literal("multiple_choice_question"), exports_external.literal("multiple_dropdowns_question"), exports_external.literal("numerical_question"), exports_external.literal("short_answer_question"), exports_external.literal("text_only_question"), exports_external.literal("true_false_question")]).optional(),
    "question[quiz_group_id]": exports_external.number().optional(),
    "question[text_after_answers]": exports_external.string().optional()
  }).optional(),
  path: exports_external.object({
    course_id: exports_external.string(),
    quiz_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/quizzes/{quiz_id}/questions")
});
var createSingleQuizQuestionResponsesSchema = exports_external.object({
  200: quizQuestionSchema
});
var createSingleQuizQuestionResponseSchema = createSingleQuizQuestionResponsesSchema.shape["keyof CreateSingleQuizQuestionResponses"];
var deleteQuizQuestionDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string(),
    quiz_id: exports_external.number(),
    id: exports_external.number()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/quizzes/{quiz_id}/questions/{id}")
});
var deleteQuizQuestionResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var getSingleQuizQuestionDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string(),
    quiz_id: exports_external.string(),
    id: exports_external.number()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/quizzes/{quiz_id}/questions/{id}")
});
var getSingleQuizQuestionResponsesSchema = exports_external.object({
  200: quizQuestionSchema
});
var getSingleQuizQuestionResponseSchema = getSingleQuizQuestionResponsesSchema.shape["keyof GetSingleQuizQuestionResponses"];
var updateExistingQuizQuestionDataSchema = exports_external.object({
  body: exports_external.object({
    "question[answers]": exports_external.unknown().optional(),
    "question[correct_comments]": exports_external.string().optional(),
    "question[incorrect_comments]": exports_external.string().optional(),
    "question[neutral_comments]": exports_external.string().optional(),
    "question[points_possible]": exports_external.number().optional(),
    "question[position]": exports_external.number().optional(),
    "question[question_name]": exports_external.string().optional(),
    "question[question_text]": exports_external.string().optional(),
    "question[question_type]": exports_external.union([exports_external.literal("calculated_question"), exports_external.literal("essay_question"), exports_external.literal("file_upload_question"), exports_external.literal("fill_in_multiple_blanks_question"), exports_external.literal("matching_question"), exports_external.literal("multiple_answers_question"), exports_external.literal("multiple_choice_question"), exports_external.literal("multiple_dropdowns_question"), exports_external.literal("numerical_question"), exports_external.literal("short_answer_question"), exports_external.literal("text_only_question"), exports_external.literal("true_false_question")]).optional(),
    "question[quiz_group_id]": exports_external.number().optional(),
    "question[text_after_answers]": exports_external.string().optional()
  }).optional(),
  path: exports_external.object({
    course_id: exports_external.string(),
    quiz_id: exports_external.number(),
    id: exports_external.number()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/quizzes/{quiz_id}/questions/{id}")
});
var updateExistingQuizQuestionResponsesSchema = exports_external.object({
  200: quizQuestionSchema
});
var updateExistingQuizQuestionResponseSchema = updateExistingQuizQuestionResponsesSchema.shape["keyof UpdateExistingQuizQuestionResponses"];
var retrieveAllQuizReportsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string(),
    quiz_id: exports_external.string()
  }),
  query: exports_external.object({
    includes_all_versions: exports_external.boolean().optional()
  }).optional(),
  url: exports_external.literal("/v1/courses/{course_id}/quizzes/{quiz_id}/reports")
});
var retrieveAllQuizReportsResponsesSchema = exports_external.object({
  200: exports_external.array(quizReportSchema)
});
var retrieveAllQuizReportsResponseSchema = retrieveAllQuizReportsResponsesSchema.shape["keyof RetrieveAllQuizReportsResponses"];
var createQuizReportDataSchema = exports_external.object({
  body: exports_external.object({
    include: exports_external.union([exports_external.literal("file"), exports_external.literal("progress")]).optional(),
    "quiz_report[includes_all_versions]": exports_external.boolean().optional(),
    "quiz_report[report_type]": exports_external.union([exports_external.literal("student_analysis"), exports_external.literal("item_analysis")])
  }),
  path: exports_external.object({
    course_id: exports_external.string(),
    quiz_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/quizzes/{quiz_id}/reports")
});
var createQuizReportResponsesSchema = exports_external.object({
  200: quizReportSchema
});
var createQuizReportResponseSchema = createQuizReportResponsesSchema.shape["keyof CreateQuizReportResponses"];
var abortGenerationOfReportOrRemovePreviouslyGeneratedOneDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string(),
    quiz_id: exports_external.string(),
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/quizzes/{quiz_id}/reports/{id}")
});
var abortGenerationOfReportOrRemovePreviouslyGeneratedOneResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var getQuizReportDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string(),
    quiz_id: exports_external.string(),
    id: exports_external.string()
  }),
  query: exports_external.object({
    include: exports_external.union([exports_external.literal("file"), exports_external.literal("progress")]).optional()
  }).optional(),
  url: exports_external.literal("/v1/courses/{course_id}/quizzes/{quiz_id}/reports/{id}")
});
var getQuizReportResponsesSchema = exports_external.object({
  200: quizReportSchema
});
var getQuizReportResponseSchema = getQuizReportResponsesSchema.shape["keyof GetQuizReportResponses"];
var fetchingLatestQuizStatisticsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string(),
    quiz_id: exports_external.string()
  }),
  query: exports_external.object({
    all_versions: exports_external.boolean().optional()
  }).optional(),
  url: exports_external.literal("/v1/courses/{course_id}/quizzes/{quiz_id}/statistics")
});
var fetchingLatestQuizStatisticsResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var getQuizSubmissionDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string(),
    quiz_id: exports_external.string()
  }),
  query: exports_external.object({
    include: exports_external.array(exports_external.union([exports_external.literal("submission"), exports_external.literal("quiz"), exports_external.literal("user")])).optional()
  }).optional(),
  url: exports_external.literal("/v1/courses/{course_id}/quizzes/{quiz_id}/submission")
});
var getQuizSubmissionResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var getAllQuizSubmissionsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string(),
    quiz_id: exports_external.string()
  }),
  query: exports_external.object({
    include: exports_external.array(exports_external.union([exports_external.literal("submission"), exports_external.literal("quiz"), exports_external.literal("user")])).optional()
  }).optional(),
  url: exports_external.literal("/v1/courses/{course_id}/quizzes/{quiz_id}/submissions")
});
var getAllQuizSubmissionsResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var createQuizSubmissionStartQuizTakingSessionDataSchema = exports_external.object({
  body: exports_external.object({
    access_code: exports_external.string().optional(),
    preview: exports_external.boolean().optional()
  }).optional(),
  path: exports_external.object({
    course_id: exports_external.string(),
    quiz_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/quizzes/{quiz_id}/submissions")
});
var createQuizSubmissionStartQuizTakingSessionResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var uploadFileQuizSubmissionDataSchema = exports_external.object({
  body: exports_external.object({
    name: exports_external.string().optional(),
    on_duplicate: exports_external.string().optional()
  }).optional(),
  path: exports_external.object({
    course_id: exports_external.string(),
    quiz_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/quizzes/{quiz_id}/submissions/self/files")
});
var uploadFileQuizSubmissionResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var getSingleQuizSubmissionDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string(),
    quiz_id: exports_external.string(),
    id: exports_external.string()
  }),
  query: exports_external.object({
    include: exports_external.array(exports_external.union([exports_external.literal("submission"), exports_external.literal("quiz"), exports_external.literal("user")])).optional()
  }).optional(),
  url: exports_external.literal("/v1/courses/{course_id}/quizzes/{quiz_id}/submissions/{id}")
});
var getSingleQuizSubmissionResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var updateStudentQuestionScoresAndCommentsDataSchema = exports_external.object({
  body: exports_external.object({
    "quiz_submissions[attempt]": exports_external.array(exports_external.number()),
    "quiz_submissions[fudge_points]": exports_external.array(exports_external.number()).optional(),
    "quiz_submissions[questions]": exports_external.array(quizSubmissionSchema).optional()
  }),
  path: exports_external.object({
    course_id: exports_external.string(),
    quiz_id: exports_external.string(),
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/quizzes/{quiz_id}/submissions/{id}")
});
var updateStudentQuestionScoresAndCommentsResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var completeQuizSubmissionTurnItInDataSchema = exports_external.object({
  body: exports_external.object({
    access_code: exports_external.string().optional(),
    attempt: exports_external.number(),
    validation_token: exports_external.string()
  }),
  path: exports_external.object({
    course_id: exports_external.string(),
    quiz_id: exports_external.string(),
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/quizzes/{quiz_id}/submissions/{id}/complete")
});
var completeQuizSubmissionTurnItInResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var retrieveCapturedEventsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string(),
    quiz_id: exports_external.string(),
    id: exports_external.string()
  }),
  query: exports_external.object({
    attempt: exports_external.number().optional()
  }).optional(),
  url: exports_external.literal("/v1/courses/{course_id}/quizzes/{quiz_id}/submissions/{id}/events")
});
var retrieveCapturedEventsResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var submitCapturedEventsDataSchema = exports_external.object({
  body: exports_external.object({
    quiz_submission_events: exports_external.array(exports_external.array(exports_external.record(exports_external.unknown())))
  }),
  path: exports_external.object({
    course_id: exports_external.string(),
    quiz_id: exports_external.string(),
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/quizzes/{quiz_id}/submissions/{id}/events")
});
var submitCapturedEventsResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var getCurrentQuizSubmissionTimesDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string(),
    quiz_id: exports_external.string(),
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/quizzes/{quiz_id}/submissions/{id}/time")
});
var getCurrentQuizSubmissionTimesResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var listRecentlyLoggedInStudentsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string()
  }),
  query: exports_external.object({
    page: exports_external.string().optional(),
    per_page: exports_external.number().optional()
  }).optional(),
  url: exports_external.literal("/v1/courses/{course_id}/recent_students")
});
var resetCourseDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/reset_content")
});
var redirectToRootOutcomeGroupForContextCoursesDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/root_outcome_group")
});
var redirectToRootOutcomeGroupForContextCoursesResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var listRubricsCoursesDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string()
  }),
  query: exports_external.object({
    page: exports_external.string().optional(),
    per_page: exports_external.number().optional()
  }).optional(),
  url: exports_external.literal("/v1/courses/{course_id}/rubrics")
});
var listRubricsCoursesResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var getSingleRubricCoursesDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string(),
    id: exports_external.string()
  }),
  query: exports_external.object({
    include: exports_external.union([exports_external.literal("assessments"), exports_external.literal("graded_assessments"), exports_external.literal("peer_assessments")]).optional(),
    style: exports_external.union([exports_external.literal("full"), exports_external.literal("comments_only")]).optional()
  }).optional(),
  url: exports_external.literal("/v1/courses/{course_id}/rubrics/{id}")
});
var getSingleRubricCoursesResponsesSchema = exports_external.object({
  200: rubricSchema
});
var getSingleRubricCoursesResponseSchema = getSingleRubricCoursesResponsesSchema.shape["keyof GetSingleRubricCoursesResponses"];
var listUsersInCourseSearchUsersDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string()
  }),
  query: exports_external.object({
    page: exports_external.string().optional(),
    per_page: exports_external.number().optional(),
    search_term: exports_external.string().optional(),
    enrollment_type: exports_external.array(exports_external.union([exports_external.literal("teacher"), exports_external.literal("student"), exports_external.literal("student_view"), exports_external.literal("ta"), exports_external.literal("observer"), exports_external.literal("designer")])).optional(),
    enrollment_role: exports_external.string().optional(),
    enrollment_role_id: exports_external.number().optional(),
    include: exports_external.array(exports_external.union([exports_external.literal("email"), exports_external.literal("enrollments"), exports_external.literal("locked"), exports_external.literal("avatar_url"), exports_external.literal("test_student"), exports_external.literal("bio"), exports_external.literal("custom_links"), exports_external.literal("current_grading_period_scores")])).optional(),
    user_id: exports_external.string().optional(),
    user_ids: exports_external.array(exports_external.number()).optional(),
    enrollment_state: exports_external.array(exports_external.union([exports_external.literal("active"), exports_external.literal("invited"), exports_external.literal("rejected"), exports_external.literal("completed"), exports_external.literal("inactive")])).optional()
  }).optional(),
  url: exports_external.literal("/v1/courses/{course_id}/search_users")
});
var listCourseSectionsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string()
  }),
  query: exports_external.object({
    include: exports_external.array(exports_external.union([exports_external.literal("students"), exports_external.literal("avatar_url"), exports_external.literal("enrollments"), exports_external.literal("total_students"), exports_external.literal("passback_status")])).optional(),
    page: exports_external.string().optional(),
    per_page: exports_external.number().optional()
  }).optional(),
  url: exports_external.literal("/v1/courses/{course_id}/sections")
});
var sectionSchema = exports_external.object({
  course_id: exports_external.number().optional().nullable(),
  end_at: exports_external.string().optional().nullable(),
  id: exports_external.number().optional(),
  integration_id: exports_external.string().optional().nullable(),
  name: exports_external.string().optional().nullable(),
  nonxlist_course_id: exports_external.number().optional().nullable(),
  restrict_enrollments_to_section_dates: exports_external.boolean().optional().nullable(),
  sis_course_id: exports_external.string().optional().nullable(),
  sis_import_id: exports_external.number().optional().nullable(),
  sis_section_id: exports_external.string().optional().nullable(),
  start_at: exports_external.string().optional().nullable(),
  students: exports_external.array(userSectionIncludeSchema).optional().nullable(),
  total_students: exports_external.number().optional().nullable()
});
var listCourseSectionsResponsesSchema = exports_external.object({
  200: exports_external.array(sectionSchema)
});
var createCourseSectionDataSchema = exports_external.object({
  body: exports_external.object({
    "course_section[end_at]": exports_external.string().optional(),
    "course_section[integration_id]": exports_external.string().optional(),
    "course_section[name]": exports_external.string().optional(),
    "course_section[restrict_enrollments_to_section_dates]": exports_external.boolean().optional(),
    "course_section[sis_section_id]": exports_external.string().optional(),
    "course_section[start_at]": exports_external.string().optional(),
    enable_sis_reactivation: exports_external.boolean().optional()
  }).optional(),
  path: exports_external.object({
    course_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/sections")
});
var createCourseSectionResponsesSchema = exports_external.object({
  200: sectionSchema
});
var createCourseSectionResponseSchema = createCourseSectionResponsesSchema.shape["keyof CreateCourseSectionResponses"];
var getSectionInformationCoursesDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string(),
    id: exports_external.string()
  }),
  query: exports_external.object({
    include: exports_external.array(exports_external.union([exports_external.literal("students"), exports_external.literal("avatar_url"), exports_external.literal("enrollments"), exports_external.literal("total_students"), exports_external.literal("passback_status")])).optional()
  }).optional(),
  url: exports_external.literal("/v1/courses/{course_id}/sections/{id}")
});
var getSectionInformationCoursesResponsesSchema = exports_external.object({
  200: sectionSchema
});
var getSectionInformationCoursesResponseSchema = getSectionInformationCoursesResponsesSchema.shape["keyof GetSectionInformationCoursesResponses"];
var getCourseSettingsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/settings")
});
var getCourseSettingsResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var updateCourseSettingsDataSchema = exports_external.object({
  body: exports_external.object({
    allow_student_discussion_editing: exports_external.boolean().optional(),
    allow_student_discussion_topics: exports_external.boolean().optional(),
    allow_student_forum_attachments: exports_external.boolean().optional(),
    allow_student_organized_groups: exports_external.boolean().optional(),
    hide_distribution_graphs: exports_external.boolean().optional(),
    hide_final_grades: exports_external.boolean().optional(),
    home_page_announcement_limit: exports_external.number().optional(),
    lock_all_announcements: exports_external.boolean().optional(),
    restrict_student_future_view: exports_external.boolean().optional(),
    restrict_student_past_view: exports_external.boolean().optional(),
    show_announcements_on_home_page: exports_external.boolean().optional()
  }).optional(),
  path: exports_external.object({
    course_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/settings")
});
var updateCourseSettingsResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var listStudentsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string()
  }),
  query: exports_external.object({
    page: exports_external.string().optional(),
    per_page: exports_external.number().optional()
  }).optional(),
  url: exports_external.literal("/v1/courses/{course_id}/students")
});
var listSubmissionsForMultipleAssignmentsCoursesDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string()
  }),
  query: exports_external.object({
    "student_ids[]": exports_external.array(exports_external.string()).optional(),
    assignment_ids: exports_external.array(exports_external.string()).optional(),
    grouped: exports_external.boolean().optional(),
    post_to_sis: exports_external.boolean().optional(),
    submitted_since: exports_external.string().optional(),
    graded_since: exports_external.string().optional(),
    grading_period_id: exports_external.number().optional(),
    workflow_state: exports_external.union([exports_external.literal("submitted"), exports_external.literal("unsubmitted"), exports_external.literal("graded"), exports_external.literal("pending_review")]).optional(),
    enrollment_state: exports_external.union([exports_external.literal("active"), exports_external.literal("concluded")]).optional(),
    state_based_on_date: exports_external.boolean().optional(),
    order: exports_external.union([exports_external.literal("id"), exports_external.literal("graded_at")]).optional(),
    order_direction: exports_external.union([exports_external.literal("ascending"), exports_external.literal("descending")]).optional(),
    "include[]": exports_external.array(exports_external.union([exports_external.literal("submission_history"), exports_external.literal("submission_comments"), exports_external.literal("rubric_assessment"), exports_external.literal("assignment"), exports_external.literal("total_scores"), exports_external.literal("visibility"), exports_external.literal("course"), exports_external.literal("user")])).optional(),
    page: exports_external.string().optional(),
    per_page: exports_external.number().optional()
  }).optional(),
  url: exports_external.literal("/v1/courses/{course_id}/students/submissions")
});
var gradeOrCommentOnMultipleSubmissionsCoursesSubmissionsDataSchema = exports_external.object({
  body: exports_external.object({
    "grade_data[student_id][assignment_id]": exports_external.number().optional(),
    "grade_data[student_id][excuse]": exports_external.boolean().optional(),
    "grade_data[student_id][file_ids]": exports_external.array(exports_external.number()).optional(),
    "grade_data[student_id][group_comment]": exports_external.boolean().optional(),
    "grade_data[student_id][media_comment_id]": exports_external.string().optional(),
    "grade_data[student_id][media_comment_type]": exports_external.union([exports_external.literal("audio"), exports_external.literal("video")]).optional(),
    "grade_data[student_id][posted_grade]": exports_external.string().optional(),
    "grade_data[student_id][rubric_assessment]": exports_external.unknown().optional(),
    "grade_data[student_id][text_comment]": exports_external.string().optional()
  }).optional(),
  path: exports_external.object({
    course_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/submissions/update_grades")
});
var gradeOrCommentOnMultipleSubmissionsCoursesSubmissionsResponsesSchema = exports_external.object({
  200: progressSchema
});
var gradeOrCommentOnMultipleSubmissionsCoursesSubmissionsResponseSchema = gradeOrCommentOnMultipleSubmissionsCoursesSubmissionsResponsesSchema.shape["keyof GradeOrCommentOnMultipleSubmissionsCoursesSubmissionsResponses"];
var listAvailableTabsForCourseOrGroupCoursesDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string()
  }),
  query: exports_external.object({
    include: exports_external.array(exports_external.literal("external")).optional(),
    page: exports_external.string().optional(),
    per_page: exports_external.number().optional()
  }).optional(),
  url: exports_external.literal("/v1/courses/{course_id}/tabs")
});
var listAvailableTabsForCourseOrGroupCoursesResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var updateTabForCourseDataSchema = exports_external.object({
  body: exports_external.object({
    hidden: exports_external.boolean().optional(),
    position: exports_external.number().optional()
  }).optional(),
  path: exports_external.object({
    course_id: exports_external.string(),
    tab_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/tabs/{tab_id}")
});
var updateTabForCourseResponsesSchema = exports_external.object({
  200: tabSchema
});
var updateTabForCourseResponseSchema = updateTabForCourseResponsesSchema.shape["keyof UpdateTabForCourseResponses"];
var courseTodoItemsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/todo")
});
var courseTodoItemsResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var removeUsageRightsCoursesDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string()
  }),
  query: exports_external.object({
    file_ids: exports_external.array(exports_external.string()),
    folder_ids: exports_external.array(exports_external.string()).optional()
  }),
  url: exports_external.literal("/v1/courses/{course_id}/usage_rights")
});
var removeUsageRightsCoursesResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var setUsageRightsCoursesDataSchema = exports_external.object({
  body: exports_external.object({
    file_ids: exports_external.array(exports_external.string()),
    folder_ids: exports_external.array(exports_external.string()).optional(),
    publish: exports_external.boolean().optional(),
    "usage_rights[legal_copyright]": exports_external.string().optional(),
    "usage_rights[license]": exports_external.string().optional(),
    "usage_rights[use_justification]": exports_external.union([exports_external.literal("own_copyright"), exports_external.literal("used_by_permission"), exports_external.literal("fair_use"), exports_external.literal("public_domain"), exports_external.literal("creative_commons")])
  }),
  path: exports_external.object({
    course_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/usage_rights")
});
var setUsageRightsCoursesResponsesSchema = exports_external.object({
  200: usageRightsSchema
});
var setUsageRightsCoursesResponseSchema = setUsageRightsCoursesResponsesSchema.shape["keyof SetUsageRightsCoursesResponses"];
var listUsersInCourseUsersDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string()
  }),
  query: exports_external.object({
    page: exports_external.number().optional(),
    per_page: exports_external.number().optional(),
    search_term: exports_external.string().optional(),
    "enrollment_type[]": exports_external.array(exports_external.union([exports_external.literal("teacher"), exports_external.literal("student"), exports_external.literal("student_view"), exports_external.literal("ta"), exports_external.literal("observer"), exports_external.literal("designer")])).optional(),
    enrollment_role: exports_external.string().optional(),
    enrollment_role_id: exports_external.number().optional(),
    "include[]": exports_external.array(exports_external.union([exports_external.literal("email"), exports_external.literal("enrollments"), exports_external.literal("locked"), exports_external.literal("avatar_url"), exports_external.literal("test_student"), exports_external.literal("bio"), exports_external.literal("custom_links"), exports_external.literal("current_grading_period_scores"), exports_external.literal("sections")])).optional(),
    user_id: exports_external.string().optional(),
    "user_ids[]": exports_external.array(exports_external.number()).optional(),
    "enrollment_state[]": exports_external.array(exports_external.union([exports_external.literal("active"), exports_external.literal("invited"), exports_external.literal("rejected"), exports_external.literal("completed"), exports_external.literal("inactive")])).optional()
  }).optional(),
  url: exports_external.literal("/v1/courses/{course_id}/users")
});
var getSingleUserDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string(),
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/users/{id}")
});
var addsLastAttendedDateToStudentEnrollmentInCourseDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string(),
    user_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{course_id}/users/{user_id}/last_attended")
});
var deleteConcludeCourseDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    id: exports_external.string()
  }),
  query: exports_external.object({
    event: exports_external.union([exports_external.literal("delete"), exports_external.literal("conclude")])
  }),
  url: exports_external.literal("/v1/courses/{id}")
});
var deleteConcludeCourseResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var getSingleCourseCoursesDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    id: exports_external.string()
  }),
  query: exports_external.object({
    include: exports_external.array(exports_external.union([exports_external.literal("needs_grading_count"), exports_external.literal("syllabus_body"), exports_external.literal("public_description"), exports_external.literal("total_scores"), exports_external.literal("current_grading_period_scores"), exports_external.literal("term"), exports_external.literal("account"), exports_external.literal("course_progress"), exports_external.literal("sections"), exports_external.literal("storage_quota_used_mb"), exports_external.literal("total_students"), exports_external.literal("passback_status"), exports_external.literal("favorites"), exports_external.literal("teachers"), exports_external.literal("observed_users"), exports_external.literal("all_courses"), exports_external.literal("permissions"), exports_external.literal("course_image")])).optional()
  }).optional(),
  url: exports_external.literal("/v1/courses/{id}")
});
var updateCourseDataSchema = exports_external.object({
  body: exports_external.object({
    "course[account_id]": exports_external.number().optional(),
    "course[allow_student_forum_attachments]": exports_external.boolean().optional(),
    "course[allow_student_wiki_edits]": exports_external.boolean().optional(),
    "course[allow_wiki_comments]": exports_external.boolean().optional(),
    "course[apply_assignment_group_weights]": exports_external.boolean().optional(),
    "course[blueprint]": exports_external.boolean().optional(),
    "course[blueprint_restrictions]": exports_external.unknown().optional(),
    "course[blueprint_restrictions_by_object_type]": exports_external.unknown().optional(),
    "course[course_code]": exports_external.string().optional(),
    "course[course_format]": exports_external.string().optional(),
    "course[default_view]": exports_external.union([exports_external.literal("feed"), exports_external.literal("wiki"), exports_external.literal("modules"), exports_external.literal("syllabus"), exports_external.literal("assignments")]).optional(),
    "course[end_at]": exports_external.string().optional(),
    "course[event]": exports_external.union([exports_external.literal("claim"), exports_external.literal("offer"), exports_external.literal("conclude"), exports_external.literal("delete"), exports_external.literal("undelete")]).optional(),
    "course[grading_standard_id]": exports_external.number().optional(),
    "course[hide_final_grades]": exports_external.boolean().optional(),
    "course[image_id]": exports_external.number().optional(),
    "course[image_url]": exports_external.string().optional(),
    "course[integration_id]": exports_external.string().optional(),
    "course[is_public]": exports_external.boolean().optional(),
    "course[is_public_to_auth_users]": exports_external.boolean().optional(),
    "course[license]": exports_external.string().optional(),
    "course[name]": exports_external.string().optional(),
    "course[open_enrollment]": exports_external.boolean().optional(),
    "course[public_description]": exports_external.string().optional(),
    "course[public_syllabus]": exports_external.boolean().optional(),
    "course[public_syllabus_to_auth]": exports_external.boolean().optional(),
    "course[remove_image]": exports_external.boolean().optional(),
    "course[restrict_enrollments_to_course_dates]": exports_external.boolean().optional(),
    "course[self_enrollment]": exports_external.boolean().optional(),
    "course[sis_course_id]": exports_external.string().optional(),
    "course[start_at]": exports_external.string().optional(),
    "course[storage_quota_mb]": exports_external.number().optional(),
    "course[syllabus_body]": exports_external.string().optional(),
    "course[term_id]": exports_external.number().optional(),
    "course[time_zone]": exports_external.string().optional(),
    "course[use_blueprint_restrictions_by_object_type]": exports_external.boolean().optional(),
    offer: exports_external.boolean().optional()
  }).optional(),
  path: exports_external.object({
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{id}")
});
var updateCourseResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var getLatePolicyDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{id}/late_policy")
});
var getLatePolicyResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var patchLatePolicyDataSchema = exports_external.object({
  body: exports_external.object({
    "late_policy[late_submission_deduction]": exports_external.number().optional(),
    "late_policy[late_submission_deduction_enabled]": exports_external.boolean().optional(),
    "late_policy[late_submission_interval]": exports_external.string().optional(),
    "late_policy[late_submission_minimum_percent]": exports_external.number().optional(),
    "late_policy[late_submission_minimum_percent_enabled]": exports_external.boolean().optional(),
    "late_policy[missing_submission_deduction]": exports_external.number().optional(),
    "late_policy[missing_submission_deduction_enabled]": exports_external.boolean().optional()
  }).optional(),
  path: exports_external.object({
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{id}/late_policy")
});
var patchLatePolicyResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var createLatePolicyDataSchema = exports_external.object({
  body: exports_external.object({
    "late_policy[late_submission_deduction]": exports_external.number().optional(),
    "late_policy[late_submission_deduction_enabled]": exports_external.boolean().optional(),
    "late_policy[late_submission_interval]": exports_external.string().optional(),
    "late_policy[late_submission_minimum_percent]": exports_external.number().optional(),
    "late_policy[late_submission_minimum_percent_enabled]": exports_external.boolean().optional(),
    "late_policy[missing_submission_deduction]": exports_external.number().optional(),
    "late_policy[missing_submission_deduction_enabled]": exports_external.boolean().optional()
  }).optional(),
  path: exports_external.object({
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/courses/{id}/late_policy")
});
var createLatePolicyResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var listCoursesWithTheirLatestEpubExportDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.never().optional(),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/epub_exports")
});
var courseEpubExportSchema = exports_external.object({
  epub_export: epubExportNullableSchema.optional(),
  id: exports_external.number().optional(),
  name: exports_external.string().optional().nullable()
});
var listCoursesWithTheirLatestEpubExportResponsesSchema = exports_external.object({
  200: exports_external.array(courseEpubExportSchema)
});
var createErrorReportDataSchema = exports_external.object({
  body: exports_external.object({
    "error[comments]": exports_external.string().optional(),
    "error[email]": exports_external.string().optional(),
    "error[http_env]": exports_external.unknown().optional(),
    "error[subject]": exports_external.string(),
    "error[url]": exports_external.string().optional()
  }),
  path: exports_external.never().optional(),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/error_reports")
});
var createErrorReportResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var deleteFileDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    id: exports_external.string()
  }),
  query: exports_external.object({
    replace: exports_external.boolean().optional()
  }).optional(),
  url: exports_external.literal("/v1/files/{id}")
});
var deleteFileResponsesSchema = exports_external.object({
  200: fileSchema
});
var deleteFileResponseSchema = deleteFileResponsesSchema.shape["keyof DeleteFileResponses"];
var getFileFilesDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    id: exports_external.string()
  }),
  query: exports_external.object({
    include: exports_external.array(exports_external.literal("user")).optional()
  }).optional(),
  url: exports_external.literal("/v1/files/{id}")
});
var getFileFilesResponsesSchema = exports_external.object({
  200: fileSchema
});
var getFileFilesResponseSchema = getFileFilesResponsesSchema.shape["keyof GetFileFilesResponses"];
var updateFileDataSchema = exports_external.object({
  body: exports_external.object({
    hidden: exports_external.boolean().optional(),
    lock_at: exports_external.string().optional(),
    locked: exports_external.boolean().optional(),
    name: exports_external.string().optional(),
    on_duplicate: exports_external.union([exports_external.literal("overwrite"), exports_external.literal("rename")]).optional(),
    parent_folder_id: exports_external.string().optional(),
    unlock_at: exports_external.string().optional()
  }).optional(),
  path: exports_external.object({
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/files/{id}")
});
var updateFileResponsesSchema = exports_external.object({
  200: fileSchema
});
var updateFileResponseSchema = updateFileResponsesSchema.shape["keyof UpdateFileResponses"];
var getPublicInlinePreviewUrlDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    id: exports_external.string()
  }),
  query: exports_external.object({
    submission_id: exports_external.number().optional()
  }).optional(),
  url: exports_external.literal("/v1/files/{id}/public_url")
});
var getPublicInlinePreviewUrlResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var copyFileDataSchema = exports_external.object({
  body: exports_external.object({
    on_duplicate: exports_external.union([exports_external.literal("overwrite"), exports_external.literal("rename")]).optional(),
    source_file_id: exports_external.string()
  }),
  path: exports_external.object({
    dest_folder_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/folders/{dest_folder_id}/copy_file")
});
var copyFileResponsesSchema = exports_external.object({
  200: fileSchema
});
var copyFileResponseSchema = copyFileResponsesSchema.shape["keyof CopyFileResponses"];
var copyFolderDataSchema = exports_external.object({
  body: exports_external.object({
    source_folder_id: exports_external.string()
  }),
  path: exports_external.object({
    dest_folder_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/folders/{dest_folder_id}/copy_folder")
});
var copyFolderResponsesSchema = exports_external.object({
  200: folderSchema
});
var copyFolderResponseSchema = copyFolderResponsesSchema.shape["keyof CopyFolderResponses"];
var uploadFileToFolderDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    folder_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/folders/{folder_id}/files")
});
var uploadFileToFolderResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var createFolderFoldersDataSchema = exports_external.object({
  body: exports_external.object({
    hidden: exports_external.boolean().optional(),
    lock_at: exports_external.string().optional(),
    locked: exports_external.boolean().optional(),
    name: exports_external.string(),
    parent_folder_id: exports_external.string().optional(),
    parent_folder_path: exports_external.string().optional(),
    position: exports_external.number().optional(),
    unlock_at: exports_external.string().optional()
  }),
  path: exports_external.object({
    folder_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/folders/{folder_id}/folders")
});
var createFolderFoldersResponsesSchema = exports_external.object({
  200: folderSchema
});
var createFolderFoldersResponseSchema = createFolderFoldersResponsesSchema.shape["keyof CreateFolderFoldersResponses"];
var deleteFolderDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    id: exports_external.string()
  }),
  query: exports_external.object({
    force: exports_external.boolean().optional()
  }).optional(),
  url: exports_external.literal("/v1/folders/{id}")
});
var deleteFolderResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var getFolderFoldersDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/folders/{id}")
});
var getFolderFoldersResponsesSchema = exports_external.object({
  200: folderSchema
});
var getFolderFoldersResponseSchema = getFolderFoldersResponsesSchema.shape["keyof GetFolderFoldersResponses"];
var updateFolderDataSchema = exports_external.object({
  body: exports_external.object({
    hidden: exports_external.boolean().optional(),
    lock_at: exports_external.string().optional(),
    locked: exports_external.boolean().optional(),
    name: exports_external.string().optional(),
    parent_folder_id: exports_external.string().optional(),
    position: exports_external.number().optional(),
    unlock_at: exports_external.string().optional()
  }).optional(),
  path: exports_external.object({
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/folders/{id}")
});
var updateFolderResponsesSchema = exports_external.object({
  200: folderSchema
});
var updateFolderResponseSchema = updateFolderResponsesSchema.shape["keyof UpdateFolderResponses"];
var listFilesFoldersDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    id: exports_external.string()
  }),
  query: exports_external.object({
    content_types: exports_external.array(exports_external.string()).optional(),
    search_term: exports_external.string().optional(),
    include: exports_external.array(exports_external.literal("user")).optional(),
    only: exports_external.array(exports_external.array(exports_external.record(exports_external.unknown()))).optional(),
    sort: exports_external.union([exports_external.literal("name"), exports_external.literal("size"), exports_external.literal("created_at"), exports_external.literal("updated_at"), exports_external.literal("content_type"), exports_external.literal("user")]).optional(),
    order: exports_external.union([exports_external.literal("asc"), exports_external.literal("desc")]).optional(),
    page: exports_external.string().optional(),
    per_page: exports_external.number().optional()
  }).optional(),
  url: exports_external.literal("/v1/folders/{id}/files")
});
var listFilesFoldersResponsesSchema = exports_external.object({
  200: exports_external.array(fileSchema)
});
var listFilesFoldersResponseSchema = listFilesFoldersResponsesSchema.shape["keyof ListFilesFoldersResponses"];
var listFoldersDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    id: exports_external.string()
  }),
  query: exports_external.object({
    page: exports_external.string().optional(),
    per_page: exports_external.number().optional()
  }).optional(),
  url: exports_external.literal("/v1/folders/{id}/folders")
});
var listFoldersResponsesSchema = exports_external.object({
  200: exports_external.array(folderSchema)
});
var listFoldersResponseSchema = listFoldersResponsesSchema.shape["keyof ListFoldersResponses"];
var deleteOutcomeGroupGlobalDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/global/outcome_groups/{id}")
});
var deleteOutcomeGroupGlobalResponsesSchema = exports_external.object({
  200: outcomeGroupSchema
});
var deleteOutcomeGroupGlobalResponseSchema = deleteOutcomeGroupGlobalResponsesSchema.shape["keyof DeleteOutcomeGroupGlobalResponses"];
var showOutcomeGroupGlobalDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/global/outcome_groups/{id}")
});
var showOutcomeGroupGlobalResponsesSchema = exports_external.object({
  200: outcomeGroupSchema
});
var showOutcomeGroupGlobalResponseSchema = showOutcomeGroupGlobalResponsesSchema.shape["keyof ShowOutcomeGroupGlobalResponses"];
var updateOutcomeGroupGlobalDataSchema = exports_external.object({
  body: exports_external.object({
    description: exports_external.string().optional(),
    parent_outcome_group_id: exports_external.number().optional(),
    title: exports_external.string().optional(),
    vendor_guid: exports_external.string().optional()
  }).optional(),
  path: exports_external.object({
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/global/outcome_groups/{id}")
});
var updateOutcomeGroupGlobalResponsesSchema = exports_external.object({
  200: outcomeGroupSchema
});
var updateOutcomeGroupGlobalResponseSchema = updateOutcomeGroupGlobalResponsesSchema.shape["keyof UpdateOutcomeGroupGlobalResponses"];
var importOutcomeGroupGlobalDataSchema = exports_external.object({
  body: exports_external.object({
    async: exports_external.boolean().optional(),
    source_outcome_group_id: exports_external.number()
  }),
  path: exports_external.object({
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/global/outcome_groups/{id}/import")
});
var importOutcomeGroupGlobalResponsesSchema = exports_external.object({
  200: outcomeGroupSchema
});
var importOutcomeGroupGlobalResponseSchema = importOutcomeGroupGlobalResponsesSchema.shape["keyof ImportOutcomeGroupGlobalResponses"];
var listLinkedOutcomesGlobalDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    id: exports_external.string()
  }),
  query: exports_external.object({
    outcome_style: exports_external.string().optional(),
    page: exports_external.string().optional(),
    per_page: exports_external.number().optional()
  }).optional(),
  url: exports_external.literal("/v1/global/outcome_groups/{id}/outcomes")
});
var listLinkedOutcomesGlobalResponsesSchema = exports_external.object({
  200: exports_external.array(outcomeLinkSchema)
});
var listLinkedOutcomesGlobalResponseSchema = listLinkedOutcomesGlobalResponsesSchema.shape["keyof ListLinkedOutcomesGlobalResponses"];
var createLinkOutcomeGlobalDataSchema = exports_external.object({
  body: exports_external.object({
    calculation_int: exports_external.number().optional(),
    calculation_method: exports_external.union([exports_external.literal("decaying_average"), exports_external.literal("n_mastery"), exports_external.literal("latest"), exports_external.literal("highest")]).optional(),
    description: exports_external.string().optional(),
    display_name: exports_external.string().optional(),
    mastery_points: exports_external.number().optional(),
    move_from: exports_external.number().optional(),
    outcome_id: exports_external.number().optional(),
    "ratings[description]": exports_external.array(exports_external.string()).optional(),
    "ratings[points]": exports_external.array(exports_external.number()).optional(),
    title: exports_external.string().optional(),
    vendor_guid: exports_external.string().optional()
  }).optional(),
  path: exports_external.object({
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/global/outcome_groups/{id}/outcomes")
});
var createLinkOutcomeGlobalResponsesSchema = exports_external.object({
  200: outcomeLinkSchema
});
var createLinkOutcomeGlobalResponseSchema = createLinkOutcomeGlobalResponsesSchema.shape["keyof CreateLinkOutcomeGlobalResponses"];
var unlinkOutcomeGlobalDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    id: exports_external.string(),
    outcome_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/global/outcome_groups/{id}/outcomes/{outcome_id}")
});
var unlinkOutcomeGlobalResponsesSchema = exports_external.object({
  200: outcomeLinkSchema
});
var unlinkOutcomeGlobalResponseSchema = unlinkOutcomeGlobalResponsesSchema.shape["keyof UnlinkOutcomeGlobalResponses"];
var createLinkOutcomeGlobalOutcomeIdDataSchema = exports_external.object({
  body: exports_external.object({
    calculation_int: exports_external.number().optional(),
    calculation_method: exports_external.union([exports_external.literal("decaying_average"), exports_external.literal("n_mastery"), exports_external.literal("latest"), exports_external.literal("highest")]).optional(),
    description: exports_external.string().optional(),
    display_name: exports_external.string().optional(),
    mastery_points: exports_external.number().optional(),
    move_from: exports_external.number().optional(),
    "ratings[description]": exports_external.array(exports_external.string()).optional(),
    "ratings[points]": exports_external.array(exports_external.number()).optional(),
    title: exports_external.string().optional(),
    vendor_guid: exports_external.string().optional()
  }).optional(),
  path: exports_external.object({
    id: exports_external.string(),
    outcome_id: exports_external.number()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/global/outcome_groups/{id}/outcomes/{outcome_id}")
});
var createLinkOutcomeGlobalOutcomeIdResponsesSchema = exports_external.object({
  200: outcomeLinkSchema
});
var createLinkOutcomeGlobalOutcomeIdResponseSchema = createLinkOutcomeGlobalOutcomeIdResponsesSchema.shape["keyof CreateLinkOutcomeGlobalOutcomeIdResponses"];
var listSubgroupsGlobalDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    id: exports_external.string()
  }),
  query: exports_external.object({
    page: exports_external.string().optional(),
    per_page: exports_external.number().optional()
  }).optional(),
  url: exports_external.literal("/v1/global/outcome_groups/{id}/subgroups")
});
var listSubgroupsGlobalResponsesSchema = exports_external.object({
  200: exports_external.array(outcomeGroupSchema)
});
var listSubgroupsGlobalResponseSchema = listSubgroupsGlobalResponsesSchema.shape["keyof ListSubgroupsGlobalResponses"];
var createSubgroupGlobalDataSchema = exports_external.object({
  body: exports_external.object({
    description: exports_external.string().optional(),
    title: exports_external.string(),
    vendor_guid: exports_external.string().optional()
  }),
  path: exports_external.object({
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/global/outcome_groups/{id}/subgroups")
});
var createSubgroupGlobalResponsesSchema = exports_external.object({
  200: outcomeGroupSchema
});
var createSubgroupGlobalResponseSchema = createSubgroupGlobalResponsesSchema.shape["keyof CreateSubgroupGlobalResponses"];
var redirectToRootOutcomeGroupForContextGlobalDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.never().optional(),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/global/root_outcome_group")
});
var redirectToRootOutcomeGroupForContextGlobalResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var deleteGroupCategoryDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    group_category_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/group_categories/{group_category_id}")
});
var deleteGroupCategoryResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var getSingleGroupCategoryDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    group_category_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/group_categories/{group_category_id}")
});
var getSingleGroupCategoryResponsesSchema = exports_external.object({
  200: groupCategorySchema
});
var getSingleGroupCategoryResponseSchema = getSingleGroupCategoryResponsesSchema.shape["keyof GetSingleGroupCategoryResponses"];
var updateGroupCategoryDataSchema = exports_external.object({
  body: exports_external.object({
    auto_leader: exports_external.union([exports_external.literal("first"), exports_external.literal("random")]).optional(),
    create_group_count: exports_external.number().optional(),
    group_limit: exports_external.number().optional(),
    name: exports_external.string().optional(),
    self_signup: exports_external.union([exports_external.literal("enabled"), exports_external.literal("restricted")]).optional(),
    sis_group_category_id: exports_external.string().optional(),
    split_group_count: exports_external.string().optional()
  }).optional(),
  path: exports_external.object({
    group_category_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/group_categories/{group_category_id}")
});
var updateGroupCategoryResponsesSchema = exports_external.object({
  200: groupCategorySchema
});
var updateGroupCategoryResponseSchema = updateGroupCategoryResponsesSchema.shape["keyof UpdateGroupCategoryResponses"];
var assignUnassignedMembersDataSchema = exports_external.object({
  body: exports_external.object({
    sync: exports_external.boolean().optional()
  }).optional(),
  path: exports_external.object({
    group_category_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/group_categories/{group_category_id}/assign_unassigned_members")
});
var assignUnassignedMembersResponsesSchema = exports_external.object({
  200: groupMembershipSchema
});
var assignUnassignedMembersResponseSchema = assignUnassignedMembersResponsesSchema.shape["keyof AssignUnassignedMembersResponses"];
var createGroupGroupCategoriesDataSchema = exports_external.object({
  body: exports_external.object({
    description: exports_external.string().optional(),
    is_public: exports_external.boolean().optional(),
    join_level: exports_external.union([exports_external.literal("parent_context_auto_join"), exports_external.literal("parent_context_request"), exports_external.literal("invitation_only")]).optional(),
    name: exports_external.string().optional(),
    sis_group_id: exports_external.string().optional(),
    storage_quota_mb: exports_external.number().optional()
  }).optional(),
  path: exports_external.object({
    group_category_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/group_categories/{group_category_id}/groups")
});
var createGroupGroupCategoriesResponsesSchema = exports_external.object({
  200: groupSchema
});
var createGroupGroupCategoriesResponseSchema = createGroupGroupCategoriesResponsesSchema.shape["keyof CreateGroupGroupCategoriesResponses"];
var listUsersInGroupCategoryDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    group_category_id: exports_external.string()
  }),
  query: exports_external.object({
    search_term: exports_external.string().optional(),
    unassigned: exports_external.boolean().optional(),
    page: exports_external.string().optional(),
    per_page: exports_external.number().optional()
  }).optional(),
  url: exports_external.literal("/v1/group_categories/{group_category_id}/users")
});
var createGroupGroupsDataSchema = exports_external.object({
  body: exports_external.object({
    description: exports_external.string().optional(),
    is_public: exports_external.boolean().optional(),
    join_level: exports_external.union([exports_external.literal("parent_context_auto_join"), exports_external.literal("parent_context_request"), exports_external.literal("invitation_only")]).optional(),
    name: exports_external.string().optional(),
    sis_group_id: exports_external.string().optional(),
    storage_quota_mb: exports_external.number().optional()
  }).optional(),
  path: exports_external.never().optional(),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/groups")
});
var createGroupGroupsResponsesSchema = exports_external.object({
  200: groupSchema
});
var createGroupGroupsResponseSchema = createGroupGroupsResponsesSchema.shape["keyof CreateGroupGroupsResponses"];
var deleteGroupDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    group_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/groups/{group_id}")
});
var deleteGroupResponsesSchema = exports_external.object({
  200: groupSchema
});
var deleteGroupResponseSchema = deleteGroupResponsesSchema.shape["keyof DeleteGroupResponses"];
var getSingleGroupDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    group_id: exports_external.string()
  }),
  query: exports_external.object({
    include: exports_external.array(exports_external.union([exports_external.literal("permissions"), exports_external.literal("tabs")])).optional()
  }).optional(),
  url: exports_external.literal("/v1/groups/{group_id}")
});
var getSingleGroupResponsesSchema = exports_external.object({
  200: groupSchema
});
var getSingleGroupResponseSchema = getSingleGroupResponsesSchema.shape["keyof GetSingleGroupResponses"];
var editGroupDataSchema = exports_external.object({
  body: exports_external.object({
    avatar_id: exports_external.number().optional(),
    description: exports_external.string().optional(),
    is_public: exports_external.boolean().optional(),
    join_level: exports_external.union([exports_external.literal("parent_context_auto_join"), exports_external.literal("parent_context_request"), exports_external.literal("invitation_only")]).optional(),
    members: exports_external.array(exports_external.string()).optional(),
    name: exports_external.string().optional(),
    sis_group_id: exports_external.string().optional(),
    storage_quota_mb: exports_external.number().optional()
  }).optional(),
  path: exports_external.object({
    group_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/groups/{group_id}")
});
var editGroupResponsesSchema = exports_external.object({
  200: groupSchema
});
var editGroupResponseSchema = editGroupResponsesSchema.shape["keyof EditGroupResponses"];
var groupActivityStreamDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    group_id: exports_external.string()
  }),
  query: exports_external.object({
    page: exports_external.string().optional(),
    per_page: exports_external.number().optional()
  }).optional(),
  url: exports_external.literal("/v1/groups/{group_id}/activity_stream")
});
var groupActivityStreamResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var groupActivityStreamSummaryDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    group_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/groups/{group_id}/activity_stream/summary")
});
var groupActivityStreamSummaryResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var redirectToAssignmentOverrideForGroupDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    group_id: exports_external.string(),
    assignment_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/groups/{group_id}/assignments/{assignment_id}/override")
});
var redirectToAssignmentOverrideForGroupResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var listCollaborationsGroupsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    group_id: exports_external.string()
  }),
  query: exports_external.object({
    page: exports_external.string().optional(),
    per_page: exports_external.number().optional()
  }).optional(),
  url: exports_external.literal("/v1/groups/{group_id}/collaborations")
});
var listCollaborationsGroupsResponsesSchema = exports_external.object({
  200: exports_external.array(collaborationSchema)
});
var listCollaborationsGroupsResponseSchema = listCollaborationsGroupsResponsesSchema.shape["keyof ListCollaborationsGroupsResponses"];
var listConferencesGroupsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    group_id: exports_external.string()
  }),
  query: exports_external.object({
    page: exports_external.string().optional(),
    per_page: exports_external.number().optional()
  }).optional(),
  url: exports_external.literal("/v1/groups/{group_id}/conferences")
});
var listConferencesGroupsResponsesSchema = exports_external.object({
  200: exports_external.array(conferenceSchema)
});
var listConferencesGroupsResponseSchema = listConferencesGroupsResponsesSchema.shape["keyof ListConferencesGroupsResponses"];
var listContentExportsGroupsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    group_id: exports_external.string()
  }),
  query: exports_external.object({
    page: exports_external.string().optional(),
    per_page: exports_external.number().optional()
  }).optional(),
  url: exports_external.literal("/v1/groups/{group_id}/content_exports")
});
var listContentExportsGroupsResponsesSchema = exports_external.object({
  200: exports_external.array(contentExportSchema)
});
var listContentExportsGroupsResponseSchema = listContentExportsGroupsResponsesSchema.shape["keyof ListContentExportsGroupsResponses"];
var exportContentGroupsDataSchema = exports_external.object({
  body: exports_external.object({
    export_type: exports_external.union([exports_external.literal("common_cartridge"), exports_external.literal("qti"), exports_external.literal("zip")]),
    select: exports_external.union([exports_external.literal("folders"), exports_external.literal("files"), exports_external.literal("attachments"), exports_external.literal("quizzes"), exports_external.literal("assignments"), exports_external.literal("announcements"), exports_external.literal("calendar_events"), exports_external.literal("discussion_topics"), exports_external.literal("modules"), exports_external.literal("module_items"), exports_external.literal("pages"), exports_external.literal("rubrics")]).optional(),
    skip_notifications: exports_external.boolean().optional()
  }),
  path: exports_external.object({
    group_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/groups/{group_id}/content_exports")
});
var exportContentGroupsResponsesSchema = exports_external.object({
  200: contentExportSchema
});
var exportContentGroupsResponseSchema = exportContentGroupsResponsesSchema.shape["keyof ExportContentGroupsResponses"];
var showContentExportGroupsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    group_id: exports_external.string(),
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/groups/{group_id}/content_exports/{id}")
});
var showContentExportGroupsResponsesSchema = exports_external.object({
  200: contentExportSchema
});
var showContentExportGroupsResponseSchema = showContentExportGroupsResponsesSchema.shape["keyof ShowContentExportGroupsResponses"];
var listLicensesGroupsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    group_id: exports_external.string()
  }),
  query: exports_external.object({
    page: exports_external.string().optional(),
    per_page: exports_external.number().optional()
  }).optional(),
  url: exports_external.literal("/v1/groups/{group_id}/content_licenses")
});
var listLicensesGroupsResponsesSchema = exports_external.object({
  200: exports_external.array(licenseSchema)
});
var listLicensesGroupsResponseSchema = listLicensesGroupsResponsesSchema.shape["keyof ListLicensesGroupsResponses"];
var listContentMigrationsGroupsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    group_id: exports_external.string()
  }),
  query: exports_external.object({
    page: exports_external.string().optional(),
    per_page: exports_external.number().optional()
  }).optional(),
  url: exports_external.literal("/v1/groups/{group_id}/content_migrations")
});
var listContentMigrationsGroupsResponsesSchema = exports_external.object({
  200: exports_external.array(contentMigrationSchema)
});
var listContentMigrationsGroupsResponseSchema = listContentMigrationsGroupsResponsesSchema.shape["keyof ListContentMigrationsGroupsResponses"];
var createContentMigrationGroupsDataSchema = exports_external.object({
  body: exports_external.object({
    "date_shift_options[day_substitutions][X]": exports_external.number().optional(),
    "date_shift_options[new_end_date]": exports_external.string().optional(),
    "date_shift_options[new_start_date]": exports_external.string().optional(),
    "date_shift_options[old_end_date]": exports_external.string().optional(),
    "date_shift_options[old_start_date]": exports_external.string().optional(),
    "date_shift_options[remove_dates]": exports_external.boolean().optional(),
    "date_shift_options[shift_dates]": exports_external.boolean().optional(),
    migration_type: exports_external.string(),
    "pre_attachment[name]": exports_external.string().optional(),
    "pre_attachment[todo]": exports_external.string().optional(),
    "settings[file_url]": exports_external.string().optional(),
    "settings[folder_id]": exports_external.string().optional(),
    "settings[overwrite_quizzes]": exports_external.boolean().optional(),
    "settings[question_bank_id]": exports_external.number().optional(),
    "settings[question_bank_name]": exports_external.string().optional(),
    "settings[source_course_id]": exports_external.string().optional()
  }),
  path: exports_external.object({
    group_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/groups/{group_id}/content_migrations")
});
var createContentMigrationGroupsResponsesSchema = exports_external.object({
  200: contentMigrationSchema
});
var createContentMigrationGroupsResponseSchema = createContentMigrationGroupsResponsesSchema.shape["keyof CreateContentMigrationGroupsResponses"];
var listMigrationSystemsGroupsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    group_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/groups/{group_id}/content_migrations/migrators")
});
var listMigrationSystemsGroupsResponsesSchema = exports_external.object({
  200: exports_external.array(migratorSchema)
});
var listMigrationSystemsGroupsResponseSchema = listMigrationSystemsGroupsResponsesSchema.shape["keyof ListMigrationSystemsGroupsResponses"];
var listMigrationIssuesGroupsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    group_id: exports_external.string(),
    content_migration_id: exports_external.string()
  }),
  query: exports_external.object({
    page: exports_external.string().optional(),
    per_page: exports_external.number().optional()
  }).optional(),
  url: exports_external.literal("/v1/groups/{group_id}/content_migrations/{content_migration_id}/migration_issues")
});
var listMigrationIssuesGroupsResponsesSchema = exports_external.object({
  200: exports_external.array(migrationIssueSchema)
});
var listMigrationIssuesGroupsResponseSchema = listMigrationIssuesGroupsResponsesSchema.shape["keyof ListMigrationIssuesGroupsResponses"];
var getMigrationIssueGroupsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    group_id: exports_external.string(),
    content_migration_id: exports_external.string(),
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/groups/{group_id}/content_migrations/{content_migration_id}/migration_issues/{id}")
});
var getMigrationIssueGroupsResponsesSchema = exports_external.object({
  200: migrationIssueSchema
});
var getMigrationIssueGroupsResponseSchema = getMigrationIssueGroupsResponsesSchema.shape["keyof GetMigrationIssueGroupsResponses"];
var updateMigrationIssueGroupsDataSchema = exports_external.object({
  body: exports_external.object({
    workflow_state: exports_external.union([exports_external.literal("active"), exports_external.literal("resolved")])
  }),
  path: exports_external.object({
    group_id: exports_external.string(),
    content_migration_id: exports_external.string(),
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/groups/{group_id}/content_migrations/{content_migration_id}/migration_issues/{id}")
});
var updateMigrationIssueGroupsResponsesSchema = exports_external.object({
  200: migrationIssueSchema
});
var updateMigrationIssueGroupsResponseSchema = updateMigrationIssueGroupsResponsesSchema.shape["keyof UpdateMigrationIssueGroupsResponses"];
var getContentMigrationGroupsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    group_id: exports_external.string(),
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/groups/{group_id}/content_migrations/{id}")
});
var getContentMigrationGroupsResponsesSchema = exports_external.object({
  200: contentMigrationSchema
});
var getContentMigrationGroupsResponseSchema = getContentMigrationGroupsResponsesSchema.shape["keyof GetContentMigrationGroupsResponses"];
var updateContentMigrationGroupsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    group_id: exports_external.string(),
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/groups/{group_id}/content_migrations/{id}")
});
var updateContentMigrationGroupsResponsesSchema = exports_external.object({
  200: contentMigrationSchema
});
var updateContentMigrationGroupsResponseSchema = updateContentMigrationGroupsResponsesSchema.shape["keyof UpdateContentMigrationGroupsResponses"];
var listDiscussionTopicsGroupsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    group_id: exports_external.string()
  }),
  query: exports_external.object({
    include: exports_external.array(exports_external.union([exports_external.literal("all_dates"), exports_external.literal("sections"), exports_external.literal("sections_user_count"), exports_external.literal("overrides")])).optional(),
    order_by: exports_external.union([exports_external.literal("position"), exports_external.literal("recent_activity"), exports_external.literal("title")]).optional(),
    scope: exports_external.union([exports_external.literal("locked"), exports_external.literal("unlocked"), exports_external.literal("pinned"), exports_external.literal("unpinned")]).optional(),
    only_announcements: exports_external.boolean().optional(),
    filter_by: exports_external.union([exports_external.literal("all"), exports_external.literal("unread")]).optional(),
    search_term: exports_external.string().optional(),
    exclude_context_module_locked_topics: exports_external.boolean().optional(),
    page: exports_external.string().optional(),
    per_page: exports_external.number().optional()
  }).optional(),
  url: exports_external.literal("/v1/groups/{group_id}/discussion_topics")
});
var listDiscussionTopicsGroupsResponsesSchema = exports_external.object({
  200: exports_external.array(discussionTopicSchema)
});
var listDiscussionTopicsGroupsResponseSchema = listDiscussionTopicsGroupsResponsesSchema.shape["keyof ListDiscussionTopicsGroupsResponses"];
var createNewDiscussionTopicGroupsResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var reorderPinnedTopicsGroupsDataSchema = exports_external.object({
  body: exports_external.object({
    order: exports_external.array(exports_external.number())
  }),
  path: exports_external.object({
    group_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/groups/{group_id}/discussion_topics/reorder")
});
var reorderPinnedTopicsGroupsResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var deleteTopicGroupsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    group_id: exports_external.string(),
    topic_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/groups/{group_id}/discussion_topics/{topic_id}")
});
var deleteTopicGroupsResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var getSingleTopicGroupsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    group_id: exports_external.string(),
    topic_id: exports_external.string()
  }),
  query: exports_external.object({
    include: exports_external.array(exports_external.union([exports_external.literal("all_dates"), exports_external.literal("sections"), exports_external.literal("sections_user_count"), exports_external.literal("overrides")])).optional()
  }).optional(),
  url: exports_external.literal("/v1/groups/{group_id}/discussion_topics/{topic_id}")
});
var getSingleTopicGroupsResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var updateTopicGroupsDataSchema = exports_external.object({
  body: exports_external.object({
    allow_rating: exports_external.boolean().optional(),
    assignment: exports_external.unknown().optional(),
    delayed_post_at: exports_external.string().optional(),
    discussion_type: exports_external.union([exports_external.literal("side_comment"), exports_external.literal("threaded")]).optional(),
    group_category_id: exports_external.number().optional(),
    is_announcement: exports_external.boolean().optional(),
    lock_at: exports_external.string().optional(),
    message: exports_external.string().optional(),
    only_graders_can_rate: exports_external.boolean().optional(),
    pinned: exports_external.boolean().optional(),
    podcast_enabled: exports_external.boolean().optional(),
    podcast_has_student_posts: exports_external.boolean().optional(),
    position_after: exports_external.string().optional(),
    published: exports_external.boolean().optional(),
    require_initial_post: exports_external.boolean().optional(),
    sort_by_rating: exports_external.boolean().optional(),
    specific_sections: exports_external.string().optional(),
    title: exports_external.string().optional()
  }).optional(),
  path: exports_external.object({
    group_id: exports_external.string(),
    topic_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/groups/{group_id}/discussion_topics/{topic_id}")
});
var updateTopicGroupsResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var listTopicEntriesGroupsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    group_id: exports_external.string(),
    topic_id: exports_external.string()
  }),
  query: exports_external.object({
    page: exports_external.string().optional(),
    per_page: exports_external.number().optional()
  }).optional(),
  url: exports_external.literal("/v1/groups/{group_id}/discussion_topics/{topic_id}/entries")
});
var listTopicEntriesGroupsResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var postEntryGroupsDataSchema = exports_external.object({
  body: exports_external.object({
    attachment: exports_external.string().optional(),
    message: exports_external.string().optional()
  }).optional(),
  path: exports_external.object({
    group_id: exports_external.string(),
    topic_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/groups/{group_id}/discussion_topics/{topic_id}/entries")
});
var postEntryGroupsResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var rateEntryGroupsDataSchema = exports_external.object({
  body: exports_external.object({
    rating: exports_external.number().optional()
  }).optional(),
  path: exports_external.object({
    group_id: exports_external.string(),
    topic_id: exports_external.string(),
    entry_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/groups/{group_id}/discussion_topics/{topic_id}/entries/{entry_id}/rating")
});
var rateEntryGroupsResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var markEntryAsUnreadGroupsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    group_id: exports_external.string(),
    topic_id: exports_external.string(),
    entry_id: exports_external.string()
  }),
  query: exports_external.object({
    forced_read_state: exports_external.boolean().optional()
  }).optional(),
  url: exports_external.literal("/v1/groups/{group_id}/discussion_topics/{topic_id}/entries/{entry_id}/read")
});
var markEntryAsUnreadGroupsResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var markEntryAsReadGroupsDataSchema = exports_external.object({
  body: exports_external.object({
    forced_read_state: exports_external.boolean().optional()
  }).optional(),
  path: exports_external.object({
    group_id: exports_external.string(),
    topic_id: exports_external.string(),
    entry_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/groups/{group_id}/discussion_topics/{topic_id}/entries/{entry_id}/read")
});
var markEntryAsReadGroupsResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var listEntryRepliesGroupsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    group_id: exports_external.string(),
    topic_id: exports_external.string(),
    entry_id: exports_external.string()
  }),
  query: exports_external.object({
    page: exports_external.string().optional(),
    per_page: exports_external.number().optional()
  }).optional(),
  url: exports_external.literal("/v1/groups/{group_id}/discussion_topics/{topic_id}/entries/{entry_id}/replies")
});
var listEntryRepliesGroupsResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var postReplyGroupsDataSchema = exports_external.object({
  body: exports_external.object({
    attachment: exports_external.string().optional(),
    message: exports_external.string().optional()
  }).optional(),
  path: exports_external.object({
    group_id: exports_external.string(),
    topic_id: exports_external.string(),
    entry_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/groups/{group_id}/discussion_topics/{topic_id}/entries/{entry_id}/replies")
});
var postReplyGroupsResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var deleteEntryGroupsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    group_id: exports_external.string(),
    topic_id: exports_external.string(),
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/groups/{group_id}/discussion_topics/{topic_id}/entries/{id}")
});
var deleteEntryGroupsResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var updateEntryGroupsDataSchema = exports_external.object({
  body: exports_external.object({
    message: exports_external.string().optional()
  }).optional(),
  path: exports_external.object({
    group_id: exports_external.string(),
    topic_id: exports_external.string(),
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/groups/{group_id}/discussion_topics/{topic_id}/entries/{id}")
});
var updateEntryGroupsResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var listEntriesGroupsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    group_id: exports_external.string(),
    topic_id: exports_external.string()
  }),
  query: exports_external.object({
    ids: exports_external.array(exports_external.string()).optional(),
    page: exports_external.string().optional(),
    per_page: exports_external.number().optional()
  }).optional(),
  url: exports_external.literal("/v1/groups/{group_id}/discussion_topics/{topic_id}/entry_list")
});
var listEntriesGroupsResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var markTopicAsUnreadGroupsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    group_id: exports_external.string(),
    topic_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/groups/{group_id}/discussion_topics/{topic_id}/read")
});
var markTopicAsUnreadGroupsResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var markTopicAsReadGroupsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    group_id: exports_external.string(),
    topic_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/groups/{group_id}/discussion_topics/{topic_id}/read")
});
var markTopicAsReadGroupsResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var markAllEntriesAsUnreadGroupsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    group_id: exports_external.string(),
    topic_id: exports_external.string()
  }),
  query: exports_external.object({
    forced_read_state: exports_external.boolean().optional()
  }).optional(),
  url: exports_external.literal("/v1/groups/{group_id}/discussion_topics/{topic_id}/read_all")
});
var markAllEntriesAsUnreadGroupsResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var markAllEntriesAsReadGroupsDataSchema = exports_external.object({
  body: exports_external.object({
    forced_read_state: exports_external.boolean().optional()
  }).optional(),
  path: exports_external.object({
    group_id: exports_external.string(),
    topic_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/groups/{group_id}/discussion_topics/{topic_id}/read_all")
});
var markAllEntriesAsReadGroupsResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var unsubscribeFromTopicGroupsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    group_id: exports_external.string(),
    topic_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/groups/{group_id}/discussion_topics/{topic_id}/subscribed")
});
var unsubscribeFromTopicGroupsResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var subscribeToTopicGroupsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    group_id: exports_external.string(),
    topic_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/groups/{group_id}/discussion_topics/{topic_id}/subscribed")
});
var subscribeToTopicGroupsResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var getFullTopicGroupsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    group_id: exports_external.string(),
    topic_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/groups/{group_id}/discussion_topics/{topic_id}/view")
});
var getFullTopicGroupsResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var listExternalFeedsGroupsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    group_id: exports_external.string()
  }),
  query: exports_external.object({
    page: exports_external.string().optional(),
    per_page: exports_external.number().optional()
  }).optional(),
  url: exports_external.literal("/v1/groups/{group_id}/external_feeds")
});
var listExternalFeedsGroupsResponsesSchema = exports_external.object({
  200: exports_external.array(externalFeedSchema)
});
var listExternalFeedsGroupsResponseSchema = listExternalFeedsGroupsResponsesSchema.shape["keyof ListExternalFeedsGroupsResponses"];
var createExternalFeedGroupsDataSchema = exports_external.object({
  body: exports_external.object({
    header_match: exports_external.boolean().optional(),
    url: exports_external.string(),
    verbosity: exports_external.union([exports_external.literal("full"), exports_external.literal("truncate"), exports_external.literal("link_only")]).optional()
  }),
  path: exports_external.object({
    group_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/groups/{group_id}/external_feeds")
});
var createExternalFeedGroupsResponsesSchema = exports_external.object({
  200: externalFeedSchema
});
var createExternalFeedGroupsResponseSchema = createExternalFeedGroupsResponsesSchema.shape["keyof CreateExternalFeedGroupsResponses"];
var deleteExternalFeedGroupsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    group_id: exports_external.string(),
    external_feed_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/groups/{group_id}/external_feeds/{external_feed_id}")
});
var deleteExternalFeedGroupsResponsesSchema = exports_external.object({
  200: externalFeedSchema
});
var deleteExternalFeedGroupsResponseSchema = deleteExternalFeedGroupsResponsesSchema.shape["keyof DeleteExternalFeedGroupsResponses"];
var listExternalToolsGroupsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    group_id: exports_external.string()
  }),
  query: exports_external.object({
    search_term: exports_external.string().optional(),
    selectable: exports_external.boolean().optional(),
    include_parents: exports_external.boolean().optional(),
    page: exports_external.string().optional(),
    per_page: exports_external.number().optional()
  }).optional(),
  url: exports_external.literal("/v1/groups/{group_id}/external_tools")
});
var listExternalToolsGroupsResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var uploadFileToGroupDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    group_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/groups/{group_id}/files")
});
var uploadFileToGroupResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var getQuotaInformationGroupsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    group_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/groups/{group_id}/files/quota")
});
var getQuotaInformationGroupsResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var getFileGroupsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    group_id: exports_external.string(),
    id: exports_external.string()
  }),
  query: exports_external.object({
    include: exports_external.array(exports_external.literal("user")).optional()
  }).optional(),
  url: exports_external.literal("/v1/groups/{group_id}/files/{id}")
});
var getFileGroupsResponsesSchema = exports_external.object({
  200: fileSchema
});
var getFileGroupsResponseSchema = getFileGroupsResponsesSchema.shape["keyof GetFileGroupsResponses"];
var listAllFoldersGroupsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    group_id: exports_external.string()
  }),
  query: exports_external.object({
    page: exports_external.string().optional(),
    per_page: exports_external.number().optional()
  }).optional(),
  url: exports_external.literal("/v1/groups/{group_id}/folders")
});
var listAllFoldersGroupsResponsesSchema = exports_external.object({
  200: exports_external.array(folderSchema)
});
var listAllFoldersGroupsResponseSchema = listAllFoldersGroupsResponsesSchema.shape["keyof ListAllFoldersGroupsResponses"];
var createFolderGroupsDataSchema = exports_external.object({
  body: exports_external.object({
    hidden: exports_external.boolean().optional(),
    lock_at: exports_external.string().optional(),
    locked: exports_external.boolean().optional(),
    name: exports_external.string(),
    parent_folder_id: exports_external.string().optional(),
    parent_folder_path: exports_external.string().optional(),
    position: exports_external.number().optional(),
    unlock_at: exports_external.string().optional()
  }),
  path: exports_external.object({
    group_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/groups/{group_id}/folders")
});
var createFolderGroupsResponsesSchema = exports_external.object({
  200: folderSchema
});
var createFolderGroupsResponseSchema = createFolderGroupsResponsesSchema.shape["keyof CreateFolderGroupsResponses"];
var resolvePathGroupsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    group_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/groups/{group_id}/folders/by_path")
});
var resolvePathGroupsResponsesSchema = exports_external.object({
  200: exports_external.array(folderSchema)
});
var resolvePathGroupsResponseSchema = resolvePathGroupsResponsesSchema.shape["keyof ResolvePathGroupsResponses"];
var resolvePathGroupsFullPathDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    group_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/groups/{group_id}/folders/by_path/*full_path")
});
var resolvePathGroupsFullPathResponsesSchema = exports_external.object({
  200: exports_external.array(folderSchema)
});
var resolvePathGroupsFullPathResponseSchema = resolvePathGroupsFullPathResponsesSchema.shape["keyof ResolvePathGroupsFullPathResponses"];
var getFolderGroupsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    group_id: exports_external.string(),
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/groups/{group_id}/folders/{id}")
});
var getFolderGroupsResponsesSchema = exports_external.object({
  200: folderSchema
});
var getFolderGroupsResponseSchema = getFolderGroupsResponsesSchema.shape["keyof GetFolderGroupsResponses"];
var showFrontPageGroupsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    group_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/groups/{group_id}/front_page")
});
var updateCreateFrontPageGroupsDataSchema = exports_external.object({
  body: exports_external.object({
    "wiki_page[body]": exports_external.string().optional(),
    "wiki_page[editing_roles]": exports_external.union([exports_external.literal("teachers"), exports_external.literal("students"), exports_external.literal("members"), exports_external.literal("public")]).optional(),
    "wiki_page[notify_of_update]": exports_external.boolean().optional(),
    "wiki_page[published]": exports_external.boolean().optional(),
    "wiki_page[title]": exports_external.string().optional()
  }).optional(),
  path: exports_external.object({
    group_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/groups/{group_id}/front_page")
});
var inviteOthersToGroupDataSchema = exports_external.object({
  body: exports_external.object({
    invitees: exports_external.array(exports_external.string())
  }),
  path: exports_external.object({
    group_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/groups/{group_id}/invite")
});
var inviteOthersToGroupResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var listGroupMembershipsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    group_id: exports_external.string()
  }),
  query: exports_external.object({
    filter_states: exports_external.array(exports_external.union([exports_external.literal("accepted"), exports_external.literal("invited"), exports_external.literal("requested")])).optional(),
    page: exports_external.string().optional(),
    per_page: exports_external.number().optional()
  }).optional(),
  url: exports_external.literal("/v1/groups/{group_id}/memberships")
});
var listGroupMembershipsResponsesSchema = exports_external.object({
  200: exports_external.array(groupMembershipSchema)
});
var listGroupMembershipsResponseSchema = listGroupMembershipsResponsesSchema.shape["keyof ListGroupMembershipsResponses"];
var createMembershipDataSchema = exports_external.object({
  body: exports_external.object({
    user_id: exports_external.string().optional()
  }).optional(),
  path: exports_external.object({
    group_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/groups/{group_id}/memberships")
});
var createMembershipResponsesSchema = exports_external.object({
  200: groupMembershipSchema
});
var createMembershipResponseSchema = createMembershipResponsesSchema.shape["keyof CreateMembershipResponses"];
var leaveGroupMembershipsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    group_id: exports_external.string(),
    membership_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/groups/{group_id}/memberships/{membership_id}")
});
var leaveGroupMembershipsResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var getSingleGroupMembershipMembershipsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    group_id: exports_external.string(),
    membership_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/groups/{group_id}/memberships/{membership_id}")
});
var getSingleGroupMembershipMembershipsResponsesSchema = exports_external.object({
  200: groupMembershipSchema
});
var getSingleGroupMembershipMembershipsResponseSchema = getSingleGroupMembershipMembershipsResponsesSchema.shape["keyof GetSingleGroupMembershipMembershipsResponses"];
var updateMembershipMembershipsDataSchema = exports_external.object({
  body: exports_external.object({
    moderator: exports_external.string().optional(),
    workflow_state: exports_external.literal("accepted").optional()
  }).optional(),
  path: exports_external.object({
    group_id: exports_external.string(),
    membership_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/groups/{group_id}/memberships/{membership_id}")
});
var updateMembershipMembershipsResponsesSchema = exports_external.object({
  200: groupMembershipSchema
});
var updateMembershipMembershipsResponseSchema = updateMembershipMembershipsResponsesSchema.shape["keyof UpdateMembershipMembershipsResponses"];
var listPagesGroupsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    group_id: exports_external.string()
  }),
  query: exports_external.object({
    sort: exports_external.union([exports_external.literal("title"), exports_external.literal("created_at"), exports_external.literal("updated_at")]).optional(),
    order: exports_external.union([exports_external.literal("asc"), exports_external.literal("desc")]).optional(),
    search_term: exports_external.string().optional(),
    published: exports_external.boolean().optional(),
    page: exports_external.string().optional(),
    per_page: exports_external.number().optional()
  }).optional(),
  url: exports_external.literal("/v1/groups/{group_id}/pages")
});
var createPageGroupsDataSchema = exports_external.object({
  body: exports_external.object({
    "wiki_page[body]": exports_external.string().optional(),
    "wiki_page[editing_roles]": exports_external.union([exports_external.literal("teachers"), exports_external.literal("students"), exports_external.literal("members"), exports_external.literal("public")]).optional(),
    "wiki_page[front_page]": exports_external.boolean().optional(),
    "wiki_page[notify_of_update]": exports_external.boolean().optional(),
    "wiki_page[published]": exports_external.boolean().optional(),
    "wiki_page[title]": exports_external.string()
  }),
  path: exports_external.object({
    group_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/groups/{group_id}/pages")
});
var deletePageGroupsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    group_id: exports_external.string(),
    url: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/groups/{group_id}/pages/{url}")
});
var showPageGroupsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    group_id: exports_external.string(),
    url: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/groups/{group_id}/pages/{url}")
});
var updateCreatePageGroupsDataSchema = exports_external.object({
  body: exports_external.object({
    "wiki_page[body]": exports_external.string().optional(),
    "wiki_page[editing_roles]": exports_external.union([exports_external.literal("teachers"), exports_external.literal("students"), exports_external.literal("members"), exports_external.literal("public")]).optional(),
    "wiki_page[front_page]": exports_external.boolean().optional(),
    "wiki_page[notify_of_update]": exports_external.boolean().optional(),
    "wiki_page[published]": exports_external.boolean().optional(),
    "wiki_page[title]": exports_external.string().optional()
  }).optional(),
  path: exports_external.object({
    group_id: exports_external.string(),
    url: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/groups/{group_id}/pages/{url}")
});
var listRevisionsGroupsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    group_id: exports_external.string(),
    url: exports_external.string()
  }),
  query: exports_external.object({
    page: exports_external.string().optional(),
    per_page: exports_external.number().optional()
  }).optional(),
  url: exports_external.literal("/v1/groups/{group_id}/pages/{url}/revisions")
});
var showRevisionGroupsLatestDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    group_id: exports_external.string(),
    url: exports_external.string()
  }),
  query: exports_external.object({
    summary: exports_external.boolean().optional()
  }).optional(),
  url: exports_external.literal("/v1/groups/{group_id}/pages/{url}/revisions/latest")
});
var showRevisionGroupsRevisionIdDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    group_id: exports_external.string(),
    url: exports_external.string(),
    revision_id: exports_external.string()
  }),
  query: exports_external.object({
    summary: exports_external.boolean().optional()
  }).optional(),
  url: exports_external.literal("/v1/groups/{group_id}/pages/{url}/revisions/{revision_id}")
});
var revertToRevisionGroupsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    group_id: exports_external.string(),
    url: exports_external.string(),
    revision_id: exports_external.number()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/groups/{group_id}/pages/{url}/revisions/{revision_id}")
});
var groupPermissionDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    group_id: exports_external.string()
  }),
  query: exports_external.object({
    permissions: exports_external.array(exports_external.string()).optional()
  }).optional(),
  url: exports_external.literal("/v1/groups/{group_id}/permissions")
});
var groupPermissionResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var listPotentialMembersGroupsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    group_id: exports_external.string()
  }),
  query: exports_external.object({
    page: exports_external.string().optional(),
    per_page: exports_external.number().optional()
  }).optional(),
  url: exports_external.literal("/v1/groups/{group_id}/potential_collaborators")
});
var previewProcessedHtmlGroupDataSchema = exports_external.object({
  body: exports_external.object({
    html: exports_external.string().optional()
  }).optional(),
  path: exports_external.object({
    group_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/groups/{group_id}/preview_html")
});
var previewProcessedHtmlGroupResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var listAvailableTabsForCourseOrGroupGroupsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    group_id: exports_external.string()
  }),
  query: exports_external.object({
    include: exports_external.array(exports_external.literal("external")).optional(),
    page: exports_external.string().optional(),
    per_page: exports_external.number().optional()
  }).optional(),
  url: exports_external.literal("/v1/groups/{group_id}/tabs")
});
var listAvailableTabsForCourseOrGroupGroupsResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var removeUsageRightsGroupsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    group_id: exports_external.string()
  }),
  query: exports_external.object({
    file_ids: exports_external.array(exports_external.string()),
    folder_ids: exports_external.array(exports_external.string()).optional()
  }),
  url: exports_external.literal("/v1/groups/{group_id}/usage_rights")
});
var removeUsageRightsGroupsResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var setUsageRightsGroupsDataSchema = exports_external.object({
  body: exports_external.object({
    file_ids: exports_external.array(exports_external.string()),
    folder_ids: exports_external.array(exports_external.string()).optional(),
    publish: exports_external.boolean().optional(),
    "usage_rights[legal_copyright]": exports_external.string().optional(),
    "usage_rights[license]": exports_external.string().optional(),
    "usage_rights[use_justification]": exports_external.union([exports_external.literal("own_copyright"), exports_external.literal("used_by_permission"), exports_external.literal("fair_use"), exports_external.literal("public_domain"), exports_external.literal("creative_commons")])
  }),
  path: exports_external.object({
    group_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/groups/{group_id}/usage_rights")
});
var setUsageRightsGroupsResponsesSchema = exports_external.object({
  200: usageRightsSchema
});
var setUsageRightsGroupsResponseSchema = setUsageRightsGroupsResponsesSchema.shape["keyof SetUsageRightsGroupsResponses"];
var listGroupSusersDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    group_id: exports_external.string()
  }),
  query: exports_external.object({
    search_term: exports_external.string().optional(),
    include: exports_external.array(exports_external.literal("avatar_url")).optional(),
    page: exports_external.string().optional(),
    per_page: exports_external.number().optional()
  }).optional(),
  url: exports_external.literal("/v1/groups/{group_id}/users")
});
var leaveGroupUsersDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    group_id: exports_external.string(),
    user_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/groups/{group_id}/users/{user_id}")
});
var leaveGroupUsersResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var getSingleGroupMembershipUsersDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    group_id: exports_external.string(),
    user_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/groups/{group_id}/users/{user_id}")
});
var getSingleGroupMembershipUsersResponsesSchema = exports_external.object({
  200: groupMembershipSchema
});
var getSingleGroupMembershipUsersResponseSchema = getSingleGroupMembershipUsersResponsesSchema.shape["keyof GetSingleGroupMembershipUsersResponses"];
var updateMembershipUsersDataSchema = exports_external.object({
  body: exports_external.object({
    moderator: exports_external.string().optional(),
    workflow_state: exports_external.literal("accepted").optional()
  }).optional(),
  path: exports_external.object({
    group_id: exports_external.string(),
    user_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/groups/{group_id}/users/{user_id}")
});
var updateMembershipUsersResponsesSchema = exports_external.object({
  200: groupMembershipSchema
});
var updateMembershipUsersResponseSchema = updateMembershipUsersResponsesSchema.shape["keyof UpdateMembershipUsersResponses"];
var createJwtDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.never().optional(),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/jwts")
});
var createJwtResponsesSchema = exports_external.object({
  200: jwtSchema
});
var createJwtResponseSchema = createJwtResponsesSchema.shape["keyof CreateJwtResponses"];
var refreshJwtDataSchema = exports_external.object({
  body: exports_external.object({
    jwt: exports_external.string()
  }),
  path: exports_external.never().optional(),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/jwts/refresh")
});
var refreshJwtResponsesSchema = exports_external.object({
  200: jwtSchema
});
var refreshJwtResponseSchema = refreshJwtResponsesSchema.shape["keyof RefreshJwtResponses"];
var showOutcomeDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/outcomes/{id}")
});
var showOutcomeResponsesSchema = exports_external.object({
  200: outcomeSchema
});
var showOutcomeResponseSchema = showOutcomeResponsesSchema.shape["keyof ShowOutcomeResponses"];
var updateOutcomeDataSchema = exports_external.object({
  body: exports_external.object({
    calculation_int: exports_external.number().optional(),
    calculation_method: exports_external.union([exports_external.literal("decaying_average"), exports_external.literal("n_mastery"), exports_external.literal("latest"), exports_external.literal("highest")]).optional(),
    description: exports_external.string().optional(),
    display_name: exports_external.string().optional(),
    mastery_points: exports_external.number().optional(),
    "ratings[description]": exports_external.array(exports_external.string()).optional(),
    "ratings[points]": exports_external.array(exports_external.number()).optional(),
    title: exports_external.string().optional(),
    vendor_guid: exports_external.string().optional()
  }).optional(),
  path: exports_external.object({
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/outcomes/{id}")
});
var updateOutcomeResponsesSchema = exports_external.object({
  200: outcomeSchema
});
var updateOutcomeResponseSchema = updateOutcomeResponsesSchema.shape["keyof UpdateOutcomeResponses"];
var listPlannerItemsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.never().optional(),
  query: exports_external.object({
    start_date: exports_external.string().optional(),
    end_date: exports_external.string().optional(),
    context_codes: exports_external.array(exports_external.string()).optional(),
    filter: exports_external.literal("new_activity").optional(),
    page: exports_external.string().optional(),
    per_page: exports_external.number().optional()
  }).optional(),
  url: exports_external.literal("/v1/planner/items")
});
var listPlannerItemsResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var listPlannerOverridesDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.never().optional(),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/planner/overrides")
});
var listPlannerOverridesResponsesSchema = exports_external.object({
  200: exports_external.array(plannerOverrideSchema)
});
var listPlannerOverridesResponseSchema = listPlannerOverridesResponsesSchema.shape["keyof ListPlannerOverridesResponses"];
var createPlannerOverrideDataSchema = exports_external.object({
  body: exports_external.object({
    dismissed: exports_external.boolean().optional(),
    marked_complete: exports_external.boolean().optional(),
    plannable_id: exports_external.number().optional(),
    plannable_type: exports_external.union([exports_external.literal("announcement"), exports_external.literal("assignment"), exports_external.literal("discussion_topic"), exports_external.literal("quiz"), exports_external.literal("wiki_page"), exports_external.literal("planner_note")]).optional()
  }).optional(),
  path: exports_external.never().optional(),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/planner/overrides")
});
var createPlannerOverrideResponsesSchema = exports_external.object({
  200: plannerOverrideSchema
});
var createPlannerOverrideResponseSchema = createPlannerOverrideResponsesSchema.shape["keyof CreatePlannerOverrideResponses"];
var deletePlannerOverrideDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/planner/overrides/{id}")
});
var deletePlannerOverrideResponsesSchema = exports_external.object({
  200: plannerOverrideSchema
});
var deletePlannerOverrideResponseSchema = deletePlannerOverrideResponsesSchema.shape["keyof DeletePlannerOverrideResponses"];
var showPlannerOverrideDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/planner/overrides/{id}")
});
var showPlannerOverrideResponsesSchema = exports_external.object({
  200: plannerOverrideSchema
});
var showPlannerOverrideResponseSchema = showPlannerOverrideResponsesSchema.shape["keyof ShowPlannerOverrideResponses"];
var updatePlannerOverrideDataSchema = exports_external.object({
  body: exports_external.object({
    dismissed: exports_external.string().optional(),
    marked_complete: exports_external.string().optional()
  }).optional(),
  path: exports_external.object({
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/planner/overrides/{id}")
});
var updatePlannerOverrideResponsesSchema = exports_external.object({
  200: plannerOverrideSchema
});
var updatePlannerOverrideResponseSchema = updatePlannerOverrideResponsesSchema.shape["keyof UpdatePlannerOverrideResponses"];
var listPlannerNotesDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.never().optional(),
  query: exports_external.object({
    start_date: exports_external.string().optional(),
    end_date: exports_external.string().optional(),
    context_codes: exports_external.array(exports_external.string()).optional(),
    page: exports_external.string().optional(),
    per_page: exports_external.number().optional()
  }).optional(),
  url: exports_external.literal("/v1/planner_notes")
});
var listPlannerNotesResponsesSchema = exports_external.object({
  200: exports_external.array(plannerNoteSchema)
});
var listPlannerNotesResponseSchema = listPlannerNotesResponsesSchema.shape["keyof ListPlannerNotesResponses"];
var createPlannerNoteDataSchema = exports_external.object({
  body: exports_external.object({
    course_id: exports_external.number().optional(),
    details: exports_external.string().optional(),
    linked_object_id: exports_external.number().optional(),
    linked_object_type: exports_external.string().optional(),
    title: exports_external.string().optional(),
    todo_date: exports_external.string().optional()
  }).optional(),
  path: exports_external.never().optional(),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/planner_notes")
});
var createPlannerNoteResponsesSchema = exports_external.object({
  200: plannerNoteSchema
});
var createPlannerNoteResponseSchema = createPlannerNoteResponsesSchema.shape["keyof CreatePlannerNoteResponses"];
var deletePlannerNoteDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/planner_notes/{id}")
});
var deletePlannerNoteResponsesSchema = exports_external.object({
  200: plannerNoteSchema
});
var deletePlannerNoteResponseSchema = deletePlannerNoteResponsesSchema.shape["keyof DeletePlannerNoteResponses"];
var showPlannernoteDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/planner_notes/{id}")
});
var showPlannernoteResponsesSchema = exports_external.object({
  200: plannerNoteSchema
});
var showPlannernoteResponseSchema = showPlannernoteResponsesSchema.shape["keyof ShowPlannernoteResponses"];
var updatePlannernoteDataSchema = exports_external.object({
  body: exports_external.object({
    course_id: exports_external.number().optional(),
    details: exports_external.string().optional(),
    title: exports_external.string().optional(),
    todo_date: exports_external.string().optional()
  }).optional(),
  path: exports_external.object({
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/planner_notes/{id}")
});
var updatePlannernoteResponsesSchema = exports_external.object({
  200: plannerNoteSchema
});
var updatePlannernoteResponseSchema = updatePlannernoteResponsesSchema.shape["keyof UpdatePlannernoteResponses"];
var listClosedPollSessionsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.never().optional(),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/poll_sessions/closed")
});
var listClosedPollSessionsResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var listOpenedPollSessionsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.never().optional(),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/poll_sessions/opened")
});
var listOpenedPollSessionsResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var listPollsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.never().optional(),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/polls")
});
var listPollsResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var createSinglePollDataSchema = exports_external.object({
  body: exports_external.object({
    "polls[description]": exports_external.array(exports_external.string()).optional(),
    "polls[question]": exports_external.array(exports_external.string())
  }),
  path: exports_external.never().optional(),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/polls")
});
var createSinglePollResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var deletePollDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/polls/{id}")
});
var deletePollResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var getSinglePollDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/polls/{id}")
});
var getSinglePollResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var updateSinglePollDataSchema = exports_external.object({
  body: exports_external.object({
    "polls[description]": exports_external.array(exports_external.string()).optional(),
    "polls[question]": exports_external.array(exports_external.string())
  }),
  path: exports_external.object({
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/polls/{id}")
});
var updateSinglePollResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var listPollChoicesInPollDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    poll_id: exports_external.string()
  }),
  query: exports_external.object({
    page: exports_external.string().optional(),
    per_page: exports_external.number().optional()
  }).optional(),
  url: exports_external.literal("/v1/polls/{poll_id}/poll_choices")
});
var listPollChoicesInPollResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var createSinglePollChoiceDataSchema = exports_external.object({
  body: exports_external.object({
    "poll_choices[is_correct]": exports_external.array(exports_external.boolean()).optional(),
    "poll_choices[position]": exports_external.array(exports_external.number()).optional(),
    "poll_choices[text]": exports_external.array(exports_external.string())
  }),
  path: exports_external.object({
    poll_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/polls/{poll_id}/poll_choices")
});
var createSinglePollChoiceResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var deletePollChoiceDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    poll_id: exports_external.string(),
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/polls/{poll_id}/poll_choices/{id}")
});
var deletePollChoiceResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var getSinglePollChoiceDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    poll_id: exports_external.string(),
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/polls/{poll_id}/poll_choices/{id}")
});
var getSinglePollChoiceResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var updateSinglePollChoiceDataSchema = exports_external.object({
  body: exports_external.object({
    "poll_choices[is_correct]": exports_external.array(exports_external.boolean()).optional(),
    "poll_choices[position]": exports_external.array(exports_external.number()).optional(),
    "poll_choices[text]": exports_external.array(exports_external.string())
  }),
  path: exports_external.object({
    poll_id: exports_external.string(),
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/polls/{poll_id}/poll_choices/{id}")
});
var updateSinglePollChoiceResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var listPollSessionsForPollDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    poll_id: exports_external.string()
  }),
  query: exports_external.object({
    page: exports_external.string().optional(),
    per_page: exports_external.number().optional()
  }).optional(),
  url: exports_external.literal("/v1/polls/{poll_id}/poll_sessions")
});
var listPollSessionsForPollResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var createSinglePollSessionDataSchema = exports_external.object({
  body: exports_external.object({
    "poll_sessions[course_id]": exports_external.array(exports_external.number()),
    "poll_sessions[course_section_id]": exports_external.array(exports_external.number()).optional(),
    "poll_sessions[has_public_results]": exports_external.array(exports_external.boolean()).optional()
  }),
  path: exports_external.object({
    poll_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/polls/{poll_id}/poll_sessions")
});
var createSinglePollSessionResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var deletePollSessionDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    poll_id: exports_external.string(),
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/polls/{poll_id}/poll_sessions/{id}")
});
var deletePollSessionResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var getResultsForSinglePollSessionDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    poll_id: exports_external.string(),
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/polls/{poll_id}/poll_sessions/{id}")
});
var getResultsForSinglePollSessionResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var updateSinglePollSessionDataSchema = exports_external.object({
  body: exports_external.object({
    "poll_sessions[course_id]": exports_external.array(exports_external.number()).optional(),
    "poll_sessions[course_section_id]": exports_external.array(exports_external.number()).optional(),
    "poll_sessions[has_public_results]": exports_external.array(exports_external.boolean()).optional()
  }).optional(),
  path: exports_external.object({
    poll_id: exports_external.string(),
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/polls/{poll_id}/poll_sessions/{id}")
});
var updateSinglePollSessionResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var closeOpenedPollSessionDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    poll_id: exports_external.string(),
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/polls/{poll_id}/poll_sessions/{id}/close")
});
var closeOpenedPollSessionResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var openPollSessionDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    poll_id: exports_external.string(),
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/polls/{poll_id}/poll_sessions/{id}/open")
});
var openPollSessionResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var createSinglePollSubmissionDataSchema = exports_external.object({
  body: exports_external.object({
    "poll_submissions[poll_choice_id]": exports_external.array(exports_external.number())
  }),
  path: exports_external.object({
    poll_id: exports_external.string(),
    poll_session_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/polls/{poll_id}/poll_sessions/{poll_session_id}/poll_submissions")
});
var createSinglePollSubmissionResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var getSinglePollSubmissionDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    poll_id: exports_external.string(),
    poll_session_id: exports_external.string(),
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/polls/{poll_id}/poll_sessions/{poll_session_id}/poll_submissions/{id}")
});
var getSinglePollSubmissionResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var queryProgressDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/progress/{id}")
});
var queryProgressResponsesSchema = exports_external.object({
  200: progressSchema
});
var queryProgressResponseSchema = queryProgressResponsesSchema.shape["keyof QueryProgressResponses"];
var getAllQuizSubmissionQuestionsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    quiz_submission_id: exports_external.string()
  }),
  query: exports_external.object({
    include: exports_external.array(exports_external.literal("quiz_question")).optional()
  }).optional(),
  url: exports_external.literal("/v1/quiz_submissions/{quiz_submission_id}/questions")
});
var getAllQuizSubmissionQuestionsResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var answeringQuestionsDataSchema = exports_external.object({
  body: exports_external.object({
    access_code: exports_external.string().optional(),
    attempt: exports_external.number(),
    quiz_questions: exports_external.array(quizQuestionSchema).optional(),
    validation_token: exports_external.string()
  }),
  path: exports_external.object({
    quiz_submission_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/quiz_submissions/{quiz_submission_id}/questions")
});
var answeringQuestionsResponsesSchema = exports_external.object({
  200: exports_external.array(quizSubmissionQuestionSchema)
});
var answeringQuestionsResponseSchema = answeringQuestionsResponsesSchema.shape["keyof AnsweringQuestionsResponses"];
var flaggingQuestionDataSchema = exports_external.object({
  body: exports_external.object({
    access_code: exports_external.string().optional(),
    attempt: exports_external.number(),
    validation_token: exports_external.string()
  }),
  path: exports_external.object({
    quiz_submission_id: exports_external.string(),
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/quiz_submissions/{quiz_submission_id}/questions/{id}/flag")
});
var flaggingQuestionResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var unflaggingQuestionDataSchema = exports_external.object({
  body: exports_external.object({
    access_code: exports_external.string().optional(),
    attempt: exports_external.number(),
    validation_token: exports_external.string()
  }),
  path: exports_external.object({
    quiz_submission_id: exports_external.string(),
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/quiz_submissions/{quiz_submission_id}/questions/{id}/unflag")
});
var unflaggingQuestionResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var listAllCoursesDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.never().optional(),
  query: exports_external.object({
    search: exports_external.string().optional(),
    public_only: exports_external.boolean().optional(),
    open_enrollment_only: exports_external.boolean().optional(),
    page: exports_external.string().optional(),
    per_page: exports_external.number().optional()
  }).optional(),
  url: exports_external.literal("/v1/search/all_courses")
});
var findRecipientsSearchDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.never().optional(),
  query: exports_external.object({
    search: exports_external.string().optional(),
    context: exports_external.string().optional(),
    exclude: exports_external.array(exports_external.string()).optional(),
    type: exports_external.union([exports_external.literal("user"), exports_external.literal("context")]).optional(),
    user_id: exports_external.number().optional(),
    from_conversation_id: exports_external.number().optional(),
    permissions: exports_external.array(exports_external.string()).optional()
  }).optional(),
  url: exports_external.literal("/v1/search/recipients")
});
var findRecipientsSearchResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var redirectToAssignmentOverrideForSectionDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_section_id: exports_external.string(),
    assignment_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/sections/{course_section_id}/assignments/{assignment_id}/override")
});
var redirectToAssignmentOverrideForSectionResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var deleteSectionDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/sections/{id}")
});
var deleteSectionResponsesSchema = exports_external.object({
  200: sectionSchema
});
var deleteSectionResponseSchema = deleteSectionResponsesSchema.shape["keyof DeleteSectionResponses"];
var getSectionInformationSectionsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    id: exports_external.string()
  }),
  query: exports_external.object({
    include: exports_external.array(exports_external.union([exports_external.literal("students"), exports_external.literal("avatar_url"), exports_external.literal("enrollments"), exports_external.literal("total_students"), exports_external.literal("passback_status")])).optional()
  }).optional(),
  url: exports_external.literal("/v1/sections/{id}")
});
var getSectionInformationSectionsResponsesSchema = exports_external.object({
  200: sectionSchema
});
var getSectionInformationSectionsResponseSchema = getSectionInformationSectionsResponsesSchema.shape["keyof GetSectionInformationSectionsResponses"];
var editSectionDataSchema = exports_external.object({
  body: exports_external.object({
    "course_section[end_at]": exports_external.string().optional(),
    "course_section[integration_id]": exports_external.string().optional(),
    "course_section[name]": exports_external.string().optional(),
    "course_section[restrict_enrollments_to_section_dates]": exports_external.boolean().optional(),
    "course_section[sis_section_id]": exports_external.string().optional(),
    "course_section[start_at]": exports_external.string().optional()
  }).optional(),
  path: exports_external.object({
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/sections/{id}")
});
var editSectionResponsesSchema = exports_external.object({
  200: sectionSchema
});
var editSectionResponseSchema = editSectionResponsesSchema.shape["keyof EditSectionResponses"];
var deCrossListSectionDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/sections/{id}/crosslist")
});
var deCrossListSectionResponsesSchema = exports_external.object({
  200: sectionSchema
});
var deCrossListSectionResponseSchema = deCrossListSectionResponsesSchema.shape["keyof DeCrossListSectionResponses"];
var crossListSectionDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    id: exports_external.string(),
    new_course_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/sections/{id}/crosslist/{new_course_id}")
});
var crossListSectionResponsesSchema = exports_external.object({
  200: sectionSchema
});
var crossListSectionResponseSchema = crossListSectionResponsesSchema.shape["keyof CrossListSectionResponses"];
var getAllPeerReviewsSectionsPeerReviewsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    section_id: exports_external.string(),
    assignment_id: exports_external.string()
  }),
  query: exports_external.object({
    include: exports_external.array(exports_external.union([exports_external.literal("submission_comments"), exports_external.literal("user")])).optional()
  }).optional(),
  url: exports_external.literal("/v1/sections/{section_id}/assignments/{assignment_id}/peer_reviews")
});
var getAllPeerReviewsSectionsPeerReviewsResponsesSchema = exports_external.object({
  200: exports_external.array(peerReviewSchema)
});
var getAllPeerReviewsSectionsPeerReviewsResponseSchema = getAllPeerReviewsSectionsPeerReviewsResponsesSchema.shape["keyof GetAllPeerReviewsSectionsPeerReviewsResponses"];
var submissionSummarySectionsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    section_id: exports_external.string(),
    assignment_id: exports_external.string()
  }),
  query: exports_external.object({
    grouped: exports_external.boolean().optional()
  }).optional(),
  url: exports_external.literal("/v1/sections/{section_id}/assignments/{assignment_id}/submission_summary")
});
var submissionSummarySectionsResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var listAssignmentSubmissionsSectionsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    section_id: exports_external.string(),
    assignment_id: exports_external.string()
  }),
  query: exports_external.object({
    include: exports_external.array(exports_external.union([exports_external.literal("submission_history"), exports_external.literal("submission_comments"), exports_external.literal("rubric_assessment"), exports_external.literal("assignment"), exports_external.literal("visibility"), exports_external.literal("course"), exports_external.literal("user"), exports_external.literal("group")])).optional(),
    grouped: exports_external.boolean().optional(),
    page: exports_external.number().optional(),
    per_page: exports_external.number().optional()
  }).optional(),
  url: exports_external.literal("/v1/sections/{section_id}/assignments/{assignment_id}/submissions")
});
var submitAssignmentSectionsDataSchema = exports_external.object({
  body: exports_external.object({
    "comment[text_comment]": exports_external.string().optional(),
    "submission[body]": exports_external.string().optional(),
    "submission[file_ids]": exports_external.array(exports_external.number()).optional(),
    "submission[media_comment_id]": exports_external.string().optional(),
    "submission[media_comment_type]": exports_external.union([exports_external.literal("audio"), exports_external.literal("video")]).optional(),
    "submission[submission_type]": exports_external.union([exports_external.literal("online_text_entry"), exports_external.literal("online_url"), exports_external.literal("online_upload"), exports_external.literal("media_recording"), exports_external.literal("basic_lti_launch")]),
    "submission[url]": exports_external.string().optional()
  }),
  path: exports_external.object({
    section_id: exports_external.string(),
    assignment_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/sections/{section_id}/assignments/{assignment_id}/submissions")
});
var submitAssignmentSectionsResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var gradeOrCommentOnMultipleSubmissionsSectionsAssignmentsDataSchema = exports_external.object({
  body: exports_external.object({
    "grade_data[student_id][assignment_id]": exports_external.number().optional(),
    "grade_data[student_id][excuse]": exports_external.boolean().optional(),
    "grade_data[student_id][file_ids]": exports_external.array(exports_external.number()).optional(),
    "grade_data[student_id][group_comment]": exports_external.boolean().optional(),
    "grade_data[student_id][media_comment_id]": exports_external.string().optional(),
    "grade_data[student_id][media_comment_type]": exports_external.union([exports_external.literal("audio"), exports_external.literal("video")]).optional(),
    "grade_data[student_id][posted_grade]": exports_external.string().optional(),
    "grade_data[student_id][rubric_assessment]": exports_external.unknown().optional(),
    "grade_data[student_id][text_comment]": exports_external.string().optional()
  }).optional(),
  path: exports_external.object({
    section_id: exports_external.string(),
    assignment_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/sections/{section_id}/assignments/{assignment_id}/submissions/update_grades")
});
var gradeOrCommentOnMultipleSubmissionsSectionsAssignmentsResponsesSchema = exports_external.object({
  200: progressSchema
});
var gradeOrCommentOnMultipleSubmissionsSectionsAssignmentsResponseSchema = gradeOrCommentOnMultipleSubmissionsSectionsAssignmentsResponsesSchema.shape["keyof GradeOrCommentOnMultipleSubmissionsSectionsAssignmentsResponses"];
var deletePeerReviewSectionsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    section_id: exports_external.string(),
    assignment_id: exports_external.string(),
    submission_id: exports_external.string()
  }),
  query: exports_external.object({
    user_id: exports_external.number()
  }),
  url: exports_external.literal("/v1/sections/{section_id}/assignments/{assignment_id}/submissions/{submission_id}/peer_reviews")
});
var deletePeerReviewSectionsResponsesSchema = exports_external.object({
  200: peerReviewSchema
});
var deletePeerReviewSectionsResponseSchema = deletePeerReviewSectionsResponsesSchema.shape["keyof DeletePeerReviewSectionsResponses"];
var getAllPeerReviewsSectionsSubmissionsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    section_id: exports_external.string(),
    assignment_id: exports_external.string(),
    submission_id: exports_external.string()
  }),
  query: exports_external.object({
    include: exports_external.array(exports_external.union([exports_external.literal("submission_comments"), exports_external.literal("user")])).optional()
  }).optional(),
  url: exports_external.literal("/v1/sections/{section_id}/assignments/{assignment_id}/submissions/{submission_id}/peer_reviews")
});
var getAllPeerReviewsSectionsSubmissionsResponsesSchema = exports_external.object({
  200: exports_external.array(peerReviewSchema)
});
var getAllPeerReviewsSectionsSubmissionsResponseSchema = getAllPeerReviewsSectionsSubmissionsResponsesSchema.shape["keyof GetAllPeerReviewsSectionsSubmissionsResponses"];
var createPeerReviewSectionsDataSchema = exports_external.object({
  body: exports_external.object({
    user_id: exports_external.number()
  }),
  path: exports_external.object({
    section_id: exports_external.string(),
    assignment_id: exports_external.string(),
    submission_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/sections/{section_id}/assignments/{assignment_id}/submissions/{submission_id}/peer_reviews")
});
var createPeerReviewSectionsResponsesSchema = exports_external.object({
  200: peerReviewSchema
});
var createPeerReviewSectionsResponseSchema = createPeerReviewSectionsResponsesSchema.shape["keyof CreatePeerReviewSectionsResponses"];
var getSingleSubmissionSectionsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    section_id: exports_external.string(),
    assignment_id: exports_external.string(),
    user_id: exports_external.string()
  }),
  query: exports_external.object({
    include: exports_external.array(exports_external.union([exports_external.literal("submission_history"), exports_external.literal("submission_comments"), exports_external.literal("rubric_assessment"), exports_external.literal("visibility"), exports_external.literal("course"), exports_external.literal("user")])).optional()
  }).optional(),
  url: exports_external.literal("/v1/sections/{section_id}/assignments/{assignment_id}/submissions/{user_id}")
});
var getSingleSubmissionSectionsResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var gradeOrCommentOnSubmissionSectionsDataSchema = exports_external.object({
  body: exports_external.object({
    "comment[file_ids]": exports_external.array(exports_external.number()).optional(),
    "comment[group_comment]": exports_external.boolean().optional(),
    "comment[media_comment_id]": exports_external.string().optional(),
    "comment[media_comment_type]": exports_external.union([exports_external.literal("audio"), exports_external.literal("video")]).optional(),
    "comment[text_comment]": exports_external.string().optional(),
    "include[visibility]": exports_external.string().optional(),
    rubric_assessment: exports_external.unknown().optional(),
    "submission[excuse]": exports_external.boolean().optional(),
    "submission[late_policy_status]": exports_external.string().optional(),
    "submission[posted_grade]": exports_external.string().optional(),
    "submission[seconds_late_override]": exports_external.number().optional()
  }).optional(),
  path: exports_external.object({
    section_id: exports_external.string(),
    assignment_id: exports_external.string(),
    user_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/sections/{section_id}/assignments/{assignment_id}/submissions/{user_id}")
});
var uploadFileSectionsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    section_id: exports_external.string(),
    assignment_id: exports_external.string(),
    user_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/sections/{section_id}/assignments/{assignment_id}/submissions/{user_id}/files")
});
var uploadFileSectionsResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var markSubmissionAsUnreadSectionsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    section_id: exports_external.string(),
    assignment_id: exports_external.string(),
    user_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/sections/{section_id}/assignments/{assignment_id}/submissions/{user_id}/read")
});
var markSubmissionAsUnreadSectionsResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var markSubmissionAsReadSectionsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    section_id: exports_external.string(),
    assignment_id: exports_external.string(),
    user_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/sections/{section_id}/assignments/{assignment_id}/submissions/{user_id}/read")
});
var markSubmissionAsReadSectionsResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var listEnrollmentsSectionsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    section_id: exports_external.number()
  }),
  query: exports_external.object({
    page: exports_external.string().optional(),
    per_page: exports_external.number().optional(),
    type: exports_external.array(exports_external.string()).optional(),
    role: exports_external.array(exports_external.string()).optional(),
    state: exports_external.array(exports_external.union([exports_external.literal("active"), exports_external.literal("invited"), exports_external.literal("creation_pending"), exports_external.literal("deleted"), exports_external.literal("rejected"), exports_external.literal("completed"), exports_external.literal("inactive")])).optional(),
    include: exports_external.array(exports_external.union([exports_external.literal("avatar_url"), exports_external.literal("group_ids"), exports_external.literal("locked"), exports_external.literal("observed_users"), exports_external.literal("can_be_removed")])).optional(),
    user_id: exports_external.number().optional(),
    grading_period_id: exports_external.number().optional(),
    enrollment_term_id: exports_external.number().optional(),
    sis_account_id: exports_external.array(exports_external.string()).optional(),
    sis_course_id: exports_external.array(exports_external.string()).optional(),
    sis_section_id: exports_external.array(exports_external.string()).optional(),
    sis_user_id: exports_external.array(exports_external.string()).optional()
  }).optional(),
  url: exports_external.literal("/v1/sections/{section_id}/enrollments")
});
var enrollUserSectionsDataSchema = exports_external.object({
  body: exports_external.object({
    "enrollment[associated_user_id]": exports_external.number().optional(),
    "enrollment[course_section_id]": exports_external.number().optional(),
    "enrollment[enrollment_state]": exports_external.union([exports_external.literal("active"), exports_external.literal("invited"), exports_external.literal("inactive")]).optional(),
    "enrollment[limit_privileges_to_course_section]": exports_external.boolean().optional(),
    "enrollment[notify]": exports_external.boolean().optional(),
    "enrollment[role]": exports_external.unknown().optional(),
    "enrollment[role_id]": exports_external.number().optional(),
    "enrollment[self_enrolled]": exports_external.boolean().optional(),
    "enrollment[self_enrollment_code]": exports_external.string().optional(),
    "enrollment[type]": exports_external.union([exports_external.literal("StudentEnrollment"), exports_external.literal("TeacherEnrollment"), exports_external.literal("TaEnrollment"), exports_external.literal("ObserverEnrollment"), exports_external.literal("DesignerEnrollment")]),
    "enrollment[user_id]": exports_external.string()
  }),
  path: exports_external.object({
    section_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/sections/{section_id}/enrollments")
});
var listSubmissionsForMultipleAssignmentsSectionsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    section_id: exports_external.string()
  }),
  query: exports_external.object({
    student_ids: exports_external.array(exports_external.string()).optional(),
    assignment_ids: exports_external.array(exports_external.string()).optional(),
    grouped: exports_external.boolean().optional(),
    post_to_sis: exports_external.boolean().optional(),
    submitted_since: exports_external.string().optional(),
    graded_since: exports_external.string().optional(),
    grading_period_id: exports_external.number().optional(),
    workflow_state: exports_external.union([exports_external.literal("submitted"), exports_external.literal("unsubmitted"), exports_external.literal("graded"), exports_external.literal("pending_review")]).optional(),
    enrollment_state: exports_external.union([exports_external.literal("active"), exports_external.literal("concluded")]).optional(),
    state_based_on_date: exports_external.boolean().optional(),
    order: exports_external.union([exports_external.literal("id"), exports_external.literal("graded_at")]).optional(),
    order_direction: exports_external.union([exports_external.literal("ascending"), exports_external.literal("descending")]).optional(),
    include: exports_external.array(exports_external.union([exports_external.literal("submission_history"), exports_external.literal("submission_comments"), exports_external.literal("rubric_assessment"), exports_external.literal("assignment"), exports_external.literal("total_scores"), exports_external.literal("visibility"), exports_external.literal("course"), exports_external.literal("user")])).optional(),
    page: exports_external.string().optional(),
    per_page: exports_external.number().optional()
  }).optional(),
  url: exports_external.literal("/v1/sections/{section_id}/students/submissions")
});
var listSubmissionsForMultipleAssignmentsSectionsResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var gradeOrCommentOnMultipleSubmissionsSectionsSubmissionsDataSchema = exports_external.object({
  body: exports_external.object({
    "grade_data[student_id][assignment_id]": exports_external.number().optional(),
    "grade_data[student_id][excuse]": exports_external.boolean().optional(),
    "grade_data[student_id][file_ids]": exports_external.array(exports_external.number()).optional(),
    "grade_data[student_id][group_comment]": exports_external.boolean().optional(),
    "grade_data[student_id][media_comment_id]": exports_external.string().optional(),
    "grade_data[student_id][media_comment_type]": exports_external.union([exports_external.literal("audio"), exports_external.literal("video")]).optional(),
    "grade_data[student_id][posted_grade]": exports_external.string().optional(),
    "grade_data[student_id][rubric_assessment]": exports_external.unknown().optional(),
    "grade_data[student_id][text_comment]": exports_external.string().optional()
  }).optional(),
  path: exports_external.object({
    section_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/sections/{section_id}/submissions/update_grades")
});
var gradeOrCommentOnMultipleSubmissionsSectionsSubmissionsResponsesSchema = exports_external.object({
  200: progressSchema
});
var gradeOrCommentOnMultipleSubmissionsSectionsSubmissionsResponseSchema = gradeOrCommentOnMultipleSubmissionsSectionsSubmissionsResponsesSchema.shape["keyof GradeOrCommentOnMultipleSubmissionsSectionsSubmissionsResponses"];
var getKalturaConfigDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.never().optional(),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/services/kaltura")
});
var getKalturaConfigResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var startKalturaSessionDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.never().optional(),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/services/kaltura_session")
});
var startKalturaSessionResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var unShareBrandconfigThemeDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/shared_brand_configs/{id}")
});
var unShareBrandconfigThemeResponsesSchema = exports_external.object({
  200: sharedBrandConfigSchema
});
var unShareBrandconfigThemeResponseSchema = unShareBrandconfigThemeResponsesSchema.shape["keyof UnShareBrandconfigThemeResponses"];
var listActivityStreamActivityStreamDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.never().optional(),
  query: exports_external.object({
    only_active_courses: exports_external.boolean().optional(),
    page: exports_external.string().optional(),
    per_page: exports_external.number().optional()
  }).optional(),
  url: exports_external.literal("/v1/users/activity_stream")
});
var listActivityStreamActivityStreamResponsesSchema = exports_external.object({
  200: exports_external.array(activityStreamSchema)
});
var listActivityStreamActivityStreamResponseSchema = listActivityStreamActivityStreamResponsesSchema.shape["keyof ListActivityStreamActivityStreamResponses"];
var hideAllStreamItemsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.never().optional(),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/users/self/activity_stream")
});
var hideAllStreamItemsResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var listActivityStreamSelfDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.never().optional(),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/users/self/activity_stream")
});
var listActivityStreamSelfResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var activityStreamSummaryDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.never().optional(),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/users/self/activity_stream/summary")
});
var activityStreamSummaryResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var hideStreamItemDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/users/self/activity_stream/{id}")
});
var hideStreamItemResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var listBookmarksDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.never().optional(),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/users/self/bookmarks")
});
var listBookmarksResponsesSchema = exports_external.object({
  200: exports_external.array(bookmarkSchema)
});
var listBookmarksResponseSchema = listBookmarksResponsesSchema.shape["keyof ListBookmarksResponses"];
var createBookmarkDataSchema = exports_external.object({
  body: exports_external.object({
    data: exports_external.string().optional(),
    name: exports_external.string().optional(),
    position: exports_external.number().optional(),
    url: exports_external.string().optional()
  }).optional(),
  path: exports_external.never().optional(),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/users/self/bookmarks")
});
var createBookmarkResponsesSchema = exports_external.object({
  200: bookmarkSchema
});
var createBookmarkResponseSchema = createBookmarkResponsesSchema.shape["keyof CreateBookmarkResponses"];
var deleteBookmarkDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/users/self/bookmarks/{id}")
});
var deleteBookmarkResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var getBookmarkDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/users/self/bookmarks/{id}")
});
var getBookmarkResponsesSchema = exports_external.object({
  200: bookmarkSchema
});
var getBookmarkResponseSchema = getBookmarkResponsesSchema.shape["keyof GetBookmarkResponses"];
var updateBookmarkDataSchema = exports_external.object({
  body: exports_external.object({
    data: exports_external.string().optional(),
    name: exports_external.string().optional(),
    position: exports_external.number().optional(),
    url: exports_external.string().optional()
  }).optional(),
  path: exports_external.object({
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/users/self/bookmarks/{id}")
});
var updateBookmarkResponsesSchema = exports_external.object({
  200: folderSchema
});
var updateBookmarkResponseSchema = updateBookmarkResponsesSchema.shape["keyof UpdateBookmarkResponses"];
var deletePushNotificationEndpointDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.never().optional(),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/users/self/communication_channels/push")
});
var deletePushNotificationEndpointResponsesSchema = exports_external.object({
  200: successTrueSchema
});
var deletePushNotificationEndpointResponseSchema = deletePushNotificationEndpointResponsesSchema.shape["keyof DeletePushNotificationEndpointResponses"];
var updatePreferencesByCategoryDataSchema = exports_external.object({
  body: exports_external.object({
    "notification_preferences[frequency]": exports_external.string()
  }),
  path: exports_external.object({
    communication_channel_id: exports_external.string(),
    category: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/users/self/communication_channels/{communication_channel_id}/notification_preference_categories/{category}")
});
var updatePreferencesByCategoryResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var updateMultiplePreferencesCommunicationChannelIdDataSchema = exports_external.object({
  body: exports_external.object({
    "notification_preferences[X][frequency]": exports_external.string()
  }),
  path: exports_external.object({
    communication_channel_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/users/self/communication_channels/{communication_channel_id}/notification_preferences")
});
var updateMultiplePreferencesCommunicationChannelIdResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var updatePreferenceCommunicationChannelIdDataSchema = exports_external.object({
  body: exports_external.object({
    "notification_preferences[frequency]": exports_external.string()
  }),
  path: exports_external.object({
    communication_channel_id: exports_external.string(),
    notification: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/users/self/communication_channels/{communication_channel_id}/notification_preferences/{notification}")
});
var updatePreferenceCommunicationChannelIdResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var updateMultiplePreferencesTypeDataSchema = exports_external.object({
  body: exports_external.object({
    "notification_preferences[X][frequency]": exports_external.string()
  }),
  path: exports_external.object({
    type: exports_external.string(),
    address: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/users/self/communication_channels/{type}/{address}/notification_preferences")
});
var updateMultiplePreferencesTypeResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var updatePreferenceTypeDataSchema = exports_external.object({
  body: exports_external.object({
    "notification_preferences[frequency]": exports_external.string()
  }),
  path: exports_external.object({
    type: exports_external.string(),
    address: exports_external.string(),
    notification: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/users/self/communication_channels/{type}/{address}/notification_preferences/{notification}")
});
var updatePreferenceTypeResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var clearCourseNicknamesDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.never().optional(),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/users/self/course_nicknames")
});
var clearCourseNicknamesResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var listCourseNicknamesDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.never().optional(),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/users/self/course_nicknames")
});
var listCourseNicknamesResponsesSchema = exports_external.object({
  200: exports_external.array(courseNicknameSchema)
});
var listCourseNicknamesResponseSchema = listCourseNicknamesResponsesSchema.shape["keyof ListCourseNicknamesResponses"];
var removeCourseNicknameDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/users/self/course_nicknames/{course_id}")
});
var removeCourseNicknameResponsesSchema = exports_external.object({
  200: courseNicknameSchema
});
var removeCourseNicknameResponseSchema = removeCourseNicknameResponsesSchema.shape["keyof RemoveCourseNicknameResponses"];
var getCourseNicknameDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    course_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/users/self/course_nicknames/{course_id}")
});
var getCourseNicknameResponsesSchema = exports_external.object({
  200: courseNicknameSchema
});
var getCourseNicknameResponseSchema = getCourseNicknameResponsesSchema.shape["keyof GetCourseNicknameResponses"];
var setCourseNicknameDataSchema = exports_external.object({
  body: exports_external.object({
    nickname: exports_external.string()
  }),
  path: exports_external.object({
    course_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/users/self/course_nicknames/{course_id}")
});
var setCourseNicknameResponsesSchema = exports_external.object({
  200: courseNicknameSchema
});
var setCourseNicknameResponseSchema = setCourseNicknameResponsesSchema.shape["keyof SetCourseNicknameResponses"];
var resetCourseFavoritesDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.never().optional(),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/users/self/favorites/courses")
});
var resetCourseFavoritesResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var listFavoriteCoursesDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.never().optional(),
  query: exports_external.object({
    exclude_blueprint_courses: exports_external.boolean().optional(),
    page: exports_external.string().optional(),
    per_page: exports_external.number().optional()
  }).optional(),
  url: exports_external.literal("/v1/users/self/favorites/courses")
});
var removeCourseFromFavoritesDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/users/self/favorites/courses/{id}")
});
var removeCourseFromFavoritesResponsesSchema = exports_external.object({
  200: favoriteSchema
});
var removeCourseFromFavoritesResponseSchema = removeCourseFromFavoritesResponsesSchema.shape["keyof RemoveCourseFromFavoritesResponses"];
var addCourseToFavoritesDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/users/self/favorites/courses/{id}")
});
var addCourseToFavoritesResponsesSchema = exports_external.object({
  200: favoriteSchema
});
var addCourseToFavoritesResponseSchema = addCourseToFavoritesResponsesSchema.shape["keyof AddCourseToFavoritesResponses"];
var resetGroupFavoritesDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.never().optional(),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/users/self/favorites/groups")
});
var resetGroupFavoritesResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var listFavoriteGroupsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.never().optional(),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/users/self/favorites/groups")
});
var listFavoriteGroupsResponsesSchema = exports_external.object({
  200: exports_external.array(groupSchema)
});
var listFavoriteGroupsResponseSchema = listFavoriteGroupsResponsesSchema.shape["keyof ListFavoriteGroupsResponses"];
var removeGroupFromFavoritesDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/users/self/favorites/groups/{id}")
});
var removeGroupFromFavoritesResponsesSchema = exports_external.object({
  200: favoriteSchema
});
var removeGroupFromFavoritesResponseSchema = removeGroupFromFavoritesResponsesSchema.shape["keyof RemoveGroupFromFavoritesResponses"];
var addGroupToFavoritesDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/users/self/favorites/groups/{id}")
});
var addGroupToFavoritesResponsesSchema = exports_external.object({
  200: favoriteSchema
});
var addGroupToFavoritesResponseSchema = addGroupToFavoritesResponsesSchema.shape["keyof AddGroupToFavoritesResponses"];
var listYourGroupsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.never().optional(),
  query: exports_external.object({
    context_type: exports_external.union([exports_external.literal("Account"), exports_external.literal("Course")]).optional(),
    include: exports_external.array(exports_external.literal("tabs")).optional(),
    page: exports_external.string().optional(),
    per_page: exports_external.number().optional()
  }).optional(),
  url: exports_external.literal("/v1/users/self/groups")
});
var listYourGroupsResponsesSchema = exports_external.object({
  200: exports_external.array(groupSchema)
});
var listYourGroupsResponseSchema = listYourGroupsResponsesSchema.shape["keyof ListYourGroupsResponses"];
var getPandataEventsJwtTokenAndItsExpirationDateDataSchema = exports_external.object({
  body: exports_external.object({
    app_key: exports_external.string().optional()
  }).optional(),
  path: exports_external.never().optional(),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/users/self/pandata_events_token")
});
var getPandataEventsJwtTokenAndItsExpirationDateResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var listTodoItemsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.never().optional(),
  query: exports_external.object({
    include: exports_external.array(exports_external.literal("ungraded_quizzes")).optional(),
    page: exports_external.string().optional(),
    per_page: exports_external.number().optional()
  }).optional(),
  url: exports_external.literal("/v1/users/self/todo")
});
var listTodoItemsResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var listCountsForTodoItemsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.never().optional(),
  query: exports_external.object({
    include: exports_external.array(exports_external.literal("ungraded_quizzes")).optional()
  }).optional(),
  url: exports_external.literal("/v1/users/self/todo_item_count")
});
var listCountsForTodoItemsResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var listUpcomingAssignmentsCalendarEventsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.never().optional(),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/users/self/upcoming_events")
});
var listUpcomingAssignmentsCalendarEventsResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var showUserDetailsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/users/{id}")
});
var editUserDataSchema = exports_external.object({
  body: exports_external.object({
    "user[avatar][token]": exports_external.string().optional(),
    "user[avatar][url]": exports_external.string().optional(),
    "user[email]": exports_external.string().optional(),
    "user[locale]": exports_external.string().optional(),
    "user[name]": exports_external.string().optional(),
    "user[short_name]": exports_external.string().optional(),
    "user[sortable_name]": exports_external.string().optional(),
    "user[time_zone]": exports_external.string().optional()
  }).optional(),
  path: exports_external.object({
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/users/{id}")
});
var getCustomColorsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/users/{id}/colors")
});
var getCustomColorsResponsesSchema = exports_external.object({
  200: customColorsSchema
});
var getCustomColorsResponseSchema = getCustomColorsResponsesSchema.shape["keyof GetCustomColorsResponses"];
var getCustomColorDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    id: exports_external.string(),
    asset_string: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/users/{id}/colors/{asset_string}")
});
var getCustomColorResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var updateCustomColorDataSchema = exports_external.object({
  body: exports_external.object({
    hexcode: exports_external.string().optional()
  }).optional(),
  path: exports_external.object({
    id: exports_external.string(),
    asset_string: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/users/{id}/colors/{asset_string}")
});
var updateCustomColorResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var getDashboardPositionsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/users/{id}/dashboard_positions")
});
var getDashboardPositionsResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var updateDashboardPositionsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/users/{id}/dashboard_positions")
});
var updateDashboardPositionsResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var mergeUserIntoAnotherUserAccountsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    id: exports_external.string(),
    destination_account_id: exports_external.string(),
    destination_user_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/users/{id}/merge_into/accounts/{destination_account_id}/users/{destination_user_id}")
});
var mergeUserIntoAnotherUserDestinationUserIdDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    id: exports_external.string(),
    destination_user_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/users/{id}/merge_into/{destination_user_id}")
});
var updateUserSettingsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    id: exports_external.string()
  }),
  query: exports_external.object({
    manual_mark_as_read: exports_external.boolean().optional(),
    collapse_global_nav: exports_external.boolean().optional()
  }).optional(),
  url: exports_external.literal("/v1/users/{id}/settings")
});
var updateUserSettingsResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var splitMergedUsersIntoSeparateUsersDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/users/{id}/split")
});
var listAvatarOptionsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    user_id: exports_external.string()
  }),
  query: exports_external.object({
    page: exports_external.string().optional(),
    per_page: exports_external.number().optional()
  }).optional(),
  url: exports_external.literal("/v1/users/{user_id}/avatars")
});
var listAvatarOptionsResponsesSchema = exports_external.object({
  200: exports_external.array(avatarSchema)
});
var listAvatarOptionsResponseSchema = listAvatarOptionsResponsesSchema.shape["keyof ListAvatarOptionsResponses"];
var listCalendarEventsForUserDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    user_id: exports_external.string()
  }),
  query: exports_external.object({
    type: exports_external.union([exports_external.literal("event"), exports_external.literal("assignment")]).optional(),
    start_date: exports_external.string().optional(),
    end_date: exports_external.string().optional(),
    undated: exports_external.boolean().optional(),
    all_events: exports_external.boolean().optional(),
    context_codes: exports_external.array(exports_external.string()).optional(),
    excludes: exports_external.array(exports_external.array(exports_external.record(exports_external.unknown()))).optional(),
    page: exports_external.string().optional(),
    per_page: exports_external.number().optional()
  }).optional(),
  url: exports_external.literal("/v1/users/{user_id}/calendar_events")
});
var listCalendarEventsForUserResponsesSchema = exports_external.object({
  200: exports_external.array(calendarEventSchema)
});
var listCalendarEventsForUserResponseSchema = listCalendarEventsForUserResponsesSchema.shape["keyof ListCalendarEventsForUserResponses"];
var listUserCommunicationChannelsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    user_id: exports_external.string()
  }),
  query: exports_external.object({
    page: exports_external.string().optional(),
    per_page: exports_external.number().optional()
  }).optional(),
  url: exports_external.literal("/v1/users/{user_id}/communication_channels")
});
var listUserCommunicationChannelsResponsesSchema = exports_external.object({
  200: exports_external.array(communicationChannelSchema)
});
var listUserCommunicationChannelsResponseSchema = listUserCommunicationChannelsResponsesSchema.shape["keyof ListUserCommunicationChannelsResponses"];
var createCommunicationChannelDataSchema = exports_external.object({
  body: exports_external.object({
    "communication_channel[address]": exports_external.string(),
    "communication_channel[token]": exports_external.string().optional(),
    "communication_channel[type]": exports_external.union([exports_external.literal("email"), exports_external.literal("sms"), exports_external.literal("push")]),
    skip_confirmation: exports_external.boolean().optional()
  }),
  path: exports_external.object({
    user_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/users/{user_id}/communication_channels")
});
var createCommunicationChannelResponsesSchema = exports_external.object({
  200: communicationChannelSchema
});
var createCommunicationChannelResponseSchema = createCommunicationChannelResponsesSchema.shape["keyof CreateCommunicationChannelResponses"];
var listOfPreferenceCategoriesDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    user_id: exports_external.string(),
    communication_channel_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/users/{user_id}/communication_channels/{communication_channel_id}/notification_preference_categories")
});
var listOfPreferenceCategoriesResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var listPreferencesCommunicationChannelIdDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    user_id: exports_external.string(),
    communication_channel_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/users/{user_id}/communication_channels/{communication_channel_id}/notification_preferences")
});
var listPreferencesCommunicationChannelIdResponsesSchema = exports_external.object({
  200: exports_external.array(notificationPreferenceSchema)
});
var listPreferencesCommunicationChannelIdResponseSchema = listPreferencesCommunicationChannelIdResponsesSchema.shape["keyof ListPreferencesCommunicationChannelIdResponses"];
var getPreferenceCommunicationChannelIdDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    user_id: exports_external.string(),
    communication_channel_id: exports_external.string(),
    notification: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/users/{user_id}/communication_channels/{communication_channel_id}/notification_preferences/{notification}")
});
var getPreferenceCommunicationChannelIdResponsesSchema = exports_external.object({
  200: notificationPreferenceSchema
});
var getPreferenceCommunicationChannelIdResponseSchema = getPreferenceCommunicationChannelIdResponsesSchema.shape["keyof GetPreferenceCommunicationChannelIdResponses"];
var deleteCommunicationChannelIdDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    user_id: exports_external.string(),
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/users/{user_id}/communication_channels/{id}")
});
var deleteCommunicationChannelIdResponsesSchema = exports_external.object({
  200: communicationChannelSchema
});
var deleteCommunicationChannelIdResponseSchema = deleteCommunicationChannelIdResponsesSchema.shape["keyof DeleteCommunicationChannelIdResponses"];
var deleteCommunicationChannelTypeDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    user_id: exports_external.string(),
    type: exports_external.string(),
    address: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/users/{user_id}/communication_channels/{type}/{address}")
});
var deleteCommunicationChannelTypeResponsesSchema = exports_external.object({
  200: communicationChannelSchema
});
var deleteCommunicationChannelTypeResponseSchema = deleteCommunicationChannelTypeResponsesSchema.shape["keyof DeleteCommunicationChannelTypeResponses"];
var listPreferencesTypeDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    user_id: exports_external.string(),
    type: exports_external.string(),
    address: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/users/{user_id}/communication_channels/{type}/{address}/notification_preferences")
});
var listPreferencesTypeResponsesSchema = exports_external.object({
  200: exports_external.array(notificationPreferenceSchema)
});
var listPreferencesTypeResponseSchema = listPreferencesTypeResponsesSchema.shape["keyof ListPreferencesTypeResponses"];
var getPreferenceTypeDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    user_id: exports_external.string(),
    type: exports_external.string(),
    address: exports_external.string(),
    notification: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/users/{user_id}/communication_channels/{type}/{address}/notification_preferences/{notification}")
});
var getPreferenceTypeResponsesSchema = exports_external.object({
  200: notificationPreferenceSchema
});
var getPreferenceTypeResponseSchema = getPreferenceTypeResponsesSchema.shape["keyof GetPreferenceTypeResponses"];
var listContentExportsUsersDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    user_id: exports_external.string()
  }),
  query: exports_external.object({
    page: exports_external.string().optional(),
    per_page: exports_external.number().optional()
  }).optional(),
  url: exports_external.literal("/v1/users/{user_id}/content_exports")
});
var listContentExportsUsersResponsesSchema = exports_external.object({
  200: exports_external.array(contentExportSchema)
});
var listContentExportsUsersResponseSchema = listContentExportsUsersResponsesSchema.shape["keyof ListContentExportsUsersResponses"];
var exportContentUsersDataSchema = exports_external.object({
  body: exports_external.object({
    export_type: exports_external.union([exports_external.literal("common_cartridge"), exports_external.literal("qti"), exports_external.literal("zip")]),
    select: exports_external.union([exports_external.literal("folders"), exports_external.literal("files"), exports_external.literal("attachments"), exports_external.literal("quizzes"), exports_external.literal("assignments"), exports_external.literal("announcements"), exports_external.literal("calendar_events"), exports_external.literal("discussion_topics"), exports_external.literal("modules"), exports_external.literal("module_items"), exports_external.literal("pages"), exports_external.literal("rubrics")]).optional(),
    skip_notifications: exports_external.boolean().optional()
  }),
  path: exports_external.object({
    user_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/users/{user_id}/content_exports")
});
var exportContentUsersResponsesSchema = exports_external.object({
  200: contentExportSchema
});
var exportContentUsersResponseSchema = exportContentUsersResponsesSchema.shape["keyof ExportContentUsersResponses"];
var showContentExportUsersDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    user_id: exports_external.string(),
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/users/{user_id}/content_exports/{id}")
});
var showContentExportUsersResponsesSchema = exports_external.object({
  200: contentExportSchema
});
var showContentExportUsersResponseSchema = showContentExportUsersResponsesSchema.shape["keyof ShowContentExportUsersResponses"];
var listLicensesUsersDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    user_id: exports_external.string()
  }),
  query: exports_external.object({
    page: exports_external.string().optional(),
    per_page: exports_external.number().optional()
  }).optional(),
  url: exports_external.literal("/v1/users/{user_id}/content_licenses")
});
var listLicensesUsersResponsesSchema = exports_external.object({
  200: exports_external.array(licenseSchema)
});
var listLicensesUsersResponseSchema = listLicensesUsersResponsesSchema.shape["keyof ListLicensesUsersResponses"];
var listContentMigrationsUsersDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    user_id: exports_external.string()
  }),
  query: exports_external.object({
    page: exports_external.string().optional(),
    per_page: exports_external.number().optional()
  }).optional(),
  url: exports_external.literal("/v1/users/{user_id}/content_migrations")
});
var listContentMigrationsUsersResponsesSchema = exports_external.object({
  200: exports_external.array(contentMigrationSchema)
});
var listContentMigrationsUsersResponseSchema = listContentMigrationsUsersResponsesSchema.shape["keyof ListContentMigrationsUsersResponses"];
var createContentMigrationUsersDataSchema = exports_external.object({
  body: exports_external.object({
    "date_shift_options[day_substitutions][X]": exports_external.number().optional(),
    "date_shift_options[new_end_date]": exports_external.string().optional(),
    "date_shift_options[new_start_date]": exports_external.string().optional(),
    "date_shift_options[old_end_date]": exports_external.string().optional(),
    "date_shift_options[old_start_date]": exports_external.string().optional(),
    "date_shift_options[remove_dates]": exports_external.boolean().optional(),
    "date_shift_options[shift_dates]": exports_external.boolean().optional(),
    migration_type: exports_external.string(),
    "pre_attachment[name]": exports_external.string().optional(),
    "pre_attachment[todo]": exports_external.string().optional(),
    "settings[file_url]": exports_external.string().optional(),
    "settings[folder_id]": exports_external.string().optional(),
    "settings[overwrite_quizzes]": exports_external.boolean().optional(),
    "settings[question_bank_id]": exports_external.number().optional(),
    "settings[question_bank_name]": exports_external.string().optional(),
    "settings[source_course_id]": exports_external.string().optional()
  }),
  path: exports_external.object({
    user_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/users/{user_id}/content_migrations")
});
var createContentMigrationUsersResponsesSchema = exports_external.object({
  200: contentMigrationSchema
});
var createContentMigrationUsersResponseSchema = createContentMigrationUsersResponsesSchema.shape["keyof CreateContentMigrationUsersResponses"];
var listMigrationSystemsUsersDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    user_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/users/{user_id}/content_migrations/migrators")
});
var listMigrationSystemsUsersResponsesSchema = exports_external.object({
  200: exports_external.array(migratorSchema)
});
var listMigrationSystemsUsersResponseSchema = listMigrationSystemsUsersResponsesSchema.shape["keyof ListMigrationSystemsUsersResponses"];
var listMigrationIssuesUsersDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    user_id: exports_external.string(),
    content_migration_id: exports_external.string()
  }),
  query: exports_external.object({
    page: exports_external.string().optional(),
    per_page: exports_external.number().optional()
  }).optional(),
  url: exports_external.literal("/v1/users/{user_id}/content_migrations/{content_migration_id}/migration_issues")
});
var listMigrationIssuesUsersResponsesSchema = exports_external.object({
  200: exports_external.array(migrationIssueSchema)
});
var listMigrationIssuesUsersResponseSchema = listMigrationIssuesUsersResponsesSchema.shape["keyof ListMigrationIssuesUsersResponses"];
var getMigrationIssueUsersDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    user_id: exports_external.string(),
    content_migration_id: exports_external.string(),
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/users/{user_id}/content_migrations/{content_migration_id}/migration_issues/{id}")
});
var getMigrationIssueUsersResponsesSchema = exports_external.object({
  200: migrationIssueSchema
});
var getMigrationIssueUsersResponseSchema = getMigrationIssueUsersResponsesSchema.shape["keyof GetMigrationIssueUsersResponses"];
var updateMigrationIssueUsersDataSchema = exports_external.object({
  body: exports_external.object({
    workflow_state: exports_external.union([exports_external.literal("active"), exports_external.literal("resolved")])
  }),
  path: exports_external.object({
    user_id: exports_external.string(),
    content_migration_id: exports_external.string(),
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/users/{user_id}/content_migrations/{content_migration_id}/migration_issues/{id}")
});
var updateMigrationIssueUsersResponsesSchema = exports_external.object({
  200: migrationIssueSchema
});
var updateMigrationIssueUsersResponseSchema = updateMigrationIssueUsersResponsesSchema.shape["keyof UpdateMigrationIssueUsersResponses"];
var getContentMigrationUsersDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    user_id: exports_external.string(),
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/users/{user_id}/content_migrations/{id}")
});
var getContentMigrationUsersResponsesSchema = exports_external.object({
  200: contentMigrationSchema
});
var getContentMigrationUsersResponseSchema = getContentMigrationUsersResponsesSchema.shape["keyof GetContentMigrationUsersResponses"];
var updateContentMigrationUsersDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    user_id: exports_external.string(),
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/users/{user_id}/content_migrations/{id}")
});
var updateContentMigrationUsersResponsesSchema = exports_external.object({
  200: contentMigrationSchema
});
var updateContentMigrationUsersResponseSchema = updateContentMigrationUsersResponsesSchema.shape["keyof UpdateContentMigrationUsersResponses"];
var listCoursesForUserDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    user_id: exports_external.string()
  }),
  query: exports_external.object({
    page: exports_external.string().optional(),
    per_page: exports_external.number().optional(),
    include: exports_external.array(exports_external.union([exports_external.literal("needs_grading_count"), exports_external.literal("syllabus_body"), exports_external.literal("public_description"), exports_external.literal("total_scores"), exports_external.literal("current_grading_period_scores"), exports_external.literal("term"), exports_external.literal("account"), exports_external.literal("course_progress"), exports_external.literal("sections"), exports_external.literal("storage_quota_used_mb"), exports_external.literal("total_students"), exports_external.literal("passback_status"), exports_external.literal("favorites"), exports_external.literal("teachers"), exports_external.literal("observed_users"), exports_external.literal("course_image")])).optional(),
    state: exports_external.array(exports_external.union([exports_external.literal("unpublished"), exports_external.literal("available"), exports_external.literal("completed"), exports_external.literal("deleted")])).optional(),
    enrollment_state: exports_external.union([exports_external.literal("active"), exports_external.literal("invited_or_pending"), exports_external.literal("completed")]).optional()
  }).optional(),
  url: exports_external.literal("/v1/users/{user_id}/courses")
});
var listAssignmentsForUserDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    user_id: exports_external.string(),
    course_id: exports_external.string()
  }),
  query: exports_external.object({
    include: exports_external.array(exports_external.union([exports_external.literal("submission"), exports_external.literal("assignment_visibility"), exports_external.literal("all_dates"), exports_external.literal("overrides"), exports_external.literal("observed_users")])).optional(),
    search_term: exports_external.string().optional(),
    override_assignment_dates: exports_external.boolean().optional(),
    needs_grading_count_by_section: exports_external.boolean().optional(),
    bucket: exports_external.union([exports_external.literal("past"), exports_external.literal("overdue"), exports_external.literal("undated"), exports_external.literal("ungraded"), exports_external.literal("unsubmitted"), exports_external.literal("upcoming"), exports_external.literal("future")]).optional(),
    assignment_ids: exports_external.array(exports_external.string()).optional(),
    order_by: exports_external.union([exports_external.literal("position"), exports_external.literal("name")]).optional(),
    page: exports_external.string().optional(),
    per_page: exports_external.number().optional()
  }).optional(),
  url: exports_external.literal("/v1/users/{user_id}/courses/{course_id}/assignments")
});
var deleteCustomDataDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    user_id: exports_external.string()
  }),
  query: exports_external.object({
    ns: exports_external.string()
  }),
  url: exports_external.literal("/v1/users/{user_id}/custom_data")
});
var deleteCustomDataResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var loadCustomDataDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    user_id: exports_external.string()
  }),
  query: exports_external.object({
    ns: exports_external.string()
  }),
  url: exports_external.literal("/v1/users/{user_id}/custom_data")
});
var loadCustomDataResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var storeCustomDataDataSchema = exports_external.object({
  body: exports_external.object({
    data: exports_external.unknown(),
    ns: exports_external.string()
  }),
  path: exports_external.object({
    user_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/users/{user_id}/custom_data")
});
var storeCustomDataResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var listEnrollmentsUsersDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    user_id: exports_external.string()
  }),
  query: exports_external.object({
    page: exports_external.string().optional(),
    per_page: exports_external.number().optional(),
    type: exports_external.array(exports_external.string()).optional(),
    role: exports_external.array(exports_external.string()).optional(),
    state: exports_external.array(exports_external.union([exports_external.literal("active"), exports_external.literal("invited"), exports_external.literal("creation_pending"), exports_external.literal("deleted"), exports_external.literal("rejected"), exports_external.literal("completed"), exports_external.literal("inactive")])).optional(),
    include: exports_external.array(exports_external.union([exports_external.literal("avatar_url"), exports_external.literal("group_ids"), exports_external.literal("locked"), exports_external.literal("observed_users"), exports_external.literal("can_be_removed")])).optional(),
    grading_period_id: exports_external.number().optional(),
    enrollment_term_id: exports_external.number().optional(),
    sis_account_id: exports_external.array(exports_external.string()).optional(),
    sis_course_id: exports_external.array(exports_external.string()).optional(),
    sis_section_id: exports_external.array(exports_external.string()).optional(),
    sis_user_id: exports_external.array(exports_external.string()).optional()
  }).optional(),
  url: exports_external.literal("/v1/users/{user_id}/enrollments")
});
var listFeaturesUsersDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    user_id: exports_external.string()
  }),
  query: exports_external.object({
    page: exports_external.string().optional(),
    per_page: exports_external.number().optional()
  }).optional(),
  url: exports_external.literal("/v1/users/{user_id}/features")
});
var listFeaturesUsersResponsesSchema = exports_external.object({
  200: exports_external.array(featureSchema)
});
var listFeaturesUsersResponseSchema = listFeaturesUsersResponsesSchema.shape["keyof ListFeaturesUsersResponses"];
var listEnabledFeaturesUsersDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    user_id: exports_external.string()
  }),
  query: exports_external.object({
    page: exports_external.string().optional(),
    per_page: exports_external.number().optional()
  }).optional(),
  url: exports_external.literal("/v1/users/{user_id}/features/enabled")
});
var listEnabledFeaturesUsersResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var removeFeatureFlagUsersDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    user_id: exports_external.string(),
    feature: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/users/{user_id}/features/flags/{feature}")
});
var removeFeatureFlagUsersResponsesSchema = exports_external.object({
  200: featureFlagSchema
});
var removeFeatureFlagUsersResponseSchema = removeFeatureFlagUsersResponsesSchema.shape["keyof RemoveFeatureFlagUsersResponses"];
var getFeatureFlagUsersDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    user_id: exports_external.string(),
    feature: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/users/{user_id}/features/flags/{feature}")
});
var getFeatureFlagUsersResponsesSchema = exports_external.object({
  200: featureFlagSchema
});
var getFeatureFlagUsersResponseSchema = getFeatureFlagUsersResponsesSchema.shape["keyof GetFeatureFlagUsersResponses"];
var setFeatureFlagUsersDataSchema = exports_external.object({
  body: exports_external.object({
    state: exports_external.union([exports_external.literal(false), exports_external.literal("allowed"), exports_external.literal(true)]).optional()
  }).optional(),
  path: exports_external.object({
    user_id: exports_external.string(),
    feature: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/users/{user_id}/features/flags/{feature}")
});
var setFeatureFlagUsersResponsesSchema = exports_external.object({
  200: featureFlagSchema
});
var setFeatureFlagUsersResponseSchema = setFeatureFlagUsersResponsesSchema.shape["keyof SetFeatureFlagUsersResponses"];
var uploadFileToUsersFilesDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    user_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/users/{user_id}/files")
});
var uploadFileToUsersFilesResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var getQuotaInformationUsersDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    user_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/users/{user_id}/files/quota")
});
var getQuotaInformationUsersResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var getFileUsersDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    user_id: exports_external.string(),
    id: exports_external.string()
  }),
  query: exports_external.object({
    include: exports_external.array(exports_external.literal("user")).optional()
  }).optional(),
  url: exports_external.literal("/v1/users/{user_id}/files/{id}")
});
var getFileUsersResponsesSchema = exports_external.object({
  200: fileSchema
});
var getFileUsersResponseSchema = getFileUsersResponsesSchema.shape["keyof GetFileUsersResponses"];
var listAllFoldersUsersDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    user_id: exports_external.string()
  }),
  query: exports_external.object({
    page: exports_external.string().optional(),
    per_page: exports_external.number().optional()
  }).optional(),
  url: exports_external.literal("/v1/users/{user_id}/folders")
});
var listAllFoldersUsersResponsesSchema = exports_external.object({
  200: exports_external.array(folderSchema)
});
var listAllFoldersUsersResponseSchema = listAllFoldersUsersResponsesSchema.shape["keyof ListAllFoldersUsersResponses"];
var createFolderUsersDataSchema = exports_external.object({
  body: exports_external.object({
    hidden: exports_external.boolean().optional(),
    lock_at: exports_external.string().optional(),
    locked: exports_external.boolean().optional(),
    name: exports_external.string(),
    parent_folder_id: exports_external.string().optional(),
    parent_folder_path: exports_external.string().optional(),
    position: exports_external.number().optional(),
    unlock_at: exports_external.string().optional()
  }),
  path: exports_external.object({
    user_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/users/{user_id}/folders")
});
var createFolderUsersResponsesSchema = exports_external.object({
  200: folderSchema
});
var createFolderUsersResponseSchema = createFolderUsersResponsesSchema.shape["keyof CreateFolderUsersResponses"];
var resolvePathUsersDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    user_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/users/{user_id}/folders/by_path")
});
var resolvePathUsersResponsesSchema = exports_external.object({
  200: exports_external.array(folderSchema)
});
var resolvePathUsersResponseSchema = resolvePathUsersResponsesSchema.shape["keyof ResolvePathUsersResponses"];
var resolvePathUsersFullPathDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    user_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/users/{user_id}/folders/by_path/*full_path")
});
var resolvePathUsersFullPathResponsesSchema = exports_external.object({
  200: exports_external.array(folderSchema)
});
var resolvePathUsersFullPathResponseSchema = resolvePathUsersFullPathResponsesSchema.shape["keyof ResolvePathUsersFullPathResponses"];
var getFolderUsersDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    user_id: exports_external.string(),
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/users/{user_id}/folders/{id}")
});
var getFolderUsersResponsesSchema = exports_external.object({
  200: folderSchema
});
var getFolderUsersResponseSchema = getFolderUsersResponsesSchema.shape["keyof GetFolderUsersResponses"];
var listUserLoginsUsersDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    user_id: exports_external.string()
  }),
  query: exports_external.object({
    page: exports_external.string().optional(),
    per_page: exports_external.number().optional()
  }).optional(),
  url: exports_external.literal("/v1/users/{user_id}/logins")
});
var listUserLoginsUsersResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var deleteUserLoginDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    user_id: exports_external.string(),
    id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/users/{user_id}/logins/{id}")
});
var deleteUserLoginResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var listMissingSubmissionsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    user_id: exports_external.string()
  }),
  query: exports_external.object({
    include: exports_external.array(exports_external.union([exports_external.literal("planner_overrides"), exports_external.literal("course")])).optional(),
    filter: exports_external.array(exports_external.literal("submittable")).optional(),
    page: exports_external.string().optional(),
    per_page: exports_external.number().optional()
  }).optional(),
  url: exports_external.literal("/v1/users/{user_id}/missing_submissions")
});
var listObserveesDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    user_id: exports_external.string()
  }),
  query: exports_external.object({
    include: exports_external.array(exports_external.literal("avatar_url")).optional(),
    page: exports_external.string().optional(),
    per_page: exports_external.number().optional()
  }).optional(),
  url: exports_external.literal("/v1/users/{user_id}/observees")
});
var addObserveeWithCredentialsDataSchema = exports_external.object({
  body: exports_external.object({
    access_token: exports_external.string().optional(),
    "observee[password]": exports_external.string().optional(),
    "observee[unique_id]": exports_external.string().optional(),
    pairing_code: exports_external.string().optional(),
    root_account_id: exports_external.number().optional()
  }).optional(),
  path: exports_external.object({
    user_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/users/{user_id}/observees")
});
var removeObserveeDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    user_id: exports_external.string(),
    observee_id: exports_external.string()
  }),
  query: exports_external.object({
    root_account_id: exports_external.number().optional()
  }).optional(),
  url: exports_external.literal("/v1/users/{user_id}/observees/{observee_id}")
});
var showObserveeDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    user_id: exports_external.string(),
    observee_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/users/{user_id}/observees/{observee_id}")
});
var addObserveeDataSchema = exports_external.object({
  body: exports_external.object({
    root_account_id: exports_external.number().optional()
  }).optional(),
  path: exports_external.object({
    user_id: exports_external.string(),
    observee_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/users/{user_id}/observees/{observee_id}")
});
var listUserPageViewsDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    user_id: exports_external.string()
  }),
  query: exports_external.object({
    start_time: exports_external.string().optional(),
    end_time: exports_external.string().optional(),
    page: exports_external.string().optional(),
    per_page: exports_external.number().optional()
  }).optional(),
  url: exports_external.literal("/v1/users/{user_id}/page_views")
});
var pageViewSchema = exports_external.object({
  action: exports_external.string().optional().nullable(),
  app_name: exports_external.string().optional().nullable(),
  asset_type: exports_external.string().optional().nullable(),
  context_type: exports_external.string().optional().nullable(),
  contributed: exports_external.boolean().optional().nullable(),
  controller: exports_external.string().optional().nullable(),
  created_at: exports_external.string().optional().nullable(),
  http_method: exports_external.string().optional().nullable(),
  id: exports_external.string(),
  interaction_seconds: exports_external.number().optional().nullable(),
  links: pageViewLinksSchema.optional(),
  participated: exports_external.boolean().optional().nullable(),
  remote_ip: exports_external.string().optional().nullable(),
  render_time: exports_external.number().optional().nullable(),
  url: exports_external.string().optional().nullable(),
  user_agent: exports_external.string().optional().nullable(),
  user_request: exports_external.boolean().optional().nullable()
});
var listUserPageViewsResponsesSchema = exports_external.object({
  200: exports_external.array(pageViewSchema)
});
var getUserProfileDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    user_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/users/{user_id}/profile")
});
var getUserProfileResponsesSchema = exports_external.object({
  200: profileSchema
});
var getUserProfileResponseSchema = getUserProfileResponsesSchema.shape["keyof GetUserProfileResponses"];
var removeUsageRightsUsersDataSchema = exports_external.object({
  body: exports_external.never().optional(),
  path: exports_external.object({
    user_id: exports_external.string()
  }),
  query: exports_external.object({
    file_ids: exports_external.array(exports_external.string()),
    folder_ids: exports_external.array(exports_external.string()).optional()
  }),
  url: exports_external.literal("/v1/users/{user_id}/usage_rights")
});
var removeUsageRightsUsersResponsesSchema = exports_external.object({
  200: exports_external.unknown()
});
var setUsageRightsUsersDataSchema = exports_external.object({
  body: exports_external.object({
    file_ids: exports_external.array(exports_external.string()),
    folder_ids: exports_external.array(exports_external.string()).optional(),
    publish: exports_external.boolean().optional(),
    "usage_rights[legal_copyright]": exports_external.string().optional(),
    "usage_rights[license]": exports_external.string().optional(),
    "usage_rights[use_justification]": exports_external.union([exports_external.literal("own_copyright"), exports_external.literal("used_by_permission"), exports_external.literal("fair_use"), exports_external.literal("public_domain"), exports_external.literal("creative_commons")])
  }),
  path: exports_external.object({
    user_id: exports_external.string()
  }),
  query: exports_external.never().optional(),
  url: exports_external.literal("/v1/users/{user_id}/usage_rights")
});
var setUsageRightsUsersResponsesSchema = exports_external.object({
  200: usageRightsSchema
});
var setUsageRightsUsersResponseSchema = setUsageRightsUsersResponsesSchema.shape["keyof SetUsageRightsUsersResponses"];
var clientOptionsSchema = exports_external.object({
  baseURL: exports_external.union([exports_external.any(), exports_external.string().and(exports_external.object({}))])
});
var outcomePathSchema = exports_external.object({
  id: exports_external.number().optional(),
  parts: outcomePathPartSchema.optional()
});
var submissionCommentSchema = exports_external.object({
  author: userDisplaySchema.optional(),
  author_id: exports_external.number().optional().nullable(),
  author_name: exports_external.string().optional().nullable(),
  comment: exports_external.string().optional().nullable(),
  created_at: exports_external.string().optional().nullable(),
  edited_at: exports_external.string().optional().nullable(),
  id: exports_external.number().optional(),
  media_comment: mediaCommentSchema.optional()
});
var showOriginalityReportFilesResponseSchema = showOriginalityReportFilesResponsesSchema.shape["keyof ShowOriginalityReportFilesResponses"];
var listAuthenticationProvidersResponseSchema = listAuthenticationProvidersResponsesSchema.shape["keyof ListAuthenticationProvidersResponses"];
var listFeaturesAccountsResponseSchema = listFeaturesAccountsResponsesSchema.shape["keyof ListFeaturesAccountsResponses"];
var listGroupCategoriesForContextAccountsResponseSchema = listGroupCategoriesForContextAccountsResponsesSchema.shape["keyof ListGroupCategoriesForContextAccountsResponses"];
var indexOfReportsResponseSchema = indexOfReportsResponsesSchema.shape["keyof IndexOfReportsResponses"];
var listRubricsAccountsResponseSchema = listRubricsAccountsResponsesSchema.shape["keyof ListRubricsAccountsResponses"];
var listAnnouncementsResponseSchema = listAnnouncementsResponsesSchema.shape["keyof ListAnnouncementsResponses"];
var queryByCourseResponseSchema = queryByCourseResponsesSchema.shape["keyof QueryByCourseResponses"];
var queryByAssignmentResponseSchema = queryByAssignmentResponsesSchema.shape["keyof QueryByAssignmentResponses"];
var listConversationsResponseSchema = listConversationsResponsesSchema.shape["keyof ListConversationsResponses"];
var listAssignmentGroupsResponseSchema = listAssignmentGroupsResponsesSchema.shape["keyof ListAssignmentGroupsResponses"];
var listConferencesCoursesResponseSchema = listConferencesCoursesResponsesSchema.shape["keyof ListConferencesCoursesResponses"];
var listContentExportsCoursesResponseSchema = listContentExportsCoursesResponsesSchema.shape["keyof ListContentExportsCoursesResponses"];
var listsSubmissionsResponseSchema = listsSubmissionsResponsesSchema.shape["keyof ListsSubmissionsResponses"];
var getModuleItemSequenceResponseSchema = getModuleItemSequenceResponsesSchema.shape["keyof GetModuleItemSequenceResponses"];
var listQuizzesInCourseResponseSchema = listQuizzesInCourseResponsesSchema.shape["keyof ListQuizzesInCourseResponses"];
var listCourseSectionsResponseSchema = listCourseSectionsResponsesSchema.shape["keyof ListCourseSectionsResponses"];
var listCoursesWithTheirLatestEpubExportResponseSchema = listCoursesWithTheirLatestEpubExportResponsesSchema.shape["keyof ListCoursesWithTheirLatestEpubExportResponses"];
var listUserPageViewsResponseSchema = listUserPageViewsResponsesSchema.shape["keyof ListUserPageViewsResponses"];
var adminSchema = exports_external.lazy(() => exports_external.object({
  id: exports_external.number(),
  role: exports_external.string().optional().nullable(),
  user: userSchema.optional(),
  workflow_state: exports_external.string().optional().nullable()
}));
var userSchema = exports_external.lazy(() => exports_external.object({
  avatar_state: exports_external.string().optional().nullable(),
  avatar_url: exports_external.string().optional().nullable(),
  bio: exports_external.string().optional().nullable(),
  email: exports_external.string().optional().nullable(),
  enrollments: exports_external.array(enrollmentSchema).optional().nullable(),
  first_name: exports_external.string().optional().nullable(),
  id: exports_external.number(),
  integration_id: exports_external.string().optional().nullable(),
  last_login: exports_external.string().optional().nullable(),
  last_name: exports_external.string().optional().nullable(),
  locale: exports_external.string().optional().nullable(),
  login_id: exports_external.string().optional().nullable(),
  name: exports_external.string().optional().nullable(),
  short_name: exports_external.string().optional().nullable(),
  sections: exports_external.string().optional().nullable(),
  sis_import_id: exports_external.number().optional().nullable(),
  sis_user_id: exports_external.string().optional().nullable(),
  sortable_name: exports_external.string().optional().nullable(),
  time_zone: exports_external.string().optional().nullable()
}));
var assignmentSchema = exports_external.lazy(() => exports_external.object({
  all_dates: exports_external.array(assignmentDateSchema).optional().nullable(),
  allowed_extensions: exports_external.array(exports_external.string()).optional().nullable(),
  anonymous_submissions: exports_external.boolean().optional().nullable(),
  assignment_group_id: exports_external.number().optional().nullable(),
  assignment_visibility: exports_external.array(exports_external.number()).optional().nullable(),
  automatic_peer_reviews: exports_external.boolean().optional().nullable(),
  course_id: exports_external.number().optional().nullable(),
  created_at: exports_external.string().optional().nullable(),
  description: exports_external.string().optional().nullable(),
  discussion_topic: discussionTopicNullableSchema.optional(),
  due_at: exports_external.string().optional().nullable(),
  due_date_required: exports_external.boolean().optional().nullable(),
  external_tool_tag_attributes: externalToolTagAttributesSchema.optional(),
  freeze_on_copy: exports_external.boolean().optional().nullable(),
  frozen: exports_external.boolean().optional().nullable(),
  frozen_attributes: exports_external.array(exports_external.string()).optional().nullable(),
  grade_group_students_individually: exports_external.boolean().optional().nullable(),
  grading_standard_id: exports_external.number().optional().nullable(),
  grading_type: exports_external.string().optional().nullable(),
  group_category_id: exports_external.number().optional().nullable(),
  has_overrides: exports_external.boolean().optional().nullable(),
  has_submitted_submissions: exports_external.boolean().optional().nullable(),
  html_url: exports_external.string().optional().nullable(),
  id: exports_external.number().optional().nullable(),
  integration_data: exports_external.record(exports_external.string()).optional().nullable(),
  integration_id: exports_external.string().optional().nullable(),
  intra_group_peer_reviews: exports_external.boolean().optional().nullable(),
  lock_at: exports_external.string().optional().nullable(),
  lock_explanation: exports_external.string().optional().nullable(),
  lock_info: lockInfoSchema.optional(),
  locked_for_user: exports_external.boolean().optional().nullable(),
  max_name_length: exports_external.number().optional().nullable(),
  moderated_grading: exports_external.boolean().optional().nullable(),
  muted: exports_external.boolean().optional().nullable(),
  name: exports_external.string().optional().nullable(),
  needs_grading_count: exports_external.number().optional().nullable(),
  needs_grading_count_by_section: exports_external.array(needsGradingCountSchema).optional().nullable(),
  omit_from_final_grade: exports_external.boolean().optional().nullable(),
  only_visible_to_overrides: exports_external.boolean().optional().nullable(),
  overrides: exports_external.array(assignmentOverrideSchema).optional().nullable(),
  peer_review_count: exports_external.number().optional().nullable(),
  peer_reviews: exports_external.boolean().optional().nullable(),
  peer_reviews_assign_at: exports_external.string().optional().nullable(),
  points_possible: exports_external.number().optional().nullable(),
  position: exports_external.number().optional().nullable(),
  post_to_sis: exports_external.boolean().optional().nullable(),
  published: exports_external.boolean().optional().nullable(),
  quiz_id: exports_external.number().optional().nullable(),
  rubric: exports_external.array(rubricCriteriaSchema).optional().nullable(),
  rubric_settings: rubricSettingsSchema.optional(),
  submission: submissionNullableSchema.optional(),
  submission_types: exports_external.array(exports_external.string()).optional().nullable(),
  submissions_download_url: exports_external.string().optional().nullable(),
  turnitin_enabled: exports_external.boolean().optional().nullable(),
  turnitin_settings: turnitinSettingsSchema.optional(),
  unlock_at: exports_external.string().optional().nullable(),
  unpublishable: exports_external.boolean().optional().nullable(),
  updated_at: exports_external.string().optional().nullable(),
  use_rubric_for_grading: exports_external.boolean().optional().nullable(),
  vericite_enabled: exports_external.boolean().optional().nullable()
}));
var submissionNullableSchema = exports_external.lazy(() => exports_external.object({
  anonymous_id: exports_external.string().optional().nullable(),
  assignment: assignmentNullableSchema.optional(),
  assignment_id: exports_external.number().optional().nullable(),
  assignment_visible: exports_external.boolean().optional().nullable(),
  attempt: exports_external.number().optional().nullable(),
  body: exports_external.string().optional().nullable(),
  course: exports_external.string().optional().nullable(),
  excused: exports_external.boolean().optional().nullable(),
  extra_attempts: exports_external.number().optional().nullable(),
  grade: exports_external.string().optional().nullable(),
  grade_matches_current_submission: exports_external.boolean().optional().nullable(),
  graded_at: exports_external.string().optional().nullable(),
  grader_id: exports_external.number().optional().nullable(),
  html_url: exports_external.string().optional().nullable(),
  late: exports_external.boolean().optional().nullable(),
  late_policy_status: exports_external.string().optional().nullable(),
  missing: exports_external.boolean().optional().nullable(),
  points_deducted: exports_external.number().optional().nullable(),
  posted_at: exports_external.string().optional().nullable(),
  preview_url: exports_external.string().optional().nullable(),
  read_status: exports_external.string().optional().nullable(),
  redo_request: exports_external.boolean().optional().nullable(),
  score: exports_external.number().optional().nullable(),
  seconds_late: exports_external.number().optional().nullable(),
  submission_comments: exports_external.array(submissionCommentSchema).optional().nullable(),
  submission_type: exports_external.string().optional().nullable(),
  submitted_at: exports_external.string().optional().nullable(),
  url: exports_external.string().optional().nullable(),
  user: exports_external.string().optional().nullable(),
  user_id: exports_external.number().optional().nullable(),
  workflow_state: exports_external.string().optional().nullable()
}).nullable());
var assignmentNullableSchema = exports_external.lazy(() => exports_external.object({
  all_dates: exports_external.array(assignmentDateSchema).optional().nullable(),
  allowed_extensions: exports_external.array(exports_external.string()).optional().nullable(),
  anonymous_submissions: exports_external.boolean().optional().nullable(),
  assignment_group_id: exports_external.number().optional().nullable(),
  assignment_visibility: exports_external.array(exports_external.number()).optional().nullable(),
  automatic_peer_reviews: exports_external.boolean().optional().nullable(),
  course_id: exports_external.number().optional().nullable(),
  created_at: exports_external.string().optional().nullable(),
  description: exports_external.string().optional().nullable(),
  discussion_topic: discussionTopicNullableSchema.optional(),
  due_at: exports_external.string().optional().nullable(),
  due_date_required: exports_external.boolean().optional().nullable(),
  external_tool_tag_attributes: externalToolTagAttributesSchema.optional(),
  freeze_on_copy: exports_external.boolean().optional().nullable(),
  frozen: exports_external.boolean().optional().nullable(),
  frozen_attributes: exports_external.array(exports_external.string()).optional().nullable(),
  grade_group_students_individually: exports_external.boolean().optional().nullable(),
  grading_standard_id: exports_external.number().optional().nullable(),
  grading_type: exports_external.string().optional().nullable(),
  group_category_id: exports_external.number().optional().nullable(),
  has_overrides: exports_external.boolean().optional().nullable(),
  has_submitted_submissions: exports_external.boolean().optional().nullable(),
  html_url: exports_external.string().optional().nullable(),
  id: exports_external.number().optional().nullable(),
  integration_data: exports_external.record(exports_external.string()).optional().nullable(),
  integration_id: exports_external.string().optional().nullable(),
  intra_group_peer_reviews: exports_external.boolean().optional().nullable(),
  lock_at: exports_external.string().optional().nullable(),
  lock_explanation: exports_external.string().optional().nullable(),
  lock_info: lockInfoSchema.optional(),
  locked_for_user: exports_external.boolean().optional().nullable(),
  max_name_length: exports_external.number().optional().nullable(),
  moderated_grading: exports_external.boolean().optional().nullable(),
  muted: exports_external.boolean().optional().nullable(),
  name: exports_external.string().optional().nullable(),
  needs_grading_count: exports_external.number().optional().nullable(),
  needs_grading_count_by_section: exports_external.array(needsGradingCountSchema).optional().nullable(),
  omit_from_final_grade: exports_external.boolean().optional().nullable(),
  only_visible_to_overrides: exports_external.boolean().optional().nullable(),
  overrides: exports_external.array(assignmentOverrideSchema).optional().nullable(),
  peer_review_count: exports_external.number().optional().nullable(),
  peer_reviews: exports_external.boolean().optional().nullable(),
  peer_reviews_assign_at: exports_external.string().optional().nullable(),
  points_possible: exports_external.number().optional().nullable(),
  position: exports_external.number().optional().nullable(),
  post_to_sis: exports_external.boolean().optional().nullable(),
  published: exports_external.boolean().optional().nullable(),
  quiz_id: exports_external.number().optional().nullable(),
  rubric: exports_external.array(rubricCriteriaSchema).optional().nullable(),
  rubric_settings: rubricSettingsSchema.optional(),
  submission: submissionNullableSchema.optional(),
  submission_types: exports_external.array(exports_external.string()).optional().nullable(),
  submissions_download_url: exports_external.string().optional().nullable(),
  turnitin_enabled: exports_external.boolean().optional().nullable(),
  turnitin_settings: turnitinSettingsSchema.optional(),
  unlock_at: exports_external.string().optional().nullable(),
  unpublishable: exports_external.boolean().optional().nullable(),
  updated_at: exports_external.string().optional().nullable(),
  use_rubric_for_grading: exports_external.boolean().optional().nullable(),
  vericite_enabled: exports_external.boolean().optional().nullable()
}).nullable());
var courseSchema = exports_external.lazy(() => exports_external.object({
  access_restricted_by_date: exports_external.boolean().optional().nullable(),
  account_id: exports_external.number().optional().nullable(),
  allow_student_assignment_edits: exports_external.boolean().optional().nullable(),
  allow_student_forum_attachments: exports_external.boolean().optional().nullable(),
  allow_wiki_comments: exports_external.boolean().optional().nullable(),
  apply_assignment_group_weights: exports_external.boolean().optional().nullable(),
  blueprint: exports_external.boolean().optional().nullable(),
  blueprint_restrictions: exports_external.record(exports_external.unknown()).optional().nullable(),
  blueprint_restrictions_by_object_type: exports_external.record(exports_external.unknown()).optional().nullable(),
  calendar: calendarLinkSchema.optional(),
  course_code: exports_external.string().optional().nullable(),
  course_color: exports_external.string().optional().nullable(),
  course_format: exports_external.string().optional().nullable(),
  course_progress: courseProgressSchema.optional(),
  created_at: exports_external.string().optional().nullable(),
  default_view: exports_external.string().optional().nullable(),
  end_at: exports_external.string().optional().nullable(),
  enrollment_term_id: exports_external.number().optional().nullable(),
  enrollments: exports_external.array(enrollmentSchema).optional().nullable(),
  friendly_name: exports_external.string().optional().nullable(),
  grade_passback_setting: exports_external.string().optional().nullable(),
  grading_periods: exports_external.array(gradingPeriodSchema).optional().nullable(),
  grading_standard_id: exports_external.number().optional().nullable(),
  hide_final_grades: exports_external.boolean().optional().nullable(),
  homeroom_course: exports_external.boolean().optional().nullable(),
  id: exports_external.number().optional(),
  integration_id: exports_external.string().optional().nullable(),
  is_public: exports_external.boolean().optional().nullable(),
  is_public_to_auth_users: exports_external.boolean().optional().nullable(),
  license: exports_external.string().optional().nullable(),
  locale: exports_external.string().optional().nullable(),
  name: exports_external.string().optional().nullable(),
  needs_grading_count: exports_external.number().optional().nullable(),
  open_enrollment: exports_external.boolean().optional().nullable(),
  original_name: exports_external.string().optional().nullable(),
  permissions: exports_external.record(exports_external.unknown()).optional().nullable(),
  public_description: exports_external.string().optional().nullable(),
  public_syllabus: exports_external.boolean().optional().nullable(),
  public_syllabus_to_auth: exports_external.boolean().optional().nullable(),
  restrict_enrollments_to_course_dates: exports_external.boolean().optional().nullable(),
  root_account_id: exports_external.number().optional().nullable(),
  self_enrollment: exports_external.boolean().optional().nullable(),
  sis_course_id: exports_external.string().optional().nullable(),
  sis_import_id: exports_external.number().optional().nullable(),
  start_at: exports_external.string().optional().nullable(),
  storage_quota_mb: exports_external.number().optional().nullable(),
  storage_quota_used_mb: exports_external.number().optional().nullable(),
  syllabus_body: exports_external.string().optional().nullable(),
  template: exports_external.boolean().optional().nullable(),
  term: termSchema.optional(),
  time_zone: exports_external.string().optional().nullable(),
  total_students: exports_external.number().optional().nullable(),
  uuid: exports_external.string().optional().nullable(),
  workflow_state: exports_external.string().optional().nullable()
}));
var enrollmentSchema = exports_external.lazy(() => exports_external.object({
  associated_user_id: exports_external.number().optional().nullable(),
  computed_current_grade: exports_external.string().optional().nullable(),
  computed_current_score: exports_external.number().optional().nullable(),
  computed_final_grade: exports_external.string().optional().nullable(),
  computed_final_score: exports_external.number().optional().nullable(),
  course_id: exports_external.number().optional().nullable(),
  course_integration_id: exports_external.string().optional().nullable(),
  course_section_id: exports_external.number().optional().nullable(),
  created_at: exports_external.string().optional().nullable(),
  current_grading_period_id: exports_external.number().optional().nullable(),
  current_grading_period_title: exports_external.string().optional().nullable(),
  current_period_computed_current_grade: exports_external.string().optional().nullable(),
  current_period_computed_current_score: exports_external.number().optional().nullable(),
  current_period_computed_final_grade: exports_external.string().optional().nullable(),
  current_period_computed_final_score: exports_external.number().optional().nullable(),
  current_period_override_grade: exports_external.string().optional().nullable(),
  current_period_override_score: exports_external.number().optional().nullable(),
  current_period_unposted_current_grade: exports_external.string().optional().nullable(),
  current_period_unposted_current_score: exports_external.number().optional().nullable(),
  current_period_unposted_final_grade: exports_external.string().optional().nullable(),
  current_period_unposted_final_score: exports_external.number().optional().nullable(),
  end_at: exports_external.string().optional().nullable(),
  enrollment_state: exports_external.string().optional().nullable(),
  grades: gradeSchema.optional(),
  has_grading_periods: exports_external.boolean().optional().nullable(),
  html_url: exports_external.string().optional().nullable(),
  id: exports_external.number().optional(),
  last_activity_at: exports_external.string().optional().nullable(),
  last_attended_at: exports_external.string().optional().nullable(),
  limit_privileges_to_course_section: exports_external.boolean().optional().nullable(),
  override_grade: exports_external.string().optional().nullable(),
  override_score: exports_external.number().optional().nullable(),
  role: exports_external.string().optional().nullable(),
  role_id: exports_external.number().optional().nullable(),
  root_account_id: exports_external.number().optional().nullable(),
  section_integration_id: exports_external.string().optional().nullable(),
  sis_account_id: exports_external.string().optional().nullable(),
  sis_course_id: exports_external.string().optional().nullable(),
  sis_import_id: exports_external.number().optional().nullable(),
  sis_section_id: exports_external.string().optional().nullable(),
  sis_user_id: exports_external.string().optional().nullable(),
  start_at: exports_external.string().optional().nullable(),
  total_activity_time: exports_external.number().optional().nullable(),
  totals_for_all_grading_periods_option: exports_external.boolean().optional().nullable(),
  type: exports_external.string().optional().nullable(),
  unposted_current_grade: exports_external.string().optional().nullable(),
  unposted_current_score: exports_external.string().optional().nullable(),
  unposted_final_grade: exports_external.string().optional().nullable(),
  unposted_final_score: exports_external.number().optional().nullable(),
  updated_at: exports_external.string().optional().nullable(),
  user: userNullableSchema.optional(),
  user_id: exports_external.number().optional().nullable()
}));
var courseWithIncludesSchema = exports_external.lazy(() => exports_external.object({
  access_restricted_by_date: exports_external.boolean().optional().nullable(),
  account_id: exports_external.number().optional().nullable(),
  allow_student_assignment_edits: exports_external.boolean().optional().nullable(),
  allow_student_forum_attachments: exports_external.boolean().optional().nullable(),
  allow_wiki_comments: exports_external.boolean().optional().nullable(),
  apply_assignment_group_weights: exports_external.boolean().optional().nullable(),
  blueprint: exports_external.boolean().optional().nullable(),
  blueprint_restrictions: exports_external.record(exports_external.unknown()).optional().nullable(),
  blueprint_restrictions_by_object_type: exports_external.record(exports_external.unknown()).optional().nullable(),
  calendar: calendarLinkSchema.optional(),
  course_code: exports_external.string().optional().nullable(),
  course_color: exports_external.string().optional().nullable(),
  course_format: exports_external.string().optional().nullable(),
  course_progress: courseProgressSchema.optional(),
  created_at: exports_external.string().optional().nullable(),
  default_view: exports_external.string().optional().nullable(),
  end_at: exports_external.string().optional().nullable(),
  enrollment_term_id: exports_external.number().optional().nullable(),
  enrollments: exports_external.array(enrollmentSchema).optional().nullable(),
  friendly_name: exports_external.string().optional().nullable(),
  grade_passback_setting: exports_external.string().optional().nullable(),
  grading_periods: exports_external.array(gradingPeriodSchema).optional().nullable(),
  grading_standard_id: exports_external.number().optional().nullable(),
  hide_final_grades: exports_external.boolean().optional().nullable(),
  homeroom_course: exports_external.boolean().optional().nullable(),
  id: exports_external.number().optional(),
  integration_id: exports_external.string().optional().nullable(),
  is_public: exports_external.boolean().optional().nullable(),
  is_public_to_auth_users: exports_external.boolean().optional().nullable(),
  license: exports_external.string().optional().nullable(),
  locale: exports_external.string().optional().nullable(),
  name: exports_external.string().optional().nullable(),
  needs_grading_count: exports_external.number().optional().nullable(),
  open_enrollment: exports_external.boolean().optional().nullable(),
  original_name: exports_external.string().optional().nullable(),
  permissions: exports_external.record(exports_external.unknown()).optional().nullable(),
  public_description: exports_external.string().optional().nullable(),
  public_syllabus: exports_external.boolean().optional().nullable(),
  public_syllabus_to_auth: exports_external.boolean().optional().nullable(),
  restrict_enrollments_to_course_dates: exports_external.boolean().optional().nullable(),
  root_account_id: exports_external.number().optional().nullable(),
  sections: exports_external.array(sectionSchema).optional().nullable(),
  self_enrollment: exports_external.boolean().optional().nullable(),
  sis_course_id: exports_external.string().optional().nullable(),
  sis_import_id: exports_external.number().optional().nullable(),
  start_at: exports_external.string().optional().nullable(),
  storage_quota_mb: exports_external.number().optional().nullable(),
  storage_quota_used_mb: exports_external.number().optional().nullable(),
  syllabus_body: exports_external.string().optional().nullable(),
  template: exports_external.boolean().optional().nullable(),
  term: termSchema.optional(),
  time_zone: exports_external.string().optional().nullable(),
  total_students: exports_external.number().optional().nullable(),
  uuid: exports_external.string().optional().nullable(),
  workflow_state: exports_external.string().optional().nullable()
}));
var userNullableSchema = exports_external.lazy(() => exports_external.object({
  avatar_state: exports_external.string().optional().nullable(),
  avatar_url: exports_external.string().optional().nullable(),
  bio: exports_external.string().optional().nullable(),
  email: exports_external.string().optional().nullable(),
  enrollments: exports_external.array(enrollmentSchema).optional().nullable(),
  first_name: exports_external.string().optional().nullable(),
  id: exports_external.number(),
  integration_id: exports_external.string().optional().nullable(),
  last_login: exports_external.string().optional().nullable(),
  last_name: exports_external.string().optional().nullable(),
  locale: exports_external.string().optional().nullable(),
  login_id: exports_external.string().optional().nullable(),
  name: exports_external.string().optional().nullable(),
  short_name: exports_external.string().optional().nullable(),
  sections: exports_external.string().optional().nullable(),
  sis_import_id: exports_external.number().optional().nullable(),
  sis_user_id: exports_external.string().optional().nullable(),
  sortable_name: exports_external.string().optional().nullable(),
  time_zone: exports_external.string().optional().nullable()
}).nullable());
var outcomeImportSchema = exports_external.lazy(() => exports_external.object({
  created_at: exports_external.string().optional().nullable(),
  data: outcomeImportDataSchema.optional(),
  ended_at: exports_external.string().optional().nullable(),
  id: exports_external.number().optional(),
  processing_errors: exports_external.array(exports_external.array(exports_external.record(exports_external.unknown()))).optional().nullable(),
  progress: exports_external.string().optional().nullable(),
  updated_at: exports_external.string().optional().nullable(),
  user: userNullableSchema.optional(),
  workflow_state: exports_external.string().optional().nullable()
}));
var outcomeResultResponseSchema = exports_external.lazy(() => exports_external.object({
  outcome_results: exports_external.array(outcomeResultSchema).optional(),
  linked: exports_external.object({
    alignments: exports_external.array(outcomeAlignmentSchema).optional().nullable(),
    outcomes: exports_external.array(outcomeSchema).optional().nullable(),
    outcome_groups: exports_external.array(outcomeGroupSchema).optional().nullable(),
    outcome_links: exports_external.array(outcomeLinkSchema).optional().nullable(),
    outcome_paths: exports_external.array(outcomePathSchema).optional(),
    users: exports_external.array(userSchema).optional()
  }).optional().nullable()
}));
var outcomeRollupResponseSchema = exports_external.lazy(() => exports_external.object({
  rollups: exports_external.array(outcomeRollupSchema).optional(),
  linked: exports_external.object({
    courses: exports_external.array(courseSchema).optional().nullable(),
    outcomes: exports_external.array(outcomeSchema).optional().nullable(),
    outcome_groups: exports_external.array(outcomeGroupSchema).optional().nullable(),
    outcome_links: exports_external.array(outcomeLinkSchema).optional().nullable(),
    outcome_paths: exports_external.array(outcomePathSchema).optional(),
    users: exports_external.array(userSchema).optional()
  }).optional().nullable()
}));
var pageSchema = exports_external.lazy(() => exports_external.object({
  body: exports_external.string().optional().nullable(),
  created_at: exports_external.string().optional().nullable(),
  editing_roles: exports_external.string().optional().nullable(),
  front_page: exports_external.boolean().optional().nullable(),
  hide_from_students: exports_external.boolean().optional().nullable(),
  last_edited_by: userNullableSchema.optional(),
  lock_explanation: exports_external.string().optional().nullable(),
  lock_info: lockInfoSchema.optional(),
  locked_for_user: exports_external.boolean().optional().nullable(),
  published: exports_external.boolean().optional().nullable(),
  title: exports_external.string().optional().nullable(),
  updated_at: exports_external.string().optional().nullable(),
  url: exports_external.string().optional().nullable()
}));
var pageRevisionSchema = exports_external.lazy(() => exports_external.object({
  body: exports_external.string().optional().nullable(),
  edited_by: userNullableSchema.optional(),
  latest: exports_external.boolean().optional().nullable(),
  revision_id: exports_external.number().optional().nullable(),
  title: exports_external.string().optional().nullable(),
  updated_at: exports_external.string().optional().nullable(),
  url: exports_external.string().optional().nullable()
}));
var sisImportSchema = exports_external.lazy(() => exports_external.object({
  add_sis_stickiness: exports_external.boolean().optional().nullable(),
  batch_mode: exports_external.boolean().optional().nullable(),
  batch_mode_term_id: exports_external.string().optional().nullable(),
  clear_sis_stickiness: exports_external.boolean().optional().nullable(),
  created_at: exports_external.string().optional().nullable(),
  csv_attachments: exports_external.array(exports_external.array(fileSchema)).optional().nullable(),
  data: sisImportDataSchema.optional(),
  diffed_against_import_id: exports_external.number().optional().nullable(),
  diffing_data_set_identifier: exports_external.string().optional().nullable(),
  ended_at: exports_external.string().optional().nullable(),
  errors_attachment: fileNullableSchema.optional(),
  id: exports_external.number().optional(),
  multi_term_batch_mode: exports_external.boolean().optional().nullable(),
  override_sis_stickiness: exports_external.boolean().optional().nullable(),
  processing_errors: exports_external.array(exports_external.array(exports_external.string())).optional().nullable(),
  processing_warnings: exports_external.array(exports_external.array(exports_external.string())).optional().nullable(),
  progress: exports_external.string().optional().nullable(),
  skip_deletes: exports_external.boolean().optional().nullable(),
  updated_at: exports_external.string().optional().nullable(),
  user: userNullableSchema.optional(),
  workflow_state: exports_external.string().optional().nullable()
}));
var submissionSchema = exports_external.lazy(() => exports_external.object({
  anonymous_id: exports_external.string().optional().nullable(),
  assignment: assignmentNullableSchema.optional(),
  assignment_id: exports_external.number().optional().nullable(),
  assignment_visible: exports_external.boolean().optional().nullable(),
  attempt: exports_external.number().optional().nullable(),
  body: exports_external.string().optional().nullable(),
  course: exports_external.string().optional().nullable(),
  excused: exports_external.boolean().optional().nullable(),
  extra_attempts: exports_external.number().optional().nullable(),
  grade: exports_external.string().optional().nullable(),
  grade_matches_current_submission: exports_external.boolean().optional().nullable(),
  graded_at: exports_external.string().optional().nullable(),
  grader_id: exports_external.number().optional().nullable(),
  html_url: exports_external.string().optional().nullable(),
  late: exports_external.boolean().optional().nullable(),
  late_policy_status: exports_external.string().optional().nullable(),
  missing: exports_external.boolean().optional().nullable(),
  points_deducted: exports_external.number().optional().nullable(),
  posted_at: exports_external.string().optional().nullable(),
  preview_url: exports_external.string().optional().nullable(),
  read_status: exports_external.string().optional().nullable(),
  redo_request: exports_external.boolean().optional().nullable(),
  score: exports_external.number().optional().nullable(),
  seconds_late: exports_external.number().optional().nullable(),
  submission_comments: exports_external.array(submissionCommentSchema).optional().nullable(),
  submission_type: exports_external.string().optional().nullable(),
  submitted_at: exports_external.string().optional().nullable(),
  url: exports_external.string().optional().nullable(),
  user: exports_external.string().optional().nullable(),
  user_id: exports_external.number().optional().nullable(),
  workflow_state: exports_external.string().optional().nullable()
}));
var getAllUsersInGroupLtiResponsesSchema = exports_external.lazy(() => exports_external.object({
  200: exports_external.array(userSchema)
}));
var getAllUsersInGroupLtiResponseSchema = exports_external.lazy(() => getAllUsersInGroupLtiResponsesSchema.shape["keyof GetAllUsersInGroupLtiResponses"]);
var getSingleUserLtiResponsesSchema = exports_external.lazy(() => exports_external.object({
  200: userSchema
}));
var getSingleUserLtiResponseSchema = exports_external.lazy(() => getSingleUserLtiResponsesSchema.shape["keyof GetSingleUserLtiResponses"]);
var listAccountAdminsResponsesSchema = exports_external.lazy(() => exports_external.object({
  200: exports_external.array(adminSchema)
}));
var listAccountAdminsResponseSchema = exports_external.lazy(() => listAccountAdminsResponsesSchema.shape["keyof ListAccountAdminsResponses"]);
var makeAccountAdminResponsesSchema = exports_external.lazy(() => exports_external.object({
  200: adminSchema
}));
var makeAccountAdminResponseSchema = exports_external.lazy(() => makeAccountAdminResponsesSchema.shape["keyof MakeAccountAdminResponses"]);
var removeAccountAdminResponsesSchema = exports_external.lazy(() => exports_external.object({
  200: adminSchema
}));
var removeAccountAdminResponseSchema = exports_external.lazy(() => removeAccountAdminResponsesSchema.shape["keyof RemoveAccountAdminResponses"]);
var getAllCoursesAccountsResponsesSchema = exports_external.lazy(() => exports_external.object({
  200: exports_external.array(courseSchema)
}));
var getAllCoursesAccountsResponseSchema = exports_external.lazy(() => getAllCoursesAccountsResponsesSchema.shape["keyof GetAllCoursesAccountsResponses"]);
var createNewCourseResponsesSchema = exports_external.lazy(() => exports_external.object({
  200: courseSchema
}));
var createNewCourseResponseSchema = exports_external.lazy(() => createNewCourseResponsesSchema.shape["keyof CreateNewCourseResponses"]);
var getSingleCourseAccountsResponsesSchema = exports_external.lazy(() => exports_external.object({
  200: courseSchema
}));
var getSingleCourseAccountsResponseSchema = exports_external.lazy(() => getSingleCourseAccountsResponsesSchema.shape["keyof GetSingleCourseAccountsResponses"]);
var enrollmentByIdResponsesSchema = exports_external.lazy(() => exports_external.object({
  200: enrollmentSchema
}));
var enrollmentByIdResponseSchema = exports_external.lazy(() => enrollmentByIdResponsesSchema.shape["keyof EnrollmentByIdResponses"]);
var importOutcomesAccountsResponsesSchema = exports_external.lazy(() => exports_external.object({
  200: outcomeImportSchema
}));
var importOutcomesAccountsResponseSchema = exports_external.lazy(() => importOutcomesAccountsResponsesSchema.shape["keyof ImportOutcomesAccountsResponses"]);
var getOutcomeImportStatusAccountsResponsesSchema = exports_external.lazy(() => exports_external.object({
  200: outcomeImportSchema
}));
var getOutcomeImportStatusAccountsResponseSchema = exports_external.lazy(() => getOutcomeImportStatusAccountsResponsesSchema.shape["keyof GetOutcomeImportStatusAccountsResponses"]);
var selfRegisterUserResponsesSchema = exports_external.lazy(() => exports_external.object({
  200: userSchema
}));
var selfRegisterUserResponseSchema = exports_external.lazy(() => selfRegisterUserResponsesSchema.shape["keyof SelfRegisterUserResponses"]);
var getSisImportListResponsesSchema = exports_external.lazy(() => exports_external.object({
  200: exports_external.array(sisImportSchema)
}));
var getSisImportListResponseSchema = exports_external.lazy(() => getSisImportListResponsesSchema.shape["keyof GetSisImportListResponses"]);
var importSisDataResponsesSchema = exports_external.lazy(() => exports_external.object({
  200: sisImportSchema
}));
var importSisDataResponseSchema = exports_external.lazy(() => importSisDataResponsesSchema.shape["keyof ImportSisDataResponses"]);
var getSisImportStatusResponsesSchema = exports_external.lazy(() => exports_external.object({
  200: sisImportSchema
}));
var getSisImportStatusResponseSchema = exports_external.lazy(() => getSisImportStatusResponsesSchema.shape["keyof GetSisImportStatusResponses"]);
var abortSisImportResponsesSchema = exports_external.lazy(() => exports_external.object({
  200: sisImportSchema
}));
var abortSisImportResponseSchema = exports_external.lazy(() => abortSisImportResponsesSchema.shape["keyof AbortSisImportResponses"]);
var listUsersInAccountResponsesSchema = exports_external.lazy(() => exports_external.object({
  200: exports_external.array(userSchema)
}));
var listUsersInAccountResponseSchema = exports_external.lazy(() => listUsersInAccountResponsesSchema.shape["keyof ListUsersInAccountResponses"]);
var createUserResponsesSchema = exports_external.lazy(() => exports_external.object({
  200: userSchema
}));
var createUserResponseSchema = exports_external.lazy(() => createUserResponsesSchema.shape["keyof CreateUserResponses"]);
var deleteUserFromRootAccountResponsesSchema = exports_external.lazy(() => exports_external.object({
  200: userSchema
}));
var deleteUserFromRootAccountResponseSchema = exports_external.lazy(() => deleteUserFromRootAccountResponsesSchema.shape["keyof DeleteUserFromRootAccountResponses"]);
var listYourCoursesResponsesSchema = exports_external.lazy(() => exports_external.object({
  200: exports_external.array(courseWithIncludesSchema)
}));
var listYourCoursesResponseSchema = exports_external.lazy(() => listYourCoursesResponsesSchema.shape["keyof ListYourCoursesResponses"]);
var getUserInACourseLevelAssignmentDataResponsesSchema = exports_external.lazy(() => exports_external.object({
  200: exports_external.array(assignmentSchema)
}));
var getUserInACourseLevelAssignmentDataResponseSchema = exports_external.lazy(() => getUserInACourseLevelAssignmentDataResponsesSchema.shape["keyof GetUserInACourseLevelAssignmentDataResponses"]);
var listAssignmentsResponsesSchema = exports_external.lazy(() => exports_external.object({
  200: exports_external.array(assignmentSchema)
}));
var listAssignmentsResponseSchema = exports_external.lazy(() => listAssignmentsResponsesSchema.shape["keyof ListAssignmentsResponses"]);
var createAssignmentResponsesSchema = exports_external.lazy(() => exports_external.object({
  200: assignmentSchema
}));
var createAssignmentResponseSchema = exports_external.lazy(() => createAssignmentResponsesSchema.shape["keyof CreateAssignmentResponses"]);
var listStudentsSelectedForModerationResponsesSchema = exports_external.lazy(() => exports_external.object({
  200: exports_external.array(userSchema)
}));
var listStudentsSelectedForModerationResponseSchema = exports_external.lazy(() => listStudentsSelectedForModerationResponsesSchema.shape["keyof ListStudentsSelectedForModerationResponses"]);
var selectStudentsForModerationResponsesSchema = exports_external.lazy(() => exports_external.object({
  200: exports_external.array(userSchema)
}));
var selectStudentsForModerationResponseSchema = exports_external.lazy(() => selectStudentsForModerationResponsesSchema.shape["keyof SelectStudentsForModerationResponses"]);
var listAssignmentSubmissionsCoursesResponsesSchema = exports_external.lazy(() => exports_external.object({
  200: exports_external.array(submissionSchema)
}));
var listAssignmentSubmissionsCoursesResponseSchema = exports_external.lazy(() => listAssignmentSubmissionsCoursesResponsesSchema.shape["keyof ListAssignmentSubmissionsCoursesResponses"]);
var getSingleSubmissionCoursesResponsesSchema = exports_external.lazy(() => exports_external.object({
  200: submissionSchema
}));
var getSingleSubmissionCoursesResponseSchema = exports_external.lazy(() => getSingleSubmissionCoursesResponsesSchema.shape["keyof GetSingleSubmissionCoursesResponses"]);
var gradeOrCommentOnSubmissionCoursesResponsesSchema = exports_external.lazy(() => exports_external.object({
  200: submissionSchema
}));
var gradeOrCommentOnSubmissionCoursesResponseSchema = exports_external.lazy(() => gradeOrCommentOnSubmissionCoursesResponsesSchema.shape["keyof GradeOrCommentOnSubmissionCoursesResponses"]);
var deleteAssignmentResponsesSchema = exports_external.lazy(() => exports_external.object({
  200: assignmentSchema
}));
var deleteAssignmentResponseSchema = exports_external.lazy(() => deleteAssignmentResponsesSchema.shape["keyof DeleteAssignmentResponses"]);
var getSingleAssignmentResponsesSchema = exports_external.lazy(() => exports_external.object({
  200: assignmentSchema
}));
var getSingleAssignmentResponseSchema = exports_external.lazy(() => getSingleAssignmentResponsesSchema.shape["keyof GetSingleAssignmentResponses"]);
var editAssignmentResponsesSchema = exports_external.lazy(() => exports_external.object({
  200: assignmentSchema
}));
var editAssignmentResponseSchema = exports_external.lazy(() => editAssignmentResponsesSchema.shape["keyof EditAssignmentResponses"]);
var getAssociatedCourseInformationResponsesSchema = exports_external.lazy(() => exports_external.object({
  200: exports_external.array(courseSchema)
}));
var getAssociatedCourseInformationResponseSchema = exports_external.lazy(() => getAssociatedCourseInformationResponsesSchema.shape["keyof GetAssociatedCourseInformationResponses"]);
var listEnrollmentsCoursesResponsesSchema = exports_external.lazy(() => exports_external.object({
  200: exports_external.array(enrollmentSchema)
}));
var listEnrollmentsCoursesResponseSchema = exports_external.lazy(() => listEnrollmentsCoursesResponsesSchema.shape["keyof ListEnrollmentsCoursesResponses"]);
var enrollUserCoursesResponsesSchema = exports_external.lazy(() => exports_external.object({
  200: enrollmentSchema
}));
var enrollUserCoursesResponseSchema = exports_external.lazy(() => enrollUserCoursesResponsesSchema.shape["keyof EnrollUserCoursesResponses"]);
var concludeDeactivateOrDeleteEnrollmentResponsesSchema = exports_external.lazy(() => exports_external.object({
  200: enrollmentSchema
}));
var concludeDeactivateOrDeleteEnrollmentResponseSchema = exports_external.lazy(() => concludeDeactivateOrDeleteEnrollmentResponsesSchema.shape["keyof ConcludeDeactivateOrDeleteEnrollmentResponses"]);
var reActivateEnrollmentResponsesSchema = exports_external.lazy(() => exports_external.object({
  200: enrollmentSchema
}));
var reActivateEnrollmentResponseSchema = exports_external.lazy(() => reActivateEnrollmentResponsesSchema.shape["keyof ReActivateEnrollmentResponses"]);
var showFrontPageCoursesResponsesSchema = exports_external.lazy(() => exports_external.object({
  200: pageSchema
}));
var showFrontPageCoursesResponseSchema = exports_external.lazy(() => showFrontPageCoursesResponsesSchema.shape["keyof ShowFrontPageCoursesResponses"]);
var updateCreateFrontPageCoursesResponsesSchema = exports_external.lazy(() => exports_external.object({
  200: pageSchema
}));
var updateCreateFrontPageCoursesResponseSchema = exports_external.lazy(() => updateCreateFrontPageCoursesResponsesSchema.shape["keyof UpdateCreateFrontPageCoursesResponses"]);
var importOutcomesCoursesResponsesSchema = exports_external.lazy(() => exports_external.object({
  200: outcomeImportSchema
}));
var importOutcomesCoursesResponseSchema = exports_external.lazy(() => importOutcomesCoursesResponsesSchema.shape["keyof ImportOutcomesCoursesResponses"]);
var getOutcomeImportStatusCoursesResponsesSchema = exports_external.lazy(() => exports_external.object({
  200: outcomeImportSchema
}));
var getOutcomeImportStatusCoursesResponseSchema = exports_external.lazy(() => getOutcomeImportStatusCoursesResponsesSchema.shape["keyof GetOutcomeImportStatusCoursesResponses"]);
var getOutcomeResultsResponsesSchema = exports_external.lazy(() => exports_external.object({
  200: outcomeResultResponseSchema
}));
var getOutcomeResultsResponseSchema = exports_external.lazy(() => getOutcomeResultsResponsesSchema.shape["keyof GetOutcomeResultsResponses"]);
var getOutcomeResultRollupsResponsesSchema = exports_external.lazy(() => exports_external.object({
  200: outcomeRollupResponseSchema
}));
var getOutcomeResultRollupsResponseSchema = exports_external.lazy(() => getOutcomeResultRollupsResponsesSchema.shape["keyof GetOutcomeResultRollupsResponses"]);
var listPagesCoursesResponsesSchema = exports_external.lazy(() => exports_external.object({
  200: exports_external.array(pageSchema)
}));
var listPagesCoursesResponseSchema = exports_external.lazy(() => listPagesCoursesResponsesSchema.shape["keyof ListPagesCoursesResponses"]);
var createPageCoursesResponsesSchema = exports_external.lazy(() => exports_external.object({
  200: pageSchema
}));
var createPageCoursesResponseSchema = exports_external.lazy(() => createPageCoursesResponsesSchema.shape["keyof CreatePageCoursesResponses"]);
var deletePageCoursesResponsesSchema = exports_external.lazy(() => exports_external.object({
  200: pageSchema
}));
var deletePageCoursesResponseSchema = exports_external.lazy(() => deletePageCoursesResponsesSchema.shape["keyof DeletePageCoursesResponses"]);
var showPageCoursesResponsesSchema = exports_external.lazy(() => exports_external.object({
  200: pageSchema
}));
var showPageCoursesResponseSchema = exports_external.lazy(() => showPageCoursesResponsesSchema.shape["keyof ShowPageCoursesResponses"]);
var updateCreatePageCoursesResponsesSchema = exports_external.lazy(() => exports_external.object({
  200: pageSchema
}));
var updateCreatePageCoursesResponseSchema = exports_external.lazy(() => updateCreatePageCoursesResponsesSchema.shape["keyof UpdateCreatePageCoursesResponses"]);
var duplicatePageResponsesSchema = exports_external.lazy(() => exports_external.object({
  200: pageSchema
}));
var duplicatePageResponseSchema = exports_external.lazy(() => duplicatePageResponsesSchema.shape["keyof DuplicatePageResponses"]);
var listRevisionsCoursesResponsesSchema = exports_external.lazy(() => exports_external.object({
  200: exports_external.array(pageRevisionSchema)
}));
var listRevisionsCoursesResponseSchema = exports_external.lazy(() => listRevisionsCoursesResponsesSchema.shape["keyof ListRevisionsCoursesResponses"]);
var showRevisionCoursesLatestResponsesSchema = exports_external.lazy(() => exports_external.object({
  200: pageRevisionSchema
}));
var showRevisionCoursesLatestResponseSchema = exports_external.lazy(() => showRevisionCoursesLatestResponsesSchema.shape["keyof ShowRevisionCoursesLatestResponses"]);
var showRevisionCoursesRevisionIdResponsesSchema = exports_external.lazy(() => exports_external.object({
  200: pageRevisionSchema
}));
var showRevisionCoursesRevisionIdResponseSchema = exports_external.lazy(() => showRevisionCoursesRevisionIdResponsesSchema.shape["keyof ShowRevisionCoursesRevisionIdResponses"]);
var revertToRevisionCoursesResponsesSchema = exports_external.lazy(() => exports_external.object({
  200: pageRevisionSchema
}));
var revertToRevisionCoursesResponseSchema = exports_external.lazy(() => revertToRevisionCoursesResponsesSchema.shape["keyof RevertToRevisionCoursesResponses"]);
var listPotentialMembersCoursesResponsesSchema = exports_external.lazy(() => exports_external.object({
  200: exports_external.array(userSchema)
}));
var listPotentialMembersCoursesResponseSchema = exports_external.lazy(() => listPotentialMembersCoursesResponsesSchema.shape["keyof ListPotentialMembersCoursesResponses"]);
var listRecentlyLoggedInStudentsResponsesSchema = exports_external.lazy(() => exports_external.object({
  200: exports_external.array(userSchema)
}));
var listRecentlyLoggedInStudentsResponseSchema = exports_external.lazy(() => listRecentlyLoggedInStudentsResponsesSchema.shape["keyof ListRecentlyLoggedInStudentsResponses"]);
var resetCourseResponsesSchema = exports_external.lazy(() => exports_external.object({
  200: courseSchema
}));
var resetCourseResponseSchema = exports_external.lazy(() => resetCourseResponsesSchema.shape["keyof ResetCourseResponses"]);
var listUsersInCourseSearchUsersResponsesSchema = exports_external.lazy(() => exports_external.object({
  200: exports_external.array(userSchema)
}));
var listUsersInCourseSearchUsersResponseSchema = exports_external.lazy(() => listUsersInCourseSearchUsersResponsesSchema.shape["keyof ListUsersInCourseSearchUsersResponses"]);
var listStudentsResponsesSchema = exports_external.lazy(() => exports_external.object({
  200: exports_external.array(userSchema)
}));
var listStudentsResponseSchema = exports_external.lazy(() => listStudentsResponsesSchema.shape["keyof ListStudentsResponses"]);
var listSubmissionsForMultipleAssignmentsCoursesResponsesSchema = exports_external.lazy(() => exports_external.object({
  200: exports_external.array(submissionSchema)
}));
var listSubmissionsForMultipleAssignmentsCoursesResponseSchema = exports_external.lazy(() => listSubmissionsForMultipleAssignmentsCoursesResponsesSchema.shape["keyof ListSubmissionsForMultipleAssignmentsCoursesResponses"]);
var listUsersInCourseUsersResponsesSchema = exports_external.lazy(() => exports_external.object({
  200: exports_external.array(userSchema)
}));
var listUsersInCourseUsersResponseSchema = exports_external.lazy(() => listUsersInCourseUsersResponsesSchema.shape["keyof ListUsersInCourseUsersResponses"]);
var getSingleUserResponsesSchema = exports_external.lazy(() => exports_external.object({
  200: userSchema
}));
var getSingleUserResponseSchema = exports_external.lazy(() => getSingleUserResponsesSchema.shape["keyof GetSingleUserResponses"]);
var addsLastAttendedDateToStudentEnrollmentInCourseResponsesSchema = exports_external.lazy(() => exports_external.object({
  200: enrollmentSchema
}));
var addsLastAttendedDateToStudentEnrollmentInCourseResponseSchema = exports_external.lazy(() => addsLastAttendedDateToStudentEnrollmentInCourseResponsesSchema.shape["keyof AddsLastAttendedDateToStudentEnrollmentInCourseResponses"]);
var getSingleCourseCoursesResponsesSchema = exports_external.lazy(() => exports_external.object({
  200: courseSchema
}));
var getSingleCourseCoursesResponseSchema = exports_external.lazy(() => getSingleCourseCoursesResponsesSchema.shape["keyof GetSingleCourseCoursesResponses"]);
var listUsersInGroupCategoryResponsesSchema = exports_external.lazy(() => exports_external.object({
  200: exports_external.array(userSchema)
}));
var listUsersInGroupCategoryResponseSchema = exports_external.lazy(() => listUsersInGroupCategoryResponsesSchema.shape["keyof ListUsersInGroupCategoryResponses"]);
var showFrontPageGroupsResponsesSchema = exports_external.lazy(() => exports_external.object({
  200: pageSchema
}));
var showFrontPageGroupsResponseSchema = exports_external.lazy(() => showFrontPageGroupsResponsesSchema.shape["keyof ShowFrontPageGroupsResponses"]);
var updateCreateFrontPageGroupsResponsesSchema = exports_external.lazy(() => exports_external.object({
  200: pageSchema
}));
var updateCreateFrontPageGroupsResponseSchema = exports_external.lazy(() => updateCreateFrontPageGroupsResponsesSchema.shape["keyof UpdateCreateFrontPageGroupsResponses"]);
var listPagesGroupsResponsesSchema = exports_external.lazy(() => exports_external.object({
  200: exports_external.array(pageSchema)
}));
var listPagesGroupsResponseSchema = exports_external.lazy(() => listPagesGroupsResponsesSchema.shape["keyof ListPagesGroupsResponses"]);
var createPageGroupsResponsesSchema = exports_external.lazy(() => exports_external.object({
  200: pageSchema
}));
var createPageGroupsResponseSchema = exports_external.lazy(() => createPageGroupsResponsesSchema.shape["keyof CreatePageGroupsResponses"]);
var deletePageGroupsResponsesSchema = exports_external.lazy(() => exports_external.object({
  200: pageSchema
}));
var deletePageGroupsResponseSchema = exports_external.lazy(() => deletePageGroupsResponsesSchema.shape["keyof DeletePageGroupsResponses"]);
var showPageGroupsResponsesSchema = exports_external.lazy(() => exports_external.object({
  200: pageSchema
}));
var showPageGroupsResponseSchema = exports_external.lazy(() => showPageGroupsResponsesSchema.shape["keyof ShowPageGroupsResponses"]);
var updateCreatePageGroupsResponsesSchema = exports_external.lazy(() => exports_external.object({
  200: pageSchema
}));
var updateCreatePageGroupsResponseSchema = exports_external.lazy(() => updateCreatePageGroupsResponsesSchema.shape["keyof UpdateCreatePageGroupsResponses"]);
var listRevisionsGroupsResponsesSchema = exports_external.lazy(() => exports_external.object({
  200: exports_external.array(pageRevisionSchema)
}));
var listRevisionsGroupsResponseSchema = exports_external.lazy(() => listRevisionsGroupsResponsesSchema.shape["keyof ListRevisionsGroupsResponses"]);
var showRevisionGroupsLatestResponsesSchema = exports_external.lazy(() => exports_external.object({
  200: pageRevisionSchema
}));
var showRevisionGroupsLatestResponseSchema = exports_external.lazy(() => showRevisionGroupsLatestResponsesSchema.shape["keyof ShowRevisionGroupsLatestResponses"]);
var showRevisionGroupsRevisionIdResponsesSchema = exports_external.lazy(() => exports_external.object({
  200: pageRevisionSchema
}));
var showRevisionGroupsRevisionIdResponseSchema = exports_external.lazy(() => showRevisionGroupsRevisionIdResponsesSchema.shape["keyof ShowRevisionGroupsRevisionIdResponses"]);
var revertToRevisionGroupsResponsesSchema = exports_external.lazy(() => exports_external.object({
  200: pageRevisionSchema
}));
var revertToRevisionGroupsResponseSchema = exports_external.lazy(() => revertToRevisionGroupsResponsesSchema.shape["keyof RevertToRevisionGroupsResponses"]);
var listPotentialMembersGroupsResponsesSchema = exports_external.lazy(() => exports_external.object({
  200: exports_external.array(userSchema)
}));
var listPotentialMembersGroupsResponseSchema = exports_external.lazy(() => listPotentialMembersGroupsResponsesSchema.shape["keyof ListPotentialMembersGroupsResponses"]);
var listGroupSusersResponsesSchema = exports_external.lazy(() => exports_external.object({
  200: exports_external.array(userSchema)
}));
var listGroupSusersResponseSchema = exports_external.lazy(() => listGroupSusersResponsesSchema.shape["keyof ListGroupSusersResponses"]);
var listAllCoursesResponsesSchema = exports_external.lazy(() => exports_external.object({
  200: exports_external.array(courseSchema)
}));
var listAllCoursesResponseSchema = exports_external.lazy(() => listAllCoursesResponsesSchema.shape["keyof ListAllCoursesResponses"]);
var listAssignmentSubmissionsSectionsResponsesSchema = exports_external.lazy(() => exports_external.object({
  200: exports_external.array(submissionSchema)
}));
var listAssignmentSubmissionsSectionsResponseSchema = exports_external.lazy(() => listAssignmentSubmissionsSectionsResponsesSchema.shape["keyof ListAssignmentSubmissionsSectionsResponses"]);
var gradeOrCommentOnSubmissionSectionsResponsesSchema = exports_external.lazy(() => exports_external.object({
  200: submissionSchema
}));
var gradeOrCommentOnSubmissionSectionsResponseSchema = exports_external.lazy(() => gradeOrCommentOnSubmissionSectionsResponsesSchema.shape["keyof GradeOrCommentOnSubmissionSectionsResponses"]);
var listEnrollmentsSectionsResponsesSchema = exports_external.lazy(() => exports_external.object({
  200: exports_external.array(enrollmentSchema)
}));
var listEnrollmentsSectionsResponseSchema = exports_external.lazy(() => listEnrollmentsSectionsResponsesSchema.shape["keyof ListEnrollmentsSectionsResponses"]);
var enrollUserSectionsResponsesSchema = exports_external.lazy(() => exports_external.object({
  200: enrollmentSchema
}));
var enrollUserSectionsResponseSchema = exports_external.lazy(() => enrollUserSectionsResponsesSchema.shape["keyof EnrollUserSectionsResponses"]);
var listFavoriteCoursesResponsesSchema = exports_external.lazy(() => exports_external.object({
  200: exports_external.array(courseSchema)
}));
var listFavoriteCoursesResponseSchema = exports_external.lazy(() => listFavoriteCoursesResponsesSchema.shape["keyof ListFavoriteCoursesResponses"]);
var showUserDetailsResponsesSchema = exports_external.lazy(() => exports_external.object({
  200: userSchema
}));
var showUserDetailsResponseSchema = exports_external.lazy(() => showUserDetailsResponsesSchema.shape["keyof ShowUserDetailsResponses"]);
var editUserResponsesSchema = exports_external.lazy(() => exports_external.object({
  200: userSchema
}));
var editUserResponseSchema = exports_external.lazy(() => editUserResponsesSchema.shape["keyof EditUserResponses"]);
var mergeUserIntoAnotherUserAccountsResponsesSchema = exports_external.lazy(() => exports_external.object({
  200: userSchema
}));
var mergeUserIntoAnotherUserAccountsResponseSchema = exports_external.lazy(() => mergeUserIntoAnotherUserAccountsResponsesSchema.shape["keyof MergeUserIntoAnotherUserAccountsResponses"]);
var mergeUserIntoAnotherUserDestinationUserIdResponsesSchema = exports_external.lazy(() => exports_external.object({
  200: userSchema
}));
var mergeUserIntoAnotherUserDestinationUserIdResponseSchema = exports_external.lazy(() => mergeUserIntoAnotherUserDestinationUserIdResponsesSchema.shape["keyof MergeUserIntoAnotherUserDestinationUserIdResponses"]);
var splitMergedUsersIntoSeparateUsersResponsesSchema = exports_external.lazy(() => exports_external.object({
  200: exports_external.array(userSchema)
}));
var splitMergedUsersIntoSeparateUsersResponseSchema = exports_external.lazy(() => splitMergedUsersIntoSeparateUsersResponsesSchema.shape["keyof SplitMergedUsersIntoSeparateUsersResponses"]);
var listCoursesForUserResponsesSchema = exports_external.lazy(() => exports_external.object({
  200: exports_external.array(courseWithIncludesSchema)
}));
var listCoursesForUserResponseSchema = exports_external.lazy(() => listCoursesForUserResponsesSchema.shape["keyof ListCoursesForUserResponses"]);
var listAssignmentsForUserResponsesSchema = exports_external.lazy(() => exports_external.object({
  200: exports_external.array(assignmentSchema)
}));
var listAssignmentsForUserResponseSchema = exports_external.lazy(() => listAssignmentsForUserResponsesSchema.shape["keyof ListAssignmentsForUserResponses"]);
var listEnrollmentsUsersResponsesSchema = exports_external.lazy(() => exports_external.object({
  200: exports_external.array(enrollmentSchema)
}));
var listEnrollmentsUsersResponseSchema = exports_external.lazy(() => listEnrollmentsUsersResponsesSchema.shape["keyof ListEnrollmentsUsersResponses"]);
var listMissingSubmissionsResponsesSchema = exports_external.lazy(() => exports_external.object({
  200: exports_external.array(assignmentSchema)
}));
var listMissingSubmissionsResponseSchema = exports_external.lazy(() => listMissingSubmissionsResponsesSchema.shape["keyof ListMissingSubmissionsResponses"]);
var listObserveesResponsesSchema = exports_external.lazy(() => exports_external.object({
  200: exports_external.array(userSchema)
}));
var listObserveesResponseSchema = exports_external.lazy(() => listObserveesResponsesSchema.shape["keyof ListObserveesResponses"]);
var addObserveeWithCredentialsResponsesSchema = exports_external.lazy(() => exports_external.object({
  200: userSchema
}));
var addObserveeWithCredentialsResponseSchema = exports_external.lazy(() => addObserveeWithCredentialsResponsesSchema.shape["keyof AddObserveeWithCredentialsResponses"]);
var removeObserveeResponsesSchema = exports_external.lazy(() => exports_external.object({
  200: userSchema
}));
var removeObserveeResponseSchema = exports_external.lazy(() => removeObserveeResponsesSchema.shape["keyof RemoveObserveeResponses"]);
var showObserveeResponsesSchema = exports_external.lazy(() => exports_external.object({
  200: userSchema
}));
var showObserveeResponseSchema = exports_external.lazy(() => showObserveeResponsesSchema.shape["keyof ShowObserveeResponses"]);
var addObserveeResponsesSchema = exports_external.lazy(() => exports_external.object({
  200: userSchema
}));
var addObserveeResponseSchema = exports_external.lazy(() => addObserveeResponsesSchema.shape["keyof AddObserveeResponses"]);
// node_modules/axios/lib/helpers/bind.js
function bind(fn, thisArg) {
  return function wrap() {
    return fn.apply(thisArg, arguments);
  };
}

// node_modules/axios/lib/utils.js
var { toString } = Object.prototype;
var { getPrototypeOf } = Object;
var { iterator, toStringTag } = Symbol;
var kindOf = ((cache) => (thing) => {
  const str = toString.call(thing);
  return cache[str] || (cache[str] = str.slice(8, -1).toLowerCase());
})(Object.create(null));
var kindOfTest = (type) => {
  type = type.toLowerCase();
  return (thing) => kindOf(thing) === type;
};
var typeOfTest = (type) => (thing) => typeof thing === type;
var { isArray } = Array;
var isUndefined = typeOfTest("undefined");
function isBuffer(val) {
  return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor) && isFunction(val.constructor.isBuffer) && val.constructor.isBuffer(val);
}
var isArrayBuffer = kindOfTest("ArrayBuffer");
function isArrayBufferView(val) {
  let result;
  if (typeof ArrayBuffer !== "undefined" && ArrayBuffer.isView) {
    result = ArrayBuffer.isView(val);
  } else {
    result = val && val.buffer && isArrayBuffer(val.buffer);
  }
  return result;
}
var isString = typeOfTest("string");
var isFunction = typeOfTest("function");
var isNumber = typeOfTest("number");
var isObject = (thing) => thing !== null && typeof thing === "object";
var isBoolean = (thing) => thing === true || thing === false;
var isPlainObject = (val) => {
  if (kindOf(val) !== "object") {
    return false;
  }
  const prototype = getPrototypeOf(val);
  return (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(toStringTag in val) && !(iterator in val);
};
var isDate = kindOfTest("Date");
var isFile = kindOfTest("File");
var isBlob = kindOfTest("Blob");
var isFileList = kindOfTest("FileList");
var isStream = (val) => isObject(val) && isFunction(val.pipe);
var isFormData = (thing) => {
  let kind;
  return thing && (typeof FormData === "function" && thing instanceof FormData || isFunction(thing.append) && ((kind = kindOf(thing)) === "formdata" || kind === "object" && isFunction(thing.toString) && thing.toString() === "[object FormData]"));
};
var isURLSearchParams = kindOfTest("URLSearchParams");
var [isReadableStream, isRequest, isResponse, isHeaders] = ["ReadableStream", "Request", "Response", "Headers"].map(kindOfTest);
var trim = (str) => str.trim ? str.trim() : str.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, "");
function forEach(obj, fn, { allOwnKeys = false } = {}) {
  if (obj === null || typeof obj === "undefined") {
    return;
  }
  let i;
  let l;
  if (typeof obj !== "object") {
    obj = [obj];
  }
  if (isArray(obj)) {
    for (i = 0, l = obj.length;i < l; i++) {
      fn.call(null, obj[i], i, obj);
    }
  } else {
    const keys = allOwnKeys ? Object.getOwnPropertyNames(obj) : Object.keys(obj);
    const len = keys.length;
    let key;
    for (i = 0;i < len; i++) {
      key = keys[i];
      fn.call(null, obj[key], key, obj);
    }
  }
}
function findKey(obj, key) {
  key = key.toLowerCase();
  const keys = Object.keys(obj);
  let i = keys.length;
  let _key;
  while (i-- > 0) {
    _key = keys[i];
    if (key === _key.toLowerCase()) {
      return _key;
    }
  }
  return null;
}
var _global = (() => {
  if (typeof globalThis !== "undefined")
    return globalThis;
  return typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : global;
})();
var isContextDefined = (context) => !isUndefined(context) && context !== _global;
function merge() {
  const { caseless } = isContextDefined(this) && this || {};
  const result = {};
  const assignValue = (val, key) => {
    const targetKey = caseless && findKey(result, key) || key;
    if (isPlainObject(result[targetKey]) && isPlainObject(val)) {
      result[targetKey] = merge(result[targetKey], val);
    } else if (isPlainObject(val)) {
      result[targetKey] = merge({}, val);
    } else if (isArray(val)) {
      result[targetKey] = val.slice();
    } else {
      result[targetKey] = val;
    }
  };
  for (let i = 0, l = arguments.length;i < l; i++) {
    arguments[i] && forEach(arguments[i], assignValue);
  }
  return result;
}
var extend = (a, b, thisArg, { allOwnKeys } = {}) => {
  forEach(b, (val, key) => {
    if (thisArg && isFunction(val)) {
      a[key] = bind(val, thisArg);
    } else {
      a[key] = val;
    }
  }, { allOwnKeys });
  return a;
};
var stripBOM = (content) => {
  if (content.charCodeAt(0) === 65279) {
    content = content.slice(1);
  }
  return content;
};
var inherits = (constructor, superConstructor, props, descriptors) => {
  constructor.prototype = Object.create(superConstructor.prototype, descriptors);
  constructor.prototype.constructor = constructor;
  Object.defineProperty(constructor, "super", {
    value: superConstructor.prototype
  });
  props && Object.assign(constructor.prototype, props);
};
var toFlatObject = (sourceObj, destObj, filter, propFilter) => {
  let props;
  let i;
  let prop;
  const merged = {};
  destObj = destObj || {};
  if (sourceObj == null)
    return destObj;
  do {
    props = Object.getOwnPropertyNames(sourceObj);
    i = props.length;
    while (i-- > 0) {
      prop = props[i];
      if ((!propFilter || propFilter(prop, sourceObj, destObj)) && !merged[prop]) {
        destObj[prop] = sourceObj[prop];
        merged[prop] = true;
      }
    }
    sourceObj = filter !== false && getPrototypeOf(sourceObj);
  } while (sourceObj && (!filter || filter(sourceObj, destObj)) && sourceObj !== Object.prototype);
  return destObj;
};
var endsWith = (str, searchString, position) => {
  str = String(str);
  if (position === undefined || position > str.length) {
    position = str.length;
  }
  position -= searchString.length;
  const lastIndex = str.indexOf(searchString, position);
  return lastIndex !== -1 && lastIndex === position;
};
var toArray = (thing) => {
  if (!thing)
    return null;
  if (isArray(thing))
    return thing;
  let i = thing.length;
  if (!isNumber(i))
    return null;
  const arr = new Array(i);
  while (i-- > 0) {
    arr[i] = thing[i];
  }
  return arr;
};
var isTypedArray = ((TypedArray) => {
  return (thing) => {
    return TypedArray && thing instanceof TypedArray;
  };
})(typeof Uint8Array !== "undefined" && getPrototypeOf(Uint8Array));
var forEachEntry = (obj, fn) => {
  const generator = obj && obj[iterator];
  const _iterator = generator.call(obj);
  let result;
  while ((result = _iterator.next()) && !result.done) {
    const pair = result.value;
    fn.call(obj, pair[0], pair[1]);
  }
};
var matchAll = (regExp, str) => {
  let matches;
  const arr = [];
  while ((matches = regExp.exec(str)) !== null) {
    arr.push(matches);
  }
  return arr;
};
var isHTMLForm = kindOfTest("HTMLFormElement");
var toCamelCase = (str) => {
  return str.toLowerCase().replace(/[-_\s]([a-z\d])(\w*)/g, function replacer(m, p1, p2) {
    return p1.toUpperCase() + p2;
  });
};
var hasOwnProperty = (({ hasOwnProperty: hasOwnProperty2 }) => (obj, prop) => hasOwnProperty2.call(obj, prop))(Object.prototype);
var isRegExp = kindOfTest("RegExp");
var reduceDescriptors = (obj, reducer) => {
  const descriptors = Object.getOwnPropertyDescriptors(obj);
  const reducedDescriptors = {};
  forEach(descriptors, (descriptor, name17) => {
    let ret;
    if ((ret = reducer(descriptor, name17, obj)) !== false) {
      reducedDescriptors[name17] = ret || descriptor;
    }
  });
  Object.defineProperties(obj, reducedDescriptors);
};
var freezeMethods = (obj) => {
  reduceDescriptors(obj, (descriptor, name17) => {
    if (isFunction(obj) && ["arguments", "caller", "callee"].indexOf(name17) !== -1) {
      return false;
    }
    const value = obj[name17];
    if (!isFunction(value))
      return;
    descriptor.enumerable = false;
    if ("writable" in descriptor) {
      descriptor.writable = false;
      return;
    }
    if (!descriptor.set) {
      descriptor.set = () => {
        throw Error("Can not rewrite read-only method '" + name17 + "'");
      };
    }
  });
};
var toObjectSet = (arrayOrString, delimiter) => {
  const obj = {};
  const define2 = (arr) => {
    arr.forEach((value) => {
      obj[value] = true;
    });
  };
  isArray(arrayOrString) ? define2(arrayOrString) : define2(String(arrayOrString).split(delimiter));
  return obj;
};
var noop = () => {};
var toFiniteNumber = (value, defaultValue) => {
  return value != null && Number.isFinite(value = +value) ? value : defaultValue;
};
function isSpecCompliantForm(thing) {
  return !!(thing && isFunction(thing.append) && thing[toStringTag] === "FormData" && thing[iterator]);
}
var toJSONObject = (obj) => {
  const stack = new Array(10);
  const visit = (source, i) => {
    if (isObject(source)) {
      if (stack.indexOf(source) >= 0) {
        return;
      }
      if (!("toJSON" in source)) {
        stack[i] = source;
        const target = isArray(source) ? [] : {};
        forEach(source, (value, key) => {
          const reducedValue = visit(value, i + 1);
          !isUndefined(reducedValue) && (target[key] = reducedValue);
        });
        stack[i] = undefined;
        return target;
      }
    }
    return source;
  };
  return visit(obj, 0);
};
var isAsyncFn = kindOfTest("AsyncFunction");
var isThenable = (thing) => thing && (isObject(thing) || isFunction(thing)) && isFunction(thing.then) && isFunction(thing.catch);
var _setImmediate = ((setImmediateSupported, postMessageSupported) => {
  if (setImmediateSupported) {
    return setImmediate;
  }
  return postMessageSupported ? ((token, callbacks) => {
    _global.addEventListener("message", ({ source, data }) => {
      if (source === _global && data === token) {
        callbacks.length && callbacks.shift()();
      }
    }, false);
    return (cb) => {
      callbacks.push(cb);
      _global.postMessage(token, "*");
    };
  })(`axios@${Math.random()}`, []) : (cb) => setTimeout(cb);
})(typeof setImmediate === "function", isFunction(_global.postMessage));
var asap = typeof queueMicrotask !== "undefined" ? queueMicrotask.bind(_global) : typeof process !== "undefined" && process.nextTick || _setImmediate;
var isIterable = (thing) => thing != null && isFunction(thing[iterator]);
var utils_default = {
  isArray,
  isArrayBuffer,
  isBuffer,
  isFormData,
  isArrayBufferView,
  isString,
  isNumber,
  isBoolean,
  isObject,
  isPlainObject,
  isReadableStream,
  isRequest,
  isResponse,
  isHeaders,
  isUndefined,
  isDate,
  isFile,
  isBlob,
  isRegExp,
  isFunction,
  isStream,
  isURLSearchParams,
  isTypedArray,
  isFileList,
  forEach,
  merge,
  extend,
  trim,
  stripBOM,
  inherits,
  toFlatObject,
  kindOf,
  kindOfTest,
  endsWith,
  toArray,
  forEachEntry,
  matchAll,
  isHTMLForm,
  hasOwnProperty,
  hasOwnProp: hasOwnProperty,
  reduceDescriptors,
  freezeMethods,
  toObjectSet,
  toCamelCase,
  noop,
  toFiniteNumber,
  findKey,
  global: _global,
  isContextDefined,
  isSpecCompliantForm,
  toJSONObject,
  isAsyncFn,
  isThenable,
  setImmediate: _setImmediate,
  asap,
  isIterable
};

// node_modules/axios/lib/core/AxiosError.js
function AxiosError(message, code, config, request, response) {
  Error.call(this);
  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, this.constructor);
  } else {
    this.stack = new Error().stack;
  }
  this.message = message;
  this.name = "AxiosError";
  code && (this.code = code);
  config && (this.config = config);
  request && (this.request = request);
  if (response) {
    this.response = response;
    this.status = response.status ? response.status : null;
  }
}
utils_default.inherits(AxiosError, Error, {
  toJSON: function toJSON() {
    return {
      message: this.message,
      name: this.name,
      description: this.description,
      number: this.number,
      fileName: this.fileName,
      lineNumber: this.lineNumber,
      columnNumber: this.columnNumber,
      stack: this.stack,
      config: utils_default.toJSONObject(this.config),
      code: this.code,
      status: this.status
    };
  }
});
var prototype = AxiosError.prototype;
var descriptors = {};
[
  "ERR_BAD_OPTION_VALUE",
  "ERR_BAD_OPTION",
  "ECONNABORTED",
  "ETIMEDOUT",
  "ERR_NETWORK",
  "ERR_FR_TOO_MANY_REDIRECTS",
  "ERR_DEPRECATED",
  "ERR_BAD_RESPONSE",
  "ERR_BAD_REQUEST",
  "ERR_CANCELED",
  "ERR_NOT_SUPPORT",
  "ERR_INVALID_URL"
].forEach((code) => {
  descriptors[code] = { value: code };
});
Object.defineProperties(AxiosError, descriptors);
Object.defineProperty(prototype, "isAxiosError", { value: true });
AxiosError.from = (error, code, config, request, response, customProps) => {
  const axiosError = Object.create(prototype);
  utils_default.toFlatObject(error, axiosError, function filter(obj) {
    return obj !== Error.prototype;
  }, (prop) => {
    return prop !== "isAxiosError";
  });
  AxiosError.call(axiosError, error.message, code, config, request, response);
  axiosError.cause = error;
  axiosError.name = error.name;
  customProps && Object.assign(axiosError, customProps);
  return axiosError;
};
var AxiosError_default = AxiosError;

// node_modules/axios/lib/platform/node/classes/FormData.js
var import_form_data = __toESM(require_form_data(), 1);
var FormData_default = import_form_data.default;

// node_modules/axios/lib/helpers/toFormData.js
function isVisitable(thing) {
  return utils_default.isPlainObject(thing) || utils_default.isArray(thing);
}
function removeBrackets(key) {
  return utils_default.endsWith(key, "[]") ? key.slice(0, -2) : key;
}
function renderKey(path, key, dots) {
  if (!path)
    return key;
  return path.concat(key).map(function each(token, i) {
    token = removeBrackets(token);
    return !dots && i ? "[" + token + "]" : token;
  }).join(dots ? "." : "");
}
function isFlatArray(arr) {
  return utils_default.isArray(arr) && !arr.some(isVisitable);
}
var predicates = utils_default.toFlatObject(utils_default, {}, null, function filter(prop) {
  return /^is[A-Z]/.test(prop);
});
function toFormData(obj, formData, options) {
  if (!utils_default.isObject(obj)) {
    throw new TypeError("target must be an object");
  }
  formData = formData || new (FormData_default || FormData);
  options = utils_default.toFlatObject(options, {
    metaTokens: true,
    dots: false,
    indexes: false
  }, false, function defined(option, source) {
    return !utils_default.isUndefined(source[option]);
  });
  const metaTokens = options.metaTokens;
  const visitor = options.visitor || defaultVisitor;
  const dots = options.dots;
  const indexes = options.indexes;
  const _Blob = options.Blob || typeof Blob !== "undefined" && Blob;
  const useBlob = _Blob && utils_default.isSpecCompliantForm(formData);
  if (!utils_default.isFunction(visitor)) {
    throw new TypeError("visitor must be a function");
  }
  function convertValue(value) {
    if (value === null)
      return "";
    if (utils_default.isDate(value)) {
      return value.toISOString();
    }
    if (utils_default.isBoolean(value)) {
      return value.toString();
    }
    if (!useBlob && utils_default.isBlob(value)) {
      throw new AxiosError_default("Blob is not supported. Use a Buffer instead.");
    }
    if (utils_default.isArrayBuffer(value) || utils_default.isTypedArray(value)) {
      return useBlob && typeof Blob === "function" ? new Blob([value]) : Buffer.from(value);
    }
    return value;
  }
  function defaultVisitor(value, key, path) {
    let arr = value;
    if (value && !path && typeof value === "object") {
      if (utils_default.endsWith(key, "{}")) {
        key = metaTokens ? key : key.slice(0, -2);
        value = JSON.stringify(value);
      } else if (utils_default.isArray(value) && isFlatArray(value) || (utils_default.isFileList(value) || utils_default.endsWith(key, "[]")) && (arr = utils_default.toArray(value))) {
        key = removeBrackets(key);
        arr.forEach(function each(el, index) {
          !(utils_default.isUndefined(el) || el === null) && formData.append(indexes === true ? renderKey([key], index, dots) : indexes === null ? key : key + "[]", convertValue(el));
        });
        return false;
      }
    }
    if (isVisitable(value)) {
      return true;
    }
    formData.append(renderKey(path, key, dots), convertValue(value));
    return false;
  }
  const stack = [];
  const exposedHelpers = Object.assign(predicates, {
    defaultVisitor,
    convertValue,
    isVisitable
  });
  function build(value, path) {
    if (utils_default.isUndefined(value))
      return;
    if (stack.indexOf(value) !== -1) {
      throw Error("Circular reference detected in " + path.join("."));
    }
    stack.push(value);
    utils_default.forEach(value, function each(el, key) {
      const result = !(utils_default.isUndefined(el) || el === null) && visitor.call(formData, el, utils_default.isString(key) ? key.trim() : key, path, exposedHelpers);
      if (result === true) {
        build(el, path ? path.concat(key) : [key]);
      }
    });
    stack.pop();
  }
  if (!utils_default.isObject(obj)) {
    throw new TypeError("data must be an object");
  }
  build(obj);
  return formData;
}
var toFormData_default = toFormData;

// node_modules/axios/lib/helpers/AxiosURLSearchParams.js
function encode(str) {
  const charMap = {
    "!": "%21",
    "'": "%27",
    "(": "%28",
    ")": "%29",
    "~": "%7E",
    "%20": "+",
    "%00": "\x00"
  };
  return encodeURIComponent(str).replace(/[!'()~]|%20|%00/g, function replacer(match) {
    return charMap[match];
  });
}
function AxiosURLSearchParams(params, options) {
  this._pairs = [];
  params && toFormData_default(params, this, options);
}
var prototype2 = AxiosURLSearchParams.prototype;
prototype2.append = function append(name17, value) {
  this._pairs.push([name17, value]);
};
prototype2.toString = function toString2(encoder) {
  const _encode = encoder ? function(value) {
    return encoder.call(this, value, encode);
  } : encode;
  return this._pairs.map(function each(pair) {
    return _encode(pair[0]) + "=" + _encode(pair[1]);
  }, "").join("&");
};
var AxiosURLSearchParams_default = AxiosURLSearchParams;

// node_modules/axios/lib/helpers/buildURL.js
function encode2(val) {
  return encodeURIComponent(val).replace(/%3A/gi, ":").replace(/%24/g, "$").replace(/%2C/gi, ",").replace(/%20/g, "+").replace(/%5B/gi, "[").replace(/%5D/gi, "]");
}
function buildURL(url, params, options) {
  if (!params) {
    return url;
  }
  const _encode = options && options.encode || encode2;
  if (utils_default.isFunction(options)) {
    options = {
      serialize: options
    };
  }
  const serializeFn = options && options.serialize;
  let serializedParams;
  if (serializeFn) {
    serializedParams = serializeFn(params, options);
  } else {
    serializedParams = utils_default.isURLSearchParams(params) ? params.toString() : new AxiosURLSearchParams_default(params, options).toString(_encode);
  }
  if (serializedParams) {
    const hashmarkIndex = url.indexOf("#");
    if (hashmarkIndex !== -1) {
      url = url.slice(0, hashmarkIndex);
    }
    url += (url.indexOf("?") === -1 ? "?" : "&") + serializedParams;
  }
  return url;
}

// node_modules/axios/lib/core/InterceptorManager.js
class InterceptorManager {
  constructor() {
    this.handlers = [];
  }
  use(fulfilled, rejected, options) {
    this.handlers.push({
      fulfilled,
      rejected,
      synchronous: options ? options.synchronous : false,
      runWhen: options ? options.runWhen : null
    });
    return this.handlers.length - 1;
  }
  eject(id) {
    if (this.handlers[id]) {
      this.handlers[id] = null;
    }
  }
  clear() {
    if (this.handlers) {
      this.handlers = [];
    }
  }
  forEach(fn) {
    utils_default.forEach(this.handlers, function forEachHandler(h) {
      if (h !== null) {
        fn(h);
      }
    });
  }
}
var InterceptorManager_default = InterceptorManager;

// node_modules/axios/lib/defaults/transitional.js
var transitional_default = {
  silentJSONParsing: true,
  forcedJSONParsing: true,
  clarifyTimeoutError: false
};

// node_modules/axios/lib/platform/node/index.js
import crypto2 from "crypto";

// node_modules/axios/lib/platform/node/classes/URLSearchParams.js
import url from "url";
var URLSearchParams_default = url.URLSearchParams;

// node_modules/axios/lib/platform/node/index.js
var ALPHA = "abcdefghijklmnopqrstuvwxyz";
var DIGIT = "0123456789";
var ALPHABET = {
  DIGIT,
  ALPHA,
  ALPHA_DIGIT: ALPHA + ALPHA.toUpperCase() + DIGIT
};
var generateString = (size = 16, alphabet = ALPHABET.ALPHA_DIGIT) => {
  let str = "";
  const { length } = alphabet;
  const randomValues = new Uint32Array(size);
  crypto2.randomFillSync(randomValues);
  for (let i = 0;i < size; i++) {
    str += alphabet[randomValues[i] % length];
  }
  return str;
};
var node_default = {
  isNode: true,
  classes: {
    URLSearchParams: URLSearchParams_default,
    FormData: FormData_default,
    Blob: typeof Blob !== "undefined" && Blob || null
  },
  ALPHABET,
  generateString,
  protocols: ["http", "https", "file", "data"]
};

// node_modules/axios/lib/platform/common/utils.js
var exports_utils = {};
__export(exports_utils, {
  origin: () => origin,
  navigator: () => _navigator,
  hasStandardBrowserWebWorkerEnv: () => hasStandardBrowserWebWorkerEnv,
  hasStandardBrowserEnv: () => hasStandardBrowserEnv,
  hasBrowserEnv: () => hasBrowserEnv
});
var hasBrowserEnv = typeof window !== "undefined" && typeof document !== "undefined";
var _navigator = typeof navigator === "object" && navigator || undefined;
var hasStandardBrowserEnv = hasBrowserEnv && (!_navigator || ["ReactNative", "NativeScript", "NS"].indexOf(_navigator.product) < 0);
var hasStandardBrowserWebWorkerEnv = (() => {
  return typeof WorkerGlobalScope !== "undefined" && self instanceof WorkerGlobalScope && typeof self.importScripts === "function";
})();
var origin = hasBrowserEnv && window.location.href || "http://localhost";

// node_modules/axios/lib/platform/index.js
var platform_default = {
  ...exports_utils,
  ...node_default
};

// node_modules/axios/lib/helpers/toURLEncodedForm.js
function toURLEncodedForm(data, options) {
  return toFormData_default(data, new platform_default.classes.URLSearchParams, Object.assign({
    visitor: function(value, key, path, helpers) {
      if (platform_default.isNode && utils_default.isBuffer(value)) {
        this.append(key, value.toString("base64"));
        return false;
      }
      return helpers.defaultVisitor.apply(this, arguments);
    }
  }, options));
}

// node_modules/axios/lib/helpers/formDataToJSON.js
function parsePropPath(name17) {
  return utils_default.matchAll(/\w+|\[(\w*)]/g, name17).map((match) => {
    return match[0] === "[]" ? "" : match[1] || match[0];
  });
}
function arrayToObject(arr) {
  const obj = {};
  const keys = Object.keys(arr);
  let i;
  const len = keys.length;
  let key;
  for (i = 0;i < len; i++) {
    key = keys[i];
    obj[key] = arr[key];
  }
  return obj;
}
function formDataToJSON(formData) {
  function buildPath(path, value, target, index) {
    let name17 = path[index++];
    if (name17 === "__proto__")
      return true;
    const isNumericKey = Number.isFinite(+name17);
    const isLast = index >= path.length;
    name17 = !name17 && utils_default.isArray(target) ? target.length : name17;
    if (isLast) {
      if (utils_default.hasOwnProp(target, name17)) {
        target[name17] = [target[name17], value];
      } else {
        target[name17] = value;
      }
      return !isNumericKey;
    }
    if (!target[name17] || !utils_default.isObject(target[name17])) {
      target[name17] = [];
    }
    const result = buildPath(path, value, target[name17], index);
    if (result && utils_default.isArray(target[name17])) {
      target[name17] = arrayToObject(target[name17]);
    }
    return !isNumericKey;
  }
  if (utils_default.isFormData(formData) && utils_default.isFunction(formData.entries)) {
    const obj = {};
    utils_default.forEachEntry(formData, (name17, value) => {
      buildPath(parsePropPath(name17), value, obj, 0);
    });
    return obj;
  }
  return null;
}
var formDataToJSON_default = formDataToJSON;

// node_modules/axios/lib/defaults/index.js
function stringifySafely(rawValue, parser, encoder) {
  if (utils_default.isString(rawValue)) {
    try {
      (parser || JSON.parse)(rawValue);
      return utils_default.trim(rawValue);
    } catch (e) {
      if (e.name !== "SyntaxError") {
        throw e;
      }
    }
  }
  return (encoder || JSON.stringify)(rawValue);
}
var defaults = {
  transitional: transitional_default,
  adapter: ["xhr", "http", "fetch"],
  transformRequest: [function transformRequest(data, headers) {
    const contentType = headers.getContentType() || "";
    const hasJSONContentType = contentType.indexOf("application/json") > -1;
    const isObjectPayload = utils_default.isObject(data);
    if (isObjectPayload && utils_default.isHTMLForm(data)) {
      data = new FormData(data);
    }
    const isFormData2 = utils_default.isFormData(data);
    if (isFormData2) {
      return hasJSONContentType ? JSON.stringify(formDataToJSON_default(data)) : data;
    }
    if (utils_default.isArrayBuffer(data) || utils_default.isBuffer(data) || utils_default.isStream(data) || utils_default.isFile(data) || utils_default.isBlob(data) || utils_default.isReadableStream(data)) {
      return data;
    }
    if (utils_default.isArrayBufferView(data)) {
      return data.buffer;
    }
    if (utils_default.isURLSearchParams(data)) {
      headers.setContentType("application/x-www-form-urlencoded;charset=utf-8", false);
      return data.toString();
    }
    let isFileList2;
    if (isObjectPayload) {
      if (contentType.indexOf("application/x-www-form-urlencoded") > -1) {
        return toURLEncodedForm(data, this.formSerializer).toString();
      }
      if ((isFileList2 = utils_default.isFileList(data)) || contentType.indexOf("multipart/form-data") > -1) {
        const _FormData = this.env && this.env.FormData;
        return toFormData_default(isFileList2 ? { "files[]": data } : data, _FormData && new _FormData, this.formSerializer);
      }
    }
    if (isObjectPayload || hasJSONContentType) {
      headers.setContentType("application/json", false);
      return stringifySafely(data);
    }
    return data;
  }],
  transformResponse: [function transformResponse(data) {
    const transitional = this.transitional || defaults.transitional;
    const forcedJSONParsing = transitional && transitional.forcedJSONParsing;
    const JSONRequested = this.responseType === "json";
    if (utils_default.isResponse(data) || utils_default.isReadableStream(data)) {
      return data;
    }
    if (data && utils_default.isString(data) && (forcedJSONParsing && !this.responseType || JSONRequested)) {
      const silentJSONParsing = transitional && transitional.silentJSONParsing;
      const strictJSONParsing = !silentJSONParsing && JSONRequested;
      try {
        return JSON.parse(data);
      } catch (e) {
        if (strictJSONParsing) {
          if (e.name === "SyntaxError") {
            throw AxiosError_default.from(e, AxiosError_default.ERR_BAD_RESPONSE, this, null, this.response);
          }
          throw e;
        }
      }
    }
    return data;
  }],
  timeout: 0,
  xsrfCookieName: "XSRF-TOKEN",
  xsrfHeaderName: "X-XSRF-TOKEN",
  maxContentLength: -1,
  maxBodyLength: -1,
  env: {
    FormData: platform_default.classes.FormData,
    Blob: platform_default.classes.Blob
  },
  validateStatus: function validateStatus(status) {
    return status >= 200 && status < 300;
  },
  headers: {
    common: {
      Accept: "application/json, text/plain, */*",
      "Content-Type": undefined
    }
  }
};
utils_default.forEach(["delete", "get", "head", "post", "put", "patch"], (method) => {
  defaults.headers[method] = {};
});
var defaults_default = defaults;

// node_modules/axios/lib/helpers/parseHeaders.js
var ignoreDuplicateOf = utils_default.toObjectSet([
  "age",
  "authorization",
  "content-length",
  "content-type",
  "etag",
  "expires",
  "from",
  "host",
  "if-modified-since",
  "if-unmodified-since",
  "last-modified",
  "location",
  "max-forwards",
  "proxy-authorization",
  "referer",
  "retry-after",
  "user-agent"
]);
var parseHeaders_default = (rawHeaders) => {
  const parsed = {};
  let key;
  let val;
  let i;
  rawHeaders && rawHeaders.split(`
`).forEach(function parser(line) {
    i = line.indexOf(":");
    key = line.substring(0, i).trim().toLowerCase();
    val = line.substring(i + 1).trim();
    if (!key || parsed[key] && ignoreDuplicateOf[key]) {
      return;
    }
    if (key === "set-cookie") {
      if (parsed[key]) {
        parsed[key].push(val);
      } else {
        parsed[key] = [val];
      }
    } else {
      parsed[key] = parsed[key] ? parsed[key] + ", " + val : val;
    }
  });
  return parsed;
};

// node_modules/axios/lib/core/AxiosHeaders.js
var $internals = Symbol("internals");
function normalizeHeader(header) {
  return header && String(header).trim().toLowerCase();
}
function normalizeValue(value) {
  if (value === false || value == null) {
    return value;
  }
  return utils_default.isArray(value) ? value.map(normalizeValue) : String(value);
}
function parseTokens(str) {
  const tokens = Object.create(null);
  const tokensRE = /([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;
  let match;
  while (match = tokensRE.exec(str)) {
    tokens[match[1]] = match[2];
  }
  return tokens;
}
var isValidHeaderName = (str) => /^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(str.trim());
function matchHeaderValue(context, value, header, filter2, isHeaderNameFilter) {
  if (utils_default.isFunction(filter2)) {
    return filter2.call(this, value, header);
  }
  if (isHeaderNameFilter) {
    value = header;
  }
  if (!utils_default.isString(value))
    return;
  if (utils_default.isString(filter2)) {
    return value.indexOf(filter2) !== -1;
  }
  if (utils_default.isRegExp(filter2)) {
    return filter2.test(value);
  }
}
function formatHeader(header) {
  return header.trim().toLowerCase().replace(/([a-z\d])(\w*)/g, (w, char, str) => {
    return char.toUpperCase() + str;
  });
}
function buildAccessors(obj, header) {
  const accessorName = utils_default.toCamelCase(" " + header);
  ["get", "set", "has"].forEach((methodName) => {
    Object.defineProperty(obj, methodName + accessorName, {
      value: function(arg1, arg2, arg3) {
        return this[methodName].call(this, header, arg1, arg2, arg3);
      },
      configurable: true
    });
  });
}

class AxiosHeaders {
  constructor(headers) {
    headers && this.set(headers);
  }
  set(header, valueOrRewrite, rewrite) {
    const self2 = this;
    function setHeader(_value, _header, _rewrite) {
      const lHeader = normalizeHeader(_header);
      if (!lHeader) {
        throw new Error("header name must be a non-empty string");
      }
      const key = utils_default.findKey(self2, lHeader);
      if (!key || self2[key] === undefined || _rewrite === true || _rewrite === undefined && self2[key] !== false) {
        self2[key || _header] = normalizeValue(_value);
      }
    }
    const setHeaders = (headers, _rewrite) => utils_default.forEach(headers, (_value, _header) => setHeader(_value, _header, _rewrite));
    if (utils_default.isPlainObject(header) || header instanceof this.constructor) {
      setHeaders(header, valueOrRewrite);
    } else if (utils_default.isString(header) && (header = header.trim()) && !isValidHeaderName(header)) {
      setHeaders(parseHeaders_default(header), valueOrRewrite);
    } else if (utils_default.isObject(header) && utils_default.isIterable(header)) {
      let obj = {}, dest, key;
      for (const entry of header) {
        if (!utils_default.isArray(entry)) {
          throw TypeError("Object iterator must return a key-value pair");
        }
        obj[key = entry[0]] = (dest = obj[key]) ? utils_default.isArray(dest) ? [...dest, entry[1]] : [dest, entry[1]] : entry[1];
      }
      setHeaders(obj, valueOrRewrite);
    } else {
      header != null && setHeader(valueOrRewrite, header, rewrite);
    }
    return this;
  }
  get(header, parser) {
    header = normalizeHeader(header);
    if (header) {
      const key = utils_default.findKey(this, header);
      if (key) {
        const value = this[key];
        if (!parser) {
          return value;
        }
        if (parser === true) {
          return parseTokens(value);
        }
        if (utils_default.isFunction(parser)) {
          return parser.call(this, value, key);
        }
        if (utils_default.isRegExp(parser)) {
          return parser.exec(value);
        }
        throw new TypeError("parser must be boolean|regexp|function");
      }
    }
  }
  has(header, matcher) {
    header = normalizeHeader(header);
    if (header) {
      const key = utils_default.findKey(this, header);
      return !!(key && this[key] !== undefined && (!matcher || matchHeaderValue(this, this[key], key, matcher)));
    }
    return false;
  }
  delete(header, matcher) {
    const self2 = this;
    let deleted = false;
    function deleteHeader(_header) {
      _header = normalizeHeader(_header);
      if (_header) {
        const key = utils_default.findKey(self2, _header);
        if (key && (!matcher || matchHeaderValue(self2, self2[key], key, matcher))) {
          delete self2[key];
          deleted = true;
        }
      }
    }
    if (utils_default.isArray(header)) {
      header.forEach(deleteHeader);
    } else {
      deleteHeader(header);
    }
    return deleted;
  }
  clear(matcher) {
    const keys = Object.keys(this);
    let i = keys.length;
    let deleted = false;
    while (i--) {
      const key = keys[i];
      if (!matcher || matchHeaderValue(this, this[key], key, matcher, true)) {
        delete this[key];
        deleted = true;
      }
    }
    return deleted;
  }
  normalize(format) {
    const self2 = this;
    const headers = {};
    utils_default.forEach(this, (value, header) => {
      const key = utils_default.findKey(headers, header);
      if (key) {
        self2[key] = normalizeValue(value);
        delete self2[header];
        return;
      }
      const normalized = format ? formatHeader(header) : String(header).trim();
      if (normalized !== header) {
        delete self2[header];
      }
      self2[normalized] = normalizeValue(value);
      headers[normalized] = true;
    });
    return this;
  }
  concat(...targets) {
    return this.constructor.concat(this, ...targets);
  }
  toJSON(asStrings) {
    const obj = Object.create(null);
    utils_default.forEach(this, (value, header) => {
      value != null && value !== false && (obj[header] = asStrings && utils_default.isArray(value) ? value.join(", ") : value);
    });
    return obj;
  }
  [Symbol.iterator]() {
    return Object.entries(this.toJSON())[Symbol.iterator]();
  }
  toString() {
    return Object.entries(this.toJSON()).map(([header, value]) => header + ": " + value).join(`
`);
  }
  getSetCookie() {
    return this.get("set-cookie") || [];
  }
  get [Symbol.toStringTag]() {
    return "AxiosHeaders";
  }
  static from(thing) {
    return thing instanceof this ? thing : new this(thing);
  }
  static concat(first, ...targets) {
    const computed = new this(first);
    targets.forEach((target) => computed.set(target));
    return computed;
  }
  static accessor(header) {
    const internals = this[$internals] = this[$internals] = {
      accessors: {}
    };
    const accessors = internals.accessors;
    const prototype3 = this.prototype;
    function defineAccessor(_header) {
      const lHeader = normalizeHeader(_header);
      if (!accessors[lHeader]) {
        buildAccessors(prototype3, _header);
        accessors[lHeader] = true;
      }
    }
    utils_default.isArray(header) ? header.forEach(defineAccessor) : defineAccessor(header);
    return this;
  }
}
AxiosHeaders.accessor(["Content-Type", "Content-Length", "Accept", "Accept-Encoding", "User-Agent", "Authorization"]);
utils_default.reduceDescriptors(AxiosHeaders.prototype, ({ value }, key) => {
  let mapped = key[0].toUpperCase() + key.slice(1);
  return {
    get: () => value,
    set(headerValue) {
      this[mapped] = headerValue;
    }
  };
});
utils_default.freezeMethods(AxiosHeaders);
var AxiosHeaders_default = AxiosHeaders;

// node_modules/axios/lib/core/transformData.js
function transformData(fns, response) {
  const config = this || defaults_default;
  const context = response || config;
  const headers = AxiosHeaders_default.from(context.headers);
  let data = context.data;
  utils_default.forEach(fns, function transform(fn) {
    data = fn.call(config, data, headers.normalize(), response ? response.status : undefined);
  });
  headers.normalize();
  return data;
}

// node_modules/axios/lib/cancel/isCancel.js
function isCancel(value) {
  return !!(value && value.__CANCEL__);
}

// node_modules/axios/lib/cancel/CanceledError.js
function CanceledError(message, config, request) {
  AxiosError_default.call(this, message == null ? "canceled" : message, AxiosError_default.ERR_CANCELED, config, request);
  this.name = "CanceledError";
}
utils_default.inherits(CanceledError, AxiosError_default, {
  __CANCEL__: true
});
var CanceledError_default = CanceledError;

// node_modules/axios/lib/core/settle.js
function settle(resolve, reject, response) {
  const validateStatus2 = response.config.validateStatus;
  if (!response.status || !validateStatus2 || validateStatus2(response.status)) {
    resolve(response);
  } else {
    reject(new AxiosError_default("Request failed with status code " + response.status, [AxiosError_default.ERR_BAD_REQUEST, AxiosError_default.ERR_BAD_RESPONSE][Math.floor(response.status / 100) - 4], response.config, response.request, response));
  }
}

// node_modules/axios/lib/helpers/isAbsoluteURL.js
function isAbsoluteURL(url2) {
  return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(url2);
}

// node_modules/axios/lib/helpers/combineURLs.js
function combineURLs(baseURL, relativeURL) {
  return relativeURL ? baseURL.replace(/\/?\/$/, "") + "/" + relativeURL.replace(/^\/+/, "") : baseURL;
}

// node_modules/axios/lib/core/buildFullPath.js
function buildFullPath(baseURL, requestedURL, allowAbsoluteUrls) {
  let isRelativeUrl = !isAbsoluteURL(requestedURL);
  if (baseURL && (isRelativeUrl || allowAbsoluteUrls == false)) {
    return combineURLs(baseURL, requestedURL);
  }
  return requestedURL;
}

// node_modules/axios/lib/adapters/http.js
var import_proxy_from_env = __toESM(require_proxy_from_env(), 1);
var import_follow_redirects = __toESM(require_follow_redirects(), 1);
import http from "http";
import https from "https";
import util4 from "util";
import zlib from "zlib";

// node_modules/axios/lib/env/data.js
var VERSION = "1.10.0";

// node_modules/axios/lib/helpers/parseProtocol.js
function parseProtocol(url2) {
  const match = /^([-+\w]{1,25})(:?\/\/|:)/.exec(url2);
  return match && match[1] || "";
}

// node_modules/axios/lib/helpers/fromDataURI.js
var DATA_URL_PATTERN = /^(?:([^;]+);)?(?:[^;]+;)?(base64|),([\s\S]*)$/;
function fromDataURI(uri, asBlob, options) {
  const _Blob = options && options.Blob || platform_default.classes.Blob;
  const protocol = parseProtocol(uri);
  if (asBlob === undefined && _Blob) {
    asBlob = true;
  }
  if (protocol === "data") {
    uri = protocol.length ? uri.slice(protocol.length + 1) : uri;
    const match = DATA_URL_PATTERN.exec(uri);
    if (!match) {
      throw new AxiosError_default("Invalid URL", AxiosError_default.ERR_INVALID_URL);
    }
    const mime = match[1];
    const isBase64 = match[2];
    const body = match[3];
    const buffer = Buffer.from(decodeURIComponent(body), isBase64 ? "base64" : "utf8");
    if (asBlob) {
      if (!_Blob) {
        throw new AxiosError_default("Blob is not supported", AxiosError_default.ERR_NOT_SUPPORT);
      }
      return new _Blob([buffer], { type: mime });
    }
    return buffer;
  }
  throw new AxiosError_default("Unsupported protocol " + protocol, AxiosError_default.ERR_NOT_SUPPORT);
}

// node_modules/axios/lib/adapters/http.js
import stream3 from "stream";

// node_modules/axios/lib/helpers/AxiosTransformStream.js
import stream from "stream";
var kInternals = Symbol("internals");

class AxiosTransformStream extends stream.Transform {
  constructor(options) {
    options = utils_default.toFlatObject(options, {
      maxRate: 0,
      chunkSize: 64 * 1024,
      minChunkSize: 100,
      timeWindow: 500,
      ticksRate: 2,
      samplesCount: 15
    }, null, (prop, source) => {
      return !utils_default.isUndefined(source[prop]);
    });
    super({
      readableHighWaterMark: options.chunkSize
    });
    const internals = this[kInternals] = {
      timeWindow: options.timeWindow,
      chunkSize: options.chunkSize,
      maxRate: options.maxRate,
      minChunkSize: options.minChunkSize,
      bytesSeen: 0,
      isCaptured: false,
      notifiedBytesLoaded: 0,
      ts: Date.now(),
      bytes: 0,
      onReadCallback: null
    };
    this.on("newListener", (event) => {
      if (event === "progress") {
        if (!internals.isCaptured) {
          internals.isCaptured = true;
        }
      }
    });
  }
  _read(size) {
    const internals = this[kInternals];
    if (internals.onReadCallback) {
      internals.onReadCallback();
    }
    return super._read(size);
  }
  _transform(chunk, encoding, callback) {
    const internals = this[kInternals];
    const maxRate = internals.maxRate;
    const readableHighWaterMark = this.readableHighWaterMark;
    const timeWindow = internals.timeWindow;
    const divider = 1000 / timeWindow;
    const bytesThreshold = maxRate / divider;
    const minChunkSize = internals.minChunkSize !== false ? Math.max(internals.minChunkSize, bytesThreshold * 0.01) : 0;
    const pushChunk = (_chunk, _callback) => {
      const bytes = Buffer.byteLength(_chunk);
      internals.bytesSeen += bytes;
      internals.bytes += bytes;
      internals.isCaptured && this.emit("progress", internals.bytesSeen);
      if (this.push(_chunk)) {
        process.nextTick(_callback);
      } else {
        internals.onReadCallback = () => {
          internals.onReadCallback = null;
          process.nextTick(_callback);
        };
      }
    };
    const transformChunk = (_chunk, _callback) => {
      const chunkSize = Buffer.byteLength(_chunk);
      let chunkRemainder = null;
      let maxChunkSize = readableHighWaterMark;
      let bytesLeft;
      let passed = 0;
      if (maxRate) {
        const now = Date.now();
        if (!internals.ts || (passed = now - internals.ts) >= timeWindow) {
          internals.ts = now;
          bytesLeft = bytesThreshold - internals.bytes;
          internals.bytes = bytesLeft < 0 ? -bytesLeft : 0;
          passed = 0;
        }
        bytesLeft = bytesThreshold - internals.bytes;
      }
      if (maxRate) {
        if (bytesLeft <= 0) {
          return setTimeout(() => {
            _callback(null, _chunk);
          }, timeWindow - passed);
        }
        if (bytesLeft < maxChunkSize) {
          maxChunkSize = bytesLeft;
        }
      }
      if (maxChunkSize && chunkSize > maxChunkSize && chunkSize - maxChunkSize > minChunkSize) {
        chunkRemainder = _chunk.subarray(maxChunkSize);
        _chunk = _chunk.subarray(0, maxChunkSize);
      }
      pushChunk(_chunk, chunkRemainder ? () => {
        process.nextTick(_callback, null, chunkRemainder);
      } : _callback);
    };
    transformChunk(chunk, function transformNextChunk(err, _chunk) {
      if (err) {
        return callback(err);
      }
      if (_chunk) {
        transformChunk(_chunk, transformNextChunk);
      } else {
        callback(null);
      }
    });
  }
}
var AxiosTransformStream_default = AxiosTransformStream;

// node_modules/axios/lib/adapters/http.js
import { EventEmitter } from "events";

// node_modules/axios/lib/helpers/formDataToStream.js
import util3 from "util";
import { Readable } from "stream";

// node_modules/axios/lib/helpers/readBlob.js
var { asyncIterator } = Symbol;
var readBlob = async function* (blob) {
  if (blob.stream) {
    yield* blob.stream();
  } else if (blob.arrayBuffer) {
    yield await blob.arrayBuffer();
  } else if (blob[asyncIterator]) {
    yield* blob[asyncIterator]();
  } else {
    yield blob;
  }
};
var readBlob_default = readBlob;

// node_modules/axios/lib/helpers/formDataToStream.js
var BOUNDARY_ALPHABET = platform_default.ALPHABET.ALPHA_DIGIT + "-_";
var textEncoder = typeof TextEncoder === "function" ? new TextEncoder : new util3.TextEncoder;
var CRLF = `\r
`;
var CRLF_BYTES = textEncoder.encode(CRLF);
var CRLF_BYTES_COUNT = 2;

class FormDataPart {
  constructor(name17, value) {
    const { escapeName } = this.constructor;
    const isStringValue = utils_default.isString(value);
    let headers = `Content-Disposition: form-data; name="${escapeName(name17)}"${!isStringValue && value.name ? `; filename="${escapeName(value.name)}"` : ""}${CRLF}`;
    if (isStringValue) {
      value = textEncoder.encode(String(value).replace(/\r?\n|\r\n?/g, CRLF));
    } else {
      headers += `Content-Type: ${value.type || "application/octet-stream"}${CRLF}`;
    }
    this.headers = textEncoder.encode(headers + CRLF);
    this.contentLength = isStringValue ? value.byteLength : value.size;
    this.size = this.headers.byteLength + this.contentLength + CRLF_BYTES_COUNT;
    this.name = name17;
    this.value = value;
  }
  async* encode() {
    yield this.headers;
    const { value } = this;
    if (utils_default.isTypedArray(value)) {
      yield value;
    } else {
      yield* readBlob_default(value);
    }
    yield CRLF_BYTES;
  }
  static escapeName(name17) {
    return String(name17).replace(/[\r\n"]/g, (match) => ({
      "\r": "%0D",
      "\n": "%0A",
      '"': "%22"
    })[match]);
  }
}
var formDataToStream = (form, headersHandler, options) => {
  const {
    tag = "form-data-boundary",
    size = 25,
    boundary = tag + "-" + platform_default.generateString(size, BOUNDARY_ALPHABET)
  } = options || {};
  if (!utils_default.isFormData(form)) {
    throw TypeError("FormData instance required");
  }
  if (boundary.length < 1 || boundary.length > 70) {
    throw Error("boundary must be 10-70 characters long");
  }
  const boundaryBytes = textEncoder.encode("--" + boundary + CRLF);
  const footerBytes = textEncoder.encode("--" + boundary + "--" + CRLF);
  let contentLength = footerBytes.byteLength;
  const parts = Array.from(form.entries()).map(([name17, value]) => {
    const part = new FormDataPart(name17, value);
    contentLength += part.size;
    return part;
  });
  contentLength += boundaryBytes.byteLength * parts.length;
  contentLength = utils_default.toFiniteNumber(contentLength);
  const computedHeaders = {
    "Content-Type": `multipart/form-data; boundary=${boundary}`
  };
  if (Number.isFinite(contentLength)) {
    computedHeaders["Content-Length"] = contentLength;
  }
  headersHandler && headersHandler(computedHeaders);
  return Readable.from(async function* () {
    for (const part of parts) {
      yield boundaryBytes;
      yield* part.encode();
    }
    yield footerBytes;
  }());
};
var formDataToStream_default = formDataToStream;

// node_modules/axios/lib/helpers/ZlibHeaderTransformStream.js
import stream2 from "stream";

class ZlibHeaderTransformStream extends stream2.Transform {
  __transform(chunk, encoding, callback) {
    this.push(chunk);
    callback();
  }
  _transform(chunk, encoding, callback) {
    if (chunk.length !== 0) {
      this._transform = this.__transform;
      if (chunk[0] !== 120) {
        const header = Buffer.alloc(2);
        header[0] = 120;
        header[1] = 156;
        this.push(header, encoding);
      }
    }
    this.__transform(chunk, encoding, callback);
  }
}
var ZlibHeaderTransformStream_default = ZlibHeaderTransformStream;

// node_modules/axios/lib/helpers/callbackify.js
var callbackify = (fn, reducer) => {
  return utils_default.isAsyncFn(fn) ? function(...args) {
    const cb = args.pop();
    fn.apply(this, args).then((value) => {
      try {
        reducer ? cb(null, ...reducer(value)) : cb(null, value);
      } catch (err) {
        cb(err);
      }
    }, cb);
  } : fn;
};
var callbackify_default = callbackify;

// node_modules/axios/lib/helpers/speedometer.js
function speedometer(samplesCount, min) {
  samplesCount = samplesCount || 10;
  const bytes = new Array(samplesCount);
  const timestamps = new Array(samplesCount);
  let head = 0;
  let tail = 0;
  let firstSampleTS;
  min = min !== undefined ? min : 1000;
  return function push(chunkLength) {
    const now = Date.now();
    const startedAt = timestamps[tail];
    if (!firstSampleTS) {
      firstSampleTS = now;
    }
    bytes[head] = chunkLength;
    timestamps[head] = now;
    let i = tail;
    let bytesCount = 0;
    while (i !== head) {
      bytesCount += bytes[i++];
      i = i % samplesCount;
    }
    head = (head + 1) % samplesCount;
    if (head === tail) {
      tail = (tail + 1) % samplesCount;
    }
    if (now - firstSampleTS < min) {
      return;
    }
    const passed = startedAt && now - startedAt;
    return passed ? Math.round(bytesCount * 1000 / passed) : undefined;
  };
}
var speedometer_default = speedometer;

// node_modules/axios/lib/helpers/throttle.js
function throttle(fn, freq) {
  let timestamp = 0;
  let threshold = 1000 / freq;
  let lastArgs;
  let timer;
  const invoke = (args, now = Date.now()) => {
    timestamp = now;
    lastArgs = null;
    if (timer) {
      clearTimeout(timer);
      timer = null;
    }
    fn.apply(null, args);
  };
  const throttled = (...args) => {
    const now = Date.now();
    const passed = now - timestamp;
    if (passed >= threshold) {
      invoke(args, now);
    } else {
      lastArgs = args;
      if (!timer) {
        timer = setTimeout(() => {
          timer = null;
          invoke(lastArgs);
        }, threshold - passed);
      }
    }
  };
  const flush = () => lastArgs && invoke(lastArgs);
  return [throttled, flush];
}
var throttle_default = throttle;

// node_modules/axios/lib/helpers/progressEventReducer.js
var progressEventReducer = (listener, isDownloadStream, freq = 3) => {
  let bytesNotified = 0;
  const _speedometer = speedometer_default(50, 250);
  return throttle_default((e) => {
    const loaded = e.loaded;
    const total = e.lengthComputable ? e.total : undefined;
    const progressBytes = loaded - bytesNotified;
    const rate = _speedometer(progressBytes);
    const inRange = loaded <= total;
    bytesNotified = loaded;
    const data = {
      loaded,
      total,
      progress: total ? loaded / total : undefined,
      bytes: progressBytes,
      rate: rate ? rate : undefined,
      estimated: rate && total && inRange ? (total - loaded) / rate : undefined,
      event: e,
      lengthComputable: total != null,
      [isDownloadStream ? "download" : "upload"]: true
    };
    listener(data);
  }, freq);
};
var progressEventDecorator = (total, throttled) => {
  const lengthComputable = total != null;
  return [(loaded) => throttled[0]({
    lengthComputable,
    total,
    loaded
  }), throttled[1]];
};
var asyncDecorator = (fn) => (...args) => utils_default.asap(() => fn(...args));

// node_modules/axios/lib/adapters/http.js
var zlibOptions = {
  flush: zlib.constants.Z_SYNC_FLUSH,
  finishFlush: zlib.constants.Z_SYNC_FLUSH
};
var brotliOptions = {
  flush: zlib.constants.BROTLI_OPERATION_FLUSH,
  finishFlush: zlib.constants.BROTLI_OPERATION_FLUSH
};
var isBrotliSupported = utils_default.isFunction(zlib.createBrotliDecompress);
var { http: httpFollow, https: httpsFollow } = import_follow_redirects.default;
var isHttps = /https:?/;
var supportedProtocols = platform_default.protocols.map((protocol) => {
  return protocol + ":";
});
var flushOnFinish = (stream4, [throttled, flush]) => {
  stream4.on("end", flush).on("error", flush);
  return throttled;
};
function dispatchBeforeRedirect(options, responseDetails) {
  if (options.beforeRedirects.proxy) {
    options.beforeRedirects.proxy(options);
  }
  if (options.beforeRedirects.config) {
    options.beforeRedirects.config(options, responseDetails);
  }
}
function setProxy(options, configProxy, location) {
  let proxy = configProxy;
  if (!proxy && proxy !== false) {
    const proxyUrl = import_proxy_from_env.default.getProxyForUrl(location);
    if (proxyUrl) {
      proxy = new URL(proxyUrl);
    }
  }
  if (proxy) {
    if (proxy.username) {
      proxy.auth = (proxy.username || "") + ":" + (proxy.password || "");
    }
    if (proxy.auth) {
      if (proxy.auth.username || proxy.auth.password) {
        proxy.auth = (proxy.auth.username || "") + ":" + (proxy.auth.password || "");
      }
      const base64 = Buffer.from(proxy.auth, "utf8").toString("base64");
      options.headers["Proxy-Authorization"] = "Basic " + base64;
    }
    options.headers.host = options.hostname + (options.port ? ":" + options.port : "");
    const proxyHost = proxy.hostname || proxy.host;
    options.hostname = proxyHost;
    options.host = proxyHost;
    options.port = proxy.port;
    options.path = location;
    if (proxy.protocol) {
      options.protocol = proxy.protocol.includes(":") ? proxy.protocol : `${proxy.protocol}:`;
    }
  }
  options.beforeRedirects.proxy = function beforeRedirect(redirectOptions) {
    setProxy(redirectOptions, configProxy, redirectOptions.href);
  };
}
var isHttpAdapterSupported = typeof process !== "undefined" && utils_default.kindOf(process) === "process";
var wrapAsync = (asyncExecutor) => {
  return new Promise((resolve, reject) => {
    let onDone;
    let isDone;
    const done = (value, isRejected) => {
      if (isDone)
        return;
      isDone = true;
      onDone && onDone(value, isRejected);
    };
    const _resolve = (value) => {
      done(value);
      resolve(value);
    };
    const _reject = (reason) => {
      done(reason, true);
      reject(reason);
    };
    asyncExecutor(_resolve, _reject, (onDoneHandler) => onDone = onDoneHandler).catch(_reject);
  });
};
var resolveFamily = ({ address, family }) => {
  if (!utils_default.isString(address)) {
    throw TypeError("address must be a string");
  }
  return {
    address,
    family: family || (address.indexOf(".") < 0 ? 6 : 4)
  };
};
var buildAddressEntry = (address, family) => resolveFamily(utils_default.isObject(address) ? address : { address, family });
var http_default = isHttpAdapterSupported && function httpAdapter(config) {
  return wrapAsync(async function dispatchHttpRequest(resolve, reject, onDone) {
    let { data, lookup, family } = config;
    const { responseType, responseEncoding } = config;
    const method = config.method.toUpperCase();
    let isDone;
    let rejected = false;
    let req;
    if (lookup) {
      const _lookup = callbackify_default(lookup, (value) => utils_default.isArray(value) ? value : [value]);
      lookup = (hostname, opt, cb) => {
        _lookup(hostname, opt, (err, arg0, arg1) => {
          if (err) {
            return cb(err);
          }
          const addresses = utils_default.isArray(arg0) ? arg0.map((addr) => buildAddressEntry(addr)) : [buildAddressEntry(arg0, arg1)];
          opt.all ? cb(err, addresses) : cb(err, addresses[0].address, addresses[0].family);
        });
      };
    }
    const emitter = new EventEmitter;
    const onFinished = () => {
      if (config.cancelToken) {
        config.cancelToken.unsubscribe(abort);
      }
      if (config.signal) {
        config.signal.removeEventListener("abort", abort);
      }
      emitter.removeAllListeners();
    };
    onDone((value, isRejected) => {
      isDone = true;
      if (isRejected) {
        rejected = true;
        onFinished();
      }
    });
    function abort(reason) {
      emitter.emit("abort", !reason || reason.type ? new CanceledError_default(null, config, req) : reason);
    }
    emitter.once("abort", reject);
    if (config.cancelToken || config.signal) {
      config.cancelToken && config.cancelToken.subscribe(abort);
      if (config.signal) {
        config.signal.aborted ? abort() : config.signal.addEventListener("abort", abort);
      }
    }
    const fullPath = buildFullPath(config.baseURL, config.url, config.allowAbsoluteUrls);
    const parsed = new URL(fullPath, platform_default.hasBrowserEnv ? platform_default.origin : undefined);
    const protocol = parsed.protocol || supportedProtocols[0];
    if (protocol === "data:") {
      let convertedData;
      if (method !== "GET") {
        return settle(resolve, reject, {
          status: 405,
          statusText: "method not allowed",
          headers: {},
          config
        });
      }
      try {
        convertedData = fromDataURI(config.url, responseType === "blob", {
          Blob: config.env && config.env.Blob
        });
      } catch (err) {
        throw AxiosError_default.from(err, AxiosError_default.ERR_BAD_REQUEST, config);
      }
      if (responseType === "text") {
        convertedData = convertedData.toString(responseEncoding);
        if (!responseEncoding || responseEncoding === "utf8") {
          convertedData = utils_default.stripBOM(convertedData);
        }
      } else if (responseType === "stream") {
        convertedData = stream3.Readable.from(convertedData);
      }
      return settle(resolve, reject, {
        data: convertedData,
        status: 200,
        statusText: "OK",
        headers: new AxiosHeaders_default,
        config
      });
    }
    if (supportedProtocols.indexOf(protocol) === -1) {
      return reject(new AxiosError_default("Unsupported protocol " + protocol, AxiosError_default.ERR_BAD_REQUEST, config));
    }
    const headers = AxiosHeaders_default.from(config.headers).normalize();
    headers.set("User-Agent", "axios/" + VERSION, false);
    const { onUploadProgress, onDownloadProgress } = config;
    const maxRate = config.maxRate;
    let maxUploadRate = undefined;
    let maxDownloadRate = undefined;
    if (utils_default.isSpecCompliantForm(data)) {
      const userBoundary = headers.getContentType(/boundary=([-_\w\d]{10,70})/i);
      data = formDataToStream_default(data, (formHeaders) => {
        headers.set(formHeaders);
      }, {
        tag: `axios-${VERSION}-boundary`,
        boundary: userBoundary && userBoundary[1] || undefined
      });
    } else if (utils_default.isFormData(data) && utils_default.isFunction(data.getHeaders)) {
      headers.set(data.getHeaders());
      if (!headers.hasContentLength()) {
        try {
          const knownLength = await util4.promisify(data.getLength).call(data);
          Number.isFinite(knownLength) && knownLength >= 0 && headers.setContentLength(knownLength);
        } catch (e) {}
      }
    } else if (utils_default.isBlob(data) || utils_default.isFile(data)) {
      data.size && headers.setContentType(data.type || "application/octet-stream");
      headers.setContentLength(data.size || 0);
      data = stream3.Readable.from(readBlob_default(data));
    } else if (data && !utils_default.isStream(data)) {
      if (Buffer.isBuffer(data)) {} else if (utils_default.isArrayBuffer(data)) {
        data = Buffer.from(new Uint8Array(data));
      } else if (utils_default.isString(data)) {
        data = Buffer.from(data, "utf-8");
      } else {
        return reject(new AxiosError_default("Data after transformation must be a string, an ArrayBuffer, a Buffer, or a Stream", AxiosError_default.ERR_BAD_REQUEST, config));
      }
      headers.setContentLength(data.length, false);
      if (config.maxBodyLength > -1 && data.length > config.maxBodyLength) {
        return reject(new AxiosError_default("Request body larger than maxBodyLength limit", AxiosError_default.ERR_BAD_REQUEST, config));
      }
    }
    const contentLength = utils_default.toFiniteNumber(headers.getContentLength());
    if (utils_default.isArray(maxRate)) {
      maxUploadRate = maxRate[0];
      maxDownloadRate = maxRate[1];
    } else {
      maxUploadRate = maxDownloadRate = maxRate;
    }
    if (data && (onUploadProgress || maxUploadRate)) {
      if (!utils_default.isStream(data)) {
        data = stream3.Readable.from(data, { objectMode: false });
      }
      data = stream3.pipeline([data, new AxiosTransformStream_default({
        maxRate: utils_default.toFiniteNumber(maxUploadRate)
      })], utils_default.noop);
      onUploadProgress && data.on("progress", flushOnFinish(data, progressEventDecorator(contentLength, progressEventReducer(asyncDecorator(onUploadProgress), false, 3))));
    }
    let auth = undefined;
    if (config.auth) {
      const username = config.auth.username || "";
      const password = config.auth.password || "";
      auth = username + ":" + password;
    }
    if (!auth && parsed.username) {
      const urlUsername = parsed.username;
      const urlPassword = parsed.password;
      auth = urlUsername + ":" + urlPassword;
    }
    auth && headers.delete("authorization");
    let path;
    try {
      path = buildURL(parsed.pathname + parsed.search, config.params, config.paramsSerializer).replace(/^\?/, "");
    } catch (err) {
      const customErr = new Error(err.message);
      customErr.config = config;
      customErr.url = config.url;
      customErr.exists = true;
      return reject(customErr);
    }
    headers.set("Accept-Encoding", "gzip, compress, deflate" + (isBrotliSupported ? ", br" : ""), false);
    const options = {
      path,
      method,
      headers: headers.toJSON(),
      agents: { http: config.httpAgent, https: config.httpsAgent },
      auth,
      protocol,
      family,
      beforeRedirect: dispatchBeforeRedirect,
      beforeRedirects: {}
    };
    !utils_default.isUndefined(lookup) && (options.lookup = lookup);
    if (config.socketPath) {
      options.socketPath = config.socketPath;
    } else {
      options.hostname = parsed.hostname.startsWith("[") ? parsed.hostname.slice(1, -1) : parsed.hostname;
      options.port = parsed.port;
      setProxy(options, config.proxy, protocol + "//" + parsed.hostname + (parsed.port ? ":" + parsed.port : "") + options.path);
    }
    let transport;
    const isHttpsRequest = isHttps.test(options.protocol);
    options.agent = isHttpsRequest ? config.httpsAgent : config.httpAgent;
    if (config.transport) {
      transport = config.transport;
    } else if (config.maxRedirects === 0) {
      transport = isHttpsRequest ? https : http;
    } else {
      if (config.maxRedirects) {
        options.maxRedirects = config.maxRedirects;
      }
      if (config.beforeRedirect) {
        options.beforeRedirects.config = config.beforeRedirect;
      }
      transport = isHttpsRequest ? httpsFollow : httpFollow;
    }
    if (config.maxBodyLength > -1) {
      options.maxBodyLength = config.maxBodyLength;
    } else {
      options.maxBodyLength = Infinity;
    }
    if (config.insecureHTTPParser) {
      options.insecureHTTPParser = config.insecureHTTPParser;
    }
    req = transport.request(options, function handleResponse(res) {
      if (req.destroyed)
        return;
      const streams = [res];
      const responseLength = +res.headers["content-length"];
      if (onDownloadProgress || maxDownloadRate) {
        const transformStream = new AxiosTransformStream_default({
          maxRate: utils_default.toFiniteNumber(maxDownloadRate)
        });
        onDownloadProgress && transformStream.on("progress", flushOnFinish(transformStream, progressEventDecorator(responseLength, progressEventReducer(asyncDecorator(onDownloadProgress), true, 3))));
        streams.push(transformStream);
      }
      let responseStream = res;
      const lastRequest = res.req || req;
      if (config.decompress !== false && res.headers["content-encoding"]) {
        if (method === "HEAD" || res.statusCode === 204) {
          delete res.headers["content-encoding"];
        }
        switch ((res.headers["content-encoding"] || "").toLowerCase()) {
          case "gzip":
          case "x-gzip":
          case "compress":
          case "x-compress":
            streams.push(zlib.createUnzip(zlibOptions));
            delete res.headers["content-encoding"];
            break;
          case "deflate":
            streams.push(new ZlibHeaderTransformStream_default);
            streams.push(zlib.createUnzip(zlibOptions));
            delete res.headers["content-encoding"];
            break;
          case "br":
            if (isBrotliSupported) {
              streams.push(zlib.createBrotliDecompress(brotliOptions));
              delete res.headers["content-encoding"];
            }
        }
      }
      responseStream = streams.length > 1 ? stream3.pipeline(streams, utils_default.noop) : streams[0];
      const offListeners = stream3.finished(responseStream, () => {
        offListeners();
        onFinished();
      });
      const response = {
        status: res.statusCode,
        statusText: res.statusMessage,
        headers: new AxiosHeaders_default(res.headers),
        config,
        request: lastRequest
      };
      if (responseType === "stream") {
        response.data = responseStream;
        settle(resolve, reject, response);
      } else {
        const responseBuffer = [];
        let totalResponseBytes = 0;
        responseStream.on("data", function handleStreamData(chunk) {
          responseBuffer.push(chunk);
          totalResponseBytes += chunk.length;
          if (config.maxContentLength > -1 && totalResponseBytes > config.maxContentLength) {
            rejected = true;
            responseStream.destroy();
            reject(new AxiosError_default("maxContentLength size of " + config.maxContentLength + " exceeded", AxiosError_default.ERR_BAD_RESPONSE, config, lastRequest));
          }
        });
        responseStream.on("aborted", function handlerStreamAborted() {
          if (rejected) {
            return;
          }
          const err = new AxiosError_default("stream has been aborted", AxiosError_default.ERR_BAD_RESPONSE, config, lastRequest);
          responseStream.destroy(err);
          reject(err);
        });
        responseStream.on("error", function handleStreamError(err) {
          if (req.destroyed)
            return;
          reject(AxiosError_default.from(err, null, config, lastRequest));
        });
        responseStream.on("end", function handleStreamEnd() {
          try {
            let responseData = responseBuffer.length === 1 ? responseBuffer[0] : Buffer.concat(responseBuffer);
            if (responseType !== "arraybuffer") {
              responseData = responseData.toString(responseEncoding);
              if (!responseEncoding || responseEncoding === "utf8") {
                responseData = utils_default.stripBOM(responseData);
              }
            }
            response.data = responseData;
          } catch (err) {
            return reject(AxiosError_default.from(err, null, config, response.request, response));
          }
          settle(resolve, reject, response);
        });
      }
      emitter.once("abort", (err) => {
        if (!responseStream.destroyed) {
          responseStream.emit("error", err);
          responseStream.destroy();
        }
      });
    });
    emitter.once("abort", (err) => {
      reject(err);
      req.destroy(err);
    });
    req.on("error", function handleRequestError(err) {
      reject(AxiosError_default.from(err, null, config, req));
    });
    req.on("socket", function handleRequestSocket(socket) {
      socket.setKeepAlive(true, 1000 * 60);
    });
    if (config.timeout) {
      const timeout = parseInt(config.timeout, 10);
      if (Number.isNaN(timeout)) {
        reject(new AxiosError_default("error trying to parse `config.timeout` to int", AxiosError_default.ERR_BAD_OPTION_VALUE, config, req));
        return;
      }
      req.setTimeout(timeout, function handleRequestTimeout() {
        if (isDone)
          return;
        let timeoutErrorMessage = config.timeout ? "timeout of " + config.timeout + "ms exceeded" : "timeout exceeded";
        const transitional = config.transitional || transitional_default;
        if (config.timeoutErrorMessage) {
          timeoutErrorMessage = config.timeoutErrorMessage;
        }
        reject(new AxiosError_default(timeoutErrorMessage, transitional.clarifyTimeoutError ? AxiosError_default.ETIMEDOUT : AxiosError_default.ECONNABORTED, config, req));
        abort();
      });
    }
    if (utils_default.isStream(data)) {
      let ended = false;
      let errored = false;
      data.on("end", () => {
        ended = true;
      });
      data.once("error", (err) => {
        errored = true;
        req.destroy(err);
      });
      data.on("close", () => {
        if (!ended && !errored) {
          abort(new CanceledError_default("Request stream has been aborted", config, req));
        }
      });
      data.pipe(req);
    } else {
      req.end(data);
    }
  });
};

// node_modules/axios/lib/helpers/isURLSameOrigin.js
var isURLSameOrigin_default = platform_default.hasStandardBrowserEnv ? ((origin2, isMSIE) => (url2) => {
  url2 = new URL(url2, platform_default.origin);
  return origin2.protocol === url2.protocol && origin2.host === url2.host && (isMSIE || origin2.port === url2.port);
})(new URL(platform_default.origin), platform_default.navigator && /(msie|trident)/i.test(platform_default.navigator.userAgent)) : () => true;

// node_modules/axios/lib/helpers/cookies.js
var cookies_default = platform_default.hasStandardBrowserEnv ? {
  write(name17, value, expires, path, domain, secure) {
    const cookie = [name17 + "=" + encodeURIComponent(value)];
    utils_default.isNumber(expires) && cookie.push("expires=" + new Date(expires).toGMTString());
    utils_default.isString(path) && cookie.push("path=" + path);
    utils_default.isString(domain) && cookie.push("domain=" + domain);
    secure === true && cookie.push("secure");
    document.cookie = cookie.join("; ");
  },
  read(name17) {
    const match = document.cookie.match(new RegExp("(^|;\\s*)(" + name17 + ")=([^;]*)"));
    return match ? decodeURIComponent(match[3]) : null;
  },
  remove(name17) {
    this.write(name17, "", Date.now() - 86400000);
  }
} : {
  write() {},
  read() {
    return null;
  },
  remove() {}
};

// node_modules/axios/lib/core/mergeConfig.js
var headersToObject = (thing) => thing instanceof AxiosHeaders_default ? { ...thing } : thing;
function mergeConfig(config1, config2) {
  config2 = config2 || {};
  const config = {};
  function getMergedValue(target, source, prop, caseless) {
    if (utils_default.isPlainObject(target) && utils_default.isPlainObject(source)) {
      return utils_default.merge.call({ caseless }, target, source);
    } else if (utils_default.isPlainObject(source)) {
      return utils_default.merge({}, source);
    } else if (utils_default.isArray(source)) {
      return source.slice();
    }
    return source;
  }
  function mergeDeepProperties(a, b, prop, caseless) {
    if (!utils_default.isUndefined(b)) {
      return getMergedValue(a, b, prop, caseless);
    } else if (!utils_default.isUndefined(a)) {
      return getMergedValue(undefined, a, prop, caseless);
    }
  }
  function valueFromConfig2(a, b) {
    if (!utils_default.isUndefined(b)) {
      return getMergedValue(undefined, b);
    }
  }
  function defaultToConfig2(a, b) {
    if (!utils_default.isUndefined(b)) {
      return getMergedValue(undefined, b);
    } else if (!utils_default.isUndefined(a)) {
      return getMergedValue(undefined, a);
    }
  }
  function mergeDirectKeys(a, b, prop) {
    if (prop in config2) {
      return getMergedValue(a, b);
    } else if (prop in config1) {
      return getMergedValue(undefined, a);
    }
  }
  const mergeMap = {
    url: valueFromConfig2,
    method: valueFromConfig2,
    data: valueFromConfig2,
    baseURL: defaultToConfig2,
    transformRequest: defaultToConfig2,
    transformResponse: defaultToConfig2,
    paramsSerializer: defaultToConfig2,
    timeout: defaultToConfig2,
    timeoutMessage: defaultToConfig2,
    withCredentials: defaultToConfig2,
    withXSRFToken: defaultToConfig2,
    adapter: defaultToConfig2,
    responseType: defaultToConfig2,
    xsrfCookieName: defaultToConfig2,
    xsrfHeaderName: defaultToConfig2,
    onUploadProgress: defaultToConfig2,
    onDownloadProgress: defaultToConfig2,
    decompress: defaultToConfig2,
    maxContentLength: defaultToConfig2,
    maxBodyLength: defaultToConfig2,
    beforeRedirect: defaultToConfig2,
    transport: defaultToConfig2,
    httpAgent: defaultToConfig2,
    httpsAgent: defaultToConfig2,
    cancelToken: defaultToConfig2,
    socketPath: defaultToConfig2,
    responseEncoding: defaultToConfig2,
    validateStatus: mergeDirectKeys,
    headers: (a, b, prop) => mergeDeepProperties(headersToObject(a), headersToObject(b), prop, true)
  };
  utils_default.forEach(Object.keys(Object.assign({}, config1, config2)), function computeConfigValue(prop) {
    const merge2 = mergeMap[prop] || mergeDeepProperties;
    const configValue = merge2(config1[prop], config2[prop], prop);
    utils_default.isUndefined(configValue) && merge2 !== mergeDirectKeys || (config[prop] = configValue);
  });
  return config;
}

// node_modules/axios/lib/helpers/resolveConfig.js
var resolveConfig_default = (config) => {
  const newConfig = mergeConfig({}, config);
  let { data, withXSRFToken, xsrfHeaderName, xsrfCookieName, headers, auth } = newConfig;
  newConfig.headers = headers = AxiosHeaders_default.from(headers);
  newConfig.url = buildURL(buildFullPath(newConfig.baseURL, newConfig.url, newConfig.allowAbsoluteUrls), config.params, config.paramsSerializer);
  if (auth) {
    headers.set("Authorization", "Basic " + btoa((auth.username || "") + ":" + (auth.password ? unescape(encodeURIComponent(auth.password)) : "")));
  }
  let contentType;
  if (utils_default.isFormData(data)) {
    if (platform_default.hasStandardBrowserEnv || platform_default.hasStandardBrowserWebWorkerEnv) {
      headers.setContentType(undefined);
    } else if ((contentType = headers.getContentType()) !== false) {
      const [type, ...tokens] = contentType ? contentType.split(";").map((token) => token.trim()).filter(Boolean) : [];
      headers.setContentType([type || "multipart/form-data", ...tokens].join("; "));
    }
  }
  if (platform_default.hasStandardBrowserEnv) {
    withXSRFToken && utils_default.isFunction(withXSRFToken) && (withXSRFToken = withXSRFToken(newConfig));
    if (withXSRFToken || withXSRFToken !== false && isURLSameOrigin_default(newConfig.url)) {
      const xsrfValue = xsrfHeaderName && xsrfCookieName && cookies_default.read(xsrfCookieName);
      if (xsrfValue) {
        headers.set(xsrfHeaderName, xsrfValue);
      }
    }
  }
  return newConfig;
};

// node_modules/axios/lib/adapters/xhr.js
var isXHRAdapterSupported = typeof XMLHttpRequest !== "undefined";
var xhr_default = isXHRAdapterSupported && function(config) {
  return new Promise(function dispatchXhrRequest(resolve, reject) {
    const _config = resolveConfig_default(config);
    let requestData = _config.data;
    const requestHeaders = AxiosHeaders_default.from(_config.headers).normalize();
    let { responseType, onUploadProgress, onDownloadProgress } = _config;
    let onCanceled;
    let uploadThrottled, downloadThrottled;
    let flushUpload, flushDownload;
    function done() {
      flushUpload && flushUpload();
      flushDownload && flushDownload();
      _config.cancelToken && _config.cancelToken.unsubscribe(onCanceled);
      _config.signal && _config.signal.removeEventListener("abort", onCanceled);
    }
    let request = new XMLHttpRequest;
    request.open(_config.method.toUpperCase(), _config.url, true);
    request.timeout = _config.timeout;
    function onloadend() {
      if (!request) {
        return;
      }
      const responseHeaders = AxiosHeaders_default.from("getAllResponseHeaders" in request && request.getAllResponseHeaders());
      const responseData = !responseType || responseType === "text" || responseType === "json" ? request.responseText : request.response;
      const response = {
        data: responseData,
        status: request.status,
        statusText: request.statusText,
        headers: responseHeaders,
        config,
        request
      };
      settle(function _resolve(value) {
        resolve(value);
        done();
      }, function _reject(err) {
        reject(err);
        done();
      }, response);
      request = null;
    }
    if ("onloadend" in request) {
      request.onloadend = onloadend;
    } else {
      request.onreadystatechange = function handleLoad() {
        if (!request || request.readyState !== 4) {
          return;
        }
        if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf("file:") === 0)) {
          return;
        }
        setTimeout(onloadend);
      };
    }
    request.onabort = function handleAbort() {
      if (!request) {
        return;
      }
      reject(new AxiosError_default("Request aborted", AxiosError_default.ECONNABORTED, config, request));
      request = null;
    };
    request.onerror = function handleError() {
      reject(new AxiosError_default("Network Error", AxiosError_default.ERR_NETWORK, config, request));
      request = null;
    };
    request.ontimeout = function handleTimeout() {
      let timeoutErrorMessage = _config.timeout ? "timeout of " + _config.timeout + "ms exceeded" : "timeout exceeded";
      const transitional = _config.transitional || transitional_default;
      if (_config.timeoutErrorMessage) {
        timeoutErrorMessage = _config.timeoutErrorMessage;
      }
      reject(new AxiosError_default(timeoutErrorMessage, transitional.clarifyTimeoutError ? AxiosError_default.ETIMEDOUT : AxiosError_default.ECONNABORTED, config, request));
      request = null;
    };
    requestData === undefined && requestHeaders.setContentType(null);
    if ("setRequestHeader" in request) {
      utils_default.forEach(requestHeaders.toJSON(), function setRequestHeader(val, key) {
        request.setRequestHeader(key, val);
      });
    }
    if (!utils_default.isUndefined(_config.withCredentials)) {
      request.withCredentials = !!_config.withCredentials;
    }
    if (responseType && responseType !== "json") {
      request.responseType = _config.responseType;
    }
    if (onDownloadProgress) {
      [downloadThrottled, flushDownload] = progressEventReducer(onDownloadProgress, true);
      request.addEventListener("progress", downloadThrottled);
    }
    if (onUploadProgress && request.upload) {
      [uploadThrottled, flushUpload] = progressEventReducer(onUploadProgress);
      request.upload.addEventListener("progress", uploadThrottled);
      request.upload.addEventListener("loadend", flushUpload);
    }
    if (_config.cancelToken || _config.signal) {
      onCanceled = (cancel) => {
        if (!request) {
          return;
        }
        reject(!cancel || cancel.type ? new CanceledError_default(null, config, request) : cancel);
        request.abort();
        request = null;
      };
      _config.cancelToken && _config.cancelToken.subscribe(onCanceled);
      if (_config.signal) {
        _config.signal.aborted ? onCanceled() : _config.signal.addEventListener("abort", onCanceled);
      }
    }
    const protocol = parseProtocol(_config.url);
    if (protocol && platform_default.protocols.indexOf(protocol) === -1) {
      reject(new AxiosError_default("Unsupported protocol " + protocol + ":", AxiosError_default.ERR_BAD_REQUEST, config));
      return;
    }
    request.send(requestData || null);
  });
};

// node_modules/axios/lib/helpers/composeSignals.js
var composeSignals = (signals, timeout) => {
  const { length } = signals = signals ? signals.filter(Boolean) : [];
  if (timeout || length) {
    let controller = new AbortController;
    let aborted;
    const onabort = function(reason) {
      if (!aborted) {
        aborted = true;
        unsubscribe();
        const err = reason instanceof Error ? reason : this.reason;
        controller.abort(err instanceof AxiosError_default ? err : new CanceledError_default(err instanceof Error ? err.message : err));
      }
    };
    let timer = timeout && setTimeout(() => {
      timer = null;
      onabort(new AxiosError_default(`timeout ${timeout} of ms exceeded`, AxiosError_default.ETIMEDOUT));
    }, timeout);
    const unsubscribe = () => {
      if (signals) {
        timer && clearTimeout(timer);
        timer = null;
        signals.forEach((signal2) => {
          signal2.unsubscribe ? signal2.unsubscribe(onabort) : signal2.removeEventListener("abort", onabort);
        });
        signals = null;
      }
    };
    signals.forEach((signal2) => signal2.addEventListener("abort", onabort));
    const { signal } = controller;
    signal.unsubscribe = () => utils_default.asap(unsubscribe);
    return signal;
  }
};
var composeSignals_default = composeSignals;

// node_modules/axios/lib/helpers/trackStream.js
var streamChunk = function* (chunk, chunkSize) {
  let len = chunk.byteLength;
  if (!chunkSize || len < chunkSize) {
    yield chunk;
    return;
  }
  let pos = 0;
  let end;
  while (pos < len) {
    end = pos + chunkSize;
    yield chunk.slice(pos, end);
    pos = end;
  }
};
var readBytes = async function* (iterable, chunkSize) {
  for await (const chunk of readStream(iterable)) {
    yield* streamChunk(chunk, chunkSize);
  }
};
var readStream = async function* (stream4) {
  if (stream4[Symbol.asyncIterator]) {
    yield* stream4;
    return;
  }
  const reader = stream4.getReader();
  try {
    for (;; ) {
      const { done, value } = await reader.read();
      if (done) {
        break;
      }
      yield value;
    }
  } finally {
    await reader.cancel();
  }
};
var trackStream = (stream4, chunkSize, onProgress, onFinish) => {
  const iterator2 = readBytes(stream4, chunkSize);
  let bytes = 0;
  let done;
  let _onFinish = (e) => {
    if (!done) {
      done = true;
      onFinish && onFinish(e);
    }
  };
  return new ReadableStream({
    async pull(controller) {
      try {
        const { done: done2, value } = await iterator2.next();
        if (done2) {
          _onFinish();
          controller.close();
          return;
        }
        let len = value.byteLength;
        if (onProgress) {
          let loadedBytes = bytes += len;
          onProgress(loadedBytes);
        }
        controller.enqueue(new Uint8Array(value));
      } catch (err) {
        _onFinish(err);
        throw err;
      }
    },
    cancel(reason) {
      _onFinish(reason);
      return iterator2.return();
    }
  }, {
    highWaterMark: 2
  });
};

// node_modules/axios/lib/adapters/fetch.js
var isFetchSupported = typeof fetch === "function" && typeof Request === "function" && typeof Response === "function";
var isReadableStreamSupported = isFetchSupported && typeof ReadableStream === "function";
var encodeText = isFetchSupported && (typeof TextEncoder === "function" ? ((encoder) => (str) => encoder.encode(str))(new TextEncoder) : async (str) => new Uint8Array(await new Response(str).arrayBuffer()));
var test = (fn, ...args) => {
  try {
    return !!fn(...args);
  } catch (e) {
    return false;
  }
};
var supportsRequestStream = isReadableStreamSupported && test(() => {
  let duplexAccessed = false;
  const hasContentType = new Request(platform_default.origin, {
    body: new ReadableStream,
    method: "POST",
    get duplex() {
      duplexAccessed = true;
      return "half";
    }
  }).headers.has("Content-Type");
  return duplexAccessed && !hasContentType;
});
var DEFAULT_CHUNK_SIZE = 64 * 1024;
var supportsResponseStream = isReadableStreamSupported && test(() => utils_default.isReadableStream(new Response("").body));
var resolvers = {
  stream: supportsResponseStream && ((res) => res.body)
};
isFetchSupported && ((res) => {
  ["text", "arrayBuffer", "blob", "formData", "stream"].forEach((type) => {
    !resolvers[type] && (resolvers[type] = utils_default.isFunction(res[type]) ? (res2) => res2[type]() : (_, config) => {
      throw new AxiosError_default(`Response type '${type}' is not supported`, AxiosError_default.ERR_NOT_SUPPORT, config);
    });
  });
})(new Response);
var getBodyLength = async (body) => {
  if (body == null) {
    return 0;
  }
  if (utils_default.isBlob(body)) {
    return body.size;
  }
  if (utils_default.isSpecCompliantForm(body)) {
    const _request = new Request(platform_default.origin, {
      method: "POST",
      body
    });
    return (await _request.arrayBuffer()).byteLength;
  }
  if (utils_default.isArrayBufferView(body) || utils_default.isArrayBuffer(body)) {
    return body.byteLength;
  }
  if (utils_default.isURLSearchParams(body)) {
    body = body + "";
  }
  if (utils_default.isString(body)) {
    return (await encodeText(body)).byteLength;
  }
};
var resolveBodyLength = async (headers, body) => {
  const length = utils_default.toFiniteNumber(headers.getContentLength());
  return length == null ? getBodyLength(body) : length;
};
var fetch_default = isFetchSupported && (async (config) => {
  let {
    url: url2,
    method,
    data,
    signal,
    cancelToken,
    timeout,
    onDownloadProgress,
    onUploadProgress,
    responseType,
    headers,
    withCredentials = "same-origin",
    fetchOptions
  } = resolveConfig_default(config);
  responseType = responseType ? (responseType + "").toLowerCase() : "text";
  let composedSignal = composeSignals_default([signal, cancelToken && cancelToken.toAbortSignal()], timeout);
  let request;
  const unsubscribe = composedSignal && composedSignal.unsubscribe && (() => {
    composedSignal.unsubscribe();
  });
  let requestContentLength;
  try {
    if (onUploadProgress && supportsRequestStream && method !== "get" && method !== "head" && (requestContentLength = await resolveBodyLength(headers, data)) !== 0) {
      let _request = new Request(url2, {
        method: "POST",
        body: data,
        duplex: "half"
      });
      let contentTypeHeader;
      if (utils_default.isFormData(data) && (contentTypeHeader = _request.headers.get("content-type"))) {
        headers.setContentType(contentTypeHeader);
      }
      if (_request.body) {
        const [onProgress, flush] = progressEventDecorator(requestContentLength, progressEventReducer(asyncDecorator(onUploadProgress)));
        data = trackStream(_request.body, DEFAULT_CHUNK_SIZE, onProgress, flush);
      }
    }
    if (!utils_default.isString(withCredentials)) {
      withCredentials = withCredentials ? "include" : "omit";
    }
    const isCredentialsSupported = "credentials" in Request.prototype;
    request = new Request(url2, {
      ...fetchOptions,
      signal: composedSignal,
      method: method.toUpperCase(),
      headers: headers.normalize().toJSON(),
      body: data,
      duplex: "half",
      credentials: isCredentialsSupported ? withCredentials : undefined
    });
    let response = await fetch(request, fetchOptions);
    const isStreamResponse = supportsResponseStream && (responseType === "stream" || responseType === "response");
    if (supportsResponseStream && (onDownloadProgress || isStreamResponse && unsubscribe)) {
      const options = {};
      ["status", "statusText", "headers"].forEach((prop) => {
        options[prop] = response[prop];
      });
      const responseContentLength = utils_default.toFiniteNumber(response.headers.get("content-length"));
      const [onProgress, flush] = onDownloadProgress && progressEventDecorator(responseContentLength, progressEventReducer(asyncDecorator(onDownloadProgress), true)) || [];
      response = new Response(trackStream(response.body, DEFAULT_CHUNK_SIZE, onProgress, () => {
        flush && flush();
        unsubscribe && unsubscribe();
      }), options);
    }
    responseType = responseType || "text";
    let responseData = await resolvers[utils_default.findKey(resolvers, responseType) || "text"](response, config);
    !isStreamResponse && unsubscribe && unsubscribe();
    return await new Promise((resolve, reject) => {
      settle(resolve, reject, {
        data: responseData,
        headers: AxiosHeaders_default.from(response.headers),
        status: response.status,
        statusText: response.statusText,
        config,
        request
      });
    });
  } catch (err) {
    unsubscribe && unsubscribe();
    if (err && err.name === "TypeError" && /Load failed|fetch/i.test(err.message)) {
      throw Object.assign(new AxiosError_default("Network Error", AxiosError_default.ERR_NETWORK, config, request), {
        cause: err.cause || err
      });
    }
    throw AxiosError_default.from(err, err && err.code, config, request);
  }
});

// node_modules/axios/lib/adapters/adapters.js
var knownAdapters = {
  http: http_default,
  xhr: xhr_default,
  fetch: fetch_default
};
utils_default.forEach(knownAdapters, (fn, value) => {
  if (fn) {
    try {
      Object.defineProperty(fn, "name", { value });
    } catch (e) {}
    Object.defineProperty(fn, "adapterName", { value });
  }
});
var renderReason = (reason) => `- ${reason}`;
var isResolvedHandle = (adapter) => utils_default.isFunction(adapter) || adapter === null || adapter === false;
var adapters_default = {
  getAdapter: (adapters) => {
    adapters = utils_default.isArray(adapters) ? adapters : [adapters];
    const { length } = adapters;
    let nameOrAdapter;
    let adapter;
    const rejectedReasons = {};
    for (let i = 0;i < length; i++) {
      nameOrAdapter = adapters[i];
      let id;
      adapter = nameOrAdapter;
      if (!isResolvedHandle(nameOrAdapter)) {
        adapter = knownAdapters[(id = String(nameOrAdapter)).toLowerCase()];
        if (adapter === undefined) {
          throw new AxiosError_default(`Unknown adapter '${id}'`);
        }
      }
      if (adapter) {
        break;
      }
      rejectedReasons[id || "#" + i] = adapter;
    }
    if (!adapter) {
      const reasons = Object.entries(rejectedReasons).map(([id, state]) => `adapter ${id} ` + (state === false ? "is not supported by the environment" : "is not available in the build"));
      let s = length ? reasons.length > 1 ? `since :
` + reasons.map(renderReason).join(`
`) : " " + renderReason(reasons[0]) : "as no adapter specified";
      throw new AxiosError_default(`There is no suitable adapter to dispatch the request ` + s, "ERR_NOT_SUPPORT");
    }
    return adapter;
  },
  adapters: knownAdapters
};

// node_modules/axios/lib/core/dispatchRequest.js
function throwIfCancellationRequested(config) {
  if (config.cancelToken) {
    config.cancelToken.throwIfRequested();
  }
  if (config.signal && config.signal.aborted) {
    throw new CanceledError_default(null, config);
  }
}
function dispatchRequest(config) {
  throwIfCancellationRequested(config);
  config.headers = AxiosHeaders_default.from(config.headers);
  config.data = transformData.call(config, config.transformRequest);
  if (["post", "put", "patch"].indexOf(config.method) !== -1) {
    config.headers.setContentType("application/x-www-form-urlencoded", false);
  }
  const adapter = adapters_default.getAdapter(config.adapter || defaults_default.adapter);
  return adapter(config).then(function onAdapterResolution(response) {
    throwIfCancellationRequested(config);
    response.data = transformData.call(config, config.transformResponse, response);
    response.headers = AxiosHeaders_default.from(response.headers);
    return response;
  }, function onAdapterRejection(reason) {
    if (!isCancel(reason)) {
      throwIfCancellationRequested(config);
      if (reason && reason.response) {
        reason.response.data = transformData.call(config, config.transformResponse, reason.response);
        reason.response.headers = AxiosHeaders_default.from(reason.response.headers);
      }
    }
    return Promise.reject(reason);
  });
}

// node_modules/axios/lib/helpers/validator.js
var validators = {};
["object", "boolean", "number", "function", "string", "symbol"].forEach((type, i) => {
  validators[type] = function validator(thing) {
    return typeof thing === type || "a" + (i < 1 ? "n " : " ") + type;
  };
});
var deprecatedWarnings = {};
validators.transitional = function transitional(validator2, version, message) {
  function formatMessage(opt, desc) {
    return "[Axios v" + VERSION + "] Transitional option '" + opt + "'" + desc + (message ? ". " + message : "");
  }
  return (value, opt, opts) => {
    if (validator2 === false) {
      throw new AxiosError_default(formatMessage(opt, " has been removed" + (version ? " in " + version : "")), AxiosError_default.ERR_DEPRECATED);
    }
    if (version && !deprecatedWarnings[opt]) {
      deprecatedWarnings[opt] = true;
      console.warn(formatMessage(opt, " has been deprecated since v" + version + " and will be removed in the near future"));
    }
    return validator2 ? validator2(value, opt, opts) : true;
  };
};
validators.spelling = function spelling(correctSpelling) {
  return (value, opt) => {
    console.warn(`${opt} is likely a misspelling of ${correctSpelling}`);
    return true;
  };
};
function assertOptions(options, schema, allowUnknown) {
  if (typeof options !== "object") {
    throw new AxiosError_default("options must be an object", AxiosError_default.ERR_BAD_OPTION_VALUE);
  }
  const keys = Object.keys(options);
  let i = keys.length;
  while (i-- > 0) {
    const opt = keys[i];
    const validator2 = schema[opt];
    if (validator2) {
      const value = options[opt];
      const result = value === undefined || validator2(value, opt, options);
      if (result !== true) {
        throw new AxiosError_default("option " + opt + " must be " + result, AxiosError_default.ERR_BAD_OPTION_VALUE);
      }
      continue;
    }
    if (allowUnknown !== true) {
      throw new AxiosError_default("Unknown option " + opt, AxiosError_default.ERR_BAD_OPTION);
    }
  }
}
var validator_default = {
  assertOptions,
  validators
};

// node_modules/axios/lib/core/Axios.js
var validators2 = validator_default.validators;

class Axios {
  constructor(instanceConfig) {
    this.defaults = instanceConfig || {};
    this.interceptors = {
      request: new InterceptorManager_default,
      response: new InterceptorManager_default
    };
  }
  async request(configOrUrl, config) {
    try {
      return await this._request(configOrUrl, config);
    } catch (err) {
      if (err instanceof Error) {
        let dummy = {};
        Error.captureStackTrace ? Error.captureStackTrace(dummy) : dummy = new Error;
        const stack = dummy.stack ? dummy.stack.replace(/^.+\n/, "") : "";
        try {
          if (!err.stack) {
            err.stack = stack;
          } else if (stack && !String(err.stack).endsWith(stack.replace(/^.+\n.+\n/, ""))) {
            err.stack += `
` + stack;
          }
        } catch (e) {}
      }
      throw err;
    }
  }
  _request(configOrUrl, config) {
    if (typeof configOrUrl === "string") {
      config = config || {};
      config.url = configOrUrl;
    } else {
      config = configOrUrl || {};
    }
    config = mergeConfig(this.defaults, config);
    const { transitional: transitional2, paramsSerializer, headers } = config;
    if (transitional2 !== undefined) {
      validator_default.assertOptions(transitional2, {
        silentJSONParsing: validators2.transitional(validators2.boolean),
        forcedJSONParsing: validators2.transitional(validators2.boolean),
        clarifyTimeoutError: validators2.transitional(validators2.boolean)
      }, false);
    }
    if (paramsSerializer != null) {
      if (utils_default.isFunction(paramsSerializer)) {
        config.paramsSerializer = {
          serialize: paramsSerializer
        };
      } else {
        validator_default.assertOptions(paramsSerializer, {
          encode: validators2.function,
          serialize: validators2.function
        }, true);
      }
    }
    if (config.allowAbsoluteUrls !== undefined) {} else if (this.defaults.allowAbsoluteUrls !== undefined) {
      config.allowAbsoluteUrls = this.defaults.allowAbsoluteUrls;
    } else {
      config.allowAbsoluteUrls = true;
    }
    validator_default.assertOptions(config, {
      baseUrl: validators2.spelling("baseURL"),
      withXsrfToken: validators2.spelling("withXSRFToken")
    }, true);
    config.method = (config.method || this.defaults.method || "get").toLowerCase();
    let contextHeaders = headers && utils_default.merge(headers.common, headers[config.method]);
    headers && utils_default.forEach(["delete", "get", "head", "post", "put", "patch", "common"], (method) => {
      delete headers[method];
    });
    config.headers = AxiosHeaders_default.concat(contextHeaders, headers);
    const requestInterceptorChain = [];
    let synchronousRequestInterceptors = true;
    this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
      if (typeof interceptor.runWhen === "function" && interceptor.runWhen(config) === false) {
        return;
      }
      synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;
      requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
    });
    const responseInterceptorChain = [];
    this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
      responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
    });
    let promise2;
    let i = 0;
    let len;
    if (!synchronousRequestInterceptors) {
      const chain = [dispatchRequest.bind(this), undefined];
      chain.unshift.apply(chain, requestInterceptorChain);
      chain.push.apply(chain, responseInterceptorChain);
      len = chain.length;
      promise2 = Promise.resolve(config);
      while (i < len) {
        promise2 = promise2.then(chain[i++], chain[i++]);
      }
      return promise2;
    }
    len = requestInterceptorChain.length;
    let newConfig = config;
    i = 0;
    while (i < len) {
      const onFulfilled = requestInterceptorChain[i++];
      const onRejected = requestInterceptorChain[i++];
      try {
        newConfig = onFulfilled(newConfig);
      } catch (error) {
        onRejected.call(this, error);
        break;
      }
    }
    try {
      promise2 = dispatchRequest.call(this, newConfig);
    } catch (error) {
      return Promise.reject(error);
    }
    i = 0;
    len = responseInterceptorChain.length;
    while (i < len) {
      promise2 = promise2.then(responseInterceptorChain[i++], responseInterceptorChain[i++]);
    }
    return promise2;
  }
  getUri(config) {
    config = mergeConfig(this.defaults, config);
    const fullPath = buildFullPath(config.baseURL, config.url, config.allowAbsoluteUrls);
    return buildURL(fullPath, config.params, config.paramsSerializer);
  }
}
utils_default.forEach(["delete", "get", "head", "options"], function forEachMethodNoData(method) {
  Axios.prototype[method] = function(url2, config) {
    return this.request(mergeConfig(config || {}, {
      method,
      url: url2,
      data: (config || {}).data
    }));
  };
});
utils_default.forEach(["post", "put", "patch"], function forEachMethodWithData(method) {
  function generateHTTPMethod(isForm) {
    return function httpMethod(url2, data, config) {
      return this.request(mergeConfig(config || {}, {
        method,
        headers: isForm ? {
          "Content-Type": "multipart/form-data"
        } : {},
        url: url2,
        data
      }));
    };
  }
  Axios.prototype[method] = generateHTTPMethod();
  Axios.prototype[method + "Form"] = generateHTTPMethod(true);
});
var Axios_default = Axios;

// node_modules/axios/lib/cancel/CancelToken.js
class CancelToken {
  constructor(executor) {
    if (typeof executor !== "function") {
      throw new TypeError("executor must be a function.");
    }
    let resolvePromise;
    this.promise = new Promise(function promiseExecutor(resolve) {
      resolvePromise = resolve;
    });
    const token = this;
    this.promise.then((cancel) => {
      if (!token._listeners)
        return;
      let i = token._listeners.length;
      while (i-- > 0) {
        token._listeners[i](cancel);
      }
      token._listeners = null;
    });
    this.promise.then = (onfulfilled) => {
      let _resolve;
      const promise2 = new Promise((resolve) => {
        token.subscribe(resolve);
        _resolve = resolve;
      }).then(onfulfilled);
      promise2.cancel = function reject() {
        token.unsubscribe(_resolve);
      };
      return promise2;
    };
    executor(function cancel(message, config, request) {
      if (token.reason) {
        return;
      }
      token.reason = new CanceledError_default(message, config, request);
      resolvePromise(token.reason);
    });
  }
  throwIfRequested() {
    if (this.reason) {
      throw this.reason;
    }
  }
  subscribe(listener) {
    if (this.reason) {
      listener(this.reason);
      return;
    }
    if (this._listeners) {
      this._listeners.push(listener);
    } else {
      this._listeners = [listener];
    }
  }
  unsubscribe(listener) {
    if (!this._listeners) {
      return;
    }
    const index = this._listeners.indexOf(listener);
    if (index !== -1) {
      this._listeners.splice(index, 1);
    }
  }
  toAbortSignal() {
    const controller = new AbortController;
    const abort = (err) => {
      controller.abort(err);
    };
    this.subscribe(abort);
    controller.signal.unsubscribe = () => this.unsubscribe(abort);
    return controller.signal;
  }
  static source() {
    let cancel;
    const token = new CancelToken(function executor(c) {
      cancel = c;
    });
    return {
      token,
      cancel
    };
  }
}
var CancelToken_default = CancelToken;

// node_modules/axios/lib/helpers/spread.js
function spread(callback) {
  return function wrap(arr) {
    return callback.apply(null, arr);
  };
}

// node_modules/axios/lib/helpers/isAxiosError.js
function isAxiosError(payload) {
  return utils_default.isObject(payload) && payload.isAxiosError === true;
}

// node_modules/axios/lib/helpers/HttpStatusCode.js
var HttpStatusCode = {
  Continue: 100,
  SwitchingProtocols: 101,
  Processing: 102,
  EarlyHints: 103,
  Ok: 200,
  Created: 201,
  Accepted: 202,
  NonAuthoritativeInformation: 203,
  NoContent: 204,
  ResetContent: 205,
  PartialContent: 206,
  MultiStatus: 207,
  AlreadyReported: 208,
  ImUsed: 226,
  MultipleChoices: 300,
  MovedPermanently: 301,
  Found: 302,
  SeeOther: 303,
  NotModified: 304,
  UseProxy: 305,
  Unused: 306,
  TemporaryRedirect: 307,
  PermanentRedirect: 308,
  BadRequest: 400,
  Unauthorized: 401,
  PaymentRequired: 402,
  Forbidden: 403,
  NotFound: 404,
  MethodNotAllowed: 405,
  NotAcceptable: 406,
  ProxyAuthenticationRequired: 407,
  RequestTimeout: 408,
  Conflict: 409,
  Gone: 410,
  LengthRequired: 411,
  PreconditionFailed: 412,
  PayloadTooLarge: 413,
  UriTooLong: 414,
  UnsupportedMediaType: 415,
  RangeNotSatisfiable: 416,
  ExpectationFailed: 417,
  ImATeapot: 418,
  MisdirectedRequest: 421,
  UnprocessableEntity: 422,
  Locked: 423,
  FailedDependency: 424,
  TooEarly: 425,
  UpgradeRequired: 426,
  PreconditionRequired: 428,
  TooManyRequests: 429,
  RequestHeaderFieldsTooLarge: 431,
  UnavailableForLegalReasons: 451,
  InternalServerError: 500,
  NotImplemented: 501,
  BadGateway: 502,
  ServiceUnavailable: 503,
  GatewayTimeout: 504,
  HttpVersionNotSupported: 505,
  VariantAlsoNegotiates: 506,
  InsufficientStorage: 507,
  LoopDetected: 508,
  NotExtended: 510,
  NetworkAuthenticationRequired: 511
};
Object.entries(HttpStatusCode).forEach(([key, value]) => {
  HttpStatusCode[value] = key;
});
var HttpStatusCode_default = HttpStatusCode;

// node_modules/axios/lib/axios.js
function createInstance(defaultConfig) {
  const context = new Axios_default(defaultConfig);
  const instance = bind(Axios_default.prototype.request, context);
  utils_default.extend(instance, Axios_default.prototype, context, { allOwnKeys: true });
  utils_default.extend(instance, context, null, { allOwnKeys: true });
  instance.create = function create(instanceConfig) {
    return createInstance(mergeConfig(defaultConfig, instanceConfig));
  };
  return instance;
}
var axios = createInstance(defaults_default);
axios.Axios = Axios_default;
axios.CanceledError = CanceledError_default;
axios.CancelToken = CancelToken_default;
axios.isCancel = isCancel;
axios.VERSION = VERSION;
axios.toFormData = toFormData_default;
axios.AxiosError = AxiosError_default;
axios.Cancel = axios.CanceledError;
axios.all = function all(promises) {
  return Promise.all(promises);
};
axios.spread = spread;
axios.isAxiosError = isAxiosError;
axios.mergeConfig = mergeConfig;
axios.AxiosHeaders = AxiosHeaders_default;
axios.formToJSON = (thing) => formDataToJSON_default(utils_default.isHTMLForm(thing) ? new FormData(thing) : thing);
axios.getAdapter = adapters_default.getAdapter;
axios.HttpStatusCode = HttpStatusCode_default;
axios.default = axios;
var axios_default = axios;

// node_modules/@hey-api/client-axios/dist/index.js
var w = async (t, r) => {
  let e = typeof r == "function" ? await r(t) : r;
  if (e)
    return t.scheme === "bearer" ? `Bearer ${e}` : t.scheme === "basic" ? `Basic ${btoa(e)}` : e;
};
var v = { $body_: "body", $headers_: "headers", $path_: "path", $query_: "query" };
var P = Object.entries(v);
var U = (t) => {
  switch (t) {
    case "label":
      return ".";
    case "matrix":
      return ";";
    case "simple":
      return ",";
    default:
      return "&";
  }
};
var D = (t) => {
  switch (t) {
    case "form":
      return ",";
    case "pipeDelimited":
      return "|";
    case "spaceDelimited":
      return "%20";
    default:
      return ",";
  }
};
var H = (t) => {
  switch (t) {
    case "label":
      return ".";
    case "matrix":
      return ";";
    case "simple":
      return ",";
    default:
      return "&";
  }
};
var m = ({ allowReserved: t, explode: r, name: e, style: n, value: i }) => {
  if (!r) {
    let s = (t ? i : i.map((a) => encodeURIComponent(a))).join(D(n));
    switch (n) {
      case "label":
        return `.${s}`;
      case "matrix":
        return `;${e}=${s}`;
      case "simple":
        return s;
      default:
        return `${e}=${s}`;
    }
  }
  let l = U(n), o = i.map((s) => n === "label" || n === "simple" ? t ? s : encodeURIComponent(s) : p({ allowReserved: t, name: e, value: s })).join(l);
  return n === "label" || n === "matrix" ? l + o : o;
};
var p = ({ allowReserved: t, name: r, value: e }) => {
  if (e == null)
    return "";
  if (typeof e == "object")
    throw new Error("Deeply-nested arrays/objects aren’t supported. Provide your own `querySerializer()` to handle these.");
  return `${r}=${t ? e : encodeURIComponent(e)}`;
};
var g = ({ allowReserved: t, explode: r, name: e, style: n, value: i, valueOnly: l }) => {
  if (i instanceof Date)
    return l ? i.toISOString() : `${e}=${i.toISOString()}`;
  if (n !== "deepObject" && !r) {
    let a = [];
    Object.entries(i).forEach(([d, c]) => {
      a = [...a, d, t ? c : encodeURIComponent(c)];
    });
    let u = a.join(",");
    switch (n) {
      case "form":
        return `${e}=${u}`;
      case "label":
        return `.${u}`;
      case "matrix":
        return `;${e}=${u}`;
      default:
        return u;
    }
  }
  let o = H(n), s = Object.entries(i).map(([a, u]) => p({ allowReserved: t, name: n === "deepObject" ? `${e}[${a}]` : a, value: u })).join(o);
  return n === "label" || n === "matrix" ? o + s : s;
};
var B = /\{[^{}]+\}/g;
var I = ({ path: t, url: r }) => {
  let e = r, n = r.match(B);
  if (n)
    for (let i of n) {
      let l = false, o = i.substring(1, i.length - 1), s = "simple";
      o.endsWith("*") && (l = true, o = o.substring(0, o.length - 1)), o.startsWith(".") ? (o = o.substring(1), s = "label") : o.startsWith(";") && (o = o.substring(1), s = "matrix");
      let a = t[o];
      if (a == null)
        continue;
      if (Array.isArray(a)) {
        e = e.replace(i, m({ explode: l, name: o, style: s, value: a }));
        continue;
      }
      if (typeof a == "object") {
        e = e.replace(i, g({ explode: l, name: o, style: s, value: a, valueOnly: true }));
        continue;
      }
      if (s === "matrix") {
        e = e.replace(i, `;${p({ name: o, value: a })}`);
        continue;
      }
      let u = encodeURIComponent(s === "label" ? `.${a}` : a);
      e = e.replace(i, u);
    }
  return e;
};
var W = ({ allowReserved: t, array: r, object: e } = {}) => (i) => {
  let l = [];
  if (i && typeof i == "object")
    for (let o in i) {
      let s = i[o];
      if (s != null)
        if (Array.isArray(s)) {
          let a = m({ allowReserved: t, explode: true, name: o, style: "form", value: s, ...r });
          a && l.push(a);
        } else if (typeof s == "object") {
          let a = g({ allowReserved: t, explode: true, name: o, style: "deepObject", value: s, ...e });
          a && l.push(a);
        } else {
          let a = p({ allowReserved: t, name: o, value: s });
          a && l.push(a);
        }
    }
  return l.join("&");
};
var j = async ({ security: t, ...r }) => {
  for (let e of t) {
    let n = await w(e, r.auth);
    if (!n)
      continue;
    let i = e.name ?? "Authorization";
    switch (e.in) {
      case "query":
        r.query || (r.query = {}), r.query[i] = n;
        break;
      case "cookie": {
        let l = `${i}=${n}`;
        "Cookie" in r.headers && r.headers.Cookie ? r.headers.Cookie = `${r.headers.Cookie}; ${l}` : r.headers.Cookie = l;
        break;
      }
      case "header":
      default:
        r.headers[i] = n;
        break;
    }
    return;
  }
};
var b = (t) => N({ path: t.path, query: t.paramsSerializer ? undefined : t.query, querySerializer: typeof t.querySerializer == "function" ? t.querySerializer : W(t.querySerializer), url: t.url });
var N = ({ path: t, query: r, querySerializer: e, url: n }) => {
  let l = n.startsWith("/") ? n : `/${n}`;
  t && (l = I({ path: t, url: l }));
  let o = r ? e(r) : "";
  return o.startsWith("?") && (o = o.substring(1)), o && (l += `?${o}`), l;
};
var C = (t, r) => {
  let e = { ...t, ...r };
  return e.headers = h(t.headers, r.headers), e;
};
var Q = ["common", "delete", "get", "head", "patch", "post", "put"];
var h = (...t) => {
  let r = {};
  for (let e of t) {
    if (!e || typeof e != "object")
      continue;
    let n = Object.entries(e);
    for (let [i, l] of n)
      if (Q.includes(i) && typeof l == "object")
        r[i] = { ...r[i], ...l };
      else if (l === null)
        delete r[i];
      else if (Array.isArray(l))
        for (let o of l)
          r[i] = [...r[i] ?? [], o];
      else
        l !== undefined && (r[i] = typeof l == "object" ? JSON.stringify(l) : l);
  }
  return r;
};
var S = (t = {}) => ({ ...t });
var _ = (t = {}) => {
  let r = C(S(), t), { auth: e, ...n } = r, i = axios_default.create(n), l = () => ({ ...r }), o = (a) => (r = C(r, a), i.defaults = { ...i.defaults, ...r, headers: h(i.defaults.headers, r.headers) }, l()), s = async (a) => {
    let u = { ...r, ...a, axios: a.axios ?? r.axios ?? i, headers: h(r.headers, a.headers) };
    u.security && await j({ ...u, security: u.security }), u.body && u.bodySerializer && (u.body = u.bodySerializer(u.body));
    let d = b(u);
    try {
      let c = u.axios, { auth: f, ...k } = u, x = await c({ ...k, baseURL: u.baseURL, data: u.body, headers: u.headers, params: u.paramsSerializer ? u.query : undefined, url: d }), { data: y } = x;
      return u.responseType === "json" && (u.responseValidator && await u.responseValidator(y), u.responseTransformer && (y = await u.responseTransformer(y))), { ...x, data: y ?? {} };
    } catch (c) {
      let f = c;
      if (u.throwOnError)
        throw f;
      return f.error = f.response?.data ?? {}, f;
    }
  };
  return { buildUrl: b, delete: (a) => s({ ...a, method: "DELETE" }), get: (a) => s({ ...a, method: "GET" }), getConfig: l, head: (a) => s({ ...a, method: "HEAD" }), instance: i, options: (a) => s({ ...a, method: "OPTIONS" }), patch: (a) => s({ ...a, method: "PATCH" }), post: (a) => s({ ...a, method: "POST" }), put: (a) => s({ ...a, method: "PUT" }), request: s, setConfig: o };
};

// openapi-ts.config.ts
var createClientConfig = (config) => ({
  ...config,
  auth: () => `${process.env.CANVAS_API_TOKEN ?? ""}`,
  baseURL: "https://canvas.instructure.com/api"
});

// canvas-generated/client.gen.ts
var client = _(createClientConfig(S()));

// canvas-generated/sdk.gen.ts
var import_json_bigint = __toESM(require_json_bigint(), 1);
var listAnnouncements = (options) => {
  return (options.client ?? client).get({
    security: [
      {
        scheme: "bearer",
        type: "http"
      }
    ],
    querySerializer: {
      array: {
        explode: false,
        style: "form"
      }
    },
    url: "/v1/announcements",
    ...options
  });
};
var listCalendarEvents = (options) => {
  return (options?.client ?? client).get({
    security: [
      {
        scheme: "bearer",
        type: "http"
      }
    ],
    querySerializer: {
      array: {
        explode: false,
        style: "form"
      }
    },
    url: "/v1/calendar_events",
    ...options
  });
};
var listAssignments = (options) => {
  return (options.client ?? client).get({
    security: [
      {
        scheme: "bearer",
        type: "http"
      }
    ],
    querySerializer: {
      array: {
        explode: false,
        style: "form"
      }
    },
    url: "/v1/courses/{course_id}/assignments",
    ...options
  });
};
var getSingleAssignment = (options) => {
  return (options.client ?? client).get({
    security: [
      {
        scheme: "bearer",
        type: "http"
      }
    ],
    querySerializer: {
      array: {
        explode: false,
        style: "form"
      }
    },
    url: "/v1/courses/{course_id}/assignments/{id}",
    ...options
  });
};
var listFilesCourses = (options) => {
  return (options.client ?? client).get({
    security: [
      {
        scheme: "bearer",
        type: "http"
      }
    ],
    querySerializer: {
      array: {
        explode: false,
        style: "form"
      }
    },
    url: "/v1/courses/{course_id}/files",
    ...options
  });
};
var listAllFoldersCourses = (options) => {
  return (options.client ?? client).get({
    security: [
      {
        scheme: "bearer",
        type: "http"
      }
    ],
    url: "/v1/courses/{course_id}/folders",
    ...options
  });
};
var listUsersInCourseUsers = (options) => {
  return (options.client ?? client).get({
    security: [
      {
        scheme: "bearer",
        type: "http"
      }
    ],
    querySerializer: {
      array: {
        explode: false,
        style: "form"
      }
    },
    url: "/v1/courses/{course_id}/users",
    ...options
  });
};
var listFavoriteCourses = (options) => {
  return (options?.client ?? client).get({
    security: [
      {
        scheme: "bearer",
        type: "http"
      }
    ],
    url: "/v1/users/self/favorites/courses",
    transformResponse: (raw) => import_json_bigint.default({ storeAsString: true }).parse(raw),
    ...options
  });
};
// canvas-generated/tools/listFavoriteCourses.ts
var listFavoriteCourses_default = tool({
  description: `
  List favorite courses
Retrieve the paginated list of favorite courses for the current user. If the
user has not chosen
any favorites, then a selection of currently enrolled courses will be
returned.

See the {api:CoursesController#index List courses API} for details on accepted include[]
parameters.
    `,
  parameters: listFavoriteCoursesDataSchema.omit({ url: true }),
  execute: async (args) => {
    try {
      const { data } = await listFavoriteCourses(args);
      const filtered = data?.map((course) => ({
        id: course?.id != null ? course.id.toString() : "",
        name: course.name
      }));
      return filtered;
    } catch (e) {
      console.log(e);
      return "no results";
    }
  }
});

// canvas-generated/tools/listFilesCourses.ts
var listFilesCourses_default = tool({
  description: `
  List files
Returns the paginated list of files for the folder or course.
    `,
  parameters: listFilesCoursesDataSchema.omit({ url: true }),
  execute: async (args) => {
    try {
      const { data } = await listFilesCourses(args);
      return data;
    } catch (e) {
      console.log(e);
      return "no results";
    }
  }
});

// canvas-generated/tools/listAllFoldersCourses.ts
var listAllFoldersCourses_default = tool({
  description: `
  List all folders
Returns the paginated list of all folders for the given context. This will
be
returned as a flat list containing all subfolders as well.
    `,
  parameters: listAllFoldersCoursesDataSchema.omit({ url: true }),
  execute: async (args) => {
    try {
      console.log(args);
      const { data } = await listAllFoldersCourses(args);
      console.log(data);
      return data;
    } catch (e) {
      console.log(e);
      return "no results";
    }
  }
});

// canvas-generated/tools/listAssignments.ts
var listAssignments_default = tool({
  description: `
  List assignments
Returns the paginated list of assignments for the current context.
    `,
  parameters: listAssignmentsDataSchema.omit({ url: true }),
  execute: async (args) => {
    try {
      const { data } = await listAssignments(args);
      return data;
    } catch (e) {
      console.log(e);
      return "no results";
    }
  }
});

// canvas-generated/tools/getSingleAssignment.ts
var getSingleAssignment_default = tool({
  description: `
  Get a single assignment
Returns the assignment with the given id.
    `,
  parameters: getSingleAssignmentDataSchema.omit({ url: true }),
  execute: async (args) => {
    try {
      const { data } = await getSingleAssignment(args);
      return data;
    } catch (e) {
      console.log(e);
      return "no results";
    }
  }
});

// canvas-generated/tools/listCalendarEvents.ts
var listCalendarEvents_default = tool({
  description: `
  List calendar events
Retrieve the paginated list of calendar events or assignments for the current
user
    `,
  parameters: listCalendarEventsDataSchema.omit({ url: true }),
  execute: async (args) => {
    try {
      const { data } = await listCalendarEvents(args);
      return data;
    } catch (e) {
      console.log(e);
      return "no results";
    }
  }
});

// canvas-generated/tools/listAnnouncements.ts
var listAnnouncements_default = tool({
  description: `
  List announcements
Returns the paginated list of announcements for the given courses and date range.
Note that
a +context_code+ field is added to the responses so you can tell which course each
announcement
belongs to.
    `,
  parameters: listAnnouncementsDataSchema.omit({ url: true }),
  execute: async (args) => {
    try {
      const { data } = await listAnnouncements(args);
      return data;
    } catch (e) {
      console.log(e);
      return "no results";
    }
  }
});

// canvas-generated/tools/listUsersInCourseUsers.ts
var listUsersInCourseUsers_default = tool({
  description: `
  List users in course
Returns the paginated list of users in this course. And optionally the user's
enrollments in the course.
    `,
  parameters: listUsersInCourseUsersDataSchema.omit({ url: true }),
  execute: async (args) => {
    try {
      const { data } = await listUsersInCourseUsers(args);
      return data;
    } catch (e) {
      console.log(e);
      return "no results";
    }
  }
});

// canvas-generated/tools/getCurrentDate.ts
var getCurrentDate_default = tool({
  description: `
  Get current date and time
Returns the current date and time for filtering assignments and calendar events by due dates.
    `,
  parameters: exports_external.object({}),
  execute: async () => {
    try {
      const now = new Date;
      return {
        currentDate: now.toISOString(),
        currentDateFormatted: now.toLocaleDateString(),
        currentTime: now.toLocaleTimeString(),
        dayOfWeek: now.toLocaleDateString("en-US", { weekday: "long" }),
        weekStart: new Date(now.getTime() - now.getDay() * 24 * 60 * 60 * 1000).toISOString(),
        weekEnd: new Date(now.getTime() + (6 - now.getDay()) * 24 * 60 * 60 * 1000).toISOString()
      };
    } catch (e) {
      console.log(e);
      return "Could not get current date";
    }
  }
});

// mcp-server.ts
console.log = (...args) => process.stderr.write("[LOG] " + args.join(" ") + `
`);
console.warn = (...args) => process.stderr.write("[WARN] " + args.join(" ") + `
`);
console.info = (...args) => process.stderr.write("[INFO] " + args.join(" ") + `
`);
console.debug = (...args) => process.stderr.write("[DEBUG] " + args.join(" ") + `
`);
console.trace = (...args) => process.stderr.write("[TRACE] " + args.join(" ") + `
`);
var courseContext = new Map;
var assignmentCache = new Map;
var server = new McpServer({
  name: "canvas-lms-ai",
  version: "1.0.0"
}, {
  capabilities: {
    tools: {}
  }
});
server.registerTool("get_current_date", {
  title: "Get Current Date",
  description: "Get current date and time for filtering assignments and calendar events by due dates",
  inputSchema: {}
}, async () => {
  try {
    const result = await getCurrentDate_default.execute({});
    return {
      content: [{ type: "text", text: JSON.stringify(result || {}, null, 2) }]
    };
  } catch (error) {
    return {
      content: [{ type: "text", text: `Error: ${error.message || "Unknown error"}` }],
      isError: true
    };
  }
});
server.registerTool("list_favorite_courses", {
  title: "List Favorite Courses",
  description: "Get starred/favorited Canvas courses. These are courses the user has marked as favorites in Canvas",
  inputSchema: {}
}, async () => {
  try {
    const data = await listFavoriteCourses_default.execute({});
    if (Array.isArray(data)) {
      data.forEach((course) => {
        if (typeof course === "object" && course !== null && "id" in course && course.id && course.name) {
          courseContext.set(course.id.toString(), course.name);
        }
      });
    }
    return {
      content: [{ type: "text", text: JSON.stringify(data || [], null, 2) }]
    };
  } catch (error) {
    return {
      content: [{ type: "text", text: `Error: ${error.message || "Unknown error"}` }],
      isError: true
    };
  }
});
server.registerTool("get_course_context", {
  title: "Get Course Context",
  description: "Returns known course IDs/names and recently seen assignment IDs/names from prior interactions. Use this to check existing context before making other API calls",
  inputSchema: {}
}, async () => {
  try {
    const result = {
      courses: Array.from(courseContext.entries()).map(([id, name17]) => ({ id, name: name17 })),
      assignments: Array.from(assignmentCache.entries()).map(([assignmentId, data]) => ({
        assignmentId,
        courseId: data.courseId,
        name: data.name
      }))
    };
    return {
      content: [{ type: "text", text: JSON.stringify(result || {}, null, 2) }]
    };
  } catch (error) {
    return {
      content: [{ type: "text", text: `Error: ${error.message || "Unknown error"}` }],
      isError: true
    };
  }
});
server.registerTool("list_assignments", {
  title: "List Course Assignments",
  description: "Get assignments for a specific course. Supports filtering by bucket (past, upcoming, overdue, etc.)",
  inputSchema: {
    courseId: exports_external.string().describe("Canvas course ID"),
    bucket: exports_external.enum(["past", "overdue", "undated", "ungraded", "unsubmitted", "upcoming", "future"]).optional().describe("Filter assignments by status bucket"),
    include: exports_external.array(exports_external.enum(["submission", "assignment_visibility", "all_dates", "overrides", "observed_users"])).optional().describe("Additional data to include")
  }
}, async ({ courseId, bucket, include }) => {
  try {
    const args = {
      path: { course_id: courseId }
    };
    if (bucket || include) {
      args.query = {};
      if (bucket)
        args.query.bucket = bucket;
      if (include)
        args.query.include = include;
    }
    const data = await listAssignments_default.execute(args);
    if (Array.isArray(data)) {
      data.forEach((assignment) => {
        if (typeof assignment === "object" && assignment !== null && "id" in assignment && assignment.id && assignment.name) {
          assignmentCache.set(assignment.id.toString(), {
            courseId: courseId.toString(),
            name: assignment.name
          });
        }
      });
    }
    return {
      content: [{ type: "text", text: JSON.stringify(data || [], null, 2) }]
    };
  } catch (error) {
    return {
      content: [{ type: "text", text: `Error: ${error.message || "Unknown error"}` }],
      isError: true
    };
  }
});
server.registerTool("get_assignment_details", {
  title: "Get Assignment Details",
  description: "Get detailed information about a specific assignment including description, submission types, points, rubric info, and requirements",
  inputSchema: {
    courseId: exports_external.string().describe("Canvas course ID"),
    assignmentId: exports_external.string().describe("Canvas assignment ID"),
    include: exports_external.array(exports_external.enum(["submission", "assignment_visibility", "overrides", "observed_users"])).optional().describe("Additional data to include")
  }
}, async ({ courseId, assignmentId, include }) => {
  try {
    const args = {
      path: {
        course_id: courseId,
        id: assignmentId
      }
    };
    if (include) {
      args.query = { include };
    }
    const result = await getSingleAssignment_default.execute(args);
    if (result && typeof result === "object" && "id" in result && result.id && result.name) {
      assignmentCache.set(result.id.toString(), {
        courseId: courseId.toString(),
        name: result.name
      });
    }
    return {
      content: [{ type: "text", text: JSON.stringify(result || {}, null, 2) }]
    };
  } catch (error) {
    return {
      content: [{ type: "text", text: `Error: ${error.message || "Unknown error"}` }],
      isError: true
    };
  }
});
server.registerTool("list_course_files", {
  title: "List Course Files",
  description: "Get files for a specific course with pagination support",
  inputSchema: {
    courseId: exports_external.string().describe("Canvas course ID"),
    page: exports_external.string().optional().describe("Page number for pagination"),
    perPage: exports_external.number().optional().describe("Number of items per page")
  }
}, async ({ courseId, page, perPage }) => {
  try {
    const args = {
      path: { course_id: courseId }
    };
    if (page || perPage) {
      args.query = {};
      if (page)
        args.query.page = page;
      if (perPage)
        args.query.per_page = perPage;
    }
    const data = await listFilesCourses_default.execute(args);
    return {
      content: [{ type: "text", text: JSON.stringify(data || [], null, 2) }]
    };
  } catch (error) {
    return {
      content: [{ type: "text", text: `Error: ${error.message || "Unknown error"}` }],
      isError: true
    };
  }
});
server.registerTool("list_course_folders", {
  title: "List Course Folders",
  description: "Get all folders for a specific course",
  inputSchema: {
    courseId: exports_external.string().describe("Canvas course ID")
  }
}, async ({ courseId }) => {
  try {
    const data = await listAllFoldersCourses_default.execute({
      path: { course_id: courseId }
    });
    return {
      content: [{ type: "text", text: JSON.stringify(data || [], null, 2) }]
    };
  } catch (error) {
    return {
      content: [{ type: "text", text: `Error: ${error.message || "Unknown error"}` }],
      isError: true
    };
  }
});
server.registerTool("list_calendar_events", {
  title: "List Calendar Events",
  description: "Get calendar events, which may include assignment due dates and other course events",
  inputSchema: {
    type: exports_external.enum(["event", "assignment"]).optional().describe("Filter by event type"),
    startDate: exports_external.string().optional().describe("Start date filter (ISO format)"),
    endDate: exports_external.string().optional().describe("End date filter (ISO format)"),
    contextCodes: exports_external.array(exports_external.string()).optional().describe("Context codes to filter by (e.g., course_123)")
  }
}, async ({ type, startDate, endDate, contextCodes }) => {
  try {
    const args = {};
    const query = {};
    if (type)
      query.type = type;
    if (startDate)
      query.start_date = startDate;
    if (endDate)
      query.end_date = endDate;
    if (contextCodes)
      query.context_codes = contextCodes;
    if (Object.keys(query).length > 0) {
      args.query = query;
    }
    const data = await listCalendarEvents_default.execute(args);
    return {
      content: [{ type: "text", text: JSON.stringify(data || [], null, 2) }]
    };
  } catch (error) {
    return {
      content: [{ type: "text", text: `Error: ${error.message || "Unknown error"}` }],
      isError: true
    };
  }
});
server.registerTool("list_announcements", {
  title: "List Course Announcements",
  description: "Get announcements for courses. Announcements are discussion topics in the announcements context",
  inputSchema: {
    contextCodes: exports_external.array(exports_external.string()).describe("Context codes for courses (e.g., ['course_123', 'course_456'])"),
    startDate: exports_external.string().optional().describe("Start date filter (ISO format)"),
    endDate: exports_external.string().optional().describe("End date filter (ISO format)")
  }
}, async ({ contextCodes, startDate, endDate }) => {
  try {
    const args = {
      query: { context_codes: contextCodes }
    };
    if (startDate)
      args.query.start_date = startDate;
    if (endDate)
      args.query.end_date = endDate;
    const data = await listAnnouncements_default.execute(args);
    return {
      content: [{ type: "text", text: JSON.stringify(data || [], null, 2) }]
    };
  } catch (error) {
    return {
      content: [{ type: "text", text: `Error: ${error.message || "Unknown error"}` }],
      isError: true
    };
  }
});
server.registerTool("list_course_users", {
  title: "List Course Users",
  description: "Get users enrolled in a specific course (students, teachers, TAs, etc.)",
  inputSchema: {
    courseId: exports_external.string().describe("Canvas course ID"),
    enrollmentType: exports_external.array(exports_external.enum(["teacher", "student", "ta", "observer", "designer"])).optional().describe("Filter by enrollment type"),
    include: exports_external.array(exports_external.enum(["enrollments", "locked", "avatar_url", "test_student", "bio", "custom_links", "current_grading_period_scores", "uuid"])).optional().describe("Additional data to include")
  }
}, async ({ courseId, enrollmentType, include }) => {
  try {
    const args = {
      path: { course_id: courseId }
    };
    if (enrollmentType || include) {
      args.query = {};
      if (enrollmentType)
        args.query.enrollment_type = enrollmentType;
      if (include)
        args.query.include = include;
    }
    const data = await listUsersInCourseUsers_default.execute(args);
    return {
      content: [{ type: "text", text: JSON.stringify(data || [], null, 2) }]
    };
  } catch (error) {
    return {
      content: [{ type: "text", text: `Error: ${error.message || "Unknown error"}` }],
      isError: true
    };
  }
});
async function main() {
  if (!process.env.CANVAS_API_TOKEN) {
    process.stderr.write(`Error: CANVAS_API_TOKEN environment variable required
`);
    process.exit(1);
  }
  const transport = new StdioServerTransport;
  await server.connect(transport);
}
main().catch((error) => {
  process.exit(1);
});
