{
    "info": {
        "title": "Canvas API",
        "version": "1.0.0"
    },
    "openapi": "3.0.1",
    "security": [
        {
            "bearerAuth": []
        }
    ],
    "tags": [
        {
            "description": "Account Domain Lookups",
            "name": "account_domain_lookups"
        },
        {
            "description": "Account Notifications",
            "name": "account_notifications"
        },
        {
            "description": "Account Reports",
            "name": "account_reports"
        },
        {
            "description": "Accounts",
            "name": "accounts"
        },
        {
            "description": "Admins",
            "name": "admins"
        },
        {
            "description": "Analytics",
            "name": "analytics"
        },
        {
            "description": "Announcement External Feeds",
            "name": "announcement_external_feeds"
        },
        {
            "description": "Announcements",
            "name": "announcements"
        },
        {
            "description": "API Token Scopes",
            "name": "api_token_scopes"
        },
        {
            "description": "Appointment Groups",
            "name": "appointment_groups"
        },
        {
            "description": "Assignment Groups",
            "name": "assignment_groups"
        },
        {
            "description": "Assignments",
            "name": "assignments"
        },
        {
            "description": "Authentication Providers",
            "name": "authentication_providers"
        },
        {
            "description": "Authentications Log",
            "name": "authentications_log"
        },
        {
            "description": "Blueprint Courses",
            "name": "blueprint_courses"
        },
        {
            "description": "Bookmarks",
            "name": "bookmarks"
        },
        {
            "description": "Brand Configs",
            "name": "brand_configs"
        },
        {
            "description": "Calendar Events",
            "name": "calendar_events"
        },
        {
            "description": "Collaborations",
            "name": "collaborations"
        },
        {
            "description": "CommMessages",
            "name": "comm_messages"
        },
        {
            "description": "Communication Channels",
            "name": "communication_channels"
        },
        {
            "description": "Conferences",
            "name": "conferences"
        },
        {
            "description": "Content Exports",
            "name": "content_exports"
        },
        {
            "description": "Content Migrations",
            "name": "content_migrations"
        },
        {
            "description": "Conversations",
            "name": "conversations"
        },
        {
            "description": "Course Audit log",
            "name": "course_audit_log"
        },
        {
            "description": "Course Quiz Extensions",
            "name": "course_quiz_extensions"
        },
        {
            "description": "Courses",
            "name": "courses"
        },
        {
            "description": "Custom Gradebook Columns",
            "name": "custom_gradebook_columns"
        },
        {
            "description": "Discussion Topics",
            "name": "discussion_topics"
        },
        {
            "description": "Document Previews",
            "name": "document_previews"
        },
        {
            "description": "ePub Exports",
            "name": "e_pub_exports"
        },
        {
            "description": "Enrollment Terms",
            "name": "enrollment_terms"
        },
        {
            "description": "Enrollments",
            "name": "enrollments"
        },
        {
            "description": "Error Reports",
            "name": "error_reports"
        },
        {
            "description": "External Tools",
            "name": "external_tools"
        },
        {
            "description": "Favorites",
            "name": "favorites"
        },
        {
            "description": "Feature Flags",
            "name": "feature_flags"
        },
        {
            "description": "Files",
            "name": "files"
        },
        {
            "description": "Grade Change Log",
            "name": "grade_change_log"
        },
        {
            "description": "Gradebook History",
            "name": "gradebook_history"
        },
        {
            "description": "Grading Periods",
            "name": "grading_periods"
        },
        {
            "description": "Grading Standards",
            "name": "grading_standards"
        },
        {
            "description": "Group Categories",
            "name": "group_categories"
        },
        {
            "description": "Groups",
            "name": "groups"
        },
        {
            "description": "JWTs",
            "name": "jw_ts"
        },
        {
            "description": "Late Policy",
            "name": "late_policy"
        },
        {
            "description": "LiveAssessments",
            "name": "live_assessments"
        },
        {
            "description": "Logins",
            "name": "logins"
        },
        {
            "description": "Moderated Grading",
            "name": "moderated_grading"
        },
        {
            "description": "Modules",
            "name": "modules"
        },
        {
            "description": "Notification Preferences",
            "name": "notification_preferences"
        },
        {
            "description": "Originality Reports",
            "name": "originality_reports"
        },
        {
            "description": "Outcome Groups",
            "name": "outcome_groups"
        },
        {
            "description": "Outcome Imports",
            "name": "outcome_imports"
        },
        {
            "description": "Outcome Results",
            "name": "outcome_results"
        },
        {
            "description": "Outcomes",
            "name": "outcomes"
        },
        {
            "description": "Pages",
            "name": "pages"
        },
        {
            "description": "Peer Reviews",
            "name": "peer_reviews"
        },
        {
            "description": "Plagiarism Detection Platform Assignments",
            "name": "plagiarism_detection_platform_assignments"
        },
        {
            "description": "Plagiarism Detection Platform Users",
            "name": "plagiarism_detection_platform_users"
        },
        {
            "description": "Plagiarism Detection Submissions",
            "name": "plagiarism_detection_submissions"
        },
        {
            "description": "Planner",
            "name": "planner"
        },
        {
            "description": "Planner Note",
            "name": "planner_note"
        },
        {
            "description": "Planner override",
            "name": "planner_override"
        },
        {
            "description": "PollChoices",
            "name": "poll_choices"
        },
        {
            "description": "Poll Sessions",
            "name": "poll_sessions"
        },
        {
            "description": "PollSubmissions",
            "name": "poll_submissions"
        },
        {
            "description": "Polls",
            "name": "polls"
        },
        {
            "description": "Proficiency Ratings",
            "name": "proficiency_ratings"
        },
        {
            "description": "Progress",
            "name": "progress"
        },
        {
            "description": "Quiz Assignment Overrides",
            "name": "quiz_assignment_overrides"
        },
        {
            "description": "Quiz Extensions",
            "name": "quiz_extensions"
        },
        {
            "description": "Quiz IP Filters",
            "name": "quiz_ip_filters"
        },
        {
            "description": "Quiz Question Groups",
            "name": "quiz_question_groups"
        },
        {
            "description": "Quiz Questions",
            "name": "quiz_questions"
        },
        {
            "description": "Quiz Reports",
            "name": "quiz_reports"
        },
        {
            "description": "Quiz Statistics",
            "name": "quiz_statistics"
        },
        {
            "description": "Quiz Submission Events",
            "name": "quiz_submission_events"
        },
        {
            "description": "Quiz Submission Files",
            "name": "quiz_submission_files"
        },
        {
            "description": "Quiz Submission Questions",
            "name": "quiz_submission_questions"
        },
        {
            "description": "Quiz Submission User List",
            "name": "quiz_submission_user_list"
        },
        {
            "description": "Quiz Submissions",
            "name": "quiz_submissions"
        },
        {
            "description": "Quizzes",
            "name": "quizzes"
        },
        {
            "description": "Roles",
            "name": "roles"
        },
        {
            "description": "Rubrics",
            "name": "rubrics"
        },
        {
            "description": "Search",
            "name": "search"
        },
        {
            "description": "Sections",
            "name": "sections"
        },
        {
            "description": "Services",
            "name": "services"
        },
        {
            "description": "Shared Brand Configs",
            "name": "shared_brand_configs"
        },
        {
            "description": "SIS Import Errors",
            "name": "sis_import_errors"
        },
        {
            "description": "SIS Imports",
            "name": "sis_imports"
        },
        {
            "description": "SIS Integration",
            "name": "sis_integration"
        },
        {
            "description": "Submission Comments",
            "name": "submission_comments"
        },
        {
            "description": "Submissions",
            "name": "submissions"
        },
        {
            "description": "Tabs",
            "name": "tabs"
        },
        {
            "description": "User Observees",
            "name": "user_observees"
        },
        {
            "description": "Users",
            "name": "users"
        },
        {
            "description": "Webhooks Subscriptions",
            "name": "webhooks_subscriptions"
        }
    ],
    "paths": {
        "/lti/assignments/{assignment_id}": {
            "get": {
                "deprecated": false,
                "description": "Get a single Canvas assignment by Canvas id or LTI id. Tool providers may only access\nassignments that are associated with their tool.",
                "operationId": "get_single_assignment_lti",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "assignment_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The id of the user. Can be a Canvas or LTI id for the user.",
                        "in": "query",
                        "name": "user_id",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/LtiAssignment"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Get a single assignment (lti)",
                "tags": [
                    "plagiarism_detection_platform_assignments"
                ]
            }
        },
        "/lti/assignments/{assignment_id}/files/{file_id}/originality_report": {
            "get": {
                "deprecated": false,
                "description": "Get a single originality report",
                "operationId": "show_originality_report_files",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "assignment_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "file_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OriginalityReport"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Show an Originality Report",
                "tags": [
                    "originality_reports"
                ]
            },
            "put": {
                "deprecated": false,
                "description": "Modify an existing originality report. An alternative to this endpoint is\nto POST the same parameters listed below to the CREATE endpoint.",
                "operationId": "edit_originality_report_files",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "assignment_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "file_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "originality_report[originality_report_file_id]": {
                                        "description": "The ID of the file within Canvas that contains the originality\nreport for the submitted file provided in the request URL.",
                                        "format": "int64",
                                        "type": "integer"
                                    },
                                    "originality_report[originality_report_url]": {
                                        "description": "The URL where the originality report for the specified\nfile may be found.",
                                        "type": "string"
                                    },
                                    "originality_report[originality_score]": {
                                        "description": "A number between 0 and 100 representing the measure of the\nspecified file's originality.",
                                        "format": "float",
                                        "type": "number"
                                    },
                                    "originality_report[tool_setting][resource_type_code]": {
                                        "description": "The resource type code of the resource handler Canvas should use for the\nLTI launch for viewing originality reports. If set Canvas will launch\nto the message with type 'basic-lti-launch-request' in the specified\nresource handler rather than using the originality_report_url.",
                                        "type": "string"
                                    },
                                    "originality_report[tool_setting][resource_url]": {
                                        "description": "The URL Canvas should launch to when showing an LTI originality report.\nNote that this value is inferred from the specified resource handler's\nmessage \"path\" value (See `resource_type_code`) unless\nit is specified. If this parameter is used a `resource_type_code`\nmust also be specified.",
                                        "type": "string"
                                    },
                                    "originality_report[workflow_state]": {
                                        "description": "May be set to \"pending\", \"error\", or \"scored\". If an originality score\nis provided a workflow state of \"scored\" will be inferred.",
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OriginalityReport"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Edit an Originality Report",
                "tags": [
                    "originality_reports"
                ]
            }
        },
        "/lti/assignments/{assignment_id}/submissions/{submission_id}": {
            "get": {
                "deprecated": false,
                "description": "Get a single submission, based on submission id.",
                "operationId": "get_single_submission",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "assignment_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "submission_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Get a single submission",
                "tags": [
                    "plagiarism_detection_submissions"
                ]
            }
        },
        "/lti/assignments/{assignment_id}/submissions/{submission_id}/history": {
            "get": {
                "deprecated": false,
                "description": "Get a list of all attempts made for a submission, based on submission id.",
                "operationId": "get_history_of_single_submission",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "assignment_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "submission_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Get the history of a single submission",
                "tags": [
                    "plagiarism_detection_submissions"
                ]
            }
        },
        "/lti/assignments/{assignment_id}/submissions/{submission_id}/originality_report": {
            "post": {
                "deprecated": false,
                "description": "Create a new OriginalityReport for the specified file",
                "operationId": "create_originality_report",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "assignment_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "submission_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "originality_report[file_id]": {
                                        "description": "The id of the file being given an originality score. Required\nif creating a report associated with a file.",
                                        "format": "int64",
                                        "type": "integer"
                                    },
                                    "originality_report[originality_report_file_id]": {
                                        "description": "The ID of the file within Canvas that contains the originality\nreport for the submitted file provided in the request URL.",
                                        "format": "int64",
                                        "type": "integer"
                                    },
                                    "originality_report[originality_report_url]": {
                                        "description": "The URL where the originality report for the specified\nfile may be found.",
                                        "type": "string"
                                    },
                                    "originality_report[originality_score]": {
                                        "description": "A number between 0 and 100 representing the measure of the\nspecified file's originality.",
                                        "format": "float",
                                        "type": "number"
                                    },
                                    "originality_report[tool_setting][resource_type_code]": {
                                        "description": "The resource type code of the resource handler Canvas should use for the\nLTI launch for viewing originality reports. If set Canvas will launch\nto the message with type 'basic-lti-launch-request' in the specified\nresource handler rather than using the originality_report_url.",
                                        "type": "string"
                                    },
                                    "originality_report[tool_setting][resource_url]": {
                                        "description": "The URL Canvas should launch to when showing an LTI originality report.\nNote that this value is inferred from the specified resource handler's\nmessage \"path\" value (See `resource_type_code`) unless\nit is specified. If this parameter is used a `resource_type_code`\nmust also be specified.",
                                        "type": "string"
                                    },
                                    "originality_report[workflow_state]": {
                                        "description": "May be set to \"pending\", \"error\", or \"scored\". If an originality score\nis provided a workflow state of \"scored\" will be inferred.",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "originality_report[originality_score]"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OriginalityReport"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Create an Originality Report",
                "tags": [
                    "originality_reports"
                ]
            }
        },
        "/lti/assignments/{assignment_id}/submissions/{submission_id}/originality_report/{id}": {
            "get": {
                "deprecated": false,
                "description": "Get a single originality report",
                "operationId": "show_originality_report_submissions",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "assignment_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "submission_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OriginalityReport"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Show an Originality Report",
                "tags": [
                    "originality_reports"
                ]
            },
            "put": {
                "deprecated": false,
                "description": "Modify an existing originality report. An alternative to this endpoint is\nto POST the same parameters listed below to the CREATE endpoint.",
                "operationId": "edit_originality_report_submissions",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "assignment_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "submission_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "originality_report[originality_report_file_id]": {
                                        "description": "The ID of the file within Canvas that contains the originality\nreport for the submitted file provided in the request URL.",
                                        "format": "int64",
                                        "type": "integer"
                                    },
                                    "originality_report[originality_report_url]": {
                                        "description": "The URL where the originality report for the specified\nfile may be found.",
                                        "type": "string"
                                    },
                                    "originality_report[originality_score]": {
                                        "description": "A number between 0 and 100 representing the measure of the\nspecified file's originality.",
                                        "format": "float",
                                        "type": "number"
                                    },
                                    "originality_report[tool_setting][resource_type_code]": {
                                        "description": "The resource type code of the resource handler Canvas should use for the\nLTI launch for viewing originality reports. If set Canvas will launch\nto the message with type 'basic-lti-launch-request' in the specified\nresource handler rather than using the originality_report_url.",
                                        "type": "string"
                                    },
                                    "originality_report[tool_setting][resource_url]": {
                                        "description": "The URL Canvas should launch to when showing an LTI originality report.\nNote that this value is inferred from the specified resource handler's\nmessage \"path\" value (See `resource_type_code`) unless\nit is specified. If this parameter is used a `resource_type_code`\nmust also be specified.",
                                        "type": "string"
                                    },
                                    "originality_report[workflow_state]": {
                                        "description": "May be set to \"pending\", \"error\", or \"scored\". If an originality score\nis provided a workflow state of \"scored\" will be inferred.",
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OriginalityReport"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Edit an Originality Report",
                "tags": [
                    "originality_reports"
                ]
            }
        },
        "/lti/groups/{group_id}/users": {
            "get": {
                "deprecated": false,
                "description": "Get all Canvas users in a group. Tool providers may only access\ngroups that belong to the context the tool is installed in.",
                "operationId": "get_all_users_in_group_lti",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "group_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/User"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Get all users in a group (lti)",
                "tags": [
                    "plagiarism_detection_platform_users"
                ]
            }
        },
        "/lti/subscriptions": {
            "get": {
                "deprecated": false,
                "description": "This endpoint returns a paginated list with a default limit of 100 items per result set.\nYou can retrieve the next result set by setting a 'StartKey' header in your next request\nwith the value of the 'EndKey' header in the response.\n\nExample use of a 'StartKey' header object:\n  { \"Id\":\"71d6dfba-0547-477d-b41d-db8cb528c6d1\",\"DeveloperKey\":\"10000000000001\" }",
                "operationId": "list_all_webhook_subscription_for_tool_proxy",
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "List all Webhook Subscription for a tool proxy",
                "tags": [
                    "webhooks_subscriptions"
                ]
            },
            "post": {
                "deprecated": false,
                "description": "Creates a webook subscription for the specified event type and\ncontext.",
                "operationId": "create_webhook_subscription",
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "properties": {
                                    "submission[ContextId]": {
                                        "description": "The id of the context for the subscription.",
                                        "type": "string"
                                    },
                                    "subscription[ContextType]": {
                                        "description": "The type of context for the subscription. Must be 'assignment',\n'account', or 'course'.",
                                        "type": "string"
                                    },
                                    "subscription[EventTypes]": {
                                        "description": "Array of strings representing the event types for\nthe subscription.",
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "subscription[Format]": {
                                        "description": "Format to deliver the live events. Must be 'live-event' or 'caliper'.",
                                        "type": "string"
                                    },
                                    "subscription[TransportMetadata]": {
                                        "description": "An object with a single key: 'Url'. Example: { \"Url\": \"sqs.example\" }",
                                        "type": "object"
                                    },
                                    "subscription[TransportType]": {
                                        "description": "Must be either 'sqs' or 'https'.",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "submission[ContextId]",
                                    "subscription[ContextType]",
                                    "subscription[EventTypes]",
                                    "subscription[Format]",
                                    "subscription[TransportMetadata]",
                                    "subscription[TransportType]"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Create a Webhook Subscription",
                "tags": [
                    "webhooks_subscriptions"
                ]
            }
        },
        "/lti/subscriptions/{id}": {
            "delete": {
                "deprecated": false,
                "operationId": "delete_webhook_subscription",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Delete a Webhook Subscription",
                "tags": [
                    "webhooks_subscriptions"
                ]
            },
            "get": {
                "deprecated": false,
                "operationId": "show_single_webhook_subscription",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Show a single Webhook Subscription",
                "tags": [
                    "webhooks_subscriptions"
                ]
            },
            "put": {
                "deprecated": false,
                "description": "This endpoint uses the same parameters as the create endpoint",
                "operationId": "update_webhook_subscription",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Update a Webhook Subscription",
                "tags": [
                    "webhooks_subscriptions"
                ]
            }
        },
        "/lti/users/{id}": {
            "get": {
                "deprecated": false,
                "description": "Get a single Canvas user by Canvas id or LTI id. Tool providers may only access\nusers that have been assigned an assignment associated with their tool.",
                "operationId": "get_single_user_lti",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Get a single user (lti)",
                "tags": [
                    "plagiarism_detection_platform_users"
                ]
            }
        },
        "/sis/accounts/{account_id}/assignments": {
            "get": {
                "deprecated": false,
                "description": "Retrieve a list of published assignments flagged as \"post_to_sis\".\nSee the Assignments API for more details on assignments.\nAssignment group and section information are included for convenience.\n\nEach section includes course information for the origin course and the\ncross-listed course, if applicable. The `origin_course` is the course to\nwhich the section belongs or the course from which the section was\ncross-listed. Generally, the `origin_course` should be preferred when\nperforming integration work. The `xlist_course` is provided for consistency\nand is only present when the section has been cross-listed.\nSee Sections API and Courses Api for me details.\n\nThe `override` is only provided if the Differentiated Assignments course\nfeature is turned on and the assignment has an override for that section.\nWhen there is an override for the assignment the override object's\nkeys/values can be merged with the top level assignment object to create a\nview of the assignment object specific to that section.\nSee Assignments api for more information on assignment overrides.\n\nrestricts to courses that start before this date (if they have a start date)\nrestricts to courses that end after this date (if they have an end date)\ninformation to include.\n\n  \"student_overrides\":: returns individual student override information",
                "operationId": "retrieve_assignments_enabled_for_grade_export_to_sis_accounts",
                "parameters": [
                    {
                        "description": "The ID of the account to query.",
                        "in": "path",
                        "name": "account_id",
                        "required": true,
                        "schema": {
                            "format": "int64",
                            "type": "integer"
                        }
                    },
                    {
                        "description": "The ID of the course to query.",
                        "in": "query",
                        "name": "course_id",
                        "schema": {
                            "format": "int64",
                            "type": "integer"
                        }
                    },
                    {
                        "description": "When searching on an account,",
                        "in": "query",
                        "name": "starts_before",
                        "schema": {
                            "format": "date-time",
                            "type": "string"
                        }
                    },
                    {
                        "description": "When searching on an account,",
                        "in": "query",
                        "name": "ends_after",
                        "schema": {
                            "format": "date-time",
                            "type": "string"
                        }
                    },
                    {
                        "description": "Array of additional",
                        "in": "query",
                        "name": "include",
                        "schema": {
                            "enum": [
                                "student_overrides"
                            ],
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Retrieve assignments enabled for grade export to SIS",
                "tags": [
                    "sis_integration"
                ]
            }
        },
        "/sis/courses/{course_id}/assignments": {
            "get": {
                "deprecated": false,
                "description": "Retrieve a list of published assignments flagged as \"post_to_sis\".\nSee the Assignments API for more details on assignments.\nAssignment group and section information are included for convenience.\n\nEach section includes course information for the origin course and the\ncross-listed course, if applicable. The `origin_course` is the course to\nwhich the section belongs or the course from which the section was\ncross-listed. Generally, the `origin_course` should be preferred when\nperforming integration work. The `xlist_course` is provided for consistency\nand is only present when the section has been cross-listed.\nSee Sections API and Courses Api for me details.\n\nThe `override` is only provided if the Differentiated Assignments course\nfeature is turned on and the assignment has an override for that section.\nWhen there is an override for the assignment the override object's\nkeys/values can be merged with the top level assignment object to create a\nview of the assignment object specific to that section.\nSee Assignments api for more information on assignment overrides.\n\nrestricts to courses that start before this date (if they have a start date)\nrestricts to courses that end after this date (if they have an end date)\ninformation to include.\n\n  \"student_overrides\":: returns individual student override information",
                "operationId": "retrieve_assignments_enabled_for_grade_export_to_sis_courses",
                "parameters": [
                    {
                        "description": "The ID of the account to query.",
                        "in": "query",
                        "name": "account_id",
                        "schema": {
                            "format": "int64",
                            "type": "integer"
                        }
                    },
                    {
                        "description": "The ID of the course to query.",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "format": "int64",
                            "type": "integer"
                        }
                    },
                    {
                        "description": "When searching on an account,",
                        "in": "query",
                        "name": "starts_before",
                        "schema": {
                            "format": "date-time",
                            "type": "string"
                        }
                    },
                    {
                        "description": "When searching on an account,",
                        "in": "query",
                        "name": "ends_after",
                        "schema": {
                            "format": "date-time",
                            "type": "string"
                        }
                    },
                    {
                        "description": "Array of additional",
                        "in": "query",
                        "name": "include",
                        "schema": {
                            "enum": [
                                "student_overrides"
                            ],
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Retrieve assignments enabled for grade export to SIS",
                "tags": [
                    "sis_integration"
                ]
            }
        },
        "/sis/courses/{course_id}/disable_post_to_sis": {
            "put": {
                "deprecated": false,
                "description": "Disable all assignments flagged as \"post_to_sis\", with the option of making it\nspecific to a grading period, in a course.\n\nOn success, the response will be 204 No Content with an empty body.\n\nOn failure, the response will be 400 Bad Request with a body of a specific\nmessage.\n\nFor disabling assignments in a specific grading period",
                "operationId": "disable_assignments_currently_enabled_for_grade_export_to_sis",
                "parameters": [
                    {
                        "description": "The ID of the course.",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "format": "int64",
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "grading_period_id": {
                                        "description": "The ID of the grading period.",
                                        "format": "int64",
                                        "type": "integer"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Disable assignments currently enabled for grade export to SIS",
                "tags": [
                    "sis_integration"
                ]
            }
        },
        "/v1/accounts": {
            "get": {
                "deprecated": false,
                "description": "A paginated list of accounts that the current user can view or manage.\nTypically, students and even teachers will get an empty list in response,\nonly account admins can view the accounts that they are in.",
                "operationId": "list_accounts",
                "parameters": [
                    {
                        "description": "Array of additional information to include.\n\n\"lti_guid\":: the 'tool_consumer_instance_guid' that will be sent for this account on LTI launches\n\"registration_settings\":: returns info about the privacy policy and terms of use\n\"services\":: returns services and whether they are enabled (requires account management permissions)",
                        "explode": false,
                        "in": "query",
                        "name": "include",
                        "schema": {
                            "items": {
                                "type": "string",
                                "enum": [
                                    "lti_guid",
                                    "registration_settings",
                                    "services"
                                ]
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "$ref": "#/components/parameters/pageParam"
                    },
                    {
                        "$ref": "#/components/parameters/perPageParam"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Account"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "List accounts",
                "tags": [
                    "accounts"
                ]
            }
        },
        "/v1/accounts/search": {
            "get": {
                "deprecated": false,
                "description": "Returns a list of up to 5 matching account domains\n\nPartial match on name / domain are supported",
                "operationId": "search_account_domains",
                "parameters": [
                    {
                        "description": "campus name",
                        "in": "query",
                        "name": "name",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "no description",
                        "in": "query",
                        "name": "domain",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "no description",
                        "in": "query",
                        "name": "latitude",
                        "schema": {
                            "format": "float",
                            "type": "number"
                        }
                    },
                    {
                        "description": "no description",
                        "in": "query",
                        "name": "longitude",
                        "schema": {
                            "format": "float",
                            "type": "number"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Search account domains",
                "tags": [
                    "account_domain_lookups"
                ]
            }
        },
        "/v1/accounts/{account_id}/account_notifications": {
            "get": {
                "deprecated": false,
                "description": "Returns a list of all global notifications in the account for the current user\nAny notifications that have been closed by the user will not be returned",
                "operationId": "index_of_active_global_notification_for_user",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "account_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/AccountNotification"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Index of active global notification for the user",
                "tags": [
                    "account_notifications"
                ]
            },
            "post": {
                "deprecated": false,
                "description": "Create and return a new global notification for an account.",
                "operationId": "create_global_notification",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "account_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "properties": {
                                    "account_notification[end_at]": {
                                        "description": "The end date and time of the notification in ISO8601 format.\ne.g. 2014-01-01T01:00Z",
                                        "format": "date-time",
                                        "type": "string"
                                    },
                                    "account_notification[icon]": {
                                        "description": "The icon to display with the notification.\nNote: Defaults to warning.",
                                        "enum": [
                                            "warning",
                                            "information",
                                            "question",
                                            "error",
                                            "calendar"
                                        ],
                                        "type": "string"
                                    },
                                    "account_notification[message]": {
                                        "description": "The message body of the notification.",
                                        "type": "string"
                                    },
                                    "account_notification[start_at]": {
                                        "description": "The start date and time of the notification in ISO8601 format.\ne.g. 2014-01-01T01:00Z",
                                        "format": "date-time",
                                        "type": "string"
                                    },
                                    "account_notification[subject]": {
                                        "description": "The subject of the notification.",
                                        "type": "string"
                                    },
                                    "account_notification_roles": {
                                        "description": "The role(s) to send global notification to.  Note:  ommitting this field will send to everyone\nExample:\n  account_notification_roles: [\"StudentEnrollment\", \"TeacherEnrollment\"]",
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    }
                                },
                                "required": [
                                    "account_notification[end_at]",
                                    "account_notification[message]",
                                    "account_notification[start_at]",
                                    "account_notification[subject]"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Create a global notification",
                "tags": [
                    "account_notifications"
                ]
            }
        },
        "/v1/accounts/{account_id}/account_notifications/{id}": {
            "delete": {
                "deprecated": false,
                "description": "If the current user no long wants to see this notification it can be excused with this call",
                "operationId": "close_notification_for_user",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "account_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AccountNotification"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Close notification for user",
                "tags": [
                    "account_notifications"
                ]
            },
            "get": {
                "deprecated": false,
                "description": "Returns a global notification for the current user\nA notification that has been closed by the user will not be returned",
                "operationId": "show_global_notification",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "account_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AccountNotification"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Show a global notification",
                "tags": [
                    "account_notifications"
                ]
            },
            "put": {
                "deprecated": false,
                "description": "Update global notification for an account.",
                "operationId": "update_global_notification",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "account_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "account_notification[end_at]": {
                                        "description": "The end date and time of the notification in ISO8601 format.\ne.g. 2014-01-01T01:00Z",
                                        "format": "date-time",
                                        "type": "string"
                                    },
                                    "account_notification[icon]": {
                                        "description": "The icon to display with the notification.",
                                        "enum": [
                                            "warning",
                                            "information",
                                            "question",
                                            "error",
                                            "calendar"
                                        ],
                                        "type": "string"
                                    },
                                    "account_notification[message]": {
                                        "description": "The message body of the notification.",
                                        "type": "string"
                                    },
                                    "account_notification[start_at]": {
                                        "description": "The start date and time of the notification in ISO8601 format.\ne.g. 2014-01-01T01:00Z",
                                        "format": "date-time",
                                        "type": "string"
                                    },
                                    "account_notification[subject]": {
                                        "description": "The subject of the notification.",
                                        "type": "string"
                                    },
                                    "account_notification_roles": {
                                        "description": "The role(s) to send global notification to.  Note:  ommitting this field will send to everyone\nExample:\n  account_notification_roles: [\"StudentEnrollment\", \"TeacherEnrollment\"]",
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Update a global notification",
                "tags": [
                    "account_notifications"
                ]
            }
        },
        "/v1/accounts/{account_id}/admins": {
            "get": {
                "deprecated": false,
                "description": "A paginated list of the admins in the account",
                "operationId": "list_account_admins",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "account_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Scope the results to those with user IDs equal to any of the IDs specified here.",
                        "explode": false,
                        "in": "query",
                        "name": "user_id",
                        "schema": {
                            "type": "string"
                        },
                        "style": "form"
                    },
                    {
                        "$ref": "#/components/parameters/pageParam"
                    },
                    {
                        "$ref": "#/components/parameters/perPageParam"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Admin"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "List account admins",
                "tags": [
                    "admins"
                ]
            },
            "post": {
                "deprecated": false,
                "description": "Flag an existing user as an admin within the account.",
                "operationId": "make_account_admin",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "account_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "properties": {
                                    "role": {
                                        "description": "[DEPRECATED] The user's admin relationship with the account will be\ncreated with the given role. Defaults to 'AccountAdmin'.",
                                        "type": "string"
                                    },
                                    "role_id": {
                                        "description": "The user's admin relationship with the account will be created with the\ngiven role. Defaults to the built-in role for 'AccountAdmin'.",
                                        "format": "int64",
                                        "type": "integer"
                                    },
                                    "send_confirmation": {
                                        "description": "Send a notification email to\nthe new admin if true. Default is true.",
                                        "type": "boolean"
                                    },
                                    "user_id": {
                                        "description": "The id of the user to promote.",
                                        "format": "int64",
                                        "type": "integer"
                                    }
                                },
                                "required": [
                                    "user_id"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Admin"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Make an account admin",
                "tags": [
                    "admins"
                ]
            }
        },
        "/v1/accounts/{account_id}/admins/{user_id}": {
            "delete": {
                "deprecated": false,
                "description": "Remove the rights associated with an account admin role from a user.",
                "operationId": "remove_account_admin",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "account_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "user_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "[DEPRECATED] Account role to remove from the user. Defaults to\n'AccountAdmin'. Any other account role must be specified explicitly.",
                        "in": "query",
                        "name": "role",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The user's admin relationship with the account will be created with the\ngiven role. Defaults to the built-in role for 'AccountAdmin'.",
                        "in": "query",
                        "name": "role_id",
                        "schema": {
                            "format": "int64",
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Admin"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Remove account admin",
                "tags": [
                    "admins"
                ]
            }
        },
        "/v1/accounts/{account_id}/analytics/completed/activity": {
            "get": {
                "deprecated": false,
                "description": "Returns page view hits summed across all courses in the department. Two\ngroupings of these counts are returned; one by day (+by_date+), the other\nby category (+by_category+). The possible categories are announcements,\nassignments, collaborations, conferences, discussions, files, general,\ngrades, groups, modules, other, pages, and quizzes.\n\nThis and the other department-level endpoints have three variations which\nall return the same style of data but for different subsets of courses. All\nshare the prefix /api/v1/accounts/<account_id>/analytics. The possible\nsuffixes are:\n\n * /current: includes all available courses in the default term\n * /completed: includes all concluded courses in the default term\n * /terms/<term_id>: includes all available or concluded courses in the\n   given term.\n\nCourses not yet offered or which have been deleted are never included.\n\n/current and /completed are intended for use when the account has only one\nterm. /terms/<term_id> is intended for use when the account has multiple\nterms.\n\nThe action follows the suffix.",
                "operationId": "get_department_level_participation_data_completed",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "account_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Get department-level participation data",
                "tags": [
                    "analytics"
                ]
            }
        },
        "/v1/accounts/{account_id}/analytics/completed/grades": {
            "get": {
                "deprecated": false,
                "description": "Returns the distribution of grades for students in courses in the\ndepartment.  Each data point is one student's current grade in one course;\nif a student is in multiple courses, he contributes one value per course,\nbut if he's enrolled multiple times in the same course (e.g. a lecture\nsection and a lab section), he only constributes on value for that course.\n\nGrades are binned to the nearest integer score; anomalous grades outside\nthe 0 to 100 range are ignored. The raw counts are returned, not yet\nnormalized by the total count.\n\nShares the same variations on endpoint as the participation data.",
                "operationId": "get_department_level_grade_data_completed",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "account_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Get department-level grade data",
                "tags": [
                    "analytics"
                ]
            }
        },
        "/v1/accounts/{account_id}/analytics/completed/statistics": {
            "get": {
                "deprecated": false,
                "description": "Returns numeric statistics about the department and term (or filter).\n\nShares the same variations on endpoint as the participation data.",
                "operationId": "get_department_level_statistics_completed",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "account_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Get department-level statistics",
                "tags": [
                    "analytics"
                ]
            }
        },
        "/v1/accounts/{account_id}/analytics/current/activity": {
            "get": {
                "deprecated": false,
                "description": "Returns page view hits summed across all courses in the department. Two\ngroupings of these counts are returned; one by day (+by_date+), the other\nby category (+by_category+). The possible categories are announcements,\nassignments, collaborations, conferences, discussions, files, general,\ngrades, groups, modules, other, pages, and quizzes.\n\nThis and the other department-level endpoints have three variations which\nall return the same style of data but for different subsets of courses. All\nshare the prefix /api/v1/accounts/<account_id>/analytics. The possible\nsuffixes are:\n\n * /current: includes all available courses in the default term\n * /completed: includes all concluded courses in the default term\n * /terms/<term_id>: includes all available or concluded courses in the\n   given term.\n\nCourses not yet offered or which have been deleted are never included.\n\n/current and /completed are intended for use when the account has only one\nterm. /terms/<term_id> is intended for use when the account has multiple\nterms.\n\nThe action follows the suffix.",
                "operationId": "get_department_level_participation_data_current",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "account_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Get department-level participation data",
                "tags": [
                    "analytics"
                ]
            }
        },
        "/v1/accounts/{account_id}/analytics/current/grades": {
            "get": {
                "deprecated": false,
                "description": "Returns the distribution of grades for students in courses in the\ndepartment.  Each data point is one student's current grade in one course;\nif a student is in multiple courses, he contributes one value per course,\nbut if he's enrolled multiple times in the same course (e.g. a lecture\nsection and a lab section), he only constributes on value for that course.\n\nGrades are binned to the nearest integer score; anomalous grades outside\nthe 0 to 100 range are ignored. The raw counts are returned, not yet\nnormalized by the total count.\n\nShares the same variations on endpoint as the participation data.",
                "operationId": "get_department_level_grade_data_current",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "account_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Get department-level grade data",
                "tags": [
                    "analytics"
                ]
            }
        },
        "/v1/accounts/{account_id}/analytics/current/statistics": {
            "get": {
                "deprecated": false,
                "description": "Returns numeric statistics about the department and term (or filter).\n\nShares the same variations on endpoint as the participation data.",
                "operationId": "get_department_level_statistics_current",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "account_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Get department-level statistics",
                "tags": [
                    "analytics"
                ]
            }
        },
        "/v1/accounts/{account_id}/analytics/terms/{term_id}/activity": {
            "get": {
                "deprecated": false,
                "description": "Returns page view hits summed across all courses in the department. Two\ngroupings of these counts are returned; one by day (+by_date+), the other\nby category (+by_category+). The possible categories are announcements,\nassignments, collaborations, conferences, discussions, files, general,\ngrades, groups, modules, other, pages, and quizzes.\n\nThis and the other department-level endpoints have three variations which\nall return the same style of data but for different subsets of courses. All\nshare the prefix /api/v1/accounts/<account_id>/analytics. The possible\nsuffixes are:\n\n * /current: includes all available courses in the default term\n * /completed: includes all concluded courses in the default term\n * /terms/<term_id>: includes all available or concluded courses in the\n   given term.\n\nCourses not yet offered or which have been deleted are never included.\n\n/current and /completed are intended for use when the account has only one\nterm. /terms/<term_id> is intended for use when the account has multiple\nterms.\n\nThe action follows the suffix.",
                "operationId": "get_department_level_participation_data_terms",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "account_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "term_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Get department-level participation data",
                "tags": [
                    "analytics"
                ]
            }
        },
        "/v1/accounts/{account_id}/analytics/terms/{term_id}/grades": {
            "get": {
                "deprecated": false,
                "description": "Returns the distribution of grades for students in courses in the\ndepartment.  Each data point is one student's current grade in one course;\nif a student is in multiple courses, he contributes one value per course,\nbut if he's enrolled multiple times in the same course (e.g. a lecture\nsection and a lab section), he only constributes on value for that course.\n\nGrades are binned to the nearest integer score; anomalous grades outside\nthe 0 to 100 range are ignored. The raw counts are returned, not yet\nnormalized by the total count.\n\nShares the same variations on endpoint as the participation data.",
                "operationId": "get_department_level_grade_data_terms",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "account_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "term_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Get department-level grade data",
                "tags": [
                    "analytics"
                ]
            }
        },
        "/v1/accounts/{account_id}/analytics/terms/{term_id}/statistics": {
            "get": {
                "deprecated": false,
                "description": "Returns numeric statistics about the department and term (or filter).\n\nShares the same variations on endpoint as the participation data.",
                "operationId": "get_department_level_statistics_terms",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "account_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "term_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Get department-level statistics",
                "tags": [
                    "analytics"
                ]
            }
        },
        "/v1/accounts/{account_id}/authentication_providers": {
            "get": {
                "deprecated": false,
                "description": "Returns a paginated list of authentication providers",
                "operationId": "list_authentication_providers",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "account_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/pageParam"
                    },
                    {
                        "$ref": "#/components/parameters/perPageParam"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/AuthenticationProvider"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "List authentication providers",
                "tags": [
                    "authentication_providers"
                ]
            },
            "post": {
                "deprecated": false,
                "description": "Add external authentication provider(s) for the account.\nServices may be CAS, Facebook, GitHub, Google, LDAP, LinkedIn,\nMicrosoft, OpenID Connect, SAML, or Twitter.\n\nEach authentication provider is specified as a set of parameters as\ndescribed below. A provider specification must include an 'auth_type'\nparameter with a value of 'canvas', 'cas', 'clever', 'facebook', 'github', 'google',\n'ldap', 'linkedin', 'microsoft', 'openid_connect', 'saml', or 'twitter'. The other\nrecognized parameters depend on this auth_type; unrecognized parameters are discarded.\nProvider specifications not specifying a valid auth_type are ignored.\n\nYou can set the 'position' for any configuration. The config in the 1st position\nis considered the default. You can set 'jit_provisioning' for any configuration\nbesides Canvas.\n\nFor Canvas, the additional recognized parameter is:\n\n- self_registration\n\n  'all', 'none', or 'observer' - who is allowed to register as a new user\n\nFor CAS, the additional recognized parameters are:\n\n- auth_base\n\n  The CAS server's URL.\n\n- log_in_url [Optional]\n\n  An alternate SSO URL for logging into CAS. You probably should not set\n  this.\n\nFor Clever, the additional recognized parameters are:\n\n- client_id [Required]\n\n  The Clever application's Client ID. Not available if configured globally\n  for Canvas.\n\n- client_secret [Required]\n\n  The Clever application's Client Secret. Not available if configured\n  globally for Canvas.\n\n- district_id [Optional]\n\n  A district's Clever ID. Leave this blank to let Clever handle the details\n  with its District Picker. This is required for Clever Instant Login to\n  work in a multi-tenant environment.\n\n- login_attribute [Optional]\n\n  The attribute to use to look up the user's login in Canvas. Either\n  'id' (the default), 'sis_id', 'email', 'student_number', or\n  'teacher_number'. Note that some fields may not be populated for\n  all users at Clever.\n\n- federated_attributes [Optional]\n\n  See FederatedAttributesConfig. Valid provider attributes are 'id',\n  'sis_id', 'email', 'student_number', and 'teacher_number'.\n\nFor Facebook, the additional recognized parameters are:\n\n- app_id [Required]\n\n  The Facebook App ID. Not available if configured globally for Canvas.\n\n- app_secret [Required]\n\n  The Facebook App Secret. Not available if configured globally for Canvas.\n\n- login_attribute [Optional]\n\n  The attribute to use to look up the user's login in Canvas. Either\n  'id' (the default), or 'email'\n\n- federated_attributes [Optional]\n\n  See FederatedAttributesConfig. Valid provider attributes are 'email',\n  'first_name', 'id', 'last_name', 'locale', and 'name'.\n\nFor GitHub, the additional recognized parameters are:\n\n- domain [Optional]\n\n  The domain of a GitHub Enterprise installation. I.e.\n  github.mycompany.com. If not set, it will default to the public\n  github.com.\n\n- client_id [Required]\n\n  The GitHub application's Client ID. Not available if configured globally\n  for Canvas.\n\n- client_secret [Required]\n\n  The GitHub application's Client Secret. Not available if configured\n  globally for Canvas.\n\n- login_attribute [Optional]\n\n  The attribute to use to look up the user's login in Canvas. Either\n  'id' (the default), or 'login'\n\n- federated_attributes [Optional]\n\n  See FederatedAttributesConfig. Valid provider attributes are 'email',\n  'id', 'login', and 'name'.\n\nFor Google, the additional recognized parameters are:\n\n- client_id [Required]\n\n  The Google application's Client ID. Not available if configured globally\n  for Canvas.\n\n- client_secret [Required]\n\n  The Google application's Client Secret. Not available if configured\n  globally for Canvas.\n\n- hosted_domain [Optional]\n\n  A Google Apps domain to restrict logins to. See\n  https://developers.google.com/identity/protocols/OpenIDConnect?hl=en#hd-param\n\n- login_attribute [Optional]\n\n  The attribute to use to look up the user's login in Canvas. Either\n  'sub' (the default), or 'email'\n\n- federated_attributes [Optional]\n\n  See FederatedAttributesConfig. Valid provider attributes are 'email',\n  'family_name', 'given_name', 'locale', 'name', and 'sub'.\n\nFor LDAP, the additional recognized parameters are:\n\n- auth_host\n\n  The LDAP server's URL.\n\n- auth_port [Optional, Integer]\n\n  The LDAP server's TCP port. (default: 389)\n\n- auth_over_tls [Optional]\n\n  Whether to use TLS. Can be 'simple_tls', or 'start_tls'. For backwards\n  compatibility, booleans are also accepted, with true meaning simple_tls.\n  If not provided, it will default to start_tls.\n\n- auth_base [Optional]\n\n  A default treebase parameter for searches performed against the LDAP\n  server.\n\n- auth_filter\n\n  LDAP search filter. Use !{{login}} as a placeholder for the username\n  supplied by the user. For example: \"(sAMAccountName=!{{login}})\".\n\n- identifier_format [Optional]\n\n  The LDAP attribute to use to look up the Canvas login. Omit to use\n  the username supplied by the user.\n\n- auth_username\n\n  Username\n\n- auth_password\n\n  Password\n\nFor LinkedIn, the additional recognized parameters are:\n\n- client_id [Required]\n\n  The LinkedIn application's Client ID. Not available if configured globally\n  for Canvas.\n\n- client_secret [Required]\n\n  The LinkedIn application's Client Secret. Not available if configured\n  globally for Canvas.\n\n- login_attribute [Optional]\n\n  The attribute to use to look up the user's login in Canvas. Either\n  'id' (the default), or 'emailAddress'\n\n- federated_attributes [Optional]\n\n  See FederatedAttributesConfig. Valid provider attributes are 'emailAddress',\n  'firstName', 'id', 'formattedName', and 'lastName'.\n\nFor Microsoft, the additional recognized parameters are:\n\n- application_id [Required]\n\n  The application's ID.\n\n- application_secret [Required]\n\n  The application's Client Secret (Password)\n\n- tenant [Optional]\n\n  See https://azure.microsoft.com/en-us/documentation/articles/active-directory-v2-protocols/\n  Valid values are 'common', 'organizations', 'consumers', or an Azure Active Directory Tenant\n  (as either a UUID or domain, such as contoso.onmicrosoft.com). Defaults to 'common'\n\n- login_attribute [Optional]\n\n  See https://azure.microsoft.com/en-us/documentation/articles/active-directory-v2-tokens/#idtokens\n  Valid values are 'sub', 'email', 'oid', or 'preferred_username'. Note\n  that email may not always be populated in the user's profile at\n  Microsoft. Oid will not be populated for personal Microsoft accounts.\n  Defaults to 'sub'\n\n- federated_attributes [Optional]\n\n  See FederatedAttributesConfig. Valid provider attributes are 'email',\n  'name', 'preferred_username', 'oid', and 'sub'.\n\nFor OpenID Connect, the additional recognized parameters are:\n\n- client_id [Required]\n\n  The application's Client ID.\n\n- client_secret [Required]\n\n  The application's Client Secret.\n\n- authorize_url [Required]\n\n  The URL for getting starting the OAuth 2.0 web flow\n\n- token_url [Required]\n\n  The URL for exchanging the OAuth 2.0 authorization code for an Access\n  Token and ID Token\n\n- scope [Optional]\n\n  Space separated additional scopes to request for the token. Note that\n  you need not specify the 'openid' scope, or any scopes that can be\n  automatically inferred by the rules defined at\n  http://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims\n\n- end_session_endpoint [Optional]\n\n  URL to send the end user to after logging out of Canvas. See\n  https://openid.net/specs/openid-connect-session-1_0.html#RPLogout\n\n- userinfo_endpoint [Optional]\n\n  URL to request additional claims from. If the initial ID Token received\n  from the provider cannot be used to satisfy the login_attribute and\n  all federated_attributes, this endpoint will be queried for additional\n  information.\n\n- login_attribute [Optional]\n\n  The attribute of the ID Token to look up the user's login in Canvas.\n  Defaults to 'sub'.\n\n- federated_attributes [Optional]\n\n  See FederatedAttributesConfig. Any value is allowed for the provider\n  attribute names, but standard claims are listed at\n  http://openid.net/specs/openid-connect-core-1_0.html#StandardClaims\n\nFor SAML, the additional recognized parameters are:\n\n- metadata [Optional]\n\n  An XML document to parse as SAML metadata, and automatically populate idp_entity_id,\n  log_in_url, log_out_url, certificate_fingerprint, and identifier_format\n\n- metadata_uri [Optional]\n\n  A URI to download the SAML metadata from, and automatically populate idp_entity_id,\n  log_in_url, log_out_url, certificate_fingerprint, and identifier_format. This URI\n  will also be saved, and the metadata periodically refreshed, automatically. If\n  the metadata contains multiple entities, also supply idp_entity_id to distinguish\n  which one you want (otherwise the only entity in the metadata will be inferred).\n  If you provide the URI 'urn:mace:incommon' or 'http://ukfederation.org.uk',\n  the InCommon or UK Access Management Federation metadata aggregate, respectively,\n  will be used instead, and additional validation checks will happen (including\n  validating that the metadata has been properly signed with the\n  appropriate key).\n\n- idp_entity_id\n\n  The SAML IdP's entity ID\n\n- log_in_url\n\n  The SAML service's SSO target URL\n\n- log_out_url [Optional]\n\n  The SAML service's SLO target URL\n\n- certificate_fingerprint\n\n  The SAML service's certificate fingerprint.\n\n- identifier_format\n\n  The SAML service's identifier format. Must be one of:\n\n  - urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress\n  - urn:oasis:names:tc:SAML:2.0:nameid-format:entity\n  - urn:oasis:names:tc:SAML:2.0:nameid-format:kerberos\n  - urn:oasis:names:tc:SAML:2.0:nameid-format:persistent\n  - urn:oasis:names:tc:SAML:2.0:nameid-format:transient\n  - urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified\n  - urn:oasis:names:tc:SAML:1.1:nameid-format:WindowsDomainQualifiedName\n  - urn:oasis:names:tc:SAML:1.1:nameid-format:X509SubjectName\n\n- requested_authn_context [Optional]\n\n  The SAML AuthnContext\n\n- sig_alg [Optional]\n\n  If set, +AuthnRequest+, +LogoutRequest+, and +LogoutResponse+ messages\n  are signed with the corresponding algorithm. Supported algorithms are:\n\n  - {http://www.w3.org/2000/09/xmldsig#rsa-sha1}\n  - {http://www.w3.org/2001/04/xmldsig-more#rsa-sha256}\n\n  RSA-SHA1 and RSA-SHA256 are acceptable aliases.\n\n- federated_attributes [Optional]\n\n  See FederatedAttributesConfig. Any value is allowed for the provider attribute names.\n\nFor Twitter, the additional recognized parameters are:\n\n- consumer_key [Required]\n\n  The Twitter Consumer Key. Not available if configured globally for Canvas.\n\n- consumer_secret [Required]\n\n  The Twitter Consumer Secret. Not available if configured globally for Canvas.\n\n- login_attribute [Optional]\n\n  The attribute to use to look up the user's login in Canvas. Either\n  'user_id' (the default), or 'screen_name'\n\n- parent_registration [Optional] - DEPRECATED 2017-11-03\n\n  Accepts a boolean value, true designates the authentication service\n  for use on parent registrations.  Only one service can be selected\n  at a time so if set to true all others will be set to false\n\n- federated_attributes [Optional]\n\n  See FederatedAttributesConfig. Valid provider attributes are 'name',\n  'screen_name', 'time_zone', and 'user_id'.",
                "operationId": "add_authentication_provider",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "account_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AuthenticationProvider"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Add authentication provider",
                "tags": [
                    "authentication_providers"
                ]
            }
        },
        "/v1/accounts/{account_id}/authentication_providers/{id}": {
            "delete": {
                "deprecated": false,
                "description": "Delete the config",
                "operationId": "delete_authentication_provider",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "account_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Delete authentication provider",
                "tags": [
                    "authentication_providers"
                ]
            },
            "get": {
                "deprecated": false,
                "description": "Get the specified authentication provider",
                "operationId": "get_authentication_provider",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "account_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AuthenticationProvider"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Get authentication provider",
                "tags": [
                    "authentication_providers"
                ]
            },
            "put": {
                "deprecated": false,
                "description": "Update an authentication provider using the same options as the create endpoint.\nYou can not update an existing provider to a new authentication type.",
                "operationId": "update_authentication_provider",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "account_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AuthenticationProvider"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Update authentication provider",
                "tags": [
                    "authentication_providers"
                ]
            }
        },
        "/v1/accounts/{account_id}/content_migrations": {
            "get": {
                "deprecated": false,
                "description": "Returns paginated content migrations",
                "operationId": "list_content_migrations_accounts",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "account_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/pageParam"
                    },
                    {
                        "$ref": "#/components/parameters/perPageParam"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/ContentMigration"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "List content migrations",
                "tags": [
                    "content_migrations"
                ]
            },
            "post": {
                "deprecated": false,
                "description": "Create a content migration. If the migration requires a file to be uploaded\nthe actual processing of the file will start once the file upload process is completed.\nFile uploading works as described in the {file:file_uploads.html File Upload Documentation}\nexcept that the values are set on a *pre_attachment* sub-hash.\n\nFor migrations that don't require a file to be uploaded, like course copy, the\nprocessing will begin as soon as the migration is created.\n\nYou can use the {api:ProgressController#show Progress API} to track the\nprogress of the migration. The migration's progress is linked to with the\n_progress_url_ value.\n\nThe two general workflows are:\n\nIf no file upload is needed:\n\n1. POST to create\n2. Use the {api:ProgressController#show Progress} specified in _progress_url_ to monitor progress\n\nFor file uploading:\n\n1. POST to create with file info in *pre_attachment*\n2. Do {file:file_uploads.html file upload processing} using the data in the *pre_attachment* data\n3. {api:ContentMigrationsController#show GET} the ContentMigration\n4. Use the {api:ProgressController#show Progress} specified in _progress_url_ to monitor progress\n\n (required if doing .zip file upload)",
                "operationId": "create_content_migration_accounts",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "account_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "properties": {
                                    "date_shift_options[day_substitutions][X]": {
                                        "description": "Move anything scheduled for day 'X' to the specified day. (0-Sunday,\n1-Monday, 2-Tuesday, 3-Wednesday, 4-Thursday, 5-Friday, 6-Saturday)",
                                        "format": "int64",
                                        "type": "integer"
                                    },
                                    "date_shift_options[new_end_date]": {
                                        "description": "The new end date for the source content/course",
                                        "format": "date",
                                        "type": "string"
                                    },
                                    "date_shift_options[new_start_date]": {
                                        "description": "The new start date for the content/course",
                                        "format": "date",
                                        "type": "string"
                                    },
                                    "date_shift_options[old_end_date]": {
                                        "description": "The original end date of the source content/course",
                                        "format": "date",
                                        "type": "string"
                                    },
                                    "date_shift_options[old_start_date]": {
                                        "description": "The original start date of the source content/course",
                                        "format": "date",
                                        "type": "string"
                                    },
                                    "date_shift_options[remove_dates]": {
                                        "description": "Whether to remove dates in the copied course. Cannot be used\nin conjunction with *shift_dates*.",
                                        "type": "boolean"
                                    },
                                    "date_shift_options[shift_dates]": {
                                        "description": "Whether to shift dates in the copied course",
                                        "type": "boolean"
                                    },
                                    "migration_type": {
                                        "description": "The type of the migration. Use the\n{api:ContentMigrationsController#available_migrators Migrator} endpoint to\nsee all available migrators. Default allowed values:\ncanvas_cartridge_importer, common_cartridge_importer,\ncourse_copy_importer, zip_file_importer, qti_converter, moodle_converter",
                                        "type": "string"
                                    },
                                    "pre_attachment[name]": {
                                        "description": "Required if uploading a file. This is the first step in uploading a file\nto the content migration. See the {file:file_uploads.html File Upload\nDocumentation} for details on the file upload workflow.",
                                        "type": "string"
                                    },
                                    "pre_attachment[todo]": {
                                        "description": "Other file upload properties, See {file:file_uploads.html File Upload\nDocumentation}",
                                        "type": "string"
                                    },
                                    "settings[file_url]": {
                                        "description": "A URL to download the file from. Must not require authentication.",
                                        "type": "string"
                                    },
                                    "settings[folder_id]": {
                                        "description": "The folder to unzip the .zip file into for a zip_file_import.",
                                        "type": "string"
                                    },
                                    "settings[overwrite_quizzes]": {
                                        "description": "Whether to overwrite quizzes with the same identifiers between content\npackages.",
                                        "type": "boolean"
                                    },
                                    "settings[question_bank_id]": {
                                        "description": "The existing question bank ID to import questions into if not specified in\nthe content package.",
                                        "format": "int64",
                                        "type": "integer"
                                    },
                                    "settings[question_bank_name]": {
                                        "description": "The question bank to import questions into if not specified in the content\npackage, if both bank id and name are set, id will take precedence.",
                                        "type": "string"
                                    },
                                    "settings[source_course_id]": {
                                        "description": "The course to copy from for a course copy migration. (required if doing\ncourse copy)",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "migration_type"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ContentMigration"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Create a content migration",
                "tags": [
                    "content_migrations"
                ]
            }
        },
        "/v1/accounts/{account_id}/content_migrations/migrators": {
            "get": {
                "deprecated": false,
                "description": "Lists the currently available migration types. These values may change.",
                "operationId": "list_migration_systems_accounts",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "account_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Migrator"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "List Migration Systems",
                "tags": [
                    "content_migrations"
                ]
            }
        },
        "/v1/accounts/{account_id}/content_migrations/{content_migration_id}/migration_issues": {
            "get": {
                "deprecated": false,
                "description": "Returns paginated migration issues",
                "operationId": "list_migration_issues_accounts",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "account_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "content_migration_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/pageParam"
                    },
                    {
                        "$ref": "#/components/parameters/perPageParam"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/MigrationIssue"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "List migration issues",
                "tags": [
                    "content_migrations"
                ]
            }
        },
        "/v1/accounts/{account_id}/content_migrations/{content_migration_id}/migration_issues/{id}": {
            "get": {
                "deprecated": false,
                "description": "Returns data on an individual migration issue",
                "operationId": "get_migration_issue_accounts",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "account_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "content_migration_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MigrationIssue"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Get a migration issue",
                "tags": [
                    "content_migrations"
                ]
            },
            "put": {
                "deprecated": false,
                "description": "Update the workflow_state of a migration issue",
                "operationId": "update_migration_issue_accounts",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "account_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "content_migration_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "workflow_state": {
                                        "description": "Set the workflow_state of the issue.",
                                        "enum": [
                                            "active",
                                            "resolved"
                                        ],
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "workflow_state"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MigrationIssue"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Update a migration issue",
                "tags": [
                    "content_migrations"
                ]
            }
        },
        "/v1/accounts/{account_id}/content_migrations/{id}": {
            "get": {
                "deprecated": false,
                "description": "Returns data on an individual content migration",
                "operationId": "get_content_migration_accounts",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "account_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ContentMigration"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Get a content migration",
                "tags": [
                    "content_migrations"
                ]
            },
            "put": {
                "deprecated": false,
                "description": "Update a content migration. Takes same arguments as create except that you\ncan't change the migration type. However, changing most settings after the\nmigration process has started will not do anything. Generally updating the\ncontent migration will be used when there is a file upload problem. If the\nfirst upload has a problem you can supply new _pre_attachment_ values to\nstart the process again.",
                "operationId": "update_content_migration_accounts",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "account_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ContentMigration"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Update a content migration",
                "tags": [
                    "content_migrations"
                ]
            }
        },
        "/v1/accounts/{account_id}/courses": {
            "post": {
                "deprecated": false,
                "description": "Create a new course",
                "operationId": "create_new_course",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "account_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "properties": {
                                    "course[allow_student_forum_attachments]": {
                                        "description": "If true, students can attach files to forum posts.",
                                        "type": "boolean"
                                    },
                                    "course[allow_student_wiki_edits]": {
                                        "description": "If true, students will be able to modify the course wiki.",
                                        "type": "boolean"
                                    },
                                    "course[allow_wiki_comments]": {
                                        "description": "If true, course members will be able to comment on wiki pages.",
                                        "type": "boolean"
                                    },
                                    "course[apply_assignment_group_weights]": {
                                        "description": "Set to true to weight final grade based on assignment groups percentages.",
                                        "type": "boolean"
                                    },
                                    "course[course_code]": {
                                        "description": "The course code for the course.",
                                        "type": "string"
                                    },
                                    "course[course_format]": {
                                        "description": "Optional. Specifies the format of the course. (Should be 'on_campus', 'online', or 'blended')",
                                        "type": "string"
                                    },
                                    "course[default_view]": {
                                        "description": "The type of page that users will see when they first visit the course\n* 'feed' Recent Activity Dashboard\n* 'modules' Course Modules/Sections Page\n* 'assignments' Course Assignments List\n* 'syllabus' Course Syllabus Page\nother types may be added in the future",
                                        "enum": [
                                            "feed",
                                            "wiki",
                                            "modules",
                                            "syllabus",
                                            "assignments"
                                        ],
                                        "type": "string"
                                    },
                                    "course[end_at]": {
                                        "description": "Course end date in ISO8601 format. e.g. 2011-01-01T01:00Z",
                                        "format": "date-time",
                                        "type": "string"
                                    },
                                    "course[grading_standard_id]": {
                                        "description": "The grading standard id to set for the course.  If no value is provided for this argument the current grading_standard will be un-set from this course.",
                                        "format": "int64",
                                        "type": "integer"
                                    },
                                    "course[hide_final_grades]": {
                                        "description": "If this option is set to true, the totals in student grades summary will\nbe hidden.",
                                        "type": "boolean"
                                    },
                                    "course[integration_id]": {
                                        "description": "The unique Integration identifier.",
                                        "type": "string"
                                    },
                                    "course[is_public]": {
                                        "description": "Set to true if course is public to both authenticated and unauthenticated users.",
                                        "type": "boolean"
                                    },
                                    "course[is_public_to_auth_users]": {
                                        "description": "Set to true if course is public only to authenticated users.",
                                        "type": "boolean"
                                    },
                                    "course[license]": {
                                        "description": "The name of the licensing. Should be one of the following abbreviations\n(a descriptive name is included in parenthesis for reference):\n- 'private' (Private Copyrighted)\n- 'cc_by_nc_nd' (CC Attribution Non-Commercial No Derivatives)\n- 'cc_by_nc_sa' (CC Attribution Non-Commercial Share Alike)\n- 'cc_by_nc' (CC Attribution Non-Commercial)\n- 'cc_by_nd' (CC Attribution No Derivatives)\n- 'cc_by_sa' (CC Attribution Share Alike)\n- 'cc_by' (CC Attribution)\n- 'public_domain' (Public Domain).",
                                        "type": "string"
                                    },
                                    "course[name]": {
                                        "description": "The name of the course. If omitted, the course will be named \"Unnamed\nCourse.\"",
                                        "type": "string"
                                    },
                                    "course[open_enrollment]": {
                                        "description": "Set to true if the course is open enrollment.",
                                        "type": "boolean"
                                    },
                                    "course[public_description]": {
                                        "description": "A publicly visible description of the course.",
                                        "type": "string"
                                    },
                                    "course[public_syllabus]": {
                                        "description": "Set to true to make the course syllabus public.",
                                        "type": "boolean"
                                    },
                                    "course[public_syllabus_to_auth]": {
                                        "description": "Set to true to make the course syllabus public for authenticated users.",
                                        "type": "boolean"
                                    },
                                    "course[restrict_enrollments_to_course_dates]": {
                                        "description": "Set to true to restrict user enrollments to the start and end dates of the\ncourse.",
                                        "type": "boolean"
                                    },
                                    "course[self_enrollment]": {
                                        "description": "Set to true if the course is self enrollment.",
                                        "type": "boolean"
                                    },
                                    "course[sis_course_id]": {
                                        "description": "The unique SIS identifier.",
                                        "type": "string"
                                    },
                                    "course[start_at]": {
                                        "description": "Course start date in ISO8601 format, e.g. 2011-01-01T01:00Z",
                                        "format": "date-time",
                                        "type": "string"
                                    },
                                    "course[syllabus_body]": {
                                        "description": "The syllabus body for the course",
                                        "type": "string"
                                    },
                                    "course[term_id]": {
                                        "description": "The unique ID of the term to create to course in.",
                                        "format": "int64",
                                        "type": "integer"
                                    },
                                    "course[time_zone]": {
                                        "description": "The time zone for the course. Allowed time zones are\n{http://www.iana.org/time-zones IANA time zones} or friendlier\n{http://api.rubyonrails.org/classes/ActiveSupport/TimeZone.html Ruby on Rails time zones}.",
                                        "type": "string"
                                    },
                                    "enable_sis_reactivation": {
                                        "description": "When true, will first try to re-activate a deleted course with matching sis_course_id if possible.",
                                        "type": "boolean"
                                    },
                                    "enroll_me": {
                                        "description": "Set to true to enroll the current user as the teacher.",
                                        "type": "boolean"
                                    },
                                    "offer": {
                                        "description": "If this option is set to true, the course will be available to students\nimmediately.",
                                        "type": "boolean"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Course"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Create a new course",
                "tags": [
                    "courses"
                ]
            },
            "put": {
                "deprecated": false,
                "description": "Update multiple courses in an account.  Operates asynchronously; use the {api:ProgressController#show progress endpoint}\nto query the status of an operation.\n\nThe action to take on each course.  Must be one of 'offer', 'conclude', 'delete', or 'undelete'.\n  * 'offer' makes a course visible to students. This action is also called \"publish\" on the web site.\n  * 'conclude' prevents future enrollments and makes a course read-only for all participants. The course still appears\n    in prior-enrollment lists.\n  * 'delete' completely removes the course from the web site (including course menus and prior-enrollment lists).\n    All enrollments are deleted. Course content may be physically deleted at a future date.\n  * 'undelete' attempts to recover a course that has been deleted. (Recovery is not guaranteed; please conclude\n    rather than delete a course if there is any possibility the course will be used again.) The recovered course\n    will be unpublished. Deleted enrollments will not be recovered.",
                "operationId": "update_courses",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "account_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "course_ids": {
                                        "description": "List of ids of courses to update. At most 500 courses may be updated in one call.",
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "event": {
                                        "description": "no description",
                                        "enum": [
                                            "offer",
                                            "conclude",
                                            "delete",
                                            "undelete"
                                        ],
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "course_ids",
                                    "event"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Progress"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Update courses",
                "tags": [
                    "courses"
                ]
            },
            "get": {
                "deprecated": false,
                "description": "Retrieve a paginated list of courses in this account.",
                "operationId": "get_all_courses_accounts",
                "tags": [
                    "courses"
                ],
                "parameters": [
                    {
                        "name": "account_id",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "type": "string"
                        },
                        "description": "The ID of the account"
                    },
                    {
                        "name": "with_enrollments",
                        "in": "query",
                        "schema": {
                            "type": "boolean"
                        },
                        "description": "Filter courses by enrollment status"
                    },
                    {
                        "name": "enrollment_type[]",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "teacher",
                                    "student",
                                    "ta",
                                    "observer",
                                    "designer"
                                ]
                            }
                        },
                        "style": "form"
                    },
                    {
                        "name": "published",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        },
                        "description": "If true, include only published courses. If false, exclude published courses. If not present, do not filter on published status."
                    },
                    {
                        "name": "completed",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        },
                        "description": "If true, include only completed courses (these may be in state ‘completed’, or their enrollment term may have ended). If false, exclude completed courses. If not present, do not filter on completed status."
                    },
                    {
                        "name": "blueprint",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        },
                        "description": "If true, include only blueprint courses. If false, exclude them. Ifnot present, do not filter on this basis."
                    },
                    {
                        "name": "blueprint_associated",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        },
                        "description": "If true, include only courses that inherit content from a blueprint course. If false, exclude them. If not present, do not filter on this basis."
                    },
                    {
                        "name": "public",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        },
                        "description": "If true, include only public courses. If false, exclude them. If not present, do not filter on this basis."
                    },
                    {
                        "name": "by_teachers[]",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer"
                            }
                        },
                        "style": "form",
                        "description": "List of User IDs of teachers; if supplied, include only courses taught by one of the referenced users."
                    },
                    {
                        "name": "by_subaccounts[]",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer"
                            }
                        },
                        "style": "form",
                        "description": "List of Account IDs; if supplied, include only courses associated with one of the referenced subaccounts"
                    },
                    {
                        "name": "hide_enrollmentless_courses",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        },
                        "description": "If present, only return courses that have at least one enrollment. Equivalent to ‘with_enrollments=true’; retained for compatibility."
                    },
                    {
                        "name": "state[]",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "created",
                                    "claimed",
                                    "available",
                                    "completed",
                                    "deleted",
                                    "all"
                                ]
                            }
                        },
                        "style": "form",
                        "description": "If set, only return courses that are in the given state(s). By default, all states but “deleted” are returned."
                    },
                    {
                        "name": "enrollment_term_id",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        },
                        "description": "If set, only includes courses from the specified term."
                    },
                    {
                        "name": "search_term",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string"
                        },
                        "description": "The partial course name, code, or full ID to match and return in the results list. Must be at least 3 characters."
                    },
                    {
                        "name": "include[]",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string",
                                "enum": [
                                    "syllabus_body",
                                    "term",
                                    "course_progress",
                                    "storage_quota_used_mb",
                                    "total_students",
                                    "teachers",
                                    "account_name",
                                    "concluded",
                                    "post_manually"
                                ]
                            }
                        },
                        "style": "form",
                        "description": "All explanations can be seen in the Course API index documentation"
                    },
                    {
                        "name": "sort",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "course_status",
                                "course_name",
                                "sis_course_id",
                                "teacher",
                                "account_name"
                            ]
                        },
                        "description": "The column to sort results by."
                    },
                    {
                        "name": "order",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "asc",
                                "desc"
                            ]
                        },
                        "description": "The order to sort the given column by."
                    },
                    {
                        "name": "search_by",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "enum": [
                                "course",
                                "teacher"
                            ]
                        },
                        "description": "The filter to search by. “course” searches for course names, course codes, and SIS IDs. “teacher” searches for teacher names"
                    },
                    {
                        "name": "starts_before",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        },
                        "description": "If set, only return courses that start before the value (inclusive) or their enrollment term starts before the value (inclusive) or both the course’s start_at and the enrollment term’s start_at are set to null. The value should be formatted as: yyyy-mm-dd or ISO 8601 YYYY-MM-DDTHH:MM:SSZ."
                    },
                    {
                        "name": "ends_after",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "format": "date-time"
                        },
                        "description": "If set, only return courses that end after the value (inclusive) or their enrollment term ends after the value (inclusive) or both the course’s end_at and the enrollment term’s end_at are set to null. The value should be formatted as: yyyy-mm-dd or ISO 8601 YYYY-MM-DDTHH:MM:SSZ."
                    },
                    {
                        "name": "homeroom",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        },
                        "description": "If set, only return homeroom courses."
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A list of courses",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/components/schemas/Course"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        "/v1/accounts/{account_id}/courses/{id}": {
            "get": {
                "deprecated": false,
                "description": "Return information on a single course. Accepts the same include[] parameters as the list action plus:",
                "operationId": "get_single_course_accounts",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "account_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "- \"all_courses\": Also search recently deleted courses.\n- \"permissions\": Include permissions the current user has\n  for the course.\n- \"observed_users\": include observed users in the enrollments\n- \"course_image\": Optional course image data for when there is a course image\n  and the course image feature flag has been enabled",
                        "explode": false,
                        "in": "query",
                        "name": "include",
                        "schema": {
                            "items": {
                                "type": "string",
                                "enum": [
                                    "needs_grading_count",
                                    "syllabus_body",
                                    "public_description",
                                    "total_scores",
                                    "current_grading_period_scores",
                                    "term",
                                    "account",
                                    "course_progress",
                                    "sections",
                                    "storage_quota_used_mb",
                                    "total_students",
                                    "passback_status",
                                    "favorites",
                                    "teachers",
                                    "observed_users",
                                    "all_courses",
                                    "permissions",
                                    "course_image"
                                ]
                            },
                            "type": "array"
                        },
                        "style": "form"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Course"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Get a single course",
                "tags": [
                    "courses"
                ]
            }
        },
        "/v1/accounts/{account_id}/developer_keys/{developer_key_id}/create_tool": {
            "post": {
                "deprecated": false,
                "description": "Creates context_external_tool from attached tool_configuration of\nthe provided developer_key if not already present in context.\nDeveloperKey must have a ToolConfiguration to create tool or 404 will be raised.\nWill return an existing ContextExternalTool if one already exists.",
                "operationId": "create_tool_from_toolconfiguration_accounts",
                "parameters": [
                    {
                        "description": "if account",
                        "in": "path",
                        "name": "account_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "no description",
                        "in": "path",
                        "name": "developer_key_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "properties": {
                                    "course_id": {
                                        "description": "if course",
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ContextExternalTool"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Create Tool from ToolConfiguration",
                "tags": [
                    "external_tools"
                ]
            }
        },
        "/v1/accounts/{account_id}/enrollments/{id}": {
            "get": {
                "deprecated": false,
                "description": "Get an Enrollment object by Enrollment ID",
                "operationId": "enrollment_by_id",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "account_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The ID of the enrollment object",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "format": "int64",
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Enrollment"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Enrollment by ID",
                "tags": [
                    "enrollments"
                ]
            }
        },
        "/v1/accounts/{account_id}/external_tools": {
            "get": {
                "deprecated": false,
                "description": "Returns the paginated list of external tools for the current context.\nSee the get request docs for a single tool for a list of properties on an external tool.",
                "operationId": "list_external_tools_accounts",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "account_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The partial name of the tools to match and return.",
                        "in": "query",
                        "name": "search_term",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "If true, then only tools that are meant to be selectable are returned",
                        "in": "query",
                        "name": "selectable",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "description": "If true, then include tools installed in all accounts above the current context",
                        "in": "query",
                        "name": "include_parents",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/pageParam"
                    },
                    {
                        "$ref": "#/components/parameters/perPageParam"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "List external tools",
                "tags": [
                    "external_tools"
                ]
            },
            "post": {
                "deprecated": false,
                "description": "Create an external tool in the specified course/account.\nThe created tool will be returned, see the \"show\" endpoint for an example.",
                "operationId": "create_external_tool_accounts",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "account_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "properties": {
                                    "account_navigation[display_type]": {
                                        "description": "The layout type to use when launching the tool. Must be\n\"full_width\", \"full_width_in_context\", \"borderless\", or \"default\"",
                                        "type": "string"
                                    },
                                    "account_navigation[enabled]": {
                                        "description": "Set this to enable this feature",
                                        "type": "boolean"
                                    },
                                    "account_navigation[selection_height]": {
                                        "description": "The height of the dialog the tool is launched in",
                                        "type": "string"
                                    },
                                    "account_navigation[selection_width]": {
                                        "description": "The width of the dialog the tool is launched in",
                                        "type": "string"
                                    },
                                    "account_navigation[text]": {
                                        "description": "The text that will show on the left-tab in the account navigation",
                                        "type": "string"
                                    },
                                    "account_navigation[url]": {
                                        "description": "The url of the external tool for account navigation",
                                        "type": "string"
                                    },
                                    "config_type": {
                                        "description": "Configuration can be passed in as CC xml instead of using query\nparameters. If this value is \"by_url\" or \"by_xml\" then an xml\nconfiguration will be expected in either the \"config_xml\" or \"config_url\"\nparameter. Note that the name parameter overrides the tool name provided\nin the xml",
                                        "type": "string"
                                    },
                                    "config_url": {
                                        "description": "URL where the server can retrieve an XML tool configuration, as specified\nin the CC xml specification. This is required if \"config_type\" is set to\n\"by_url\"",
                                        "type": "string"
                                    },
                                    "config_xml": {
                                        "description": "XML tool configuration, as specified in the CC xml specification. This is\nrequired if \"config_type\" is set to \"by_xml\"",
                                        "type": "string"
                                    },
                                    "consumer_key": {
                                        "description": "The consumer key for the external tool",
                                        "type": "string"
                                    },
                                    "course_home_sub_navigation[enabled]": {
                                        "description": "Set this to enable this feature",
                                        "type": "boolean"
                                    },
                                    "course_home_sub_navigation[icon_url]": {
                                        "description": "The url of the icon to show in the right-side course home navigation menu",
                                        "type": "string"
                                    },
                                    "course_home_sub_navigation[text]": {
                                        "description": "The text that will show on the right-side course home navigation menu",
                                        "type": "string"
                                    },
                                    "course_home_sub_navigation[url]": {
                                        "description": "The url of the external tool for right-side course home navigation menu",
                                        "type": "string"
                                    },
                                    "course_navigation[default]": {
                                        "description": "Whether the navigation option will show in the course by default or\nwhether the teacher will have to explicitly enable it",
                                        "type": "boolean"
                                    },
                                    "course_navigation[display_type]": {
                                        "description": "The layout type to use when launching the tool. Must be\n\"full_width\", \"full_width_in_context\", \"borderless\", or \"default\"",
                                        "type": "string"
                                    },
                                    "course_navigation[enabled]": {
                                        "description": "Set this to enable this feature",
                                        "type": "boolean"
                                    },
                                    "course_navigation[text]": {
                                        "description": "The text that will show on the left-tab in the course navigation",
                                        "type": "string"
                                    },
                                    "course_navigation[visibility]": {
                                        "description": "Who will see the navigation tab. \"admins\" for course admins, \"members\" for\nstudents, null for everyone",
                                        "enum": [
                                            "admins",
                                            "members"
                                        ],
                                        "type": "string"
                                    },
                                    "course_navigation[windowTarget]": {
                                        "description": "Determines how the navigation tab will be opened.\n\"_blank\"\tLaunches the external tool in a new window or tab.\n\"_self\"\t(Default) Launches the external tool in an iframe inside of Canvas.",
                                        "enum": [
                                            "_blank",
                                            "_self"
                                        ],
                                        "type": "string"
                                    },
                                    "custom_fields[field_name]": {
                                        "description": "Custom fields that will be sent to the tool consumer; can be used\nmultiple times",
                                        "type": "string"
                                    },
                                    "description": {
                                        "description": "A description of the tool",
                                        "type": "string"
                                    },
                                    "domain": {
                                        "description": "The domain to match links against. Either \"url\" or \"domain\" should be\nset, not both.",
                                        "type": "string"
                                    },
                                    "editor_button[enabled]": {
                                        "description": "Set this to enable this feature",
                                        "type": "boolean"
                                    },
                                    "editor_button[icon_url]": {
                                        "description": "The url of the icon to show in the WYSIWYG editor",
                                        "type": "string"
                                    },
                                    "editor_button[message_type]": {
                                        "description": "Set this to ContentItemSelectionRequest to tell the tool to use\ncontent-item; otherwise, omit",
                                        "type": "string"
                                    },
                                    "editor_button[selection_height]": {
                                        "description": "The height of the dialog the tool is launched in",
                                        "type": "string"
                                    },
                                    "editor_button[selection_width]": {
                                        "description": "The width of the dialog the tool is launched in",
                                        "type": "string"
                                    },
                                    "editor_button[url]": {
                                        "description": "The url of the external tool",
                                        "type": "string"
                                    },
                                    "homework_submission[enabled]": {
                                        "description": "Set this to enable this feature",
                                        "type": "boolean"
                                    },
                                    "homework_submission[message_type]": {
                                        "description": "Set this to ContentItemSelectionRequest to tell the tool to use\ncontent-item; otherwise, omit",
                                        "type": "string"
                                    },
                                    "homework_submission[text]": {
                                        "description": "The text that will show on the homework submission tab",
                                        "type": "string"
                                    },
                                    "homework_submission[url]": {
                                        "description": "The url of the external tool",
                                        "type": "string"
                                    },
                                    "icon_url": {
                                        "description": "The url of the icon to show for this tool",
                                        "type": "string"
                                    },
                                    "link_selection[enabled]": {
                                        "description": "Set this to enable this feature",
                                        "type": "boolean"
                                    },
                                    "link_selection[message_type]": {
                                        "description": "Set this to ContentItemSelectionRequest to tell the tool to use\ncontent-item; otherwise, omit",
                                        "type": "string"
                                    },
                                    "link_selection[text]": {
                                        "description": "The text that will show for the link selection text",
                                        "type": "string"
                                    },
                                    "link_selection[url]": {
                                        "description": "The url of the external tool",
                                        "type": "string"
                                    },
                                    "migration_selection[enabled]": {
                                        "description": "Set this to enable this feature",
                                        "type": "boolean"
                                    },
                                    "migration_selection[message_type]": {
                                        "description": "Set this to ContentItemSelectionRequest to tell the tool to use\ncontent-item; otherwise, omit",
                                        "type": "string"
                                    },
                                    "migration_selection[url]": {
                                        "description": "The url of the external tool",
                                        "type": "string"
                                    },
                                    "name": {
                                        "description": "The name of the tool",
                                        "type": "string"
                                    },
                                    "not_selectable": {
                                        "description": "Default: false, if set to true the tool won't show up in the external tool\nselection UI in modules and assignments",
                                        "type": "boolean"
                                    },
                                    "oauth_compliant": {
                                        "description": "Default: false, if set to true LTI query params will not be copied to the\npost body.",
                                        "type": "boolean"
                                    },
                                    "privacy_level": {
                                        "description": "What information to send to the external tool.",
                                        "enum": [
                                            "anonymous",
                                            "name_only",
                                            "public"
                                        ],
                                        "type": "string"
                                    },
                                    "resource_selection[enabled]": {
                                        "description": "Set this to enable this feature",
                                        "type": "boolean"
                                    },
                                    "resource_selection[icon_url]": {
                                        "description": "The url of the icon to show in the module external tool list",
                                        "type": "string"
                                    },
                                    "resource_selection[selection_height]": {
                                        "description": "The height of the dialog the tool is launched in",
                                        "type": "string"
                                    },
                                    "resource_selection[selection_width]": {
                                        "description": "The width of the dialog the tool is launched in",
                                        "type": "string"
                                    },
                                    "resource_selection[url]": {
                                        "description": "The url of the external tool",
                                        "type": "string"
                                    },
                                    "shared_secret": {
                                        "description": "The shared secret with the external tool",
                                        "type": "string"
                                    },
                                    "text": {
                                        "description": "The default text to show for this tool",
                                        "type": "string"
                                    },
                                    "tool_configuration[enabled]": {
                                        "description": "Set this to enable this feature",
                                        "type": "boolean"
                                    },
                                    "tool_configuration[message_type]": {
                                        "description": "Set this to ContentItemSelectionRequest to tell the tool to use\ncontent-item; otherwise, omit",
                                        "type": "string"
                                    },
                                    "tool_configuration[prefer_sis_email]": {
                                        "description": "Set this to default the lis_person_contact_email_primary to prefer\nprovisioned sis_email; otherwise, omit",
                                        "type": "boolean"
                                    },
                                    "tool_configuration[url]": {
                                        "description": "The url of the external tool",
                                        "type": "string"
                                    },
                                    "url": {
                                        "description": "The url to match links against. Either \"url\" or \"domain\" should be set,\nnot both.",
                                        "type": "string"
                                    },
                                    "user_navigation[enabled]": {
                                        "description": "Set this to enable this feature",
                                        "type": "boolean"
                                    },
                                    "user_navigation[text]": {
                                        "description": "The text that will show on the left-tab in the user navigation",
                                        "type": "string"
                                    },
                                    "user_navigation[url]": {
                                        "description": "The url of the external tool for user navigation",
                                        "type": "string"
                                    },
                                    "user_navigation[visibility]": {
                                        "description": "Who will see the navigation tab. \"admins\" for admins, \"public\" or\n\"members\" for everyone",
                                        "enum": [
                                            "admins",
                                            "members",
                                            "public"
                                        ],
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "consumer_key",
                                    "name",
                                    "privacy_level",
                                    "shared_secret"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Create an external tool",
                "tags": [
                    "external_tools"
                ]
            }
        },
        "/v1/accounts/{account_id}/external_tools/sessionless_launch": {
            "get": {
                "deprecated": false,
                "description": "Returns a sessionless launch url for an external tool.\n\nNOTE: Either the id or url must be provided unless launch_type is assessment or module_item.",
                "operationId": "get_sessionless_launch_url_for_external_tool_accounts",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "account_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The external id of the tool to launch.",
                        "in": "query",
                        "name": "id",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The LTI launch url for the external tool.",
                        "in": "query",
                        "name": "url",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The assignment id for an assignment launch. Required if launch_type is set to \"assessment\".",
                        "in": "query",
                        "name": "assignment_id",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The assignment id for a module item launch. Required if launch_type is set to \"module_item\".",
                        "in": "query",
                        "name": "module_item_id",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The type of launch to perform on the external tool. Placement names (eg. \"course_navigation\")\ncan also be specified to use the custom launch url for that placement; if done, the tool id\nmust be provided.",
                        "in": "query",
                        "name": "launch_type",
                        "schema": {
                            "enum": [
                                "assessment",
                                "module_item"
                            ],
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Get a sessionless launch url for an external tool.",
                "tags": [
                    "external_tools"
                ]
            }
        },
        "/v1/accounts/{account_id}/external_tools/{external_tool_id}": {
            "delete": {
                "deprecated": false,
                "description": "Remove the specified external tool",
                "operationId": "delete_external_tool_accounts",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "account_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "external_tool_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Delete an external tool",
                "tags": [
                    "external_tools"
                ]
            },
            "get": {
                "deprecated": false,
                "description": "Returns the specified external tool.",
                "operationId": "get_single_external_tool_accounts",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "account_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "external_tool_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Get a single external tool",
                "tags": [
                    "external_tools"
                ]
            },
            "put": {
                "deprecated": false,
                "description": "Update the specified external tool. Uses same parameters as create",
                "operationId": "edit_external_tool_accounts",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "account_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "external_tool_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Edit an external tool",
                "tags": [
                    "external_tools"
                ]
            }
        },
        "/v1/accounts/{account_id}/features": {
            "get": {
                "deprecated": false,
                "description": "A paginated list of all features that apply to a given Account, Course, or User.",
                "operationId": "list_features_accounts",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "account_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/pageParam"
                    },
                    {
                        "$ref": "#/components/parameters/perPageParam"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Feature"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "List features",
                "tags": [
                    "feature_flags"
                ]
            }
        },
        "/v1/accounts/{account_id}/features/enabled": {
            "get": {
                "deprecated": false,
                "description": "A paginated list of all features that are enabled on a given Account, Course, or User.\nOnly the feature names are returned.",
                "operationId": "list_enabled_features_accounts",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "account_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/pageParam"
                    },
                    {
                        "$ref": "#/components/parameters/perPageParam"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "List enabled features",
                "tags": [
                    "feature_flags"
                ]
            }
        },
        "/v1/accounts/{account_id}/features/flags/{feature}": {
            "delete": {
                "deprecated": false,
                "description": "Remove feature flag for a given Account, Course, or User.  (Note that the flag must\nbe defined on the Account, Course, or User directly.)  The object will then inherit\nthe feature flags from a higher account, if any exist.  If this flag was 'on' or 'off',\nthen lower-level account flags that were masked by this one will apply again.",
                "operationId": "remove_feature_flag_accounts",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "account_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "feature",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FeatureFlag"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Remove feature flag",
                "tags": [
                    "feature_flags"
                ]
            },
            "get": {
                "deprecated": false,
                "description": "Get the feature flag that applies to a given Account, Course, or User.\nThe flag may be defined on the object, or it may be inherited from a parent\naccount. You can look at the context_id and context_type of the returned object\nto determine which is the case. If these fields are missing, then the object\nis the global Canvas default.",
                "operationId": "get_feature_flag_accounts",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "account_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "feature",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FeatureFlag"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Get feature flag",
                "tags": [
                    "feature_flags"
                ]
            },
            "put": {
                "deprecated": false,
                "description": "Set a feature flag for a given Account, Course, or User. This call will fail if a parent account sets\na feature flag for the same feature in any state other than \"allowed\".",
                "operationId": "set_feature_flag_accounts",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "account_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "feature",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "state": {
                                        "description": "\"off\":: The feature is not available for the course, user, or account and sub-accounts.\n\"allowed\":: (valid only on accounts) The feature is off in the account, but may be enabled in\n            sub-accounts and courses by setting a feature flag on the sub-account or course.\n\"on\":: The feature is turned on unconditionally for the user, course, or account and sub-accounts.",
                                        "enum": [
                                            false,
                                            "allowed",
                                            true
                                        ],
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FeatureFlag"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Set feature flag",
                "tags": [
                    "feature_flags"
                ]
            }
        },
        "/v1/accounts/{account_id}/grading_periods": {
            "get": {
                "deprecated": false,
                "description": "Returns the paginated list of grading periods for the current course.",
                "operationId": "list_grading_periods_accounts",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "account_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/pageParam"
                    },
                    {
                        "$ref": "#/components/parameters/perPageParam"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/GradingPeriod"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "List grading periods",
                "tags": [
                    "grading_periods"
                ]
            }
        },
        "/v1/accounts/{account_id}/grading_periods/{id}": {
            "delete": {
                "deprecated": false,
                "description": "<b>204 No Content</b> response code is returned if the deletion was\nsuccessful.",
                "operationId": "delete_grading_period_accounts",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "account_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Delete a grading period",
                "tags": [
                    "grading_periods"
                ]
            }
        },
        "/v1/accounts/{account_id}/grading_standards": {
            "get": {
                "deprecated": false,
                "description": "Returns the paginated list of grading standards for the given context that are visible to the user.",
                "operationId": "list_grading_standards_available_in_context_accounts",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "account_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/pageParam"
                    },
                    {
                        "$ref": "#/components/parameters/perPageParam"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/GradingStandard"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "List the grading standards available in a context.",
                "tags": [
                    "grading_standards"
                ]
            },
            "post": {
                "deprecated": false,
                "description": "Create a new grading standard\n\nIf grading_scheme_entry arguments are omitted, then a default grading scheme\nwill be set. The default scheme is as follows:\n     \"A\" : 94,\n     \"A-\" : 90,\n     \"B+\" : 87,\n     \"B\" : 84,\n     \"B-\" : 80,\n     \"C+\" : 77,\n     \"C\" : 74,\n     \"C-\" : 70,\n     \"D+\" : 67,\n     \"D\" : 64,\n     \"D-\" : 61,\n     \"F\" : 0,",
                "operationId": "create_new_grading_standard_accounts",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "account_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "properties": {
                                    "grading_scheme_entry[name]": {
                                        "description": "The name for an entry value within a GradingStandard that describes the range of the value\ne.g. A-",
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "grading_scheme_entry[value]": {
                                        "description": "The value for the name of the entry within a GradingStandard.\nThe entry represents the lower bound of the range for the entry.\nThis range includes the value up to the next entry in the GradingStandard,\nor 100 if there is no upper bound. The lowest value will have a lower bound range of 0.\ne.g. 93",
                                        "items": {
                                            "type": "integer"
                                        },
                                        "type": "array"
                                    },
                                    "title": {
                                        "description": "The title for the Grading Standard.",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "grading_scheme_entry[name]",
                                    "grading_scheme_entry[value]",
                                    "title"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GradingStandard"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Create a new grading standard",
                "tags": [
                    "grading_standards"
                ]
            }
        },
        "/v1/accounts/{account_id}/grading_standards/{grading_standard_id}": {
            "get": {
                "deprecated": false,
                "description": "Returns a grading standard for the given context that is visible to the user.",
                "operationId": "get_single_grading_standard_in_context_accounts",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "account_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "grading_standard_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GradingStandard"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Get a single grading standard in a context.",
                "tags": [
                    "grading_standards"
                ]
            }
        },
        "/v1/accounts/{account_id}/group_categories": {
            "get": {
                "deprecated": false,
                "description": "Returns a paginated list of group categories in a context",
                "operationId": "list_group_categories_for_context_accounts",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "account_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/pageParam"
                    },
                    {
                        "$ref": "#/components/parameters/perPageParam"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/GroupCategory"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "List group categories for a context",
                "tags": [
                    "group_categories"
                ]
            },
            "post": {
                "deprecated": false,
                "description": "Create a new group category",
                "operationId": "create_group_category_accounts",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "account_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "properties": {
                                    "auto_leader": {
                                        "description": "Assigns group leaders automatically when generating and allocating students to groups\nValid values are:\n\"first\":: the first student to be allocated to a group is the leader\n\"random\":: a random student from all members is chosen as the leader",
                                        "enum": [
                                            "first",
                                            "random"
                                        ],
                                        "type": "string"
                                    },
                                    "create_group_count": {
                                        "description": "Create this number of groups (Course Only).",
                                        "format": "int64",
                                        "type": "integer"
                                    },
                                    "group_limit": {
                                        "description": "Limit the maximum number of users in each group (Course Only). Requires\nself signup.",
                                        "format": "int64",
                                        "type": "integer"
                                    },
                                    "name": {
                                        "description": "Name of the group category",
                                        "type": "string"
                                    },
                                    "self_signup": {
                                        "description": "Allow students to sign up for a group themselves (Course Only).\nvalid values are:\n\"enabled\":: allows students to self sign up for any group in course\n\"restricted\":: allows students to self sign up only for groups in the\n               same section null disallows self sign up",
                                        "enum": [
                                            "enabled",
                                            "restricted"
                                        ],
                                        "type": "string"
                                    },
                                    "sis_group_category_id": {
                                        "description": "The unique SIS identifier.",
                                        "type": "string"
                                    },
                                    "split_group_count": {
                                        "description": "(Deprecated)\nCreate this number of groups, and evenly distribute students\namong them. not allowed with \"enable_self_signup\". because\nthe group assignment happens synchronously, it's recommended\nthat you instead use the assign_unassigned_members endpoint.\n(Course Only)",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "name"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GroupCategory"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Create a Group Category",
                "tags": [
                    "group_categories"
                ]
            }
        },
        "/v1/accounts/{account_id}/groups": {
            "get": {
                "deprecated": false,
                "description": "Returns the paginated list of active groups in the given context that are visible to user.",
                "operationId": "list_groups_available_in_context_accounts",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "account_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Will only include groups that the user belongs to if this is set",
                        "in": "query",
                        "name": "only_own_groups",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "description": "- \"tabs\": Include the list of tabs configured for each group.  See the\n  {api:TabsController#index List available tabs API} for more information.",
                        "explode": false,
                        "in": "query",
                        "name": "include",
                        "schema": {
                            "items": {
                                "type": "string",
                                "enum": [
                                    "tabs"
                                ]
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "$ref": "#/components/parameters/pageParam"
                    },
                    {
                        "$ref": "#/components/parameters/perPageParam"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Group"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "List the groups available in a context.",
                "tags": [
                    "groups"
                ]
            }
        },
        "/v1/accounts/{account_id}/help_links": {
            "get": {
                "deprecated": false,
                "description": "Returns the help links for that account",
                "operationId": "get_help_links",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "account_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HelpLinks"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Get help links",
                "tags": [
                    "accounts"
                ]
            }
        },
        "/v1/accounts/{account_id}/logins": {
            "get": {
                "deprecated": false,
                "description": "Given a user ID, return a paginated list of that user's logins for the given account.",
                "operationId": "list_user_logins_accounts",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "account_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/pageParam"
                    },
                    {
                        "$ref": "#/components/parameters/perPageParam"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "List user logins",
                "tags": [
                    "logins"
                ]
            },
            "post": {
                "deprecated": false,
                "description": "Create a new login for an existing user in the given account.",
                "operationId": "create_user_login",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "account_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "properties": {
                                    "login[authentication_provider_id]": {
                                        "description": "The authentication provider this login is associated with. Logins\nassociated with a specific provider can only be used with that provider.\nLegacy providers (LDAP, CAS, SAML) will search for logins associated with\nthem, or unassociated logins. New providers will only search for logins\nexplicitly associated with them. This can be the integer ID of the\nprovider, or the type of the provider (in which case, it will find the\nfirst matching provider).",
                                        "type": "string"
                                    },
                                    "login[integration_id]": {
                                        "description": "Integration ID for the login. To set this parameter, the caller must be able to\nmanage SIS permissions on the account. The Integration ID is a secondary\nidentifier useful for more complex SIS integrations.",
                                        "type": "string"
                                    },
                                    "login[password]": {
                                        "description": "The new login's password.",
                                        "type": "string"
                                    },
                                    "login[sis_user_id]": {
                                        "description": "SIS ID for the login. To set this parameter, the caller must be able to\nmanage SIS permissions on the account.",
                                        "type": "string"
                                    },
                                    "login[unique_id]": {
                                        "description": "The unique ID for the new login.",
                                        "type": "string"
                                    },
                                    "user[id]": {
                                        "description": "The ID of the user to create the login for.",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "login[unique_id]",
                                    "user[id]"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Create a user login",
                "tags": [
                    "logins"
                ]
            }
        },
        "/v1/accounts/{account_id}/logins/{id}": {
            "put": {
                "deprecated": false,
                "description": "Update an existing login for a user in the given account.",
                "operationId": "edit_user_login",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "account_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "login[integration_id]": {
                                        "description": "Integration ID for the login. To set this parameter, the caller must be able to\nmanage SIS permissions on the account. The Integration ID is a secondary\nidentifier useful for more complex SIS integrations.",
                                        "type": "string"
                                    },
                                    "login[password]": {
                                        "description": "The new password for the login. Can only be set by an admin user if admins\nare allowed to change passwords for the account.",
                                        "type": "string"
                                    },
                                    "login[sis_user_id]": {
                                        "description": "SIS ID for the login. To set this parameter, the caller must be able to\nmanage SIS permissions on the account.",
                                        "type": "string"
                                    },
                                    "login[unique_id]": {
                                        "description": "The new unique ID for the login.",
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Edit a user login",
                "tags": [
                    "logins"
                ]
            }
        },
        "/v1/accounts/{account_id}/outcome_group_links": {
            "get": {
                "deprecated": false,
                "operationId": "get_all_outcome_links_for_context_accounts",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "account_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The detail level of the outcomes. Defaults to \"abbrev\".\nSpecify \"full\" for more information.",
                        "in": "query",
                        "name": "outcome_style",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The detail level of the outcome groups. Defaults to \"abbrev\".\nSpecify \"full\" for more information.",
                        "in": "query",
                        "name": "outcome_group_style",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/OutcomeLink"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Get all outcome links for context",
                "tags": [
                    "outcome_groups"
                ]
            }
        },
        "/v1/accounts/{account_id}/outcome_groups": {
            "get": {
                "deprecated": false,
                "operationId": "get_all_outcome_groups_for_context_accounts",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "account_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/OutcomeGroup"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Get all outcome groups for context",
                "tags": [
                    "outcome_groups"
                ]
            }
        },
        "/v1/accounts/{account_id}/outcome_groups/{id}": {
            "delete": {
                "deprecated": false,
                "description": "Deleting an outcome group deletes descendant outcome groups and outcome\nlinks. The linked outcomes themselves are only deleted if all links to the\noutcome were deleted.\n\nAligned outcomes cannot be deleted; as such, if all remaining links to an\naligned outcome are included in this group's descendants, the group\ndeletion will fail.",
                "operationId": "delete_outcome_group_accounts",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "account_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OutcomeGroup"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Delete an outcome group",
                "tags": [
                    "outcome_groups"
                ]
            },
            "get": {
                "deprecated": false,
                "operationId": "show_outcome_group_accounts",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "account_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OutcomeGroup"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Show an outcome group",
                "tags": [
                    "outcome_groups"
                ]
            },
            "put": {
                "deprecated": false,
                "description": "Modify an existing outcome group. Fields not provided are left as is;\nunrecognized fields are ignored.\n\nWhen changing the parent outcome group, the new parent group must belong to\nthe same context as this outcome group, and must not be a descendant of\nthis outcome group (i.e. no cycles allowed).",
                "operationId": "update_outcome_group_accounts",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "account_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "description": {
                                        "description": "The new outcome group description.",
                                        "type": "string"
                                    },
                                    "parent_outcome_group_id": {
                                        "description": "The id of the new parent outcome group.",
                                        "format": "int64",
                                        "type": "integer"
                                    },
                                    "title": {
                                        "description": "The new outcome group title.",
                                        "type": "string"
                                    },
                                    "vendor_guid": {
                                        "description": "A custom GUID for the learning standard.",
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OutcomeGroup"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Update an outcome group",
                "tags": [
                    "outcome_groups"
                ]
            }
        },
        "/v1/accounts/{account_id}/outcome_groups/{id}/import": {
            "post": {
                "deprecated": false,
                "description": "Creates a new subgroup of the outcome group with the same title and\ndescription as the source group, then creates links in that new subgroup to\nthe same outcomes that are linked in the source group. Recurses on the\nsubgroups of the source group, importing them each in turn into the new\nsubgroup.\n\nAllows you to copy organizational structure, but does not create copies of\nthe outcomes themselves, only new links.\n\nThe source group must be either global, from the same context as this\noutcome group, or from an associated account. The source group cannot be\nthe root outcome group of its context.",
                "operationId": "import_outcome_group_accounts",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "account_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "properties": {
                                    "async": {
                                        "description": "If true, perform action asynchronously.  In that case, this endpoint\nwill return a Progress object instead of an OutcomeGroup.\nUse the {api:ProgressController#show progress endpoint}\nto query the status of the operation.  The imported outcome group id\nand url will be returned in the results of the Progress object\nas \"outcome_group_id\" and \"outcome_group_url\"",
                                        "type": "boolean"
                                    },
                                    "source_outcome_group_id": {
                                        "description": "The ID of the source outcome group.",
                                        "format": "int64",
                                        "type": "integer"
                                    }
                                },
                                "required": [
                                    "source_outcome_group_id"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OutcomeGroup"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Import an outcome group",
                "tags": [
                    "outcome_groups"
                ]
            }
        },
        "/v1/accounts/{account_id}/outcome_groups/{id}/outcomes": {
            "get": {
                "deprecated": false,
                "description": "A paginated list of the immediate OutcomeLink children of the outcome group.",
                "operationId": "list_linked_outcomes_accounts",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "account_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The detail level of the outcomes. Defaults to \"abbrev\".\nSpecify \"full\" for more information.",
                        "in": "query",
                        "name": "outcome_style",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/pageParam"
                    },
                    {
                        "$ref": "#/components/parameters/perPageParam"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/OutcomeLink"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "List linked outcomes",
                "tags": [
                    "outcome_groups"
                ]
            },
            "post": {
                "deprecated": false,
                "description": "Link an outcome into the outcome group. The outcome to link can either be\nspecified by a PUT to the link URL for a specific outcome (the outcome_id\nin the PUT URLs) or by supplying the information for a new outcome (title,\ndescription, ratings, mastery_points) in a POST to the collection.\n\nIf linking an existing outcome, the outcome_id must identify an outcome\navailable to this context; i.e. an outcome owned by this group's context,\nan outcome owned by an associated account, or a global outcome. With\noutcome_id present, any other parameters (except move_from) are ignored.\n\nIf defining a new outcome, the outcome is created in the outcome group's\ncontext using the provided title, description, ratings, and mastery points;\nthe title is required but all other fields are optional. The new outcome\nis then linked into the outcome group.\n\nIf ratings are provided when creating a new outcome, an embedded rubric\ncriterion is included in the new outcome. This criterion's mastery_points\ndefault to the maximum points in the highest rating if not specified in the\nmastery_points parameter. Any ratings lacking a description are given a\ndefault of \"No description\". Any ratings lacking a point value are given a\ndefault of 0. If no ratings are provided, the mastery_points parameter is\nignored.",
                "operationId": "create_link_outcome_accounts",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "account_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "properties": {
                                    "calculation_int": {
                                        "description": "The new calculation int.  Only applies if the calculation_method is \"decaying_average\" or \"n_mastery\"",
                                        "format": "int64",
                                        "type": "integer"
                                    },
                                    "calculation_method": {
                                        "description": "The new calculation method.  Defaults to \"highest\"",
                                        "enum": [
                                            "decaying_average",
                                            "n_mastery",
                                            "latest",
                                            "highest"
                                        ],
                                        "type": "string"
                                    },
                                    "description": {
                                        "description": "The description of the new outcome.",
                                        "type": "string"
                                    },
                                    "display_name": {
                                        "description": "A friendly name shown in reports for outcomes with cryptic titles,\nsuch as common core standards names.",
                                        "type": "string"
                                    },
                                    "mastery_points": {
                                        "description": "The mastery threshold for the embedded rubric criterion.",
                                        "format": "int64",
                                        "type": "integer"
                                    },
                                    "move_from": {
                                        "description": "The ID of the old outcome group. Only used if outcome_id is present.",
                                        "format": "int64",
                                        "type": "integer"
                                    },
                                    "outcome_id": {
                                        "description": "The ID of the existing outcome to link.",
                                        "format": "int64",
                                        "type": "integer"
                                    },
                                    "ratings[description]": {
                                        "description": "The description of a rating level for the embedded rubric criterion.",
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "ratings[points]": {
                                        "description": "The points corresponding to a rating level for the embedded rubric criterion.",
                                        "items": {
                                            "type": "integer"
                                        },
                                        "type": "array"
                                    },
                                    "title": {
                                        "description": "The title of the new outcome. Required if outcome_id is absent.",
                                        "type": "string"
                                    },
                                    "vendor_guid": {
                                        "description": "A custom GUID for the learning standard.",
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OutcomeLink"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Create/link an outcome",
                "tags": [
                    "outcome_groups"
                ]
            }
        },
        "/v1/accounts/{account_id}/outcome_groups/{id}/outcomes/{outcome_id}": {
            "delete": {
                "deprecated": false,
                "description": "Unlinking an outcome only deletes the outcome itself if this was the last\nlink to the outcome in any group in any context. Aligned outcomes cannot be\ndeleted; as such, if this is the last link to an aligned outcome, the\nunlinking will fail.",
                "operationId": "unlink_outcome_accounts",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "account_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "outcome_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OutcomeLink"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Unlink an outcome",
                "tags": [
                    "outcome_groups"
                ]
            },
            "put": {
                "deprecated": false,
                "description": "Link an outcome into the outcome group. The outcome to link can either be\nspecified by a PUT to the link URL for a specific outcome (the outcome_id\nin the PUT URLs) or by supplying the information for a new outcome (title,\ndescription, ratings, mastery_points) in a POST to the collection.\n\nIf linking an existing outcome, the outcome_id must identify an outcome\navailable to this context; i.e. an outcome owned by this group's context,\nan outcome owned by an associated account, or a global outcome. With\noutcome_id present, any other parameters (except move_from) are ignored.\n\nIf defining a new outcome, the outcome is created in the outcome group's\ncontext using the provided title, description, ratings, and mastery points;\nthe title is required but all other fields are optional. The new outcome\nis then linked into the outcome group.\n\nIf ratings are provided when creating a new outcome, an embedded rubric\ncriterion is included in the new outcome. This criterion's mastery_points\ndefault to the maximum points in the highest rating if not specified in the\nmastery_points parameter. Any ratings lacking a description are given a\ndefault of \"No description\". Any ratings lacking a point value are given a\ndefault of 0. If no ratings are provided, the mastery_points parameter is\nignored.",
                "operationId": "create_link_outcome_accounts_outcome_id",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "account_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The ID of the existing outcome to link.",
                        "in": "path",
                        "name": "outcome_id",
                        "required": true,
                        "schema": {
                            "format": "int64",
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "calculation_int": {
                                        "description": "The new calculation int.  Only applies if the calculation_method is \"decaying_average\" or \"n_mastery\"",
                                        "format": "int64",
                                        "type": "integer"
                                    },
                                    "calculation_method": {
                                        "description": "The new calculation method.  Defaults to \"highest\"",
                                        "enum": [
                                            "decaying_average",
                                            "n_mastery",
                                            "latest",
                                            "highest"
                                        ],
                                        "type": "string"
                                    },
                                    "description": {
                                        "description": "The description of the new outcome.",
                                        "type": "string"
                                    },
                                    "display_name": {
                                        "description": "A friendly name shown in reports for outcomes with cryptic titles,\nsuch as common core standards names.",
                                        "type": "string"
                                    },
                                    "mastery_points": {
                                        "description": "The mastery threshold for the embedded rubric criterion.",
                                        "format": "int64",
                                        "type": "integer"
                                    },
                                    "move_from": {
                                        "description": "The ID of the old outcome group. Only used if outcome_id is present.",
                                        "format": "int64",
                                        "type": "integer"
                                    },
                                    "ratings[description]": {
                                        "description": "The description of a rating level for the embedded rubric criterion.",
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "ratings[points]": {
                                        "description": "The points corresponding to a rating level for the embedded rubric criterion.",
                                        "items": {
                                            "type": "integer"
                                        },
                                        "type": "array"
                                    },
                                    "title": {
                                        "description": "The title of the new outcome. Required if outcome_id is absent.",
                                        "type": "string"
                                    },
                                    "vendor_guid": {
                                        "description": "A custom GUID for the learning standard.",
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OutcomeLink"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Create/link an outcome",
                "tags": [
                    "outcome_groups"
                ]
            }
        },
        "/v1/accounts/{account_id}/outcome_groups/{id}/subgroups": {
            "get": {
                "deprecated": false,
                "description": "A paginated list of the immediate OutcomeGroup children of the outcome group.",
                "operationId": "list_subgroups_accounts",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "account_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/pageParam"
                    },
                    {
                        "$ref": "#/components/parameters/perPageParam"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/OutcomeGroup"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "List subgroups",
                "tags": [
                    "outcome_groups"
                ]
            },
            "post": {
                "deprecated": false,
                "description": "Creates a new empty subgroup under the outcome group with the given title\nand description.",
                "operationId": "create_subgroup_accounts",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "account_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "properties": {
                                    "description": {
                                        "description": "The description of the new outcome group.",
                                        "type": "string"
                                    },
                                    "title": {
                                        "description": "The title of the new outcome group.",
                                        "type": "string"
                                    },
                                    "vendor_guid": {
                                        "description": "A custom GUID for the learning standard",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "title"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OutcomeGroup"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Create a subgroup",
                "tags": [
                    "outcome_groups"
                ]
            }
        },
        "/v1/accounts/{account_id}/outcome_imports": {
            "post": {
                "deprecated": false,
                "description": "Import outcomes into Canvas.\n\nFor more information on the format that's expected here, please see the\n\"Outcomes CSV\" section in the API docs.",
                "operationId": "import_outcomes_accounts",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "account_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "properties": {
                                    "attachment": {
                                        "description": "There are two ways to post outcome import data - either via a\napplication/x-www-form-urlencoded form-field-style attachment, or via a non-multipart\nraw post request.\n\n'attachment' is required for application/x-www-form-urlencoded style posts. Assumed to\nbe outcome data from a file upload form field named 'attachment'.\n\nExamples:\n  curl -F attachment=@<filename> -H \"Authorization: Bearer <token>\" \\\n      'https://<canvas>/api/v1/accounts/<account_id>/outcome_imports?import_type=instructure_csv'\n  curl -F attachment=@<filename> -H \"Authorization: Bearer <token>\" \\\n      'https://<canvas>/api/v1/courses/<course_id>/outcome_imports?import_type=instructure_csv'\n\nIf you decide to do a raw post, you can skip the 'attachment' argument,\nbut you will then be required to provide a suitable Content-Type header.\nYou are encouraged to also provide the 'extension' argument.\n\nExamples:\n  curl -H 'Content-Type: text/csv' --data-binary @<filename>.csv \\\n      -H \"Authorization: Bearer <token>\" \\\n      'https://<canvas>/api/v1/accounts/<account_id>/outcome_imports?import_type=instructure_csv'\n\n  curl -H 'Content-Type: text/csv' --data-binary @<filename>.csv \\\n      -H \"Authorization: Bearer <token>\" \\\n      'https://<canvas>/api/v1/courses/<course_id>/outcome_imports?import_type=instructure_csv'",
                                        "type": "string"
                                    },
                                    "extension": {
                                        "description": "Recommended for raw post request style imports. This field will be used to\ndistinguish between csv and other file format extensions that\nwould usually be provided with the filename in the multipart post request\nscenario. If not provided, this value will be inferred from the\nContent-Type, falling back to csv-file format if all else fails.",
                                        "type": "string"
                                    },
                                    "import_type": {
                                        "description": "Choose the data format for reading outcome data. With a standard Canvas\ninstall, this option can only be 'instructure_csv', and if unprovided,\nwill be assumed to be so. Can be part of the query string.",
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OutcomeImport"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Import Outcomes",
                "tags": [
                    "outcome_imports"
                ]
            }
        },
        "/v1/accounts/{account_id}/outcome_imports/{id}": {
            "get": {
                "deprecated": false,
                "description": "Get the status of an already created Outcome import. Pass 'latest' for the outcome import id\nfor the latest import.\n\n  Examples:\n    curl 'https://<canvas>/api/v1/accounts/<account_id>/outcome_imports/<outcome_import_id>' \\\n        -H \"Authorization: Bearer <token>\"\n    curl 'https://<canvas>/api/v1/courses/<course_id>/outcome_imports/<outcome_import_id>' \\\n        -H \"Authorization: Bearer <token>\"",
                "operationId": "get_outcome_import_status_accounts",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "account_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OutcomeImport"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Get Outcome import status",
                "tags": [
                    "outcome_imports"
                ]
            }
        },
        "/v1/accounts/{account_id}/outcome_proficiency": {
            "get": {
                "deprecated": false,
                "description": "Get account-level proficiency ratings. If not defined for this account,\nit will return proficiency ratings for the nearest super-account with ratings defined.\nWill return 404 if none found.\n\n  Examples:\n    curl https://<canvas>/api/v1/accounts/<account_id>/outcome_proficiency \\\n        -H 'Authorization: Bearer <token>'",
                "operationId": "get_proficiency_ratings",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "account_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Proficiency"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Get proficiency ratings",
                "tags": [
                    "proficiency_ratings"
                ]
            },
            "post": {
                "deprecated": false,
                "description": "Create or update account-level proficiency ratings. These ratings will apply to all\nsub-accounts, unless they have their own account-level proficiency ratings defined.",
                "operationId": "create_update_proficiency_ratings",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "account_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "properties": {
                                    "ratings[color]": {
                                        "description": "The color associated with the rating level. Should be a hex color code like '00FFFF'.",
                                        "items": {
                                            "type": "integer"
                                        },
                                        "type": "array"
                                    },
                                    "ratings[description]": {
                                        "description": "The description of the rating level.",
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "ratings[mastery]": {
                                        "description": "Indicates the rating level where mastery is first achieved. Only one rating in a proficiency should be marked for mastery.",
                                        "items": {
                                            "type": "integer"
                                        },
                                        "type": "array"
                                    },
                                    "ratings[points]": {
                                        "description": "The non-negative number of points of the rating level. Points across ratings should be strictly decreasing in value.",
                                        "items": {
                                            "type": "integer"
                                        },
                                        "type": "array"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Proficiency"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Create/update proficiency ratings",
                "tags": [
                    "proficiency_ratings"
                ]
            }
        },
        "/v1/accounts/{account_id}/permissions": {
            "get": {
                "deprecated": false,
                "description": "Returns permission information for the calling user and the given account.\nYou may use `self` as the account id to check permissions against the domain root account.\nThe caller must have an account role or admin (teacher/TA/designer) enrollment in a course\nin the account.\n\nSee also the {api:CoursesController#permissions Course} and {api:GroupsController#permissions Group}\ncounterparts.",
                "operationId": "account_permissions",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "account_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "List of permissions to check against the authenticated user.\nPermission names are documented in the {api:RoleOverridesController#add_role Create a role} endpoint.",
                        "explode": false,
                        "in": "query",
                        "name": "permissions",
                        "schema": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Permissions",
                "tags": [
                    "accounts"
                ]
            }
        },
        "/v1/accounts/{account_id}/reports": {
            "get": {
                "deprecated": false,
                "description": "Returns a paginated list of reports for the current context.",
                "operationId": "list_available_reports",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "account_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/pageParam"
                    },
                    {
                        "$ref": "#/components/parameters/perPageParam"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "List Available Reports",
                "tags": [
                    "account_reports"
                ]
            }
        },
        "/v1/accounts/{account_id}/reports/{report}": {
            "get": {
                "deprecated": false,
                "description": "Shows all reports that have been run for the account of a specific type.",
                "operationId": "index_of_reports",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "account_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "report",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Report"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Index of Reports",
                "tags": [
                    "account_reports"
                ]
            },
            "post": {
                "deprecated": false,
                "description": "Generates a report instance for the account. Note that \"report\" in the\nrequest must match one of the available report names. To fetch a list of\navailable report names and parameters for each report (including whether or\nnot those parameters are required), see\n{api:AccountReportsController#available_reports List Available Reports}.",
                "operationId": "start_report",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "account_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "report",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "properties": {
                                    "parameters": {
                                        "description": "The parameters will vary for each report. To fetch a list\nof available parameters for each report, see {api:AccountReportsController#available_reports List Available Reports}.\nA few example parameters have been provided below. Note that the example\nparameters provided below may not be valid for every report.",
                                        "type": "string"
                                    },
                                    "parameters[course_id]": {
                                        "description": "The id of the course to report on.\nNote: this parameter has been listed to serve as an example and may not be\nvalid for every report.",
                                        "format": "int64",
                                        "type": "integer"
                                    },
                                    "parameters[users]": {
                                        "description": "If true, user data will be included. If\nfalse, user data will be omitted. Note: this parameter has been listed to\nserve as an example and may not be valid for every report.",
                                        "type": "boolean"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Report"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Start a Report",
                "tags": [
                    "account_reports"
                ]
            }
        },
        "/v1/accounts/{account_id}/reports/{report}/{id}": {
            "delete": {
                "deprecated": false,
                "description": "Deletes a generated report instance.",
                "operationId": "delete_report",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "account_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "report",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Report"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Delete a Report",
                "tags": [
                    "account_reports"
                ]
            },
            "get": {
                "deprecated": false,
                "description": "Returns the status of a report.",
                "operationId": "status_of_report",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "account_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "report",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Report"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Status of a Report",
                "tags": [
                    "account_reports"
                ]
            }
        },
        "/v1/accounts/{account_id}/roles": {
            "get": {
                "deprecated": false,
                "description": "A paginated list of the roles available to an account.",
                "operationId": "list_roles",
                "parameters": [
                    {
                        "description": "The id of the account to retrieve roles for.",
                        "in": "path",
                        "name": "account_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Filter by role state. If this argument is omitted, only 'active' roles are\nreturned.",
                        "explode": false,
                        "in": "query",
                        "name": "state",
                        "schema": {
                            "items": {
                                "type": "string",
                                "enum": [
                                    "active",
                                    "inactive"
                                ]
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "description": "If this argument is true, all roles inherited from parent accounts will\nbe included.",
                        "in": "query",
                        "name": "show_inherited",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/pageParam"
                    },
                    {
                        "$ref": "#/components/parameters/perPageParam"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Role"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "List roles",
                "tags": [
                    "roles"
                ]
            },
            "post": {
                "deprecated": false,
                "description": "Create a new course-level or account-level role.",
                "operationId": "create_new_role",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "account_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "properties": {
                                    "base_role_type": {
                                        "description": "Specifies the role type that will be used as a base\nfor the permissions granted to this role.\n\nDefaults to 'AccountMembership' if absent",
                                        "enum": [
                                            "AccountMembership",
                                            "StudentEnrollment",
                                            "TeacherEnrollment",
                                            "TaEnrollment",
                                            "ObserverEnrollment",
                                            "DesignerEnrollment"
                                        ],
                                        "type": "string"
                                    },
                                    "label": {
                                        "description": "Label for the role.",
                                        "type": "string"
                                    },
                                    "permissions[X][applies_to_descendants]": {
                                        "description": "If the value is 1, permission <X> cascades down to sub accounts of the\naccount this role is in. The default value is 1.  Must be true if\napplies_to_self is false.This value is only returned if enabled is true.",
                                        "type": "boolean"
                                    },
                                    "permissions[X][applies_to_self]": {
                                        "description": "If the value is 1, permission <X> applies to the account this role is in.\nThe default value is 1. Must be true if applies_to_descendants is false.\nThis value is only returned if enabled is true.",
                                        "type": "boolean"
                                    },
                                    "permissions[X][enabled]": {
                                        "description": "If explicit is 1 and enabled is 1, permission <X> will be explicitly\ngranted to this role. If explicit is 1 and enabled has any other value\n(typically 0), permission <X> will be explicitly denied to this role. If\nexplicit is any other value (typically 0) or absent, or if enabled is\nabsent, the value for permission <X> will be inherited from upstream.\nIgnored if permission <X> is locked upstream (in an ancestor account).\n\nMay occur multiple times with unique values for <X>. Recognized\npermission names for <X> are:\n\n  [For Account-Level Roles Only]\n  become_user                      -- Become other users\n  import_sis                       -- Import SIS data\n  manage_account_memberships       -- Add/remove other admins for the account\n  manage_account_settings          -- Manage account-level settings\n  manage_alerts                    -- Manage global alerts\n  manage_courses                   -- Manage ( add / edit / delete ) courses\n  manage_developer_keys            -- Manage developer keys\n  manage_global_outcomes           -- Manage learning outcomes\n  manage_jobs                      -- Manage background jobs\n  manage_role_overrides            -- Manage permissions\n  manage_storage_quotas            -- Set storage quotas for courses, groups, and users\n  manage_sis                       -- Manage SIS data\n  manage_site_settings             -- Manage site-wide and plugin settings\n  manage_user_logins               -- Modify login details for users\n  read_course_content              -- View course content\n  read_course_list                 -- View the list of courses\n  read_messages                    -- View notifications sent to users\n  site_admin                       -- Use the Site Admin section and admin all other accounts\n  view_error_reports               -- View error reports\n  view_statistics                  -- View statistics\n  manage_feature_flags             -- Enable or disable features at an account level\n\n  [For both Account-Level and Course-Level roles]\n   Note: Applicable enrollment types for course-level roles are given in brackets:\n         S = student, T = teacher, A = TA, D = designer, O = observer.\n         Lower-case letters indicate permissions that are off by default.\n         A missing letter indicates the permission cannot be enabled for the role\n         or any derived custom roles.\n  change_course_state              -- [ TaD ] Change course state\n  comment_on_others_submissions    -- [sTAD ] View all students' submissions and make comments on them\n  create_collaborations            -- [STADo] Create student collaborations\n  create_conferences               -- [STADo] Create web conferences\n  import_outcomes                  -- [ TaDo] Import outcome data\n  manage_admin_users               -- [ Tad ] Add/remove other teachers, course designers or TAs to the course\n  manage_assignments               -- [ TADo] Manage (add / edit / delete) assignments and quizzes\n  manage_calendar                  -- [sTADo] Add, edit and delete events on the course calendar\n  manage_content                   -- [ TADo] Manage all other course content\n  manage_files                     -- [ TADo] Manage (add / edit / delete) course files\n  manage_grades                    -- [ TA  ] Edit grades\n  manage_groups                    -- [ TAD ] Manage (create / edit / delete) groups\n  manage_interaction_alerts        -- [ Ta  ] Manage alerts\n  manage_outcomes                  -- [sTaDo] Manage learning outcomes\n  manage_sections                  -- [ TaD ] Manage (create / edit / delete) course sections\n  manage_students                  -- [ TAD ] Add/remove students for the course\n  manage_user_notes                -- [ TA  ] Manage faculty journal entries\n  manage_rubrics                   -- [ TAD ] Edit assessing rubrics\n  manage_wiki                      -- [ TADo] Manage (add / edit / delete) pages\n  read_forum                       -- [STADO] View discussions\n  moderate_forum                   -- [sTADo] Moderate discussions (delete/edit others' posts, lock topics)\n  post_to_forum                    -- [STADo] Post to discussions\n  create_forum                     -- [STADo] Create discussions\n  read_announcements               -- [STADO] View announcements\n  read_question_banks              -- [ TADo] View and link to question banks\n  read_reports                     -- [ TAD ] View usage reports for the course\n  read_roster                      -- [STADo] See the list of users\n  read_sis                         -- [sTa  ] Read SIS data\n  send_messages                    -- [STADo] Send messages to individual course members\n  send_messages_all                -- [sTADo] Send messages to the entire class\n  view_all_grades                  -- [ TAd ] View all grades\n  view_group_pages                 -- [sTADo] View the group pages of all student groups\n  lti_add_edit                     -- [ TAD ] LTI add and edit\n  read_email_addresses             -- [sTAdo] See other users' primary email address\n  view_user_logins                 -- [ TA  ] View login ids for users\n  generate_observer_pairing_code   -- [ tAdo] Allow observer pairing code generation\n\nSome of these permissions are applicable only for roles on the site admin\naccount, on a root account, or for course-level roles with a particular base role type;\nif a specified permission is inapplicable, it will be ignored.\n\nAdditional permissions may exist based on installed plugins.",
                                        "type": "boolean"
                                    },
                                    "permissions[X][explicit]": {
                                        "description": "no description",
                                        "type": "boolean"
                                    },
                                    "permissions[X][locked]": {
                                        "description": "If the value is 1, permission <X> will be locked downstream (new roles in\nsubaccounts cannot override the setting). For any other value, permission\n<X> is left unlocked. Ignored if permission <X> is already locked\nupstream. May occur multiple times with unique values for <X>.",
                                        "type": "boolean"
                                    },
                                    "role": {
                                        "description": "Deprecated alias for label.",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "label"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Role"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Create a new role",
                "tags": [
                    "roles"
                ]
            }
        },
        "/v1/accounts/{account_id}/roles/{id}": {
            "delete": {
                "deprecated": false,
                "description": "Deactivates a custom role.  This hides it in the user interface and prevents it\nfrom being assigned to new users.  Existing users assigned to the role will\ncontinue to function with the same permissions they had previously.\nBuilt-in roles cannot be deactivated.",
                "operationId": "deactivate_role",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "account_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The unique identifier for the role",
                        "in": "query",
                        "name": "role_id",
                        "required": true,
                        "schema": {
                            "format": "int64",
                            "type": "integer"
                        }
                    },
                    {
                        "description": "The name for the role",
                        "in": "query",
                        "name": "role",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Role"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Deactivate a role",
                "tags": [
                    "roles"
                ]
            },
            "get": {
                "deprecated": false,
                "description": "Retrieve information about a single role",
                "operationId": "get_single_role",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The id of the account containing the role",
                        "in": "path",
                        "name": "account_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The unique identifier for the role",
                        "in": "query",
                        "name": "role_id",
                        "required": true,
                        "schema": {
                            "format": "int64",
                            "type": "integer"
                        }
                    },
                    {
                        "description": "The name for the role",
                        "in": "query",
                        "name": "role",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Role"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Get a single role",
                "tags": [
                    "roles"
                ]
            },
            "put": {
                "deprecated": false,
                "description": "Update permissions for an existing role.\n\nRecognized roles are:\n* TeacherEnrollment\n* StudentEnrollment\n* TaEnrollment\n* ObserverEnrollment\n* DesignerEnrollment\n* AccountAdmin\n* Any previously created custom role",
                "operationId": "update_role",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "account_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "label": {
                                        "description": "The label for the role. Can only change the label of a custom role that belongs directly to the account.",
                                        "type": "string"
                                    },
                                    "permissions[X][applies_to_descendants]": {
                                        "description": "If the value is 1, permission <X> cascades down to sub accounts of the\naccount this role is in. The default value is 1.  Must be true if\napplies_to_self is false.This value is only returned if enabled is true.",
                                        "type": "boolean"
                                    },
                                    "permissions[X][applies_to_self]": {
                                        "description": "If the value is 1, permission <X> applies to the account this role is in.\nThe default value is 1. Must be true if applies_to_descendants is false.\nThis value is only returned if enabled is true.",
                                        "type": "boolean"
                                    },
                                    "permissions[X][enabled]": {
                                        "description": "These arguments are described in the documentation for the\n{api:RoleOverridesController#add_role add_role method}.",
                                        "type": "boolean"
                                    },
                                    "permissions[X][explicit]": {
                                        "description": "no description",
                                        "type": "boolean"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Role"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Update a role",
                "tags": [
                    "roles"
                ]
            }
        },
        "/v1/accounts/{account_id}/roles/{id}/activate": {
            "post": {
                "deprecated": false,
                "description": "Re-activates an inactive role (allowing it to be assigned to new users)",
                "operationId": "activate_role",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "account_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "properties": {
                                    "role": {
                                        "description": "The name for the role"
                                    },
                                    "role_id": {
                                        "description": "The unique identifier for the role",
                                        "format": "int64",
                                        "type": "integer"
                                    }
                                },
                                "required": [
                                    "role_id"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Role"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Activate a role",
                "tags": [
                    "roles"
                ]
            }
        },
        "/v1/accounts/{account_id}/root_outcome_group": {
            "get": {
                "deprecated": false,
                "description": "Convenience redirect to find the root outcome group for a particular\ncontext. Will redirect to the appropriate outcome group's URL.",
                "operationId": "redirect_to_root_outcome_group_for_context_accounts",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "account_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Redirect to root outcome group for context",
                "tags": [
                    "outcome_groups"
                ]
            }
        },
        "/v1/accounts/{account_id}/rubrics": {
            "get": {
                "deprecated": false,
                "description": "Returns the paginated list of active rubrics for the current context.",
                "operationId": "list_rubrics_accounts",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "account_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/pageParam"
                    },
                    {
                        "$ref": "#/components/parameters/perPageParam"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Rubric"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "List rubrics",
                "tags": [
                    "rubrics"
                ]
            }
        },
        "/v1/accounts/{account_id}/rubrics/{id}": {
            "get": {
                "deprecated": false,
                "description": "Returns the rubric with the given id.",
                "operationId": "get_single_rubric_accounts",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "account_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "If included, the type of associated rubric assessments to return. If not included, assessments will be omitted.",
                        "in": "query",
                        "name": "include",
                        "schema": {
                            "enum": [
                                "assessments",
                                "graded_assessments",
                                "peer_assessments"
                            ],
                            "type": "string"
                        }
                    },
                    {
                        "description": "Applicable only if assessments are being returned. If included, returns either all criteria data associated with the assessment, or just the comments. If not included, both data and comments are omitted.",
                        "in": "query",
                        "name": "style",
                        "schema": {
                            "enum": [
                                "full",
                                "comments_only"
                            ],
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Rubric"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Get a single rubric",
                "tags": [
                    "rubrics"
                ]
            }
        },
        "/v1/accounts/{account_id}/scopes": {
            "get": {
                "deprecated": false,
                "description": "A list of scopes that can be applied to developer keys and access tokens.",
                "operationId": "list_scopes",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "account_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The attribute to group the scopes by. By default no grouping is done.",
                        "in": "query",
                        "name": "group_by",
                        "schema": {
                            "enum": [
                                "resource_name"
                            ],
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Scope"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "List scopes",
                "tags": [
                    "api_token_scopes"
                ]
            }
        },
        "/v1/accounts/{account_id}/self_registration": {
            "post": {
                "deprecated": false,
                "description": "Self register and return a new user and pseudonym for an account.\n\nIf self-registration is enabled on the account, you can use this\nendpoint to self register new users.",
                "operationId": "self_register_user",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "account_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "properties": {
                                    "communication_channel[address]": {
                                        "description": "The communication channel address, e.g. the user's email address.",
                                        "type": "string"
                                    },
                                    "communication_channel[type]": {
                                        "description": "The communication channel type, e.g. 'email' or 'sms'.",
                                        "type": "string"
                                    },
                                    "pseudonym[unique_id]": {
                                        "description": "User's login ID. Must be a valid email address.",
                                        "type": "string"
                                    },
                                    "user[birthdate]": {
                                        "description": "The user's birth date.",
                                        "format": "date",
                                        "type": "string"
                                    },
                                    "user[locale]": {
                                        "description": "The user's preferred language, from the list of languages Canvas supports.\nThis is in RFC-5646 format.",
                                        "type": "string"
                                    },
                                    "user[name]": {
                                        "description": "The full name of the user. This name will be used by teacher for grading.",
                                        "type": "string"
                                    },
                                    "user[short_name]": {
                                        "description": "User's name as it will be displayed in discussions, messages, and comments.",
                                        "type": "string"
                                    },
                                    "user[sortable_name]": {
                                        "description": "User's name as used to sort alphabetically in lists.",
                                        "type": "string"
                                    },
                                    "user[terms_of_use]": {
                                        "description": "Whether the user accepts the terms of use.",
                                        "type": "boolean"
                                    },
                                    "user[time_zone]": {
                                        "description": "The time zone for the user. Allowed time zones are\n{http://www.iana.org/time-zones IANA time zones} or friendlier\n{http://api.rubyonrails.org/classes/ActiveSupport/TimeZone.html Ruby on Rails time zones}.",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "pseudonym[unique_id]",
                                    "user[name]",
                                    "user[terms_of_use]"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Self register a user",
                "tags": [
                    "users"
                ]
            }
        },
        "/v1/accounts/{account_id}/shared_brand_configs": {
            "post": {
                "deprecated": false,
                "description": "Create a SharedBrandConfig, which will give the given brand_config a name\nand make it available to other users of this account.",
                "operationId": "share_brandconfig_theme",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "account_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "properties": {
                                    "shared_brand_config[brand_config_md5]": {
                                        "description": "MD5 of brand_config to share",
                                        "type": "string"
                                    },
                                    "shared_brand_config[name]": {
                                        "description": "Name to share this BrandConfig (theme) as.",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "shared_brand_config[brand_config_md5]",
                                    "shared_brand_config[name]"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SharedBrandConfig"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Share a BrandConfig (Theme)",
                "tags": [
                    "shared_brand_configs"
                ]
            }
        },
        "/v1/accounts/{account_id}/shared_brand_configs/{id}": {
            "put": {
                "deprecated": false,
                "description": "Update the specified shared_brand_config with a new name or to point to a new brand_config.\nUses same parameters as create.",
                "operationId": "update_shared_theme",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "account_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SharedBrandConfig"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Update a shared theme",
                "tags": [
                    "shared_brand_configs"
                ]
            }
        },
        "/v1/accounts/{account_id}/sis_import_errors": {
            "get": {
                "deprecated": false,
                "description": "Returns the list of SIS import errors for an account or a SIS import. Import\nerrors are only stored for 30 days.\n\nExample:\n  curl 'https://<canvas>/api/v1/accounts/<account_id>/sis_imports/<id>/sis_import_errors' \\\n    -H \"Authorization: Bearer <token>\"\n\nExample:\n  curl 'https://<canvas>/api/v1/accounts/<account_id>/sis_import_errors' \\\n    -H \"Authorization: Bearer <token>\"",
                "operationId": "get_sis_import_error_list_sis_import_errors",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "account_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/SisImportError"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Get SIS import error list",
                "tags": [
                    "sis_import_errors"
                ]
            }
        },
        "/v1/accounts/{account_id}/sis_imports": {
            "get": {
                "deprecated": false,
                "description": "Returns the list of SIS imports for an account\n\nExample:\n  curl https://<canvas>/api/v1/accounts/<account_id>/sis_imports \\\n    -H 'Authorization: Bearer <token>'",
                "operationId": "get_sis_import_list",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "account_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "If set, only shows imports created after the specified date (use ISO8601 format)",
                        "in": "query",
                        "name": "created_since",
                        "schema": {
                            "format": "date-time",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/SisImport"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Get SIS import list",
                "tags": [
                    "sis_imports"
                ]
            },
            "post": {
                "deprecated": false,
                "description": "Import SIS data into Canvas. Must be on a root account with SIS imports\nenabled.\n\nFor more information on the format that's expected here, please see the\n\"SIS CSV\" section in the API docs.",
                "operationId": "import_sis_data",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "account_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "properties": {
                                    "add_sis_stickiness": {
                                        "description": "This option, if present, will process all changes as if they were UI\nchanges. This means that \"stickiness\" will be added to changed fields.\nThis option is only processed if 'override_sis_stickiness' is also provided.",
                                        "type": "boolean"
                                    },
                                    "attachment": {
                                        "description": "There are two ways to post SIS import data - either via a\napplication/x-www-form-urlencoded form-field-style attachment, or via a non-multipart\nraw post request.\n\n'attachment' is required for application/x-www-form-urlencoded style posts. Assumed to\nbe SIS data from a file upload form field named 'attachment'.\n\nExamples:\n  curl -F attachment=@<filename> -H \"Authorization: Bearer <token>\" \\\n      https://<canvas>/api/v1/accounts/<account_id>/sis_imports.json?import_type=instructure_csv\n\nIf you decide to do a raw post, you can skip the 'attachment' argument,\nbut you will then be required to provide a suitable Content-Type header.\nYou are encouraged to also provide the 'extension' argument.\n\nExamples:\n  curl -H 'Content-Type: application/octet-stream' --data-binary @<filename>.zip \\\n      -H \"Authorization: Bearer <token>\" \\\n      https://<canvas>/api/v1/accounts/<account_id>/sis_imports.json?import_type=instructure_csv&extension=zip\n\n  curl -H 'Content-Type: application/zip' --data-binary @<filename>.zip \\\n      -H \"Authorization: Bearer <token>\" \\\n      https://<canvas>/api/v1/accounts/<account_id>/sis_imports.json?import_type=instructure_csv\n\n  curl -H 'Content-Type: text/csv' --data-binary @<filename>.csv \\\n      -H \"Authorization: Bearer <token>\" \\\n      https://<canvas>/api/v1/accounts/<account_id>/sis_imports.json?import_type=instructure_csv\n\n  curl -H 'Content-Type: text/csv' --data-binary @<filename>.csv \\\n      -H \"Authorization: Bearer <token>\" \\\n      https://<canvas>/api/v1/accounts/<account_id>/sis_imports.json?import_type=instructure_csv&batch_mode=1&batch_mode_term_id=15",
                                        "type": "string"
                                    },
                                    "batch_mode": {
                                        "description": "If set, this SIS import will be run in batch mode, deleting any data\npreviously imported via SIS that is not present in this latest import.\nSee the SIS CSV Format page for details.\nBatch mode cannot be used with diffing.",
                                        "type": "boolean"
                                    },
                                    "batch_mode_term_id": {
                                        "description": "Limit deletions to only this term. Required if batch mode is enabled.",
                                        "type": "string"
                                    },
                                    "change_threshold": {
                                        "description": "If set with batch_mode, the batch cleanup process will not run if the\nnumber of items deleted is higher than the percentage set. If set to 10\nand a term has 200 enrollments, and batch would delete more than 20 of\nthe enrollments the batch will abort before the enrollments are deleted.\nThe change_threshold will be evaluated for course, sections, and\nenrollments independently.\nIf set with diffing, diffing  will not be performed if the files are\ngreater than the threshold as a percent. If set to 5 and the file is more\nthan 5% smaller or more than 5% larger than the file that is being\ncompared to, diffing will not be performed. If the files are less than 5%,\ndiffing will be performed. See the SIS CSV Format documentation for more\ndetails.\nRequired for multi_term_batch_mode.",
                                        "format": "int64",
                                        "type": "integer"
                                    },
                                    "clear_sis_stickiness": {
                                        "description": "This option, if present, will clear \"stickiness\" from all fields touched\nby this import. Requires that 'override_sis_stickiness' is also provided.\nIf 'add_sis_stickiness' is also provided, 'clear_sis_stickiness' will\noverrule the behavior of 'add_sis_stickiness'",
                                        "type": "boolean"
                                    },
                                    "diffing_data_set_identifier": {
                                        "description": "If set on a CSV import, Canvas will attempt to optimize the SIS import by\ncomparing this set of CSVs to the previous set that has the same data set\nidentifier, and only applying the difference between the two. See the\nSIS CSV Format documentation for more details.\nDiffing cannot be used with batch_mode",
                                        "type": "string"
                                    },
                                    "diffing_drop_status": {
                                        "description": "If diffing_drop_status is passed, this SIS import will use this status for\nenrollments that are not included in the sis_batch. Defaults to 'deleted'",
                                        "enum": [
                                            "deleted",
                                            "completed",
                                            "inactive"
                                        ],
                                        "type": "string"
                                    },
                                    "diffing_remaster_data_set": {
                                        "description": "If true, and diffing_data_set_identifier is sent, this SIS import will be\npart of the data set, but diffing will not be performed. See the SIS CSV\nFormat documentation for details.",
                                        "type": "boolean"
                                    },
                                    "extension": {
                                        "description": "Recommended for raw post request style imports. This field will be used to\ndistinguish between zip, xml, csv, and other file format extensions that\nwould usually be provided with the filename in the multipart post request\nscenario. If not provided, this value will be inferred from the\nContent-Type, falling back to zip-file format if all else fails.",
                                        "type": "string"
                                    },
                                    "import_type": {
                                        "description": "Choose the data format for reading SIS data. With a standard Canvas\ninstall, this option can only be 'instructure_csv', and if unprovided,\nwill be assumed to be so. Can be part of the query string.",
                                        "type": "string"
                                    },
                                    "multi_term_batch_mode": {
                                        "description": "Runs batch mode against all terms in terms file. Requires change_threshold.",
                                        "type": "boolean"
                                    },
                                    "override_sis_stickiness": {
                                        "description": "Many fields on records in Canvas can be marked \"sticky,\" which means that\nwhen something changes in the UI apart from the SIS, that field gets\n\"stuck.\" In this way, by default, SIS imports do not override UI changes.\nIf this field is present, however, it will tell the SIS import to ignore\n\"stickiness\" and override all fields.",
                                        "type": "boolean"
                                    },
                                    "skip_deletes": {
                                        "description": "When set the import will skip any deletes. This does not account for\nobjects that are deleted during the batch mode cleanup process.",
                                        "type": "boolean"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SisImport"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Import SIS data",
                "tags": [
                    "sis_imports"
                ]
            }
        },
        "/v1/accounts/{account_id}/sis_imports/abort_all_pending": {
            "put": {
                "deprecated": false,
                "description": "Abort already created but not processed or processing SIS imports.",
                "operationId": "abort_all_pending_sis_imports",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "account_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Abort all pending SIS imports",
                "tags": [
                    "sis_imports"
                ]
            }
        },
        "/v1/accounts/{account_id}/sis_imports/{id}": {
            "get": {
                "deprecated": false,
                "description": "Get the status of an already created SIS import.\n\n  Examples:\n    curl https://<canvas>/api/v1/accounts/<account_id>/sis_imports/<sis_import_id> \\\n        -H 'Authorization: Bearer <token>'",
                "operationId": "get_sis_import_status",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "account_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SisImport"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Get SIS import status",
                "tags": [
                    "sis_imports"
                ]
            }
        },
        "/v1/accounts/{account_id}/sis_imports/{id}/abort": {
            "put": {
                "deprecated": false,
                "description": "Abort a SIS import that has not completed.",
                "operationId": "abort_sis_import",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "account_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SisImport"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Abort SIS import",
                "tags": [
                    "sis_imports"
                ]
            }
        },
        "/v1/accounts/{account_id}/sis_imports/{id}/errors": {
            "get": {
                "deprecated": false,
                "description": "Returns the list of SIS import errors for an account or a SIS import. Import\nerrors are only stored for 30 days.\n\nExample:\n  curl 'https://<canvas>/api/v1/accounts/<account_id>/sis_imports/<id>/sis_import_errors' \\\n    -H \"Authorization: Bearer <token>\"\n\nExample:\n  curl 'https://<canvas>/api/v1/accounts/<account_id>/sis_import_errors' \\\n    -H \"Authorization: Bearer <token>\"",
                "operationId": "get_sis_import_error_list_sis_imports",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "account_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/SisImportError"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Get SIS import error list",
                "tags": [
                    "sis_import_errors"
                ]
            }
        },
        "/v1/accounts/{account_id}/sis_imports/{id}/restore_states": {
            "put": {
                "deprecated": false,
                "description": "This will restore the the workflow_state for all the items that changed\ntheir workflow_state during the import being restored.\nThis will restore states for items imported with the following importers:\naccounts.csv terms.csv courses.csv sections.csv group_categories.csv\ngroups.csv users.csv admins.csv\nThis also restores states for other items that changed during the import.\nAn example would be if an enrollment was deleted from a sis import and the\ngroup_membership was also deleted as a result of the enrollment deletion,\nboth items would be restored when the sis batch is restored.",
                "operationId": "restore_workflow_states_of_sis_imported_items",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "account_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "batch_mode": {
                                        "description": "If set, will only restore items that were deleted from batch_mode.",
                                        "type": "boolean"
                                    },
                                    "unconclude_only": {
                                        "description": "If set, will only restore enrollments that were concluded. This will\nignore any items that were created or deleted.",
                                        "type": "boolean"
                                    },
                                    "undelete_only": {
                                        "description": "If set, will only restore items that were deleted. This will ignore any\nitems that were created or modified.",
                                        "type": "boolean"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Progress"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Restore workflow_states of SIS imported items",
                "tags": [
                    "sis_imports"
                ]
            }
        },
        "/v1/accounts/{account_id}/sso_settings": {
            "get": {
                "deprecated": false,
                "description": "The way to get the current state of each account level setting\nthat's relevant to Single Sign On configuration\n\nYou can list the current state of each setting with \"update_sso_settings\"",
                "operationId": "show_account_auth_settings",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "account_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SSOSettings"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "show account auth settings",
                "tags": [
                    "authentication_providers"
                ]
            },
            "put": {
                "deprecated": false,
                "description": "For various cases of mixed SSO configurations, you may need to set some\nconfiguration at the account level to handle the particulars of your\nsetup.\n\nThis endpoint accepts a PUT request to set several possible account\nsettings. All setting are optional on each request, any that are not\nprovided at all are simply retained as is.  Any that provide the key but\na null-ish value (blank string, null, undefined) will be UN-set.\n\nYou can list the current state of each setting with \"show_sso_settings\"",
                "operationId": "update_account_auth_settings",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "account_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SSOSettings"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "update account auth settings",
                "tags": [
                    "authentication_providers"
                ]
            }
        },
        "/v1/accounts/{account_id}/sub_accounts": {
            "get": {
                "deprecated": false,
                "description": "List accounts that are sub-accounts of the given account.",
                "operationId": "get_sub_accounts_of_account",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "account_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "If true, the entire account tree underneath\nthis account will be returned (though still paginated). If false, only\ndirect sub-accounts of this account will be returned. Defaults to false.",
                        "in": "query",
                        "name": "recursive",
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Account"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Get the sub-accounts of an account",
                "tags": [
                    "accounts"
                ]
            },
            "post": {
                "deprecated": false,
                "description": "Add a new sub-account to a given account.",
                "operationId": "create_new_sub_account",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "account_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "properties": {
                                    "account[default_group_storage_quota_mb]": {
                                        "description": "The default group storage quota to be used, if not otherwise specified.",
                                        "format": "int64",
                                        "type": "integer"
                                    },
                                    "account[default_storage_quota_mb]": {
                                        "description": "The default course storage quota to be used, if not otherwise specified.",
                                        "format": "int64",
                                        "type": "integer"
                                    },
                                    "account[default_user_storage_quota_mb]": {
                                        "description": "The default user storage quota to be used, if not otherwise specified.",
                                        "format": "int64",
                                        "type": "integer"
                                    },
                                    "account[name]": {
                                        "description": "The name of the new sub-account.",
                                        "type": "string"
                                    },
                                    "account[sis_account_id]": {
                                        "description": "The account's identifier in the Student Information System.",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "account[name]"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Account"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Create a new sub-account",
                "tags": [
                    "accounts"
                ]
            }
        },
        "/v1/accounts/{account_id}/sub_accounts/{id}": {
            "delete": {
                "deprecated": false,
                "description": "Cannot delete an account with active courses or active sub_accounts.\nCannot delete a root_account",
                "operationId": "delete_sub_account",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "account_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Account"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Delete a sub-account",
                "tags": [
                    "accounts"
                ]
            }
        },
        "/v1/accounts/{account_id}/terms": {
            "get": {
                "deprecated": false,
                "description": "A paginated list of all of the terms in the account.",
                "operationId": "list_enrollment_terms",
                "parameters": [
                    {
                        "in": "query",
                        "name": "page",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "minimum": 0
                        },
                        "description": "The bookmark leading to the next paginated page. This needs to be parsed from the response header ('Link' field)."
                    },
                    {
                        "in": "query",
                        "name": "per_page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 100,
                            "default": 10
                        },
                        "description": "The numbers of items to return."
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "account_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "If set, only returns terms that are in the given state.\nDefaults to 'active'.",
                        "explode": false,
                        "in": "query",
                        "name": "workflow_state",
                        "schema": {
                            "items": {
                                "type": "string",
                                "enum": [
                                    "active",
                                    "deleted",
                                    "all"
                                ]
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "description": "Array of additional information to include.\n\n\"overrides\":: term start/end dates overridden for different enrollment types",
                        "explode": false,
                        "in": "query",
                        "name": "include",
                        "schema": {
                            "items": {
                                "type": "string",
                                "enum": [
                                    "overrides"
                                ]
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "$ref": "#/components/parameters/pageParam"
                    },
                    {
                        "$ref": "#/components/parameters/perPageParam"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/EnrollmentTerm"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "List enrollment terms",
                "tags": [
                    "enrollment_terms"
                ]
            },
            "post": {
                "deprecated": false,
                "description": "Create a new enrollment term for the specified account.",
                "operationId": "create_enrollment_term",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "account_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "properties": {
                                    "enrollment_term[end_at]": {
                                        "description": "The day/time the term ends.\nAccepts times in ISO 8601 format, e.g. 2015-01-10T18:48:00Z.",
                                        "format": "date-time",
                                        "type": "string"
                                    },
                                    "enrollment_term[name]": {
                                        "description": "The name of the term.",
                                        "type": "string"
                                    },
                                    "enrollment_term[overrides][enrollment_type][end_at]": {
                                        "description": "The day/time the term ends, overridden for the given enrollment type.\n*enrollment_type* can be one of StudentEnrollment, TeacherEnrollment, TaEnrollment, or DesignerEnrollment",
                                        "format": "date-time",
                                        "type": "string"
                                    },
                                    "enrollment_term[overrides][enrollment_type][start_at]": {
                                        "description": "The day/time the term starts, overridden for the given enrollment type.\n*enrollment_type* can be one of StudentEnrollment, TeacherEnrollment, TaEnrollment, or DesignerEnrollment",
                                        "format": "date-time",
                                        "type": "string"
                                    },
                                    "enrollment_term[sis_term_id]": {
                                        "description": "The unique SIS identifier for the term.",
                                        "type": "string"
                                    },
                                    "enrollment_term[start_at]": {
                                        "description": "The day/time the term starts.\nAccepts times in ISO 8601 format, e.g. 2015-01-10T18:48:00Z.",
                                        "format": "date-time",
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EnrollmentTerm"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Create enrollment term",
                "tags": [
                    "enrollment_terms"
                ]
            }
        },
        "/v1/accounts/{account_id}/terms/{id}": {
            "delete": {
                "deprecated": false,
                "description": "Delete the specified enrollment term.",
                "operationId": "delete_enrollment_term",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "account_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EnrollmentTerm"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Delete enrollment term",
                "tags": [
                    "enrollment_terms"
                ]
            },
            "put": {
                "deprecated": false,
                "description": "Update an existing enrollment term for the specified account.",
                "operationId": "update_enrollment_term",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "account_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "enrollment_term[end_at]": {
                                        "description": "The day/time the term ends.\nAccepts times in ISO 8601 format, e.g. 2015-01-10T18:48:00Z.",
                                        "format": "date-time",
                                        "type": "string"
                                    },
                                    "enrollment_term[name]": {
                                        "description": "The name of the term.",
                                        "type": "string"
                                    },
                                    "enrollment_term[overrides][enrollment_type][end_at]": {
                                        "description": "The day/time the term ends, overridden for the given enrollment type.\n*enrollment_type* can be one of StudentEnrollment, TeacherEnrollment, TaEnrollment, or DesignerEnrollment",
                                        "format": "date-time",
                                        "type": "string"
                                    },
                                    "enrollment_term[overrides][enrollment_type][start_at]": {
                                        "description": "The day/time the term starts, overridden for the given enrollment type.\n*enrollment_type* can be one of StudentEnrollment, TeacherEnrollment, TaEnrollment, or DesignerEnrollment",
                                        "format": "date-time",
                                        "type": "string"
                                    },
                                    "enrollment_term[sis_term_id]": {
                                        "description": "The unique SIS identifier for the term.",
                                        "type": "string"
                                    },
                                    "enrollment_term[start_at]": {
                                        "description": "The day/time the term starts.\nAccepts times in ISO 8601 format, e.g. 2015-01-10T18:48:00Z.",
                                        "format": "date-time",
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EnrollmentTerm"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Update enrollment term",
                "tags": [
                    "enrollment_terms"
                ]
            }
        },
        "/v1/accounts/{account_id}/terms_of_service": {
            "get": {
                "deprecated": false,
                "description": "Returns the terms of service for that account",
                "operationId": "get_terms_of_service",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "account_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TermsOfService"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Get the Terms of Service",
                "tags": [
                    "accounts"
                ]
            }
        },
        "/v1/accounts/{account_id}/users": {
            "get": {
                "deprecated": false,
                "description": "A paginated list of of users associated with this account.\n\n @example_request\n   curl https://<canvas>/api/v1/accounts/self/users?search_term=<search value> \\\n      -X GET \\\n      -H 'Authorization: Bearer <token>'",
                "operationId": "list_users_in_account",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "account_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The partial name or full ID of the users to match and return in the\nresults list. Must be at least 3 characters.\n\nNote that the API will prefer matching on canonical user ID if the ID has\na numeric form. It will only search against other fields if non-numeric\nin form, or if the numeric value doesn't yield any matches. Queries by\nadministrative users will search on SIS ID, login ID, name, or email\naddress; non-administrative queries will only be compared against name.",
                        "in": "query",
                        "name": "search_term",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The column to sort results by.",
                        "in": "query",
                        "name": "sort",
                        "schema": {
                            "enum": [
                                "username",
                                "email",
                                "sis_id",
                                "last_login"
                            ],
                            "type": "string"
                        }
                    },
                    {
                        "description": "The order to sort the given column by.",
                        "in": "query",
                        "name": "order",
                        "schema": {
                            "enum": [
                                "asc",
                                "desc"
                            ],
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/pageParam"
                    },
                    {
                        "$ref": "#/components/parameters/perPageParam"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/User"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "List users in account",
                "tags": [
                    "users"
                ]
            },
            "post": {
                "deprecated": false,
                "description": "Create and return a new user and pseudonym for an account.\n\nIf you don't have the \"Modify login details for users\" permission, but\nself-registration is enabled on the account, you can still use this\nendpoint to register new users. Certain fields will be required, and\nothers will be ignored (see below).",
                "operationId": "create_user",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "account_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "properties": {
                                    "communication_channel[address]": {
                                        "description": "The communication channel address, e.g. the user's email address.",
                                        "type": "string"
                                    },
                                    "communication_channel[confirmation_url]": {
                                        "description": "Only valid for account admins. If true, returns the new user account\nconfirmation URL in the response.",
                                        "type": "boolean"
                                    },
                                    "communication_channel[skip_confirmation]": {
                                        "description": "Only valid for site admins and account admins making requests; If true, the channel is\nautomatically validated and no confirmation email or SMS is sent.\nOtherwise, the user must respond to a confirmation message to confirm the\nchannel.\n\nIf this is true, it is recommended to set <tt>\"pseudonym[send_confirmation]\"</tt> to true as well.\nOtherwise, the user will not receive any messages about their account creation.",
                                        "type": "boolean"
                                    },
                                    "communication_channel[type]": {
                                        "description": "The communication channel type, e.g. 'email' or 'sms'.",
                                        "type": "string"
                                    },
                                    "destination": {
                                        "description": "If you're setting the password for the newly created user, you can provide this param\nwith a valid URL pointing into this Canvas installation, and the response will include\na destination field that's a URL that you can redirect a browser to and have the newly\ncreated user automatically logged in. The URL is only valid for a short time, and must\nmatch the domain this request is directed to, and be for a well-formed path that Canvas\ncan recognize."
                                    },
                                    "enable_sis_reactivation": {
                                        "description": "When true, will first try to re-activate a deleted user with matching sis_user_id if possible.",
                                        "type": "boolean"
                                    },
                                    "force_validations": {
                                        "description": "If true, validations are performed on the newly created user (and their associated pseudonym)\neven if the request is made by a privileged user like an admin. When set to false,\nor not included in the request parameters, any newly created users are subject to\nvalidations unless the request is made by a user with a 'manage_user_logins' right.\nIn which case, certain validations such as 'require_acceptance_of_terms' and\n'require_presence_of_name' are not enforced. Use this parameter to return helpful json\nerrors while building users with an admin request.",
                                        "type": "boolean"
                                    },
                                    "pseudonym[authentication_provider_id]": {
                                        "description": "The authentication provider this login is associated with. Logins\nassociated with a specific provider can only be used with that provider.\nLegacy providers (LDAP, CAS, SAML) will search for logins associated with\nthem, or unassociated logins. New providers will only search for logins\nexplicitly associated with them. This can be the integer ID of the\nprovider, or the type of the provider (in which case, it will find the\nfirst matching provider).",
                                        "type": "string"
                                    },
                                    "pseudonym[force_self_registration]": {
                                        "description": "Send user a self-registration style email if true.\nSetting it means the users will get a notification asking them\nto \"complete the registration process\" by clicking it, setting\na password, and letting them in.  Will only be executed on\nif the user does not need admin approval.\nDefaults to false unless explicitly provided.",
                                        "type": "boolean"
                                    },
                                    "pseudonym[integration_id]": {
                                        "description": "Integration ID for the login. To set this parameter, the caller must be able to\nmanage SIS permissions. The Integration ID is a secondary\nidentifier useful for more complex SIS integrations.",
                                        "type": "string"
                                    },
                                    "pseudonym[password]": {
                                        "description": "User's password. Cannot be set during self-registration.",
                                        "type": "string"
                                    },
                                    "pseudonym[send_confirmation]": {
                                        "description": "Send user notification of account creation if true.\nAutomatically set to true during self-registration.",
                                        "type": "boolean"
                                    },
                                    "pseudonym[sis_user_id]": {
                                        "description": "SIS ID for the user's account. To set this parameter, the caller must be\nable to manage SIS permissions.",
                                        "type": "string"
                                    },
                                    "pseudonym[unique_id]": {
                                        "description": "User's login ID. If this is a self-registration, it must be a valid\nemail address.",
                                        "type": "string"
                                    },
                                    "user[birthdate]": {
                                        "description": "The user's birth date.",
                                        "format": "date",
                                        "type": "string"
                                    },
                                    "user[locale]": {
                                        "description": "The user's preferred language, from the list of languages Canvas supports.\nThis is in RFC-5646 format.",
                                        "type": "string"
                                    },
                                    "user[name]": {
                                        "description": "The full name of the user. This name will be used by teacher for grading.\nRequired if this is a self-registration.",
                                        "type": "string"
                                    },
                                    "user[short_name]": {
                                        "description": "User's name as it will be displayed in discussions, messages, and comments.",
                                        "type": "string"
                                    },
                                    "user[skip_registration]": {
                                        "description": "Automatically mark the user as registered.\n\nIf this is true, it is recommended to set <tt>\"pseudonym[send_confirmation]\"</tt> to true as well.\nOtherwise, the user will not receive any messages about their account creation.\n\nThe users communication channel confirmation can be skipped by setting\n<tt>\"communication_channel[skip_confirmation]\"</tt> to true as well.",
                                        "type": "boolean"
                                    },
                                    "user[sortable_name]": {
                                        "description": "User's name as used to sort alphabetically in lists.",
                                        "type": "string"
                                    },
                                    "user[terms_of_use]": {
                                        "description": "Whether the user accepts the terms of use. Required if this is a\nself-registration and this canvas instance requires users to accept\nthe terms (on by default).\n\nIf this is true, it will mark the user as having accepted the terms of use.",
                                        "type": "boolean"
                                    },
                                    "user[time_zone]": {
                                        "description": "The time zone for the user. Allowed time zones are\n{http://www.iana.org/time-zones IANA time zones} or friendlier\n{http://api.rubyonrails.org/classes/ActiveSupport/TimeZone.html Ruby on Rails time zones}.",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "pseudonym[unique_id]"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Create a user",
                "tags": [
                    "users"
                ]
            }
        },
        "/v1/accounts/{account_id}/users/{user_id}": {
            "delete": {
                "deprecated": false,
                "description": "Delete a user record from a Canvas root account. If a user is associated\nwith multiple root accounts (in a multi-tenant instance of Canvas), this\naction will NOT remove them from the other accounts.\n\nWARNING: This API will allow a user to remove themselves from the account.\nIf they do this, they won't be able to make API calls or log into Canvas at\nthat account.",
                "operationId": "delete_user_from_root_account",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "account_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "user_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Delete a user from the root account",
                "tags": [
                    "accounts"
                ]
            }
        },
        "/v1/accounts/{id}": {
            "get": {
                "deprecated": false,
                "description": "Retrieve information on an individual account, given by id or sis\nsis_account_id.",
                "operationId": "get_single_account",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Account"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Get a single account",
                "tags": [
                    "accounts"
                ]
            },
            "put": {
                "deprecated": false,
                "description": "Update an existing account.",
                "operationId": "update_account",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "account[default_group_storage_quota_mb]": {
                                        "description": "The default group storage quota to be used, if not otherwise specified.",
                                        "format": "int64",
                                        "type": "integer"
                                    },
                                    "account[default_storage_quota_mb]": {
                                        "description": "The default course storage quota to be used, if not otherwise specified.",
                                        "format": "int64",
                                        "type": "integer"
                                    },
                                    "account[default_time_zone]": {
                                        "description": "The default time zone of the account. Allowed time zones are\n{http://www.iana.org/time-zones IANA time zones} or friendlier\n{http://api.rubyonrails.org/classes/ActiveSupport/TimeZone.html Ruby on Rails time zones}.",
                                        "type": "string"
                                    },
                                    "account[default_user_storage_quota_mb]": {
                                        "description": "The default user storage quota to be used, if not otherwise specified.",
                                        "format": "int64",
                                        "type": "integer"
                                    },
                                    "account[name]": {
                                        "description": "Updates the account name",
                                        "type": "string"
                                    },
                                    "account[services]": {
                                        "description": "Give this a set of keys and boolean values to enable or disable services matching the keys"
                                    },
                                    "account[settings][lock_all_announcements][locked]": {
                                        "description": "Lock this setting for sub-accounts and courses",
                                        "type": "boolean"
                                    },
                                    "account[settings][lock_all_announcements][value]": {
                                        "description": "Disable comments on announcements",
                                        "type": "boolean"
                                    },
                                    "account[settings][restrict_student_future_listing][locked]": {
                                        "description": "Lock this setting for sub-accounts and courses",
                                        "type": "boolean"
                                    },
                                    "account[settings][restrict_student_future_listing][value]": {
                                        "description": "Restrict students from viewing future enrollments in course list",
                                        "type": "boolean"
                                    },
                                    "account[settings][restrict_student_future_view][locked]": {
                                        "description": "Lock this setting for sub-accounts and courses",
                                        "type": "boolean"
                                    },
                                    "account[settings][restrict_student_future_view][value]": {
                                        "description": "Restrict students from viewing courses before start date",
                                        "type": "boolean"
                                    },
                                    "account[settings][restrict_student_past_view][locked]": {
                                        "description": "Lock this setting for sub-accounts and courses",
                                        "type": "boolean"
                                    },
                                    "account[settings][restrict_student_past_view][value]": {
                                        "description": "Restrict students from viewing courses after end date",
                                        "type": "boolean"
                                    },
                                    "account[sis_account_id]": {
                                        "description": "Updates the account sis_account_id\nMust have manage_sis permission and must not be a root_account.",
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Account"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Update an account",
                "tags": [
                    "accounts"
                ]
            }
        },
        "/v1/announcements": {
            "get": {
                "deprecated": false,
                "description": "Returns the paginated list of announcements for the given courses and date range.  Note that\na +context_code+ field is added to the responses so you can tell which course each announcement\nbelongs to.",
                "operationId": "list_announcements",
                "parameters": [
                    {
                        "description": "List of context_codes to retrieve announcements for (for example, +course_123+). Only courses\nare presently supported. The call will fail unless the caller has View Announcements permission\nin all listed courses.",
                        "explode": false,
                        "in": "query",
                        "name": "context_codes",
                        "required": true,
                        "schema": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "description": "Only return announcements posted since the start_date (inclusive).\nDefaults to 14 days ago. The value should be formatted as: yyyy-mm-dd or ISO 8601 YYYY-MM-DDTHH:MM:SSZ.",
                        "in": "query",
                        "name": "start_date",
                        "schema": {
                            "format": "date",
                            "type": "string"
                        }
                    },
                    {
                        "description": "Only return announcements posted before the end_date (inclusive).\nDefaults to 28 days from start_date. The value should be formatted as: yyyy-mm-dd or ISO 8601 YYYY-MM-DDTHH:MM:SSZ.\nAnnouncements scheduled for future posting will only be returned to course administrators.",
                        "in": "query",
                        "name": "end_date",
                        "schema": {
                            "format": "date",
                            "type": "string"
                        }
                    },
                    {
                        "description": "Only return active announcements that have been published.\nApplies only to requesting users that have permission to view\nunpublished items.\nDefaults to false for users with access to view unpublished items,\notherwise true and unmodifiable.",
                        "in": "query",
                        "name": "active_only",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "description": "Optional list of resources to include with the response. May include\na string of the name of the resource. Possible values are:\n\"sections\", \"sections_user_count\"\nif \"sections\" is passed, includes the course sections that are associated\nwith the topic, if the topic is specific to sertain sections of the course.\nIf \"sections_user_count\" is passed, then:\n  (a) If sections were asked for *and* the topic is specific to certain\n      course sections sections, includes the number of users in each\n      section. (as part of the section json asked for above)\n  (b) Else, includes at the root level the total number of users in the\n      topic's context (group or course) that the topic applies to.",
                        "explode": false,
                        "in": "query",
                        "name": "include",
                        "schema": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "$ref": "#/components/parameters/pageParam"
                    },
                    {
                        "$ref": "#/components/parameters/perPageParam"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/DiscussionTopic"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "List announcements",
                "tags": [
                    "announcements"
                ]
            }
        },
        "/v1/appointment_groups": {
            "get": {
                "deprecated": false,
                "description": "Retrieve the paginated list of appointment groups that can be reserved or\nmanaged by the current user.",
                "operationId": "list_appointment_groups",
                "parameters": [
                    {
                        "description": "Defaults to \"reservable\"",
                        "in": "query",
                        "name": "scope",
                        "schema": {
                            "enum": [
                                "reservable",
                                "manageable"
                            ],
                            "type": "string"
                        }
                    },
                    {
                        "description": "Array of context codes used to limit returned results.",
                        "explode": false,
                        "in": "query",
                        "name": "context_codes",
                        "schema": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "description": "Defaults to false. If true, includes past appointment groups",
                        "in": "query",
                        "name": "include_past_appointments",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "description": "Array of additional information to include.\n\n\"appointments\":: calendar event time slots for this appointment group\n\"child_events\":: reservations of those time slots\n\"participant_count\":: number of reservations\n\"reserved_times\":: the event id, start time and end time of reservations\n                   the current user has made)\n\"all_context_codes\":: all context codes associated with this appointment group",
                        "explode": false,
                        "in": "query",
                        "name": "include",
                        "schema": {
                            "items": {
                                "type": "string",
                                "enum": [
                                    "appointments",
                                    "child_events",
                                    "participant_count",
                                    "reserved_times",
                                    "all_context_codes"
                                ]
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "$ref": "#/components/parameters/pageParam"
                    },
                    {
                        "$ref": "#/components/parameters/perPageParam"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "List appointment groups",
                "tags": [
                    "appointment_groups"
                ]
            },
            "post": {
                "deprecated": false,
                "description": "Create and return a new appointment group. If new_appointments are\nspecified, the response will return a new_appointments array (same format\nas appointments array, see \"List appointment groups\" action)",
                "operationId": "create_appointment_group",
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "properties": {
                                    "appointment_group[context_codes]": {
                                        "description": "Array of context codes (courses, e.g. course_1) this group should be\nlinked to (1 or more). Users in the course(s) with appropriate permissions\nwill be able to sign up for this appointment group.",
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "appointment_group[description]": {
                                        "description": "Longer text description of the appointment group.",
                                        "type": "string"
                                    },
                                    "appointment_group[location_address]": {
                                        "description": "Location address.",
                                        "type": "string"
                                    },
                                    "appointment_group[location_name]": {
                                        "description": "Location name of the appointment group.",
                                        "type": "string"
                                    },
                                    "appointment_group[max_appointments_per_participant]": {
                                        "description": "Maximum number of time slots a user may register for.",
                                        "format": "int64",
                                        "type": "integer"
                                    },
                                    "appointment_group[min_appointments_per_participant]": {
                                        "description": "Minimum number of time slots a user must register for. If not set, users\ndo not need to sign up for any time slots.",
                                        "format": "int64",
                                        "type": "integer"
                                    },
                                    "appointment_group[new_appointments][X]": {
                                        "description": "Nested array of start time/end time pairs indicating time slots for this\nappointment group. Refer to the example request.",
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "appointment_group[participant_visibility]": {
                                        "description": "\"private\":: participants cannot see who has signed up for a particular\n            time slot\n\"protected\":: participants can see who has signed up.  Defaults to\n              \"private\".",
                                        "enum": [
                                            "private",
                                            "protected"
                                        ],
                                        "type": "string"
                                    },
                                    "appointment_group[participants_per_appointment]": {
                                        "description": "Maximum number of participants that may register for each time slot.\nDefaults to null (no limit).",
                                        "format": "int64",
                                        "type": "integer"
                                    },
                                    "appointment_group[publish]": {
                                        "description": "Indicates whether this appointment group should be published (i.e. made\navailable for signup). Once published, an appointment group cannot be\nunpublished. Defaults to false.",
                                        "type": "boolean"
                                    },
                                    "appointment_group[sub_context_codes]": {
                                        "description": "Array of sub context codes (course sections or a single group category)\nthis group should be linked to. Used to limit the appointment group to\nparticular sections. If a group category is specified, students will sign\nup in groups and the participant_type will be \"Group\" instead of \"User\".",
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "appointment_group[title]": {
                                        "description": "Short title for the appointment group.",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "appointment_group[context_codes]",
                                    "appointment_group[title]"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Create an appointment group",
                "tags": [
                    "appointment_groups"
                ]
            }
        },
        "/v1/appointment_groups/next_appointment": {
            "get": {
                "deprecated": false,
                "description": "Return the next appointment available to sign up for. The appointment\nis returned in a one-element array. If no future appointments are\navailable, an empty array is returned.",
                "operationId": "get_next_appointment",
                "parameters": [
                    {
                        "description": "List of ids of appointment groups to search.",
                        "explode": false,
                        "in": "query",
                        "name": "appointment_group_ids",
                        "schema": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/CalendarEvent"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Get next appointment",
                "tags": [
                    "appointment_groups"
                ]
            }
        },
        "/v1/appointment_groups/{id}": {
            "delete": {
                "deprecated": false,
                "description": "Delete an appointment group (and associated time slots and reservations)\nand return the deleted group",
                "operationId": "delete_appointment_group",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Reason for deleting/canceling the appointment group.",
                        "in": "query",
                        "name": "cancel_reason",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Delete an appointment group",
                "tags": [
                    "appointment_groups"
                ]
            },
            "get": {
                "deprecated": false,
                "description": "Returns information for a single appointment group",
                "operationId": "get_single_appointment_group",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Array of additional information to include. See include[] argument of\n\"List appointment groups\" action.\n\n\"child_events\":: reservations of time slots time slots\n\"appointments\":: will always be returned\n\"all_context_codes\":: all context codes associated with this appointment group",
                        "explode": false,
                        "in": "query",
                        "name": "include",
                        "schema": {
                            "items": {
                                "type": "string",
                                "enum": [
                                    "child_events",
                                    "appointments",
                                    "all_context_codes"
                                ]
                            },
                            "type": "array"
                        },
                        "style": "form"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Get a single appointment group",
                "tags": [
                    "appointment_groups"
                ]
            },
            "put": {
                "deprecated": false,
                "description": "Update and return an appointment group. If new_appointments are specified,\nthe response will return a new_appointments array (same format as\nappointments array, see \"List appointment groups\" action).",
                "operationId": "update_appointment_group",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "appointment_group[context_codes]": {
                                        "description": "Array of context codes (courses, e.g. course_1) this group should be\nlinked to (1 or more). Users in the course(s) with appropriate permissions\nwill be able to sign up for this appointment group.",
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "appointment_group[description]": {
                                        "description": "Longer text description of the appointment group.",
                                        "type": "string"
                                    },
                                    "appointment_group[location_address]": {
                                        "description": "Location address.",
                                        "type": "string"
                                    },
                                    "appointment_group[location_name]": {
                                        "description": "Location name of the appointment group.",
                                        "type": "string"
                                    },
                                    "appointment_group[max_appointments_per_participant]": {
                                        "description": "Maximum number of time slots a user may register for.",
                                        "format": "int64",
                                        "type": "integer"
                                    },
                                    "appointment_group[min_appointments_per_participant]": {
                                        "description": "Minimum number of time slots a user must register for. If not set, users\ndo not need to sign up for any time slots.",
                                        "format": "int64",
                                        "type": "integer"
                                    },
                                    "appointment_group[new_appointments][X]": {
                                        "description": "Nested array of start time/end time pairs indicating time slots for this\nappointment group. Refer to the example request.",
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "appointment_group[participant_visibility]": {
                                        "description": "\"private\":: participants cannot see who has signed up for a particular\n            time slot\n\"protected\":: participants can see who has signed up. Defaults to \"private\".",
                                        "enum": [
                                            "private",
                                            "protected"
                                        ],
                                        "type": "string"
                                    },
                                    "appointment_group[participants_per_appointment]": {
                                        "description": "Maximum number of participants that may register for each time slot.\nDefaults to null (no limit).",
                                        "format": "int64",
                                        "type": "integer"
                                    },
                                    "appointment_group[publish]": {
                                        "description": "Indicates whether this appointment group should be published (i.e. made\navailable for signup). Once published, an appointment group cannot be\nunpublished. Defaults to false.",
                                        "type": "boolean"
                                    },
                                    "appointment_group[sub_context_codes]": {
                                        "description": "Array of sub context codes (course sections or a single group category)\nthis group should be linked to. Used to limit the appointment group to\nparticular sections. If a group category is specified, students will sign\nup in groups and the participant_type will be \"Group\" instead of \"User\".",
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "appointment_group[title]": {
                                        "description": "Short title for the appointment group.",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "appointment_group[context_codes]"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Update an appointment group",
                "tags": [
                    "appointment_groups"
                ]
            }
        },
        "/v1/appointment_groups/{id}/groups": {
            "get": {
                "deprecated": false,
                "description": "A paginated list of student groups that are (or may be) participating in\nthis appointment group. Refer to the Groups API for the response fields.\nReturns no results for appointment groups with the \"User\" participant_type.",
                "operationId": "list_student_group_participants",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Limits results to the a given participation status, defaults to \"all\"",
                        "in": "query",
                        "name": "registration_status",
                        "schema": {
                            "enum": [
                                "all",
                                "registered"
                            ],
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/pageParam"
                    },
                    {
                        "$ref": "#/components/parameters/perPageParam"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "List student group participants",
                "tags": [
                    "appointment_groups"
                ]
            }
        },
        "/v1/appointment_groups/{id}/users": {
            "get": {
                "deprecated": false,
                "description": "A paginated list of users that are (or may be) participating in this\nappointment group.  Refer to the Users API for the response fields. Returns\nno results for appointment groups with the \"Group\" participant_type.",
                "operationId": "list_user_participants",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Limits results to the a given participation status, defaults to \"all\"",
                        "in": "query",
                        "name": "registration_status",
                        "schema": {
                            "enum": [
                                "all",
                                "registered"
                            ],
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/pageParam"
                    },
                    {
                        "$ref": "#/components/parameters/perPageParam"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "List user participants",
                "tags": [
                    "appointment_groups"
                ]
            }
        },
        "/v1/audit/authentication/accounts/{account_id}": {
            "get": {
                "deprecated": false,
                "description": "List authentication events for a given account.",
                "operationId": "query_by_account",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "account_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The beginning of the time range from which you want events.\nEvents are stored for one year.",
                        "in": "query",
                        "name": "start_time",
                        "schema": {
                            "format": "date-time",
                            "type": "string"
                        }
                    },
                    {
                        "description": "The end of the time range from which you want events.",
                        "in": "query",
                        "name": "end_time",
                        "schema": {
                            "format": "date-time",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Query by account.",
                "tags": [
                    "authentications_log"
                ]
            }
        },
        "/v1/audit/authentication/logins/{login_id}": {
            "get": {
                "deprecated": false,
                "description": "List authentication events for a given login.",
                "operationId": "query_by_login",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "login_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The beginning of the time range from which you want events.\nEvents are stored for one year.",
                        "in": "query",
                        "name": "start_time",
                        "schema": {
                            "format": "date-time",
                            "type": "string"
                        }
                    },
                    {
                        "description": "The end of the time range from which you want events.",
                        "in": "query",
                        "name": "end_time",
                        "schema": {
                            "format": "date-time",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Query by login.",
                "tags": [
                    "authentications_log"
                ]
            }
        },
        "/v1/audit/authentication/users/{user_id}": {
            "get": {
                "deprecated": false,
                "description": "List authentication events for a given user.",
                "operationId": "query_by_user",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "user_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The beginning of the time range from which you want events.\nEvents are stored for one year.",
                        "in": "query",
                        "name": "start_time",
                        "schema": {
                            "format": "date-time",
                            "type": "string"
                        }
                    },
                    {
                        "description": "The end of the time range from which you want events.",
                        "in": "query",
                        "name": "end_time",
                        "schema": {
                            "format": "date-time",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Query by user.",
                "tags": [
                    "authentications_log"
                ]
            }
        },
        "/v1/audit/course/courses/{course_id}": {
            "get": {
                "deprecated": false,
                "description": "List course change events for a given course.",
                "operationId": "query_by_course",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The beginning of the time range from which you want events.",
                        "in": "query",
                        "name": "start_time",
                        "schema": {
                            "format": "date-time",
                            "type": "string"
                        }
                    },
                    {
                        "description": "The end of the time range from which you want events.",
                        "in": "query",
                        "name": "end_time",
                        "schema": {
                            "format": "date-time",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/CourseEvent"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Query by course.",
                "tags": [
                    "course_audit_log"
                ]
            }
        },
        "/v1/audit/grade_change/assignments/{assignment_id}": {
            "get": {
                "deprecated": false,
                "description": "List grade change events for a given assignment.",
                "operationId": "query_by_assignment",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "assignment_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The beginning of the time range from which you want events.",
                        "in": "query",
                        "name": "start_time",
                        "schema": {
                            "format": "date-time",
                            "type": "string"
                        }
                    },
                    {
                        "description": "The end of the time range from which you want events.",
                        "in": "query",
                        "name": "end_time",
                        "schema": {
                            "format": "date-time",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/GradeChangeEvent"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Query by assignment.",
                "tags": [
                    "grade_change_log"
                ]
            }
        },
        "/v1/audit/grade_change/courses/{course_id}": {
            "get": {
                "deprecated": false,
                "description": "List grade change events for a given course.",
                "operationId": "query_by_course_grade_change",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The beginning of the time range from which you want events.",
                        "in": "query",
                        "name": "start_time",
                        "schema": {
                            "format": "date-time",
                            "type": "string"
                        }
                    },
                    {
                        "description": "The end of the time range from which you want events.",
                        "in": "query",
                        "name": "end_time",
                        "schema": {
                            "format": "date-time",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/GradeChangeEvent"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Query by course.",
                "tags": [
                    "grade_change_log"
                ]
            }
        },
        "/v1/audit/grade_change/graders/{grader_id}": {
            "get": {
                "deprecated": false,
                "description": "List grade change events for a given grader.",
                "operationId": "query_by_grader",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "grader_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The beginning of the time range from which you want events.",
                        "in": "query",
                        "name": "start_time",
                        "schema": {
                            "format": "date-time",
                            "type": "string"
                        }
                    },
                    {
                        "description": "The end of the time range from which you want events.",
                        "in": "query",
                        "name": "end_time",
                        "schema": {
                            "format": "date-time",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/GradeChangeEvent"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Query by grader.",
                "tags": [
                    "grade_change_log"
                ]
            }
        },
        "/v1/audit/grade_change/students/{student_id}": {
            "get": {
                "deprecated": false,
                "description": "List grade change events for a given student.",
                "operationId": "query_by_student",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "student_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The beginning of the time range from which you want events.",
                        "in": "query",
                        "name": "start_time",
                        "schema": {
                            "format": "date-time",
                            "type": "string"
                        }
                    },
                    {
                        "description": "The end of the time range from which you want events.",
                        "in": "query",
                        "name": "end_time",
                        "schema": {
                            "format": "date-time",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/GradeChangeEvent"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Query by student.",
                "tags": [
                    "grade_change_log"
                ]
            }
        },
        "/v1/brand_variables": {
            "get": {
                "deprecated": false,
                "description": "Will redirect to a static json file that has all of the brand\nvariables used by this account. Even though this is a redirect,\ndo not store the redirected url since if the account makes any changes\nit will redirect to a new url. Needs no authentication.",
                "operationId": "get_brand_config_variables_that_should_be_used_for_this_domain",
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Get the brand config variables that should be used for this domain",
                "tags": [
                    "brand_configs"
                ]
            }
        },
        "/v1/calendar_events": {
            "get": {
                "deprecated": false,
                "description": "Retrieve the paginated list of calendar events or assignments for the current user",
                "operationId": "list_calendar_events",
                "parameters": [
                    {
                        "description": "Defaults to \"event\"",
                        "in": "query",
                        "name": "type",
                        "schema": {
                            "enum": [
                                "event",
                                "assignment"
                            ],
                            "type": "string"
                        }
                    },
                    {
                        "description": "Only return events since the start_date (inclusive).\nDefaults to today. The value should be formatted as: yyyy-mm-dd or ISO 8601 YYYY-MM-DDTHH:MM:SSZ.",
                        "in": "query",
                        "name": "start_date",
                        "schema": {
                            "format": "date",
                            "type": "string"
                        }
                    },
                    {
                        "description": "Only return events before the end_date (inclusive).\nDefaults to start_date. The value should be formatted as: yyyy-mm-dd or ISO 8601 YYYY-MM-DDTHH:MM:SSZ.\nIf end_date is the same as start_date, then only events on that day are\nreturned.",
                        "in": "query",
                        "name": "end_date",
                        "schema": {
                            "format": "date",
                            "type": "string"
                        }
                    },
                    {
                        "description": "Defaults to false (dated events only).\nIf true, only return undated events and ignore start_date and end_date.",
                        "in": "query",
                        "name": "undated",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "description": "Defaults to false (uses start_date, end_date, and undated criteria).\nIf true, all events are returned, ignoring start_date, end_date, and undated criteria.",
                        "in": "query",
                        "name": "all_events",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "description": "List of context codes of courses/groups/users whose events you want to see.\nIf not specified, defaults to the current user (i.e personal calendar,\nno course/group events). Limited to 10 context codes, additional ones are\nignored. The format of this field is the context type, followed by an\nunderscore, followed by the context id. For example: course_42",
                        "explode": false,
                        "in": "query",
                        "name": "context_codes",
                        "schema": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "description": "Array of attributes to exclude. Possible values are \"description\", \"child_events\" and \"assignment\"",
                        "explode": false,
                        "in": "query",
                        "name": "excludes",
                        "schema": {
                            "items": {
                                "items": {
                                    "type": "object"
                                },
                                "type": "array"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "$ref": "#/components/parameters/pageParam"
                    },
                    {
                        "$ref": "#/components/parameters/perPageParam"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/CalendarEvent"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "List calendar events",
                "tags": [
                    "calendar_events"
                ]
            },
            "post": {
                "deprecated": false,
                "description": "Create and return a new calendar event",
                "operationId": "create_calendar_event",
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "properties": {
                                    "calendar_event[all_day]": {
                                        "description": "When true event is considered to span the whole day and times are ignored.",
                                        "type": "boolean"
                                    },
                                    "calendar_event[child_event_data][X][context_code]": {
                                        "description": "Context code(s) corresponding to the section-level start and end time(s).",
                                        "type": "string"
                                    },
                                    "calendar_event[child_event_data][X][end_at]": {
                                        "description": "Section-level end time(s) if this is a course event.",
                                        "format": "date-time",
                                        "type": "string"
                                    },
                                    "calendar_event[child_event_data][X][start_at]": {
                                        "description": "Section-level start time(s) if this is a course event. X can be any\nidentifier, provided that it is consistent across the start_at, end_at\nand context_code",
                                        "format": "date-time",
                                        "type": "string"
                                    },
                                    "calendar_event[context_code]": {
                                        "description": "Context code of the course/group/user whose calendar this event should be\nadded to.",
                                        "type": "string"
                                    },
                                    "calendar_event[description]": {
                                        "description": "Longer HTML description of the event.",
                                        "type": "string"
                                    },
                                    "calendar_event[duplicate][append_iterator]": {
                                        "description": "Defaults to false.  If set to `true`, an increasing counter number will be appended to the event title\nwhen the event is duplicated.  (e.g. Event 1, Event 2, Event 3, etc)",
                                        "type": "boolean"
                                    },
                                    "calendar_event[duplicate][count]": {
                                        "description": "Number of times to copy/duplicate the event.  Count cannot exceed 200.",
                                        "type": "number"
                                    },
                                    "calendar_event[duplicate][frequency]": {
                                        "description": "Defaults to \"weekly\".  The frequency at which to duplicate the event",
                                        "enum": [
                                            "daily",
                                            "weekly",
                                            "monthly"
                                        ],
                                        "type": "string"
                                    },
                                    "calendar_event[duplicate][interval]": {
                                        "description": "Defaults to 1 if duplicate `count` is set.  The interval between the duplicated events.",
                                        "type": "number"
                                    },
                                    "calendar_event[end_at]": {
                                        "description": "End date/time of the event.",
                                        "format": "date-time",
                                        "type": "string"
                                    },
                                    "calendar_event[location_address]": {
                                        "description": "Location address",
                                        "type": "string"
                                    },
                                    "calendar_event[location_name]": {
                                        "description": "Location name of the event.",
                                        "type": "string"
                                    },
                                    "calendar_event[start_at]": {
                                        "description": "Start date/time of the event.",
                                        "format": "date-time",
                                        "type": "string"
                                    },
                                    "calendar_event[time_zone_edited]": {
                                        "description": "Time zone of the user editing the event. Allowed time zones are\n{http://www.iana.org/time-zones IANA time zones} or friendlier\n{http://api.rubyonrails.org/classes/ActiveSupport/TimeZone.html Ruby on Rails time zones}.",
                                        "type": "string"
                                    },
                                    "calendar_event[title]": {
                                        "description": "Short title for the calendar event.",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "calendar_event[context_code]"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Create a calendar event",
                "tags": [
                    "calendar_events"
                ]
            }
        },
        "/v1/calendar_events/{id}": {
            "delete": {
                "deprecated": false,
                "description": "Delete an event from the calendar and return the deleted event",
                "operationId": "delete_calendar_event",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Reason for deleting/canceling the event.",
                        "in": "query",
                        "name": "cancel_reason",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Delete a calendar event",
                "tags": [
                    "calendar_events"
                ]
            },
            "get": {
                "deprecated": false,
                "operationId": "get_single_calendar_event_or_assignment",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CalendarEvent"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Get a single calendar event or assignment",
                "tags": [
                    "calendar_events"
                ]
            },
            "put": {
                "deprecated": false,
                "description": "Update and return a calendar event",
                "operationId": "update_calendar_event",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "calendar_event[all_day]": {
                                        "description": "When true event is considered to span the whole day and times are ignored.",
                                        "type": "boolean"
                                    },
                                    "calendar_event[child_event_data][X][context_code]": {
                                        "description": "Context code(s) corresponding to the section-level start and end time(s).",
                                        "type": "string"
                                    },
                                    "calendar_event[child_event_data][X][end_at]": {
                                        "description": "Section-level end time(s) if this is a course event.",
                                        "format": "date-time",
                                        "type": "string"
                                    },
                                    "calendar_event[child_event_data][X][start_at]": {
                                        "description": "Section-level start time(s) if this is a course event. X can be any\nidentifier, provided that it is consistent across the start_at, end_at\nand context_code",
                                        "format": "date-time",
                                        "type": "string"
                                    },
                                    "calendar_event[context_code]": {
                                        "description": "Context code of the course/group/user to move this event to.\nScheduler appointments and events with section-specific times cannot be moved between calendars.",
                                        "type": "string"
                                    },
                                    "calendar_event[description]": {
                                        "description": "Longer HTML description of the event.",
                                        "type": "string"
                                    },
                                    "calendar_event[end_at]": {
                                        "description": "End date/time of the event.",
                                        "format": "date-time",
                                        "type": "string"
                                    },
                                    "calendar_event[location_address]": {
                                        "description": "Location address",
                                        "type": "string"
                                    },
                                    "calendar_event[location_name]": {
                                        "description": "Location name of the event.",
                                        "type": "string"
                                    },
                                    "calendar_event[start_at]": {
                                        "description": "Start date/time of the event.",
                                        "format": "date-time",
                                        "type": "string"
                                    },
                                    "calendar_event[time_zone_edited]": {
                                        "description": "Time zone of the user editing the event. Allowed time zones are\n{http://www.iana.org/time-zones IANA time zones} or friendlier\n{http://api.rubyonrails.org/classes/ActiveSupport/TimeZone.html Ruby on Rails time zones}.",
                                        "type": "string"
                                    },
                                    "calendar_event[title]": {
                                        "description": "Short title for the calendar event.",
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Update a calendar event",
                "tags": [
                    "calendar_events"
                ]
            }
        },
        "/v1/calendar_events/{id}/reservations": {
            "post": {
                "deprecated": false,
                "description": "Reserves a particular time slot and return the new reservation",
                "operationId": "reserve_time_slot",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "properties": {
                                    "cancel_existing": {
                                        "description": "Defaults to false. If true, cancel any previous reservation(s) for this\nparticipant and appointment group.",
                                        "type": "boolean"
                                    },
                                    "comments": {
                                        "description": "Comments to associate with this reservation",
                                        "type": "string"
                                    },
                                    "participant_id": {
                                        "description": "User or group id for whom you are making the reservation (depends on the\nparticipant type). Defaults to the current user (or user's candidate group).",
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Reserve a time slot",
                "tags": [
                    "calendar_events"
                ]
            }
        },
        "/v1/calendar_events/{id}/reservations/{participant_id}": {
            "post": {
                "deprecated": false,
                "description": "Reserves a particular time slot and return the new reservation",
                "operationId": "reserve_time_slot_participant_id",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "User or group id for whom you are making the reservation (depends on the\nparticipant type). Defaults to the current user (or user's candidate group).",
                        "in": "path",
                        "name": "participant_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "properties": {
                                    "cancel_existing": {
                                        "description": "Defaults to false. If true, cancel any previous reservation(s) for this\nparticipant and appointment group.",
                                        "type": "boolean"
                                    },
                                    "comments": {
                                        "description": "Comments to associate with this reservation",
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Reserve a time slot",
                "tags": [
                    "calendar_events"
                ]
            }
        },
        "/v1/collaborations/{id}/members": {
            "get": {
                "deprecated": false,
                "description": "A paginated list of the collaborators of a given collaboration",
                "operationId": "list_members_of_collaboration",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "- \"collaborator_lti_id\": Optional information to include with each member.\n  Represents an identifier to be used for the member in an LTI context.\n- \"avatar_image_url\": Optional information to include with each member.\n  The url for the avatar of a collaborator with type 'user'.",
                        "explode": false,
                        "in": "query",
                        "name": "include",
                        "schema": {
                            "items": {
                                "type": "string",
                                "enum": [
                                    "collaborator_lti_id",
                                    "avatar_image_url"
                                ]
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "$ref": "#/components/parameters/pageParam"
                    },
                    {
                        "$ref": "#/components/parameters/perPageParam"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Collaborator"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "List members of a collaboration.",
                "tags": [
                    "collaborations"
                ]
            }
        },
        "/v1/comm_messages": {
            "get": {
                "deprecated": false,
                "description": "Retrieve a paginated list of messages sent to a user.",
                "operationId": "list_of_commmessages_for_user",
                "parameters": [
                    {
                        "description": "The user id for whom you want to retrieve CommMessages",
                        "in": "query",
                        "name": "user_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The beginning of the time range you want to retrieve message from.",
                        "in": "query",
                        "name": "start_time",
                        "schema": {
                            "format": "date-time",
                            "type": "string"
                        }
                    },
                    {
                        "description": "The end of the time range you want to retrieve messages for.",
                        "in": "query",
                        "name": "end_time",
                        "schema": {
                            "format": "date-time",
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/pageParam"
                    },
                    {
                        "$ref": "#/components/parameters/perPageParam"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/CommMessage"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "List of CommMessages for a user",
                "tags": [
                    "comm_messages"
                ]
            }
        },
        "/v1/conversations": {
            "get": {
                "deprecated": false,
                "description": "Returns the paginated list of conversations for the current user, most\nrecent ones first.",
                "operationId": "list_conversations",
                "parameters": [
                    {
                        "description": "When set, only return conversations of the specified type. For example,\nset to \"unread\" to return only conversations that haven't been read.\nThe default behavior is to return all non-archived conversations (i.e.\nread and unread).",
                        "in": "query",
                        "name": "scope",
                        "schema": {
                            "enum": [
                                "unread",
                                "starred",
                                "archived"
                            ],
                            "type": "string"
                        }
                    },
                    {
                        "description": "When set, only return conversations for the specified courses, groups\nor users. The id should be prefixed with its type, e.g. \"user_123\" or\n\"course_456\". Can be an array (by setting \"filter[]\") or single value\n(by setting \"filter\")",
                        "explode": false,
                        "in": "query",
                        "name": "filter",
                        "schema": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "description": "When filter[] contains multiple filters, combine them with this mode,\nfiltering conversations that at have at least all of the contexts (\"and\")\nor at least one of the contexts (\"or\")",
                        "in": "query",
                        "name": "filter_mode",
                        "schema": {
                            "enum": [
                                "and",
                                "or",
                                "default or"
                            ],
                            "type": "string"
                        }
                    },
                    {
                        "description": "(Obsolete) Submissions are no\nlonger linked to conversations. This parameter is ignored.",
                        "in": "query",
                        "name": "interleave_submissions",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "description": "Default is false. If true,\nthe top-level element of the response will be an object rather than\nan array, and will have the keys \"conversations\" which will contain the\npaged conversation data, and \"conversation_ids\" which will contain the\nids of all conversations under this scope/filter in the same order.",
                        "in": "query",
                        "name": "include_all_conversation_ids",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "description": "\"participant_avatars\":: Optionally include an \"avatar_url\" key for each user participanting in the conversation",
                        "explode": false,
                        "in": "query",
                        "name": "include",
                        "schema": {
                            "items": {
                                "type": "string",
                                "enum": [
                                    "participant_avatars"
                                ]
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "$ref": "#/components/parameters/pageParam"
                    },
                    {
                        "$ref": "#/components/parameters/perPageParam"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Conversation"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "List conversations",
                "tags": [
                    "conversations"
                ]
            },
            "post": {
                "deprecated": false,
                "description": "Create a new conversation with one or more recipients. If there is already\nan existing private conversation with the given recipients, it will be\nreused.",
                "operationId": "create_conversation",
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "properties": {
                                    "attachment_ids": {
                                        "description": "An array of attachments ids. These must be files that have been previously\nuploaded to the sender's \"conversation attachments\" folder.",
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "body": {
                                        "description": "The message to be sent",
                                        "type": "string"
                                    },
                                    "context_code": {
                                        "description": "The course or group that is the context for this conversation. Same format\nas courses or groups in the recipients argument.",
                                        "type": "string"
                                    },
                                    "filter": {
                                        "description": "Used when generating \"visible\" in the API response. See the explanation\nunder the {api:ConversationsController#index index API action}",
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "filter_mode": {
                                        "description": "Used when generating \"visible\" in the API response. See the explanation\nunder the {api:ConversationsController#index index API action}",
                                        "enum": [
                                            "and",
                                            "or",
                                            "default or"
                                        ],
                                        "type": "string"
                                    },
                                    "group_conversation": {
                                        "description": "Defaults to false. If true, this will be a group conversation (i.e. all\nrecipients may see all messages and replies). If false, individual private\nconversations will be started with each recipient. Must be set false if the\nnumber of recipients is over the set maximum (default is 100).",
                                        "type": "boolean"
                                    },
                                    "media_comment_id": {
                                        "description": "Media comment id of an audio of video file to be associated with this\nmessage.",
                                        "type": "string"
                                    },
                                    "media_comment_type": {
                                        "description": "Type of the associated media file",
                                        "enum": [
                                            "audio",
                                            "video"
                                        ],
                                        "type": "string"
                                    },
                                    "mode": {
                                        "description": "Determines whether the messages will be created/sent synchronously or\nasynchronously. Defaults to sync, and this option is ignored if this is a\ngroup conversation or there is just one recipient (i.e. it must be a bulk\nprivate message). When sent async, the response will be an empty array\n(batch status can be queried via the {api:ConversationsController#batches batches API})",
                                        "enum": [
                                            "sync",
                                            "async"
                                        ],
                                        "type": "string"
                                    },
                                    "recipients": {
                                        "description": "An array of recipient ids. These may be user ids or course/group ids\nprefixed with \"course_\" or \"group_\" respectively, e.g.\nrecipients[]=1&recipients[]=2&recipients[]=course_3. If the course/group\nhas over 100 enrollments, 'bulk_message' and 'group_conversation' must be\nset to true.",
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "scope": {
                                        "description": "Used when generating \"visible\" in the API response. See the explanation\nunder the {api:ConversationsController#index index API action}",
                                        "enum": [
                                            "unread",
                                            "starred",
                                            "archived"
                                        ],
                                        "type": "string"
                                    },
                                    "subject": {
                                        "description": "The subject of the conversation. This is ignored when reusing a\nconversation. Maximum length is 255 characters.",
                                        "type": "string"
                                    },
                                    "user_note": {
                                        "description": "Will add a faculty journal entry for each recipient as long as the user\nmaking the api call has permission, the recipient is a student and\nfaculty journals are enabled in the account.",
                                        "type": "boolean"
                                    }
                                },
                                "required": [
                                    "body",
                                    "recipients"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Create a conversation",
                "tags": [
                    "conversations"
                ]
            },
            "put": {
                "deprecated": false,
                "description": "Perform a change on a set of conversations. Operates asynchronously; use the {api:ProgressController#show progress endpoint}\nto query the status of an operation.",
                "operationId": "batch_update_conversations",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "conversation_ids": {
                                        "description": "List of conversations to update. Limited to 500 conversations.",
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "event": {
                                        "description": "The action to take on each conversation.",
                                        "enum": [
                                            "mark_as_read",
                                            "mark_as_unread",
                                            "star",
                                            "unstar",
                                            "archive",
                                            "destroy"
                                        ],
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "conversation_ids",
                                    "event"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Progress"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Batch update conversations",
                "tags": [
                    "conversations"
                ]
            }
        },
        "/v1/conversations/batches": {
            "get": {
                "deprecated": false,
                "description": "Returns any currently running conversation batches for the current user.\nConversation batches are created when a bulk private message is sent\nasynchronously (see the mode argument to the {api:ConversationsController#create create API action}).",
                "operationId": "get_running_batches",
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Get running batches",
                "tags": [
                    "conversations"
                ]
            }
        },
        "/v1/conversations/find_recipients": {
            "get": {
                "deprecated": false,
                "description": "Find valid recipients (users, courses and groups) that the current user\ncan send messages to. The /api/v1/search/recipients path is the preferred\nendpoint, /api/v1/conversations/find_recipients is deprecated.\n\nPagination is supported.",
                "operationId": "find_recipients_conversations",
                "parameters": [
                    {
                        "description": "Search terms used for matching users/courses/groups (e.g. \"bob smith\"). If\nmultiple terms are given (separated via whitespace), only results matching\nall terms will be returned.",
                        "in": "query",
                        "name": "search",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Limit the search to a particular course/group (e.g. \"course_3\" or \"group_4\").",
                        "in": "query",
                        "name": "context",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Array of ids to exclude from the search. These may be user ids or\ncourse/group ids prefixed with \"course_\" or \"group_\" respectively,\ne.g. exclude[]=1&exclude[]=2&exclude[]=course_3",
                        "explode": false,
                        "in": "query",
                        "name": "exclude",
                        "schema": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "description": "Limit the search just to users or contexts (groups/courses).",
                        "in": "query",
                        "name": "type",
                        "schema": {
                            "enum": [
                                "user",
                                "context"
                            ],
                            "type": "string"
                        }
                    },
                    {
                        "description": "Search for a specific user id. This ignores the other above parameters,\nand will never return more than one result.",
                        "in": "query",
                        "name": "user_id",
                        "schema": {
                            "format": "int64",
                            "type": "integer"
                        }
                    },
                    {
                        "description": "When searching by user_id, only users that could be normally messaged by\nthis user will be returned. This parameter allows you to specify a\nconversation that will be referenced for a shared context -- if both the\ncurrent user and the searched user are in the conversation, the user will\nbe returned. This is used to start new side conversations.",
                        "in": "query",
                        "name": "from_conversation_id",
                        "schema": {
                            "format": "int64",
                            "type": "integer"
                        }
                    },
                    {
                        "description": "Array of permission strings to be checked for each matched context (e.g.\n\"send_messages\"). This argument determines which permissions may be\nreturned in the response; it won't prevent contexts from being returned if\nthey don't grant the permission(s).",
                        "explode": false,
                        "in": "query",
                        "name": "permissions",
                        "schema": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Find recipients",
                "tags": [
                    "search"
                ]
            }
        },
        "/v1/conversations/mark_all_as_read": {
            "post": {
                "deprecated": false,
                "description": "Mark all conversations as read.",
                "operationId": "mark_all_as_read",
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Mark all as read",
                "tags": [
                    "conversations"
                ]
            }
        },
        "/v1/conversations/unread_count": {
            "get": {
                "deprecated": false,
                "description": "Get the number of unread conversations for the current user",
                "operationId": "unread_count",
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Unread count",
                "tags": [
                    "conversations"
                ]
            }
        },
        "/v1/conversations/{id}": {
            "delete": {
                "deprecated": false,
                "description": "Delete this conversation and its messages. Note that this only deletes\nthis user's view of the conversation.\n\nResponse includes same fields as UPDATE action",
                "operationId": "delete_conversation",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Delete a conversation",
                "tags": [
                    "conversations"
                ]
            },
            "get": {
                "deprecated": false,
                "description": "Returns information for a single conversation for the current user. Response includes all\nfields that are present in the list/index action as well as messages\nand extended participant information.",
                "operationId": "get_single_conversation",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "(Obsolete) Submissions are no\nlonger linked to conversations. This parameter is ignored.",
                        "in": "query",
                        "name": "interleave_submissions",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "description": "Used when generating \"visible\" in the API response. See the explanation\nunder the {api:ConversationsController#index index API action}",
                        "in": "query",
                        "name": "scope",
                        "schema": {
                            "enum": [
                                "unread",
                                "starred",
                                "archived"
                            ],
                            "type": "string"
                        }
                    },
                    {
                        "description": "Used when generating \"visible\" in the API response. See the explanation\nunder the {api:ConversationsController#index index API action}",
                        "explode": false,
                        "in": "query",
                        "name": "filter",
                        "schema": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "description": "Used when generating \"visible\" in the API response. See the explanation\nunder the {api:ConversationsController#index index API action}",
                        "in": "query",
                        "name": "filter_mode",
                        "schema": {
                            "enum": [
                                "and",
                                "or",
                                "default or"
                            ],
                            "type": "string"
                        }
                    },
                    {
                        "description": "Default true. If true, unread\nconversations will be automatically marked as read. This will default\nto false in a future API release, so clients should explicitly send\ntrue if that is the desired behavior.",
                        "in": "query",
                        "name": "auto_mark_as_read",
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Get a single conversation",
                "tags": [
                    "conversations"
                ]
            },
            "put": {
                "deprecated": false,
                "description": "Updates attributes for a single conversation.",
                "operationId": "edit_conversation",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "conversation[starred]": {
                                        "description": "Toggle the starred state of the current user's view of the conversation.",
                                        "type": "boolean"
                                    },
                                    "conversation[subscribed]": {
                                        "description": "Toggle the current user's subscription to the conversation (only valid for\ngroup conversations). If unsubscribed, the user will still have access to\nthe latest messages, but the conversation won't be automatically flagged\nas unread, nor will it jump to the top of the inbox.",
                                        "type": "boolean"
                                    },
                                    "conversation[workflow_state]": {
                                        "description": "Change the state of this conversation",
                                        "enum": [
                                            "read",
                                            "unread",
                                            "archived"
                                        ],
                                        "type": "string"
                                    },
                                    "filter": {
                                        "description": "Used when generating \"visible\" in the API response. See the explanation\nunder the {api:ConversationsController#index index API action}",
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "filter_mode": {
                                        "description": "Used when generating \"visible\" in the API response. See the explanation\nunder the {api:ConversationsController#index index API action}",
                                        "enum": [
                                            "and",
                                            "or",
                                            "default or"
                                        ],
                                        "type": "string"
                                    },
                                    "scope": {
                                        "description": "Used when generating \"visible\" in the API response. See the explanation\nunder the {api:ConversationsController#index index API action}",
                                        "enum": [
                                            "unread",
                                            "starred",
                                            "archived"
                                        ],
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Edit a conversation",
                "tags": [
                    "conversations"
                ]
            }
        },
        "/v1/conversations/{id}/add_message": {
            "post": {
                "deprecated": false,
                "description": "Add a message to an existing conversation. Response is similar to the\nGET/show action, except that only includes the\nlatest message (i.e. what we just sent)\n\nAn array of user ids. Defaults to all of the current conversation\nrecipients. To explicitly send a message to no other recipients,\nthis array should consist of the logged-in user id.\n\nAn array of message ids from this conversation to send to recipients\nof the new message. Recipients who already had a copy of included\nmessages will not be affected.",
                "operationId": "add_message",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "properties": {
                                    "attachment_ids": {
                                        "description": "An array of attachments ids. These must be files that have been previously\nuploaded to the sender's \"conversation attachments\" folder.",
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "body": {
                                        "description": "The message to be sent.",
                                        "type": "string"
                                    },
                                    "included_messages": {
                                        "description": "no description",
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "media_comment_id": {
                                        "description": "Media comment id of an audio of video file to be associated with this\nmessage.",
                                        "type": "string"
                                    },
                                    "media_comment_type": {
                                        "description": "Type of the associated media file.",
                                        "enum": [
                                            "audio",
                                            "video"
                                        ],
                                        "type": "string"
                                    },
                                    "recipients": {
                                        "description": "no description",
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "user_note": {
                                        "description": "Will add a faculty journal entry for each recipient as long as the user\nmaking the api call has permission, the recipient is a student and\nfaculty journals are enabled in the account.",
                                        "type": "boolean"
                                    }
                                },
                                "required": [
                                    "body"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Add a message",
                "tags": [
                    "conversations"
                ]
            }
        },
        "/v1/conversations/{id}/add_recipients": {
            "post": {
                "deprecated": false,
                "description": "Add recipients to an existing group conversation. Response is similar to\nthe GET/show action, except that only includes the\nlatest message (e.g. \"joe was added to the conversation by bob\")",
                "operationId": "add_recipients",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "properties": {
                                    "recipients": {
                                        "description": "An array of recipient ids. These may be user ids or course/group ids\nprefixed with \"course_\" or \"group_\" respectively, e.g.\nrecipients[]=1&recipients[]=2&recipients[]=course_3",
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    }
                                },
                                "required": [
                                    "recipients"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Add recipients",
                "tags": [
                    "conversations"
                ]
            }
        },
        "/v1/conversations/{id}/remove_messages": {
            "post": {
                "deprecated": false,
                "description": "Delete messages from this conversation. Note that this only affects this\nuser's view of the conversation. If all messages are deleted, the\nconversation will be as well (equivalent to DELETE)",
                "operationId": "delete_message",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "properties": {
                                    "remove": {
                                        "description": "Array of message ids to be deleted",
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    }
                                },
                                "required": [
                                    "remove"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Delete a message",
                "tags": [
                    "conversations"
                ]
            }
        },
        "/v1/course_accounts": {
            "get": {
                "deprecated": false,
                "description": "A paginated list of accounts that the current user can view through their\nadmin course enrollments. (Teacher, TA, or designer enrollments).\nOnly returns \"id\", \"name\", \"workflow_state\", \"root_account_id\" and \"parent_account_id\"",
                "operationId": "list_accounts_for_course_admins",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Account"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "List accounts for course admins",
                "tags": [
                    "accounts"
                ]
            }
        },
        "/v1/courses": {
            "get": {
                "deprecated": false,
                "description": "Returns the paginated list of active courses for the current user.",
                "operationId": "list_your_courses",
                "parameters": [
                    {
                        "in": "query",
                        "name": "page",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "minimum": 0
                        },
                        "description": "The bookmark leading to the next paginated page. This needs to be parsed from the response header ('Link' field)."
                    },
                    {
                        "in": "query",
                        "name": "per_page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 100,
                            "default": 10
                        },
                        "description": "The numbers of items to return."
                    },
                    {
                        "description": "When set, only return courses where the user is enrolled as this type. For\nexample, set to \"teacher\" to return only courses where the user is\nenrolled as a Teacher.  This argument is ignored if enrollment_role is given.",
                        "in": "query",
                        "name": "enrollment_type",
                        "schema": {
                            "enum": [
                                "teacher",
                                "student",
                                "ta",
                                "observer",
                                "designer"
                            ],
                            "type": "string"
                        }
                    },
                    {
                        "description": "Deprecated\nWhen set, only return courses where the user is enrolled with the specified\ncourse-level role.  This can be a role created with the\n{api:RoleOverridesController#add_role Add Role API} or a base role type of\n'StudentEnrollment', 'TeacherEnrollment', 'TaEnrollment', 'ObserverEnrollment',\nor 'DesignerEnrollment'.",
                        "in": "query",
                        "name": "enrollment_role",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "When set, only return courses where the user is enrolled with the specified\ncourse-level role.  This can be a role created with the\n{api:RoleOverridesController#add_role Add Role API} or a built_in role type of\n'StudentEnrollment', 'TeacherEnrollment', 'TaEnrollment', 'ObserverEnrollment',\nor 'DesignerEnrollment'.",
                        "in": "query",
                        "name": "enrollment_role_id",
                        "schema": {
                            "format": "int64",
                            "type": "integer"
                        }
                    },
                    {
                        "description": "When set, only return courses where the user has an enrollment with the given state.\nThis will respect section/course/term date overrides.",
                        "in": "query",
                        "name": "enrollment_state",
                        "schema": {
                            "enum": [
                                "active",
                                "invited_or_pending",
                                "completed"
                            ],
                            "type": "string"
                        }
                    },
                    {
                        "description": "When set, only return courses that are not configured as blueprint courses.",
                        "in": "query",
                        "name": "exclude_blueprint_courses",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "description": "- \"needs_grading_count\": Optional information to include with each Course.\n  When needs_grading_count is given, and the current user has grading\n  rights, the total number of submissions needing grading for all\n  assignments is returned.\n- \"syllabus_body\": Optional information to include with each Course.\n  When syllabus_body is given the user-generated html for the course\n  syllabus is returned.\n- \"public_description\": Optional information to include with each Course.\n  When public_description is given the user-generated text for the course\n  public description is returned.\n- \"total_scores\": Optional information to include with each Course.\n  When total_scores is given, any student enrollments will also\n  include the fields 'computed_current_score', 'computed_final_score',\n  'computed_current_grade', and 'computed_final_grade', as well as (if\n  the user has permission) 'unposted_current_score',\n  'unposted_final_score', 'unposted_current_grade', and\n  'unposted_final_grade' (see Enrollment documentation for more\n  information on these fields). This argument is ignored if the course is\n  configured to hide final grades.\n- \"current_grading_period_scores\": Optional information to include with\n  each Course. When current_grading_period_scores is given and total_scores\n  is given, any student enrollments will also include the fields\n  'has_grading_periods',\n  'totals_for_all_grading_periods_option', 'current_grading_period_title',\n  'current_grading_period_id', current_period_computed_current_score',\n  'current_period_computed_final_score',\n  'current_period_computed_current_grade', and\n  'current_period_computed_final_grade', as well as (if the user has permission)\n  'current_period_unposted_current_score',\n  'current_period_unposted_final_score',\n  'current_period_unposted_current_grade', and\n  'current_period_unposted_final_grade' (see Enrollment documentation for\n  more information on these fields). In addition, when this argument is\n  passed, the course will have a 'has_grading_periods' attribute\n  on it. This argument is ignored if the course is configured to hide final\n  grades or if the total_scores argument is not included.\n- \"term\": Optional information to include with each Course. When\n  term is given, the information for the enrollment term for each course\n  is returned.\n- \"account\": Optional information to include with each Course. When\n  account is given, the account json for each course is returned.\n- \"course_progress\": Optional information to include with each Course.\n  When course_progress is given, each course will include a\n  'course_progress' object with the fields: 'requirement_count', an integer\n  specifying the total number of requirements in the course,\n  'requirement_completed_count', an integer specifying the total number of\n  requirements in this course that have been completed, and\n  'next_requirement_url', a string url to the next requirement item, and\n  'completed_at', the date the course was completed (null if incomplete).\n  'next_requirement_url' will be null if all requirements have been\n  completed or the current module does not require sequential progress.\n  \"course_progress\" will return an error message if the course is not\n  module based or the user is not enrolled as a student in the course.\n- \"sections\": Section enrollment information to include with each Course.\n  Returns an array of hashes containing the section ID (id), section name\n  (name), start and end dates (start_at, end_at), as well as the enrollment\n  type (enrollment_role, e.g. 'StudentEnrollment').\n- \"storage_quota_used_mb\": The amount of storage space used by the files in this course\n- \"total_students\": Optional information to include with each Course.\n  Returns an integer for the total amount of active and invited students.\n- \"passback_status\": Include the grade passback_status\n- \"favorites\": Optional information to include with each Course.\n  Indicates if the user has marked the course as a favorite course.\n- \"teachers\": Teacher information to include with each Course.\n  Returns an array of hashes containing the {api:Users:UserDisplay UserDisplay} information\n  for each teacher in the course.\n- \"observed_users\": Optional information to include with each Course.\n  Will include data for observed users if the current user has an\n  observer enrollment.\n- \"tabs\": Optional information to include with each Course.\n  Will include the list of tabs configured for each course.  See the\n  {api:TabsController#index List available tabs API} for more information.\n- \"course_image\": Optional course image data for when there is a course image\n  and the course image feature flag has been enabled",
                        "explode": false,
                        "in": "query",
                        "name": "include",
                        "schema": {
                            "items": {
                                "type": "string",
                                "enum": [
                                    "needs_grading_count",
                                    "syllabus_body",
                                    "public_description",
                                    "total_scores",
                                    "current_grading_period_scores",
                                    "term",
                                    "account",
                                    "course_progress",
                                    "sections",
                                    "storage_quota_used_mb",
                                    "total_students",
                                    "passback_status",
                                    "favorites",
                                    "teachers",
                                    "observed_users",
                                    "course_image"
                                ]
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "description": "If set, only return courses that are in the given state(s).\nBy default, \"available\" is returned for students and observers, and\nanything except \"deleted\", for all other enrollment types",
                        "explode": false,
                        "in": "query",
                        "name": "state",
                        "schema": {
                            "items": {
                                "type": "string",
                                "enum": [
                                    "unpublished",
                                    "available",
                                    "completed",
                                    "deleted"
                                ]
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "$ref": "#/components/parameters/pageParam"
                    },
                    {
                        "$ref": "#/components/parameters/perPageParam"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/CourseWithIncludes"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "List your courses",
                "tags": [
                    "courses"
                ]
            }
        },
        "/v1/courses/{course_id}/activity_stream": {
            "get": {
                "deprecated": false,
                "description": "Returns the current user's course-specific activity stream, paginated.\n\nFor full documentation, see the API documentation for the user activity\nstream, in the user api.",
                "operationId": "course_activity_stream",
                "parameters": [
                    {
                        "in": "query",
                        "name": "page",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "minimum": 0
                        },
                        "description": "The bookmark leading to the next paginated page. This needs to be parsed from the response header ('Link' field)."
                    },
                    {
                        "in": "query",
                        "name": "per_page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 100,
                            "default": 10
                        },
                        "description": "The numbers of items to return."
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/pageParam"
                    },
                    {
                        "$ref": "#/components/parameters/perPageParam"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Course activity stream",
                "tags": [
                    "courses"
                ]
            }
        },
        "/v1/courses/{course_id}/activity_stream/summary": {
            "get": {
                "deprecated": false,
                "description": "Returns a summary of the current user's course-specific activity stream.\n\nFor full documentation, see the API documentation for the user activity\nstream summary, in the user api.",
                "operationId": "course_activity_stream_summary",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Course activity stream summary",
                "tags": [
                    "courses"
                ]
            }
        },
        "/v1/courses/{course_id}/analytics/activity": {
            "get": {
                "deprecated": false,
                "description": "Returns page view hits and participation numbers grouped by day through the\nentire history of the course. Page views is returned as a hash, where the\nhash keys are dates in the format \"YYYY-MM-DD\". The page_views result set\nincludes page views broken out by access category. Participations is\nreturned as an array of dates in the format \"YYYY-MM-DD\".",
                "operationId": "get_course_level_participation_data",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Get course-level participation data",
                "tags": [
                    "analytics"
                ]
            }
        },
        "/v1/courses/{course_id}/analytics/assignments": {
            "get": {
                "deprecated": false,
                "description": "Returns a list of assignments for the course sorted by due date. For\neach assignment returns basic assignment information, the grade breakdown,\nand a breakdown of on-time/late status of homework submissions.",
                "operationId": "get_course_level_assignment_data",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "If async is true, then the course_assignments call can happen asynch-\nronously and MAY return a response containing a progress_url key instead\nof an assignments array. If it does, then it is the caller's\nresponsibility to poll the API again to see if the progress is complete.\nIf the data is ready (possibly even on the first async call) then it\nwill be passed back normally, as documented in the example response.",
                        "in": "query",
                        "name": "async",
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Get course-level assignment data",
                "tags": [
                    "analytics"
                ]
            }
        },
        "/v1/courses/{course_id}/analytics/student_summaries": {
            "get": {
                "deprecated": false,
                "description": "Returns a summary of per-user access information for all students in\na course. This includes total page views, total participations, and a\nbreakdown of on-time/late status for all homework submissions in the course.\n\nEach student's summary also includes the maximum number of page views and\nparticipations by any student in the course, which may be useful for some\nvisualizations (since determining maximums client side can be tricky with\npagination).",
                "operationId": "get_course_level_student_summary_data",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The order results in which results are returned.  Defaults to \"name\".",
                        "in": "query",
                        "name": "sort_column",
                        "schema": {
                            "enum": [
                                "name",
                                "name_descending",
                                "score",
                                "score_descending",
                                "participations",
                                "participations_descending",
                                "page_views",
                                "page_views_descending"
                            ],
                            "type": "string"
                        }
                    },
                    {
                        "description": "If set, returns only the specified student.",
                        "in": "query",
                        "name": "student_id",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Get course-level student summary data",
                "tags": [
                    "analytics"
                ]
            }
        },
        "/v1/courses/{course_id}/analytics/users/{student_id}/activity": {
            "get": {
                "deprecated": false,
                "description": "Returns page view hits grouped by hour, and participation details through the\nentire history of the course.\n\n`page_views` are returned as a hash, where the keys are iso8601 dates, bucketed by the hour.\n`participations` are returned as an array of hashes, sorted oldest to newest.",
                "operationId": "get_user_in_a_course_level_participation_data",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "student_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Get user-in-a-course-level participation data",
                "tags": [
                    "analytics"
                ]
            }
        },
        "/v1/courses/{course_id}/analytics/users/{student_id}/assignments": {
            "get": {
                "deprecated": false,
                "description": "Returns a list of assignments for the course sorted by due date. For\neach assignment returns basic assignment information, the grade breakdown\n(including the student's actual grade), and the basic submission\ninformation for the student's submission if it exists.",
                "operationId": "get_user_in_a_course_level_assignment_data",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "student_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Assignment"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "Returns a list of assignments for the course sorted by due date"
                    }
                },
                "summary": "Get user-in-a-course-level assignment data",
                "tags": [
                    "analytics"
                ]
            }
        },
        "/v1/courses/{course_id}/analytics/users/{student_id}/communication": {
            "get": {
                "deprecated": false,
                "description": "Returns messaging \"hits\" grouped by day through the entire history of the\ncourse. Returns a hash containing the number of instructor-to-student messages,\nand student-to-instructor messages, where the hash keys are dates\nin the format \"YYYY-MM-DD\". Message hits include Conversation messages and\ncomments on homework submissions.",
                "operationId": "get_user_in_a_course_level_messaging_data",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "student_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Get user-in-a-course-level messaging data",
                "tags": [
                    "analytics"
                ]
            }
        },
        "/v1/courses/{course_id}/assignment_groups": {
            "get": {
                "deprecated": false,
                "description": "Returns the paginated list of assignment groups for the current context.\nThe returned groups are sorted by their position field.",
                "operationId": "list_assignment_groups",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Associations to include with the group. \"discussion_topic\", \"all_dates\"\n\"assignment_visibility\" & \"submission\" are only valid if \"assignments\" is also included.\nThe \"assignment_visibility\" option additionally requires that the Differentiated Assignments course feature be turned on.",
                        "explode": false,
                        "in": "query",
                        "name": "include",
                        "schema": {
                            "items": {
                                "type": "string",
                                "enum": [
                                    "assignments",
                                    "discussion_topic",
                                    "all_dates",
                                    "assignment_visibility",
                                    "overrides",
                                    "submission"
                                ]
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "description": "If \"assignments\" are included, those with the specified submission types\nwill be excluded from the assignment groups.",
                        "explode": false,
                        "in": "query",
                        "name": "exclude_assignment_submission_types",
                        "schema": {
                            "items": {
                                "type": "string",
                                "enum": [
                                    "online_quiz",
                                    "discussion_topic",
                                    "wiki_page",
                                    "external_tool"
                                ]
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "description": "Apply assignment overrides for each assignment, defaults to true.",
                        "in": "query",
                        "name": "override_assignment_dates",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "description": "The id of the grading period in which assignment groups are being requested\n(Requires grading periods to exist.)",
                        "in": "query",
                        "name": "grading_period_id",
                        "schema": {
                            "format": "int64",
                            "type": "integer"
                        }
                    },
                    {
                        "description": "If true, all assignments returned will apply to the current user in the\nspecified grading period. If assignments apply to other students in the\nspecified grading period, but not the current user, they will not be\nreturned. (Requires the grading_period_id argument and grading periods to\nexist. In addition, the current user must be a student.)",
                        "in": "query",
                        "name": "scope_assignments_to_student",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/pageParam"
                    },
                    {
                        "$ref": "#/components/parameters/perPageParam"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/AssignmentGroup"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "List assignment groups",
                "tags": [
                    "assignment_groups"
                ]
            },
            "post": {
                "deprecated": false,
                "description": "Create a new assignment group for this course.",
                "operationId": "create_assignment_group",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "properties": {
                                    "group_weight": {
                                        "description": "The percent of the total grade that this assignment group represents",
                                        "format": "float",
                                        "type": "number"
                                    },
                                    "integration_data": {
                                        "description": "The integration data of the Assignment Group",
                                        "type": "object"
                                    },
                                    "name": {
                                        "description": "The assignment group's name",
                                        "type": "string"
                                    },
                                    "position": {
                                        "description": "The position of this assignment group in relation to the other assignment groups",
                                        "format": "int64",
                                        "type": "integer"
                                    },
                                    "rules": {
                                        "description": "The grading rules that are applied within this assignment group\nSee the Assignment Group object definition for format",
                                        "type": "string"
                                    },
                                    "sis_source_id": {
                                        "description": "The sis source id of the Assignment Group",
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AssignmentGroup"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Create an Assignment Group",
                "tags": [
                    "assignment_groups"
                ]
            }
        },
        "/v1/courses/{course_id}/assignment_groups/{assignment_group_id}": {
            "delete": {
                "deprecated": false,
                "description": "Deletes the assignment group with the given id.",
                "operationId": "destroy_assignment_group",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "assignment_group_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The ID of an active Assignment Group to which the assignments that are\ncurrently assigned to the destroyed Assignment Group will be assigned.\nNOTE: If this argument is not provided, any assignments in this Assignment\nGroup will be deleted.",
                        "in": "query",
                        "name": "move_assignments_to",
                        "schema": {
                            "format": "int64",
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AssignmentGroup"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Destroy an Assignment Group",
                "tags": [
                    "assignment_groups"
                ]
            },
            "get": {
                "deprecated": false,
                "description": "Returns the assignment group with the given id.",
                "operationId": "get_assignment_group",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "assignment_group_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Associations to include with the group. \"discussion_topic\" and \"assignment_visibility\" and \"submission\"\nare only valid if \"assignments\" is also included. The \"assignment_visibility\" option additionally\nrequires that the Differentiated Assignments course feature be turned on.",
                        "explode": false,
                        "in": "query",
                        "name": "include",
                        "schema": {
                            "items": {
                                "type": "string",
                                "enum": [
                                    "assignments",
                                    "discussion_topic",
                                    "assignment_visibility",
                                    "submission"
                                ]
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "description": "Apply assignment overrides for each assignment, defaults to true.",
                        "in": "query",
                        "name": "override_assignment_dates",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "description": "The id of the grading period in which assignment groups are being requested\n(Requires grading periods to exist on the account)",
                        "in": "query",
                        "name": "grading_period_id",
                        "schema": {
                            "format": "int64",
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AssignmentGroup"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Get an Assignment Group",
                "tags": [
                    "assignment_groups"
                ]
            },
            "put": {
                "deprecated": false,
                "description": "Modify an existing Assignment Group.\nAccepts the same parameters as Assignment Group creation",
                "operationId": "edit_assignment_group",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "assignment_group_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AssignmentGroup"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Edit an Assignment Group",
                "tags": [
                    "assignment_groups"
                ]
            }
        },
        "/v1/courses/{course_id}/assignments": {
            "get": {
                "deprecated": false,
                "description": "Returns the paginated list of assignments for the current context.",
                "operationId": "list_assignments",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Associations to include with the assignment. The \"assignment_visibility\" option\nrequires that the Differentiated Assignments course feature be turned on. If\n\"observed_users\" is passed, submissions for observed users will also be included as an array.",
                        "explode": false,
                        "in": "query",
                        "name": "include",
                        "schema": {
                            "items": {
                                "type": "string",
                                "enum": [
                                    "submission",
                                    "assignment_visibility",
                                    "all_dates",
                                    "overrides",
                                    "observed_users"
                                ]
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The partial title of the assignments to match and return.",
                        "in": "query",
                        "name": "search_term",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Apply assignment overrides for each assignment, defaults to true.",
                        "in": "query",
                        "name": "override_assignment_dates",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "description": "Split up \"needs_grading_count\" by sections into the \"needs_grading_count_by_section\" key, defaults to false",
                        "in": "query",
                        "name": "needs_grading_count_by_section",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "description": "If included, only return certain assignments depending on due date and submission status.",
                        "in": "query",
                        "name": "bucket",
                        "schema": {
                            "enum": [
                                "past",
                                "overdue",
                                "undated",
                                "ungraded",
                                "unsubmitted",
                                "upcoming",
                                "future"
                            ],
                            "type": "string"
                        }
                    },
                    {
                        "description": "if set, return only assignments specified",
                        "explode": false,
                        "in": "query",
                        "name": "assignment_ids",
                        "schema": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "description": "Determines the order of the assignments. Defaults to \"position\".",
                        "in": "query",
                        "name": "order_by",
                        "schema": {
                            "enum": [
                                "position",
                                "name"
                            ],
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/pageParam"
                    },
                    {
                        "$ref": "#/components/parameters/perPageParam"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Assignment"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "List assignments",
                "tags": [
                    "assignments"
                ]
            },
            "post": {
                "deprecated": false,
                "description": "Create a new assignment for this course. The assignment is created in the\nactive state.",
                "operationId": "create_assignment",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "properties": {
                                    "assignment[allowed_extensions]": {
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "assignment[assignment_group_id]": {
                                        "description": "The assignment group id to put the assignment in.\nDefaults to the top assignment group in the course.",
                                        "format": "int64",
                                        "type": "integer"
                                    },
                                    "assignment[assignment_overrides]": {
                                        "description": "List of overrides for the assignment.",
                                        "items": {
                                            "$ref": "#/components/schemas/AssignmentOverride"
                                        },
                                        "type": "array"
                                    },
                                    "assignment[automatic_peer_reviews]": {
                                        "description": "Whether peer reviews will be assigned automatically by Canvas or if\nteachers must manually assign peer reviews. Does not apply if peer reviews\nare not enabled.",
                                        "type": "boolean"
                                    },
                                    "assignment[description]": {
                                        "description": "The assignment's description, supports HTML.",
                                        "type": "string"
                                    },
                                    "assignment[due_at]": {
                                        "description": "The day/time the assignment is due. Must be between the lock dates if there are lock dates.\nAccepts times in ISO 8601 format, e.g. 2014-10-21T18:48:00Z.",
                                        "format": "date-time",
                                        "type": "string"
                                    },
                                    "assignment[external_tool_tag_attributes]": {
                                        "description": "Hash of external tool parameters if submission_types is [\"external_tool\"].\nSee Assignment object definition for format.",
                                        "type": "string"
                                    },
                                    "assignment[grade_group_students_individually]": {
                                        "description": "If this is a group assignment, teachers have the options to grade\nstudents individually. If false, Canvas will apply the assignment's\nscore to each member of the group. If true, the teacher can manually\nassign scores to each member of the group.",
                                        "format": "int64",
                                        "type": "integer"
                                    },
                                    "assignment[grading_standard_id]": {
                                        "description": "The grading standard id to set for the course.  If no value is provided for this argument the current grading_standard will be un-set from this course.\nThis will update the grading_type for the course to 'letter_grade' unless it is already 'gpa_scale'.",
                                        "format": "int64",
                                        "type": "integer"
                                    },
                                    "assignment[grading_type]": {
                                        "description": "The strategy used for grading the assignment.\nThe assignment defaults to \"points\" if this field is omitted.",
                                        "enum": [
                                            "pass_fail",
                                            "percent",
                                            "letter_grade",
                                            "gpa_scale",
                                            "points"
                                        ],
                                        "type": "string"
                                    },
                                    "assignment[group_category_id]": {
                                        "description": "If present, the assignment will become a group assignment assigned\nto the group.",
                                        "format": "int64",
                                        "type": "integer"
                                    },
                                    "assignment[integration_data]": {
                                        "description": "Data used for SIS integrations. Requires admin-level token with the \"Manage SIS\" permission. JSON string required.",
                                        "type": "string"
                                    },
                                    "assignment[integration_id]": {
                                        "description": "Unique ID from third party integrations",
                                        "type": "string"
                                    },
                                    "assignment[lock_at]": {
                                        "description": "The day/time the assignment is locked after. Must be after the due date if there is a due date.\nAccepts times in ISO 8601 format, e.g. 2014-10-21T18:48:00Z.",
                                        "format": "date-time",
                                        "type": "string"
                                    },
                                    "assignment[moderated_grading]": {
                                        "description": "Whether this assignment is moderated.",
                                        "type": "boolean"
                                    },
                                    "assignment[muted]": {
                                        "description": "Whether this assignment is muted.\nA muted assignment does not send change notifications\nand hides grades from students.\nDefaults to false.",
                                        "type": "boolean"
                                    },
                                    "assignment[name]": {
                                        "description": "The assignment name.",
                                        "type": "string"
                                    },
                                    "assignment[notify_of_update]": {
                                        "description": "If true, Canvas will send a notification to students in the class\nnotifying them that the content has changed.",
                                        "type": "boolean"
                                    },
                                    "assignment[omit_from_final_grade]": {
                                        "description": "Whether this assignment is counted towards a student's final grade.",
                                        "type": "boolean"
                                    },
                                    "assignment[only_visible_to_overrides]": {
                                        "description": "Whether this assignment is only visible to overrides\n(Only useful if 'differentiated assignments' account setting is on)",
                                        "type": "boolean"
                                    },
                                    "assignment[peer_reviews]": {
                                        "description": "If submission_types does not include external_tool,discussion_topic,\nonline_quiz, or on_paper, determines whether or not peer reviews\nwill be turned on for the assignment.",
                                        "type": "boolean"
                                    },
                                    "assignment[points_possible]": {
                                        "description": "The maximum points possible on the assignment.",
                                        "format": "float",
                                        "type": "number"
                                    },
                                    "assignment[position]": {
                                        "description": "The position of this assignment in the group when displaying\nassignment lists.",
                                        "format": "int64",
                                        "type": "integer"
                                    },
                                    "assignment[published]": {
                                        "description": "Whether this assignment is published.\n(Only useful if 'draft state' account setting is on)\nUnpublished assignments are not visible to students.",
                                        "type": "boolean"
                                    },
                                    "assignment[quiz_lti]": {
                                        "description": "Whether this assignment should use the Quizzes 2 LTI tool. Sets the\nsubmission type to 'external_tool' and configures the external tool\nattributes to use the Quizzes 2 LTI tool configured for this course.\nHas no effect if no Quizzes 2 LTI tool is configured.",
                                        "type": "boolean"
                                    },
                                    "assignment[submission_types]": {
                                        "items": {
                                            "type": "string",
                                            "enum": [
                                                "online_quiz",
                                                "none",
                                                "on_paper",
                                                "discussion_topic",
                                                "external_tool",
                                                "online_upload",
                                                "online_text_entry",
                                                "online_url",
                                                "media_recording"
                                            ]
                                        },
                                        "type": "array"
                                    },
                                    "assignment[turnitin_enabled]": {
                                        "description": "Only applies when the Turnitin plugin is enabled for a course and\nthe submission_types array includes \"online_upload\".\nToggles Turnitin submissions for the assignment.\nWill be ignored if Turnitin is not available for the course.",
                                        "type": "boolean"
                                    },
                                    "assignment[turnitin_settings]": {
                                        "description": "Settings to send along to turnitin. See Assignment object definition for\nformat.",
                                        "type": "string"
                                    },
                                    "assignment[unlock_at]": {
                                        "description": "The day/time the assignment is unlocked. Must be before the due date if there is a due date.\nAccepts times in ISO 8601 format, e.g. 2014-10-21T18:48:00Z.",
                                        "format": "date-time",
                                        "type": "string"
                                    },
                                    "assignment[vericite_enabled]": {
                                        "description": "Only applies when the VeriCite plugin is enabled for a course and\nthe submission_types array includes \"online_upload\".\nToggles VeriCite submissions for the assignment.\nWill be ignored if VeriCite is not available for the course.",
                                        "type": "boolean"
                                    }
                                },
                                "required": [
                                    "assignment[name]"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Assignment"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Create an assignment",
                "tags": [
                    "assignments"
                ]
            }
        },
        "/v1/courses/{course_id}/assignments/gradeable_students": {
            "get": {
                "deprecated": false,
                "description": "A paginated list of students eligible to submit a list of assignments. The caller must have\npermission to view grades for the requested course.\n\nSection-limited instructors will only see students in their own sections.",
                "operationId": "list_multiple_assignments_gradeable_students",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Assignments being requested",
                        "explode": false,
                        "in": "query",
                        "name": "assignment_ids",
                        "schema": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "$ref": "#/components/parameters/pageParam"
                    },
                    {
                        "$ref": "#/components/parameters/perPageParam"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "List multiple assignments gradeable students",
                "tags": [
                    "submissions"
                ]
            }
        },
        "/v1/courses/{course_id}/assignments/overrides": {
            "get": {
                "deprecated": false,
                "description": "Returns a list of specified overrides in this course, providing\nthey target sections/groups/students visible to the current user.\nReturns null elements in the list for requests that were not found.",
                "operationId": "batch_retrieve_overrides_in_course",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Ids of overrides to retrieve",
                        "explode": false,
                        "in": "query",
                        "name": "assignment_overrides[id]",
                        "required": true,
                        "schema": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "description": "Ids of assignments for each override",
                        "explode": false,
                        "in": "query",
                        "name": "assignment_overrides[assignment_id]",
                        "required": true,
                        "schema": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/AssignmentOverride"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Batch retrieve overrides in a course",
                "tags": [
                    "assignments"
                ]
            },
            "post": {
                "deprecated": false,
                "description": "Creates the specified overrides for each assignment.  Handles creation in a\ntransaction, so all records are created or none are.\n\nOne of student_ids, group_id, or course_section_id must be present. At most\none should be present; if multiple are present only the most specific\n(student_ids first, then group_id, then course_section_id) is used and any\nothers are ignored.\n\nErrors are reported in an errors attribute, an array of errors corresponding\nto inputs.  Global errors will be reported as a single element errors array",
                "operationId": "batch_create_overrides_in_course",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "properties": {
                                    "assignment_overrides": {
                                        "description": "Attributes for the new assignment overrides.\nSee {api:AssignmentOverridesController#create Create an assignment override} for available\nattributes",
                                        "items": {
                                            "$ref": "#/components/schemas/AssignmentOverride"
                                        },
                                        "type": "array"
                                    }
                                },
                                "required": [
                                    "assignment_overrides"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/AssignmentOverride"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Batch create overrides in a course",
                "tags": [
                    "assignments"
                ]
            },
            "put": {
                "deprecated": false,
                "description": "Updates a list of specified overrides for each assignment.  Handles overrides\nin a transaction, so either all updates are applied or none.\nSee {api:AssignmentOverridesController#update Update an assignment override} for\navailable attributes.\n\nAll current overridden values must be supplied if they are to be retained;\ne.g. if due_at was overridden, but this PUT omits a value for due_at,\ndue_at will no longer be overridden. If the override is adhoc and\nstudent_ids is not supplied, the target override set is unchanged. Target\noverride sets cannot be changed for group or section overrides.\n\nErrors are reported in an errors attribute, an array of errors corresponding\nto inputs.  Global errors will be reported as a single element errors array",
                "operationId": "batch_update_overrides_in_course",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "assignment_overrides": {
                                        "items": {
                                            "$ref": "#/components/schemas/AssignmentOverride"
                                        },
                                        "type": "array"
                                    }
                                },
                                "required": [
                                    "assignment_overrides"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/AssignmentOverride"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Batch update overrides in a course",
                "tags": [
                    "assignments"
                ]
            }
        },
        "/v1/courses/{course_id}/assignments/{assignment_id}/anonymous_provisional_grades/status": {
            "get": {
                "deprecated": false,
                "description": "Determine whether or not the student's submission needs one or more provisional grades.",
                "operationId": "show_provisional_grade_status_for_student_anonymous",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "assignment_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The id of the student to show the status for",
                        "in": "query",
                        "name": "anonymous_id",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Show provisional grade status for a student",
                "tags": [
                    "moderated_grading"
                ]
            }
        },
        "/v1/courses/{course_id}/assignments/{assignment_id}/gradeable_students": {
            "get": {
                "deprecated": false,
                "description": "A paginated list of students eligible to submit the assignment. The caller must have permission to view grades.\n\nSection-limited instructors will only see students in their own sections.\n\nreturns [UserDisplay]",
                "operationId": "list_gradeable_students",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "assignment_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "in": "query",
                        "name": "page",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        },
                        "description": "The numeric value leading to the next paginated page. This needs to be parsed from the response header (Link field)."
                    },
                    {
                        "in": "query",
                        "name": "per_page",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        },
                        "description": "The number of items to return."
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/UserDisplay"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "Returns a list of UserDisplay objects"
                    }
                },
                "summary": "List gradeable students",
                "tags": [
                    "submissions"
                ]
            }
        },
        "/v1/courses/{course_id}/assignments/{assignment_id}/moderated_students": {
            "get": {
                "deprecated": false,
                "description": "Returns a paginated list of students selected for moderation",
                "operationId": "list_students_selected_for_moderation",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "assignment_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/pageParam"
                    },
                    {
                        "$ref": "#/components/parameters/perPageParam"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/User"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "List students selected for moderation",
                "tags": [
                    "moderated_grading"
                ]
            },
            "post": {
                "deprecated": false,
                "description": "Returns an array of users that were selected for moderation",
                "operationId": "select_students_for_moderation",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "assignment_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "properties": {
                                    "student_ids": {
                                        "description": "user ids for students to select for moderation",
                                        "items": {
                                            "type": "number"
                                        },
                                        "type": "array"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/User"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Select students for moderation",
                "tags": [
                    "moderated_grading"
                ]
            }
        },
        "/v1/courses/{course_id}/assignments/{assignment_id}/overrides": {
            "get": {
                "deprecated": false,
                "description": "Returns the paginated list of overrides for this assignment that target\nsections/groups/students visible to the current user.",
                "operationId": "list_assignment_overrides",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "assignment_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/pageParam"
                    },
                    {
                        "$ref": "#/components/parameters/perPageParam"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/AssignmentOverride"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "List assignment overrides",
                "tags": [
                    "assignments"
                ]
            },
            "post": {
                "deprecated": false,
                "description": "One of student_ids, group_id, or course_section_id must be present. At most\none should be present; if multiple are present only the most specific\n(student_ids first, then group_id, then course_section_id) is used and any\nothers are ignored.",
                "operationId": "create_assignment_override",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "assignment_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "properties": {
                                    "assignment_override[course_section_id]": {
                                        "description": "The ID\nof the override's target section. If present, must identify an active\nsection of the assignment's course not already targetted by a different\noverride.",
                                        "format": "int64",
                                        "type": "integer"
                                    },
                                    "assignment_override[due_at]": {
                                        "description": "The day/time\nthe overridden assignment is due. Accepts times in ISO 8601 format, e.g.\n2014-10-21T18:48:00Z. If absent, this override will not affect due date.\nMay be present but null to indicate the override removes any previous due\ndate.",
                                        "format": "date-time",
                                        "type": "string"
                                    },
                                    "assignment_override[group_id]": {
                                        "description": "The ID of the\noverride's target group. If present, the following conditions must be met\nfor the override to be successful:\n\n1. the assignment MUST be a group assignment (a group_category_id is assigned to it)\n2. the ID must identify an active group in the group set the assignment is in\n3. the ID must not be targetted by a different override\n\nSee {Appendix: Group assignments} for more info.",
                                        "format": "int64",
                                        "type": "integer"
                                    },
                                    "assignment_override[lock_at]": {
                                        "description": "The day/time\nthe overridden assignment becomes locked. Accepts times in ISO 8601\nformat, e.g. 2014-10-21T18:48:00Z. If absent, this override will not\naffect the lock date. May be present but null to indicate the override\nremoves any previous lock date.",
                                        "format": "date-time",
                                        "type": "string"
                                    },
                                    "assignment_override[student_ids]": {
                                        "description": "The IDs of\nthe override's target students. If present, the IDs must each identify a\nuser with an active student enrollment in the course that is not already\ntargetted by a different adhoc override.",
                                        "items": {
                                            "type": "integer"
                                        },
                                        "type": "array"
                                    },
                                    "assignment_override[title]": {
                                        "description": "The title of the adhoc\nassignment override. Required if student_ids is present, ignored\notherwise (the title is set to the name of the targetted group or section\ninstead).",
                                        "type": "string"
                                    },
                                    "assignment_override[unlock_at]": {
                                        "description": "The day/time\nthe overridden assignment becomes unlocked. Accepts times in ISO 8601\nformat, e.g. 2014-10-21T18:48:00Z. If absent, this override will not\naffect the unlock date. May be present but null to indicate the override\nremoves any previous unlock date.",
                                        "format": "date-time",
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AssignmentOverride"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Create an assignment override",
                "tags": [
                    "assignments"
                ]
            }
        },
        "/v1/courses/{course_id}/assignments/{assignment_id}/overrides/{id}": {
            "delete": {
                "deprecated": false,
                "description": "Deletes an override and returns its former details.",
                "operationId": "delete_assignment_override",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "assignment_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AssignmentOverride"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Delete an assignment override",
                "tags": [
                    "assignments"
                ]
            },
            "get": {
                "deprecated": false,
                "description": "Returns details of the the override with the given id.",
                "operationId": "get_single_assignment_override",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "assignment_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AssignmentOverride"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Get a single assignment override",
                "tags": [
                    "assignments"
                ]
            },
            "put": {
                "deprecated": false,
                "description": "All current overridden values must be supplied if they are to be retained;\ne.g. if due_at was overridden, but this PUT omits a value for due_at,\ndue_at will no longer be overridden. If the override is adhoc and\nstudent_ids is not supplied, the target override set is unchanged. Target\noverride sets cannot be changed for group or section overrides.",
                "operationId": "update_assignment_override",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "assignment_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "assignment_override[due_at]": {
                                        "description": "The day/time\nthe overridden assignment is due. Accepts times in ISO 8601 format, e.g.\n2014-10-21T18:48:00Z. If absent, this override will not affect due date.\nMay be present but null to indicate the override removes any previous due\ndate.",
                                        "format": "date-time",
                                        "type": "string"
                                    },
                                    "assignment_override[lock_at]": {
                                        "description": "The day/time\nthe overridden assignment becomes locked. Accepts times in ISO 8601\nformat, e.g. 2014-10-21T18:48:00Z. If absent, this override will not\naffect the lock date. May be present but null to indicate the override\nremoves any previous lock date.",
                                        "format": "date-time",
                                        "type": "string"
                                    },
                                    "assignment_override[student_ids]": {
                                        "description": "The IDs of the\noverride's target students. If present, the IDs must each identify a\nuser with an active student enrollment in the course that is not already\ntargetted by a different adhoc override. Ignored unless the override\nbeing updated is adhoc.",
                                        "items": {
                                            "type": "integer"
                                        },
                                        "type": "array"
                                    },
                                    "assignment_override[title]": {
                                        "description": "The title of an adhoc\nassignment override. Ignored unless the override being updated is adhoc.",
                                        "type": "string"
                                    },
                                    "assignment_override[unlock_at]": {
                                        "description": "The day/time\nthe overridden assignment becomes unlocked. Accepts times in ISO 8601\nformat, e.g. 2014-10-21T18:48:00Z. If absent, this override will not\naffect the unlock date. May be present but null to indicate the override\nremoves any previous unlock date.",
                                        "format": "date-time",
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/AssignmentOverride"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Update an assignment override",
                "tags": [
                    "assignments"
                ]
            }
        },
        "/v1/courses/{course_id}/assignments/{assignment_id}/peer_reviews": {
            "get": {
                "deprecated": false,
                "description": "Get a list of all Peer Reviews for this assignment",
                "operationId": "get_all_peer_reviews_courses_peer_reviews",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "assignment_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Associations to include with the peer review.",
                        "explode": false,
                        "in": "query",
                        "name": "include",
                        "schema": {
                            "items": {
                                "type": "string",
                                "enum": [
                                    "submission_comments",
                                    "user"
                                ]
                            },
                            "type": "array"
                        },
                        "style": "form"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/PeerReview"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Get all Peer Reviews",
                "tags": [
                    "peer_reviews"
                ]
            }
        },
        "/v1/courses/{course_id}/assignments/{assignment_id}/provisional_grades/bulk_select": {
            "put": {
                "deprecated": false,
                "description": "Choose which provisional grades will be received by associated students for an assignment.\nThe caller must be the final grader for the assignment or an admin with :select_final_grade rights.",
                "operationId": "bulk_select_provisional_grades",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "assignment_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Bulk select provisional grades",
                "tags": [
                    "moderated_grading"
                ]
            }
        },
        "/v1/courses/{course_id}/assignments/{assignment_id}/provisional_grades/publish": {
            "post": {
                "deprecated": false,
                "description": "Publish the selected provisional grade for all submissions to an assignment.\nUse the \"Select provisional grade\" endpoint to choose which provisional grade to publish\nfor a particular submission.\n\nStudents not in the moderation set will have their one and only provisional grade published.\n\nWARNING: This is irreversible. This will overwrite existing grades in the gradebook.",
                "operationId": "publish_provisional_grades_for_assignment",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "assignment_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Publish provisional grades for an assignment",
                "tags": [
                    "moderated_grading"
                ]
            }
        },
        "/v1/courses/{course_id}/assignments/{assignment_id}/provisional_grades/status": {
            "get": {
                "deprecated": false,
                "description": "Tell whether the student's submission needs one or more provisional grades.",
                "operationId": "show_provisional_grade_status_for_student",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "assignment_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The id of the student to show the status for",
                        "in": "query",
                        "name": "student_id",
                        "schema": {
                            "format": "int64",
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Show provisional grade status for a student",
                "tags": [
                    "moderated_grading"
                ]
            }
        },
        "/v1/courses/{course_id}/assignments/{assignment_id}/provisional_grades/{provisional_grade_id}/copy_to_final_mark": {
            "post": {
                "deprecated": false,
                "description": "Given a provisional grade, copy the grade (and associated submission comments and rubric assessments)\nto a \"final\" mark which can be edited or commented upon by a moderator prior to publication of grades.\n\nNotes:\n* The student must be in the moderation set for the assignment.\n* The newly created grade will be selected.\n* The caller must have \"Moderate Grades\" rights in the course.",
                "operationId": "copy_provisional_grade",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "assignment_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "provisional_grade_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ProvisionalGrade"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Copy provisional grade",
                "tags": [
                    "moderated_grading"
                ]
            }
        },
        "/v1/courses/{course_id}/assignments/{assignment_id}/provisional_grades/{provisional_grade_id}/select": {
            "put": {
                "deprecated": false,
                "description": "Choose which provisional grade the student should receive for a submission.\nThe caller must be the final grader for the assignment or an admin with :select_final_grade rights.",
                "operationId": "select_provisional_grade",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "assignment_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "provisional_grade_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Select provisional grade",
                "tags": [
                    "moderated_grading"
                ]
            }
        },
        "/v1/courses/{course_id}/assignments/{assignment_id}/submission_summary": {
            "get": {
                "deprecated": false,
                "description": "Returns the number of submissions for the given assignment based on gradeable students\nthat fall into three categories: graded, ungraded, not submitted.",
                "operationId": "submission_summary_courses",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "assignment_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "If this argument is true, the response will take into account student groups.",
                        "in": "query",
                        "name": "grouped",
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Submission Summary",
                "tags": [
                    "submissions"
                ]
            }
        },
        "/v1/courses/{course_id}/assignments/{assignment_id}/submissions": {
            "get": {
                "deprecated": false,
                "description": "A paginated list of all existing submissions for an assignment.",
                "operationId": "list_assignment_submissions_courses",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "assignment_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Associations to include with the group.  \"group\" will add group_id and group_name.",
                        "explode": false,
                        "in": "query",
                        "name": "include",
                        "schema": {
                            "items": {
                                "type": "string",
                                "enum": [
                                    "submission_history",
                                    "submission_comments",
                                    "rubric_assessment",
                                    "assignment",
                                    "visibility",
                                    "course",
                                    "user",
                                    "group"
                                ]
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "description": "If this argument is true, the response will be grouped by student groups.",
                        "in": "query",
                        "name": "grouped",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "in": "query",
                        "name": "page",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        },
                        "description": "The numeric value leading to the next paginated page. This needs to be parsed from the response header (Link field)."
                    },
                    {
                        "in": "query",
                        "name": "per_page",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        },
                        "description": "The number of items to return."
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Submission"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "List assignment submissions",
                "tags": [
                    "submissions"
                ]
            },
            "post": {
                "deprecated": false,
                "description": "Make a submission for an assignment. You must be enrolled as a student in\nthe course/section to do this.\n\nAll online turn-in submission types are supported in this API. However,\nthere are a few things that are not yet supported:\n\n* Files can be submitted based on a file ID of a user or group file. However, there is no API yet for listing the user and group files, or uploading new files via the API. A file upload API is coming soon.\n* Media comments can be submitted, however, there is no API yet for creating a media comment to submit.\n* Integration with Google Docs is not yet supported.",
                "operationId": "submit_assignment_courses",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "assignment_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "properties": {
                                    "comment[text_comment]": {
                                        "description": "Include a textual comment with the submission.",
                                        "type": "string"
                                    },
                                    "submission[body]": {
                                        "description": "Submit the assignment as an HTML document snippet. Note this HTML snippet\nwill be sanitized using the same ruleset as a submission made from the\nCanvas web UI. The sanitized HTML will be returned in the response as the\nsubmission body. Requires a submission_type of \"online_text_entry\".",
                                        "type": "string"
                                    },
                                    "submission[file_ids]": {
                                        "description": "Submit the assignment as a set of one or more previously uploaded files\nresiding in the submitting user's files section (or the group's files\nsection, for group assignments).\n\nTo upload a new file to submit, see the submissions {api:SubmissionsApiController#create_file Upload a file API}.\n\nRequires a submission_type of \"online_upload\".",
                                        "items": {
                                            "type": "integer"
                                        },
                                        "type": "array"
                                    },
                                    "submission[media_comment_id]": {
                                        "description": "The media comment id to submit. Media comment ids can be submitted via\nthis API, however, note that there is not yet an API to generate or list\nexisting media comments, so this functionality is currently of limited use.\n\nRequires a submission_type of \"media_recording\".",
                                        "type": "string"
                                    },
                                    "submission[media_comment_type]": {
                                        "description": "The type of media comment being submitted.",
                                        "enum": [
                                            "audio",
                                            "video"
                                        ],
                                        "type": "string"
                                    },
                                    "submission[submission_type]": {
                                        "description": "The type of submission being made. The assignment submission_types must\ninclude this submission type as an allowed option, or the submission will be rejected with a 400 error.\n\nThe submission_type given determines which of the following parameters is\nused. For instance, to submit a URL, submission [submission_type] must be\nset to \"online_url\", otherwise the submission [url] parameter will be\nignored.",
                                        "enum": [
                                            "online_text_entry",
                                            "online_url",
                                            "online_upload",
                                            "media_recording",
                                            "basic_lti_launch"
                                        ],
                                        "type": "string"
                                    },
                                    "submission[url]": {
                                        "description": "Submit the assignment as a URL. The URL scheme must be \"http\" or \"https\",\nno \"ftp\" or other URL schemes are allowed. If no scheme is given (e.g.\n\"www.example.com\") then \"http\" will be assumed. Requires a submission_type\nof \"online_url\" or \"basic_lti_launch\".",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "submission[submission_type]"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Submit an assignment",
                "tags": [
                    "submissions"
                ]
            }
        },
        "/v1/courses/{course_id}/assignments/{assignment_id}/submissions/update_grades": {
            "post": {
                "deprecated": false,
                "description": "Update the grading and comments on multiple student's assignment\nsubmissions in an asynchronous job.\n\nThe user must have permission to manage grades in the appropriate context\n(course or section).",
                "operationId": "grade_or_comment_on_multiple_submissions_courses_assignments",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "assignment_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "properties": {
                                    "grade_data[student_id][assignment_id]": {
                                        "description": "Specifies which assignment to grade.  This argument is not necessary when\nusing the assignment-specific endpoints.",
                                        "format": "int64",
                                        "type": "integer"
                                    },
                                    "grade_data[student_id][excuse]": {
                                        "description": "See documentation for the excuse argument in the\n{api:SubmissionsApiController#update Submissions Update} documentation",
                                        "type": "boolean"
                                    },
                                    "grade_data[student_id][file_ids]": {
                                        "description": "See documentation for the comment[] arguments in the\n{api:SubmissionsApiController#update Submissions Update} documentation",
                                        "items": {
                                            "type": "integer"
                                        },
                                        "type": "array"
                                    },
                                    "grade_data[student_id][group_comment]": {
                                        "description": "no description",
                                        "type": "boolean"
                                    },
                                    "grade_data[student_id][media_comment_id]": {
                                        "description": "no description",
                                        "type": "string"
                                    },
                                    "grade_data[student_id][media_comment_type]": {
                                        "description": "no description",
                                        "enum": [
                                            "audio",
                                            "video"
                                        ],
                                        "type": "string"
                                    },
                                    "grade_data[student_id][posted_grade]": {
                                        "description": "See documentation for the posted_grade argument in the\n{api:SubmissionsApiController#update Submissions Update} documentation",
                                        "type": "string"
                                    },
                                    "grade_data[student_id][rubric_assessment]": {
                                        "description": "See documentation for the rubric_assessment argument in the\n{api:SubmissionsApiController#update Submissions Update} documentation"
                                    },
                                    "grade_data[student_id][text_comment]": {
                                        "description": "no description",
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Progress"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Grade or comment on multiple submissions",
                "tags": [
                    "submissions"
                ]
            }
        },
        "/v1/courses/{course_id}/assignments/{assignment_id}/submissions/{submission_id}/peer_reviews": {
            "delete": {
                "deprecated": false,
                "description": "Delete a peer review for the assignment",
                "operationId": "delete_peer_review_courses",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "assignment_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "submission_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "user_id to delete as reviewer on this assignment",
                        "in": "query",
                        "name": "user_id",
                        "required": true,
                        "schema": {
                            "format": "int64",
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PeerReview"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Delete Peer Review",
                "tags": [
                    "peer_reviews"
                ]
            },
            "get": {
                "deprecated": false,
                "description": "Get a list of all Peer Reviews for this assignment",
                "operationId": "get_all_peer_reviews_courses_submissions",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "assignment_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "submission_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Associations to include with the peer review.",
                        "explode": false,
                        "in": "query",
                        "name": "include",
                        "schema": {
                            "items": {
                                "type": "string",
                                "enum": [
                                    "submission_comments",
                                    "user"
                                ]
                            },
                            "type": "array"
                        },
                        "style": "form"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/PeerReview"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Get all Peer Reviews",
                "tags": [
                    "peer_reviews"
                ]
            },
            "post": {
                "deprecated": false,
                "description": "Create a peer review for the assignment",
                "operationId": "create_peer_review_courses",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "assignment_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "submission_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "properties": {
                                    "user_id": {
                                        "description": "user_id to assign as reviewer on this assignment",
                                        "format": "int64",
                                        "type": "integer"
                                    }
                                },
                                "required": [
                                    "user_id"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PeerReview"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Create Peer Review",
                "tags": [
                    "peer_reviews"
                ]
            }
        },
        "/v1/courses/{course_id}/assignments/{assignment_id}/submissions/{user_id}": {
            "get": {
                "deprecated": false,
                "description": "Get a single submission, based on user id.",
                "operationId": "get_single_submission_courses",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "assignment_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "user_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Associations to include with the group.",
                        "explode": false,
                        "in": "query",
                        "name": "include",
                        "schema": {
                            "items": {
                                "type": "string",
                                "enum": [
                                    "submission_history",
                                    "submission_comments",
                                    "rubric_assessment",
                                    "visibility",
                                    "course",
                                    "user"
                                ]
                            },
                            "type": "array"
                        },
                        "style": "form"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Submission"
                                }
                            }
                        },
                        "description": "The submission object"
                    }
                },
                "summary": "Get a single submission",
                "tags": [
                    "submissions"
                ]
            },
            "put": {
                "summary": "Grade or comment on a submission",
                "deprecated": false,
                "description": "Comment on and/or update the grading for a student's assignment submission. If any submission or rubric_assessment arguments are provided, the user must have permission to manage grades in the appropriate context (course or section).",
                "operationId": "grade_or_comment_on_submission_courses",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "assignment_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "user_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "comment[file_ids]": {
                                        "description": "Attach files to this comment that were previously uploaded using the\nSubmission Comment API's files action",
                                        "items": {
                                            "type": "integer"
                                        },
                                        "type": "array"
                                    },
                                    "comment[group_comment]": {
                                        "description": "Whether or not this comment should be sent to the entire group (defaults\nto false). Ignored if this is not a group assignment or if no text_comment\nis provided.",
                                        "type": "boolean"
                                    },
                                    "comment[media_comment_id]": {
                                        "description": "Add an audio/video comment to the submission. Media comments can be added\nvia this API, however, note that there is not yet an API to generate or\nlist existing media comments, so this functionality is currently of\nlimited use.",
                                        "type": "string"
                                    },
                                    "comment[media_comment_type]": {
                                        "description": "The type of media comment being added.",
                                        "enum": [
                                            "audio",
                                            "video"
                                        ],
                                        "type": "string"
                                    },
                                    "comment[text_comment]": {
                                        "description": "Add a textual comment to the submission.",
                                        "type": "string"
                                    },
                                    "include[visibility]": {
                                        "description": "Whether this assignment is visible to the owner of the submission",
                                        "type": "string"
                                    },
                                    "rubric_assessment": {
                                        "description": "Assign a rubric assessment to this assignment submission. The\nsub-parameters here depend on the rubric for the assignment. The general\nformat is, for each row in the rubric:\n\nThe points awarded for this row.\n  rubric_assessment[criterion_id][points]\n\nComments to add for this row.\n  rubric_assessment[criterion_id][comments]\n\nFor example, if the assignment rubric is (in JSON format):\n  !!!javascript\n  [\n    {\n      'id': 'crit1',\n      'points': 10,\n      'description': 'Criterion 1',\n      'ratings':\n      [\n        { 'description': 'Good', 'points': 10 },\n        { 'description': 'Poor', 'points': 3 }\n      ]\n    },\n    {\n      'id': 'crit2',\n      'points': 5,\n      'description': 'Criterion 2',\n      'ratings':\n      [\n        { 'description': 'Complete', 'points': 5 },\n        { 'description': 'Incomplete', 'points': 0 }\n      ]\n    }\n  ]\n\nThen a possible set of values for rubric_assessment would be:\n    rubric_assessment[crit1][points]=3&rubric_assessment[crit2][points]=5&rubric_assessment[crit2][comments]=Well%20Done."
                                    },
                                    "submission[excuse]": {
                                        "description": "Sets the \"excused\" status of an assignment.",
                                        "type": "boolean"
                                    },
                                    "submission[late_policy_status]": {
                                        "description": "Sets the late policy status to either \"late\", \"missing\", \"none\", or null.",
                                        "type": "string"
                                    },
                                    "submission[posted_grade]": {
                                        "description": "Assign a score to the submission, updating both the \"score\" and \"grade\"\nfields on the submission record. This parameter can be passed in a few\ndifferent formats:\n\npoints:: A floating point or integral value, such as \"13.5\". The grade\n  will be interpreted directly as the score of the assignment.\n  Values above assignment.points_possible are allowed, for awarding\n  extra credit.\npercentage:: A floating point value appended with a percent sign, such as\n   \"40%\". The grade will be interpreted as a percentage score on the\n   assignment, where 100% == assignment.points_possible. Values above 100%\n   are allowed, for awarding extra credit.\nletter grade:: A letter grade, following the assignment's defined letter\n   grading scheme. For example, \"A-\". The resulting score will be the high\n   end of the defined range for the letter grade. For instance, if \"B\" is\n   defined as 86% to 84%, a letter grade of \"B\" will be worth 86%. The\n   letter grade will be rejected if the assignment does not have a defined\n   letter grading scheme. For more fine-grained control of scores, pass in\n   points or percentage rather than the letter grade.\n\"pass/complete/fail/incomplete\":: A string value of \"pass\" or \"complete\"\n   will give a score of 100%. \"fail\" or \"incomplete\" will give a score of\n   0.\n\nNote that assignments with grading_type of \"pass_fail\" can only be\nassigned a score of 0 or assignment.points_possible, nothing inbetween. If\na posted_grade in the \"points\" or \"percentage\" format is sent, the grade\nwill only be accepted if the grade equals one of those two values.",
                                        "type": "string"
                                    },
                                    "submission[seconds_late_override]": {
                                        "description": "Sets the seconds late if late policy status is \"late\"",
                                        "format": "int64",
                                        "type": "integer"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Submission"
                                }
                            }
                        },
                        "description": "The submission on which has been commented."
                    }
                },
                "tags": [
                    "submissions"
                ]
            }
        },
        "/v1/courses/{course_id}/assignments/{assignment_id}/submissions/{user_id}/comments/files": {
            "post": {
                "deprecated": false,
                "description": "Upload a file to attach to a submission comment\n\nSee the {file:file_uploads.html File Upload Documentation} for details on the file upload workflow.\n\nThe final step of the file upload workflow will return the attachment data,\nincluding the new file id. The caller can then PUT the file_id to the\nsubmission API to attach it to a comment",
                "operationId": "upload_file_to_submission",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "assignment_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "user_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Upload a file",
                "tags": [
                    "submission_comments"
                ]
            }
        },
        "/v1/courses/{course_id}/assignments/{assignment_id}/submissions/{user_id}/files": {
            "post": {
                "deprecated": false,
                "description": "Upload a file to a submission.\n\nThis API endpoint is the first step in uploading a file to a submission as a student.\nSee the {file:file_uploads.html File Upload Documentation} for details on the file upload workflow.\n\nThe final step of the file upload workflow will return the attachment data,\nincluding the new file id. The caller can then POST to submit the\n+online_upload+ assignment with these file ids.",
                "operationId": "upload_file_courses",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "assignment_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "user_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Upload a file",
                "tags": [
                    "submissions"
                ]
            }
        },
        "/v1/courses/{course_id}/assignments/{assignment_id}/submissions/{user_id}/read": {
            "delete": {
                "deprecated": false,
                "description": "No request fields are necessary.\n\nOn success, the response will be 204 No Content with an empty body.",
                "operationId": "mark_submission_as_unread_courses",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "assignment_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "user_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Mark submission as unread",
                "tags": [
                    "submissions"
                ]
            },
            "put": {
                "deprecated": false,
                "description": "No request fields are necessary.\n\nOn success, the response will be 204 No Content with an empty body.",
                "operationId": "mark_submission_as_read_courses",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "assignment_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "user_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Mark submission as read",
                "tags": [
                    "submissions"
                ]
            }
        },
        "/v1/courses/{course_id}/assignments/{id}": {
            "delete": {
                "deprecated": false,
                "description": "Delete the given assignment.",
                "operationId": "delete_assignment",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Assignment"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Delete an assignment",
                "tags": [
                    "assignments"
                ]
            },
            "get": {
                "deprecated": false,
                "description": "Returns the assignment with the given id.",
                "operationId": "get_single_assignment",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Associations to include with the assignment. The \"assignment_visibility\" option\nrequires that the Differentiated Assignments course feature be turned on. If\n\"observed_users\" is passed, submissions for observed users will also be included.",
                        "explode": false,
                        "in": "query",
                        "name": "include",
                        "schema": {
                            "items": {
                                "type": "string",
                                "enum": [
                                    "submission",
                                    "assignment_visibility",
                                    "overrides",
                                    "observed_users"
                                ]
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "description": "Apply assignment overrides to the assignment, defaults to true.",
                        "in": "query",
                        "name": "override_assignment_dates",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "description": "Split up \"needs_grading_count\" by sections into the \"needs_grading_count_by_section\" key, defaults to false",
                        "in": "query",
                        "name": "needs_grading_count_by_section",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "description": "All dates associated with the assignment, if applicable",
                        "in": "query",
                        "name": "all_dates",
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Assignment"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Get a single assignment",
                "tags": [
                    "assignments"
                ]
            },
            "put": {
                "deprecated": false,
                "description": "Modify an existing assignment.\n\nIf the assignment [assignment_overrides] key is absent, any existing\noverrides are kept as is. If the assignment [assignment_overrides] key is\npresent, existing overrides are updated or deleted (and new ones created,\nas necessary) to match the provided list.",
                "operationId": "edit_assignment",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "assignment[allowed_extensions]": {
                                        "description": "Allowed extensions if submission_types includes \"online_upload\"\n\nExample:\n  allowed_extensions: [\"docx\",\"ppt\"]",
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "assignment[assignment_group_id]": {
                                        "description": "The assignment group id to put the assignment in.\nDefaults to the top assignment group in the course.",
                                        "format": "int64",
                                        "type": "integer"
                                    },
                                    "assignment[assignment_overrides]": {
                                        "description": "List of overrides for the assignment.",
                                        "items": {
                                            "$ref": "#/components/schemas/AssignmentOverride"
                                        },
                                        "type": "array"
                                    },
                                    "assignment[automatic_peer_reviews]": {
                                        "description": "Whether peer reviews will be assigned automatically by Canvas or if\nteachers must manually assign peer reviews. Does not apply if peer reviews\nare not enabled.",
                                        "type": "boolean"
                                    },
                                    "assignment[description]": {
                                        "description": "The assignment's description, supports HTML.",
                                        "type": "string"
                                    },
                                    "assignment[due_at]": {
                                        "description": "The day/time the assignment is due.\nAccepts times in ISO 8601 format, e.g. 2014-10-21T18:48:00Z.",
                                        "format": "date-time",
                                        "type": "string"
                                    },
                                    "assignment[external_tool_tag_attributes]": {
                                        "description": "Hash of external tool parameters if submission_types is [\"external_tool\"].\nSee Assignment object definition for format.",
                                        "type": "string"
                                    },
                                    "assignment[grade_group_students_individually]": {
                                        "description": "If this is a group assignment, teachers have the options to grade\nstudents individually. If false, Canvas will apply the assignment's\nscore to each member of the group. If true, the teacher can manually\nassign scores to each member of the group.",
                                        "format": "int64",
                                        "type": "integer"
                                    },
                                    "assignment[grading_standard_id]": {
                                        "description": "The grading standard id to set for the course.  If no value is provided for this argument the current grading_standard will be un-set from this course.\nThis will update the grading_type for the course to 'letter_grade' unless it is already 'gpa_scale'.",
                                        "format": "int64",
                                        "type": "integer"
                                    },
                                    "assignment[grading_type]": {
                                        "description": "The strategy used for grading the assignment.\nThe assignment defaults to \"points\" if this field is omitted.",
                                        "enum": [
                                            "pass_fail",
                                            "percent",
                                            "letter_grade",
                                            "gpa_scale",
                                            "points"
                                        ],
                                        "type": "string"
                                    },
                                    "assignment[group_category_id]": {
                                        "description": "If present, the assignment will become a group assignment assigned\nto the group.",
                                        "format": "int64",
                                        "type": "integer"
                                    },
                                    "assignment[integration_data]": {
                                        "description": "Data used for SIS integrations. Requires admin-level token with the \"Manage SIS\" permission. JSON string required.",
                                        "type": "string"
                                    },
                                    "assignment[integration_id]": {
                                        "description": "Unique ID from third party integrations",
                                        "type": "string"
                                    },
                                    "assignment[lock_at]": {
                                        "description": "The day/time the assignment is locked after. Must be after the due date if there is a due date.\nAccepts times in ISO 8601 format, e.g. 2014-10-21T18:48:00Z.",
                                        "format": "date-time",
                                        "type": "string"
                                    },
                                    "assignment[moderated_grading]": {
                                        "description": "Whether this assignment is moderated.",
                                        "type": "boolean"
                                    },
                                    "assignment[muted]": {
                                        "description": "Whether this assignment is muted.\nA muted assignment does not send change notifications\nand hides grades from students.\nDefaults to false.",
                                        "type": "boolean"
                                    },
                                    "assignment[name]": {
                                        "description": "The assignment name.",
                                        "type": "string"
                                    },
                                    "assignment[notify_of_update]": {
                                        "description": "If true, Canvas will send a notification to students in the class\nnotifying them that the content has changed.",
                                        "type": "boolean"
                                    },
                                    "assignment[omit_from_final_grade]": {
                                        "description": "Whether this assignment is counted towards a student's final grade.",
                                        "type": "boolean"
                                    },
                                    "assignment[only_visible_to_overrides]": {
                                        "description": "Whether this assignment is only visible to overrides\n(Only useful if 'differentiated assignments' account setting is on)",
                                        "type": "boolean"
                                    },
                                    "assignment[peer_reviews]": {
                                        "description": "If submission_types does not include external_tool,discussion_topic,\nonline_quiz, or on_paper, determines whether or not peer reviews\nwill be turned on for the assignment.",
                                        "type": "boolean"
                                    },
                                    "assignment[points_possible]": {
                                        "description": "The maximum points possible on the assignment.",
                                        "format": "float",
                                        "type": "number"
                                    },
                                    "assignment[position]": {
                                        "description": "The position of this assignment in the group when displaying\nassignment lists.",
                                        "format": "int64",
                                        "type": "integer"
                                    },
                                    "assignment[published]": {
                                        "description": "Whether this assignment is published.\n(Only useful if 'draft state' account setting is on)\nUnpublished assignments are not visible to students.",
                                        "type": "boolean"
                                    },
                                    "assignment[submission_types]": {
                                        "description": "List of supported submission types for the assignment.\nUnless the assignment is allowing online submissions, the array should\nonly have one element.\n\nIf not allowing online submissions, your options are:\n  \"online_quiz\"\n  \"none\"\n  \"on_paper\"\n  \"discussion_topic\"\n  \"external_tool\"\n\nIf you are allowing online submissions, you can have one or many\nallowed submission types:\n\n  \"online_upload\"\n  \"online_text_entry\"\n  \"online_url\"\n  \"media_recording\" (Only valid when the Kaltura plugin is enabled)",
                                        "items": {
                                            "type": "string",
                                            "enum": [
                                                "online_quiz",
                                                "none",
                                                "on_paper",
                                                "discussion_topic",
                                                "external_tool",
                                                "online_upload",
                                                "online_text_entry",
                                                "online_url",
                                                "media_recording"
                                            ]
                                        },
                                        "type": "array"
                                    },
                                    "assignment[turnitin_enabled]": {
                                        "description": "Only applies when the Turnitin plugin is enabled for a course and\nthe submission_types array includes \"online_upload\".\nToggles Turnitin submissions for the assignment.\nWill be ignored if Turnitin is not available for the course.",
                                        "type": "boolean"
                                    },
                                    "assignment[turnitin_settings]": {
                                        "description": "Settings to send along to turnitin. See Assignment object definition for\nformat.",
                                        "type": "string"
                                    },
                                    "assignment[unlock_at]": {
                                        "description": "The day/time the assignment is unlocked. Must be before the due date if there is a due date.\nAccepts times in ISO 8601 format, e.g. 2014-10-21T18:48:00Z.",
                                        "format": "date-time",
                                        "type": "string"
                                    },
                                    "assignment[vericite_enabled]": {
                                        "description": "Only applies when the VeriCite plugin is enabled for a course and\nthe submission_types array includes \"online_upload\".\nToggles VeriCite submissions for the assignment.\nWill be ignored if VeriCite is not available for the course.",
                                        "type": "boolean"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Assignment"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Edit an assignment",
                "tags": [
                    "assignments"
                ]
            }
        },
        "/v1/courses/{course_id}/blueprint_subscriptions": {
            "get": {
                "deprecated": false,
                "description": "Returns a list of blueprint subscriptions for the given course. (Currently a course may have no more than one.)",
                "operationId": "list_blueprint_subscriptions",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/BlueprintSubscription"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "List blueprint subscriptions",
                "tags": [
                    "blueprint_courses"
                ]
            }
        },
        "/v1/courses/{course_id}/blueprint_subscriptions/{subscription_id}/migrations": {
            "get": {
                "deprecated": false,
                "description": "Shows a paginated list of migrations imported into a course associated with a blueprint, starting with the most recent. See also\n{api:MasterCourses::MasterTemplatesController#migrations_index the blueprint course side}.\n\nUse 'default' as the subscription_id to use the currently active blueprint subscription.",
                "operationId": "list_blueprint_imports",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "subscription_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/pageParam"
                    },
                    {
                        "$ref": "#/components/parameters/perPageParam"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/BlueprintMigration"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "List blueprint imports",
                "tags": [
                    "blueprint_courses"
                ]
            }
        },
        "/v1/courses/{course_id}/blueprint_subscriptions/{subscription_id}/migrations/{id}": {
            "get": {
                "deprecated": false,
                "description": "Shows the status of an import into a course associated with a blueprint. See also\n{api:MasterCourses::MasterTemplatesController#migrations_show the blueprint course side}.",
                "operationId": "show_blueprint_import",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "subscription_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BlueprintMigration"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Show a blueprint import",
                "tags": [
                    "blueprint_courses"
                ]
            }
        },
        "/v1/courses/{course_id}/blueprint_subscriptions/{subscription_id}/migrations/{id}/details": {
            "get": {
                "deprecated": false,
                "description": "Show the changes that were propagated to a course associated with a blueprint.  See also\n{api:MasterCourses::MasterTemplatesController#migration_details the blueprint course side}.",
                "operationId": "get_import_details",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "subscription_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/ChangeRecord"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Get import details",
                "tags": [
                    "blueprint_courses"
                ]
            }
        },
        "/v1/courses/{course_id}/blueprint_templates/{template_id}": {
            "get": {
                "deprecated": false,
                "description": "Using 'default' as the template_id should suffice for the current implmentation (as there should be only one template per course).\nHowever, using specific template ids may become necessary in the future",
                "operationId": "get_blueprint_information",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "template_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BlueprintTemplate"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Get blueprint information",
                "tags": [
                    "blueprint_courses"
                ]
            }
        },
        "/v1/courses/{course_id}/blueprint_templates/{template_id}/associated_courses": {
            "get": {
                "deprecated": false,
                "description": "Returns a list of courses that are configured to receive updates from this blueprint",
                "operationId": "get_associated_course_information",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "template_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Course"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Get associated course information",
                "tags": [
                    "blueprint_courses"
                ]
            }
        },
        "/v1/courses/{course_id}/blueprint_templates/{template_id}/migrations": {
            "get": {
                "deprecated": false,
                "description": "Shows a paginated list of migrations for the template, starting with the most recent. This endpoint can be called on a\nblueprint course. See also {api:MasterCourses::MasterTemplatesController#imports_index the associated course side}.",
                "operationId": "list_blueprint_migrations",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "template_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/pageParam"
                    },
                    {
                        "$ref": "#/components/parameters/perPageParam"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/BlueprintMigration"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "List blueprint migrations",
                "tags": [
                    "blueprint_courses"
                ]
            },
            "post": {
                "deprecated": false,
                "description": "Begins a migration to push recently updated content to all associated courses.\nOnly one migration can be running at a time.",
                "operationId": "begin_migration_to_push_to_associated_courses",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "template_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "comment": {
                                        "description": "An optional comment to be included in the sync history.",
                                        "type": "string"
                                    },
                                    "copy_settings": {
                                        "description": "Whether course settings should be copied over to associated courses.\nDefaults to true for newly associated courses.",
                                        "type": "boolean"
                                    },
                                    "send_notification": {
                                        "description": "Send a notification to the calling user when the sync completes.",
                                        "type": "boolean"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BlueprintMigration"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Begin a migration to push to associated courses",
                "tags": [
                    "blueprint_courses"
                ]
            }
        },
        "/v1/courses/{course_id}/blueprint_templates/{template_id}/migrations/{id}": {
            "get": {
                "deprecated": false,
                "description": "Shows the status of a migration. This endpoint can be called on a blueprint course. See also\n{api:MasterCourses::MasterTemplatesController#imports_show the associated course side}.",
                "operationId": "show_blueprint_migration",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "template_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BlueprintMigration"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Show a blueprint migration",
                "tags": [
                    "blueprint_courses"
                ]
            }
        },
        "/v1/courses/{course_id}/blueprint_templates/{template_id}/migrations/{id}/details": {
            "get": {
                "deprecated": false,
                "description": "Show the changes that were propagated in a blueprint migration. This endpoint can be called on a\nblueprint course. See also {api:MasterCourses::MasterTemplatesController#import_details the associated course side}.",
                "operationId": "get_migration_details",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "template_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/ChangeRecord"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Get migration details",
                "tags": [
                    "blueprint_courses"
                ]
            }
        },
        "/v1/courses/{course_id}/blueprint_templates/{template_id}/restrict_item": {
            "put": {
                "deprecated": false,
                "description": "If a blueprint course object is restricted, editing will be limited for copies in associated courses.",
                "operationId": "set_or_remove_restrictions_on_blueprint_course_object",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "template_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "content_id": {
                                        "description": "The ID of the object.",
                                        "format": "int64",
                                        "type": "integer"
                                    },
                                    "content_type": {
                                        "description": "The type of the object.",
                                        "enum": [
                                            "assignment",
                                            "attachment",
                                            "discussion_topic",
                                            "external_tool",
                                            "quiz",
                                            "wiki_page"
                                        ],
                                        "type": "string"
                                    },
                                    "restricted": {
                                        "description": "Whether to apply restrictions.",
                                        "type": "boolean"
                                    },
                                    "restrictions": {
                                        "description": "(Optional) If the object is restricted, this specifies a set of restrictions. If not specified,\nthe course-level restrictions will be used. See {api:CoursesController#update Course API update documentation}"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Set or remove restrictions on a blueprint course object",
                "tags": [
                    "blueprint_courses"
                ]
            }
        },
        "/v1/courses/{course_id}/blueprint_templates/{template_id}/unsynced_changes": {
            "get": {
                "deprecated": false,
                "description": "Retrieve a list of learning objects that have changed since the last blueprint sync operation.",
                "operationId": "get_unsynced_changes",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "template_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/ChangeRecord"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Get unsynced changes",
                "tags": [
                    "blueprint_courses"
                ]
            }
        },
        "/v1/courses/{course_id}/blueprint_templates/{template_id}/update_associations": {
            "put": {
                "deprecated": false,
                "description": "Send a list of course ids to add or remove new associations for the template.\nCannot add courses that do not belong to the blueprint course's account. Also cannot add\nother blueprint courses or courses that already have an association with another blueprint course.",
                "operationId": "update_associated_courses",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "template_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "course_ids_to_add": {
                                        "description": "Courses to add as associated courses",
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "course_ids_to_remove": {
                                        "description": "Courses to remove as associated courses",
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Update associated courses",
                "tags": [
                    "blueprint_courses"
                ]
            }
        },
        "/v1/courses/{course_id}/calendar_events/timetable": {
            "get": {
                "deprecated": false,
                "description": "Returns the last timetable set by the\n{api:CalendarEventsApiController#set_course_timetable Set a course timetable} endpoint",
                "operationId": "get_course_timetable",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Get course timetable",
                "tags": [
                    "calendar_events"
                ]
            },
            "post": {
                "deprecated": false,
                "description": "Creates and updates \"timetable\" events for a course.\nCan automaticaly generate a series of calendar events based on simple schedules\n(e.g. \"Monday and Wednesday at 2:00pm\" )\n\nExisting timetable events for the course and course sections\nwill be updated if they still are part of the timetable.\nOtherwise, they will be deleted.",
                "operationId": "set_course_timetable",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "properties": {
                                    "timetables[course_section_id]": {
                                        "description": "An array of timetable objects for the course section specified by course_section_id.\nIf course_section_id is set to \"all\", events will be created for the entire course.",
                                        "items": {
                                            "items": {
                                                "type": "object"
                                            },
                                            "type": "array"
                                        },
                                        "type": "array"
                                    },
                                    "timetables[course_section_id][end_time]": {
                                        "description": "Time to end each event at (e.g. \"9:00 am\")",
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "timetables[course_section_id][location_name]": {
                                        "description": "A location name to set for each event",
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "timetables[course_section_id][start_time]": {
                                        "description": "Time to start each event at (e.g. \"9:00 am\")",
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "timetables[course_section_id][weekdays]": {
                                        "description": "A comma-separated list of abbreviated weekdays\n(Mon-Monday, Tue-Tuesday, Wed-Wednesday, Thu-Thursday, Fri-Friday, Sat-Saturday, Sun-Sunday)",
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Set a course timetable",
                "tags": [
                    "calendar_events"
                ]
            }
        },
        "/v1/courses/{course_id}/calendar_events/timetable_events": {
            "post": {
                "deprecated": false,
                "description": "Creates and updates \"timetable\" events for a course or course section.\nSimilar to {api:CalendarEventsApiController#set_course_timetable setting a course timetable},\nbut instead of generating a list of events based on a timetable schedule,\nthis endpoint expects a complete list of events.",
                "operationId": "create_or_update_events_directly_for_course_timetable",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "properties": {
                                    "course_section_id": {
                                        "description": "Events will be created for the course section specified by course_section_id.\nIf not present, events will be created for the entire course.",
                                        "type": "string"
                                    },
                                    "events": {
                                        "description": "An array of event objects to use.",
                                        "items": {
                                            "items": {
                                                "type": "object"
                                            },
                                            "type": "array"
                                        },
                                        "type": "array"
                                    },
                                    "events[code]": {
                                        "description": "A unique identifier that can be used to update the event at a later time\nIf one is not specified, an identifier will be generated based on the start and end times",
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "events[end_at]": {
                                        "description": "End time for the event",
                                        "items": {
                                            "format": "date-time",
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "events[location_name]": {
                                        "description": "Location name for the event",
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "events[start_at]": {
                                        "description": "Start time for the event",
                                        "items": {
                                            "format": "date-time",
                                            "type": "string"
                                        },
                                        "type": "array"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Create or update events directly for a course timetable",
                "tags": [
                    "calendar_events"
                ]
            }
        },
        "/v1/courses/{course_id}/collaborations": {
            "get": {
                "deprecated": false,
                "description": "A paginated list of collaborations the current user has access to in the\ncontext of the course provided in the url. NOTE: this only returns\nExternalToolCollaboration type collaborations.\n\n  curl https://<canvas>/api/v1/courses/1/collaborations/",
                "operationId": "list_collaborations_courses",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/pageParam"
                    },
                    {
                        "$ref": "#/components/parameters/perPageParam"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Collaboration"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "List collaborations",
                "tags": [
                    "collaborations"
                ]
            }
        },
        "/v1/courses/{course_id}/conferences": {
            "get": {
                "deprecated": false,
                "description": "Retrieve the paginated list of conferences for this context\n\nThis API returns a JSON object containing the list of conferences,\nthe key for the list of conferences is \"conferences\"",
                "operationId": "list_conferences_courses",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/pageParam"
                    },
                    {
                        "$ref": "#/components/parameters/perPageParam"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Conference"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "List conferences",
                "tags": [
                    "conferences"
                ]
            }
        },
        "/v1/courses/{course_id}/content_exports": {
            "get": {
                "deprecated": false,
                "description": "A paginated list of the past and pending content export jobs for a course,\ngroup, or user. Exports are returned newest first.",
                "operationId": "list_content_exports_courses",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/pageParam"
                    },
                    {
                        "$ref": "#/components/parameters/perPageParam"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/ContentExport"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "List content exports",
                "tags": [
                    "content_exports"
                ]
            },
            "post": {
                "deprecated": false,
                "description": "Begin a content export job for a course, group, or user.\n\nYou can use the {api:ProgressController#show Progress API} to track the\nprogress of the export. The migration's progress is linked to with the\n_progress_url_ value.\n\nWhen the export completes, use the {api:ContentExportsApiController#show Show content export} endpoint\nto retrieve a download URL for the exported content.",
                "operationId": "export_content_courses",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "properties": {
                                    "export_type": {
                                        "description": "\"common_cartridge\":: Export the contents of the course in the Common Cartridge (.imscc) format\n\"qti\":: Export quizzes from a course in the QTI format\n\"zip\":: Export files from a course, group, or user in a zip file",
                                        "enum": [
                                            "common_cartridge",
                                            "qti",
                                            "zip"
                                        ],
                                        "type": "string"
                                    },
                                    "select": {
                                        "description": "The select parameter allows exporting specific data. The keys are object types like 'files',\n'folders', 'pages', etc. The value for each key is a list of object ids. An id can be an\ninteger or a string.\n\nMultiple object types can be selected in the same call. However, not all object types are\nvalid for every export_type. Common Cartridge supports all object types. Zip and QTI only\nsupport the object types as described below.\n\n\"folders\":: Also supported for zip export_type.\n\"files\":: Also supported for zip export_type.\n\"quizzes\":: Also supported for qti export_type.",
                                        "enum": [
                                            "folders",
                                            "files",
                                            "attachments",
                                            "quizzes",
                                            "assignments",
                                            "announcements",
                                            "calendar_events",
                                            "discussion_topics",
                                            "modules",
                                            "module_items",
                                            "pages",
                                            "rubrics"
                                        ]
                                    },
                                    "skip_notifications": {
                                        "description": "Don't send the notifications about the export to the user. Default: false",
                                        "type": "boolean"
                                    }
                                },
                                "required": [
                                    "export_type"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ContentExport"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Export content",
                "tags": [
                    "content_exports"
                ]
            }
        },
        "/v1/courses/{course_id}/content_exports/{id}": {
            "get": {
                "deprecated": false,
                "description": "Get information about a single content export.",
                "operationId": "show_content_export_courses",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ContentExport"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Show content export",
                "tags": [
                    "content_exports"
                ]
            }
        },
        "/v1/courses/{course_id}/content_licenses": {
            "get": {
                "deprecated": false,
                "description": "A paginated list of licenses that can be applied",
                "operationId": "list_licenses_courses",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/pageParam"
                    },
                    {
                        "$ref": "#/components/parameters/perPageParam"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/License"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "List licenses",
                "tags": [
                    "files"
                ]
            }
        },
        "/v1/courses/{course_id}/content_migrations": {
            "get": {
                "deprecated": false,
                "description": "Returns paginated content migrations",
                "operationId": "list_content_migrations_courses",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/pageParam"
                    },
                    {
                        "$ref": "#/components/parameters/perPageParam"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/ContentMigration"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "List content migrations",
                "tags": [
                    "content_migrations"
                ]
            },
            "post": {
                "deprecated": false,
                "description": "Create a content migration. If the migration requires a file to be uploaded\nthe actual processing of the file will start once the file upload process is completed.\nFile uploading works as described in the {file:file_uploads.html File Upload Documentation}\nexcept that the values are set on a *pre_attachment* sub-hash.\n\nFor migrations that don't require a file to be uploaded, like course copy, the\nprocessing will begin as soon as the migration is created.\n\nYou can use the {api:ProgressController#show Progress API} to track the\nprogress of the migration. The migration's progress is linked to with the\n_progress_url_ value.\n\nThe two general workflows are:\n\nIf no file upload is needed:\n\n1. POST to create\n2. Use the {api:ProgressController#show Progress} specified in _progress_url_ to monitor progress\n\nFor file uploading:\n\n1. POST to create with file info in *pre_attachment*\n2. Do {file:file_uploads.html file upload processing} using the data in the *pre_attachment* data\n3. {api:ContentMigrationsController#show GET} the ContentMigration\n4. Use the {api:ProgressController#show Progress} specified in _progress_url_ to monitor progress\n\n (required if doing .zip file upload)",
                "operationId": "create_content_migration_courses",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "properties": {
                                    "date_shift_options[day_substitutions][X]": {
                                        "description": "Move anything scheduled for day 'X' to the specified day. (0-Sunday,\n1-Monday, 2-Tuesday, 3-Wednesday, 4-Thursday, 5-Friday, 6-Saturday)",
                                        "format": "int64",
                                        "type": "integer"
                                    },
                                    "date_shift_options[new_end_date]": {
                                        "description": "The new end date for the source content/course",
                                        "format": "date",
                                        "type": "string"
                                    },
                                    "date_shift_options[new_start_date]": {
                                        "description": "The new start date for the content/course",
                                        "format": "date",
                                        "type": "string"
                                    },
                                    "date_shift_options[old_end_date]": {
                                        "description": "The original end date of the source content/course",
                                        "format": "date",
                                        "type": "string"
                                    },
                                    "date_shift_options[old_start_date]": {
                                        "description": "The original start date of the source content/course",
                                        "format": "date",
                                        "type": "string"
                                    },
                                    "date_shift_options[remove_dates]": {
                                        "description": "Whether to remove dates in the copied course. Cannot be used\nin conjunction with *shift_dates*.",
                                        "type": "boolean"
                                    },
                                    "date_shift_options[shift_dates]": {
                                        "description": "Whether to shift dates in the copied course",
                                        "type": "boolean"
                                    },
                                    "migration_type": {
                                        "description": "The type of the migration. Use the\n{api:ContentMigrationsController#available_migrators Migrator} endpoint to\nsee all available migrators. Default allowed values:\ncanvas_cartridge_importer, common_cartridge_importer,\ncourse_copy_importer, zip_file_importer, qti_converter, moodle_converter",
                                        "type": "string"
                                    },
                                    "pre_attachment[name]": {
                                        "description": "Required if uploading a file. This is the first step in uploading a file\nto the content migration. See the {file:file_uploads.html File Upload\nDocumentation} for details on the file upload workflow.",
                                        "type": "string"
                                    },
                                    "pre_attachment[todo]": {
                                        "description": "Other file upload properties, See {file:file_uploads.html File Upload\nDocumentation}",
                                        "type": "string"
                                    },
                                    "settings[file_url]": {
                                        "description": "A URL to download the file from. Must not require authentication.",
                                        "type": "string"
                                    },
                                    "settings[folder_id]": {
                                        "description": "The folder to unzip the .zip file into for a zip_file_import.",
                                        "type": "string"
                                    },
                                    "settings[overwrite_quizzes]": {
                                        "description": "Whether to overwrite quizzes with the same identifiers between content\npackages.",
                                        "type": "boolean"
                                    },
                                    "settings[question_bank_id]": {
                                        "description": "The existing question bank ID to import questions into if not specified in\nthe content package.",
                                        "format": "int64",
                                        "type": "integer"
                                    },
                                    "settings[question_bank_name]": {
                                        "description": "The question bank to import questions into if not specified in the content\npackage, if both bank id and name are set, id will take precedence.",
                                        "type": "string"
                                    },
                                    "settings[source_course_id]": {
                                        "description": "The course to copy from for a course copy migration. (required if doing\ncourse copy)",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "migration_type"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ContentMigration"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Create a content migration",
                "tags": [
                    "content_migrations"
                ]
            }
        },
        "/v1/courses/{course_id}/content_migrations/migrators": {
            "get": {
                "deprecated": false,
                "description": "Lists the currently available migration types. These values may change.",
                "operationId": "list_migration_systems_courses",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Migrator"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "List Migration Systems",
                "tags": [
                    "content_migrations"
                ]
            }
        },
        "/v1/courses/{course_id}/content_migrations/{content_migration_id}/migration_issues": {
            "get": {
                "deprecated": false,
                "description": "Returns paginated migration issues",
                "operationId": "list_migration_issues_courses",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "content_migration_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/pageParam"
                    },
                    {
                        "$ref": "#/components/parameters/perPageParam"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/MigrationIssue"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "List migration issues",
                "tags": [
                    "content_migrations"
                ]
            }
        },
        "/v1/courses/{course_id}/content_migrations/{content_migration_id}/migration_issues/{id}": {
            "get": {
                "deprecated": false,
                "description": "Returns data on an individual migration issue",
                "operationId": "get_migration_issue_courses",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "content_migration_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MigrationIssue"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Get a migration issue",
                "tags": [
                    "content_migrations"
                ]
            },
            "put": {
                "deprecated": false,
                "description": "Update the workflow_state of a migration issue",
                "operationId": "update_migration_issue_courses",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "content_migration_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "workflow_state": {
                                        "description": "Set the workflow_state of the issue.",
                                        "enum": [
                                            "active",
                                            "resolved"
                                        ],
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "workflow_state"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MigrationIssue"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Update a migration issue",
                "tags": [
                    "content_migrations"
                ]
            }
        },
        "/v1/courses/{course_id}/content_migrations/{id}": {
            "get": {
                "deprecated": false,
                "description": "Returns data on an individual content migration",
                "operationId": "get_content_migration_courses",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ContentMigration"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Get a content migration",
                "tags": [
                    "content_migrations"
                ]
            },
            "put": {
                "deprecated": false,
                "description": "Update a content migration. Takes same arguments as create except that you\ncan't change the migration type. However, changing most settings after the\nmigration process has started will not do anything. Generally updating the\ncontent migration will be used when there is a file upload problem. If the\nfirst upload has a problem you can supply new _pre_attachment_ values to\nstart the process again.",
                "operationId": "update_content_migration_courses",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ContentMigration"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Update a content migration",
                "tags": [
                    "content_migrations"
                ]
            }
        },
        "/v1/courses/{course_id}/course_copy": {
            "post": {
                "deprecated": false,
                "description": "DEPRECATED: Please use the {api:ContentMigrationsController#create Content Migrations API}\n\nCopies content from one course into another. The default is to copy all course\ncontent. You can control specific types to copy by using either the 'except' option\nor the 'only' option.\n\nThe response is the same as the course copy status endpoint",
                "operationId": "copy_course_content",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "properties": {
                                    "except": {
                                        "description": "A list of the course content types to exclude, all areas not listed will\nbe copied.",
                                        "items": {
                                            "type": "string",
                                            "enum": [
                                                "course_settings",
                                                "assignments",
                                                "external_tools",
                                                "files",
                                                "topics",
                                                "calendar_events",
                                                "quizzes",
                                                "wiki_pages",
                                                "modules",
                                                "outcomes"
                                            ]
                                        },
                                        "type": "array"
                                    },
                                    "only": {
                                        "description": "A list of the course content types to copy, all areas not listed will not\nbe copied.",
                                        "items": {
                                            "type": "string",
                                            "enum": [
                                                "course_settings",
                                                "assignments",
                                                "external_tools",
                                                "files",
                                                "topics",
                                                "calendar_events",
                                                "quizzes",
                                                "wiki_pages",
                                                "modules",
                                                "outcomes"
                                            ]
                                        },
                                        "type": "array"
                                    },
                                    "source_course": {
                                        "description": "ID or SIS-ID of the course to copy the content from",
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Copy course content",
                "tags": [
                    "courses"
                ]
            }
        },
        "/v1/courses/{course_id}/course_copy/{id}": {
            "get": {
                "deprecated": false,
                "description": "DEPRECATED: Please use the {api:ContentMigrationsController#create Content Migrations API}\n\nRetrieve the status of a course copy",
                "operationId": "get_course_copy_status",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Get course copy status",
                "tags": [
                    "courses"
                ]
            }
        },
        "/v1/courses/{course_id}/custom_gradebook_column_data": {
            "put": {
                "deprecated": false,
                "description": "Set the content of custom columns\n\n{\n  \"column_data\": [\n    {\n      \"column_id\": example_column_id,\n      \"user_id\": example_student_id,\n      \"content\": example_content\n      },\n      {\n      \"column_id\": example_column_id,\n      \"user_id\": example_student_id,\n      \"content: example_content\n    }\n  ]\n}",
                "operationId": "bulk_update_column_data",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "column_data": {
                                        "description": "Column content. Setting this to an empty string will delete the data object.",
                                        "items": {
                                            "items": {
                                                "type": "object"
                                            },
                                            "type": "array"
                                        },
                                        "type": "array"
                                    }
                                },
                                "required": [
                                    "column_data"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Progress"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Bulk update column data",
                "tags": [
                    "custom_gradebook_columns"
                ]
            }
        },
        "/v1/courses/{course_id}/custom_gradebook_columns": {
            "get": {
                "deprecated": false,
                "description": "A paginated list of all custom gradebook columns for a course",
                "operationId": "list_custom_gradebook_columns",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Include hidden parameters (defaults to false)",
                        "in": "query",
                        "name": "include_hidden",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/pageParam"
                    },
                    {
                        "$ref": "#/components/parameters/perPageParam"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/CustomColumn"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "List custom gradebook columns",
                "tags": [
                    "custom_gradebook_columns"
                ]
            },
            "post": {
                "deprecated": false,
                "description": "Create a custom gradebook column",
                "operationId": "create_custom_gradebook_column",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "properties": {
                                    "column[hidden]": {
                                        "description": "Hidden columns are not displayed in the gradebook",
                                        "type": "boolean"
                                    },
                                    "column[position]": {
                                        "description": "The position of the column relative to other custom columns",
                                        "format": "int64",
                                        "type": "integer"
                                    },
                                    "column[read_only]": {
                                        "description": "Set this to prevent the column from being editable in the gradebook ui",
                                        "type": "boolean"
                                    },
                                    "column[teacher_notes]": {
                                        "description": "Set this if the column is created by a teacher.  The gradebook only\nsupports one teacher_notes column.",
                                        "type": "boolean"
                                    },
                                    "column[title]": {
                                        "description": "no description",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "column[title]"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CustomColumn"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Create a custom gradebook column",
                "tags": [
                    "custom_gradebook_columns"
                ]
            }
        },
        "/v1/courses/{course_id}/custom_gradebook_columns/reorder": {
            "post": {
                "deprecated": false,
                "description": "Puts the given columns in the specified order\n\n<b>200 OK</b> is returned if successful",
                "operationId": "reorder_custom_columns",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "properties": {
                                    "order": {
                                        "description": "no description",
                                        "items": {
                                            "type": "integer"
                                        },
                                        "type": "array"
                                    }
                                },
                                "required": [
                                    "order"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Reorder custom columns",
                "tags": [
                    "custom_gradebook_columns"
                ]
            }
        },
        "/v1/courses/{course_id}/custom_gradebook_columns/{id}": {
            "delete": {
                "deprecated": false,
                "description": "Permanently deletes a custom column and its associated data",
                "operationId": "delete_custom_gradebook_column",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CustomColumn"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Delete a custom gradebook column",
                "tags": [
                    "custom_gradebook_columns"
                ]
            },
            "put": {
                "deprecated": false,
                "description": "Accepts the same parameters as custom gradebook column creation",
                "operationId": "update_custom_gradebook_column",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CustomColumn"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Update a custom gradebook column",
                "tags": [
                    "custom_gradebook_columns"
                ]
            }
        },
        "/v1/courses/{course_id}/custom_gradebook_columns/{id}/data": {
            "get": {
                "deprecated": false,
                "description": "This does not list entries for students without associated data.",
                "operationId": "list_entries_for_column",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "If true, hidden columns will be included in the\nresult. If false or absent, only visible columns\nwill be returned.",
                        "in": "query",
                        "name": "include_hidden",
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/ColumnDatum"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "List entries for a column",
                "tags": [
                    "custom_gradebook_columns"
                ]
            }
        },
        "/v1/courses/{course_id}/custom_gradebook_columns/{id}/data/{user_id}": {
            "put": {
                "deprecated": false,
                "description": "Set the content of a custom column",
                "operationId": "update_column_data",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "user_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "column_data[content]": {
                                        "description": "Column content.  Setting this to blank will delete the datum object.",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "column_data[content]"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ColumnDatum"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Update column data",
                "tags": [
                    "custom_gradebook_columns"
                ]
            }
        },
        "/v1/courses/{course_id}/developer_keys/{developer_key_id}/create_tool": {
            "post": {
                "deprecated": false,
                "description": "Creates context_external_tool from attached tool_configuration of\nthe provided developer_key if not already present in context.\nDeveloperKey must have a ToolConfiguration to create tool or 404 will be raised.\nWill return an existing ContextExternalTool if one already exists.",
                "operationId": "create_tool_from_toolconfiguration_courses",
                "parameters": [
                    {
                        "description": "if course",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "no description",
                        "in": "path",
                        "name": "developer_key_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "properties": {
                                    "account_id": {
                                        "description": "if account",
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ContextExternalTool"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Create Tool from ToolConfiguration",
                "tags": [
                    "external_tools"
                ]
            }
        },
        "/v1/courses/{course_id}/discussion_topics": {
            "get": {
                "deprecated": false,
                "description": "Returns the paginated list of discussion topics for this course or group.",
                "operationId": "list_discussion_topics_courses",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "If \"all_dates\" is passed, all dates associated with graded discussions'\nassignments will be included.\nif \"sections\" is passed, includes the course sections that are associated\nwith the topic, if the topic is specific to certain sections of the course.\nIf \"sections_user_count\" is passed, then:\n  (a) If sections were asked for *and* the topic is specific to certain\n      course sections, includes the number of users in each\n      section. (as part of the section json asked for above)\n  (b) Else, includes at the root level the total number of users in the\n      topic's context (group or course) that the topic applies to.\nIf \"overrides\" is passed, the overrides for the assignment will be included",
                        "explode": false,
                        "in": "query",
                        "name": "include",
                        "schema": {
                            "items": {
                                "type": "string",
                                "enum": [
                                    "all_dates",
                                    "sections",
                                    "sections_user_count",
                                    "overrides"
                                ]
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "description": "Determines the order of the discussion topic list. Defaults to \"position\".",
                        "in": "query",
                        "name": "order_by",
                        "schema": {
                            "enum": [
                                "position",
                                "recent_activity",
                                "title"
                            ],
                            "type": "string"
                        }
                    },
                    {
                        "description": "Only return discussion topics in the given state(s). Defaults to including\nall topics. Filtering is done after pagination, so pages\nmay be smaller than requested if topics are filtered.\nCan pass multiple states as comma separated string.",
                        "in": "query",
                        "name": "scope",
                        "schema": {
                            "enum": [
                                "locked",
                                "unlocked",
                                "pinned",
                                "unpinned"
                            ],
                            "type": "string"
                        }
                    },
                    {
                        "description": "Return announcements instead of discussion topics. Defaults to false",
                        "in": "query",
                        "name": "only_announcements",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "description": "The state of the discussion topic to return. Currently only supports unread state.",
                        "in": "query",
                        "name": "filter_by",
                        "schema": {
                            "enum": [
                                "all",
                                "unread"
                            ],
                            "type": "string"
                        }
                    },
                    {
                        "description": "The partial title of the discussion topics to match and return.",
                        "in": "query",
                        "name": "search_term",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "For students, exclude topics that are locked by module progression.\nDefaults to false.",
                        "in": "query",
                        "name": "exclude_context_module_locked_topics",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/pageParam"
                    },
                    {
                        "$ref": "#/components/parameters/perPageParam"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/DiscussionTopic"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "List discussion topics",
                "tags": [
                    "discussion_topics"
                ]
            },
            "post": {
                "deprecated": false,
                "description": "Create an new discussion topic for the course or group.",
                "operationId": "create_new_discussion_topic_courses",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "properties": {
                                    "allow_rating": {
                                        "description": "Whether or not users can rate entries in this topic.",
                                        "type": "boolean"
                                    },
                                    "assignment": {
                                        "description": "To create an assignment discussion, pass the assignment parameters as a\nsub-object. See the {api:AssignmentsApiController#create Create an Assignment API}\nfor the available parameters. The name parameter will be ignored, as it's\ntaken from the discussion title. If you want to make a discussion that was\nan assignment NOT an assignment, pass set_assignment = false as part of\nthe assignment object"
                                    },
                                    "attachment": {
                                        "description": "A application/x-www-form-urlencoded form-field-style attachment.\nAttachments larger than 1 kilobyte are subject to quota restrictions.",
                                        "format": "binary",
                                        "type": "string"
                                    },
                                    "delayed_post_at": {
                                        "description": "If a timestamp is given, the topic will not be published until that time.",
                                        "format": "date-time",
                                        "type": "string"
                                    },
                                    "discussion_type": {
                                        "description": "The type of discussion. Defaults to side_comment if not value is given. Accepted values are 'side_comment', for discussions that only allow one level of nested comments, and 'threaded' for fully threaded discussions.",
                                        "enum": [
                                            "side_comment",
                                            "threaded"
                                        ],
                                        "type": "string"
                                    },
                                    "group_category_id": {
                                        "description": "If present, the topic will become a group discussion assigned\nto the group.",
                                        "format": "int64",
                                        "type": "integer"
                                    },
                                    "is_announcement": {
                                        "description": "If true, this topic is an announcement. It will appear in the\nannouncement's section rather than the discussions section. This requires\nannouncment-posting permissions.",
                                        "type": "boolean"
                                    },
                                    "lock_at": {
                                        "description": "If a timestamp is given, the topic will be scheduled to lock at the\nprovided timestamp. If the timestamp is in the past, the topic will be\nlocked.",
                                        "format": "date-time",
                                        "type": "string"
                                    },
                                    "message": {
                                        "description": "no description",
                                        "type": "string"
                                    },
                                    "only_graders_can_rate": {
                                        "description": "If true, only graders will be allowed to rate entries.",
                                        "type": "boolean"
                                    },
                                    "pinned": {
                                        "description": "If true, this topic will be listed in the \"Pinned Discussion\" section",
                                        "type": "boolean"
                                    },
                                    "podcast_enabled": {
                                        "description": "If true, the topic will have an associated podcast feed.",
                                        "type": "boolean"
                                    },
                                    "podcast_has_student_posts": {
                                        "description": "If true, the podcast will include posts from students as well. Implies\npodcast_enabled.",
                                        "type": "boolean"
                                    },
                                    "position_after": {
                                        "description": "By default, discussions are sorted chronologically by creation date, you\ncan pass the id of another topic to have this one show up after the other\nwhen they are listed.",
                                        "type": "string"
                                    },
                                    "published": {
                                        "description": "Whether this topic is published (true) or draft state (false). Only\nteachers and TAs have the ability to create draft state topics.",
                                        "type": "boolean"
                                    },
                                    "require_initial_post": {
                                        "description": "If true then a user may not respond to other replies until that user has\nmade an initial reply. Defaults to false.",
                                        "type": "boolean"
                                    },
                                    "sort_by_rating": {
                                        "description": "If true, entries will be sorted by rating.",
                                        "type": "boolean"
                                    },
                                    "specific_sections": {
                                        "description": "A comma-separated list of sections ids to which the discussion topic\nshould be made specific too.  If it is not desired to make the discussion\ntopic specific to sections, then this parameter may be omitted or set to\n\"all\".  Can only be present only on announcements and only those that are\nfor a course (as opposed to a group).",
                                        "type": "string"
                                    },
                                    "title": {
                                        "description": "no description",
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Create a new discussion topic",
                "tags": [
                    "discussion_topics"
                ]
            }
        },
        "/v1/courses/{course_id}/discussion_topics/reorder": {
            "post": {
                "deprecated": false,
                "description": "Puts the pinned discussion topics in the specified order.\nAll pinned topics should be included.",
                "operationId": "reorder_pinned_topics_courses",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "properties": {
                                    "order": {
                                        "description": "The ids of the pinned discussion topics in the desired order.\n(For example, \"order=104,102,103\".)",
                                        "items": {
                                            "type": "integer"
                                        },
                                        "type": "array"
                                    }
                                },
                                "required": [
                                    "order"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Reorder pinned topics",
                "tags": [
                    "discussion_topics"
                ]
            }
        },
        "/v1/courses/{course_id}/discussion_topics/{topic_id}": {
            "delete": {
                "deprecated": false,
                "description": "Deletes the discussion topic. This will also delete the assignment, if it's\nan assignment discussion.",
                "operationId": "delete_topic_courses",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "topic_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Delete a topic",
                "tags": [
                    "discussion_topics"
                ]
            },
            "get": {
                "deprecated": false,
                "description": "Returns data on an individual discussion topic. See the List action for the response formatting.",
                "operationId": "get_single_topic_courses",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "topic_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "If \"all_dates\" is passed, all dates associated with graded discussions'\nassignments will be included.\nif \"sections\" is passed, includes the course sections that are associated\nwith the topic, if the topic is specific to certain sections of the course.\nIf \"sections_user_count\" is passed, then:\n  (a) If sections were asked for *and* the topic is specific to certain\n      course sections, includes the number of users in each\n      section. (as part of the section json asked for above)\n  (b) Else, includes at the root level the total number of users in the\n      topic's context (group or course) that the topic applies to.\nIf \"overrides\" is passed, the overrides for the assignment will be included",
                        "explode": false,
                        "in": "query",
                        "name": "include",
                        "schema": {
                            "items": {
                                "type": "string",
                                "enum": [
                                    "all_dates",
                                    "sections",
                                    "sections_user_count",
                                    "overrides"
                                ]
                            },
                            "type": "array"
                        },
                        "style": "form"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Get a single topic",
                "tags": [
                    "discussion_topics"
                ]
            },
            "put": {
                "deprecated": false,
                "description": "Update an existing discussion topic for the course or group.",
                "operationId": "update_topic_courses",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "topic_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "allow_rating": {
                                        "description": "If true, users will be allowed to rate entries.",
                                        "type": "boolean"
                                    },
                                    "assignment": {
                                        "description": "To create an assignment discussion, pass the assignment parameters as a\nsub-object. See the {api:AssignmentsApiController#create Create an Assignment API}\nfor the available parameters. The name parameter will be ignored, as it's\ntaken from the discussion title. If you want to make a discussion that was\nan assignment NOT an assignment, pass set_assignment = false as part of\nthe assignment object"
                                    },
                                    "delayed_post_at": {
                                        "description": "If a timestamp is given, the topic will not be published until that time.",
                                        "format": "date-time",
                                        "type": "string"
                                    },
                                    "discussion_type": {
                                        "description": "The type of discussion. Defaults to side_comment if not value is given. Accepted values are 'side_comment', for discussions that only allow one level of nested comments, and 'threaded' for fully threaded discussions.",
                                        "enum": [
                                            "side_comment",
                                            "threaded"
                                        ],
                                        "type": "string"
                                    },
                                    "group_category_id": {
                                        "description": "If present, the topic will become a group discussion assigned\nto the group.",
                                        "format": "int64",
                                        "type": "integer"
                                    },
                                    "is_announcement": {
                                        "description": "If true, this topic is an announcement. It will appear in the\nannouncement's section rather than the discussions section. This requires\nannouncment-posting permissions.",
                                        "type": "boolean"
                                    },
                                    "lock_at": {
                                        "description": "If a timestamp is given, the topic will be scheduled to lock at the\nprovided timestamp. If the timestamp is in the past, the topic will be\nlocked.",
                                        "format": "date-time",
                                        "type": "string"
                                    },
                                    "message": {
                                        "description": "no description",
                                        "type": "string"
                                    },
                                    "only_graders_can_rate": {
                                        "description": "If true, only graders will be allowed to rate entries.",
                                        "type": "boolean"
                                    },
                                    "pinned": {
                                        "description": "If true, this topic will be listed in the \"Pinned Discussion\" section",
                                        "type": "boolean"
                                    },
                                    "podcast_enabled": {
                                        "description": "If true, the topic will have an associated podcast feed.",
                                        "type": "boolean"
                                    },
                                    "podcast_has_student_posts": {
                                        "description": "If true, the podcast will include posts from students as well. Implies\npodcast_enabled.",
                                        "type": "boolean"
                                    },
                                    "position_after": {
                                        "description": "By default, discussions are sorted chronologically by creation date, you\ncan pass the id of another topic to have this one show up after the other\nwhen they are listed.",
                                        "type": "string"
                                    },
                                    "published": {
                                        "description": "Whether this topic is published (true) or draft state (false). Only\nteachers and TAs have the ability to create draft state topics.",
                                        "type": "boolean"
                                    },
                                    "require_initial_post": {
                                        "description": "If true then a user may not respond to other replies until that user has\nmade an initial reply. Defaults to false.",
                                        "type": "boolean"
                                    },
                                    "sort_by_rating": {
                                        "description": "If true, entries will be sorted by rating.",
                                        "type": "boolean"
                                    },
                                    "specific_sections": {
                                        "description": "A comma-separated list of sections ids to which the discussion topic\nshould be made specific too.  If it is not desired to make the discussion\ntopic specific to sections, then this parameter may be omitted or set to\n\"all\".  Can only be present only on announcements and only those that are\nfor a course (as opposed to a group).",
                                        "type": "string"
                                    },
                                    "title": {
                                        "description": "no description",
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Update a topic",
                "tags": [
                    "discussion_topics"
                ]
            }
        },
        "/v1/courses/{course_id}/discussion_topics/{topic_id}/entries": {
            "get": {
                "deprecated": false,
                "description": "Retrieve the (paginated) top-level entries in a discussion topic.\n\nMay require (depending on the topic) that the user has posted in the topic.\nIf it is required, and the user has not posted, will respond with a 403\nForbidden status and the body 'require_initial_post'.\n\nWill include the 10 most recent replies, if any, for each entry returned.\n\nIf the topic is a root topic with children corresponding to groups of a\ngroup assignment, entries from those subtopics for which the user belongs\nto the corresponding group will be returned.\n\nOrdering of returned entries is newest-first by posting timestamp (reply\nactivity is ignored).",
                "operationId": "list_topic_entries_courses",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "topic_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/pageParam"
                    },
                    {
                        "$ref": "#/components/parameters/perPageParam"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "List topic entries",
                "tags": [
                    "discussion_topics"
                ]
            },
            "post": {
                "deprecated": false,
                "description": "Create a new entry in a discussion topic. Returns a json representation of\nthe created entry (see documentation for 'entries' method) on success.",
                "operationId": "post_entry_courses",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "topic_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "properties": {
                                    "attachment": {
                                        "description": "a application/x-www-form-urlencoded form-field-style\nattachment. Attachments larger than 1 kilobyte are subject to quota\nrestrictions.",
                                        "type": "string"
                                    },
                                    "message": {
                                        "description": "The body of the entry.",
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Post an entry",
                "tags": [
                    "discussion_topics"
                ]
            }
        },
        "/v1/courses/{course_id}/discussion_topics/{topic_id}/entries/{entry_id}/rating": {
            "post": {
                "deprecated": false,
                "description": "Rate a discussion entry.\n\nOn success, the response will be 204 No Content with an empty body.",
                "operationId": "rate_entry_courses",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "topic_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "entry_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "properties": {
                                    "rating": {
                                        "description": "A rating to set on this entry. Only 0 and 1 are accepted.",
                                        "format": "int64",
                                        "type": "integer"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Rate entry",
                "tags": [
                    "discussion_topics"
                ]
            }
        },
        "/v1/courses/{course_id}/discussion_topics/{topic_id}/entries/{entry_id}/read": {
            "delete": {
                "deprecated": false,
                "description": "Mark a discussion entry as unread.\n\nNo request fields are necessary.\n\nOn success, the response will be 204 No Content with an empty body.",
                "operationId": "mark_entry_as_unread_courses",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "topic_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "entry_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "A boolean value to set the entry's forced_read_state. No change is made if\nthis argument is not specified.",
                        "in": "query",
                        "name": "forced_read_state",
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Mark entry as unread",
                "tags": [
                    "discussion_topics"
                ]
            },
            "put": {
                "deprecated": false,
                "description": "Mark a discussion entry as read.\n\nNo request fields are necessary.\n\nOn success, the response will be 204 No Content with an empty body.",
                "operationId": "mark_entry_as_read_courses",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "topic_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "entry_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "forced_read_state": {
                                        "description": "A boolean value to set the entry's forced_read_state. No change is made if\nthis argument is not specified.",
                                        "type": "boolean"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Mark entry as read",
                "tags": [
                    "discussion_topics"
                ]
            }
        },
        "/v1/courses/{course_id}/discussion_topics/{topic_id}/entries/{entry_id}/replies": {
            "get": {
                "deprecated": false,
                "description": "Retrieve the (paginated) replies to a top-level entry in a discussion\ntopic.\n\nMay require (depending on the topic) that the user has posted in the topic.\nIf it is required, and the user has not posted, will respond with a 403\nForbidden status and the body 'require_initial_post'.\n\nOrdering of returned entries is newest-first by creation timestamp.",
                "operationId": "list_entry_replies_courses",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "topic_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "entry_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/pageParam"
                    },
                    {
                        "$ref": "#/components/parameters/perPageParam"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "List entry replies",
                "tags": [
                    "discussion_topics"
                ]
            },
            "post": {
                "deprecated": false,
                "description": "Add a reply to an entry in a discussion topic. Returns a json\nrepresentation of the created reply (see documentation for 'replies'\nmethod) on success.\n\nMay require (depending on the topic) that the user has posted in the topic.\nIf it is required, and the user has not posted, will respond with a 403\nForbidden status and the body 'require_initial_post'.",
                "operationId": "post_reply_courses",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "topic_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "entry_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "properties": {
                                    "attachment": {
                                        "description": "a application/x-www-form-urlencoded form-field-style\nattachment. Attachments larger than 1 kilobyte are subject to quota\nrestrictions.",
                                        "type": "string"
                                    },
                                    "message": {
                                        "description": "The body of the entry.",
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Post a reply",
                "tags": [
                    "discussion_topics"
                ]
            }
        },
        "/v1/courses/{course_id}/discussion_topics/{topic_id}/entries/{id}": {
            "delete": {
                "deprecated": false,
                "description": "Delete a discussion entry.\n\nThe entry must have been created by the current user, or the current user\nmust have admin rights to the discussion. If the delete is not allowed, a 401 will be returned.\n\nThe discussion will be marked deleted, and the user_id and message will be cleared out.",
                "operationId": "delete_entry_courses",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "topic_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Delete an entry",
                "tags": [
                    "discussion_topics"
                ]
            },
            "put": {
                "deprecated": false,
                "description": "Update an existing discussion entry.\n\nThe entry must have been created by the current user, or the current user\nmust have admin rights to the discussion. If the edit is not allowed, a 401 will be returned.",
                "operationId": "update_entry_courses",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "topic_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "message": {
                                        "description": "The updated body of the entry.",
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Update an entry",
                "tags": [
                    "discussion_topics"
                ]
            }
        },
        "/v1/courses/{course_id}/discussion_topics/{topic_id}/entry_list": {
            "get": {
                "deprecated": false,
                "description": "Retrieve a paginated list of discussion entries, given a list of ids.\n\nMay require (depending on the topic) that the user has posted in the topic.\nIf it is required, and the user has not posted, will respond with a 403\nForbidden status and the body 'require_initial_post'.",
                "operationId": "list_entries_courses",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "topic_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "A list of entry ids to retrieve. Entries will be returned in id order,\nsmallest id first.",
                        "explode": false,
                        "in": "query",
                        "name": "ids",
                        "schema": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "$ref": "#/components/parameters/pageParam"
                    },
                    {
                        "$ref": "#/components/parameters/perPageParam"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "List entries",
                "tags": [
                    "discussion_topics"
                ]
            }
        },
        "/v1/courses/{course_id}/discussion_topics/{topic_id}/read": {
            "delete": {
                "deprecated": false,
                "description": "Mark the initial text of the discussion topic as unread.\n\nNo request fields are necessary.\n\nOn success, the response will be 204 No Content with an empty body.",
                "operationId": "mark_topic_as_unread_courses",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "topic_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Mark topic as unread",
                "tags": [
                    "discussion_topics"
                ]
            },
            "put": {
                "deprecated": false,
                "description": "Mark the initial text of the discussion topic as read.\n\nNo request fields are necessary.\n\nOn success, the response will be 204 No Content with an empty body.",
                "operationId": "mark_topic_as_read_courses",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "topic_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Mark topic as read",
                "tags": [
                    "discussion_topics"
                ]
            }
        },
        "/v1/courses/{course_id}/discussion_topics/{topic_id}/read_all": {
            "delete": {
                "deprecated": false,
                "description": "Mark the discussion topic and all its entries as unread.\n\nNo request fields are necessary.\n\nOn success, the response will be 204 No Content with an empty body.",
                "operationId": "mark_all_entries_as_unread_courses",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "topic_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "A boolean value to set all of the entries' forced_read_state. No change is\nmade if this argument is not specified.",
                        "in": "query",
                        "name": "forced_read_state",
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Mark all entries as unread",
                "tags": [
                    "discussion_topics"
                ]
            },
            "put": {
                "deprecated": false,
                "description": "Mark the discussion topic and all its entries as read.\n\nNo request fields are necessary.\n\nOn success, the response will be 204 No Content with an empty body.",
                "operationId": "mark_all_entries_as_read_courses",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "topic_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "forced_read_state": {
                                        "description": "A boolean value to set all of the entries' forced_read_state. No change\nis made if this argument is not specified.",
                                        "type": "boolean"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Mark all entries as read",
                "tags": [
                    "discussion_topics"
                ]
            }
        },
        "/v1/courses/{course_id}/discussion_topics/{topic_id}/subscribed": {
            "delete": {
                "deprecated": false,
                "description": "Unsubscribe from a topic to stop receiving notifications about new entries\n\nOn success, the response will be 204 No Content with an empty body",
                "operationId": "unsubscribe_from_topic_courses",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "topic_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Unsubscribe from a topic",
                "tags": [
                    "discussion_topics"
                ]
            },
            "put": {
                "deprecated": false,
                "description": "Subscribe to a topic to receive notifications about new entries\n\nOn success, the response will be 204 No Content with an empty body",
                "operationId": "subscribe_to_topic_courses",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "topic_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Subscribe to a topic",
                "tags": [
                    "discussion_topics"
                ]
            }
        },
        "/v1/courses/{course_id}/discussion_topics/{topic_id}/view": {
            "get": {
                "deprecated": false,
                "description": "Return a cached structure of the discussion topic, containing all entries,\ntheir authors, and their message bodies.\n\nMay require (depending on the topic) that the user has posted in the topic.\nIf it is required, and the user has not posted, will respond with a 403\nForbidden status and the body 'require_initial_post'.\n\nIn some rare situations, this cached structure may not be available yet. In\nthat case, the server will respond with a 503 error, and the caller should\ntry again soon.\n\nThe response is an object containing the following keys:\n* \"participants\": A list of summary information on users who have posted to\n  the discussion. Each value is an object containing their id, display_name,\n  and avatar_url.\n* \"unread_entries\": A list of entry ids that are unread by the current\n  user. this implies that any entry not in this list is read.\n* \"entry_ratings\": A map of entry ids to ratings by the current user. Entries\n  not in this list have no rating. Only populated if rating is enabled.\n* \"forced_entries\": A list of entry ids that have forced_read_state set to\n  true. This flag is meant to indicate the entry's read_state has been\n  manually set to 'unread' by the user, so the entry should not be\n  automatically marked as read.\n* \"view\": A threaded view of all the entries in the discussion, containing\n  the id, user_id, and message.\n* \"new_entries\": Because this view is eventually consistent, it's possible\n  that newly created or updated entries won't yet be reflected in the view.\n  If the application wants to also get a flat list of all entries not yet\n  reflected in the view, pass include_new_entries=1 to the request and this\n  array of entries will be returned. These entries are returned in a flat\n  array, in ascending created_at order.",
                "operationId": "get_full_topic_courses",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "topic_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Get the full topic",
                "tags": [
                    "discussion_topics"
                ]
            }
        },
        "/v1/courses/{course_id}/effective_due_dates": {
            "get": {
                "deprecated": false,
                "description": "For each assignment in the course, returns each assigned student's ID\nand their corresponding due date along with some grading period data.\nReturns a collection with keys representing assignment IDs and values as a\ncollection containing keys representing student IDs and values representing\nthe student's effective due_at, the grading_period_id of which the due_at falls\nin, and whether or not the grading period is closed (in_closed_grading_period)\n\nThe list of assignment IDs for which effective student due dates are\nrequested. If not provided, all assignments in the course will be used.",
                "operationId": "get_effective_due_dates",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "no description",
                        "explode": false,
                        "in": "query",
                        "name": "assignment_ids",
                        "schema": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Get effective due dates",
                "tags": [
                    "courses"
                ]
            }
        },
        "/v1/courses/{course_id}/enrollments": {
            "get": {
                "deprecated": false,
                "description": "Depending on the URL given, return a paginated list of either (1) all of the enrollments in a course, (2) all of the enrollments in a section or (3) all of a user's enrollments. This includes student, teacher, TA, and\nobserver enrollments.\n\nIf a user has multiple enrollments in a context (e.g. as a teacher\nand a student or in multiple course sections), each enrollment will be\nlisted separately.\n\nnote: Currently, only a root level admin user can return other users' enrollments. A\nuser can, however, return his/her own enrollments.",
                "operationId": "list_enrollments_courses",
                "parameters": [
                    {
                        "in": "query",
                        "name": "page",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "minimum": 0
                        },
                        "description": "The bookmark leading to the next paginated page. This needs to be parsed from the response header ('Link' field)."
                    },
                    {
                        "in": "query",
                        "name": "per_page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 100,
                            "default": 10
                        },
                        "description": "The numbers of items to return."
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "A list of enrollment types to return. Accepted values are\n'StudentEnrollment', 'TeacherEnrollment', 'TaEnrollment',\n'DesignerEnrollment', and 'ObserverEnrollment.' If omitted, all enrollment\ntypes are returned. This argument is ignored if `role` is given.",
                        "explode": false,
                        "in": "query",
                        "name": "type",
                        "schema": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "description": "A list of enrollment roles to return. Accepted values include course-level\nroles created by the {api:RoleOverridesController#add_role Add Role API}\nas well as the base enrollment types accepted by the `type` argument above.",
                        "explode": false,
                        "in": "query",
                        "name": "role",
                        "schema": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "description": "Filter by enrollment state. If omitted, 'active' and 'invited' enrollments\nare returned. When querying a user's enrollments (either via user_id\nargument or via user enrollments endpoint), the following additional\nsynthetic states are supported: \"current_and_invited\"|\"current_and_future\"|\"current_and_concluded\"",
                        "explode": false,
                        "in": "query",
                        "name": "state",
                        "schema": {
                            "items": {
                                "type": "string",
                                "enum": [
                                    "active",
                                    "invited",
                                    "creation_pending",
                                    "deleted",
                                    "rejected",
                                    "completed",
                                    "inactive"
                                ]
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "description": "Array of additional information to include on the enrollment or user records.\n\"avatar_url\" and \"group_ids\" will be returned on the user record.",
                        "explode": false,
                        "in": "query",
                        "name": "include",
                        "schema": {
                            "items": {
                                "type": "string",
                                "enum": [
                                    "avatar_url",
                                    "group_ids",
                                    "locked",
                                    "observed_users",
                                    "can_be_removed"
                                ]
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "description": "Filter by user_id (only valid for course or section enrollment\nqueries). If set to the current user's id, this is a way to\ndetermine if the user has any enrollments in the course or section,\nindependent of whether the user has permission to view other people\non the roster.",
                        "in": "query",
                        "name": "user_id",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Return grades for the given grading_period.  If this parameter is not\nspecified, the returned grades will be for the whole course.",
                        "in": "query",
                        "name": "grading_period_id",
                        "schema": {
                            "format": "int64",
                            "type": "integer"
                        }
                    },
                    {
                        "description": "Returns only enrollments for the specified enrollment term. This parameter\nonly applies to the user enrollments path. May pass the ID from the\nenrollment terms api or the SIS id prepended with 'sis_term_id:'.",
                        "in": "query",
                        "name": "enrollment_term_id",
                        "schema": {
                            "format": "int64",
                            "type": "integer"
                        }
                    },
                    {
                        "description": "Returns only enrollments for the specified SIS account ID(s). Does not\nlook into sub_accounts. May pass in array or string.",
                        "explode": false,
                        "in": "query",
                        "name": "sis_account_id",
                        "schema": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "description": "Returns only enrollments matching the specified SIS course ID(s).\nMay pass in array or string.",
                        "explode": false,
                        "in": "query",
                        "name": "sis_course_id",
                        "schema": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "description": "Returns only section enrollments matching the specified SIS section ID(s).\nMay pass in array or string.",
                        "explode": false,
                        "in": "query",
                        "name": "sis_section_id",
                        "schema": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "description": "Returns only enrollments for the specified SIS user ID(s). May pass in\narray or string.",
                        "explode": false,
                        "in": "query",
                        "name": "sis_user_id",
                        "schema": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "$ref": "#/components/parameters/pageParam"
                    },
                    {
                        "$ref": "#/components/parameters/perPageParam"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Enrollment"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "List enrollments",
                "tags": [
                    "enrollments"
                ]
            },
            "post": {
                "deprecated": false,
                "description": "Create a new user enrollment for a course or section.",
                "operationId": "enroll_user_courses",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "properties": {
                                    "enrollment[associated_user_id]": {
                                        "description": "For an observer enrollment, the ID of a student to observe. The\ncaller must have +manage_students+ permission in the course.\nThis is a one-off operation; to automatically observe all a\nstudent's enrollments (for example, as a parent), please use\nthe {api:UserObserveesController#create User Observees API}.",
                                        "format": "int64",
                                        "type": "integer"
                                    },
                                    "enrollment[course_section_id]": {
                                        "description": "The ID of the course section to enroll the student in. If the\nsection-specific URL is used, this argument is redundant and will be\nignored.",
                                        "format": "int64",
                                        "type": "integer"
                                    },
                                    "enrollment[enrollment_state]": {
                                        "description": "If set to 'active,' student will be immediately enrolled in the course.\nOtherwise they will be required to accept a course invitation. Default is\n'invited.'.\n\nIf set to 'inactive', student will be listed in the course roster for\nteachers, but will not be able to participate in the course until\ntheir enrollment is activated.",
                                        "enum": [
                                            "active",
                                            "invited",
                                            "inactive"
                                        ],
                                        "type": "string"
                                    },
                                    "enrollment[limit_privileges_to_course_section]": {
                                        "description": "If set, the enrollment will only allow the user to see and interact with\nusers enrolled in the section given by course_section_id.\n* For teachers and TAs, this includes grading privileges.\n* Section-limited students will not see any users (including teachers\n  and TAs) not enrolled in their sections.\n* Users may have other enrollments that grant privileges to\n  multiple sections in the same course.",
                                        "type": "boolean"
                                    },
                                    "enrollment[notify]": {
                                        "description": "If true, a notification will be sent to the enrolled user.\nNotifications are not sent by default.",
                                        "type": "boolean"
                                    },
                                    "enrollment[role]": {
                                        "description": "Assigns a custom course-level role to the user."
                                    },
                                    "enrollment[role_id]": {
                                        "description": "Assigns a custom course-level role to the user.",
                                        "format": "int64",
                                        "type": "integer"
                                    },
                                    "enrollment[self_enrolled]": {
                                        "description": "If true, marks the enrollment as a self-enrollment, which gives\nstudents the ability to drop the course if desired. Defaults to false.",
                                        "type": "boolean"
                                    },
                                    "enrollment[self_enrollment_code]": {
                                        "description": "If the current user is not allowed to manage enrollments in this\ncourse, but the course allows self-enrollment, the user can self-\nenroll as a student in the default section by passing in a valid\ncode. When self-enrolling, the user_id must be 'self'. The\nenrollment_state will be set to 'active' and all other arguments\nwill be ignored.",
                                        "type": "string"
                                    },
                                    "enrollment[type]": {
                                        "description": "Enroll the user as a student, teacher, TA, observer, or designer. If no\nvalue is given, the type will be inferred by enrollment[role] if supplied,\notherwise 'StudentEnrollment' will be used.",
                                        "enum": [
                                            "StudentEnrollment",
                                            "TeacherEnrollment",
                                            "TaEnrollment",
                                            "ObserverEnrollment",
                                            "DesignerEnrollment"
                                        ],
                                        "type": "string"
                                    },
                                    "enrollment[user_id]": {
                                        "description": "The ID of the user to be enrolled in the course.",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "enrollment[type]",
                                    "enrollment[user_id]"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Enrollment"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Enroll a user",
                "tags": [
                    "enrollments"
                ]
            }
        },
        "/v1/courses/{course_id}/enrollments/{id}": {
            "delete": {
                "deprecated": false,
                "description": "Conclude, deactivate, or delete an enrollment. If the +task+ argument isn't given, the enrollment\nwill be concluded.",
                "operationId": "conclude_deactivate_or_delete_enrollment",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The action to take on the enrollment.\nWhen inactive, a user will still appear in the course roster to admins, but be unable to participate.\n(\"inactivate\" and \"deactivate\" are equivalent tasks)",
                        "in": "query",
                        "name": "task",
                        "schema": {
                            "enum": [
                                "conclude",
                                "delete",
                                "inactivate",
                                "deactivate"
                            ],
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Enrollment"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Conclude, deactivate, or delete an enrollment",
                "tags": [
                    "enrollments"
                ]
            }
        },
        "/v1/courses/{course_id}/enrollments/{id}/accept": {
            "post": {
                "deprecated": false,
                "description": "accepts a pending course invitation for the current user",
                "operationId": "accept_course_invitation",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Accept Course Invitation",
                "tags": [
                    "enrollments"
                ]
            }
        },
        "/v1/courses/{course_id}/enrollments/{id}/reactivate": {
            "put": {
                "deprecated": false,
                "description": "Activates an inactive enrollment",
                "operationId": "re_activate_enrollment",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Enrollment"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Re-activate an enrollment",
                "tags": [
                    "enrollments"
                ]
            }
        },
        "/v1/courses/{course_id}/enrollments/{id}/reject": {
            "post": {
                "deprecated": false,
                "description": "rejects a pending course invitation for the current user",
                "operationId": "reject_course_invitation",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Reject Course Invitation",
                "tags": [
                    "enrollments"
                ]
            }
        },
        "/v1/courses/{course_id}/epub_exports": {
            "post": {
                "deprecated": false,
                "description": "Begin an ePub export for a course.\n\nYou can use the {api:ProgressController#show Progress API} to track the\nprogress of the export. The export's progress is linked to with the\n_progress_url_ value.\n\nWhen the export completes, use the {api:EpubExportsController#show Show content export} endpoint\nto retrieve a download URL for the exported content.",
                "operationId": "create_epub_export",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EpubExport"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Create ePub Export",
                "tags": [
                    "e_pub_exports"
                ]
            }
        },
        "/v1/courses/{course_id}/epub_exports/{id}": {
            "get": {
                "deprecated": false,
                "description": "Get information about a single ePub export.",
                "operationId": "show_epub_export",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/EpubExport"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Show ePub export",
                "tags": [
                    "e_pub_exports"
                ]
            }
        },
        "/v1/courses/{course_id}/external_feeds": {
            "get": {
                "deprecated": false,
                "description": "Returns the paginated list of External Feeds this course or group.",
                "operationId": "list_external_feeds_courses",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/pageParam"
                    },
                    {
                        "$ref": "#/components/parameters/perPageParam"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/ExternalFeed"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "List external feeds",
                "tags": [
                    "announcement_external_feeds"
                ]
            },
            "post": {
                "deprecated": false,
                "description": "Create a new external feed for the course or group.",
                "operationId": "create_external_feed_courses",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "properties": {
                                    "header_match": {
                                        "description": "If given, only feed entries that contain this string in their title will be imported",
                                        "type": "boolean"
                                    },
                                    "url": {
                                        "description": "The url to the external rss or atom feed",
                                        "type": "string"
                                    },
                                    "verbosity": {
                                        "description": "Defaults to \"full\"",
                                        "enum": [
                                            "full",
                                            "truncate",
                                            "link_only"
                                        ],
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "url"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ExternalFeed"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Create an external feed",
                "tags": [
                    "announcement_external_feeds"
                ]
            }
        },
        "/v1/courses/{course_id}/external_feeds/{external_feed_id}": {
            "delete": {
                "deprecated": false,
                "description": "Deletes the external feed.",
                "operationId": "delete_external_feed_courses",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "external_feed_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ExternalFeed"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Delete an external feed",
                "tags": [
                    "announcement_external_feeds"
                ]
            }
        },
        "/v1/courses/{course_id}/external_tools": {
            "get": {
                "deprecated": false,
                "description": "Returns the paginated list of external tools for the current context.\nSee the get request docs for a single tool for a list of properties on an external tool.",
                "operationId": "list_external_tools_courses",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The partial name of the tools to match and return.",
                        "in": "query",
                        "name": "search_term",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "If true, then only tools that are meant to be selectable are returned",
                        "in": "query",
                        "name": "selectable",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "description": "If true, then include tools installed in all accounts above the current context",
                        "in": "query",
                        "name": "include_parents",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/pageParam"
                    },
                    {
                        "$ref": "#/components/parameters/perPageParam"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "List external tools",
                "tags": [
                    "external_tools"
                ]
            },
            "post": {
                "deprecated": false,
                "description": "Create an external tool in the specified course/account.\nThe created tool will be returned, see the \"show\" endpoint for an example.",
                "operationId": "create_external_tool_courses",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "properties": {
                                    "account_navigation[display_type]": {
                                        "description": "The layout type to use when launching the tool. Must be\n\"full_width\", \"full_width_in_context\", \"borderless\", or \"default\"",
                                        "type": "string"
                                    },
                                    "account_navigation[enabled]": {
                                        "description": "Set this to enable this feature",
                                        "type": "boolean"
                                    },
                                    "account_navigation[selection_height]": {
                                        "description": "The height of the dialog the tool is launched in",
                                        "type": "string"
                                    },
                                    "account_navigation[selection_width]": {
                                        "description": "The width of the dialog the tool is launched in",
                                        "type": "string"
                                    },
                                    "account_navigation[text]": {
                                        "description": "The text that will show on the left-tab in the account navigation",
                                        "type": "string"
                                    },
                                    "account_navigation[url]": {
                                        "description": "The url of the external tool for account navigation",
                                        "type": "string"
                                    },
                                    "config_type": {
                                        "description": "Configuration can be passed in as CC xml instead of using query\nparameters. If this value is \"by_url\" or \"by_xml\" then an xml\nconfiguration will be expected in either the \"config_xml\" or \"config_url\"\nparameter. Note that the name parameter overrides the tool name provided\nin the xml",
                                        "type": "string"
                                    },
                                    "config_url": {
                                        "description": "URL where the server can retrieve an XML tool configuration, as specified\nin the CC xml specification. This is required if \"config_type\" is set to\n\"by_url\"",
                                        "type": "string"
                                    },
                                    "config_xml": {
                                        "description": "XML tool configuration, as specified in the CC xml specification. This is\nrequired if \"config_type\" is set to \"by_xml\"",
                                        "type": "string"
                                    },
                                    "consumer_key": {
                                        "description": "The consumer key for the external tool",
                                        "type": "string"
                                    },
                                    "course_home_sub_navigation[enabled]": {
                                        "description": "Set this to enable this feature",
                                        "type": "boolean"
                                    },
                                    "course_home_sub_navigation[icon_url]": {
                                        "description": "The url of the icon to show in the right-side course home navigation menu",
                                        "type": "string"
                                    },
                                    "course_home_sub_navigation[text]": {
                                        "description": "The text that will show on the right-side course home navigation menu",
                                        "type": "string"
                                    },
                                    "course_home_sub_navigation[url]": {
                                        "description": "The url of the external tool for right-side course home navigation menu",
                                        "type": "string"
                                    },
                                    "course_navigation[default]": {
                                        "description": "Whether the navigation option will show in the course by default or\nwhether the teacher will have to explicitly enable it",
                                        "type": "boolean"
                                    },
                                    "course_navigation[display_type]": {
                                        "description": "The layout type to use when launching the tool. Must be\n\"full_width\", \"full_width_in_context\", \"borderless\", or \"default\"",
                                        "type": "string"
                                    },
                                    "course_navigation[enabled]": {
                                        "description": "Set this to enable this feature",
                                        "type": "boolean"
                                    },
                                    "course_navigation[text]": {
                                        "description": "The text that will show on the left-tab in the course navigation",
                                        "type": "string"
                                    },
                                    "course_navigation[visibility]": {
                                        "description": "Who will see the navigation tab. \"admins\" for course admins, \"members\" for\nstudents, null for everyone",
                                        "enum": [
                                            "admins",
                                            "members"
                                        ],
                                        "type": "string"
                                    },
                                    "course_navigation[windowTarget]": {
                                        "description": "Determines how the navigation tab will be opened.\n\"_blank\"\tLaunches the external tool in a new window or tab.\n\"_self\"\t(Default) Launches the external tool in an iframe inside of Canvas.",
                                        "enum": [
                                            "_blank",
                                            "_self"
                                        ],
                                        "type": "string"
                                    },
                                    "custom_fields[field_name]": {
                                        "description": "Custom fields that will be sent to the tool consumer; can be used\nmultiple times",
                                        "type": "string"
                                    },
                                    "description": {
                                        "description": "A description of the tool",
                                        "type": "string"
                                    },
                                    "domain": {
                                        "description": "The domain to match links against. Either \"url\" or \"domain\" should be\nset, not both.",
                                        "type": "string"
                                    },
                                    "editor_button[enabled]": {
                                        "description": "Set this to enable this feature",
                                        "type": "boolean"
                                    },
                                    "editor_button[icon_url]": {
                                        "description": "The url of the icon to show in the WYSIWYG editor",
                                        "type": "string"
                                    },
                                    "editor_button[message_type]": {
                                        "description": "Set this to ContentItemSelectionRequest to tell the tool to use\ncontent-item; otherwise, omit",
                                        "type": "string"
                                    },
                                    "editor_button[selection_height]": {
                                        "description": "The height of the dialog the tool is launched in",
                                        "type": "string"
                                    },
                                    "editor_button[selection_width]": {
                                        "description": "The width of the dialog the tool is launched in",
                                        "type": "string"
                                    },
                                    "editor_button[url]": {
                                        "description": "The url of the external tool",
                                        "type": "string"
                                    },
                                    "homework_submission[enabled]": {
                                        "description": "Set this to enable this feature",
                                        "type": "boolean"
                                    },
                                    "homework_submission[message_type]": {
                                        "description": "Set this to ContentItemSelectionRequest to tell the tool to use\ncontent-item; otherwise, omit",
                                        "type": "string"
                                    },
                                    "homework_submission[text]": {
                                        "description": "The text that will show on the homework submission tab",
                                        "type": "string"
                                    },
                                    "homework_submission[url]": {
                                        "description": "The url of the external tool",
                                        "type": "string"
                                    },
                                    "icon_url": {
                                        "description": "The url of the icon to show for this tool",
                                        "type": "string"
                                    },
                                    "link_selection[enabled]": {
                                        "description": "Set this to enable this feature",
                                        "type": "boolean"
                                    },
                                    "link_selection[message_type]": {
                                        "description": "Set this to ContentItemSelectionRequest to tell the tool to use\ncontent-item; otherwise, omit",
                                        "type": "string"
                                    },
                                    "link_selection[text]": {
                                        "description": "The text that will show for the link selection text",
                                        "type": "string"
                                    },
                                    "link_selection[url]": {
                                        "description": "The url of the external tool",
                                        "type": "string"
                                    },
                                    "migration_selection[enabled]": {
                                        "description": "Set this to enable this feature",
                                        "type": "boolean"
                                    },
                                    "migration_selection[message_type]": {
                                        "description": "Set this to ContentItemSelectionRequest to tell the tool to use\ncontent-item; otherwise, omit",
                                        "type": "string"
                                    },
                                    "migration_selection[url]": {
                                        "description": "The url of the external tool",
                                        "type": "string"
                                    },
                                    "name": {
                                        "description": "The name of the tool",
                                        "type": "string"
                                    },
                                    "not_selectable": {
                                        "description": "Default: false, if set to true the tool won't show up in the external tool\nselection UI in modules and assignments",
                                        "type": "boolean"
                                    },
                                    "oauth_compliant": {
                                        "description": "Default: false, if set to true LTI query params will not be copied to the\npost body.",
                                        "type": "boolean"
                                    },
                                    "privacy_level": {
                                        "description": "What information to send to the external tool.",
                                        "enum": [
                                            "anonymous",
                                            "name_only",
                                            "public"
                                        ],
                                        "type": "string"
                                    },
                                    "resource_selection[enabled]": {
                                        "description": "Set this to enable this feature",
                                        "type": "boolean"
                                    },
                                    "resource_selection[icon_url]": {
                                        "description": "The url of the icon to show in the module external tool list",
                                        "type": "string"
                                    },
                                    "resource_selection[selection_height]": {
                                        "description": "The height of the dialog the tool is launched in",
                                        "type": "string"
                                    },
                                    "resource_selection[selection_width]": {
                                        "description": "The width of the dialog the tool is launched in",
                                        "type": "string"
                                    },
                                    "resource_selection[url]": {
                                        "description": "The url of the external tool",
                                        "type": "string"
                                    },
                                    "shared_secret": {
                                        "description": "The shared secret with the external tool",
                                        "type": "string"
                                    },
                                    "text": {
                                        "description": "The default text to show for this tool",
                                        "type": "string"
                                    },
                                    "tool_configuration[enabled]": {
                                        "description": "Set this to enable this feature",
                                        "type": "boolean"
                                    },
                                    "tool_configuration[message_type]": {
                                        "description": "Set this to ContentItemSelectionRequest to tell the tool to use\ncontent-item; otherwise, omit",
                                        "type": "string"
                                    },
                                    "tool_configuration[prefer_sis_email]": {
                                        "description": "Set this to default the lis_person_contact_email_primary to prefer\nprovisioned sis_email; otherwise, omit",
                                        "type": "boolean"
                                    },
                                    "tool_configuration[url]": {
                                        "description": "The url of the external tool",
                                        "type": "string"
                                    },
                                    "url": {
                                        "description": "The url to match links against. Either \"url\" or \"domain\" should be set,\nnot both.",
                                        "type": "string"
                                    },
                                    "user_navigation[enabled]": {
                                        "description": "Set this to enable this feature",
                                        "type": "boolean"
                                    },
                                    "user_navigation[text]": {
                                        "description": "The text that will show on the left-tab in the user navigation",
                                        "type": "string"
                                    },
                                    "user_navigation[url]": {
                                        "description": "The url of the external tool for user navigation",
                                        "type": "string"
                                    },
                                    "user_navigation[visibility]": {
                                        "description": "Who will see the navigation tab. \"admins\" for admins, \"public\" or\n\"members\" for everyone",
                                        "enum": [
                                            "admins",
                                            "members",
                                            "public"
                                        ],
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "consumer_key",
                                    "name",
                                    "privacy_level",
                                    "shared_secret"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Create an external tool",
                "tags": [
                    "external_tools"
                ]
            }
        },
        "/v1/courses/{course_id}/external_tools/sessionless_launch": {
            "get": {
                "deprecated": false,
                "description": "Returns a sessionless launch url for an external tool.\n\nNOTE: Either the id or url must be provided unless launch_type is assessment or module_item.",
                "operationId": "get_sessionless_launch_url_for_external_tool_courses",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The external id of the tool to launch.",
                        "in": "query",
                        "name": "id",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The LTI launch url for the external tool.",
                        "in": "query",
                        "name": "url",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The assignment id for an assignment launch. Required if launch_type is set to \"assessment\".",
                        "in": "query",
                        "name": "assignment_id",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The assignment id for a module item launch. Required if launch_type is set to \"module_item\".",
                        "in": "query",
                        "name": "module_item_id",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The type of launch to perform on the external tool. Placement names (eg. \"course_navigation\")\ncan also be specified to use the custom launch url for that placement; if done, the tool id\nmust be provided.",
                        "in": "query",
                        "name": "launch_type",
                        "schema": {
                            "enum": [
                                "assessment",
                                "module_item"
                            ],
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Get a sessionless launch url for an external tool.",
                "tags": [
                    "external_tools"
                ]
            }
        },
        "/v1/courses/{course_id}/external_tools/{external_tool_id}": {
            "delete": {
                "deprecated": false,
                "description": "Remove the specified external tool",
                "operationId": "delete_external_tool_courses",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "external_tool_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Delete an external tool",
                "tags": [
                    "external_tools"
                ]
            },
            "get": {
                "deprecated": false,
                "description": "Returns the specified external tool.",
                "operationId": "get_single_external_tool_courses",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "external_tool_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Get a single external tool",
                "tags": [
                    "external_tools"
                ]
            },
            "put": {
                "deprecated": false,
                "description": "Update the specified external tool. Uses same parameters as create",
                "operationId": "edit_external_tool_courses",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "external_tool_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Edit an external tool",
                "tags": [
                    "external_tools"
                ]
            }
        },
        "/v1/courses/{course_id}/features": {
            "get": {
                "deprecated": false,
                "description": "A paginated list of all features that apply to a given Account, Course, or User.",
                "operationId": "list_features_courses",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/pageParam"
                    },
                    {
                        "$ref": "#/components/parameters/perPageParam"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Feature"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "List features",
                "tags": [
                    "feature_flags"
                ]
            }
        },
        "/v1/courses/{course_id}/features/enabled": {
            "get": {
                "deprecated": false,
                "description": "A paginated list of all features that are enabled on a given Account, Course, or User.\nOnly the feature names are returned.",
                "operationId": "list_enabled_features_courses",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/pageParam"
                    },
                    {
                        "$ref": "#/components/parameters/perPageParam"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "List enabled features",
                "tags": [
                    "feature_flags"
                ]
            }
        },
        "/v1/courses/{course_id}/features/flags/{feature}": {
            "delete": {
                "deprecated": false,
                "description": "Remove feature flag for a given Account, Course, or User.  (Note that the flag must\nbe defined on the Account, Course, or User directly.)  The object will then inherit\nthe feature flags from a higher account, if any exist.  If this flag was 'on' or 'off',\nthen lower-level account flags that were masked by this one will apply again.",
                "operationId": "remove_feature_flag_courses",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "feature",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FeatureFlag"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Remove feature flag",
                "tags": [
                    "feature_flags"
                ]
            },
            "get": {
                "deprecated": false,
                "description": "Get the feature flag that applies to a given Account, Course, or User.\nThe flag may be defined on the object, or it may be inherited from a parent\naccount. You can look at the context_id and context_type of the returned object\nto determine which is the case. If these fields are missing, then the object\nis the global Canvas default.",
                "operationId": "get_feature_flag_courses",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "feature",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FeatureFlag"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Get feature flag",
                "tags": [
                    "feature_flags"
                ]
            },
            "put": {
                "deprecated": false,
                "description": "Set a feature flag for a given Account, Course, or User. This call will fail if a parent account sets\na feature flag for the same feature in any state other than \"allowed\".",
                "operationId": "set_feature_flag_courses",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "feature",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "state": {
                                        "description": "\"off\":: The feature is not available for the course, user, or account and sub-accounts.\n\"allowed\":: (valid only on accounts) The feature is off in the account, but may be enabled in\n            sub-accounts and courses by setting a feature flag on the sub-account or course.\n\"on\":: The feature is turned on unconditionally for the user, course, or account and sub-accounts.",
                                        "enum": [
                                            false,
                                            "allowed",
                                            true
                                        ],
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FeatureFlag"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Set feature flag",
                "tags": [
                    "feature_flags"
                ]
            }
        },
        "/v1/courses/{course_id}/files": {
            "get": {
                "deprecated": false,
                "description": "Returns the paginated list of files for the folder or course.",
                "operationId": "list_files_courses",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Filter results by content-type. You can specify type/subtype pairs (e.g.,\n'image/jpeg'), or simply types (e.g., 'image', which will match\n'image/gif', 'image/jpeg', etc.).",
                        "explode": false,
                        "in": "query",
                        "name": "content_types",
                        "schema": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The partial name of the files to match and return.",
                        "in": "query",
                        "name": "search_term",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Array of additional information to include.\n\n\"user\":: the user who uploaded the file or last edited its content\n\"usage_rights\":: copyright and license information for the file (see UsageRights)",
                        "explode": false,
                        "in": "query",
                        "name": "include",
                        "schema": {
                            "items": {
                                "type": "string",
                                "enum": [
                                    "user"
                                ]
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "description": "Array of information to restrict to. Overrides include[]\n\n\"names\":: only returns file name information",
                        "explode": false,
                        "in": "query",
                        "name": "only",
                        "schema": {
                            "items": {
                                "items": {
                                    "type": "object"
                                },
                                "type": "array"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "description": "Sort results by this field. Defaults to 'name'. Note that `sort=user` implies `include[]=user`.",
                        "in": "query",
                        "name": "sort",
                        "schema": {
                            "enum": [
                                "name",
                                "size",
                                "created_at",
                                "updated_at",
                                "content_type",
                                "user"
                            ],
                            "type": "string"
                        }
                    },
                    {
                        "description": "The sorting order. Defaults to 'asc'.",
                        "in": "query",
                        "name": "order",
                        "schema": {
                            "enum": [
                                "asc",
                                "desc"
                            ],
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/pageParam"
                    },
                    {
                        "$ref": "#/components/parameters/perPageParam"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/File"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "List files",
                "tags": [
                    "files"
                ]
            }
        },
        "/v1/courses/{course_id}/files/quota": {
            "get": {
                "deprecated": false,
                "description": "Returns the total and used storage quota for the course, group, or user.",
                "operationId": "get_quota_information_courses",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Get quota information",
                "tags": [
                    "files"
                ]
            }
        },
        "/v1/courses/{course_id}/files/{id}": {
            "get": {
                "deprecated": false,
                "description": "Returns the standard attachment json object",
                "operationId": "get_file_courses",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Array of additional information to include.\n\n\"user\":: the user who uploaded the file or last edited its content\n\"usage_rights\":: copyright and license information for the file (see UsageRights)",
                        "explode": false,
                        "in": "query",
                        "name": "include",
                        "schema": {
                            "items": {
                                "type": "string",
                                "enum": [
                                    "user"
                                ]
                            },
                            "type": "array"
                        },
                        "style": "form"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/File"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Get file",
                "tags": [
                    "files"
                ]
            }
        },
        "/v1/courses/{course_id}/folders": {
            "get": {
                "deprecated": false,
                "description": "Returns the paginated list of all folders for the given context. This will\nbe returned as a flat list containing all subfolders as well.",
                "operationId": "list_all_folders_courses",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/pageParam"
                    },
                    {
                        "$ref": "#/components/parameters/perPageParam"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Folder"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "List all folders",
                "tags": [
                    "files"
                ]
            },
            "post": {
                "deprecated": false,
                "description": "Creates a folder in the specified context",
                "operationId": "create_folder_courses",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "properties": {
                                    "hidden": {
                                        "description": "Flag the folder as hidden",
                                        "type": "boolean"
                                    },
                                    "lock_at": {
                                        "description": "The datetime to lock the folder at",
                                        "format": "date-time",
                                        "type": "string"
                                    },
                                    "locked": {
                                        "description": "Flag the folder as locked",
                                        "type": "boolean"
                                    },
                                    "name": {
                                        "description": "The name of the folder",
                                        "type": "string"
                                    },
                                    "parent_folder_id": {
                                        "description": "The id of the folder to store the file in. If this and parent_folder_path are sent an error will be returned. If neither is given, a default folder will be used.",
                                        "type": "string"
                                    },
                                    "parent_folder_path": {
                                        "description": "The path of the folder to store the new folder in. The path separator is the forward slash `/`, never a back slash. The parent folder will be created if it does not already exist. This parameter only applies to new folders in a context that has folders, such as a user, a course, or a group. If this and parent_folder_id are sent an error will be returned. If neither is given, a default folder will be used.",
                                        "type": "string"
                                    },
                                    "position": {
                                        "description": "Set an explicit sort position for the folder",
                                        "format": "int64",
                                        "type": "integer"
                                    },
                                    "unlock_at": {
                                        "description": "The datetime to unlock the folder at",
                                        "format": "date-time",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "name"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Folder"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Create folder",
                "tags": [
                    "files"
                ]
            }
        },
        "/v1/courses/{course_id}/folders/by_path": {
            "get": {
                "deprecated": false,
                "description": "Given the full path to a folder, returns a list of all Folders in the path hierarchy,\nstarting at the root folder, and ending at the requested folder. The given path is\nrelative to the context's root folder and does not include the root folder's name\n(e.g., \"course files\"). If an empty path is given, the context's root folder alone\nis returned. Otherwise, if no folder exists with the given full path, a Not Found\nerror is returned.",
                "operationId": "resolve_path_courses",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Folder"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Resolve path",
                "tags": [
                    "files"
                ]
            }
        },
        "/v1/courses/{course_id}/folders/by_path/*full_path": {
            "get": {
                "deprecated": false,
                "description": "Given the full path to a folder, returns a list of all Folders in the path hierarchy,\nstarting at the root folder, and ending at the requested folder. The given path is\nrelative to the context's root folder and does not include the root folder's name\n(e.g., \"course files\"). If an empty path is given, the context's root folder alone\nis returned. Otherwise, if no folder exists with the given full path, a Not Found\nerror is returned.",
                "operationId": "resolve_path_courses_full_path",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Folder"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Resolve path",
                "tags": [
                    "files"
                ]
            }
        },
        "/v1/courses/{course_id}/folders/{id}": {
            "get": {
                "deprecated": false,
                "description": "Returns the details for a folder\n\nYou can get the root folder from a context by using 'root' as the :id.\nFor example, you could get the root folder for a course like:",
                "operationId": "get_folder_courses",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Folder"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Get folder",
                "tags": [
                    "files"
                ]
            }
        },
        "/v1/courses/{course_id}/front_page": {
            "get": {
                "deprecated": false,
                "description": "Retrieve the content of the front page",
                "operationId": "show_front_page_courses",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Page"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Show front page",
                "tags": [
                    "pages"
                ]
            },
            "put": {
                "deprecated": false,
                "description": "Update the title or contents of the front page",
                "operationId": "update_create_front_page_courses",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "wiki_page[body]": {
                                        "description": "The content for the new page.",
                                        "type": "string"
                                    },
                                    "wiki_page[editing_roles]": {
                                        "description": "Which user roles are allowed to edit this page. Any combination\nof these roles is allowed (separated by commas).\n\n\"teachers\":: Allows editing by teachers in the course.\n\"students\":: Allows editing by students in the course.\n\"members\":: For group wikis, allows editing by members of the group.\n\"public\":: Allows editing by any user.",
                                        "enum": [
                                            "teachers",
                                            "students",
                                            "members",
                                            "public"
                                        ],
                                        "type": "string"
                                    },
                                    "wiki_page[notify_of_update]": {
                                        "description": "Whether participants should be notified when this page changes.",
                                        "type": "boolean"
                                    },
                                    "wiki_page[published]": {
                                        "description": "Whether the page is published (true) or draft state (false).",
                                        "type": "boolean"
                                    },
                                    "wiki_page[title]": {
                                        "description": "The title for the new page. NOTE: changing a page's title will change its\nurl. The updated url will be returned in the result.",
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Page"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Update/create front page",
                "tags": [
                    "pages"
                ]
            }
        },
        "/v1/courses/{course_id}/gradebook_history/days": {
            "get": {
                "deprecated": false,
                "description": "Returns a map of dates to grader/assignment groups",
                "operationId": "days_in_gradebook_history_for_this_course",
                "parameters": [
                    {
                        "description": "The id of the contextual course for this API call",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "format": "int64",
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Day"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Days in gradebook history for this course",
                "tags": [
                    "gradebook_history"
                ]
            }
        },
        "/v1/courses/{course_id}/gradebook_history/feed": {
            "get": {
                "deprecated": false,
                "description": "Gives a paginated, uncollated list of submission versions for all matching\nsubmissions in the context. This SubmissionVersion objects will not include\nthe +new_grade+ or +previous_grade+ keys, only the +grade+; same for\n+graded_at+ and +grader+.",
                "operationId": "list_uncollated_submission_versions",
                "parameters": [
                    {
                        "description": "The id of the contextual course for this API call",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "format": "int64",
                            "type": "integer"
                        }
                    },
                    {
                        "description": "The ID of the assignment for which you want to see submissions. If\nabsent, versions of submissions from any assignment in the course are\nincluded.",
                        "in": "query",
                        "name": "assignment_id",
                        "schema": {
                            "format": "int64",
                            "type": "integer"
                        }
                    },
                    {
                        "description": "The ID of the user for which you want to see submissions. If absent,\nversions of submissions from any user in the course are included.",
                        "in": "query",
                        "name": "user_id",
                        "schema": {
                            "format": "int64",
                            "type": "integer"
                        }
                    },
                    {
                        "description": "Returns submission versions in ascending date order (oldest first). If\nabsent, returns submission versions in descending date order (newest\nfirst).",
                        "in": "query",
                        "name": "ascending",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/pageParam"
                    },
                    {
                        "$ref": "#/components/parameters/perPageParam"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/SubmissionVersion"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "List uncollated submission versions",
                "tags": [
                    "gradebook_history"
                ]
            }
        },
        "/v1/courses/{course_id}/gradebook_history/{date}": {
            "get": {
                "deprecated": false,
                "description": "Returns the graders who worked on this day, along with the assignments they worked on.\nMore details can be obtained by selecting a grader and assignment and calling the\n'submissions' api endpoint for a given date.",
                "operationId": "details_for_given_date_in_gradebook_history_for_this_course",
                "parameters": [
                    {
                        "description": "The id of the contextual course for this API call",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "format": "int64",
                            "type": "integer"
                        }
                    },
                    {
                        "description": "The date for which you would like to see detailed information",
                        "in": "path",
                        "name": "date",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Grader"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Details for a given date in gradebook history for this course",
                "tags": [
                    "gradebook_history"
                ]
            }
        },
        "/v1/courses/{course_id}/gradebook_history/{date}/graders/{grader_id}/assignments/{assignment_id}/submissions": {
            "get": {
                "deprecated": false,
                "description": "Gives a nested list of submission versions",
                "operationId": "lists_submissions",
                "parameters": [
                    {
                        "description": "The id of the contextual course for this API call",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "format": "int64",
                            "type": "integer"
                        }
                    },
                    {
                        "description": "The date for which you would like to see submissions",
                        "in": "path",
                        "name": "date",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The ID of the grader for which you want to see submissions",
                        "in": "path",
                        "name": "grader_id",
                        "required": true,
                        "schema": {
                            "format": "int64",
                            "type": "integer"
                        }
                    },
                    {
                        "description": "The ID of the assignment for which you want to see submissions",
                        "in": "path",
                        "name": "assignment_id",
                        "required": true,
                        "schema": {
                            "format": "int64",
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/SubmissionHistory"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Lists submissions",
                "tags": [
                    "gradebook_history"
                ]
            }
        },
        "/v1/courses/{course_id}/grading_periods": {
            "get": {
                "deprecated": false,
                "description": "Returns the paginated list of grading periods for the current course.",
                "operationId": "list_grading_periods_courses",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/pageParam"
                    },
                    {
                        "$ref": "#/components/parameters/perPageParam"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/GradingPeriod"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "List grading periods",
                "tags": [
                    "grading_periods"
                ]
            }
        },
        "/v1/courses/{course_id}/grading_periods/{id}": {
            "delete": {
                "deprecated": false,
                "description": "<b>204 No Content</b> response code is returned if the deletion was\nsuccessful.",
                "operationId": "delete_grading_period_courses",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Delete a grading period",
                "tags": [
                    "grading_periods"
                ]
            },
            "get": {
                "deprecated": false,
                "description": "Returns the grading period with the given id",
                "operationId": "get_single_grading_period",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Get a single grading period",
                "tags": [
                    "grading_periods"
                ]
            },
            "put": {
                "deprecated": false,
                "description": "Update an existing grading period.",
                "operationId": "update_single_grading_period",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "grading_periods[end_date]": {
                                        "description": "no description",
                                        "items": {
                                            "format": "date",
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "grading_periods[start_date]": {
                                        "description": "The date the grading period starts.",
                                        "items": {
                                            "format": "date",
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "grading_periods[weight]": {
                                        "description": "A weight value that contributes to the overall weight of a grading period set which is used to calculate how much assignments in this period contribute to the total grade",
                                        "items": {
                                            "type": "number"
                                        },
                                        "type": "array"
                                    }
                                },
                                "required": [
                                    "grading_periods[end_date]",
                                    "grading_periods[start_date]"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Update a single grading period",
                "tags": [
                    "grading_periods"
                ]
            }
        },
        "/v1/courses/{course_id}/grading_standards": {
            "get": {
                "deprecated": false,
                "description": "Returns the paginated list of grading standards for the given context that are visible to the user.",
                "operationId": "list_grading_standards_available_in_context_courses",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/pageParam"
                    },
                    {
                        "$ref": "#/components/parameters/perPageParam"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/GradingStandard"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "List the grading standards available in a context.",
                "tags": [
                    "grading_standards"
                ]
            },
            "post": {
                "deprecated": false,
                "description": "Create a new grading standard\n\nIf grading_scheme_entry arguments are omitted, then a default grading scheme\nwill be set. The default scheme is as follows:\n     \"A\" : 94,\n     \"A-\" : 90,\n     \"B+\" : 87,\n     \"B\" : 84,\n     \"B-\" : 80,\n     \"C+\" : 77,\n     \"C\" : 74,\n     \"C-\" : 70,\n     \"D+\" : 67,\n     \"D\" : 64,\n     \"D-\" : 61,\n     \"F\" : 0,",
                "operationId": "create_new_grading_standard_courses",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "properties": {
                                    "grading_scheme_entry[name]": {
                                        "description": "The name for an entry value within a GradingStandard that describes the range of the value\ne.g. A-",
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "grading_scheme_entry[value]": {
                                        "description": "The value for the name of the entry within a GradingStandard.\nThe entry represents the lower bound of the range for the entry.\nThis range includes the value up to the next entry in the GradingStandard,\nor 100 if there is no upper bound. The lowest value will have a lower bound range of 0.\ne.g. 93",
                                        "items": {
                                            "type": "integer"
                                        },
                                        "type": "array"
                                    },
                                    "title": {
                                        "description": "The title for the Grading Standard.",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "grading_scheme_entry[name]",
                                    "grading_scheme_entry[value]",
                                    "title"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GradingStandard"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Create a new grading standard",
                "tags": [
                    "grading_standards"
                ]
            }
        },
        "/v1/courses/{course_id}/grading_standards/{grading_standard_id}": {
            "get": {
                "deprecated": false,
                "description": "Returns a grading standard for the given context that is visible to the user.",
                "operationId": "get_single_grading_standard_in_context_courses",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "grading_standard_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GradingStandard"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Get a single grading standard in a context.",
                "tags": [
                    "grading_standards"
                ]
            }
        },
        "/v1/courses/{course_id}/group_categories": {
            "get": {
                "deprecated": false,
                "description": "Returns a paginated list of group categories in a context",
                "operationId": "list_group_categories_for_context_courses",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/pageParam"
                    },
                    {
                        "$ref": "#/components/parameters/perPageParam"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/GroupCategory"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "List group categories for a context",
                "tags": [
                    "group_categories"
                ]
            },
            "post": {
                "deprecated": false,
                "description": "Create a new group category",
                "operationId": "create_group_category_courses",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "properties": {
                                    "auto_leader": {
                                        "description": "Assigns group leaders automatically when generating and allocating students to groups\nValid values are:\n\"first\":: the first student to be allocated to a group is the leader\n\"random\":: a random student from all members is chosen as the leader",
                                        "enum": [
                                            "first",
                                            "random"
                                        ],
                                        "type": "string"
                                    },
                                    "create_group_count": {
                                        "description": "Create this number of groups (Course Only).",
                                        "format": "int64",
                                        "type": "integer"
                                    },
                                    "group_limit": {
                                        "description": "Limit the maximum number of users in each group (Course Only). Requires\nself signup.",
                                        "format": "int64",
                                        "type": "integer"
                                    },
                                    "name": {
                                        "description": "Name of the group category",
                                        "type": "string"
                                    },
                                    "self_signup": {
                                        "description": "Allow students to sign up for a group themselves (Course Only).\nvalid values are:\n\"enabled\":: allows students to self sign up for any group in course\n\"restricted\":: allows students to self sign up only for groups in the\n               same section null disallows self sign up",
                                        "enum": [
                                            "enabled",
                                            "restricted"
                                        ],
                                        "type": "string"
                                    },
                                    "sis_group_category_id": {
                                        "description": "The unique SIS identifier.",
                                        "type": "string"
                                    },
                                    "split_group_count": {
                                        "description": "(Deprecated)\nCreate this number of groups, and evenly distribute students\namong them. not allowed with \"enable_self_signup\". because\nthe group assignment happens synchronously, it's recommended\nthat you instead use the assign_unassigned_members endpoint.\n(Course Only)",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "name"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GroupCategory"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Create a Group Category",
                "tags": [
                    "group_categories"
                ]
            }
        },
        "/v1/courses/{course_id}/groups": {
            "get": {
                "deprecated": false,
                "description": "Returns the paginated list of active groups in the given context that are visible to user.",
                "operationId": "list_groups_available_in_context_courses",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Will only include groups that the user belongs to if this is set",
                        "in": "query",
                        "name": "only_own_groups",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "description": "- \"tabs\": Include the list of tabs configured for each group.  See the\n  {api:TabsController#index List available tabs API} for more information.",
                        "explode": false,
                        "in": "query",
                        "name": "include",
                        "schema": {
                            "items": {
                                "type": "string",
                                "enum": [
                                    "tabs"
                                ]
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "$ref": "#/components/parameters/pageParam"
                    },
                    {
                        "$ref": "#/components/parameters/perPageParam"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Group"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "List the groups available in a context.",
                "tags": [
                    "groups"
                ]
            }
        },
        "/v1/courses/{course_id}/live_assessments": {
            "get": {
                "deprecated": false,
                "description": "Returns a paginated list of live assessments.",
                "operationId": "list_live_assessments",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/pageParam"
                    },
                    {
                        "$ref": "#/components/parameters/perPageParam"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "List live assessments",
                "tags": [
                    "live_assessments"
                ]
            },
            "post": {
                "deprecated": false,
                "description": "Creates or finds an existing live assessment with the given key and aligns it with\nthe linked outcome",
                "operationId": "create_or_find_live_assessment",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Create or find a live assessment",
                "tags": [
                    "live_assessments"
                ]
            }
        },
        "/v1/courses/{course_id}/live_assessments/{assessment_id}/results": {
            "get": {
                "deprecated": false,
                "description": "Returns a paginated list of live assessment results",
                "operationId": "list_live_assessment_results",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "assessment_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "If set, restrict results to those for this user",
                        "in": "query",
                        "name": "user_id",
                        "schema": {
                            "format": "int64",
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/pageParam"
                    },
                    {
                        "$ref": "#/components/parameters/perPageParam"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "List live assessment results",
                "tags": [
                    "live_assessments"
                ]
            },
            "post": {
                "deprecated": false,
                "description": "Creates live assessment results and adds them to a live assessment",
                "operationId": "create_live_assessment_results",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "assessment_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Create live assessment results",
                "tags": [
                    "live_assessments"
                ]
            }
        },
        "/v1/courses/{course_id}/module_item_sequence": {
            "get": {
                "deprecated": false,
                "description": "Given an asset in a course, find the ModuleItem it belongs to, the previous and next Module Items\nin the course sequence, and also any applicable mastery path rules",
                "operationId": "get_module_item_sequence",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The type of asset to find module sequence information for. Use the ModuleItem if it is known\n(e.g., the user navigated from a module item), since this will avoid ambiguity if the asset\nappears more than once in the module sequence.",
                        "in": "query",
                        "name": "asset_type",
                        "schema": {
                            "enum": [
                                "ModuleItem",
                                "File",
                                "Page",
                                "Discussion",
                                "Assignment",
                                "Quiz",
                                "ExternalTool"
                            ],
                            "type": "string"
                        }
                    },
                    {
                        "description": "The id of the asset (or the url in the case of a Page)",
                        "in": "query",
                        "name": "asset_id",
                        "schema": {
                            "format": "int64",
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ModuleItemSequence"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Get module item sequence",
                "tags": [
                    "modules"
                ]
            }
        },
        "/v1/courses/{course_id}/modules": {
            "get": {
                "deprecated": false,
                "description": "A paginated list of the modules in a course",
                "operationId": "list_modules",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "- \"items\": Return module items inline if possible.\n  This parameter suggests that Canvas return module items directly\n  in the Module object JSON, to avoid having to make separate API\n  requests for each module when enumerating modules and items. Canvas\n  is free to omit 'items' for any particular module if it deems them\n  too numerous to return inline. Callers must be prepared to use the\n  {api:ContextModuleItemsApiController#index List Module Items API}\n  if items are not returned.\n- \"content_details\": Requires include['items']. Returns additional\n  details with module items specific to their associated content items.\n  Includes standard lock information for each item.",
                        "explode": false,
                        "in": "query",
                        "name": "include",
                        "schema": {
                            "items": {
                                "type": "string",
                                "enum": [
                                    "items",
                                    "content_details"
                                ]
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The partial name of the modules (and module items, if include['items'] is\nspecified) to match and return.",
                        "in": "query",
                        "name": "search_term",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Returns module completion information for the student with this id.",
                        "in": "query",
                        "name": "student_id",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/pageParam"
                    },
                    {
                        "$ref": "#/components/parameters/perPageParam"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Module"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "List modules",
                "tags": [
                    "modules"
                ]
            },
            "post": {
                "deprecated": false,
                "description": "Create and return a new module",
                "operationId": "create_module",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "properties": {
                                    "module[name]": {
                                        "description": "The name of the module",
                                        "type": "string"
                                    },
                                    "module[position]": {
                                        "description": "The position of this module in the course (1-based)",
                                        "format": "int64",
                                        "type": "integer"
                                    },
                                    "module[prerequisite_module_ids]": {
                                        "description": "IDs of Modules that must be completed before this one is unlocked.\nPrerequisite modules must precede this module (i.e. have a lower position\nvalue), otherwise they will be ignored",
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "module[publish_final_grade]": {
                                        "description": "Whether to publish the student's final grade for the course upon\ncompletion of this module.",
                                        "type": "boolean"
                                    },
                                    "module[require_sequential_progress]": {
                                        "description": "Whether module items must be unlocked in order",
                                        "type": "boolean"
                                    },
                                    "module[unlock_at]": {
                                        "description": "The date the module will unlock",
                                        "format": "date-time",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "module[name]"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Module"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Create a module",
                "tags": [
                    "modules"
                ]
            }
        },
        "/v1/courses/{course_id}/modules/{id}": {
            "delete": {
                "deprecated": false,
                "description": "Delete a module",
                "operationId": "delete_module",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Module"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Delete module",
                "tags": [
                    "modules"
                ]
            },
            "get": {
                "deprecated": false,
                "description": "Get information about a single module",
                "operationId": "show_module",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "- \"items\": Return module items inline if possible.\n  This parameter suggests that Canvas return module items directly\n  in the Module object JSON, to avoid having to make separate API\n  requests for each module when enumerating modules and items. Canvas\n  is free to omit 'items' for any particular module if it deems them\n  too numerous to return inline. Callers must be prepared to use the\n  {api:ContextModuleItemsApiController#index List Module Items API}\n  if items are not returned.\n- \"content_details\": Requires include['items']. Returns additional\n  details with module items specific to their associated content items.\n  Includes standard lock information for each item.",
                        "explode": false,
                        "in": "query",
                        "name": "include",
                        "schema": {
                            "items": {
                                "type": "string",
                                "enum": [
                                    "items",
                                    "content_details"
                                ]
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "description": "Returns module completion information for the student with this id.",
                        "in": "query",
                        "name": "student_id",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Module"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Show module",
                "tags": [
                    "modules"
                ]
            },
            "put": {
                "deprecated": false,
                "description": "Update and return an existing module",
                "operationId": "update_module",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "module[name]": {
                                        "description": "The name of the module",
                                        "type": "string"
                                    },
                                    "module[position]": {
                                        "description": "The position of the module in the course (1-based)",
                                        "format": "int64",
                                        "type": "integer"
                                    },
                                    "module[prerequisite_module_ids]": {
                                        "description": "IDs of Modules that must be completed before this one is unlocked\nPrerequisite modules must precede this module (i.e. have a lower position\nvalue), otherwise they will be ignored",
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "module[publish_final_grade]": {
                                        "description": "Whether to publish the student's final grade for the course upon\ncompletion of this module.",
                                        "type": "boolean"
                                    },
                                    "module[published]": {
                                        "description": "Whether the module is published and visible to students",
                                        "type": "boolean"
                                    },
                                    "module[require_sequential_progress]": {
                                        "description": "Whether module items must be unlocked in order",
                                        "type": "boolean"
                                    },
                                    "module[unlock_at]": {
                                        "description": "The date the module will unlock",
                                        "format": "date-time",
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Module"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Update a module",
                "tags": [
                    "modules"
                ]
            }
        },
        "/v1/courses/{course_id}/modules/{id}/relock": {
            "put": {
                "deprecated": false,
                "description": "Resets module progressions to their default locked state and\nrecalculates them based on the current requirements.\n\nAdding progression requirements to an active course will not lock students\nout of modules they have already unlocked unless this action is called.",
                "operationId": "re_lock_module_progressions",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Module"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Re-lock module progressions",
                "tags": [
                    "modules"
                ]
            }
        },
        "/v1/courses/{course_id}/modules/{module_id}/items": {
            "get": {
                "deprecated": false,
                "description": "A paginated list of the items in a module",
                "operationId": "list_module_items",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "module_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "If included, will return additional details specific to the content\nassociated with each item. Refer to the {api:Modules:Module%20Item Module\nItem specification} for more details.\nIncludes standard lock information for each item.",
                        "explode": false,
                        "in": "query",
                        "name": "include",
                        "schema": {
                            "items": {
                                "type": "string",
                                "enum": [
                                    "content_details"
                                ]
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The partial title of the items to match and return.",
                        "in": "query",
                        "name": "search_term",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Returns module completion information for the student with this id.",
                        "in": "query",
                        "name": "student_id",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/pageParam"
                    },
                    {
                        "$ref": "#/components/parameters/perPageParam"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/ModuleItem"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "List module items",
                "tags": [
                    "modules"
                ]
            },
            "post": {
                "deprecated": false,
                "description": "Create and return a new module item",
                "operationId": "create_module_item",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "module_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "properties": {
                                    "module_item[completion_requirement][min_score]": {
                                        "description": "Minimum score required to complete. Required for completion_requirement\ntype 'min_score'.",
                                        "format": "int64",
                                        "type": "integer"
                                    },
                                    "module_item[completion_requirement][type]": {
                                        "description": "Completion requirement for this module item.\n\"must_view\": Applies to all item types\n\"must_contribute\": Only applies to \"Assignment\", \"Discussion\", and \"Page\" types\n\"must_submit\", \"min_score\": Only apply to \"Assignment\" and \"Quiz\" types\nInapplicable types will be ignored",
                                        "enum": [
                                            "must_view",
                                            "must_contribute",
                                            "must_submit"
                                        ],
                                        "type": "string"
                                    },
                                    "module_item[content_id]": {
                                        "description": "The id of the content to link to the module item. Required, except for\n'ExternalUrl', 'Page', and 'SubHeader' types.",
                                        "type": "string"
                                    },
                                    "module_item[external_url]": {
                                        "description": "External url that the item points to. [Required for 'ExternalUrl' and\n'ExternalTool' types.",
                                        "type": "string"
                                    },
                                    "module_item[indent]": {
                                        "description": "0-based indent level; module items may be indented to show a hierarchy",
                                        "format": "int64",
                                        "type": "integer"
                                    },
                                    "module_item[new_tab]": {
                                        "description": "Whether the external tool opens in a new tab. Only applies to\n'ExternalTool' type.",
                                        "type": "boolean"
                                    },
                                    "module_item[page_url]": {
                                        "description": "Suffix for the linked wiki page (e.g. 'front-page'). Required for 'Page'\ntype.",
                                        "type": "string"
                                    },
                                    "module_item[position]": {
                                        "description": "The position of this item in the module (1-based).",
                                        "format": "int64",
                                        "type": "integer"
                                    },
                                    "module_item[title]": {
                                        "description": "The name of the module item and associated content",
                                        "type": "string"
                                    },
                                    "module_item[type]": {
                                        "description": "The type of content linked to the item",
                                        "enum": [
                                            "File",
                                            "Page",
                                            "Discussion",
                                            "Assignment",
                                            "Quiz",
                                            "SubHeader",
                                            "ExternalUrl",
                                            "ExternalTool"
                                        ],
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "module_item[content_id]",
                                    "module_item[type]"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ModuleItem"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Create a module item",
                "tags": [
                    "modules"
                ]
            }
        },
        "/v1/courses/{course_id}/modules/{module_id}/items/{id}": {
            "delete": {
                "deprecated": false,
                "description": "Delete a module item",
                "operationId": "delete_module_item",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "module_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ModuleItem"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Delete module item",
                "tags": [
                    "modules"
                ]
            },
            "get": {
                "deprecated": false,
                "description": "Get information about a single module item",
                "operationId": "show_module_item",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "module_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "If included, will return additional details specific to the content\nassociated with this item. Refer to the {api:Modules:Module%20Item Module\nItem specification} for more details.\nIncludes standard lock information for each item.",
                        "explode": false,
                        "in": "query",
                        "name": "include",
                        "schema": {
                            "items": {
                                "type": "string",
                                "enum": [
                                    "content_details"
                                ]
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "description": "Returns module completion information for the student with this id.",
                        "in": "query",
                        "name": "student_id",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ModuleItem"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Show module item",
                "tags": [
                    "modules"
                ]
            },
            "put": {
                "deprecated": false,
                "description": "Update and return an existing module item",
                "operationId": "update_module_item",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "module_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "module_item[completion_requirement][min_score]": {
                                        "description": "Minimum score required to complete, Required for completion_requirement\ntype 'min_score'.",
                                        "format": "int64",
                                        "type": "integer"
                                    },
                                    "module_item[completion_requirement][type]": {
                                        "description": "Completion requirement for this module item.\n\"must_view\": Applies to all item types\n\"must_contribute\": Only applies to \"Assignment\", \"Discussion\", and \"Page\" types\n\"must_submit\", \"min_score\": Only apply to \"Assignment\" and \"Quiz\" types\nInapplicable types will be ignored",
                                        "enum": [
                                            "must_view",
                                            "must_contribute",
                                            "must_submit"
                                        ],
                                        "type": "string"
                                    },
                                    "module_item[external_url]": {
                                        "description": "External url that the item points to. Only applies to 'ExternalUrl' type.",
                                        "type": "string"
                                    },
                                    "module_item[indent]": {
                                        "description": "0-based indent level; module items may be indented to show a hierarchy",
                                        "format": "int64",
                                        "type": "integer"
                                    },
                                    "module_item[module_id]": {
                                        "description": "Move this item to another module by specifying the target module id here.\nThe target module must be in the same course.",
                                        "type": "string"
                                    },
                                    "module_item[new_tab]": {
                                        "description": "Whether the external tool opens in a new tab. Only applies to\n'ExternalTool' type.",
                                        "type": "boolean"
                                    },
                                    "module_item[position]": {
                                        "description": "The position of this item in the module (1-based)",
                                        "format": "int64",
                                        "type": "integer"
                                    },
                                    "module_item[published]": {
                                        "description": "Whether the module item is published and visible to students.",
                                        "type": "boolean"
                                    },
                                    "module_item[title]": {
                                        "description": "The name of the module item",
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ModuleItem"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Update a module item",
                "tags": [
                    "modules"
                ]
            }
        },
        "/v1/courses/{course_id}/modules/{module_id}/items/{id}/done": {
            "put": {
                "deprecated": false,
                "description": "Mark a module item as done/not done. Use HTTP method PUT to mark as done,\nand DELETE to mark as not done.",
                "operationId": "mark_module_item_as_done_not_done",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "module_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Mark module item as done/not done",
                "tags": [
                    "modules"
                ]
            }
        },
        "/v1/courses/{course_id}/modules/{module_id}/items/{id}/mark_read": {
            "post": {
                "deprecated": false,
                "description": "Fulfills \"must view\" requirement for a module item. It is generally not necessary to do this explicitly,\nbut it is provided for applications that need to access external content directly (bypassing the html_url\nredirect that normally allows Canvas to fulfill \"must view\" requirements).\n\nThis endpoint cannot be used to complete requirements on locked or unpublished module items.",
                "operationId": "mark_module_item_read",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "module_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Mark module item read",
                "tags": [
                    "modules"
                ]
            }
        },
        "/v1/courses/{course_id}/modules/{module_id}/items/{id}/select_mastery_path": {
            "post": {
                "deprecated": false,
                "description": "Select a mastery path when module item includes several possible paths.\nRequires Mastery Paths feature to be enabled.  Returns a compound document\nwith the assignments included in the given path and any module items\nrelated to those assignments",
                "operationId": "select_mastery_path",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "module_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "properties": {
                                    "assignment_set_id": {
                                        "description": "Assignment set chosen, as specified in the mastery_paths portion of the\ncontext module item response",
                                        "type": "string"
                                    },
                                    "student_id": {
                                        "description": "Which student the selection applies to.  If not specified, current user is\nimplied.",
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Select a mastery path",
                "tags": [
                    "modules"
                ]
            }
        },
        "/v1/courses/{course_id}/outcome_alignments": {
            "get": {
                "deprecated": false,
                "operationId": "get_aligned_assignments_for_outcome_in_course_for_particular_student",
                "parameters": [
                    {
                        "description": "The id of the course",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "format": "int64",
                            "type": "integer"
                        }
                    },
                    {
                        "description": "The id of the student",
                        "in": "query",
                        "name": "student_id",
                        "schema": {
                            "format": "int64",
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/OutcomeAlignment"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Get aligned assignments for an outcome in a course for a particular student",
                "tags": [
                    "outcomes"
                ]
            }
        },
        "/v1/courses/{course_id}/outcome_group_links": {
            "get": {
                "deprecated": false,
                "operationId": "get_all_outcome_links_for_context_courses",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The detail level of the outcomes. Defaults to \"abbrev\".\nSpecify \"full\" for more information.",
                        "in": "query",
                        "name": "outcome_style",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The detail level of the outcome groups. Defaults to \"abbrev\".\nSpecify \"full\" for more information.",
                        "in": "query",
                        "name": "outcome_group_style",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/OutcomeLink"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Get all outcome links for context",
                "tags": [
                    "outcome_groups"
                ]
            }
        },
        "/v1/courses/{course_id}/outcome_groups": {
            "get": {
                "deprecated": false,
                "operationId": "get_all_outcome_groups_for_context_courses",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/OutcomeGroup"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Get all outcome groups for context",
                "tags": [
                    "outcome_groups"
                ]
            }
        },
        "/v1/courses/{course_id}/outcome_groups/{id}": {
            "delete": {
                "deprecated": false,
                "description": "Deleting an outcome group deletes descendant outcome groups and outcome\nlinks. The linked outcomes themselves are only deleted if all links to the\noutcome were deleted.\n\nAligned outcomes cannot be deleted; as such, if all remaining links to an\naligned outcome are included in this group's descendants, the group\ndeletion will fail.",
                "operationId": "delete_outcome_group_courses",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OutcomeGroup"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Delete an outcome group",
                "tags": [
                    "outcome_groups"
                ]
            },
            "get": {
                "deprecated": false,
                "operationId": "show_outcome_group_courses",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OutcomeGroup"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Show an outcome group",
                "tags": [
                    "outcome_groups"
                ]
            },
            "put": {
                "deprecated": false,
                "description": "Modify an existing outcome group. Fields not provided are left as is;\nunrecognized fields are ignored.\n\nWhen changing the parent outcome group, the new parent group must belong to\nthe same context as this outcome group, and must not be a descendant of\nthis outcome group (i.e. no cycles allowed).",
                "operationId": "update_outcome_group_courses",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "description": {
                                        "description": "The new outcome group description.",
                                        "type": "string"
                                    },
                                    "parent_outcome_group_id": {
                                        "description": "The id of the new parent outcome group.",
                                        "format": "int64",
                                        "type": "integer"
                                    },
                                    "title": {
                                        "description": "The new outcome group title.",
                                        "type": "string"
                                    },
                                    "vendor_guid": {
                                        "description": "A custom GUID for the learning standard.",
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OutcomeGroup"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Update an outcome group",
                "tags": [
                    "outcome_groups"
                ]
            }
        },
        "/v1/courses/{course_id}/outcome_groups/{id}/import": {
            "post": {
                "deprecated": false,
                "description": "Creates a new subgroup of the outcome group with the same title and\ndescription as the source group, then creates links in that new subgroup to\nthe same outcomes that are linked in the source group. Recurses on the\nsubgroups of the source group, importing them each in turn into the new\nsubgroup.\n\nAllows you to copy organizational structure, but does not create copies of\nthe outcomes themselves, only new links.\n\nThe source group must be either global, from the same context as this\noutcome group, or from an associated account. The source group cannot be\nthe root outcome group of its context.",
                "operationId": "import_outcome_group_courses",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "properties": {
                                    "async": {
                                        "description": "If true, perform action asynchronously.  In that case, this endpoint\nwill return a Progress object instead of an OutcomeGroup.\nUse the {api:ProgressController#show progress endpoint}\nto query the status of the operation.  The imported outcome group id\nand url will be returned in the results of the Progress object\nas \"outcome_group_id\" and \"outcome_group_url\"",
                                        "type": "boolean"
                                    },
                                    "source_outcome_group_id": {
                                        "description": "The ID of the source outcome group.",
                                        "format": "int64",
                                        "type": "integer"
                                    }
                                },
                                "required": [
                                    "source_outcome_group_id"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OutcomeGroup"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Import an outcome group",
                "tags": [
                    "outcome_groups"
                ]
            }
        },
        "/v1/courses/{course_id}/outcome_groups/{id}/outcomes": {
            "get": {
                "deprecated": false,
                "description": "A paginated list of the immediate OutcomeLink children of the outcome group.",
                "operationId": "list_linked_outcomes_courses",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The detail level of the outcomes. Defaults to \"abbrev\".\nSpecify \"full\" for more information.",
                        "in": "query",
                        "name": "outcome_style",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/pageParam"
                    },
                    {
                        "$ref": "#/components/parameters/perPageParam"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/OutcomeLink"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "List linked outcomes",
                "tags": [
                    "outcome_groups"
                ]
            },
            "post": {
                "deprecated": false,
                "description": "Link an outcome into the outcome group. The outcome to link can either be\nspecified by a PUT to the link URL for a specific outcome (the outcome_id\nin the PUT URLs) or by supplying the information for a new outcome (title,\ndescription, ratings, mastery_points) in a POST to the collection.\n\nIf linking an existing outcome, the outcome_id must identify an outcome\navailable to this context; i.e. an outcome owned by this group's context,\nan outcome owned by an associated account, or a global outcome. With\noutcome_id present, any other parameters (except move_from) are ignored.\n\nIf defining a new outcome, the outcome is created in the outcome group's\ncontext using the provided title, description, ratings, and mastery points;\nthe title is required but all other fields are optional. The new outcome\nis then linked into the outcome group.\n\nIf ratings are provided when creating a new outcome, an embedded rubric\ncriterion is included in the new outcome. This criterion's mastery_points\ndefault to the maximum points in the highest rating if not specified in the\nmastery_points parameter. Any ratings lacking a description are given a\ndefault of \"No description\". Any ratings lacking a point value are given a\ndefault of 0. If no ratings are provided, the mastery_points parameter is\nignored.",
                "operationId": "create_link_outcome_courses",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "properties": {
                                    "calculation_int": {
                                        "description": "The new calculation int.  Only applies if the calculation_method is \"decaying_average\" or \"n_mastery\"",
                                        "format": "int64",
                                        "type": "integer"
                                    },
                                    "calculation_method": {
                                        "description": "The new calculation method.  Defaults to \"highest\"",
                                        "enum": [
                                            "decaying_average",
                                            "n_mastery",
                                            "latest",
                                            "highest"
                                        ],
                                        "type": "string"
                                    },
                                    "description": {
                                        "description": "The description of the new outcome.",
                                        "type": "string"
                                    },
                                    "display_name": {
                                        "description": "A friendly name shown in reports for outcomes with cryptic titles,\nsuch as common core standards names.",
                                        "type": "string"
                                    },
                                    "mastery_points": {
                                        "description": "The mastery threshold for the embedded rubric criterion.",
                                        "format": "int64",
                                        "type": "integer"
                                    },
                                    "move_from": {
                                        "description": "The ID of the old outcome group. Only used if outcome_id is present.",
                                        "format": "int64",
                                        "type": "integer"
                                    },
                                    "outcome_id": {
                                        "description": "The ID of the existing outcome to link.",
                                        "format": "int64",
                                        "type": "integer"
                                    },
                                    "ratings[description]": {
                                        "description": "The description of a rating level for the embedded rubric criterion.",
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "ratings[points]": {
                                        "description": "The points corresponding to a rating level for the embedded rubric criterion.",
                                        "items": {
                                            "type": "integer"
                                        },
                                        "type": "array"
                                    },
                                    "title": {
                                        "description": "The title of the new outcome. Required if outcome_id is absent.",
                                        "type": "string"
                                    },
                                    "vendor_guid": {
                                        "description": "A custom GUID for the learning standard.",
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OutcomeLink"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Create/link an outcome",
                "tags": [
                    "outcome_groups"
                ]
            }
        },
        "/v1/courses/{course_id}/outcome_groups/{id}/outcomes/{outcome_id}": {
            "delete": {
                "deprecated": false,
                "description": "Unlinking an outcome only deletes the outcome itself if this was the last\nlink to the outcome in any group in any context. Aligned outcomes cannot be\ndeleted; as such, if this is the last link to an aligned outcome, the\nunlinking will fail.",
                "operationId": "unlink_outcome_courses",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "outcome_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OutcomeLink"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Unlink an outcome",
                "tags": [
                    "outcome_groups"
                ]
            },
            "put": {
                "deprecated": false,
                "description": "Link an outcome into the outcome group. The outcome to link can either be\nspecified by a PUT to the link URL for a specific outcome (the outcome_id\nin the PUT URLs) or by supplying the information for a new outcome (title,\ndescription, ratings, mastery_points) in a POST to the collection.\n\nIf linking an existing outcome, the outcome_id must identify an outcome\navailable to this context; i.e. an outcome owned by this group's context,\nan outcome owned by an associated account, or a global outcome. With\noutcome_id present, any other parameters (except move_from) are ignored.\n\nIf defining a new outcome, the outcome is created in the outcome group's\ncontext using the provided title, description, ratings, and mastery points;\nthe title is required but all other fields are optional. The new outcome\nis then linked into the outcome group.\n\nIf ratings are provided when creating a new outcome, an embedded rubric\ncriterion is included in the new outcome. This criterion's mastery_points\ndefault to the maximum points in the highest rating if not specified in the\nmastery_points parameter. Any ratings lacking a description are given a\ndefault of \"No description\". Any ratings lacking a point value are given a\ndefault of 0. If no ratings are provided, the mastery_points parameter is\nignored.",
                "operationId": "create_link_outcome_courses_outcome_id",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The ID of the existing outcome to link.",
                        "in": "path",
                        "name": "outcome_id",
                        "required": true,
                        "schema": {
                            "format": "int64",
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "calculation_int": {
                                        "description": "The new calculation int.  Only applies if the calculation_method is \"decaying_average\" or \"n_mastery\"",
                                        "format": "int64",
                                        "type": "integer"
                                    },
                                    "calculation_method": {
                                        "description": "The new calculation method.  Defaults to \"highest\"",
                                        "enum": [
                                            "decaying_average",
                                            "n_mastery",
                                            "latest",
                                            "highest"
                                        ],
                                        "type": "string"
                                    },
                                    "description": {
                                        "description": "The description of the new outcome.",
                                        "type": "string"
                                    },
                                    "display_name": {
                                        "description": "A friendly name shown in reports for outcomes with cryptic titles,\nsuch as common core standards names.",
                                        "type": "string"
                                    },
                                    "mastery_points": {
                                        "description": "The mastery threshold for the embedded rubric criterion.",
                                        "format": "int64",
                                        "type": "integer"
                                    },
                                    "move_from": {
                                        "description": "The ID of the old outcome group. Only used if outcome_id is present.",
                                        "format": "int64",
                                        "type": "integer"
                                    },
                                    "ratings[description]": {
                                        "description": "The description of a rating level for the embedded rubric criterion.",
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "ratings[points]": {
                                        "description": "The points corresponding to a rating level for the embedded rubric criterion.",
                                        "items": {
                                            "type": "integer"
                                        },
                                        "type": "array"
                                    },
                                    "title": {
                                        "description": "The title of the new outcome. Required if outcome_id is absent.",
                                        "type": "string"
                                    },
                                    "vendor_guid": {
                                        "description": "A custom GUID for the learning standard.",
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OutcomeLink"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Create/link an outcome",
                "tags": [
                    "outcome_groups"
                ]
            }
        },
        "/v1/courses/{course_id}/outcome_groups/{id}/subgroups": {
            "get": {
                "deprecated": false,
                "description": "A paginated list of the immediate OutcomeGroup children of the outcome group.",
                "operationId": "list_subgroups_courses",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/pageParam"
                    },
                    {
                        "$ref": "#/components/parameters/perPageParam"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/OutcomeGroup"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "List subgroups",
                "tags": [
                    "outcome_groups"
                ]
            },
            "post": {
                "deprecated": false,
                "description": "Creates a new empty subgroup under the outcome group with the given title\nand description.",
                "operationId": "create_subgroup_courses",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "properties": {
                                    "description": {
                                        "description": "The description of the new outcome group.",
                                        "type": "string"
                                    },
                                    "title": {
                                        "description": "The title of the new outcome group.",
                                        "type": "string"
                                    },
                                    "vendor_guid": {
                                        "description": "A custom GUID for the learning standard",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "title"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OutcomeGroup"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Create a subgroup",
                "tags": [
                    "outcome_groups"
                ]
            }
        },
        "/v1/courses/{course_id}/outcome_imports": {
            "post": {
                "deprecated": false,
                "description": "Import outcomes into Canvas.\n\nFor more information on the format that's expected here, please see the\n\"Outcomes CSV\" section in the API docs.",
                "operationId": "import_outcomes_courses",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "properties": {
                                    "attachment": {
                                        "description": "There are two ways to post outcome import data - either via a\napplication/x-www-form-urlencoded form-field-style attachment, or via a non-multipart\nraw post request.\n\n'attachment' is required for application/x-www-form-urlencoded style posts. Assumed to\nbe outcome data from a file upload form field named 'attachment'.\n\nExamples:\n  curl -F attachment=@<filename> -H \"Authorization: Bearer <token>\" \\\n      'https://<canvas>/api/v1/accounts/<account_id>/outcome_imports?import_type=instructure_csv'\n  curl -F attachment=@<filename> -H \"Authorization: Bearer <token>\" \\\n      'https://<canvas>/api/v1/courses/<course_id>/outcome_imports?import_type=instructure_csv'\n\nIf you decide to do a raw post, you can skip the 'attachment' argument,\nbut you will then be required to provide a suitable Content-Type header.\nYou are encouraged to also provide the 'extension' argument.\n\nExamples:\n  curl -H 'Content-Type: text/csv' --data-binary @<filename>.csv \\\n      -H \"Authorization: Bearer <token>\" \\\n      'https://<canvas>/api/v1/accounts/<account_id>/outcome_imports?import_type=instructure_csv'\n\n  curl -H 'Content-Type: text/csv' --data-binary @<filename>.csv \\\n      -H \"Authorization: Bearer <token>\" \\\n      'https://<canvas>/api/v1/courses/<course_id>/outcome_imports?import_type=instructure_csv'",
                                        "type": "string"
                                    },
                                    "extension": {
                                        "description": "Recommended for raw post request style imports. This field will be used to\ndistinguish between csv and other file format extensions that\nwould usually be provided with the filename in the multipart post request\nscenario. If not provided, this value will be inferred from the\nContent-Type, falling back to csv-file format if all else fails.",
                                        "type": "string"
                                    },
                                    "import_type": {
                                        "description": "Choose the data format for reading outcome data. With a standard Canvas\ninstall, this option can only be 'instructure_csv', and if unprovided,\nwill be assumed to be so. Can be part of the query string.",
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OutcomeImport"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Import Outcomes",
                "tags": [
                    "outcome_imports"
                ]
            }
        },
        "/v1/courses/{course_id}/outcome_imports/{id}": {
            "get": {
                "deprecated": false,
                "description": "Get the status of an already created Outcome import. Pass 'latest' for the outcome import id\nfor the latest import.\n\n  Examples:\n    curl 'https://<canvas>/api/v1/accounts/<account_id>/outcome_imports/<outcome_import_id>' \\\n        -H \"Authorization: Bearer <token>\"\n    curl 'https://<canvas>/api/v1/courses/<course_id>/outcome_imports/<outcome_import_id>' \\\n        -H \"Authorization: Bearer <token>\"",
                "operationId": "get_outcome_import_status_courses",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OutcomeImport"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Get Outcome import status",
                "tags": [
                    "outcome_imports"
                ]
            }
        },
        "/v1/courses/{course_id}/outcome_results": {
            "get": {
                "deprecated": false,
                "description": "Gets the outcome results for users and outcomes in the specified context.",
                "operationId": "get_outcome_results",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "If specified, only the users whose ids are given will be included in the\nresults. SIS ids can be used, prefixed by \"sis_user_id:\".\nIt is an error to specify an id for a user who is not a student in\nthe context.",
                        "explode": false,
                        "in": "query",
                        "name": "user_ids",
                        "schema": {
                            "items": {
                                "type": "integer"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "description": "If specified, only the outcomes whose ids are given will be included in the\nresults. it is an error to specify an id for an outcome which is not linked\nto the context.",
                        "explode": false,
                        "in": "query",
                        "name": "outcome_ids",
                        "schema": {
                            "items": {
                                "type": "integer"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "description": "[String, \"alignments\"|\"outcomes\"|\"outcomes.alignments\"|\"outcome_groups\"|\"outcome_links\"|\"outcome_paths\"|\"users\"]\nSpecify additional collections to be side loaded with the result.\n\"alignments\" includes only the alignments referenced by the returned\nresults.\n\"outcomes.alignments\" includes all alignments referenced by outcomes in the\ncontext.",
                        "explode": false,
                        "in": "query",
                        "name": "include",
                        "schema": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "description": "If true, results that are hidden from the learning mastery gradebook and student rollup\nscores will be included",
                        "in": "query",
                        "name": "include_hidden",
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OutcomeResultResponse"
                                }
                            }
                        },
                        "description": "Assessment Outcome Results and optional info (enabled via \"include\" parameter)"
                    }
                },
                "summary": "Get outcome results",
                "tags": [
                    "outcome_results"
                ]
            }
        },
        "/v1/courses/{course_id}/outcome_rollups": {
            "get": {
                "deprecated": false,
                "description": "Gets the outcome rollups for the users and outcomes in the specified context.",
                "operationId": "get_outcome_result_rollups",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "If specified, instead of returning one rollup for each user, all the user\nrollups will be combined into one rollup for the course that will contain\nthe average (or median, see below) rollup score for each outcome.",
                        "in": "query",
                        "name": "aggregate",
                        "schema": {
                            "enum": [
                                "course"
                            ],
                            "type": "string"
                        }
                    },
                    {
                        "description": "If aggregate rollups requested, then this value determines what\nstatistic is used for the aggregate. Defaults to \"mean\" if this value\nis not specified.",
                        "in": "query",
                        "name": "aggregate_stat",
                        "schema": {
                            "enum": [
                                "mean",
                                "median"
                            ],
                            "type": "string"
                        }
                    },
                    {
                        "description": "If specified, only the users whose ids are given will be included in the\nresults or used in an aggregate result. it is an error to specify an id\nfor a user who is not a student in the context",
                        "explode": false,
                        "in": "query",
                        "name": "user_ids",
                        "schema": {
                            "items": {
                                "type": "integer"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "description": "If specified, only the outcomes whose ids are given will be included in the\nresults. it is an error to specify an id for an outcome which is not linked\nto the context.",
                        "explode": false,
                        "in": "query",
                        "name": "outcome_ids",
                        "schema": {
                            "items": {
                                "type": "integer"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "description": "[String, \"courses\"|\"outcomes\"|\"outcomes.alignments\"|\"outcome_groups\"|\"outcome_links\"|\"outcome_paths\"|\"users\"]\nSpecify additional collections to be side loaded with the result.",
                        "explode": false,
                        "in": "query",
                        "name": "include",
                        "schema": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "description": "Specify additional values to exclude. \"missing_user_rollups\" excludes\nrollups for users without results.",
                        "explode": false,
                        "in": "query",
                        "name": "exclude",
                        "schema": {
                            "items": {
                                "type": "string",
                                "enum": [
                                    "missing_user_rollups"
                                ]
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "description": "If specified, sorts outcome result rollups. \"student\" sorting will sort\nby a user's sortable name. \"outcome\" sorting will sort by the given outcome's\nrollup score. The latter requires specifying the \"sort_outcome_id\" parameter.\nBy default, the sort order is ascending.",
                        "in": "query",
                        "name": "sort_by",
                        "schema": {
                            "enum": [
                                "student",
                                "outcome"
                            ],
                            "type": "string"
                        }
                    },
                    {
                        "description": "If outcome sorting requested, then this determines which outcome to use\nfor rollup score sorting.",
                        "in": "query",
                        "name": "sort_outcome_id",
                        "schema": {
                            "format": "int64",
                            "type": "integer"
                        }
                    },
                    {
                        "description": "If sorting requested, then this allows changing the default sort order of\nascending to descending.",
                        "in": "query",
                        "name": "sort_order",
                        "schema": {
                            "enum": [
                                "asc",
                                "desc"
                            ],
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OutcomeRollupResponse"
                                }
                            }
                        },
                        "description": "Assessment Outcome Rollup Results and optional info (enabled via the \"include\" parameter)"
                    }
                },
                "summary": "Get outcome result rollups",
                "tags": [
                    "outcome_results"
                ]
            }
        },
        "/v1/courses/{course_id}/pages": {
            "get": {
                "deprecated": false,
                "description": "A paginated list of the wiki pages associated with a course or group",
                "operationId": "list_pages_courses",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Sort results by this field.",
                        "in": "query",
                        "name": "sort",
                        "schema": {
                            "enum": [
                                "title",
                                "created_at",
                                "updated_at"
                            ],
                            "type": "string"
                        }
                    },
                    {
                        "description": "The sorting order. Defaults to 'asc'.",
                        "in": "query",
                        "name": "order",
                        "schema": {
                            "enum": [
                                "asc",
                                "desc"
                            ],
                            "type": "string"
                        }
                    },
                    {
                        "description": "The partial title of the pages to match and return.",
                        "in": "query",
                        "name": "search_term",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "If true, include only published paqes. If false, exclude published\npages. If not present, do not filter on published status.",
                        "in": "query",
                        "name": "published",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/pageParam"
                    },
                    {
                        "$ref": "#/components/parameters/perPageParam"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Page"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "List pages",
                "tags": [
                    "pages"
                ]
            },
            "post": {
                "deprecated": false,
                "description": "Create a new wiki page",
                "operationId": "create_page_courses",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "properties": {
                                    "wiki_page[body]": {
                                        "description": "The content for the new page.",
                                        "type": "string"
                                    },
                                    "wiki_page[editing_roles]": {
                                        "description": "Which user roles are allowed to edit this page. Any combination\nof these roles is allowed (separated by commas).\n\n\"teachers\":: Allows editing by teachers in the course.\n\"students\":: Allows editing by students in the course.\n\"members\":: For group wikis, allows editing by members of the group.\n\"public\":: Allows editing by any user.",
                                        "enum": [
                                            "teachers",
                                            "students",
                                            "members",
                                            "public"
                                        ],
                                        "type": "string"
                                    },
                                    "wiki_page[front_page]": {
                                        "description": "Set an unhidden page as the front page (if true)",
                                        "type": "boolean"
                                    },
                                    "wiki_page[notify_of_update]": {
                                        "description": "Whether participants should be notified when this page changes.",
                                        "type": "boolean"
                                    },
                                    "wiki_page[published]": {
                                        "description": "Whether the page is published (true) or draft state (false).",
                                        "type": "boolean"
                                    },
                                    "wiki_page[title]": {
                                        "description": "The title for the new page.",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "wiki_page[title]"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Page"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Create page",
                "tags": [
                    "pages"
                ]
            }
        },
        "/v1/courses/{course_id}/pages/{url}": {
            "delete": {
                "deprecated": false,
                "description": "Delete a wiki page",
                "operationId": "delete_page_courses",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "url",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Page"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Delete page",
                "tags": [
                    "pages"
                ]
            },
            "get": {
                "deprecated": false,
                "description": "Retrieve the content of a wiki page",
                "operationId": "show_page_courses",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "url",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Page"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Show page",
                "tags": [
                    "pages"
                ]
            },
            "put": {
                "deprecated": false,
                "description": "Update the title or contents of a wiki page",
                "operationId": "update_create_page_courses",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "url",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "wiki_page[body]": {
                                        "description": "The content for the new page.",
                                        "type": "string"
                                    },
                                    "wiki_page[editing_roles]": {
                                        "description": "Which user roles are allowed to edit this page. Any combination\nof these roles is allowed (separated by commas).\n\n\"teachers\":: Allows editing by teachers in the course.\n\"students\":: Allows editing by students in the course.\n\"members\":: For group wikis, allows editing by members of the group.\n\"public\":: Allows editing by any user.",
                                        "enum": [
                                            "teachers",
                                            "students",
                                            "members",
                                            "public"
                                        ],
                                        "type": "string"
                                    },
                                    "wiki_page[front_page]": {
                                        "description": "Set an unhidden page as the front page (if true)",
                                        "type": "boolean"
                                    },
                                    "wiki_page[notify_of_update]": {
                                        "description": "Whether participants should be notified when this page changes.",
                                        "type": "boolean"
                                    },
                                    "wiki_page[published]": {
                                        "description": "Whether the page is published (true) or draft state (false).",
                                        "type": "boolean"
                                    },
                                    "wiki_page[title]": {
                                        "description": "The title for the new page. NOTE: changing a page's title will change its\nurl. The updated url will be returned in the result.",
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Page"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Update/create page",
                "tags": [
                    "pages"
                ]
            }
        },
        "/v1/courses/{course_id}/pages/{url}/duplicate": {
            "post": {
                "deprecated": false,
                "description": "Duplicate a wiki page",
                "operationId": "duplicate_page",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "url",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Page"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Duplicate page",
                "tags": [
                    "pages"
                ]
            }
        },
        "/v1/courses/{course_id}/pages/{url}/revisions": {
            "get": {
                "deprecated": false,
                "description": "A paginated list of the revisions of a page. Callers must have update rights on the page in order to see page history.",
                "operationId": "list_revisions_courses",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "url",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/pageParam"
                    },
                    {
                        "$ref": "#/components/parameters/perPageParam"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/PageRevision"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "List revisions",
                "tags": [
                    "pages"
                ]
            }
        },
        "/v1/courses/{course_id}/pages/{url}/revisions/latest": {
            "get": {
                "deprecated": false,
                "description": "Retrieve the metadata and optionally content of a revision of the page.\nNote that retrieving historic versions of pages requires edit rights.",
                "operationId": "show_revision_courses_latest",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "url",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "If set, exclude page content from results",
                        "in": "query",
                        "name": "summary",
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PageRevision"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Show revision",
                "tags": [
                    "pages"
                ]
            }
        },
        "/v1/courses/{course_id}/pages/{url}/revisions/{revision_id}": {
            "get": {
                "deprecated": false,
                "description": "Retrieve the metadata and optionally content of a revision of the page.\nNote that retrieving historic versions of pages requires edit rights.",
                "operationId": "show_revision_courses_revision_id",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "url",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "revision_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "If set, exclude page content from results",
                        "in": "query",
                        "name": "summary",
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PageRevision"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Show revision",
                "tags": [
                    "pages"
                ]
            },
            "post": {
                "deprecated": false,
                "description": "Revert a page to a prior revision.",
                "operationId": "revert_to_revision_courses",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "url",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The revision to revert to (use the\n{api:WikiPagesApiController#revisions List Revisions API} to see\navailable revisions)",
                        "in": "path",
                        "name": "revision_id",
                        "required": true,
                        "schema": {
                            "format": "int64",
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PageRevision"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Revert to revision",
                "tags": [
                    "pages"
                ]
            }
        },
        "/v1/courses/{course_id}/permissions": {
            "get": {
                "deprecated": false,
                "description": "Returns permission information for the calling user in the given course.\nSee also the {api:AccountsController#permissions Account} and\n{api:GroupsController#permissions Group} counterparts.",
                "operationId": "course_permission",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "List of permissions to check against the authenticated user.\nPermission names are documented in the {api:RoleOverridesController#add_role Create a role} endpoint.",
                        "explode": false,
                        "in": "query",
                        "name": "permissions",
                        "schema": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Permission"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Permissions",
                "tags": [
                    "courses"
                ]
            }
        },
        "/v1/courses/{course_id}/potential_collaborators": {
            "get": {
                "deprecated": false,
                "description": "A paginated list of the users who can potentially be added to a\ncollaboration in the given context.\n\nFor courses, this consists of all enrolled users.  For groups, it is comprised of the\ngroup members plus the admins of the course containing the group.",
                "operationId": "list_potential_members_courses",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/pageParam"
                    },
                    {
                        "$ref": "#/components/parameters/perPageParam"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/User"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "List potential members",
                "tags": [
                    "collaborations"
                ]
            }
        },
        "/v1/courses/{course_id}/preview_html": {
            "post": {
                "deprecated": false,
                "description": "Preview html content processed for this course",
                "operationId": "preview_processed_html_course",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "properties": {
                                    "html": {
                                        "description": "The html content to process",
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Preview processed html",
                "tags": [
                    "courses"
                ]
            }
        },
        "/v1/courses/{course_id}/quiz_extensions": {
            "post": {
                "deprecated": false,
                "description": "<b>Responses</b>\n\n* <b>200 OK</b> if the request was successful\n* <b>403 Forbidden</b> if you are not allowed to extend quizzes for this course",
                "operationId": "set_extensions_for_student_quiz_submissions",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "properties": {
                                    "extend_from_end_at": {
                                        "description": "The number of minutes to extend the quiz beyond the quiz's current\nending time. This is mutually exclusive to extend_from_now. This is\nlimited to 1440 minutes (24 hours)",
                                        "format": "int64",
                                        "type": "integer"
                                    },
                                    "extend_from_now": {
                                        "description": "The number of minutes to extend the quiz from the current time. This is\nmutually exclusive to extend_from_end_at. This is limited to 1440\nminutes (24 hours)",
                                        "format": "int64",
                                        "type": "integer"
                                    },
                                    "extra_attempts": {
                                        "description": "Number of times the student is allowed to re-take the quiz over the\nmultiple-attempt limit. This is limited to 1000 attempts or less.",
                                        "format": "int64",
                                        "type": "integer"
                                    },
                                    "extra_time": {
                                        "description": "The number of extra minutes to allow for all attempts. This will\nadd to the existing time limit on the submission. This is limited to\n10080 minutes (1 week)",
                                        "format": "int64",
                                        "type": "integer"
                                    },
                                    "manually_unlocked": {
                                        "description": "Allow the student to take the quiz even if it's locked for\neveryone else.",
                                        "type": "boolean"
                                    },
                                    "user_id": {
                                        "description": "The ID of the user we want to add quiz extensions for.",
                                        "format": "int64",
                                        "type": "integer"
                                    }
                                },
                                "required": [
                                    "user_id"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Set extensions for student quiz submissions",
                "tags": [
                    "course_quiz_extensions"
                ]
            }
        },
        "/v1/courses/{course_id}/quizzes": {
            "get": {
                "deprecated": false,
                "description": "Returns the paginated list of Quizzes in this course.",
                "operationId": "list_quizzes_in_course",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The partial title of the quizzes to match and return.",
                        "in": "query",
                        "name": "search_term",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/pageParam"
                    },
                    {
                        "$ref": "#/components/parameters/perPageParam"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Quiz"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "List quizzes in a course",
                "tags": [
                    "quizzes"
                ]
            },
            "post": {
                "deprecated": false,
                "description": "Create a new quiz for this course.",
                "operationId": "create_quiz",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "properties": {
                                    "quiz[access_code]": {
                                        "description": "Restricts access to the quiz with a password.\nFor no access code restriction, set to null.\nDefaults to null.",
                                        "type": "string"
                                    },
                                    "quiz[allowed_attempts]": {
                                        "description": "Number of times a student is allowed to take a quiz.\nSet to -1 for unlimited attempts.\nDefaults to 1.",
                                        "format": "int64",
                                        "type": "integer"
                                    },
                                    "quiz[assignment_group_id]": {
                                        "description": "The assignment group id to put the assignment in. Defaults to the top\nassignment group in the course. Only valid if the quiz is graded, i.e. if\nquiz_type is \"assignment\" or \"graded_survey\".",
                                        "format": "int64",
                                        "type": "integer"
                                    },
                                    "quiz[cant_go_back]": {
                                        "description": "Only valid if one_question_at_a_time=true\nIf true, questions are locked after answering.\nDefaults to false.",
                                        "type": "boolean"
                                    },
                                    "quiz[description]": {
                                        "description": "A description of the quiz.",
                                        "type": "string"
                                    },
                                    "quiz[due_at]": {
                                        "description": "The day/time the quiz is due.\nAccepts times in ISO 8601 format, e.g. 2011-10-21T18:48Z.",
                                        "format": "date-time",
                                        "type": "string"
                                    },
                                    "quiz[hide_correct_answers_at]": {
                                        "description": "Only valid if show_correct_answers=true\nIf set, the correct answers will stop being visible once this date has\npassed. Otherwise, the correct answers will be visible indefinitely.",
                                        "format": "date-time",
                                        "type": "string"
                                    },
                                    "quiz[hide_results]": {
                                        "description": "Dictates whether or not quiz results are hidden from students.\nIf null, students can see their results after any attempt.\nIf \"always\", students can never see their results.\nIf \"until_after_last_attempt\", students can only see results after their\nlast attempt. (Only valid if allowed_attempts > 1). Defaults to null.",
                                        "enum": [
                                            "always",
                                            "until_after_last_attempt"
                                        ],
                                        "type": "string"
                                    },
                                    "quiz[ip_filter]": {
                                        "description": "Restricts access to the quiz to computers in a specified IP range.\nFilters can be a comma-separated list of addresses, or an address followed by a mask\n\nExamples:\n  \"192.168.217.1\"\n  \"192.168.217.1/24\"\n  \"192.168.217.1/255.255.255.0\"\n\nFor no IP filter restriction, set to null.\nDefaults to null.",
                                        "type": "string"
                                    },
                                    "quiz[lock_at]": {
                                        "description": "The day/time the quiz is locked for students.\nAccepts times in ISO 8601 format, e.g. 2011-10-21T18:48Z.",
                                        "format": "date-time",
                                        "type": "string"
                                    },
                                    "quiz[one_question_at_a_time]": {
                                        "description": "If true, shows quiz to student one question at a time.\nDefaults to false.",
                                        "type": "boolean"
                                    },
                                    "quiz[one_time_results]": {
                                        "description": "Whether students should be prevented from viewing their quiz results past\nthe first time (right after they turn the quiz in.)\nOnly valid if \"hide_results\" is not set to \"always\".\nDefaults to false.",
                                        "type": "boolean"
                                    },
                                    "quiz[only_visible_to_overrides]": {
                                        "description": "Whether this quiz is only visible to overrides (Only useful if\n'differentiated assignments' account setting is on)\nDefaults to false.",
                                        "type": "boolean"
                                    },
                                    "quiz[published]": {
                                        "description": "Whether the quiz should have a draft state of published or unpublished.\nNOTE: If students have started taking the quiz, or there are any\nsubmissions for the quiz, you may not unpublish a quiz and will recieve\nan error.",
                                        "type": "boolean"
                                    },
                                    "quiz[quiz_type]": {
                                        "description": "The type of quiz.",
                                        "enum": [
                                            "practice_quiz",
                                            "assignment",
                                            "graded_survey",
                                            "survey"
                                        ],
                                        "type": "string"
                                    },
                                    "quiz[scoring_policy]": {
                                        "description": "Required and only valid if allowed_attempts > 1.\nScoring policy for a quiz that students can take multiple times.\nDefaults to \"keep_highest\".",
                                        "enum": [
                                            "keep_highest",
                                            "keep_latest"
                                        ],
                                        "type": "string"
                                    },
                                    "quiz[show_correct_answers]": {
                                        "description": "Only valid if hide_results=null\nIf false, hides correct answers from students when quiz results are viewed.\nDefaults to true.",
                                        "type": "boolean"
                                    },
                                    "quiz[show_correct_answers_at]": {
                                        "description": "Only valid if show_correct_answers=true\nIf set, the correct answers will be visible by students only after this\ndate, otherwise the correct answers are visible once the student hands in\ntheir quiz submission.",
                                        "format": "date-time",
                                        "type": "string"
                                    },
                                    "quiz[show_correct_answers_last_attempt]": {
                                        "description": "Only valid if show_correct_answers=true and allowed_attempts > 1\nIf true, hides correct answers from students when quiz results are viewed\nuntil they submit the last attempt for the quiz.\nDefaults to false.",
                                        "type": "boolean"
                                    },
                                    "quiz[shuffle_answers]": {
                                        "description": "If true, quiz answers for multiple choice questions will be randomized for\neach student. Defaults to false.",
                                        "type": "boolean"
                                    },
                                    "quiz[time_limit]": {
                                        "description": "Time limit to take this quiz, in minutes. Set to null for no time limit.\nDefaults to null.",
                                        "format": "int64",
                                        "type": "integer"
                                    },
                                    "quiz[title]": {
                                        "description": "The quiz title.",
                                        "type": "string"
                                    },
                                    "quiz[unlock_at]": {
                                        "description": "The day/time the quiz is unlocked for students.\nAccepts times in ISO 8601 format, e.g. 2011-10-21T18:48Z.",
                                        "format": "date-time",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "quiz[title]"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Quiz"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Create a quiz",
                "tags": [
                    "quizzes"
                ]
            }
        },
        "/v1/courses/{course_id}/quizzes/assignment_overrides": {
            "get": {
                "deprecated": false,
                "description": "Retrieve the actual due-at, unlock-at, and available-at dates for quizzes\nbased on the assignment overrides active for the current API user.",
                "operationId": "retrieve_assignment_overridden_dates_for_quizzes",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "An array of quiz IDs. If omitted, overrides for all quizzes available to\nthe operating user will be returned.",
                        "explode": false,
                        "in": "query",
                        "name": "quiz_assignment_overrides[0][quiz_ids]",
                        "schema": {
                            "items": {
                                "type": "integer"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/QuizAssignmentOverrideSetContainer"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Retrieve assignment-overridden dates for quizzes",
                "tags": [
                    "quiz_assignment_overrides"
                ]
            }
        },
        "/v1/courses/{course_id}/quizzes/{id}": {
            "delete": {
                "deprecated": false,
                "operationId": "delete_quiz",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Quiz"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Delete a quiz",
                "tags": [
                    "quizzes"
                ]
            },
            "get": {
                "deprecated": false,
                "description": "Returns the quiz with the given id.",
                "operationId": "get_single_quiz",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Quiz"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Get a single quiz",
                "tags": [
                    "quizzes"
                ]
            },
            "put": {
                "deprecated": false,
                "description": "Modify an existing quiz. See the documentation for quiz creation.\n\nAdditional arguments:",
                "operationId": "edit_quiz",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "quiz[notify_of_update]": {
                                        "description": "If true, notifies users that the quiz has changed.\nDefaults to true",
                                        "type": "boolean"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Quiz"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Edit a quiz",
                "tags": [
                    "quizzes"
                ]
            }
        },
        "/v1/courses/{course_id}/quizzes/{id}/reorder": {
            "post": {
                "deprecated": false,
                "description": "Change order of the quiz questions or groups within the quiz\n\n<b>204 No Content</b> response code is returned if the reorder was successful.",
                "operationId": "reorder_quiz_items",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "properties": {
                                    "order[id]": {
                                        "description": "The associated item's unique identifier",
                                        "items": {
                                            "type": "integer"
                                        },
                                        "type": "array"
                                    },
                                    "order[type]": {
                                        "description": "The type of item is either 'question' or 'group'",
                                        "items": {
                                            "type": "string",
                                            "enum": [
                                                "question",
                                                "group"
                                            ]
                                        },
                                        "type": "array"
                                    }
                                },
                                "required": [
                                    "order[id]"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Reorder quiz items",
                "tags": [
                    "quizzes"
                ]
            }
        },
        "/v1/courses/{course_id}/quizzes/{id}/submission_users/message": {
            "post": {
                "deprecated": false,
                "description": "{\n  \"body\": {\n    \"type\": \"string\",\n    \"description\": \"message body of the conversation to be created\",\n    \"example\": \"Please take the quiz.\"\n  },\n  \"recipients\": {\n    \"type\": \"string\",\n    \"description\": \"Who to send the message to. May be either 'submitted' or 'unsubmitted'\",\n    \"example\": \"submitted\"\n  },\n  \"subject\": {\n    \"type\": \"string\",\n    \"description\": \"Subject of the new Conversation created\",\n    \"example\": \"ATTN: Quiz 101 Students\"\n  }\n}",
                "operationId": "send_message_to_unsubmitted_or_submitted_users_for_quiz",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "properties": {
                                    "conversations": {
                                        "description": "- Body and recipients to send the message to."
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Send a message to unsubmitted or submitted users for the quiz",
                "tags": [
                    "quiz_submission_user_list"
                ]
            }
        },
        "/v1/courses/{course_id}/quizzes/{id}/validate_access_code": {
            "post": {
                "deprecated": false,
                "description": "Accepts an access code and returns a boolean indicating whether that access code is correct",
                "operationId": "validate_quiz_access_code",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "properties": {
                                    "access_code": {
                                        "description": "The access code being validated",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "access_code"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "boolean"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Validate quiz access code",
                "tags": [
                    "quizzes"
                ]
            }
        },
        "/v1/courses/{course_id}/quizzes/{quiz_id}/extensions": {
            "post": {
                "deprecated": false,
                "description": "<b>Responses</b>\n\n* <b>200 OK</b> if the request was successful\n* <b>403 Forbidden</b> if you are not allowed to extend quizzes for this course",
                "operationId": "set_extensions_for_student_quiz",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "quiz_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "properties": {
                                    "quiz_extensions[extend_from_end_at]": {
                                        "description": "The number of minutes to extend the quiz beyond the quiz's current ending time. This is mutually exclusive to extend_from_now. This is limited to 1440 minutes (24 hours)",
                                        "items": {
                                            "type": "integer"
                                        },
                                        "type": "array"
                                    },
                                    "quiz_extensions[extend_from_now]": {
                                        "description": "The number of minutes to extend the quiz from the current time. This is\nmutually exclusive to extend_from_end_at. This is limited to 1440\nminutes (24 hours)",
                                        "items": {
                                            "type": "integer"
                                        },
                                        "type": "array"
                                    },
                                    "quiz_extensions[extra_attempts]": {
                                        "description": "Number of times the student is allowed to re-take the quiz over the\nmultiple-attempt limit. This is limited to 1000 attempts or less.",
                                        "items": {
                                            "type": "integer"
                                        },
                                        "type": "array"
                                    },
                                    "quiz_extensions[extra_time]": {
                                        "description": "The number of extra minutes to allow for all attempts. This will\nadd to the existing time limit on the submission. This is limited to\n10080 minutes (1 week)",
                                        "items": {
                                            "type": "integer"
                                        },
                                        "type": "array"
                                    },
                                    "quiz_extensions[manually_unlocked]": {
                                        "description": "Allow the student to take the quiz even if it's locked for\neveryone else.",
                                        "items": {
                                            "type": "boolean"
                                        },
                                        "type": "array"
                                    },
                                    "quiz_extensions[user_id]": {
                                        "description": "The ID of the user we want to add quiz extensions for.",
                                        "items": {
                                            "type": "integer"
                                        },
                                        "type": "array"
                                    }
                                },
                                "required": [
                                    "quiz_extensions[user_id]"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Set extensions for student quiz submissions",
                "tags": [
                    "quiz_extensions"
                ]
            }
        },
        "/v1/courses/{course_id}/quizzes/{quiz_id}/groups": {
            "post": {
                "deprecated": false,
                "description": "Create a new question group for this quiz\n\n<b>201 Created</b> response code is returned if the creation was successful.",
                "operationId": "create_question_group",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "quiz_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "properties": {
                                    "quiz_groups[assessment_question_bank_id]": {
                                        "description": "The id of the assessment question bank to pull questions from.",
                                        "items": {
                                            "type": "integer"
                                        },
                                        "type": "array"
                                    },
                                    "quiz_groups[name]": {
                                        "description": "The name of the question group.",
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "quiz_groups[pick_count]": {
                                        "description": "The number of questions to randomly select for this group.",
                                        "items": {
                                            "type": "integer"
                                        },
                                        "type": "array"
                                    },
                                    "quiz_groups[question_points]": {
                                        "description": "The number of points to assign to each question in the group.",
                                        "items": {
                                            "type": "integer"
                                        },
                                        "type": "array"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Create a question group",
                "tags": [
                    "quiz_question_groups"
                ]
            }
        },
        "/v1/courses/{course_id}/quizzes/{quiz_id}/groups/{id}": {
            "delete": {
                "deprecated": false,
                "description": "Delete a question group\n\n<b>204 No Content<b> response code is returned if the deletion was successful.",
                "operationId": "delete_question_group",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "quiz_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Delete a question group",
                "tags": [
                    "quiz_question_groups"
                ]
            },
            "get": {
                "deprecated": false,
                "description": "Returns details of the quiz group with the given id.",
                "operationId": "get_single_quiz_group",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "quiz_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/QuizGroup"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Get a single quiz group",
                "tags": [
                    "quiz_question_groups"
                ]
            },
            "put": {
                "deprecated": false,
                "description": "Update a question group",
                "operationId": "update_question_group",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "quiz_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "quiz_groups[name]": {
                                        "description": "The name of the question group.",
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "quiz_groups[pick_count]": {
                                        "description": "The number of questions to randomly select for this group.",
                                        "items": {
                                            "type": "integer"
                                        },
                                        "type": "array"
                                    },
                                    "quiz_groups[question_points]": {
                                        "description": "The number of points to assign to each question in the group.",
                                        "items": {
                                            "type": "integer"
                                        },
                                        "type": "array"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Update a question group",
                "tags": [
                    "quiz_question_groups"
                ]
            }
        },
        "/v1/courses/{course_id}/quizzes/{quiz_id}/groups/{id}/reorder": {
            "post": {
                "deprecated": false,
                "description": "Change the order of the quiz questions within the group\n\n<b>204 No Content<b> response code is returned if the reorder was successful.",
                "operationId": "reorder_question_groups",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "quiz_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "properties": {
                                    "order[id]": {
                                        "description": "The associated item's unique identifier",
                                        "items": {
                                            "type": "integer"
                                        },
                                        "type": "array"
                                    },
                                    "order[type]": {
                                        "description": "The type of item is always 'question' for a group",
                                        "items": {
                                            "type": "string",
                                            "enum": [
                                                "question"
                                            ]
                                        },
                                        "type": "array"
                                    }
                                },
                                "required": [
                                    "order[id]"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Reorder question groups",
                "tags": [
                    "quiz_question_groups"
                ]
            }
        },
        "/v1/courses/{course_id}/quizzes/{quiz_id}/ip_filters": {
            "get": {
                "deprecated": false,
                "description": "Get a list of available IP filters for this Quiz.\n\n<b>200 OK</b> response code is returned if the request was successful.",
                "operationId": "get_available_quiz_ip_filters",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "quiz_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Get available quiz IP filters.",
                "tags": [
                    "quiz_ip_filters"
                ]
            }
        },
        "/v1/courses/{course_id}/quizzes/{quiz_id}/questions": {
            "get": {
                "deprecated": false,
                "description": "Returns the paginated list of QuizQuestions in this quiz.",
                "operationId": "list_questions_in_quiz_or_submission",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "quiz_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "If specified, the endpoint will return the questions that were presented\nfor that submission. This is useful if the quiz has been modified after\nthe submission was created and the latest quiz version's set of questions\ndoes not match the submission's.\nNOTE: you must specify quiz_submission_attempt as well if you specify this\nparameter.",
                        "in": "query",
                        "name": "quiz_submission_id",
                        "schema": {
                            "format": "int64",
                            "type": "integer"
                        }
                    },
                    {
                        "description": "The attempt of the submission you want the questions for.",
                        "in": "query",
                        "name": "quiz_submission_attempt",
                        "schema": {
                            "format": "int64",
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/pageParam"
                    },
                    {
                        "$ref": "#/components/parameters/perPageParam"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/QuizQuestion"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "List questions in a quiz or a submission",
                "tags": [
                    "quiz_questions"
                ]
            },
            "post": {
                "deprecated": false,
                "description": "Create a new quiz question for this quiz",
                "operationId": "create_single_quiz_question",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "quiz_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "properties": {
                                    "question[answers]": {
                                        "description": "no description"
                                    },
                                    "question[correct_comments]": {
                                        "description": "The comment to display if the student answers the question correctly.",
                                        "type": "string"
                                    },
                                    "question[incorrect_comments]": {
                                        "description": "The comment to display if the student answers incorrectly.",
                                        "type": "string"
                                    },
                                    "question[neutral_comments]": {
                                        "description": "The comment to display regardless of how the student answered.",
                                        "type": "string"
                                    },
                                    "question[points_possible]": {
                                        "description": "The maximum amount of points received for answering this question correctly.",
                                        "format": "int64",
                                        "type": "integer"
                                    },
                                    "question[position]": {
                                        "description": "The order in which the question will be displayed in the quiz in relation to other questions.",
                                        "format": "int64",
                                        "type": "integer"
                                    },
                                    "question[question_name]": {
                                        "description": "The name of the question.",
                                        "type": "string"
                                    },
                                    "question[question_text]": {
                                        "description": "The text of the question.",
                                        "type": "string"
                                    },
                                    "question[question_type]": {
                                        "description": "The type of question. Multiple optional fields depend upon the type of question to be used.",
                                        "enum": [
                                            "calculated_question",
                                            "essay_question",
                                            "file_upload_question",
                                            "fill_in_multiple_blanks_question",
                                            "matching_question",
                                            "multiple_answers_question",
                                            "multiple_choice_question",
                                            "multiple_dropdowns_question",
                                            "numerical_question",
                                            "short_answer_question",
                                            "text_only_question",
                                            "true_false_question"
                                        ],
                                        "type": "string"
                                    },
                                    "question[quiz_group_id]": {
                                        "description": "The id of the quiz group to assign the question to.",
                                        "format": "int64",
                                        "type": "integer"
                                    },
                                    "question[text_after_answers]": {
                                        "description": "no description",
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/QuizQuestion"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Create a single quiz question",
                "tags": [
                    "quiz_questions"
                ]
            }
        },
        "/v1/courses/{course_id}/quizzes/{quiz_id}/questions/{id}": {
            "delete": {
                "deprecated": false,
                "description": "<b>204 No Content</b> response code is returned if the deletion was successful.",
                "operationId": "delete_quiz_question",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The associated quiz's unique identifier",
                        "in": "path",
                        "name": "quiz_id",
                        "required": true,
                        "schema": {
                            "format": "int64",
                            "type": "integer"
                        }
                    },
                    {
                        "description": "The quiz question's unique identifier",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "format": "int64",
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Delete a quiz question",
                "tags": [
                    "quiz_questions"
                ]
            },
            "get": {
                "deprecated": false,
                "description": "Returns the quiz question with the given id",
                "operationId": "get_single_quiz_question",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "quiz_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The quiz question unique identifier.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "format": "int64",
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/QuizQuestion"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Get a single quiz question",
                "tags": [
                    "quiz_questions"
                ]
            },
            "put": {
                "deprecated": false,
                "description": "Updates an existing quiz question for this quiz",
                "operationId": "update_existing_quiz_question",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The associated quiz's unique identifier.",
                        "in": "path",
                        "name": "quiz_id",
                        "required": true,
                        "schema": {
                            "format": "int64",
                            "type": "integer"
                        }
                    },
                    {
                        "description": "The quiz question's unique identifier.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "format": "int64",
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "question[answers]": {
                                        "description": "no description"
                                    },
                                    "question[correct_comments]": {
                                        "description": "The comment to display if the student answers the question correctly.",
                                        "type": "string"
                                    },
                                    "question[incorrect_comments]": {
                                        "description": "The comment to display if the student answers incorrectly.",
                                        "type": "string"
                                    },
                                    "question[neutral_comments]": {
                                        "description": "The comment to display regardless of how the student answered.",
                                        "type": "string"
                                    },
                                    "question[points_possible]": {
                                        "description": "The maximum amount of points received for answering this question correctly.",
                                        "format": "int64",
                                        "type": "integer"
                                    },
                                    "question[position]": {
                                        "description": "The order in which the question will be displayed in the quiz in relation to other questions.",
                                        "format": "int64",
                                        "type": "integer"
                                    },
                                    "question[question_name]": {
                                        "description": "The name of the question.",
                                        "type": "string"
                                    },
                                    "question[question_text]": {
                                        "description": "The text of the question.",
                                        "type": "string"
                                    },
                                    "question[question_type]": {
                                        "description": "The type of question. Multiple optional fields depend upon the type of question to be used.",
                                        "enum": [
                                            "calculated_question",
                                            "essay_question",
                                            "file_upload_question",
                                            "fill_in_multiple_blanks_question",
                                            "matching_question",
                                            "multiple_answers_question",
                                            "multiple_choice_question",
                                            "multiple_dropdowns_question",
                                            "numerical_question",
                                            "short_answer_question",
                                            "text_only_question",
                                            "true_false_question"
                                        ],
                                        "type": "string"
                                    },
                                    "question[quiz_group_id]": {
                                        "description": "The id of the quiz group to assign the question to.",
                                        "format": "int64",
                                        "type": "integer"
                                    },
                                    "question[text_after_answers]": {
                                        "description": "no description",
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/QuizQuestion"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Update an existing quiz question",
                "tags": [
                    "quiz_questions"
                ]
            }
        },
        "/v1/courses/{course_id}/quizzes/{quiz_id}/reports": {
            "get": {
                "deprecated": false,
                "description": "Returns a list of all available reports.",
                "operationId": "retrieve_all_quiz_reports",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "quiz_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Whether to retrieve reports that consider all the submissions or only\nthe most recent. Defaults to false, ignored for item_analysis reports.",
                        "in": "query",
                        "name": "includes_all_versions",
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/QuizReport"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Retrieve all quiz reports",
                "tags": [
                    "quiz_reports"
                ]
            },
            "post": {
                "deprecated": false,
                "description": "Create and return a new report for this quiz. If a previously\ngenerated report matches the arguments and is still current (i.e.\nthere have been no new submissions), it will be returned.\n\n*Responses*\n\n* <code>400 Bad Request</code> if the specified report type is invalid\n* <code>409 Conflict</code> if a quiz report of the specified type is already being\n  generated",
                "operationId": "create_quiz_report",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "quiz_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "properties": {
                                    "include": {
                                        "description": "Whether the output should include documents for the file and/or progress objects associated with this report. (Note: JSON-API only)",
                                        "enum": [
                                            "file",
                                            "progress"
                                        ],
                                        "type": "string"
                                    },
                                    "quiz_report[includes_all_versions]": {
                                        "description": "Whether the report should consider all submissions or only the most\nrecent. Defaults to false, ignored for item_analysis.",
                                        "type": "boolean"
                                    },
                                    "quiz_report[report_type]": {
                                        "description": "The type of report to be generated.",
                                        "enum": [
                                            "student_analysis",
                                            "item_analysis"
                                        ],
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "quiz_report[report_type]"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/QuizReport"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Create a quiz report",
                "tags": [
                    "quiz_reports"
                ]
            }
        },
        "/v1/courses/{course_id}/quizzes/{quiz_id}/reports/{id}": {
            "delete": {
                "deprecated": false,
                "description": "This API allows you to cancel a previous request you issued for a report to\nbe generated. Or in the case of an already generated report, you'd like to\nremove it, perhaps to generate it another time with an updated version that\nprovides new features.\n\nYou must check the report's generation status before attempting to use this\ninterface. See the \"workflow_state\" property of the QuizReport's Progress\nobject for more information. Only when the progress reports itself in a\n\"queued\" state can the generation be aborted.\n\n*Responses*\n\n- <code>204 No Content</code> if your request was accepted\n- <code>422 Unprocessable Entity</code> if the report is not being generated\n  or can not be aborted at this stage",
                "operationId": "abort_generation_of_report_or_remove_previously_generated_one",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "quiz_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Abort the generation of a report, or remove a previously generated one",
                "tags": [
                    "quiz_reports"
                ]
            },
            "get": {
                "deprecated": false,
                "description": "Returns the data for a single quiz report.",
                "operationId": "get_quiz_report",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "quiz_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Whether the output should include documents for the file and/or progress\nobjects associated with this report. (Note: JSON-API only)",
                        "in": "query",
                        "name": "include",
                        "schema": {
                            "enum": [
                                "file",
                                "progress"
                            ],
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/QuizReport"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Get a quiz report",
                "tags": [
                    "quiz_reports"
                ]
            }
        },
        "/v1/courses/{course_id}/quizzes/{quiz_id}/statistics": {
            "get": {
                "deprecated": false,
                "description": "This endpoint provides statistics for all quiz versions, or for a specific\nquiz version, in which case the output is guaranteed to represent the\n_latest_ and most current version of the quiz.\n\n<b>200 OK</b> response code is returned if the request was successful.",
                "operationId": "fetching_latest_quiz_statistics",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "quiz_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Whether the statistics report should include all submissions attempts.",
                        "in": "query",
                        "name": "all_versions",
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Fetching the latest quiz statistics",
                "tags": [
                    "quiz_statistics"
                ]
            }
        },
        "/v1/courses/{course_id}/quizzes/{quiz_id}/submission": {
            "get": {
                "deprecated": false,
                "description": "Get the submission for this quiz for the current user.\n\n<b>200 OK</b> response code is returned if the request was successful.",
                "operationId": "get_quiz_submission",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "quiz_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Associations to include with the quiz submission.",
                        "explode": false,
                        "in": "query",
                        "name": "include",
                        "schema": {
                            "items": {
                                "type": "string",
                                "enum": [
                                    "submission",
                                    "quiz",
                                    "user"
                                ]
                            },
                            "type": "array"
                        },
                        "style": "form"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Get the quiz submission.",
                "tags": [
                    "quiz_submissions"
                ]
            }
        },
        "/v1/courses/{course_id}/quizzes/{quiz_id}/submissions": {
            "get": {
                "deprecated": false,
                "description": "Get a list of all submissions for this quiz. Users who can view or manage\ngrades for a course will have submissions from multiple users returned. A\nuser who can only submit will have only their own submissions returned. When\na user has an in-progress submission, only that submission is returned. When\nthere isn't an in-progress quiz_submission, all completed submissions,\nincluding previous attempts, are returned.\n\n<b>200 OK</b> response code is returned if the request was successful.",
                "operationId": "get_all_quiz_submissions",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "quiz_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Associations to include with the quiz submission.",
                        "explode": false,
                        "in": "query",
                        "name": "include",
                        "schema": {
                            "items": {
                                "type": "string",
                                "enum": [
                                    "submission",
                                    "quiz",
                                    "user"
                                ]
                            },
                            "type": "array"
                        },
                        "style": "form"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Get all quiz submissions.",
                "tags": [
                    "quiz_submissions"
                ]
            },
            "post": {
                "deprecated": false,
                "description": "Start taking a Quiz by creating a QuizSubmission which you can use to answer\nquestions and submit your answers.\n\n<b>Responses</b>\n\n* <b>200 OK</b> if the request was successful\n* <b>400 Bad Request</b> if the quiz is locked\n* <b>403 Forbidden</b> if an invalid access code is specified\n* <b>403 Forbidden</b> if the Quiz's IP filter restriction does not pass\n* <b>409 Conflict</b> if a QuizSubmission already exists for this user and quiz",
                "operationId": "create_quiz_submission_start_quiz_taking_session",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "quiz_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "properties": {
                                    "access_code": {
                                        "description": "Access code for the Quiz, if any.",
                                        "type": "string"
                                    },
                                    "preview": {
                                        "description": "Whether this should be a preview QuizSubmission and not count towards\nthe user's course record. Teachers only.",
                                        "type": "boolean"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Create the quiz submission (start a quiz-taking session)",
                "tags": [
                    "quiz_submissions"
                ]
            }
        },
        "/v1/courses/{course_id}/quizzes/{quiz_id}/submissions/self/files": {
            "post": {
                "deprecated": false,
                "description": "Associate a new quiz submission file\n\nThis API endpoint is the first step in uploading a quiz submission file.\nSee the {file:file_uploads.html File Upload Documentation} for details on\nthe file upload workflow as these parameters are interpreted as per the\ndocumentation there.",
                "operationId": "upload_file_quiz_submission",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "quiz_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "properties": {
                                    "name": {
                                        "description": "The name of the quiz submission file",
                                        "type": "string"
                                    },
                                    "on_duplicate": {
                                        "description": "How to handle duplicate names",
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Upload a file",
                "tags": [
                    "quiz_submission_files"
                ]
            }
        },
        "/v1/courses/{course_id}/quizzes/{quiz_id}/submissions/{id}": {
            "get": {
                "deprecated": false,
                "description": "Get a single quiz submission.\n\n<b>200 OK</b> response code is returned if the request was successful.",
                "operationId": "get_single_quiz_submission",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "quiz_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Associations to include with the quiz submission.",
                        "explode": false,
                        "in": "query",
                        "name": "include",
                        "schema": {
                            "items": {
                                "type": "string",
                                "enum": [
                                    "submission",
                                    "quiz",
                                    "user"
                                ]
                            },
                            "type": "array"
                        },
                        "style": "form"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Get a single quiz submission.",
                "tags": [
                    "quiz_submissions"
                ]
            },
            "put": {
                "deprecated": false,
                "description": "Update the amount of points a student has scored for questions they've\nanswered, provide comments for the student about their answer(s), or simply\nfudge the total score by a specific amount of points.\n\n<b>Responses</b>\n\n* <b>200 OK</b> if the request was successful\n* <b>403 Forbidden</b> if you are not a teacher in this course\n* <b>400 Bad Request</b> if the attempt parameter is missing or invalid\n* <b>400 Bad Request</b> if the specified QS attempt is not yet complete",
                "operationId": "update_student_question_scores_and_comments",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "quiz_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "quiz_submissions[attempt]": {
                                        "description": "The attempt number of the quiz submission that should be updated. This\nattempt MUST be already completed.",
                                        "items": {
                                            "type": "integer"
                                        },
                                        "type": "array"
                                    },
                                    "quiz_submissions[fudge_points]": {
                                        "description": "Amount of positive or negative points to fudge the total score by.",
                                        "items": {
                                            "type": "number"
                                        },
                                        "type": "array"
                                    },
                                    "quiz_submissions[questions]": {
                                        "description": "A set of scores and comments for each question answered by the student.\nThe keys are the question IDs, and the values are hashes of `score` and\n`comment` entries. See {Appendix: Manual Scoring} for more on this\nparameter.",
                                        "items": {
                                            "$ref": "#/components/schemas/QuizSubmission"
                                        },
                                        "type": "array"
                                    }
                                },
                                "required": [
                                    "quiz_submissions[attempt]"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Update student question scores and comments.",
                "tags": [
                    "quiz_submissions"
                ]
            }
        },
        "/v1/courses/{course_id}/quizzes/{quiz_id}/submissions/{id}/complete": {
            "post": {
                "deprecated": false,
                "description": "Complete the quiz submission by marking it as complete and grading it. When\nthe quiz submission has been marked as complete, no further modifications\nwill be allowed.\n\n<b>Responses</b>\n\n* <b>200 OK</b> if the request was successful\n* <b>403 Forbidden</b> if an invalid access code is specified\n* <b>403 Forbidden</b> if the Quiz's IP filter restriction does not pass\n* <b>403 Forbidden</b> if an invalid token is specified\n* <b>400 Bad Request</b> if the QS is already complete\n* <b>400 Bad Request</b> if the attempt parameter is missing\n* <b>400 Bad Request</b> if the attempt parameter is not the latest attempt",
                "operationId": "complete_quiz_submission_turn_it_in",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "quiz_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "properties": {
                                    "access_code": {
                                        "description": "Access code for the Quiz, if any.",
                                        "type": "string"
                                    },
                                    "attempt": {
                                        "description": "The attempt number of the quiz submission that should be completed. Note\nthat this must be the latest attempt index, as earlier attempts can not\nbe modified.",
                                        "format": "int64",
                                        "type": "integer"
                                    },
                                    "validation_token": {
                                        "description": "The unique validation token you received when this Quiz Submission was\ncreated.",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "attempt",
                                    "validation_token"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Complete the quiz submission (turn it in).",
                "tags": [
                    "quiz_submissions"
                ]
            }
        },
        "/v1/courses/{course_id}/quizzes/{quiz_id}/submissions/{id}/events": {
            "get": {
                "deprecated": false,
                "description": "Retrieve the set of events captured during a specific submission attempt.",
                "operationId": "retrieve_captured_events",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "quiz_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The specific submission attempt to look up the events for. If unspecified,\nthe latest attempt will be used.",
                        "in": "query",
                        "name": "attempt",
                        "schema": {
                            "format": "int64",
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Retrieve captured events",
                "tags": [
                    "quiz_submission_events"
                ]
            },
            "post": {
                "deprecated": false,
                "description": "Store a set of events which were captured during a quiz taking session.\n\nOn success, the response will be 204 No Content with an empty body.",
                "operationId": "submit_captured_events",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "quiz_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "properties": {
                                    "quiz_submission_events": {
                                        "description": "The submission events to be recorded",
                                        "items": {
                                            "items": {
                                                "type": "object"
                                            },
                                            "type": "array"
                                        },
                                        "type": "array"
                                    }
                                },
                                "required": [
                                    "quiz_submission_events"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Submit captured events",
                "tags": [
                    "quiz_submission_events"
                ]
            }
        },
        "/v1/courses/{course_id}/quizzes/{quiz_id}/submissions/{id}/time": {
            "get": {
                "deprecated": false,
                "description": "Get the current timing data for the quiz attempt, both the end_at timestamp\nand the time_left parameter.\n\n<b>Responses</b>\n\n* <b>200 OK</b> if the request was successful",
                "operationId": "get_current_quiz_submission_times",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "quiz_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Get current quiz submission times.",
                "tags": [
                    "quiz_submissions"
                ]
            }
        },
        "/v1/courses/{course_id}/recent_students": {
            "get": {
                "deprecated": false,
                "description": "Returns the paginated list of users in this course, ordered by how recently they have\nlogged in. The records include the 'last_login' field which contains\na timestamp of the last time that user logged into canvas.  The querying\nuser must have the 'View usage reports' permission.",
                "operationId": "list_recently_logged_in_students",
                "parameters": [
                    {
                        "in": "query",
                        "name": "page",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "minimum": 0
                        },
                        "description": "The bookmark leading to the next paginated page. This needs to be parsed from the response header ('Link' field)."
                    },
                    {
                        "in": "query",
                        "name": "per_page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 100,
                            "default": 10
                        },
                        "description": "The numbers of items to return."
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/pageParam"
                    },
                    {
                        "$ref": "#/components/parameters/perPageParam"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/User"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "List recently logged in students",
                "tags": [
                    "courses"
                ]
            }
        },
        "/v1/courses/{course_id}/reset_content": {
            "post": {
                "deprecated": false,
                "description": "Deletes the current course, and creates a new equivalent course with\nno content, but all sections and users moved over.",
                "operationId": "reset_course",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Course"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Reset a course",
                "tags": [
                    "courses"
                ]
            }
        },
        "/v1/courses/{course_id}/root_outcome_group": {
            "get": {
                "deprecated": false,
                "description": "Convenience redirect to find the root outcome group for a particular\ncontext. Will redirect to the appropriate outcome group's URL.",
                "operationId": "redirect_to_root_outcome_group_for_context_courses",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Redirect to root outcome group for context",
                "tags": [
                    "outcome_groups"
                ]
            }
        },
        "/v1/courses/{course_id}/rubrics": {
            "get": {
                "deprecated": false,
                "description": "Returns the paginated list of active rubrics for the current context.",
                "operationId": "list_rubrics_courses",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/pageParam"
                    },
                    {
                        "$ref": "#/components/parameters/perPageParam"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "List rubrics",
                "tags": [
                    "rubrics"
                ]
            }
        },
        "/v1/courses/{course_id}/rubrics/{id}": {
            "get": {
                "deprecated": false,
                "description": "Returns the rubric with the given id.",
                "operationId": "get_single_rubric_courses",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "If included, the type of associated rubric assessments to return. If not included, assessments will be omitted.",
                        "in": "query",
                        "name": "include",
                        "schema": {
                            "enum": [
                                "assessments",
                                "graded_assessments",
                                "peer_assessments"
                            ],
                            "type": "string"
                        }
                    },
                    {
                        "description": "Applicable only if assessments are being returned. If included, returns either all criteria data associated with the assessment, or just the comments. If not included, both data and comments are omitted.",
                        "in": "query",
                        "name": "style",
                        "schema": {
                            "enum": [
                                "full",
                                "comments_only"
                            ],
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Rubric"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Get a single rubric",
                "tags": [
                    "rubrics"
                ]
            }
        },
        "/v1/courses/{course_id}/search_users": {
            "get": {
                "deprecated": false,
                "description": "Returns the paginated list of users in this course. And optionally the user's enrollments in the course.",
                "operationId": "list_users_in_course_search_users",
                "parameters": [
                    {
                        "in": "query",
                        "name": "page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "minimum": 0
                        },
                        "description": "The bookmark leading to the next paginated page. This needs to be parsed from the response header ('Link' field)."
                    },
                    {
                        "in": "query",
                        "name": "per_page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 100,
                            "default": 10
                        },
                        "description": "The numbers of items to return."
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The partial name or full ID of the users to match and return in the results list.",
                        "in": "query",
                        "name": "search_term",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "When set, only return users where the user is enrolled as this type.\n\"student_view\" implies include[]=test_student.\nThis argument is ignored if enrollment_role is given.",
                        "explode": false,
                        "in": "query",
                        "name": "enrollment_type",
                        "schema": {
                            "items": {
                                "type": "string",
                                "enum": [
                                    "teacher",
                                    "student",
                                    "student_view",
                                    "ta",
                                    "observer",
                                    "designer"
                                ]
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "description": "Deprecated\nWhen set, only return users enrolled with the specified course-level role.  This can be\na role created with the {api:RoleOverridesController#add_role Add Role API} or a\nbase role type of 'StudentEnrollment', 'TeacherEnrollment', 'TaEnrollment',\n'ObserverEnrollment', or 'DesignerEnrollment'.",
                        "in": "query",
                        "name": "enrollment_role",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "When set, only return courses where the user is enrolled with the specified\ncourse-level role.  This can be a role created with the\n{api:RoleOverridesController#add_role Add Role API} or a built_in role id with type\n'StudentEnrollment', 'TeacherEnrollment', 'TaEnrollment', 'ObserverEnrollment',\nor 'DesignerEnrollment'.",
                        "in": "query",
                        "name": "enrollment_role_id",
                        "schema": {
                            "format": "int64",
                            "type": "integer"
                        }
                    },
                    {
                        "description": "- \"email\": Optional user email.\n- \"enrollments\":\nOptionally include with each Course the user's current and invited\nenrollments. If the user is enrolled as a student, and the account has\npermission to manage or view all grades, each enrollment will include a\n'grades' key with 'current_score', 'final_score', 'current_grade' and\n'final_grade' values.\n- \"locked\": Optionally include whether an enrollment is locked.\n- \"avatar_url\": Optionally include avatar_url.\n- \"bio\": Optionally include each user's bio.\n- \"test_student\": Optionally include the course's Test Student,\nif present. Default is to not include Test Student.\n- \"custom_links\": Optionally include plugin-supplied custom links for each student,\nsuch as analytics information\n- \"current_grading_period_scores\": if enrollments is included as\nwell as this directive, the scores returned in the enrollment\nwill be for the current grading period if there is one. A\n'grading_period_id' value will also be included with the\nscores. if grading_period_id is nil there is no current grading\nperiod and the score is a total score.",
                        "explode": false,
                        "in": "query",
                        "name": "include",
                        "schema": {
                            "items": {
                                "type": "string",
                                "enum": [
                                    "email",
                                    "enrollments",
                                    "locked",
                                    "avatar_url",
                                    "test_student",
                                    "bio",
                                    "custom_links",
                                    "current_grading_period_scores"
                                ]
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "description": "If this parameter is given and it corresponds to a user in the course,\nthe +page+ parameter will be ignored and the page containing the specified user\nwill be returned instead.",
                        "in": "query",
                        "name": "user_id",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "If included, the course users set will only include users with IDs\nspecified by the param. Note: this will not work in conjunction\nwith the \"user_id\" argument but multiple user_ids can be included.",
                        "explode": false,
                        "in": "query",
                        "name": "user_ids",
                        "schema": {
                            "items": {
                                "type": "integer"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "description": "When set, only return users where the enrollment workflow state is of one of the given types.\n\"active\" and \"invited\" enrollments are returned by default.",
                        "explode": false,
                        "in": "query",
                        "name": "enrollment_state",
                        "schema": {
                            "items": {
                                "type": "string",
                                "enum": [
                                    "active",
                                    "invited",
                                    "rejected",
                                    "completed",
                                    "inactive"
                                ]
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "$ref": "#/components/parameters/pageParam"
                    },
                    {
                        "$ref": "#/components/parameters/perPageParam"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/User"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "List users in course",
                "tags": [
                    "courses"
                ]
            }
        },
        "/v1/courses/{course_id}/sections": {
            "get": {
                "deprecated": false,
                "description": "A paginated list of the list of sections for this course.",
                "operationId": "list_course_sections",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "- \"students\": Associations to include with the group. Note: this is only\n  available if you have permission to view users or grades in the course\n- \"avatar_url\": Include the avatar URLs for students returned.\n- \"enrollments\": If 'students' is also included, return the section\n  enrollment for each student\n- \"total_students\": Returns the total amount of active and invited students\n  for the course section\n- \"passback_status\": Include the grade passback status.",
                        "explode": false,
                        "in": "query",
                        "name": "include",
                        "schema": {
                            "items": {
                                "type": "string",
                                "enum": [
                                    "students",
                                    "avatar_url",
                                    "enrollments",
                                    "total_students",
                                    "passback_status"
                                ]
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "$ref": "#/components/parameters/pageParam"
                    },
                    {
                        "$ref": "#/components/parameters/perPageParam"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Section"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "List course sections",
                "tags": [
                    "sections"
                ]
            },
            "post": {
                "deprecated": false,
                "description": "Creates a new section for this course.",
                "operationId": "create_course_section",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "properties": {
                                    "course_section[end_at]": {
                                        "description": "Section end date in ISO8601 format. e.g. 2011-01-01T01:00Z",
                                        "format": "date-time",
                                        "type": "string"
                                    },
                                    "course_section[integration_id]": {
                                        "description": "The integration_id of the section. Must have manage_sis permission to set. This is ignored if caller does not have permission to set.",
                                        "type": "string"
                                    },
                                    "course_section[name]": {
                                        "description": "The name of the section",
                                        "type": "string"
                                    },
                                    "course_section[restrict_enrollments_to_section_dates]": {
                                        "description": "Set to true to restrict user enrollments to the start and end dates of the section.",
                                        "type": "boolean"
                                    },
                                    "course_section[sis_section_id]": {
                                        "description": "The sis ID of the section. Must have manage_sis permission to set. This is ignored if caller does not have permission to set.",
                                        "type": "string"
                                    },
                                    "course_section[start_at]": {
                                        "description": "Section start date in ISO8601 format, e.g. 2011-01-01T01:00Z",
                                        "format": "date-time",
                                        "type": "string"
                                    },
                                    "enable_sis_reactivation": {
                                        "description": "When true, will first try to re-activate a deleted section with matching sis_section_id if possible.",
                                        "type": "boolean"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Section"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Create course section",
                "tags": [
                    "sections"
                ]
            }
        },
        "/v1/courses/{course_id}/sections/{id}": {
            "get": {
                "deprecated": false,
                "description": "Gets details about a specific section",
                "operationId": "get_section_information_courses",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "- \"students\": Associations to include with the group. Note: this is only\n  available if you have permission to view users or grades in the course\n- \"avatar_url\": Include the avatar URLs for students returned.\n- \"enrollments\": If 'students' is also included, return the section\n  enrollment for each student\n- \"total_students\": Returns the total amount of active and invited students\n  for the course section\n- \"passback_status\": Include the grade passback status.",
                        "explode": false,
                        "in": "query",
                        "name": "include",
                        "schema": {
                            "items": {
                                "type": "string",
                                "enum": [
                                    "students",
                                    "avatar_url",
                                    "enrollments",
                                    "total_students",
                                    "passback_status"
                                ]
                            },
                            "type": "array"
                        },
                        "style": "form"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Section"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Get section information",
                "tags": [
                    "sections"
                ]
            }
        },
        "/v1/courses/{course_id}/settings": {
            "get": {
                "deprecated": false,
                "description": "Returns some of a course's settings.",
                "operationId": "get_course_settings",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Get course settings",
                "tags": [
                    "courses"
                ]
            },
            "put": {
                "deprecated": false,
                "description": "Can update the following course settings:",
                "operationId": "update_course_settings",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "allow_student_discussion_editing": {
                                        "description": "Let students edit or delete their own discussion posts",
                                        "type": "boolean"
                                    },
                                    "allow_student_discussion_topics": {
                                        "description": "Let students create discussion topics",
                                        "type": "boolean"
                                    },
                                    "allow_student_forum_attachments": {
                                        "description": "Let students attach files to discussions",
                                        "type": "boolean"
                                    },
                                    "allow_student_organized_groups": {
                                        "description": "Let students organize their own groups",
                                        "type": "boolean"
                                    },
                                    "hide_distribution_graphs": {
                                        "description": "Hide grade distribution graphs from students",
                                        "type": "boolean"
                                    },
                                    "hide_final_grades": {
                                        "description": "Hide totals in student grades summary",
                                        "type": "boolean"
                                    },
                                    "home_page_announcement_limit": {
                                        "description": "Limit the number of announcements on the home page if enabled via show_announcements_on_home_page",
                                        "format": "int64",
                                        "type": "integer"
                                    },
                                    "lock_all_announcements": {
                                        "description": "Disable comments on announcements",
                                        "type": "boolean"
                                    },
                                    "restrict_student_future_view": {
                                        "description": "Restrict students from viewing courses before start date",
                                        "type": "boolean"
                                    },
                                    "restrict_student_past_view": {
                                        "description": "Restrict students from viewing courses after end date",
                                        "type": "boolean"
                                    },
                                    "show_announcements_on_home_page": {
                                        "description": "Show the most recent announcements on the Course home page (if a Wiki, defaults to five announcements, configurable via home_page_announcement_limit)",
                                        "type": "boolean"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Update course settings",
                "tags": [
                    "courses"
                ]
            }
        },
        "/v1/courses/{course_id}/students": {
            "get": {
                "deprecated": true,
                "description": "Returns the paginated list of students enrolled in this course.\n\nDEPRECATED: Please use the {api:CoursesController#users course users} endpoint\nand pass \"student\" as the enrollment_type.",
                "operationId": "list_students",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/pageParam"
                    },
                    {
                        "$ref": "#/components/parameters/perPageParam"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/User"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "List students",
                "tags": [
                    "courses"
                ]
            }
        },
        "/v1/courses/{course_id}/students/submissions": {
            "get": {
                "deprecated": false,
                "description": "A paginated list of all existing submissions for a given set of students and assignments.",
                "operationId": "list_submissions_for_multiple_assignments_courses",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "List of student ids to return submissions for. If this argument is\nomitted, return submissions for the calling user. Students may only list\ntheir own submissions. Observers may only list those of associated\nstudents. The special id \"all\" will return submissions for all students\nin the course/section as appropriate.",
                        "explode": false,
                        "in": "query",
                        "name": "student_ids[]",
                        "allowReserved": true,
                        "schema": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "description": "List of assignments to return submissions for. If none are given,\nsubmissions for all assignments are returned.",
                        "explode": false,
                        "in": "query",
                        "name": "assignment_ids",
                        "schema": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "description": "If this argument is present, the response will be grouped by student,\nrather than a flat array of submissions.",
                        "in": "query",
                        "name": "grouped",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "description": "If this argument is set to true, the response will only include\nsubmissions for assignments that have the post_to_sis flag set to true and\nuser enrollments that were added through sis.",
                        "in": "query",
                        "name": "post_to_sis",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "description": "If this argument is set, the response will only include submissions that\nwere submitted after the specified date_time. This will exclude\nsubmissions that do not have a submitted_at which will exclude unsubmitted\nsubmissions.\nThe value must be formatted as ISO 8601 YYYY-MM-DDTHH:MM:SSZ.",
                        "in": "query",
                        "name": "submitted_since",
                        "schema": {
                            "format": "date-time",
                            "type": "string"
                        }
                    },
                    {
                        "description": "If this argument is set, the response will only include submissions that\nwere graded after the specified date_time. This will exclude\nsubmissions that have not been graded.\nThe value must be formatted as ISO 8601 YYYY-MM-DDTHH:MM:SSZ.",
                        "in": "query",
                        "name": "graded_since",
                        "schema": {
                            "format": "date-time",
                            "type": "string"
                        }
                    },
                    {
                        "description": "The id of the grading period in which submissions are being requested\n(Requires grading periods to exist on the account)",
                        "in": "query",
                        "name": "grading_period_id",
                        "schema": {
                            "format": "int64",
                            "type": "integer"
                        }
                    },
                    {
                        "description": "The current status of the submission",
                        "in": "query",
                        "name": "workflow_state",
                        "schema": {
                            "enum": [
                                "submitted",
                                "unsubmitted",
                                "graded",
                                "pending_review"
                            ],
                            "type": "string"
                        }
                    },
                    {
                        "description": "The current state of the enrollments. If omitted will include all\nenrollments that are not deleted.",
                        "in": "query",
                        "name": "enrollment_state",
                        "schema": {
                            "enum": [
                                "active",
                                "concluded"
                            ],
                            "type": "string"
                        }
                    },
                    {
                        "description": "If omitted it is set to true. When set to false it will ignore the effective\nstate of the student enrollments and use the workflow_state for the\nenrollments. The argument is ignored unless enrollment_state argument is\nalso passed.",
                        "in": "query",
                        "name": "state_based_on_date",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "description": "The order submissions will be returned in.  Defaults to \"id\".  Doesn't\naffect results for \"grouped\" mode.",
                        "in": "query",
                        "name": "order",
                        "schema": {
                            "enum": [
                                "id",
                                "graded_at"
                            ],
                            "type": "string"
                        }
                    },
                    {
                        "description": "Determines whether ordered results are returned in ascending or descending\norder.  Defaults to \"ascending\".  Doesn't affect results for \"grouped\" mode.",
                        "in": "query",
                        "name": "order_direction",
                        "schema": {
                            "enum": [
                                "ascending",
                                "descending"
                            ],
                            "type": "string"
                        }
                    },
                    {
                        "description": "Associations to include with the group. `total_scores` requires the\n`grouped` argument.",
                        "explode": false,
                        "in": "query",
                        "name": "include[]",
                        "allowReserved": true,
                        "schema": {
                            "items": {
                                "type": "string",
                                "enum": [
                                    "submission_history",
                                    "submission_comments",
                                    "rubric_assessment",
                                    "assignment",
                                    "total_scores",
                                    "visibility",
                                    "course",
                                    "user"
                                ]
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "$ref": "#/components/parameters/pageParam"
                    },
                    {
                        "$ref": "#/components/parameters/perPageParam"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Submission"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "List submissions for multiple assignments",
                "tags": [
                    "submissions"
                ]
            }
        },
        "/v1/courses/{course_id}/submissions/update_grades": {
            "post": {
                "deprecated": false,
                "description": "Update the grading and comments on multiple student's assignment\nsubmissions in an asynchronous job.\n\nThe user must have permission to manage grades in the appropriate context\n(course or section).",
                "operationId": "grade_or_comment_on_multiple_submissions_courses_submissions",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "properties": {
                                    "grade_data[student_id][assignment_id]": {
                                        "description": "Specifies which assignment to grade.  This argument is not necessary when\nusing the assignment-specific endpoints.",
                                        "format": "int64",
                                        "type": "integer"
                                    },
                                    "grade_data[student_id][excuse]": {
                                        "description": "See documentation for the excuse argument in the\n{api:SubmissionsApiController#update Submissions Update} documentation",
                                        "type": "boolean"
                                    },
                                    "grade_data[student_id][file_ids]": {
                                        "description": "See documentation for the comment[] arguments in the\n{api:SubmissionsApiController#update Submissions Update} documentation",
                                        "items": {
                                            "type": "integer"
                                        },
                                        "type": "array"
                                    },
                                    "grade_data[student_id][group_comment]": {
                                        "description": "no description",
                                        "type": "boolean"
                                    },
                                    "grade_data[student_id][media_comment_id]": {
                                        "description": "no description",
                                        "type": "string"
                                    },
                                    "grade_data[student_id][media_comment_type]": {
                                        "description": "no description",
                                        "enum": [
                                            "audio",
                                            "video"
                                        ],
                                        "type": "string"
                                    },
                                    "grade_data[student_id][posted_grade]": {
                                        "description": "See documentation for the posted_grade argument in the\n{api:SubmissionsApiController#update Submissions Update} documentation",
                                        "type": "string"
                                    },
                                    "grade_data[student_id][rubric_assessment]": {
                                        "description": "See documentation for the rubric_assessment argument in the\n{api:SubmissionsApiController#update Submissions Update} documentation"
                                    },
                                    "grade_data[student_id][text_comment]": {
                                        "description": "no description",
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Progress"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Grade or comment on multiple submissions",
                "tags": [
                    "submissions"
                ]
            }
        },
        "/v1/courses/{course_id}/tabs": {
            "get": {
                "deprecated": false,
                "description": "Returns a paginated list of navigation tabs available in the current context.",
                "operationId": "list_available_tabs_for_course_or_group_courses",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "\"external\":: Optionally include external tool tabs in the returned list of tabs (Only has effect for courses, not groups)",
                        "explode": false,
                        "in": "query",
                        "name": "include",
                        "schema": {
                            "items": {
                                "type": "string",
                                "enum": [
                                    "external"
                                ]
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "$ref": "#/components/parameters/pageParam"
                    },
                    {
                        "$ref": "#/components/parameters/perPageParam"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "List available tabs for a course or group",
                "tags": [
                    "tabs"
                ]
            }
        },
        "/v1/courses/{course_id}/tabs/{tab_id}": {
            "put": {
                "deprecated": false,
                "description": "Home and Settings tabs are not manageable, and can't be hidden or moved\n\nReturns a tab object",
                "operationId": "update_tab_for_course",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "tab_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "hidden": {
                                        "description": "no description",
                                        "type": "boolean"
                                    },
                                    "position": {
                                        "description": "The new position of the tab, 1-based",
                                        "format": "int64",
                                        "type": "integer"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Tab"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Update a tab for a course",
                "tags": [
                    "tabs"
                ]
            }
        },
        "/v1/courses/{course_id}/todo": {
            "get": {
                "deprecated": false,
                "description": "Returns the current user's course-specific todo items.\n\nFor full documentation, see the API documentation for the user todo items, in the user api.",
                "operationId": "course_todo_items",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Course TODO items",
                "tags": [
                    "courses"
                ]
            }
        },
        "/v1/courses/{course_id}/usage_rights": {
            "delete": {
                "deprecated": false,
                "description": "Removes copyright and license information associated with one or more files",
                "operationId": "remove_usage_rights_courses",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "List of ids of files to remove associated usage rights from.",
                        "explode": false,
                        "in": "query",
                        "name": "file_ids",
                        "required": true,
                        "schema": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "description": "List of ids of folders. Usage rights will be removed from all files in these folders.",
                        "explode": false,
                        "in": "query",
                        "name": "folder_ids",
                        "schema": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Remove usage rights",
                "tags": [
                    "files"
                ]
            },
            "put": {
                "deprecated": false,
                "description": "Sets copyright and license information for one or more files",
                "operationId": "set_usage_rights_courses",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "file_ids": {
                                        "description": "List of ids of files to set usage rights for.",
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "folder_ids": {
                                        "description": "List of ids of folders to search for files to set usage rights for.\nNote that new files uploaded to these folders do not automatically inherit these rights.",
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "publish": {
                                        "description": "Whether the file(s) or folder(s) should be published on save, provided that usage rights have been specified (set to `true` to publish on save).",
                                        "type": "boolean"
                                    },
                                    "usage_rights[legal_copyright]": {
                                        "description": "The legal copyright line for the files",
                                        "type": "string"
                                    },
                                    "usage_rights[license]": {
                                        "description": "The license that applies to the files. See the {api:UsageRightsController#licenses List licenses endpoint} for the supported license types.",
                                        "type": "string"
                                    },
                                    "usage_rights[use_justification]": {
                                        "description": "The intellectual property justification for using the files in Canvas",
                                        "enum": [
                                            "own_copyright",
                                            "used_by_permission",
                                            "fair_use",
                                            "public_domain",
                                            "creative_commons"
                                        ],
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "file_ids",
                                    "usage_rights[use_justification]"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UsageRights"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Set usage rights",
                "tags": [
                    "files"
                ]
            }
        },
        "/v1/courses/{course_id}/users": {
            "get": {
                "deprecated": false,
                "description": "Returns the paginated list of users in this course. And optionally the user's enrollments in the course.",
                "operationId": "list_users_in_course_users",
                "parameters": [
                    {
                        "in": "query",
                        "name": "page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "minimum": 0
                        },
                        "description": "The bookmark leading to the next paginated page. This needs to be parsed from the response header ('Link' field)."
                    },
                    {
                        "in": "query",
                        "name": "per_page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 100,
                            "default": 10
                        },
                        "description": "The numbers of items to return."
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The partial name or full ID of the users to match and return in the results list.",
                        "in": "query",
                        "name": "search_term",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "When set, only return users where the user is enrolled as this type.\n\"student_view\" implies include[]=test_student.\nThis argument is ignored if enrollment_role is given.",
                        "explode": false,
                        "in": "query",
                        "name": "enrollment_type[]",
                        "schema": {
                            "items": {
                                "type": "string",
                                "enum": [
                                    "teacher",
                                    "student",
                                    "student_view",
                                    "ta",
                                    "observer",
                                    "designer"
                                ]
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "description": "Deprecated\nWhen set, only return users enrolled with the specified course-level role.  This can be\na role created with the {api:RoleOverridesController#add_role Add Role API} or a\nbase role type of 'StudentEnrollment', 'TeacherEnrollment', 'TaEnrollment',\n'ObserverEnrollment', or 'DesignerEnrollment'.",
                        "in": "query",
                        "name": "enrollment_role",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "When set, only return courses where the user is enrolled with the specified\ncourse-level role.  This can be a role created with the\n{api:RoleOverridesController#add_role Add Role API} or a built_in role id with type\n'StudentEnrollment', 'TeacherEnrollment', 'TaEnrollment', 'ObserverEnrollment',\nor 'DesignerEnrollment'.",
                        "in": "query",
                        "name": "enrollment_role_id",
                        "schema": {
                            "format": "int64",
                            "type": "integer"
                        }
                    },
                    {
                        "description": "- \"enrollments\":\nOptionally include with each Course the user's current and invited\nenrollments. If the user is enrolled as a student, and the account has\npermission to manage or view all grades, each enrollment will include a\n'grades' key with 'current_score', 'final_score', 'current_grade' and\n'final_grade' values.\n- \"locked\": Optionally include whether an enrollment is locked.\n- \"avatar_url\": Optionally include avatar_url.\n- \"bio\": Optionally include each user's bio.\n- \"test_student\": Optionally include the course's Test Student,\nif present. Default is to not include Test Student.\n- \"custom_links\": Optionally include plugin-supplied custom links for each student,\nsuch as analytics information\n- \"current_grading_period_scores\": if enrollments is included as\nwell as this directive, the scores returned in the enrollment\nwill be for the current grading period if there is one. A\n'grading_period_id' value will also be included with the\nscores. if grading_period_id is nil there is no current grading\nperiod and the score is a total score.",
                        "explode": false,
                        "in": "query",
                        "name": "include[]",
                        "schema": {
                            "items": {
                                "type": "string",
                                "enum": [
                                    "email",
                                    "enrollments",
                                    "locked",
                                    "avatar_url",
                                    "test_student",
                                    "bio",
                                    "custom_links",
                                    "current_grading_period_scores",
                                    "sections"
                                ]
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "description": "If this parameter is given and it corresponds to a user in the course,\nthe +page+ parameter will be ignored and the page containing the specified user\nwill be returned instead.",
                        "in": "query",
                        "name": "user_id",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "If included, the course users set will only include users with IDs\nspecified by the param. Note: this will not work in conjunction\nwith the \"user_id\" argument but multiple user_ids can be included.",
                        "explode": false,
                        "in": "query",
                        "name": "user_ids[]",
                        "schema": {
                            "items": {
                                "type": "integer"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "description": "When set, only return users where the enrollment workflow state is of one of the given types.\n\"active\" and \"invited\" enrollments are returned by default.",
                        "explode": false,
                        "in": "query",
                        "name": "enrollment_state[]",
                        "schema": {
                            "items": {
                                "type": "string",
                                "enum": [
                                    "active",
                                    "invited",
                                    "rejected",
                                    "completed",
                                    "inactive"
                                ]
                            },
                            "type": "array"
                        },
                        "style": "form"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/User"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "List users in course",
                "tags": [
                    "courses"
                ]
            }
        },
        "/v1/courses/{course_id}/users/{id}": {
            "get": {
                "deprecated": false,
                "description": "Return information on a single user.\n\nAccepts the same include[] parameters as the :users: action, and returns a\nsingle user with the same fields as that action.",
                "operationId": "get_single_user",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Get single user",
                "tags": [
                    "courses"
                ]
            }
        },
        "/v1/courses/{course_id}/users/{user_id}/last_attended": {
            "put": {
                "deprecated": false,
                "operationId": "adds_last_attended_date_to_student_enrollment_in_course",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "user_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Enrollment"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Adds last attended date to student enrollment in course",
                "tags": [
                    "enrollments"
                ]
            }
        },
        "/v1/courses/{id}": {
            "delete": {
                "deprecated": false,
                "description": "Delete or conclude an existing course",
                "operationId": "delete_conclude_course",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The action to take on the course.",
                        "in": "query",
                        "name": "event",
                        "required": true,
                        "schema": {
                            "enum": [
                                "delete",
                                "conclude"
                            ],
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Delete/Conclude a course",
                "tags": [
                    "courses"
                ]
            },
            "get": {
                "deprecated": false,
                "description": "Return information on a single course.\n\nAccepts the same include[] parameters as the list action plus:",
                "operationId": "get_single_course_courses",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "- \"all_courses\": Also search recently deleted courses.\n- \"permissions\": Include permissions the current user has\n  for the course.\n- \"observed_users\": include observed users in the enrollments\n- \"course_image\": Optional course image data for when there is a course image\n  and the course image feature flag has been enabled",
                        "explode": false,
                        "in": "query",
                        "name": "include",
                        "schema": {
                            "items": {
                                "type": "string",
                                "enum": [
                                    "needs_grading_count",
                                    "syllabus_body",
                                    "public_description",
                                    "total_scores",
                                    "current_grading_period_scores",
                                    "term",
                                    "account",
                                    "course_progress",
                                    "sections",
                                    "storage_quota_used_mb",
                                    "total_students",
                                    "passback_status",
                                    "favorites",
                                    "teachers",
                                    "observed_users",
                                    "all_courses",
                                    "permissions",
                                    "course_image"
                                ]
                            },
                            "type": "array"
                        },
                        "style": "form"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Course"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Get a single course",
                "tags": [
                    "courses"
                ]
            },
            "put": {
                "deprecated": false,
                "description": "Update an existing course.\n\nArguments are the same as Courses#create, with a few exceptions (enroll_me).\n\nIf a user has content management rights, but not full course editing rights, the only attribute\neditable through this endpoint will be \"syllabus_body\"",
                "operationId": "update_course",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "course[account_id]": {
                                        "description": "The unique ID of the account to move the course to.",
                                        "format": "int64",
                                        "type": "integer"
                                    },
                                    "course[allow_student_forum_attachments]": {
                                        "description": "If true, students can attach files to forum posts.",
                                        "type": "boolean"
                                    },
                                    "course[allow_student_wiki_edits]": {
                                        "description": "If true, students will be able to modify the course wiki.",
                                        "type": "boolean"
                                    },
                                    "course[allow_wiki_comments]": {
                                        "description": "If true, course members will be able to comment on wiki pages.",
                                        "type": "boolean"
                                    },
                                    "course[apply_assignment_group_weights]": {
                                        "description": "Set to true to weight final grade based on assignment groups percentages.",
                                        "type": "boolean"
                                    },
                                    "course[blueprint]": {
                                        "description": "Sets the course as a blueprint course. NOTE: The Blueprint Courses feature is in beta",
                                        "type": "boolean"
                                    },
                                    "course[blueprint_restrictions]": {
                                        "description": "Sets a default set to apply to blueprint course objects when restricted,\nunless _use_blueprint_restrictions_by_object_type_ is enabled.\nSee the {api:Blueprint_Courses:BlueprintRestriction Blueprint Restriction} documentation"
                                    },
                                    "course[blueprint_restrictions_by_object_type]": {
                                        "description": "Allows setting multiple {api:Blueprint_Courses:BlueprintRestriction Blueprint Restriction}\nto apply to blueprint course objects of the matching type when restricted.\nThe possible object types are \"assignment\", \"attachment\", \"discussion_topic\", \"quiz\" and \"wiki_page\".\nExample usage:\n  course[blueprint_restrictions_by_object_type][assignment][content]=1"
                                    },
                                    "course[course_code]": {
                                        "description": "The course code for the course.",
                                        "type": "string"
                                    },
                                    "course[course_format]": {
                                        "description": "Optional. Specifies the format of the course. (Should be either 'on_campus' or 'online')",
                                        "type": "string"
                                    },
                                    "course[default_view]": {
                                        "description": "The type of page that users will see when they first visit the course\n* 'feed' Recent Activity Dashboard\n* 'wiki' Wiki Front Page\n* 'modules' Course Modules/Sections Page\n* 'assignments' Course Assignments List\n* 'syllabus' Course Syllabus Page\nother types may be added in the future",
                                        "enum": [
                                            "feed",
                                            "wiki",
                                            "modules",
                                            "syllabus",
                                            "assignments"
                                        ],
                                        "type": "string"
                                    },
                                    "course[end_at]": {
                                        "description": "Course end date in ISO8601 format. e.g. 2011-01-01T01:00Z",
                                        "format": "date-time",
                                        "type": "string"
                                    },
                                    "course[event]": {
                                        "description": "The action to take on each course.\n* 'claim' makes a course no longer visible to students. This action is also called \"unpublish\" on the web site.\n  A course cannot be unpublished if students have received graded submissions.\n* 'offer' makes a course visible to students. This action is also called \"publish\" on the web site.\n* 'conclude' prevents future enrollments and makes a course read-only for all participants. The course still appears\n  in prior-enrollment lists.\n* 'delete' completely removes the course from the web site (including course menus and prior-enrollment lists).\n  All enrollments are deleted. Course content may be physically deleted at a future date.\n* 'undelete' attempts to recover a course that has been deleted. (Recovery is not guaranteed; please conclude\n  rather than delete a course if there is any possibility the course will be used again.) The recovered course\n  will be unpublished. Deleted enrollments will not be recovered.",
                                        "enum": [
                                            "claim",
                                            "offer",
                                            "conclude",
                                            "delete",
                                            "undelete"
                                        ],
                                        "type": "string"
                                    },
                                    "course[grading_standard_id]": {
                                        "description": "The grading standard id to set for the course.  If no value is provided for this argument the current grading_standard will be un-set from this course.",
                                        "format": "int64",
                                        "type": "integer"
                                    },
                                    "course[hide_final_grades]": {
                                        "description": "If this option is set to true, the totals in student grades summary will\nbe hidden.",
                                        "type": "boolean"
                                    },
                                    "course[image_id]": {
                                        "description": "This is a file ID corresponding to an image file in the course that will\nbe used as the course image.\nThis will clear the course's image_url setting if set.  If you attempt\nto provide image_url and image_id in a request it will fail.",
                                        "format": "int64",
                                        "type": "integer"
                                    },
                                    "course[image_url]": {
                                        "description": "This is a URL to an image to be used as the course image.\nThis will clear the course's image_id setting if set.  If you attempt\nto provide image_url and image_id in a request it will fail.",
                                        "type": "string"
                                    },
                                    "course[integration_id]": {
                                        "description": "The unique Integration identifier.",
                                        "type": "string"
                                    },
                                    "course[is_public]": {
                                        "description": "Set to true if course is public to both authenticated and unauthenticated users.",
                                        "type": "boolean"
                                    },
                                    "course[is_public_to_auth_users]": {
                                        "description": "Set to true if course is public only to authenticated users.",
                                        "type": "boolean"
                                    },
                                    "course[license]": {
                                        "description": "The name of the licensing. Should be one of the following abbreviations\n(a descriptive name is included in parenthesis for reference):\n- 'private' (Private Copyrighted)\n- 'cc_by_nc_nd' (CC Attribution Non-Commercial No Derivatives)\n- 'cc_by_nc_sa' (CC Attribution Non-Commercial Share Alike)\n- 'cc_by_nc' (CC Attribution Non-Commercial)\n- 'cc_by_nd' (CC Attribution No Derivatives)\n- 'cc_by_sa' (CC Attribution Share Alike)\n- 'cc_by' (CC Attribution)\n- 'public_domain' (Public Domain).",
                                        "type": "string"
                                    },
                                    "course[name]": {
                                        "description": "The name of the course. If omitted, the course will be named \"Unnamed\nCourse.\"",
                                        "type": "string"
                                    },
                                    "course[open_enrollment]": {
                                        "description": "Set to true if the course is open enrollment.",
                                        "type": "boolean"
                                    },
                                    "course[public_description]": {
                                        "description": "A publicly visible description of the course.",
                                        "type": "string"
                                    },
                                    "course[public_syllabus]": {
                                        "description": "Set to true to make the course syllabus public.",
                                        "type": "boolean"
                                    },
                                    "course[public_syllabus_to_auth]": {
                                        "description": "Set to true to make the course syllabus to public for authenticated users.",
                                        "type": "boolean"
                                    },
                                    "course[remove_image]": {
                                        "description": "If this option is set to true, the course image url and course image\nID are both set to nil",
                                        "type": "boolean"
                                    },
                                    "course[restrict_enrollments_to_course_dates]": {
                                        "description": "Set to true to restrict user enrollments to the start and end dates of the\ncourse.",
                                        "type": "boolean"
                                    },
                                    "course[self_enrollment]": {
                                        "description": "Set to true if the course is self enrollment.",
                                        "type": "boolean"
                                    },
                                    "course[sis_course_id]": {
                                        "description": "The unique SIS identifier.",
                                        "type": "string"
                                    },
                                    "course[start_at]": {
                                        "description": "Course start date in ISO8601 format, e.g. 2011-01-01T01:00Z",
                                        "format": "date-time",
                                        "type": "string"
                                    },
                                    "course[storage_quota_mb]": {
                                        "description": "Set the storage quota for the course, in megabytes. The caller must have\nthe \"Manage storage quotas\" account permission.",
                                        "format": "int64",
                                        "type": "integer"
                                    },
                                    "course[syllabus_body]": {
                                        "description": "The syllabus body for the course",
                                        "type": "string"
                                    },
                                    "course[term_id]": {
                                        "description": "The unique ID of the term to create to course in.",
                                        "format": "int64",
                                        "type": "integer"
                                    },
                                    "course[time_zone]": {
                                        "description": "The time zone for the course. Allowed time zones are\n{http://www.iana.org/time-zones IANA time zones} or friendlier\n{http://api.rubyonrails.org/classes/ActiveSupport/TimeZone.html Ruby on Rails time zones}.",
                                        "type": "string"
                                    },
                                    "course[use_blueprint_restrictions_by_object_type]": {
                                        "description": "When enabled, the _blueprint_restrictions_ parameter will be ignored in favor of\nthe _blueprint_restrictions_by_object_type_ parameter",
                                        "type": "boolean"
                                    },
                                    "offer": {
                                        "description": "If this option is set to true, the course will be available to students\nimmediately.",
                                        "type": "boolean"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Update a course",
                "tags": [
                    "courses"
                ]
            }
        },
        "/v1/courses/{id}/late_policy": {
            "get": {
                "deprecated": false,
                "description": "Returns the late policy for a course.",
                "operationId": "get_late_policy",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Get a late policy",
                "tags": [
                    "late_policy"
                ]
            },
            "patch": {
                "deprecated": false,
                "description": "Patch a late policy. No body is returned upon success.",
                "operationId": "patch_late_policy",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "properties": {
                                    "late_policy[late_submission_deduction]": {
                                        "description": "How many percentage points to deduct per the late submission interval.",
                                        "type": "number"
                                    },
                                    "late_policy[late_submission_deduction_enabled]": {
                                        "description": "Whether to enable the late submission deduction late policy.",
                                        "type": "boolean"
                                    },
                                    "late_policy[late_submission_interval]": {
                                        "description": "The interval for late policies.",
                                        "type": "string"
                                    },
                                    "late_policy[late_submission_minimum_percent]": {
                                        "description": "The minimum grade a submissions can have in percentage points.",
                                        "type": "number"
                                    },
                                    "late_policy[late_submission_minimum_percent_enabled]": {
                                        "description": "Whether to enable the late submission minimum percent for a late policy.",
                                        "type": "boolean"
                                    },
                                    "late_policy[missing_submission_deduction]": {
                                        "description": "How many percentage points to deduct from a missing submission.",
                                        "type": "number"
                                    },
                                    "late_policy[missing_submission_deduction_enabled]": {
                                        "description": "Whether to enable the missing submission deduction late policy.",
                                        "type": "boolean"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Patch a late policy",
                "tags": [
                    "late_policy"
                ]
            },
            "post": {
                "deprecated": false,
                "description": "Create a late policy. If the course already has a late policy, a\nbad_request is returned since there can only be one late policy\nper course.",
                "operationId": "create_late_policy",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "properties": {
                                    "late_policy[late_submission_deduction]": {
                                        "description": "How many percentage points to deduct per the late submission interval.",
                                        "type": "number"
                                    },
                                    "late_policy[late_submission_deduction_enabled]": {
                                        "description": "Whether to enable the late submission deduction late policy.",
                                        "type": "boolean"
                                    },
                                    "late_policy[late_submission_interval]": {
                                        "description": "The interval for late policies.",
                                        "type": "string"
                                    },
                                    "late_policy[late_submission_minimum_percent]": {
                                        "description": "The minimum grade a submissions can have in percentage points.",
                                        "type": "number"
                                    },
                                    "late_policy[late_submission_minimum_percent_enabled]": {
                                        "description": "Whether to enable the late submission minimum percent for a late policy.",
                                        "type": "boolean"
                                    },
                                    "late_policy[missing_submission_deduction]": {
                                        "description": "How many percentage points to deduct from a missing submission.",
                                        "type": "number"
                                    },
                                    "late_policy[missing_submission_deduction_enabled]": {
                                        "description": "Whether to enable the missing submission deduction late policy.",
                                        "type": "boolean"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Create a late policy",
                "tags": [
                    "late_policy"
                ]
            }
        },
        "/v1/epub_exports": {
            "get": {
                "deprecated": false,
                "description": "A paginated list of all courses a user is actively participating in, and\nthe latest ePub export associated with the user & course.",
                "operationId": "list_courses_with_their_latest_epub_export",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/CourseEpubExport"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "List courses with their latest ePub export",
                "tags": [
                    "e_pub_exports"
                ]
            }
        },
        "/v1/error_reports": {
            "post": {
                "deprecated": false,
                "description": "Create a new error report documenting an experienced problem\n\nPerforms the same action as when a user uses the \"help -> report a problem\"\ndialog.",
                "operationId": "create_error_report",
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "properties": {
                                    "error[comments]": {
                                        "description": "The long version of the story from the user one what they experienced",
                                        "type": "string"
                                    },
                                    "error[email]": {
                                        "description": "Email address for the reporting user",
                                        "type": "string"
                                    },
                                    "error[http_env]": {
                                        "description": "A collection of metadata about the users' environment.  If not provided,\ncanvas will collect it based on information found in the request.\n(Doesn't have to be HTTPENV info, could be anything JSON object that can be\nserialized as a hash, a mobile app might include relevant metadata for\nitself)"
                                    },
                                    "error[subject]": {
                                        "description": "The summary of the problem",
                                        "type": "string"
                                    },
                                    "error[url]": {
                                        "description": "URL from which the report was issued",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "error[subject]"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Create Error Report",
                "tags": [
                    "error_reports"
                ]
            }
        },
        "/v1/files/{id}": {
            "delete": {
                "deprecated": false,
                "description": "Remove the specified file",
                "operationId": "delete_file",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "This action is irreversible.\nIf replace is set to true the file contents will be replaced with a\ngeneric \"file has been removed\" file. This also destroys any previews\nthat have been generated for the file.\nMust have manage files and become other users permissions",
                        "in": "query",
                        "name": "replace",
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/File"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Delete file",
                "tags": [
                    "files"
                ]
            },
            "get": {
                "deprecated": false,
                "description": "Returns the standard attachment json object",
                "operationId": "get_file_files",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Array of additional information to include.\n\n\"user\":: the user who uploaded the file or last edited its content\n\"usage_rights\":: copyright and license information for the file (see UsageRights)",
                        "explode": false,
                        "in": "query",
                        "name": "include",
                        "schema": {
                            "items": {
                                "type": "string",
                                "enum": [
                                    "user"
                                ]
                            },
                            "type": "array"
                        },
                        "style": "form"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/File"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Get file",
                "tags": [
                    "files"
                ]
            },
            "put": {
                "deprecated": false,
                "description": "Update some settings on the specified file",
                "operationId": "update_file",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "hidden": {
                                        "description": "Flag the file as hidden",
                                        "type": "boolean"
                                    },
                                    "lock_at": {
                                        "description": "The datetime to lock the file at",
                                        "format": "date-time",
                                        "type": "string"
                                    },
                                    "locked": {
                                        "description": "Flag the file as locked",
                                        "type": "boolean"
                                    },
                                    "name": {
                                        "description": "The new display name of the file",
                                        "type": "string"
                                    },
                                    "on_duplicate": {
                                        "description": "If the file is moved to a folder containing a file with the same name,\nor renamed to a name matching an existing file, the API call will fail\nunless this parameter is supplied.\n\n\"overwrite\":: Replace the existing file with the same name\n\"rename\":: Add a qualifier to make the new filename unique",
                                        "enum": [
                                            "overwrite",
                                            "rename"
                                        ],
                                        "type": "string"
                                    },
                                    "parent_folder_id": {
                                        "description": "The id of the folder to move this file into.\nThe new folder must be in the same context as the original parent folder.\nIf the file is in a context without folders this does not apply.",
                                        "type": "string"
                                    },
                                    "unlock_at": {
                                        "description": "The datetime to unlock the file at",
                                        "format": "date-time",
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/File"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Update file",
                "tags": [
                    "files"
                ]
            }
        },
        "/v1/files/{id}/public_url": {
            "get": {
                "deprecated": false,
                "description": "Determine the URL that should be used for inline preview of the file.",
                "operationId": "get_public_inline_preview_url",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The id of the submission the file is associated with.  Provide this argument to gain access to a file\nthat has been submitted to an assignment (Canvas will verify that the file belongs to the submission\nand the calling user has rights to view the submission).",
                        "in": "query",
                        "name": "submission_id",
                        "schema": {
                            "format": "int64",
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Get public inline preview url",
                "tags": [
                    "files"
                ]
            }
        },
        "/v1/folders/{dest_folder_id}/copy_file": {
            "post": {
                "deprecated": false,
                "description": "Copy a file from elsewhere in Canvas into a folder.\n\nCopying a file across contexts (between courses and users) is permitted,\nbut the source and destination must belong to the same institution.",
                "operationId": "copy_file",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "dest_folder_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "properties": {
                                    "on_duplicate": {
                                        "description": "What to do if a file with the same name already exists at the destination.\nIf such a file exists and this parameter is not given, the call will fail.\n\n\"overwrite\":: Replace an existing file with the same name\n\"rename\":: Add a qualifier to make the new filename unique",
                                        "enum": [
                                            "overwrite",
                                            "rename"
                                        ],
                                        "type": "string"
                                    },
                                    "source_file_id": {
                                        "description": "The id of the source file",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "source_file_id"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/File"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Copy a file",
                "tags": [
                    "files"
                ]
            }
        },
        "/v1/folders/{dest_folder_id}/copy_folder": {
            "post": {
                "deprecated": false,
                "description": "Copy a folder (and its contents) from elsewhere in Canvas into a folder.\n\nCopying a folder across contexts (between courses and users) is permitted,\nbut the source and destination must belong to the same institution.\nIf the source and destination folders are in the same context, the\nsource folder may not contain the destination folder. A folder will be\nrenamed at its destination if another folder with the same name already\nexists.",
                "operationId": "copy_folder",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "dest_folder_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "properties": {
                                    "source_folder_id": {
                                        "description": "The id of the source folder",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "source_folder_id"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Folder"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Copy a folder",
                "tags": [
                    "files"
                ]
            }
        },
        "/v1/folders/{folder_id}/files": {
            "post": {
                "deprecated": false,
                "description": "Upload a file to a folder.\n\nThis API endpoint is the first step in uploading a file.\nSee the {file:file_uploads.html File Upload Documentation} for details on\nthe file upload workflow.\n\nOnly those with the \"Manage Files\" permission on a course or group can\nupload files to a folder in that course or group.",
                "operationId": "upload_file_to_folder",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "folder_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Upload a file",
                "tags": [
                    "files"
                ]
            }
        },
        "/v1/folders/{folder_id}/folders": {
            "post": {
                "deprecated": false,
                "description": "Creates a folder in the specified context",
                "operationId": "create_folder_folders",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "folder_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "properties": {
                                    "hidden": {
                                        "description": "Flag the folder as hidden",
                                        "type": "boolean"
                                    },
                                    "lock_at": {
                                        "description": "The datetime to lock the folder at",
                                        "format": "date-time",
                                        "type": "string"
                                    },
                                    "locked": {
                                        "description": "Flag the folder as locked",
                                        "type": "boolean"
                                    },
                                    "name": {
                                        "description": "The name of the folder",
                                        "type": "string"
                                    },
                                    "parent_folder_id": {
                                        "description": "The id of the folder to store the file in. If this and parent_folder_path are sent an error will be returned. If neither is given, a default folder will be used.",
                                        "type": "string"
                                    },
                                    "parent_folder_path": {
                                        "description": "The path of the folder to store the new folder in. The path separator is the forward slash `/`, never a back slash. The parent folder will be created if it does not already exist. This parameter only applies to new folders in a context that has folders, such as a user, a course, or a group. If this and parent_folder_id are sent an error will be returned. If neither is given, a default folder will be used.",
                                        "type": "string"
                                    },
                                    "position": {
                                        "description": "Set an explicit sort position for the folder",
                                        "format": "int64",
                                        "type": "integer"
                                    },
                                    "unlock_at": {
                                        "description": "The datetime to unlock the folder at",
                                        "format": "date-time",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "name"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Folder"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Create folder",
                "tags": [
                    "files"
                ]
            }
        },
        "/v1/folders/{id}": {
            "delete": {
                "deprecated": false,
                "description": "Remove the specified folder. You can only delete empty folders unless you\nset the 'force' flag",
                "operationId": "delete_folder",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Set to 'true' to allow deleting a non-empty folder",
                        "in": "query",
                        "name": "force",
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Delete folder",
                "tags": [
                    "files"
                ]
            },
            "get": {
                "deprecated": false,
                "description": "Returns the details for a folder\n\nYou can get the root folder from a context by using 'root' as the :id.\nFor example, you could get the root folder for a course like:",
                "operationId": "get_folder_folders",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Folder"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Get folder",
                "tags": [
                    "files"
                ]
            },
            "put": {
                "deprecated": false,
                "description": "Updates a folder",
                "operationId": "update_folder",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "hidden": {
                                        "description": "Flag the folder as hidden",
                                        "type": "boolean"
                                    },
                                    "lock_at": {
                                        "description": "The datetime to lock the folder at",
                                        "format": "date-time",
                                        "type": "string"
                                    },
                                    "locked": {
                                        "description": "Flag the folder as locked",
                                        "type": "boolean"
                                    },
                                    "name": {
                                        "description": "The new name of the folder",
                                        "type": "string"
                                    },
                                    "parent_folder_id": {
                                        "description": "The id of the folder to move this folder into. The new folder must be in the same context as the original parent folder.",
                                        "type": "string"
                                    },
                                    "position": {
                                        "description": "Set an explicit sort position for the folder",
                                        "format": "int64",
                                        "type": "integer"
                                    },
                                    "unlock_at": {
                                        "description": "The datetime to unlock the folder at",
                                        "format": "date-time",
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Folder"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Update folder",
                "tags": [
                    "files"
                ]
            }
        },
        "/v1/folders/{id}/files": {
            "get": {
                "deprecated": false,
                "description": "Returns the paginated list of files for the folder or course.",
                "operationId": "list_files_folders",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Filter results by content-type. You can specify type/subtype pairs (e.g.,\n'image/jpeg'), or simply types (e.g., 'image', which will match\n'image/gif', 'image/jpeg', etc.).",
                        "explode": false,
                        "in": "query",
                        "name": "content_types",
                        "schema": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The partial name of the files to match and return.",
                        "in": "query",
                        "name": "search_term",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Array of additional information to include.\n\n\"user\":: the user who uploaded the file or last edited its content\n\"usage_rights\":: copyright and license information for the file (see UsageRights)",
                        "explode": false,
                        "in": "query",
                        "name": "include",
                        "schema": {
                            "items": {
                                "type": "string",
                                "enum": [
                                    "user"
                                ]
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "description": "Array of information to restrict to. Overrides include[]\n\n\"names\":: only returns file name information",
                        "explode": false,
                        "in": "query",
                        "name": "only",
                        "schema": {
                            "items": {
                                "items": {
                                    "type": "object"
                                },
                                "type": "array"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "description": "Sort results by this field. Defaults to 'name'. Note that `sort=user` implies `include[]=user`.",
                        "in": "query",
                        "name": "sort",
                        "schema": {
                            "enum": [
                                "name",
                                "size",
                                "created_at",
                                "updated_at",
                                "content_type",
                                "user"
                            ],
                            "type": "string"
                        }
                    },
                    {
                        "description": "The sorting order. Defaults to 'asc'.",
                        "in": "query",
                        "name": "order",
                        "schema": {
                            "enum": [
                                "asc",
                                "desc"
                            ],
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/pageParam"
                    },
                    {
                        "$ref": "#/components/parameters/perPageParam"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/File"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "List files",
                "tags": [
                    "files"
                ]
            }
        },
        "/v1/folders/{id}/folders": {
            "get": {
                "deprecated": false,
                "description": "Returns the paginated list of folders in the folder.",
                "operationId": "list_folders",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/pageParam"
                    },
                    {
                        "$ref": "#/components/parameters/perPageParam"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Folder"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "List folders",
                "tags": [
                    "files"
                ]
            }
        },
        "/v1/global/outcome_groups/{id}": {
            "delete": {
                "deprecated": false,
                "description": "Deleting an outcome group deletes descendant outcome groups and outcome\nlinks. The linked outcomes themselves are only deleted if all links to the\noutcome were deleted.\n\nAligned outcomes cannot be deleted; as such, if all remaining links to an\naligned outcome are included in this group's descendants, the group\ndeletion will fail.",
                "operationId": "delete_outcome_group_global",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OutcomeGroup"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Delete an outcome group",
                "tags": [
                    "outcome_groups"
                ]
            },
            "get": {
                "deprecated": false,
                "operationId": "show_outcome_group_global",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OutcomeGroup"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Show an outcome group",
                "tags": [
                    "outcome_groups"
                ]
            },
            "put": {
                "deprecated": false,
                "description": "Modify an existing outcome group. Fields not provided are left as is;\nunrecognized fields are ignored.\n\nWhen changing the parent outcome group, the new parent group must belong to\nthe same context as this outcome group, and must not be a descendant of\nthis outcome group (i.e. no cycles allowed).",
                "operationId": "update_outcome_group_global",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "description": {
                                        "description": "The new outcome group description.",
                                        "type": "string"
                                    },
                                    "parent_outcome_group_id": {
                                        "description": "The id of the new parent outcome group.",
                                        "format": "int64",
                                        "type": "integer"
                                    },
                                    "title": {
                                        "description": "The new outcome group title.",
                                        "type": "string"
                                    },
                                    "vendor_guid": {
                                        "description": "A custom GUID for the learning standard.",
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OutcomeGroup"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Update an outcome group",
                "tags": [
                    "outcome_groups"
                ]
            }
        },
        "/v1/global/outcome_groups/{id}/import": {
            "post": {
                "deprecated": false,
                "description": "Creates a new subgroup of the outcome group with the same title and\ndescription as the source group, then creates links in that new subgroup to\nthe same outcomes that are linked in the source group. Recurses on the\nsubgroups of the source group, importing them each in turn into the new\nsubgroup.\n\nAllows you to copy organizational structure, but does not create copies of\nthe outcomes themselves, only new links.\n\nThe source group must be either global, from the same context as this\noutcome group, or from an associated account. The source group cannot be\nthe root outcome group of its context.",
                "operationId": "import_outcome_group_global",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "properties": {
                                    "async": {
                                        "description": "If true, perform action asynchronously.  In that case, this endpoint\nwill return a Progress object instead of an OutcomeGroup.\nUse the {api:ProgressController#show progress endpoint}\nto query the status of the operation.  The imported outcome group id\nand url will be returned in the results of the Progress object\nas \"outcome_group_id\" and \"outcome_group_url\"",
                                        "type": "boolean"
                                    },
                                    "source_outcome_group_id": {
                                        "description": "The ID of the source outcome group.",
                                        "format": "int64",
                                        "type": "integer"
                                    }
                                },
                                "required": [
                                    "source_outcome_group_id"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OutcomeGroup"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Import an outcome group",
                "tags": [
                    "outcome_groups"
                ]
            }
        },
        "/v1/global/outcome_groups/{id}/outcomes": {
            "get": {
                "deprecated": false,
                "description": "A paginated list of the immediate OutcomeLink children of the outcome group.",
                "operationId": "list_linked_outcomes_global",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The detail level of the outcomes. Defaults to \"abbrev\".\nSpecify \"full\" for more information.",
                        "in": "query",
                        "name": "outcome_style",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/pageParam"
                    },
                    {
                        "$ref": "#/components/parameters/perPageParam"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/OutcomeLink"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "List linked outcomes",
                "tags": [
                    "outcome_groups"
                ]
            },
            "post": {
                "deprecated": false,
                "description": "Link an outcome into the outcome group. The outcome to link can either be\nspecified by a PUT to the link URL for a specific outcome (the outcome_id\nin the PUT URLs) or by supplying the information for a new outcome (title,\ndescription, ratings, mastery_points) in a POST to the collection.\n\nIf linking an existing outcome, the outcome_id must identify an outcome\navailable to this context; i.e. an outcome owned by this group's context,\nan outcome owned by an associated account, or a global outcome. With\noutcome_id present, any other parameters (except move_from) are ignored.\n\nIf defining a new outcome, the outcome is created in the outcome group's\ncontext using the provided title, description, ratings, and mastery points;\nthe title is required but all other fields are optional. The new outcome\nis then linked into the outcome group.\n\nIf ratings are provided when creating a new outcome, an embedded rubric\ncriterion is included in the new outcome. This criterion's mastery_points\ndefault to the maximum points in the highest rating if not specified in the\nmastery_points parameter. Any ratings lacking a description are given a\ndefault of \"No description\". Any ratings lacking a point value are given a\ndefault of 0. If no ratings are provided, the mastery_points parameter is\nignored.",
                "operationId": "create_link_outcome_global",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "properties": {
                                    "calculation_int": {
                                        "description": "The new calculation int.  Only applies if the calculation_method is \"decaying_average\" or \"n_mastery\"",
                                        "format": "int64",
                                        "type": "integer"
                                    },
                                    "calculation_method": {
                                        "description": "The new calculation method.  Defaults to \"highest\"",
                                        "enum": [
                                            "decaying_average",
                                            "n_mastery",
                                            "latest",
                                            "highest"
                                        ],
                                        "type": "string"
                                    },
                                    "description": {
                                        "description": "The description of the new outcome.",
                                        "type": "string"
                                    },
                                    "display_name": {
                                        "description": "A friendly name shown in reports for outcomes with cryptic titles,\nsuch as common core standards names.",
                                        "type": "string"
                                    },
                                    "mastery_points": {
                                        "description": "The mastery threshold for the embedded rubric criterion.",
                                        "format": "int64",
                                        "type": "integer"
                                    },
                                    "move_from": {
                                        "description": "The ID of the old outcome group. Only used if outcome_id is present.",
                                        "format": "int64",
                                        "type": "integer"
                                    },
                                    "outcome_id": {
                                        "description": "The ID of the existing outcome to link.",
                                        "format": "int64",
                                        "type": "integer"
                                    },
                                    "ratings[description]": {
                                        "description": "The description of a rating level for the embedded rubric criterion.",
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "ratings[points]": {
                                        "description": "The points corresponding to a rating level for the embedded rubric criterion.",
                                        "items": {
                                            "type": "integer"
                                        },
                                        "type": "array"
                                    },
                                    "title": {
                                        "description": "The title of the new outcome. Required if outcome_id is absent.",
                                        "type": "string"
                                    },
                                    "vendor_guid": {
                                        "description": "A custom GUID for the learning standard.",
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OutcomeLink"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Create/link an outcome",
                "tags": [
                    "outcome_groups"
                ]
            }
        },
        "/v1/global/outcome_groups/{id}/outcomes/{outcome_id}": {
            "delete": {
                "deprecated": false,
                "description": "Unlinking an outcome only deletes the outcome itself if this was the last\nlink to the outcome in any group in any context. Aligned outcomes cannot be\ndeleted; as such, if this is the last link to an aligned outcome, the\nunlinking will fail.",
                "operationId": "unlink_outcome_global",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "outcome_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OutcomeLink"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Unlink an outcome",
                "tags": [
                    "outcome_groups"
                ]
            },
            "put": {
                "deprecated": false,
                "description": "Link an outcome into the outcome group. The outcome to link can either be\nspecified by a PUT to the link URL for a specific outcome (the outcome_id\nin the PUT URLs) or by supplying the information for a new outcome (title,\ndescription, ratings, mastery_points) in a POST to the collection.\n\nIf linking an existing outcome, the outcome_id must identify an outcome\navailable to this context; i.e. an outcome owned by this group's context,\nan outcome owned by an associated account, or a global outcome. With\noutcome_id present, any other parameters (except move_from) are ignored.\n\nIf defining a new outcome, the outcome is created in the outcome group's\ncontext using the provided title, description, ratings, and mastery points;\nthe title is required but all other fields are optional. The new outcome\nis then linked into the outcome group.\n\nIf ratings are provided when creating a new outcome, an embedded rubric\ncriterion is included in the new outcome. This criterion's mastery_points\ndefault to the maximum points in the highest rating if not specified in the\nmastery_points parameter. Any ratings lacking a description are given a\ndefault of \"No description\". Any ratings lacking a point value are given a\ndefault of 0. If no ratings are provided, the mastery_points parameter is\nignored.",
                "operationId": "create_link_outcome_global_outcome_id",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The ID of the existing outcome to link.",
                        "in": "path",
                        "name": "outcome_id",
                        "required": true,
                        "schema": {
                            "format": "int64",
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "calculation_int": {
                                        "description": "The new calculation int.  Only applies if the calculation_method is \"decaying_average\" or \"n_mastery\"",
                                        "format": "int64",
                                        "type": "integer"
                                    },
                                    "calculation_method": {
                                        "description": "The new calculation method.  Defaults to \"highest\"",
                                        "enum": [
                                            "decaying_average",
                                            "n_mastery",
                                            "latest",
                                            "highest"
                                        ],
                                        "type": "string"
                                    },
                                    "description": {
                                        "description": "The description of the new outcome.",
                                        "type": "string"
                                    },
                                    "display_name": {
                                        "description": "A friendly name shown in reports for outcomes with cryptic titles,\nsuch as common core standards names.",
                                        "type": "string"
                                    },
                                    "mastery_points": {
                                        "description": "The mastery threshold for the embedded rubric criterion.",
                                        "format": "int64",
                                        "type": "integer"
                                    },
                                    "move_from": {
                                        "description": "The ID of the old outcome group. Only used if outcome_id is present.",
                                        "format": "int64",
                                        "type": "integer"
                                    },
                                    "ratings[description]": {
                                        "description": "The description of a rating level for the embedded rubric criterion.",
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "ratings[points]": {
                                        "description": "The points corresponding to a rating level for the embedded rubric criterion.",
                                        "items": {
                                            "type": "integer"
                                        },
                                        "type": "array"
                                    },
                                    "title": {
                                        "description": "The title of the new outcome. Required if outcome_id is absent.",
                                        "type": "string"
                                    },
                                    "vendor_guid": {
                                        "description": "A custom GUID for the learning standard.",
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OutcomeLink"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Create/link an outcome",
                "tags": [
                    "outcome_groups"
                ]
            }
        },
        "/v1/global/outcome_groups/{id}/subgroups": {
            "get": {
                "deprecated": false,
                "description": "A paginated list of the immediate OutcomeGroup children of the outcome group.",
                "operationId": "list_subgroups_global",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/pageParam"
                    },
                    {
                        "$ref": "#/components/parameters/perPageParam"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/OutcomeGroup"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "List subgroups",
                "tags": [
                    "outcome_groups"
                ]
            },
            "post": {
                "deprecated": false,
                "description": "Creates a new empty subgroup under the outcome group with the given title\nand description.",
                "operationId": "create_subgroup_global",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "properties": {
                                    "description": {
                                        "description": "The description of the new outcome group.",
                                        "type": "string"
                                    },
                                    "title": {
                                        "description": "The title of the new outcome group.",
                                        "type": "string"
                                    },
                                    "vendor_guid": {
                                        "description": "A custom GUID for the learning standard",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "title"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/OutcomeGroup"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Create a subgroup",
                "tags": [
                    "outcome_groups"
                ]
            }
        },
        "/v1/global/root_outcome_group": {
            "get": {
                "deprecated": false,
                "description": "Convenience redirect to find the root outcome group for a particular\ncontext. Will redirect to the appropriate outcome group's URL.",
                "operationId": "redirect_to_root_outcome_group_for_context_global",
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Redirect to root outcome group for context",
                "tags": [
                    "outcome_groups"
                ]
            }
        },
        "/v1/group_categories/{group_category_id}": {
            "delete": {
                "deprecated": false,
                "description": "Deletes a group category and all groups under it. Protected group\ncategories can not be deleted, i.e. \"communities\" and \"student_organized\".",
                "operationId": "delete_group_category",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "group_category_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Delete a Group Category",
                "tags": [
                    "group_categories"
                ]
            },
            "get": {
                "deprecated": false,
                "description": "Returns the data for a single group category, or a 401 if the caller doesn't have\nthe rights to see it.",
                "operationId": "get_single_group_category",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "group_category_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GroupCategory"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Get a single group category",
                "tags": [
                    "group_categories"
                ]
            },
            "put": {
                "deprecated": false,
                "description": "Modifies an existing group category.",
                "operationId": "update_group_category",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "group_category_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "auto_leader": {
                                        "description": "Assigns group leaders automatically when generating and allocating students to groups\nValid values are:\n\"first\":: the first student to be allocated to a group is the leader\n\"random\":: a random student from all members is chosen as the leader",
                                        "enum": [
                                            "first",
                                            "random"
                                        ],
                                        "type": "string"
                                    },
                                    "create_group_count": {
                                        "description": "Create this number of groups (Course Only).",
                                        "format": "int64",
                                        "type": "integer"
                                    },
                                    "group_limit": {
                                        "description": "Limit the maximum number of users in each group (Course Only). Requires\nself signup.",
                                        "format": "int64",
                                        "type": "integer"
                                    },
                                    "name": {
                                        "description": "Name of the group category",
                                        "type": "string"
                                    },
                                    "self_signup": {
                                        "description": "Allow students to sign up for a group themselves (Course Only).\nValid values are:\n\"enabled\":: allows students to self sign up for any group in course\n\"restricted\":: allows students to self sign up only for groups in the\n               same section null disallows self sign up",
                                        "enum": [
                                            "enabled",
                                            "restricted"
                                        ],
                                        "type": "string"
                                    },
                                    "sis_group_category_id": {
                                        "description": "The unique SIS identifier.",
                                        "type": "string"
                                    },
                                    "split_group_count": {
                                        "description": "(Deprecated)\nCreate this number of groups, and evenly distribute students\namong them. not allowed with \"enable_self_signup\". because\nthe group assignment happens synchronously, it's recommended\nthat you instead use the assign_unassigned_members endpoint.\n(Course Only)",
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GroupCategory"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Update a Group Category",
                "tags": [
                    "group_categories"
                ]
            }
        },
        "/v1/group_categories/{group_category_id}/assign_unassigned_members": {
            "post": {
                "deprecated": false,
                "description": "Assign all unassigned members as evenly as possible among the existing\nstudent groups.",
                "operationId": "assign_unassigned_members",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "group_category_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "properties": {
                                    "sync": {
                                        "description": "The assigning is done asynchronously by default. If you would like to\noverride this and have the assigning done synchronously, set this value\nto true.",
                                        "type": "boolean"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GroupMembership"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Assign unassigned members",
                "tags": [
                    "group_categories"
                ]
            }
        },
        "/v1/group_categories/{group_category_id}/groups": {
            "post": {
                "deprecated": false,
                "description": "Creates a new group. Groups created using the \"/api/v1/groups/\"\nendpoint will be community groups.",
                "operationId": "create_group_group_categories",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "group_category_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "properties": {
                                    "description": {
                                        "description": "A description of the group",
                                        "type": "string"
                                    },
                                    "is_public": {
                                        "description": "whether the group is public (applies only to community groups)",
                                        "type": "boolean"
                                    },
                                    "join_level": {
                                        "description": "no description",
                                        "enum": [
                                            "parent_context_auto_join",
                                            "parent_context_request",
                                            "invitation_only"
                                        ],
                                        "type": "string"
                                    },
                                    "name": {
                                        "description": "The name of the group",
                                        "type": "string"
                                    },
                                    "sis_group_id": {
                                        "description": "The sis ID of the group. Must have manage_sis permission to set.",
                                        "type": "string"
                                    },
                                    "storage_quota_mb": {
                                        "description": "The allowed file storage for the group, in megabytes. This parameter is\nignored if the caller does not have the manage_storage_quotas permission.",
                                        "format": "int64",
                                        "type": "integer"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Group"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Create a group",
                "tags": [
                    "groups"
                ]
            }
        },
        "/v1/group_categories/{group_category_id}/users": {
            "get": {
                "deprecated": false,
                "description": "Returns a paginated list of users in the group category.",
                "operationId": "list_users_in_group_category",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "group_category_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The partial name or full ID of the users to match and return in the results\nlist. Must be at least 3 characters.",
                        "in": "query",
                        "name": "search_term",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Set this value to true if you wish only to search unassigned users in the\ngroup category.",
                        "in": "query",
                        "name": "unassigned",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/pageParam"
                    },
                    {
                        "$ref": "#/components/parameters/perPageParam"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/User"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "List users in group category",
                "tags": [
                    "group_categories"
                ]
            }
        },
        "/v1/groups": {
            "post": {
                "deprecated": false,
                "description": "Creates a new group. Groups created using the \"/api/v1/groups/\"\nendpoint will be community groups.",
                "operationId": "create_group_groups",
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "properties": {
                                    "description": {
                                        "description": "A description of the group",
                                        "type": "string"
                                    },
                                    "is_public": {
                                        "description": "whether the group is public (applies only to community groups)",
                                        "type": "boolean"
                                    },
                                    "join_level": {
                                        "description": "no description",
                                        "enum": [
                                            "parent_context_auto_join",
                                            "parent_context_request",
                                            "invitation_only"
                                        ],
                                        "type": "string"
                                    },
                                    "name": {
                                        "description": "The name of the group",
                                        "type": "string"
                                    },
                                    "sis_group_id": {
                                        "description": "The sis ID of the group. Must have manage_sis permission to set.",
                                        "type": "string"
                                    },
                                    "storage_quota_mb": {
                                        "description": "The allowed file storage for the group, in megabytes. This parameter is\nignored if the caller does not have the manage_storage_quotas permission.",
                                        "format": "int64",
                                        "type": "integer"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Group"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Create a group",
                "tags": [
                    "groups"
                ]
            }
        },
        "/v1/groups/{group_id}": {
            "delete": {
                "deprecated": false,
                "description": "Deletes a group and removes all members.",
                "operationId": "delete_group",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "group_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Group"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Delete a group",
                "tags": [
                    "groups"
                ]
            },
            "get": {
                "deprecated": false,
                "description": "Returns the data for a single group, or a 401 if the caller doesn't have\nthe rights to see it.",
                "operationId": "get_single_group",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "group_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "- \"permissions\": Include permissions the current user has\n  for the group.\n- \"tabs\": Include the list of tabs configured for each group.  See the\n  {api:TabsController#index List available tabs API} for more information.",
                        "explode": false,
                        "in": "query",
                        "name": "include",
                        "schema": {
                            "items": {
                                "type": "string",
                                "enum": [
                                    "permissions",
                                    "tabs"
                                ]
                            },
                            "type": "array"
                        },
                        "style": "form"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Group"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Get a single group",
                "tags": [
                    "groups"
                ]
            },
            "put": {
                "deprecated": false,
                "description": "Modifies an existing group.  Note that to set an avatar image for the\ngroup, you must first upload the image file to the group, and the use the\nid in the response as the argument to this function.  See the\n{file:file_uploads.html File Upload Documentation} for details on the file\nupload workflow.",
                "operationId": "edit_group",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "group_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "avatar_id": {
                                        "description": "The id of the attachment previously uploaded to the group that you would\nlike to use as the avatar image for this group.",
                                        "format": "int64",
                                        "type": "integer"
                                    },
                                    "description": {
                                        "description": "A description of the group",
                                        "type": "string"
                                    },
                                    "is_public": {
                                        "description": "Whether the group is public (applies only to community groups). Currently\nyou cannot set a group back to private once it has been made public.",
                                        "type": "boolean"
                                    },
                                    "join_level": {
                                        "description": "no description",
                                        "enum": [
                                            "parent_context_auto_join",
                                            "parent_context_request",
                                            "invitation_only"
                                        ],
                                        "type": "string"
                                    },
                                    "members": {
                                        "description": "An array of user ids for users you would like in the group.\nUsers not in the group will be sent invitations. Existing group\nmembers who aren't in the list will be removed from the group.",
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "name": {
                                        "description": "The name of the group",
                                        "type": "string"
                                    },
                                    "sis_group_id": {
                                        "description": "The sis ID of the group. Must have manage_sis permission to set.",
                                        "type": "string"
                                    },
                                    "storage_quota_mb": {
                                        "description": "The allowed file storage for the group, in megabytes. This parameter is\nignored if the caller does not have the manage_storage_quotas permission.",
                                        "format": "int64",
                                        "type": "integer"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Group"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Edit a group",
                "tags": [
                    "groups"
                ]
            }
        },
        "/v1/groups/{group_id}/activity_stream": {
            "get": {
                "deprecated": false,
                "description": "Returns the current user's group-specific activity stream, paginated.\n\nFor full documentation, see the API documentation for the user activity\nstream, in the user api.",
                "operationId": "group_activity_stream",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "group_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/pageParam"
                    },
                    {
                        "$ref": "#/components/parameters/perPageParam"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Group activity stream",
                "tags": [
                    "groups"
                ]
            }
        },
        "/v1/groups/{group_id}/activity_stream/summary": {
            "get": {
                "deprecated": false,
                "description": "Returns a summary of the current user's group-specific activity stream.\n\nFor full documentation, see the API documentation for the user activity\nstream summary, in the user api.",
                "operationId": "group_activity_stream_summary",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "group_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Group activity stream summary",
                "tags": [
                    "groups"
                ]
            }
        },
        "/v1/groups/{group_id}/assignments/{assignment_id}/override": {
            "get": {
                "deprecated": false,
                "description": "Responds with a redirect to the override for the given group, if any\n(404 otherwise).",
                "operationId": "redirect_to_assignment_override_for_group",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "group_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "assignment_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Redirect to the assignment override for a group",
                "tags": [
                    "assignments"
                ]
            }
        },
        "/v1/groups/{group_id}/collaborations": {
            "get": {
                "deprecated": false,
                "description": "A paginated list of collaborations the current user has access to in the\ncontext of the course provided in the url. NOTE: this only returns\nExternalToolCollaboration type collaborations.\n\n  curl https://<canvas>/api/v1/courses/1/collaborations/",
                "operationId": "list_collaborations_groups",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "group_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/pageParam"
                    },
                    {
                        "$ref": "#/components/parameters/perPageParam"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Collaboration"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "List collaborations",
                "tags": [
                    "collaborations"
                ]
            }
        },
        "/v1/groups/{group_id}/conferences": {
            "get": {
                "deprecated": false,
                "description": "Retrieve the paginated list of conferences for this context\n\nThis API returns a JSON object containing the list of conferences,\nthe key for the list of conferences is \"conferences\"",
                "operationId": "list_conferences_groups",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "group_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/pageParam"
                    },
                    {
                        "$ref": "#/components/parameters/perPageParam"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Conference"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "List conferences",
                "tags": [
                    "conferences"
                ]
            }
        },
        "/v1/groups/{group_id}/content_exports": {
            "get": {
                "deprecated": false,
                "description": "A paginated list of the past and pending content export jobs for a course,\ngroup, or user. Exports are returned newest first.",
                "operationId": "list_content_exports_groups",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "group_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/pageParam"
                    },
                    {
                        "$ref": "#/components/parameters/perPageParam"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/ContentExport"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "List content exports",
                "tags": [
                    "content_exports"
                ]
            },
            "post": {
                "deprecated": false,
                "description": "Begin a content export job for a course, group, or user.\n\nYou can use the {api:ProgressController#show Progress API} to track the\nprogress of the export. The migration's progress is linked to with the\n_progress_url_ value.\n\nWhen the export completes, use the {api:ContentExportsApiController#show Show content export} endpoint\nto retrieve a download URL for the exported content.",
                "operationId": "export_content_groups",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "group_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "properties": {
                                    "export_type": {
                                        "description": "\"common_cartridge\":: Export the contents of the course in the Common Cartridge (.imscc) format\n\"qti\":: Export quizzes from a course in the QTI format\n\"zip\":: Export files from a course, group, or user in a zip file",
                                        "enum": [
                                            "common_cartridge",
                                            "qti",
                                            "zip"
                                        ],
                                        "type": "string"
                                    },
                                    "select": {
                                        "description": "The select parameter allows exporting specific data. The keys are object types like 'files',\n'folders', 'pages', etc. The value for each key is a list of object ids. An id can be an\ninteger or a string.\n\nMultiple object types can be selected in the same call. However, not all object types are\nvalid for every export_type. Common Cartridge supports all object types. Zip and QTI only\nsupport the object types as described below.\n\n\"folders\":: Also supported for zip export_type.\n\"files\":: Also supported for zip export_type.\n\"quizzes\":: Also supported for qti export_type.",
                                        "enum": [
                                            "folders",
                                            "files",
                                            "attachments",
                                            "quizzes",
                                            "assignments",
                                            "announcements",
                                            "calendar_events",
                                            "discussion_topics",
                                            "modules",
                                            "module_items",
                                            "pages",
                                            "rubrics"
                                        ]
                                    },
                                    "skip_notifications": {
                                        "description": "Don't send the notifications about the export to the user. Default: false",
                                        "type": "boolean"
                                    }
                                },
                                "required": [
                                    "export_type"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ContentExport"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Export content",
                "tags": [
                    "content_exports"
                ]
            }
        },
        "/v1/groups/{group_id}/content_exports/{id}": {
            "get": {
                "deprecated": false,
                "description": "Get information about a single content export.",
                "operationId": "show_content_export_groups",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "group_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ContentExport"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Show content export",
                "tags": [
                    "content_exports"
                ]
            }
        },
        "/v1/groups/{group_id}/content_licenses": {
            "get": {
                "deprecated": false,
                "description": "A paginated list of licenses that can be applied",
                "operationId": "list_licenses_groups",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "group_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/pageParam"
                    },
                    {
                        "$ref": "#/components/parameters/perPageParam"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/License"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "List licenses",
                "tags": [
                    "files"
                ]
            }
        },
        "/v1/groups/{group_id}/content_migrations": {
            "get": {
                "deprecated": false,
                "description": "Returns paginated content migrations",
                "operationId": "list_content_migrations_groups",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "group_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/pageParam"
                    },
                    {
                        "$ref": "#/components/parameters/perPageParam"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/ContentMigration"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "List content migrations",
                "tags": [
                    "content_migrations"
                ]
            },
            "post": {
                "deprecated": false,
                "description": "Create a content migration. If the migration requires a file to be uploaded\nthe actual processing of the file will start once the file upload process is completed.\nFile uploading works as described in the {file:file_uploads.html File Upload Documentation}\nexcept that the values are set on a *pre_attachment* sub-hash.\n\nFor migrations that don't require a file to be uploaded, like course copy, the\nprocessing will begin as soon as the migration is created.\n\nYou can use the {api:ProgressController#show Progress API} to track the\nprogress of the migration. The migration's progress is linked to with the\n_progress_url_ value.\n\nThe two general workflows are:\n\nIf no file upload is needed:\n\n1. POST to create\n2. Use the {api:ProgressController#show Progress} specified in _progress_url_ to monitor progress\n\nFor file uploading:\n\n1. POST to create with file info in *pre_attachment*\n2. Do {file:file_uploads.html file upload processing} using the data in the *pre_attachment* data\n3. {api:ContentMigrationsController#show GET} the ContentMigration\n4. Use the {api:ProgressController#show Progress} specified in _progress_url_ to monitor progress\n\n (required if doing .zip file upload)",
                "operationId": "create_content_migration_groups",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "group_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "properties": {
                                    "date_shift_options[day_substitutions][X]": {
                                        "description": "Move anything scheduled for day 'X' to the specified day. (0-Sunday,\n1-Monday, 2-Tuesday, 3-Wednesday, 4-Thursday, 5-Friday, 6-Saturday)",
                                        "format": "int64",
                                        "type": "integer"
                                    },
                                    "date_shift_options[new_end_date]": {
                                        "description": "The new end date for the source content/course",
                                        "format": "date",
                                        "type": "string"
                                    },
                                    "date_shift_options[new_start_date]": {
                                        "description": "The new start date for the content/course",
                                        "format": "date",
                                        "type": "string"
                                    },
                                    "date_shift_options[old_end_date]": {
                                        "description": "The original end date of the source content/course",
                                        "format": "date",
                                        "type": "string"
                                    },
                                    "date_shift_options[old_start_date]": {
                                        "description": "The original start date of the source content/course",
                                        "format": "date",
                                        "type": "string"
                                    },
                                    "date_shift_options[remove_dates]": {
                                        "description": "Whether to remove dates in the copied course. Cannot be used\nin conjunction with *shift_dates*.",
                                        "type": "boolean"
                                    },
                                    "date_shift_options[shift_dates]": {
                                        "description": "Whether to shift dates in the copied course",
                                        "type": "boolean"
                                    },
                                    "migration_type": {
                                        "description": "The type of the migration. Use the\n{api:ContentMigrationsController#available_migrators Migrator} endpoint to\nsee all available migrators. Default allowed values:\ncanvas_cartridge_importer, common_cartridge_importer,\ncourse_copy_importer, zip_file_importer, qti_converter, moodle_converter",
                                        "type": "string"
                                    },
                                    "pre_attachment[name]": {
                                        "description": "Required if uploading a file. This is the first step in uploading a file\nto the content migration. See the {file:file_uploads.html File Upload\nDocumentation} for details on the file upload workflow.",
                                        "type": "string"
                                    },
                                    "pre_attachment[todo]": {
                                        "description": "Other file upload properties, See {file:file_uploads.html File Upload\nDocumentation}",
                                        "type": "string"
                                    },
                                    "settings[file_url]": {
                                        "description": "A URL to download the file from. Must not require authentication.",
                                        "type": "string"
                                    },
                                    "settings[folder_id]": {
                                        "description": "The folder to unzip the .zip file into for a zip_file_import.",
                                        "type": "string"
                                    },
                                    "settings[overwrite_quizzes]": {
                                        "description": "Whether to overwrite quizzes with the same identifiers between content\npackages.",
                                        "type": "boolean"
                                    },
                                    "settings[question_bank_id]": {
                                        "description": "The existing question bank ID to import questions into if not specified in\nthe content package.",
                                        "format": "int64",
                                        "type": "integer"
                                    },
                                    "settings[question_bank_name]": {
                                        "description": "The question bank to import questions into if not specified in the content\npackage, if both bank id and name are set, id will take precedence.",
                                        "type": "string"
                                    },
                                    "settings[source_course_id]": {
                                        "description": "The course to copy from for a course copy migration. (required if doing\ncourse copy)",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "migration_type"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ContentMigration"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Create a content migration",
                "tags": [
                    "content_migrations"
                ]
            }
        },
        "/v1/groups/{group_id}/content_migrations/migrators": {
            "get": {
                "deprecated": false,
                "description": "Lists the currently available migration types. These values may change.",
                "operationId": "list_migration_systems_groups",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "group_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Migrator"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "List Migration Systems",
                "tags": [
                    "content_migrations"
                ]
            }
        },
        "/v1/groups/{group_id}/content_migrations/{content_migration_id}/migration_issues": {
            "get": {
                "deprecated": false,
                "description": "Returns paginated migration issues",
                "operationId": "list_migration_issues_groups",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "group_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "content_migration_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/pageParam"
                    },
                    {
                        "$ref": "#/components/parameters/perPageParam"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/MigrationIssue"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "List migration issues",
                "tags": [
                    "content_migrations"
                ]
            }
        },
        "/v1/groups/{group_id}/content_migrations/{content_migration_id}/migration_issues/{id}": {
            "get": {
                "deprecated": false,
                "description": "Returns data on an individual migration issue",
                "operationId": "get_migration_issue_groups",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "group_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "content_migration_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MigrationIssue"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Get a migration issue",
                "tags": [
                    "content_migrations"
                ]
            },
            "put": {
                "deprecated": false,
                "description": "Update the workflow_state of a migration issue",
                "operationId": "update_migration_issue_groups",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "group_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "content_migration_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "workflow_state": {
                                        "description": "Set the workflow_state of the issue.",
                                        "enum": [
                                            "active",
                                            "resolved"
                                        ],
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "workflow_state"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MigrationIssue"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Update a migration issue",
                "tags": [
                    "content_migrations"
                ]
            }
        },
        "/v1/groups/{group_id}/content_migrations/{id}": {
            "get": {
                "deprecated": false,
                "description": "Returns data on an individual content migration",
                "operationId": "get_content_migration_groups",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "group_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ContentMigration"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Get a content migration",
                "tags": [
                    "content_migrations"
                ]
            },
            "put": {
                "deprecated": false,
                "description": "Update a content migration. Takes same arguments as create except that you\ncan't change the migration type. However, changing most settings after the\nmigration process has started will not do anything. Generally updating the\ncontent migration will be used when there is a file upload problem. If the\nfirst upload has a problem you can supply new _pre_attachment_ values to\nstart the process again.",
                "operationId": "update_content_migration_groups",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "group_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ContentMigration"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Update a content migration",
                "tags": [
                    "content_migrations"
                ]
            }
        },
        "/v1/groups/{group_id}/discussion_topics": {
            "get": {
                "deprecated": false,
                "description": "Returns the paginated list of discussion topics for this course or group.",
                "operationId": "list_discussion_topics_groups",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "group_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "If \"all_dates\" is passed, all dates associated with graded discussions'\nassignments will be included.\nif \"sections\" is passed, includes the course sections that are associated\nwith the topic, if the topic is specific to certain sections of the course.\nIf \"sections_user_count\" is passed, then:\n  (a) If sections were asked for *and* the topic is specific to certain\n      course sections, includes the number of users in each\n      section. (as part of the section json asked for above)\n  (b) Else, includes at the root level the total number of users in the\n      topic's context (group or course) that the topic applies to.\nIf \"overrides\" is passed, the overrides for the assignment will be included",
                        "explode": false,
                        "in": "query",
                        "name": "include",
                        "schema": {
                            "items": {
                                "type": "string",
                                "enum": [
                                    "all_dates",
                                    "sections",
                                    "sections_user_count",
                                    "overrides"
                                ]
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "description": "Determines the order of the discussion topic list. Defaults to \"position\".",
                        "in": "query",
                        "name": "order_by",
                        "schema": {
                            "enum": [
                                "position",
                                "recent_activity",
                                "title"
                            ],
                            "type": "string"
                        }
                    },
                    {
                        "description": "Only return discussion topics in the given state(s). Defaults to including\nall topics. Filtering is done after pagination, so pages\nmay be smaller than requested if topics are filtered.\nCan pass multiple states as comma separated string.",
                        "in": "query",
                        "name": "scope",
                        "schema": {
                            "enum": [
                                "locked",
                                "unlocked",
                                "pinned",
                                "unpinned"
                            ],
                            "type": "string"
                        }
                    },
                    {
                        "description": "Return announcements instead of discussion topics. Defaults to false",
                        "in": "query",
                        "name": "only_announcements",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "description": "The state of the discussion topic to return. Currently only supports unread state.",
                        "in": "query",
                        "name": "filter_by",
                        "schema": {
                            "enum": [
                                "all",
                                "unread"
                            ],
                            "type": "string"
                        }
                    },
                    {
                        "description": "The partial title of the discussion topics to match and return.",
                        "in": "query",
                        "name": "search_term",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "For students, exclude topics that are locked by module progression.\nDefaults to false.",
                        "in": "query",
                        "name": "exclude_context_module_locked_topics",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/pageParam"
                    },
                    {
                        "$ref": "#/components/parameters/perPageParam"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/DiscussionTopic"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "List discussion topics",
                "tags": [
                    "discussion_topics"
                ]
            },
            "post": {
                "deprecated": false,
                "description": "Create an new discussion topic for the course or group.",
                "operationId": "create_new_discussion_topic_groups",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "group_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "properties": {
                                    "allow_rating": {
                                        "description": "Whether or not users can rate entries in this topic.",
                                        "type": "boolean"
                                    },
                                    "assignment": {
                                        "description": "To create an assignment discussion, pass the assignment parameters as a\nsub-object. See the {api:AssignmentsApiController#create Create an Assignment API}\nfor the available parameters. The name parameter will be ignored, as it's\ntaken from the discussion title. If you want to make a discussion that was\nan assignment NOT an assignment, pass set_assignment = false as part of\nthe assignment object"
                                    },
                                    "attachment": {
                                        "description": "A application/x-www-form-urlencoded form-field-style attachment.\nAttachments larger than 1 kilobyte are subject to quota restrictions.",
                                        "format": "binary",
                                        "type": "string"
                                    },
                                    "delayed_post_at": {
                                        "description": "If a timestamp is given, the topic will not be published until that time.",
                                        "format": "date-time",
                                        "type": "string"
                                    },
                                    "discussion_type": {
                                        "description": "The type of discussion. Defaults to side_comment if not value is given. Accepted values are 'side_comment', for discussions that only allow one level of nested comments, and 'threaded' for fully threaded discussions.",
                                        "enum": [
                                            "side_comment",
                                            "threaded"
                                        ],
                                        "type": "string"
                                    },
                                    "group_category_id": {
                                        "description": "If present, the topic will become a group discussion assigned\nto the group.",
                                        "format": "int64",
                                        "type": "integer"
                                    },
                                    "is_announcement": {
                                        "description": "If true, this topic is an announcement. It will appear in the\nannouncement's section rather than the discussions section. This requires\nannouncment-posting permissions.",
                                        "type": "boolean"
                                    },
                                    "lock_at": {
                                        "description": "If a timestamp is given, the topic will be scheduled to lock at the\nprovided timestamp. If the timestamp is in the past, the topic will be\nlocked.",
                                        "format": "date-time",
                                        "type": "string"
                                    },
                                    "message": {
                                        "description": "no description",
                                        "type": "string"
                                    },
                                    "only_graders_can_rate": {
                                        "description": "If true, only graders will be allowed to rate entries.",
                                        "type": "boolean"
                                    },
                                    "pinned": {
                                        "description": "If true, this topic will be listed in the \"Pinned Discussion\" section",
                                        "type": "boolean"
                                    },
                                    "podcast_enabled": {
                                        "description": "If true, the topic will have an associated podcast feed.",
                                        "type": "boolean"
                                    },
                                    "podcast_has_student_posts": {
                                        "description": "If true, the podcast will include posts from students as well. Implies\npodcast_enabled.",
                                        "type": "boolean"
                                    },
                                    "position_after": {
                                        "description": "By default, discussions are sorted chronologically by creation date, you\ncan pass the id of another topic to have this one show up after the other\nwhen they are listed.",
                                        "type": "string"
                                    },
                                    "published": {
                                        "description": "Whether this topic is published (true) or draft state (false). Only\nteachers and TAs have the ability to create draft state topics.",
                                        "type": "boolean"
                                    },
                                    "require_initial_post": {
                                        "description": "If true then a user may not respond to other replies until that user has\nmade an initial reply. Defaults to false.",
                                        "type": "boolean"
                                    },
                                    "sort_by_rating": {
                                        "description": "If true, entries will be sorted by rating.",
                                        "type": "boolean"
                                    },
                                    "specific_sections": {
                                        "description": "A comma-separated list of sections ids to which the discussion topic\nshould be made specific too.  If it is not desired to make the discussion\ntopic specific to sections, then this parameter may be omitted or set to\n\"all\".  Can only be present only on announcements and only those that are\nfor a course (as opposed to a group).",
                                        "type": "string"
                                    },
                                    "title": {
                                        "description": "no description",
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Create a new discussion topic",
                "tags": [
                    "discussion_topics"
                ]
            }
        },
        "/v1/groups/{group_id}/discussion_topics/reorder": {
            "post": {
                "deprecated": false,
                "description": "Puts the pinned discussion topics in the specified order.\nAll pinned topics should be included.",
                "operationId": "reorder_pinned_topics_groups",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "group_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "properties": {
                                    "order": {
                                        "description": "The ids of the pinned discussion topics in the desired order.\n(For example, \"order=104,102,103\".)",
                                        "items": {
                                            "type": "integer"
                                        },
                                        "type": "array"
                                    }
                                },
                                "required": [
                                    "order"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Reorder pinned topics",
                "tags": [
                    "discussion_topics"
                ]
            }
        },
        "/v1/groups/{group_id}/discussion_topics/{topic_id}": {
            "delete": {
                "deprecated": false,
                "description": "Deletes the discussion topic. This will also delete the assignment, if it's\nan assignment discussion.",
                "operationId": "delete_topic_groups",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "group_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "topic_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Delete a topic",
                "tags": [
                    "discussion_topics"
                ]
            },
            "get": {
                "deprecated": false,
                "description": "Returns data on an individual discussion topic. See the List action for the response formatting.",
                "operationId": "get_single_topic_groups",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "group_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "topic_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "If \"all_dates\" is passed, all dates associated with graded discussions'\nassignments will be included.\nif \"sections\" is passed, includes the course sections that are associated\nwith the topic, if the topic is specific to certain sections of the course.\nIf \"sections_user_count\" is passed, then:\n  (a) If sections were asked for *and* the topic is specific to certain\n      course sections, includes the number of users in each\n      section. (as part of the section json asked for above)\n  (b) Else, includes at the root level the total number of users in the\n      topic's context (group or course) that the topic applies to.\nIf \"overrides\" is passed, the overrides for the assignment will be included",
                        "explode": false,
                        "in": "query",
                        "name": "include",
                        "schema": {
                            "items": {
                                "type": "string",
                                "enum": [
                                    "all_dates",
                                    "sections",
                                    "sections_user_count",
                                    "overrides"
                                ]
                            },
                            "type": "array"
                        },
                        "style": "form"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Get a single topic",
                "tags": [
                    "discussion_topics"
                ]
            },
            "put": {
                "deprecated": false,
                "description": "Update an existing discussion topic for the course or group.",
                "operationId": "update_topic_groups",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "group_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "topic_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "allow_rating": {
                                        "description": "If true, users will be allowed to rate entries.",
                                        "type": "boolean"
                                    },
                                    "assignment": {
                                        "description": "To create an assignment discussion, pass the assignment parameters as a\nsub-object. See the {api:AssignmentsApiController#create Create an Assignment API}\nfor the available parameters. The name parameter will be ignored, as it's\ntaken from the discussion title. If you want to make a discussion that was\nan assignment NOT an assignment, pass set_assignment = false as part of\nthe assignment object"
                                    },
                                    "delayed_post_at": {
                                        "description": "If a timestamp is given, the topic will not be published until that time.",
                                        "format": "date-time",
                                        "type": "string"
                                    },
                                    "discussion_type": {
                                        "description": "The type of discussion. Defaults to side_comment if not value is given. Accepted values are 'side_comment', for discussions that only allow one level of nested comments, and 'threaded' for fully threaded discussions.",
                                        "enum": [
                                            "side_comment",
                                            "threaded"
                                        ],
                                        "type": "string"
                                    },
                                    "group_category_id": {
                                        "description": "If present, the topic will become a group discussion assigned\nto the group.",
                                        "format": "int64",
                                        "type": "integer"
                                    },
                                    "is_announcement": {
                                        "description": "If true, this topic is an announcement. It will appear in the\nannouncement's section rather than the discussions section. This requires\nannouncment-posting permissions.",
                                        "type": "boolean"
                                    },
                                    "lock_at": {
                                        "description": "If a timestamp is given, the topic will be scheduled to lock at the\nprovided timestamp. If the timestamp is in the past, the topic will be\nlocked.",
                                        "format": "date-time",
                                        "type": "string"
                                    },
                                    "message": {
                                        "description": "no description",
                                        "type": "string"
                                    },
                                    "only_graders_can_rate": {
                                        "description": "If true, only graders will be allowed to rate entries.",
                                        "type": "boolean"
                                    },
                                    "pinned": {
                                        "description": "If true, this topic will be listed in the \"Pinned Discussion\" section",
                                        "type": "boolean"
                                    },
                                    "podcast_enabled": {
                                        "description": "If true, the topic will have an associated podcast feed.",
                                        "type": "boolean"
                                    },
                                    "podcast_has_student_posts": {
                                        "description": "If true, the podcast will include posts from students as well. Implies\npodcast_enabled.",
                                        "type": "boolean"
                                    },
                                    "position_after": {
                                        "description": "By default, discussions are sorted chronologically by creation date, you\ncan pass the id of another topic to have this one show up after the other\nwhen they are listed.",
                                        "type": "string"
                                    },
                                    "published": {
                                        "description": "Whether this topic is published (true) or draft state (false). Only\nteachers and TAs have the ability to create draft state topics.",
                                        "type": "boolean"
                                    },
                                    "require_initial_post": {
                                        "description": "If true then a user may not respond to other replies until that user has\nmade an initial reply. Defaults to false.",
                                        "type": "boolean"
                                    },
                                    "sort_by_rating": {
                                        "description": "If true, entries will be sorted by rating.",
                                        "type": "boolean"
                                    },
                                    "specific_sections": {
                                        "description": "A comma-separated list of sections ids to which the discussion topic\nshould be made specific too.  If it is not desired to make the discussion\ntopic specific to sections, then this parameter may be omitted or set to\n\"all\".  Can only be present only on announcements and only those that are\nfor a course (as opposed to a group).",
                                        "type": "string"
                                    },
                                    "title": {
                                        "description": "no description",
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Update a topic",
                "tags": [
                    "discussion_topics"
                ]
            }
        },
        "/v1/groups/{group_id}/discussion_topics/{topic_id}/entries": {
            "get": {
                "deprecated": false,
                "description": "Retrieve the (paginated) top-level entries in a discussion topic.\n\nMay require (depending on the topic) that the user has posted in the topic.\nIf it is required, and the user has not posted, will respond with a 403\nForbidden status and the body 'require_initial_post'.\n\nWill include the 10 most recent replies, if any, for each entry returned.\n\nIf the topic is a root topic with children corresponding to groups of a\ngroup assignment, entries from those subtopics for which the user belongs\nto the corresponding group will be returned.\n\nOrdering of returned entries is newest-first by posting timestamp (reply\nactivity is ignored).",
                "operationId": "list_topic_entries_groups",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "group_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "topic_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/pageParam"
                    },
                    {
                        "$ref": "#/components/parameters/perPageParam"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "List topic entries",
                "tags": [
                    "discussion_topics"
                ]
            },
            "post": {
                "deprecated": false,
                "description": "Create a new entry in a discussion topic. Returns a json representation of\nthe created entry (see documentation for 'entries' method) on success.",
                "operationId": "post_entry_groups",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "group_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "topic_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "properties": {
                                    "attachment": {
                                        "description": "a application/x-www-form-urlencoded form-field-style\nattachment. Attachments larger than 1 kilobyte are subject to quota\nrestrictions.",
                                        "type": "string"
                                    },
                                    "message": {
                                        "description": "The body of the entry.",
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Post an entry",
                "tags": [
                    "discussion_topics"
                ]
            }
        },
        "/v1/groups/{group_id}/discussion_topics/{topic_id}/entries/{entry_id}/rating": {
            "post": {
                "deprecated": false,
                "description": "Rate a discussion entry.\n\nOn success, the response will be 204 No Content with an empty body.",
                "operationId": "rate_entry_groups",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "group_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "topic_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "entry_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "properties": {
                                    "rating": {
                                        "description": "A rating to set on this entry. Only 0 and 1 are accepted.",
                                        "format": "int64",
                                        "type": "integer"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Rate entry",
                "tags": [
                    "discussion_topics"
                ]
            }
        },
        "/v1/groups/{group_id}/discussion_topics/{topic_id}/entries/{entry_id}/read": {
            "delete": {
                "deprecated": false,
                "description": "Mark a discussion entry as unread.\n\nNo request fields are necessary.\n\nOn success, the response will be 204 No Content with an empty body.",
                "operationId": "mark_entry_as_unread_groups",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "group_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "topic_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "entry_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "A boolean value to set the entry's forced_read_state. No change is made if\nthis argument is not specified.",
                        "in": "query",
                        "name": "forced_read_state",
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Mark entry as unread",
                "tags": [
                    "discussion_topics"
                ]
            },
            "put": {
                "deprecated": false,
                "description": "Mark a discussion entry as read.\n\nNo request fields are necessary.\n\nOn success, the response will be 204 No Content with an empty body.",
                "operationId": "mark_entry_as_read_groups",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "group_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "topic_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "entry_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "forced_read_state": {
                                        "description": "A boolean value to set the entry's forced_read_state. No change is made if\nthis argument is not specified.",
                                        "type": "boolean"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Mark entry as read",
                "tags": [
                    "discussion_topics"
                ]
            }
        },
        "/v1/groups/{group_id}/discussion_topics/{topic_id}/entries/{entry_id}/replies": {
            "get": {
                "deprecated": false,
                "description": "Retrieve the (paginated) replies to a top-level entry in a discussion\ntopic.\n\nMay require (depending on the topic) that the user has posted in the topic.\nIf it is required, and the user has not posted, will respond with a 403\nForbidden status and the body 'require_initial_post'.\n\nOrdering of returned entries is newest-first by creation timestamp.",
                "operationId": "list_entry_replies_groups",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "group_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "topic_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "entry_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/pageParam"
                    },
                    {
                        "$ref": "#/components/parameters/perPageParam"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "List entry replies",
                "tags": [
                    "discussion_topics"
                ]
            },
            "post": {
                "deprecated": false,
                "description": "Add a reply to an entry in a discussion topic. Returns a json\nrepresentation of the created reply (see documentation for 'replies'\nmethod) on success.\n\nMay require (depending on the topic) that the user has posted in the topic.\nIf it is required, and the user has not posted, will respond with a 403\nForbidden status and the body 'require_initial_post'.",
                "operationId": "post_reply_groups",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "group_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "topic_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "entry_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "properties": {
                                    "attachment": {
                                        "description": "a application/x-www-form-urlencoded form-field-style\nattachment. Attachments larger than 1 kilobyte are subject to quota\nrestrictions.",
                                        "type": "string"
                                    },
                                    "message": {
                                        "description": "The body of the entry.",
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Post a reply",
                "tags": [
                    "discussion_topics"
                ]
            }
        },
        "/v1/groups/{group_id}/discussion_topics/{topic_id}/entries/{id}": {
            "delete": {
                "deprecated": false,
                "description": "Delete a discussion entry.\n\nThe entry must have been created by the current user, or the current user\nmust have admin rights to the discussion. If the delete is not allowed, a 401 will be returned.\n\nThe discussion will be marked deleted, and the user_id and message will be cleared out.",
                "operationId": "delete_entry_groups",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "group_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "topic_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Delete an entry",
                "tags": [
                    "discussion_topics"
                ]
            },
            "put": {
                "deprecated": false,
                "description": "Update an existing discussion entry.\n\nThe entry must have been created by the current user, or the current user\nmust have admin rights to the discussion. If the edit is not allowed, a 401 will be returned.",
                "operationId": "update_entry_groups",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "group_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "topic_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "message": {
                                        "description": "The updated body of the entry.",
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Update an entry",
                "tags": [
                    "discussion_topics"
                ]
            }
        },
        "/v1/groups/{group_id}/discussion_topics/{topic_id}/entry_list": {
            "get": {
                "deprecated": false,
                "description": "Retrieve a paginated list of discussion entries, given a list of ids.\n\nMay require (depending on the topic) that the user has posted in the topic.\nIf it is required, and the user has not posted, will respond with a 403\nForbidden status and the body 'require_initial_post'.",
                "operationId": "list_entries_groups",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "group_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "topic_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "A list of entry ids to retrieve. Entries will be returned in id order,\nsmallest id first.",
                        "explode": false,
                        "in": "query",
                        "name": "ids",
                        "schema": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "$ref": "#/components/parameters/pageParam"
                    },
                    {
                        "$ref": "#/components/parameters/perPageParam"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "List entries",
                "tags": [
                    "discussion_topics"
                ]
            }
        },
        "/v1/groups/{group_id}/discussion_topics/{topic_id}/read": {
            "delete": {
                "deprecated": false,
                "description": "Mark the initial text of the discussion topic as unread.\n\nNo request fields are necessary.\n\nOn success, the response will be 204 No Content with an empty body.",
                "operationId": "mark_topic_as_unread_groups",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "group_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "topic_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Mark topic as unread",
                "tags": [
                    "discussion_topics"
                ]
            },
            "put": {
                "deprecated": false,
                "description": "Mark the initial text of the discussion topic as read.\n\nNo request fields are necessary.\n\nOn success, the response will be 204 No Content with an empty body.",
                "operationId": "mark_topic_as_read_groups",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "group_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "topic_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Mark topic as read",
                "tags": [
                    "discussion_topics"
                ]
            }
        },
        "/v1/groups/{group_id}/discussion_topics/{topic_id}/read_all": {
            "delete": {
                "deprecated": false,
                "description": "Mark the discussion topic and all its entries as unread.\n\nNo request fields are necessary.\n\nOn success, the response will be 204 No Content with an empty body.",
                "operationId": "mark_all_entries_as_unread_groups",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "group_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "topic_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "A boolean value to set all of the entries' forced_read_state. No change is\nmade if this argument is not specified.",
                        "in": "query",
                        "name": "forced_read_state",
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Mark all entries as unread",
                "tags": [
                    "discussion_topics"
                ]
            },
            "put": {
                "deprecated": false,
                "description": "Mark the discussion topic and all its entries as read.\n\nNo request fields are necessary.\n\nOn success, the response will be 204 No Content with an empty body.",
                "operationId": "mark_all_entries_as_read_groups",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "group_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "topic_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "forced_read_state": {
                                        "description": "A boolean value to set all of the entries' forced_read_state. No change\nis made if this argument is not specified.",
                                        "type": "boolean"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Mark all entries as read",
                "tags": [
                    "discussion_topics"
                ]
            }
        },
        "/v1/groups/{group_id}/discussion_topics/{topic_id}/subscribed": {
            "delete": {
                "deprecated": false,
                "description": "Unsubscribe from a topic to stop receiving notifications about new entries\n\nOn success, the response will be 204 No Content with an empty body",
                "operationId": "unsubscribe_from_topic_groups",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "group_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "topic_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Unsubscribe from a topic",
                "tags": [
                    "discussion_topics"
                ]
            },
            "put": {
                "deprecated": false,
                "description": "Subscribe to a topic to receive notifications about new entries\n\nOn success, the response will be 204 No Content with an empty body",
                "operationId": "subscribe_to_topic_groups",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "group_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "topic_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Subscribe to a topic",
                "tags": [
                    "discussion_topics"
                ]
            }
        },
        "/v1/groups/{group_id}/discussion_topics/{topic_id}/view": {
            "get": {
                "deprecated": false,
                "description": "Return a cached structure of the discussion topic, containing all entries,\ntheir authors, and their message bodies.\n\nMay require (depending on the topic) that the user has posted in the topic.\nIf it is required, and the user has not posted, will respond with a 403\nForbidden status and the body 'require_initial_post'.\n\nIn some rare situations, this cached structure may not be available yet. In\nthat case, the server will respond with a 503 error, and the caller should\ntry again soon.\n\nThe response is an object containing the following keys:\n* \"participants\": A list of summary information on users who have posted to\n  the discussion. Each value is an object containing their id, display_name,\n  and avatar_url.\n* \"unread_entries\": A list of entry ids that are unread by the current\n  user. this implies that any entry not in this list is read.\n* \"entry_ratings\": A map of entry ids to ratings by the current user. Entries\n  not in this list have no rating. Only populated if rating is enabled.\n* \"forced_entries\": A list of entry ids that have forced_read_state set to\n  true. This flag is meant to indicate the entry's read_state has been\n  manually set to 'unread' by the user, so the entry should not be\n  automatically marked as read.\n* \"view\": A threaded view of all the entries in the discussion, containing\n  the id, user_id, and message.\n* \"new_entries\": Because this view is eventually consistent, it's possible\n  that newly created or updated entries won't yet be reflected in the view.\n  If the application wants to also get a flat list of all entries not yet\n  reflected in the view, pass include_new_entries=1 to the request and this\n  array of entries will be returned. These entries are returned in a flat\n  array, in ascending created_at order.",
                "operationId": "get_full_topic_groups",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "group_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "topic_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Get the full topic",
                "tags": [
                    "discussion_topics"
                ]
            }
        },
        "/v1/groups/{group_id}/external_feeds": {
            "get": {
                "deprecated": false,
                "description": "Returns the paginated list of External Feeds this course or group.",
                "operationId": "list_external_feeds_groups",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "group_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/pageParam"
                    },
                    {
                        "$ref": "#/components/parameters/perPageParam"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/ExternalFeed"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "List external feeds",
                "tags": [
                    "announcement_external_feeds"
                ]
            },
            "post": {
                "deprecated": false,
                "description": "Create a new external feed for the course or group.",
                "operationId": "create_external_feed_groups",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "group_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "properties": {
                                    "header_match": {
                                        "description": "If given, only feed entries that contain this string in their title will be imported",
                                        "type": "boolean"
                                    },
                                    "url": {
                                        "description": "The url to the external rss or atom feed",
                                        "type": "string"
                                    },
                                    "verbosity": {
                                        "description": "Defaults to \"full\"",
                                        "enum": [
                                            "full",
                                            "truncate",
                                            "link_only"
                                        ],
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "url"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ExternalFeed"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Create an external feed",
                "tags": [
                    "announcement_external_feeds"
                ]
            }
        },
        "/v1/groups/{group_id}/external_feeds/{external_feed_id}": {
            "delete": {
                "deprecated": false,
                "description": "Deletes the external feed.",
                "operationId": "delete_external_feed_groups",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "group_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "external_feed_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ExternalFeed"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Delete an external feed",
                "tags": [
                    "announcement_external_feeds"
                ]
            }
        },
        "/v1/groups/{group_id}/external_tools": {
            "get": {
                "deprecated": false,
                "description": "Returns the paginated list of external tools for the current context.\nSee the get request docs for a single tool for a list of properties on an external tool.",
                "operationId": "list_external_tools_groups",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "group_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The partial name of the tools to match and return.",
                        "in": "query",
                        "name": "search_term",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "If true, then only tools that are meant to be selectable are returned",
                        "in": "query",
                        "name": "selectable",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "description": "If true, then include tools installed in all accounts above the current context",
                        "in": "query",
                        "name": "include_parents",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/pageParam"
                    },
                    {
                        "$ref": "#/components/parameters/perPageParam"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "List external tools",
                "tags": [
                    "external_tools"
                ]
            }
        },
        "/v1/groups/{group_id}/files": {
            "post": {
                "deprecated": false,
                "description": "Upload a file to the group.\n\nThis API endpoint is the first step in uploading a file to a group.\nSee the {file:file_uploads.html File Upload Documentation} for details on\nthe file upload workflow.\n\nOnly those with the \"Manage Files\" permission on a group can upload files\nto the group. By default, this is anybody participating in the\ngroup, or any admin over the group.",
                "operationId": "upload_file_to_group",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "group_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Upload a file",
                "tags": [
                    "groups"
                ]
            }
        },
        "/v1/groups/{group_id}/files/quota": {
            "get": {
                "deprecated": false,
                "description": "Returns the total and used storage quota for the course, group, or user.",
                "operationId": "get_quota_information_groups",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "group_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Get quota information",
                "tags": [
                    "files"
                ]
            }
        },
        "/v1/groups/{group_id}/files/{id}": {
            "get": {
                "deprecated": false,
                "description": "Returns the standard attachment json object",
                "operationId": "get_file_groups",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "group_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Array of additional information to include.\n\n\"user\":: the user who uploaded the file or last edited its content\n\"usage_rights\":: copyright and license information for the file (see UsageRights)",
                        "explode": false,
                        "in": "query",
                        "name": "include",
                        "schema": {
                            "items": {
                                "type": "string",
                                "enum": [
                                    "user"
                                ]
                            },
                            "type": "array"
                        },
                        "style": "form"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/File"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Get file",
                "tags": [
                    "files"
                ]
            }
        },
        "/v1/groups/{group_id}/folders": {
            "get": {
                "deprecated": false,
                "description": "Returns the paginated list of all folders for the given context. This will\nbe returned as a flat list containing all subfolders as well.",
                "operationId": "list_all_folders_groups",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "group_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/pageParam"
                    },
                    {
                        "$ref": "#/components/parameters/perPageParam"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Folder"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "List all folders",
                "tags": [
                    "files"
                ]
            },
            "post": {
                "deprecated": false,
                "description": "Creates a folder in the specified context",
                "operationId": "create_folder_groups",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "group_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "properties": {
                                    "hidden": {
                                        "description": "Flag the folder as hidden",
                                        "type": "boolean"
                                    },
                                    "lock_at": {
                                        "description": "The datetime to lock the folder at",
                                        "format": "date-time",
                                        "type": "string"
                                    },
                                    "locked": {
                                        "description": "Flag the folder as locked",
                                        "type": "boolean"
                                    },
                                    "name": {
                                        "description": "The name of the folder",
                                        "type": "string"
                                    },
                                    "parent_folder_id": {
                                        "description": "The id of the folder to store the file in. If this and parent_folder_path are sent an error will be returned. If neither is given, a default folder will be used.",
                                        "type": "string"
                                    },
                                    "parent_folder_path": {
                                        "description": "The path of the folder to store the new folder in. The path separator is the forward slash `/`, never a back slash. The parent folder will be created if it does not already exist. This parameter only applies to new folders in a context that has folders, such as a user, a course, or a group. If this and parent_folder_id are sent an error will be returned. If neither is given, a default folder will be used.",
                                        "type": "string"
                                    },
                                    "position": {
                                        "description": "Set an explicit sort position for the folder",
                                        "format": "int64",
                                        "type": "integer"
                                    },
                                    "unlock_at": {
                                        "description": "The datetime to unlock the folder at",
                                        "format": "date-time",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "name"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Folder"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Create folder",
                "tags": [
                    "files"
                ]
            }
        },
        "/v1/groups/{group_id}/folders/by_path": {
            "get": {
                "deprecated": false,
                "description": "Given the full path to a folder, returns a list of all Folders in the path hierarchy,\nstarting at the root folder, and ending at the requested folder. The given path is\nrelative to the context's root folder and does not include the root folder's name\n(e.g., \"course files\"). If an empty path is given, the context's root folder alone\nis returned. Otherwise, if no folder exists with the given full path, a Not Found\nerror is returned.",
                "operationId": "resolve_path_groups",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "group_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Folder"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Resolve path",
                "tags": [
                    "files"
                ]
            }
        },
        "/v1/groups/{group_id}/folders/by_path/*full_path": {
            "get": {
                "deprecated": false,
                "description": "Given the full path to a folder, returns a list of all Folders in the path hierarchy,\nstarting at the root folder, and ending at the requested folder. The given path is\nrelative to the context's root folder and does not include the root folder's name\n(e.g., \"course files\"). If an empty path is given, the context's root folder alone\nis returned. Otherwise, if no folder exists with the given full path, a Not Found\nerror is returned.",
                "operationId": "resolve_path_groups_full_path",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "group_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Folder"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Resolve path",
                "tags": [
                    "files"
                ]
            }
        },
        "/v1/groups/{group_id}/folders/{id}": {
            "get": {
                "deprecated": false,
                "description": "Returns the details for a folder\n\nYou can get the root folder from a context by using 'root' as the :id.\nFor example, you could get the root folder for a course like:",
                "operationId": "get_folder_groups",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "group_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Folder"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Get folder",
                "tags": [
                    "files"
                ]
            }
        },
        "/v1/groups/{group_id}/front_page": {
            "get": {
                "deprecated": false,
                "description": "Retrieve the content of the front page",
                "operationId": "show_front_page_groups",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "group_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Page"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Show front page",
                "tags": [
                    "pages"
                ]
            },
            "put": {
                "deprecated": false,
                "description": "Update the title or contents of the front page",
                "operationId": "update_create_front_page_groups",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "group_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "wiki_page[body]": {
                                        "description": "The content for the new page.",
                                        "type": "string"
                                    },
                                    "wiki_page[editing_roles]": {
                                        "description": "Which user roles are allowed to edit this page. Any combination\nof these roles is allowed (separated by commas).\n\n\"teachers\":: Allows editing by teachers in the course.\n\"students\":: Allows editing by students in the course.\n\"members\":: For group wikis, allows editing by members of the group.\n\"public\":: Allows editing by any user.",
                                        "enum": [
                                            "teachers",
                                            "students",
                                            "members",
                                            "public"
                                        ],
                                        "type": "string"
                                    },
                                    "wiki_page[notify_of_update]": {
                                        "description": "Whether participants should be notified when this page changes.",
                                        "type": "boolean"
                                    },
                                    "wiki_page[published]": {
                                        "description": "Whether the page is published (true) or draft state (false).",
                                        "type": "boolean"
                                    },
                                    "wiki_page[title]": {
                                        "description": "The title for the new page. NOTE: changing a page's title will change its\nurl. The updated url will be returned in the result.",
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Page"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Update/create front page",
                "tags": [
                    "pages"
                ]
            }
        },
        "/v1/groups/{group_id}/invite": {
            "post": {
                "deprecated": false,
                "description": "Sends an invitation to all supplied email addresses which will allow the\nreceivers to join the group.",
                "operationId": "invite_others_to_group",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "group_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "properties": {
                                    "invitees": {
                                        "description": "An array of email addresses to be sent invitations.",
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    }
                                },
                                "required": [
                                    "invitees"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Invite others to a group",
                "tags": [
                    "groups"
                ]
            }
        },
        "/v1/groups/{group_id}/memberships": {
            "get": {
                "deprecated": false,
                "description": "A paginated list of the members of a group.",
                "operationId": "list_group_memberships",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "group_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Only list memberships with the given workflow_states. By default it will\nreturn all memberships.",
                        "explode": false,
                        "in": "query",
                        "name": "filter_states",
                        "schema": {
                            "items": {
                                "type": "string",
                                "enum": [
                                    "accepted",
                                    "invited",
                                    "requested"
                                ]
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "$ref": "#/components/parameters/pageParam"
                    },
                    {
                        "$ref": "#/components/parameters/perPageParam"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/GroupMembership"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "List group memberships",
                "tags": [
                    "groups"
                ]
            },
            "post": {
                "deprecated": false,
                "description": "Join, or request to join, a group, depending on the join_level of the\ngroup.  If the membership or join request already exists, then it is simply\nreturned",
                "operationId": "create_membership",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "group_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "properties": {
                                    "user_id": {
                                        "description": "no description",
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GroupMembership"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Create a membership",
                "tags": [
                    "groups"
                ]
            }
        },
        "/v1/groups/{group_id}/memberships/{membership_id}": {
            "delete": {
                "deprecated": false,
                "description": "Leave a group if you are allowed to leave (some groups, such as sets of\ncourse groups created by teachers, cannot be left). You may also use 'self'\nin place of a membership_id.",
                "operationId": "leave_group_memberships",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "group_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "membership_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Leave a group",
                "tags": [
                    "groups"
                ]
            },
            "get": {
                "deprecated": false,
                "description": "Returns the group membership with the given membership id or user id.",
                "operationId": "get_single_group_membership_memberships",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "group_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "membership_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GroupMembership"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Get a single group membership",
                "tags": [
                    "groups"
                ]
            },
            "put": {
                "deprecated": false,
                "description": "Accept a membership request, or add/remove moderator rights.",
                "operationId": "update_membership_memberships",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "group_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "membership_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "moderator": {
                                        "description": "no description",
                                        "type": "string"
                                    },
                                    "workflow_state": {
                                        "description": "Currently, the only allowed value is \"accepted\"",
                                        "enum": [
                                            "accepted"
                                        ],
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GroupMembership"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Update a membership",
                "tags": [
                    "groups"
                ]
            }
        },
        "/v1/groups/{group_id}/pages": {
            "get": {
                "deprecated": false,
                "description": "A paginated list of the wiki pages associated with a course or group",
                "operationId": "list_pages_groups",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "group_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Sort results by this field.",
                        "in": "query",
                        "name": "sort",
                        "schema": {
                            "enum": [
                                "title",
                                "created_at",
                                "updated_at"
                            ],
                            "type": "string"
                        }
                    },
                    {
                        "description": "The sorting order. Defaults to 'asc'.",
                        "in": "query",
                        "name": "order",
                        "schema": {
                            "enum": [
                                "asc",
                                "desc"
                            ],
                            "type": "string"
                        }
                    },
                    {
                        "description": "The partial title of the pages to match and return.",
                        "in": "query",
                        "name": "search_term",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "If true, include only published paqes. If false, exclude published\npages. If not present, do not filter on published status.",
                        "in": "query",
                        "name": "published",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/pageParam"
                    },
                    {
                        "$ref": "#/components/parameters/perPageParam"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Page"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "List pages",
                "tags": [
                    "pages"
                ]
            },
            "post": {
                "deprecated": false,
                "description": "Create a new wiki page",
                "operationId": "create_page_groups",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "group_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "properties": {
                                    "wiki_page[body]": {
                                        "description": "The content for the new page.",
                                        "type": "string"
                                    },
                                    "wiki_page[editing_roles]": {
                                        "description": "Which user roles are allowed to edit this page. Any combination\nof these roles is allowed (separated by commas).\n\n\"teachers\":: Allows editing by teachers in the course.\n\"students\":: Allows editing by students in the course.\n\"members\":: For group wikis, allows editing by members of the group.\n\"public\":: Allows editing by any user.",
                                        "enum": [
                                            "teachers",
                                            "students",
                                            "members",
                                            "public"
                                        ],
                                        "type": "string"
                                    },
                                    "wiki_page[front_page]": {
                                        "description": "Set an unhidden page as the front page (if true)",
                                        "type": "boolean"
                                    },
                                    "wiki_page[notify_of_update]": {
                                        "description": "Whether participants should be notified when this page changes.",
                                        "type": "boolean"
                                    },
                                    "wiki_page[published]": {
                                        "description": "Whether the page is published (true) or draft state (false).",
                                        "type": "boolean"
                                    },
                                    "wiki_page[title]": {
                                        "description": "The title for the new page.",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "wiki_page[title]"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Page"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Create page",
                "tags": [
                    "pages"
                ]
            }
        },
        "/v1/groups/{group_id}/pages/{url}": {
            "delete": {
                "deprecated": false,
                "description": "Delete a wiki page",
                "operationId": "delete_page_groups",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "group_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "url",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Page"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Delete page",
                "tags": [
                    "pages"
                ]
            },
            "get": {
                "deprecated": false,
                "description": "Retrieve the content of a wiki page",
                "operationId": "show_page_groups",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "group_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "url",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Page"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Show page",
                "tags": [
                    "pages"
                ]
            },
            "put": {
                "deprecated": false,
                "description": "Update the title or contents of a wiki page",
                "operationId": "update_create_page_groups",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "group_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "url",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "wiki_page[body]": {
                                        "description": "The content for the new page.",
                                        "type": "string"
                                    },
                                    "wiki_page[editing_roles]": {
                                        "description": "Which user roles are allowed to edit this page. Any combination\nof these roles is allowed (separated by commas).\n\n\"teachers\":: Allows editing by teachers in the course.\n\"students\":: Allows editing by students in the course.\n\"members\":: For group wikis, allows editing by members of the group.\n\"public\":: Allows editing by any user.",
                                        "enum": [
                                            "teachers",
                                            "students",
                                            "members",
                                            "public"
                                        ],
                                        "type": "string"
                                    },
                                    "wiki_page[front_page]": {
                                        "description": "Set an unhidden page as the front page (if true)",
                                        "type": "boolean"
                                    },
                                    "wiki_page[notify_of_update]": {
                                        "description": "Whether participants should be notified when this page changes.",
                                        "type": "boolean"
                                    },
                                    "wiki_page[published]": {
                                        "description": "Whether the page is published (true) or draft state (false).",
                                        "type": "boolean"
                                    },
                                    "wiki_page[title]": {
                                        "description": "The title for the new page. NOTE: changing a page's title will change its\nurl. The updated url will be returned in the result.",
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Page"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Update/create page",
                "tags": [
                    "pages"
                ]
            }
        },
        "/v1/groups/{group_id}/pages/{url}/revisions": {
            "get": {
                "deprecated": false,
                "description": "A paginated list of the revisions of a page. Callers must have update rights on the page in order to see page history.",
                "operationId": "list_revisions_groups",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "group_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "url",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/pageParam"
                    },
                    {
                        "$ref": "#/components/parameters/perPageParam"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/PageRevision"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "List revisions",
                "tags": [
                    "pages"
                ]
            }
        },
        "/v1/groups/{group_id}/pages/{url}/revisions/latest": {
            "get": {
                "deprecated": false,
                "description": "Retrieve the metadata and optionally content of a revision of the page.\nNote that retrieving historic versions of pages requires edit rights.",
                "operationId": "show_revision_groups_latest",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "group_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "url",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "If set, exclude page content from results",
                        "in": "query",
                        "name": "summary",
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PageRevision"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Show revision",
                "tags": [
                    "pages"
                ]
            }
        },
        "/v1/groups/{group_id}/pages/{url}/revisions/{revision_id}": {
            "get": {
                "deprecated": false,
                "description": "Retrieve the metadata and optionally content of a revision of the page.\nNote that retrieving historic versions of pages requires edit rights.",
                "operationId": "show_revision_groups_revision_id",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "group_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "url",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "revision_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "If set, exclude page content from results",
                        "in": "query",
                        "name": "summary",
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PageRevision"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Show revision",
                "tags": [
                    "pages"
                ]
            },
            "post": {
                "deprecated": false,
                "description": "Revert a page to a prior revision.",
                "operationId": "revert_to_revision_groups",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "group_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "url",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The revision to revert to (use the\n{api:WikiPagesApiController#revisions List Revisions API} to see\navailable revisions)",
                        "in": "path",
                        "name": "revision_id",
                        "required": true,
                        "schema": {
                            "format": "int64",
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PageRevision"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Revert to revision",
                "tags": [
                    "pages"
                ]
            }
        },
        "/v1/groups/{group_id}/permissions": {
            "get": {
                "deprecated": false,
                "description": "Returns permission information for the calling user in the given group.\nSee also the {api:AccountsController#permissions Account} and\n{api:CoursesController#permissions Course} counterparts.",
                "operationId": "group_permission",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "group_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "List of permissions to check against the authenticated user.\nPermission names are documented in the {api:RoleOverridesController#add_role Create a role} endpoint.",
                        "explode": false,
                        "in": "query",
                        "name": "permissions",
                        "schema": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Permissions",
                "tags": [
                    "groups"
                ]
            }
        },
        "/v1/groups/{group_id}/potential_collaborators": {
            "get": {
                "deprecated": false,
                "description": "A paginated list of the users who can potentially be added to a\ncollaboration in the given context.\n\nFor courses, this consists of all enrolled users.  For groups, it is comprised of the\ngroup members plus the admins of the course containing the group.",
                "operationId": "list_potential_members_groups",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "group_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/pageParam"
                    },
                    {
                        "$ref": "#/components/parameters/perPageParam"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/User"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "List potential members",
                "tags": [
                    "collaborations"
                ]
            }
        },
        "/v1/groups/{group_id}/preview_html": {
            "post": {
                "deprecated": false,
                "description": "Preview html content processed for this group",
                "operationId": "preview_processed_html_group",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "group_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "properties": {
                                    "html": {
                                        "description": "The html content to process",
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Preview processed html",
                "tags": [
                    "groups"
                ]
            }
        },
        "/v1/groups/{group_id}/tabs": {
            "get": {
                "deprecated": false,
                "description": "Returns a paginated list of navigation tabs available in the current context.",
                "operationId": "list_available_tabs_for_course_or_group_groups",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "group_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "\"external\":: Optionally include external tool tabs in the returned list of tabs (Only has effect for courses, not groups)",
                        "explode": false,
                        "in": "query",
                        "name": "include",
                        "schema": {
                            "items": {
                                "type": "string",
                                "enum": [
                                    "external"
                                ]
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "$ref": "#/components/parameters/pageParam"
                    },
                    {
                        "$ref": "#/components/parameters/perPageParam"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "List available tabs for a course or group",
                "tags": [
                    "tabs"
                ]
            }
        },
        "/v1/groups/{group_id}/usage_rights": {
            "delete": {
                "deprecated": false,
                "description": "Removes copyright and license information associated with one or more files",
                "operationId": "remove_usage_rights_groups",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "group_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "List of ids of files to remove associated usage rights from.",
                        "explode": false,
                        "in": "query",
                        "name": "file_ids",
                        "required": true,
                        "schema": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "description": "List of ids of folders. Usage rights will be removed from all files in these folders.",
                        "explode": false,
                        "in": "query",
                        "name": "folder_ids",
                        "schema": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Remove usage rights",
                "tags": [
                    "files"
                ]
            },
            "put": {
                "deprecated": false,
                "description": "Sets copyright and license information for one or more files",
                "operationId": "set_usage_rights_groups",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "group_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "file_ids": {
                                        "description": "List of ids of files to set usage rights for.",
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "folder_ids": {
                                        "description": "List of ids of folders to search for files to set usage rights for.\nNote that new files uploaded to these folders do not automatically inherit these rights.",
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "publish": {
                                        "description": "Whether the file(s) or folder(s) should be published on save, provided that usage rights have been specified (set to `true` to publish on save).",
                                        "type": "boolean"
                                    },
                                    "usage_rights[legal_copyright]": {
                                        "description": "The legal copyright line for the files",
                                        "type": "string"
                                    },
                                    "usage_rights[license]": {
                                        "description": "The license that applies to the files. See the {api:UsageRightsController#licenses List licenses endpoint} for the supported license types.",
                                        "type": "string"
                                    },
                                    "usage_rights[use_justification]": {
                                        "description": "The intellectual property justification for using the files in Canvas",
                                        "enum": [
                                            "own_copyright",
                                            "used_by_permission",
                                            "fair_use",
                                            "public_domain",
                                            "creative_commons"
                                        ],
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "file_ids",
                                    "usage_rights[use_justification]"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UsageRights"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Set usage rights",
                "tags": [
                    "files"
                ]
            }
        },
        "/v1/groups/{group_id}/users": {
            "get": {
                "deprecated": false,
                "description": "Returns a paginated list of users in the group.",
                "operationId": "list_group_s_users",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "group_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The partial name or full ID of the users to match and return in the\nresults list. Must be at least 3 characters.",
                        "in": "query",
                        "name": "search_term",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "- \"avatar_url\": Include users' avatar_urls.",
                        "explode": false,
                        "in": "query",
                        "name": "include",
                        "schema": {
                            "items": {
                                "type": "string",
                                "enum": [
                                    "avatar_url"
                                ]
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "$ref": "#/components/parameters/pageParam"
                    },
                    {
                        "$ref": "#/components/parameters/perPageParam"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/User"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "List group's users",
                "tags": [
                    "groups"
                ]
            }
        },
        "/v1/groups/{group_id}/users/{user_id}": {
            "delete": {
                "deprecated": false,
                "description": "Leave a group if you are allowed to leave (some groups, such as sets of\ncourse groups created by teachers, cannot be left). You may also use 'self'\nin place of a membership_id.",
                "operationId": "leave_group_users",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "group_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "user_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Leave a group",
                "tags": [
                    "groups"
                ]
            },
            "get": {
                "deprecated": false,
                "description": "Returns the group membership with the given membership id or user id.",
                "operationId": "get_single_group_membership_users",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "group_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "user_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GroupMembership"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Get a single group membership",
                "tags": [
                    "groups"
                ]
            },
            "put": {
                "deprecated": false,
                "description": "Accept a membership request, or add/remove moderator rights.",
                "operationId": "update_membership_users",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "group_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "user_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "moderator": {
                                        "description": "no description",
                                        "type": "string"
                                    },
                                    "workflow_state": {
                                        "description": "Currently, the only allowed value is \"accepted\"",
                                        "enum": [
                                            "accepted"
                                        ],
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GroupMembership"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Update a membership",
                "tags": [
                    "groups"
                ]
            }
        },
        "/v1/jwts": {
            "post": {
                "deprecated": false,
                "description": "Create a unique jwt for using with other canvas services\n\nGenerates a different JWT each time it's called, each one expires\nafter a short window (1 hour)",
                "operationId": "create_jwt",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JWT"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Create JWT",
                "tags": [
                    "jw_ts"
                ]
            }
        },
        "/v1/jwts/refresh": {
            "post": {
                "deprecated": false,
                "description": "Refresh a JWT for use with other canvas services\n\nGenerates a different JWT each time it's called, each one expires\nafter a short window (1 hour).",
                "operationId": "refresh_jwt",
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "properties": {
                                    "jwt": {
                                        "description": "An existing JWT token to be refreshed. The new token will have\nthe same context and workflows as the existing token.",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "jwt"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/JWT"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Refresh JWT",
                "tags": [
                    "jw_ts"
                ]
            }
        },
        "/v1/outcomes/{id}": {
            "get": {
                "deprecated": false,
                "description": "Returns the details of the outcome with the given id.",
                "operationId": "show_outcome",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Outcome"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Show an outcome",
                "tags": [
                    "outcomes"
                ]
            },
            "put": {
                "deprecated": false,
                "description": "Modify an existing outcome. Fields not provided are left as is;\nunrecognized fields are ignored.\n\nIf any new ratings are provided, the combination of all new ratings\nprovided completely replace any existing embedded rubric criterion; it is\nnot possible to tweak the ratings of the embedded rubric criterion.\n\nA new embedded rubric criterion's mastery_points default to the maximum\npoints in the highest rating if not specified in the mastery_points\nparameter. Any new ratings lacking a description are given a default of \"No\ndescription\". Any new ratings lacking a point value are given a default of\n0.",
                "operationId": "update_outcome",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "calculation_int": {
                                        "description": "The new calculation int.  Only applies if the calculation_method is \"decaying_average\" or \"n_mastery\"",
                                        "format": "int64",
                                        "type": "integer"
                                    },
                                    "calculation_method": {
                                        "description": "The new calculation method.",
                                        "enum": [
                                            "decaying_average",
                                            "n_mastery",
                                            "latest",
                                            "highest"
                                        ],
                                        "type": "string"
                                    },
                                    "description": {
                                        "description": "The new outcome description.",
                                        "type": "string"
                                    },
                                    "display_name": {
                                        "description": "A friendly name shown in reports for outcomes with cryptic titles,\nsuch as common core standards names.",
                                        "type": "string"
                                    },
                                    "mastery_points": {
                                        "description": "The new mastery threshold for the embedded rubric criterion.",
                                        "format": "int64",
                                        "type": "integer"
                                    },
                                    "ratings[description]": {
                                        "description": "The description of a new rating level for the embedded rubric criterion.",
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "ratings[points]": {
                                        "description": "The points corresponding to a new rating level for the embedded rubric\ncriterion.",
                                        "items": {
                                            "type": "integer"
                                        },
                                        "type": "array"
                                    },
                                    "title": {
                                        "description": "The new outcome title.",
                                        "type": "string"
                                    },
                                    "vendor_guid": {
                                        "description": "A custom GUID for the learning standard.",
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Outcome"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Update an outcome",
                "tags": [
                    "outcomes"
                ]
            }
        },
        "/v1/planner/items": {
            "get": {
                "deprecated": false,
                "description": "Retrieve the paginated list of objects to be shown on the planner for the\ncurrent user with the associated planner override to override an item's\nvisibility if set.\n\n[\n  {\n    \"context_type\": \"Course\",\n    \"course_id\": 1,\n    \"visible_in_planner\": true, // Whether or not it is displayed on the student planner\n    \"planner_override\": { ... planner override object ... }, // Associated PlannerOverride object if user has toggled visibility for the object on the planner\n    \"submissions\": false, // The statuses of the user's submissions for this object\n    \"plannable_id\": \"123\",\n    \"plannable_type\": \"discussion_topic\",\n    \"plannable\": { ... discussion topic object },\n    \"html_url\": \"/courses/1/discussion_topics/8\"\n  },\n  {\n    \"context_type\": \"Course\",\n    \"course_id\": 1,\n    \"visible_in_planner\": true,\n    \"planner_override\": {\n        \"id\": 3,\n        \"plannable_type\": \"Assignment\",\n        \"plannable_id\": 1,\n        \"user_id\": 2,\n        \"workflow_state\": \"active\",\n        \"marked_complete\": true, // A user-defined setting for marking items complete in the planner\n        \"dismissed\": false, // A user-defined setting for hiding items from the opportunities list\n        \"deleted_at\": null,\n        \"created_at\": \"2017-05-18T18:35:55Z\",\n        \"updated_at\": \"2017-05-18T18:35:55Z\"\n    },\n    \"submissions\": { // The status as it pertains to the current user\n      \"excused\": false,\n      \"graded\": false,\n      \"late\": false,\n      \"missing\": true,\n      \"needs_grading\": false,\n      \"with_feedback\": false\n    },\n    \"plannable_id\": \"456\",\n    \"plannable_type\": \"assignment\",\n    \"plannable\": { ... assignment object ...  },\n    \"html_url\": \"http://canvas.instructure.com/courses/1/assignments/1#submit\"\n  },\n  {\n    \"visible_in_planner\": true,\n    \"planner_override\": null,\n    \"submissions\": false, // false if no associated assignment exists for the plannable item\n    \"plannable_id\": \"789\",\n    \"plannable_type\": \"planner_note\",\n    \"plannable\": {\n      \"id\": 1,\n      \"todo_date\": \"2017-05-30T06:00:00Z\",\n      \"title\": \"hello\",\n      \"details\": \"world\",\n      \"user_id\": 2,\n      \"course_id\": null,\n      \"workflow_state\": \"active\",\n      \"created_at\": \"2017-05-30T16:29:04Z\",\n      \"updated_at\": \"2017-05-30T16:29:15Z\"\n    },\n    \"html_url\": \"http://canvas.instructure.com/api/v1/planner_notes.1\"\n  }\n]",
                "operationId": "list_planner_items",
                "parameters": [
                    {
                        "description": "Only return items starting from the given date.\nThe value should be formatted as: yyyy-mm-dd or ISO 8601 YYYY-MM-DDTHH:MM:SSZ.",
                        "in": "query",
                        "name": "start_date",
                        "schema": {
                            "format": "date",
                            "type": "string"
                        }
                    },
                    {
                        "description": "Only return items up to the given date.\nThe value should be formatted as: yyyy-mm-dd or ISO 8601 YYYY-MM-DDTHH:MM:SSZ.",
                        "in": "query",
                        "name": "end_date",
                        "schema": {
                            "format": "date",
                            "type": "string"
                        }
                    },
                    {
                        "description": "List of context codes of courses and/or groups whose items you want to see.\nIf not specified, defaults to all contexts associated to the current user.\nNote that concluded courses will be ignored unless specified in the includes[]\nparameter. The format of this field is the context type, followed by an underscore,\nfollowed by the context id. For example: course_42, group_123",
                        "explode": false,
                        "in": "query",
                        "name": "context_codes",
                        "schema": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "description": "Only return items that have new or unread activity",
                        "in": "query",
                        "name": "filter",
                        "schema": {
                            "enum": [
                                "new_activity"
                            ],
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/pageParam"
                    },
                    {
                        "$ref": "#/components/parameters/perPageParam"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "List planner items",
                "tags": [
                    "planner"
                ]
            }
        },
        "/v1/planner/overrides": {
            "get": {
                "deprecated": false,
                "description": "Retrieve a planner override for the current user",
                "operationId": "list_planner_overrides",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/PlannerOverride"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "List planner overrides",
                "tags": [
                    "planner_override"
                ]
            },
            "post": {
                "deprecated": false,
                "description": "Create a planner override for the current user",
                "operationId": "create_planner_override",
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "properties": {
                                    "dismissed": {
                                        "description": "If this is true, the item will not show in the opportunities list",
                                        "type": "boolean"
                                    },
                                    "marked_complete": {
                                        "description": "If this is true, the item will show in the planner as completed",
                                        "type": "boolean"
                                    },
                                    "plannable_id": {
                                        "description": "ID of the item that you are overriding in the planner",
                                        "format": "int64",
                                        "type": "integer"
                                    },
                                    "plannable_type": {
                                        "description": "Type of the item that you are overriding in the planner",
                                        "enum": [
                                            "announcement",
                                            "assignment",
                                            "discussion_topic",
                                            "quiz",
                                            "wiki_page",
                                            "planner_note"
                                        ],
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PlannerOverride"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Create a planner override",
                "tags": [
                    "planner_override"
                ]
            }
        },
        "/v1/planner/overrides/{id}": {
            "delete": {
                "deprecated": false,
                "description": "Delete a planner override for the current user",
                "operationId": "delete_planner_override",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PlannerOverride"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Delete a planner override",
                "tags": [
                    "planner_override"
                ]
            },
            "get": {
                "deprecated": false,
                "description": "Retrieve a planner override for the current user",
                "operationId": "show_planner_override",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PlannerOverride"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Show a planner override",
                "tags": [
                    "planner_override"
                ]
            },
            "put": {
                "deprecated": false,
                "description": "Update a planner override's visibilty for the current user",
                "operationId": "update_planner_override",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "dismissed": {
                                        "description": "determines whether the planner item shows in the opportunities list",
                                        "type": "string"
                                    },
                                    "marked_complete": {
                                        "description": "determines whether the planner item is marked as completed",
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PlannerOverride"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Update a planner override",
                "tags": [
                    "planner_override"
                ]
            }
        },
        "/v1/planner_notes": {
            "get": {
                "deprecated": false,
                "description": "Retrieve the paginated list of planner notes\n\nRetrieve planner note for a user",
                "operationId": "list_planner_notes",
                "parameters": [
                    {
                        "description": "Only return notes with todo dates since the start_date (inclusive).\nNo default. The value should be formatted as: yyyy-mm-dd or\nISO 8601 YYYY-MM-DDTHH:MM:SSZ.",
                        "in": "query",
                        "name": "start_date",
                        "schema": {
                            "format": "date-time",
                            "type": "string"
                        }
                    },
                    {
                        "description": "Only return notes with todo dates before the end_date (inclusive).\nNo default. The value should be formatted as: yyyy-mm-dd or\nISO 8601 YYYY-MM-DDTHH:MM:SSZ.\nIf end_date and start_date are both specified and equivalent,\nthen only notes with todo dates on that day are returned.",
                        "in": "query",
                        "name": "end_date",
                        "schema": {
                            "format": "date-time",
                            "type": "string"
                        }
                    },
                    {
                        "description": "List of context codes of courses whose notes you want to see.\nIf not specified, defaults to all contexts that the user belongs to.\nThe format of this field is the context type, followed by an\nunderscore, followed by the context id. For example: course_42\nIncluding a code matching the user's own context code (e.g. user_1)\nwill include notes that are not associated with any particular course.",
                        "explode": false,
                        "in": "query",
                        "name": "context_codes",
                        "schema": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "$ref": "#/components/parameters/pageParam"
                    },
                    {
                        "$ref": "#/components/parameters/perPageParam"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/PlannerNote"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "List planner notes",
                "tags": [
                    "planner_note"
                ]
            },
            "post": {
                "deprecated": false,
                "description": "Create a planner note for the current user",
                "operationId": "create_planner_note",
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "properties": {
                                    "course_id": {
                                        "description": "The ID of the course to associate with the planner note. The caller must be able to view the course in order to\nassociate it with a planner note.",
                                        "format": "int64",
                                        "type": "integer"
                                    },
                                    "details": {
                                        "description": "Text of the planner note.",
                                        "type": "string"
                                    },
                                    "linked_object_id": {
                                        "description": "The id of a learning object to link to this planner note. Must be used in conjunction with linked_object_type\nand course_id. The object must be in the same course as specified by course_id. If the title argument is not\nprovided, the planner note will use the learning object's title as its title. Only one planner note may be\nlinked to a specific learning object.",
                                        "format": "int64",
                                        "type": "integer"
                                    },
                                    "linked_object_type": {
                                        "description": "The type of a learning object to link to this planner note. Must be used in conjunction wtih linked_object_id\nand course_id. Valid linked_object_type values are:\n'announcement', 'assignment', 'discussion_topic', 'wiki_page', 'quiz'",
                                        "type": "string"
                                    },
                                    "title": {
                                        "description": "The title of the planner note.",
                                        "type": "string"
                                    },
                                    "todo_date": {
                                        "description": "The date where this planner note should appear in the planner.\nThe value should be formatted as: yyyy-mm-dd.",
                                        "format": "date",
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PlannerNote"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Create a planner note",
                "tags": [
                    "planner_note"
                ]
            }
        },
        "/v1/planner_notes/{id}": {
            "delete": {
                "deprecated": false,
                "description": "Delete a planner note for the current user",
                "operationId": "delete_planner_note",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PlannerNote"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Delete a planner note",
                "tags": [
                    "planner_note"
                ]
            },
            "get": {
                "deprecated": false,
                "description": "Retrieve a planner note for the current user",
                "operationId": "show_plannernote",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PlannerNote"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Show a PlannerNote",
                "tags": [
                    "planner_note"
                ]
            },
            "put": {
                "deprecated": false,
                "description": "Update a planner note for the current user",
                "operationId": "update_plannernote",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "course_id": {
                                        "description": "The ID of the course to associate with the planner note. The caller must be able to view the course in order to\nassociate it with a planner note. Use a null or empty value to remove a planner note from a course. Note that if\nthe planner note is linked to a learning object, its course_id cannot be changed.",
                                        "format": "int64",
                                        "type": "integer"
                                    },
                                    "details": {
                                        "description": "Text of the planner note.",
                                        "type": "string"
                                    },
                                    "title": {
                                        "description": "The title of the planner note.",
                                        "type": "string"
                                    },
                                    "todo_date": {
                                        "description": "The date where this planner note should appear in the planner.\nThe value should be formatted as: yyyy-mm-dd.",
                                        "format": "date",
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PlannerNote"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Update a PlannerNote",
                "tags": [
                    "planner_note"
                ]
            }
        },
        "/v1/poll_sessions/closed": {
            "get": {
                "deprecated": false,
                "description": "A paginated list of all closed poll sessions available to the current user.",
                "operationId": "list_closed_poll_sessions",
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "List closed poll sessions",
                "tags": [
                    "poll_sessions"
                ]
            }
        },
        "/v1/poll_sessions/opened": {
            "get": {
                "deprecated": false,
                "description": "A paginated list of all opened poll sessions available to the current user.",
                "operationId": "list_opened_poll_sessions",
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "List opened poll sessions",
                "tags": [
                    "poll_sessions"
                ]
            }
        },
        "/v1/polls": {
            "get": {
                "deprecated": false,
                "description": "Returns the paginated list of polls for the current user.",
                "operationId": "list_polls",
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "List polls",
                "tags": [
                    "polls"
                ]
            },
            "post": {
                "deprecated": false,
                "description": "Create a new poll for the current user",
                "operationId": "create_single_poll",
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "properties": {
                                    "polls[description]": {
                                        "description": "A brief description or instructions for the poll.",
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "polls[question]": {
                                        "description": "The title of the poll.",
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    }
                                },
                                "required": [
                                    "polls[question]"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Create a single poll",
                "tags": [
                    "polls"
                ]
            }
        },
        "/v1/polls/{id}": {
            "delete": {
                "deprecated": false,
                "description": "<b>204 No Content</b> response code is returned if the deletion was successful.",
                "operationId": "delete_poll",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Delete a poll",
                "tags": [
                    "polls"
                ]
            },
            "get": {
                "deprecated": false,
                "description": "Returns the poll with the given id",
                "operationId": "get_single_poll",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Get a single poll",
                "tags": [
                    "polls"
                ]
            },
            "put": {
                "deprecated": false,
                "description": "Update an existing poll belonging to the current user",
                "operationId": "update_single_poll",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "polls[description]": {
                                        "description": "A brief description or instructions for the poll.",
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "polls[question]": {
                                        "description": "The title of the poll.",
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    }
                                },
                                "required": [
                                    "polls[question]"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Update a single poll",
                "tags": [
                    "polls"
                ]
            }
        },
        "/v1/polls/{poll_id}/poll_choices": {
            "get": {
                "deprecated": false,
                "description": "Returns the paginated list of PollChoices in this poll.",
                "operationId": "list_poll_choices_in_poll",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "poll_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/pageParam"
                    },
                    {
                        "$ref": "#/components/parameters/perPageParam"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "List poll choices in a poll",
                "tags": [
                    "poll_choices"
                ]
            },
            "post": {
                "deprecated": false,
                "description": "Create a new poll choice for this poll",
                "operationId": "create_single_poll_choice",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "poll_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "properties": {
                                    "poll_choices[is_correct]": {
                                        "description": "Whether this poll choice is considered correct or not. Defaults to false.",
                                        "items": {
                                            "type": "boolean"
                                        },
                                        "type": "array"
                                    },
                                    "poll_choices[position]": {
                                        "description": "The order this poll choice should be returned in the context it's sibling poll choices.",
                                        "items": {
                                            "type": "integer"
                                        },
                                        "type": "array"
                                    },
                                    "poll_choices[text]": {
                                        "description": "The descriptive text of the poll choice.",
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    }
                                },
                                "required": [
                                    "poll_choices[text]"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Create a single poll choice",
                "tags": [
                    "poll_choices"
                ]
            }
        },
        "/v1/polls/{poll_id}/poll_choices/{id}": {
            "delete": {
                "deprecated": false,
                "description": "<b>204 No Content</b> response code is returned if the deletion was successful.",
                "operationId": "delete_poll_choice",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "poll_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Delete a poll choice",
                "tags": [
                    "poll_choices"
                ]
            },
            "get": {
                "deprecated": false,
                "description": "Returns the poll choice with the given id",
                "operationId": "get_single_poll_choice",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "poll_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Get a single poll choice",
                "tags": [
                    "poll_choices"
                ]
            },
            "put": {
                "deprecated": false,
                "description": "Update an existing poll choice for this poll",
                "operationId": "update_single_poll_choice",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "poll_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "poll_choices[is_correct]": {
                                        "description": "Whether this poll choice is considered correct or not.  Defaults to false.",
                                        "items": {
                                            "type": "boolean"
                                        },
                                        "type": "array"
                                    },
                                    "poll_choices[position]": {
                                        "description": "The order this poll choice should be returned in the context it's sibling poll choices.",
                                        "items": {
                                            "type": "integer"
                                        },
                                        "type": "array"
                                    },
                                    "poll_choices[text]": {
                                        "description": "The descriptive text of the poll choice.",
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    }
                                },
                                "required": [
                                    "poll_choices[text]"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Update a single poll choice",
                "tags": [
                    "poll_choices"
                ]
            }
        },
        "/v1/polls/{poll_id}/poll_sessions": {
            "get": {
                "deprecated": false,
                "description": "Returns the paginated list of PollSessions in this poll.",
                "operationId": "list_poll_sessions_for_poll",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "poll_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/pageParam"
                    },
                    {
                        "$ref": "#/components/parameters/perPageParam"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "List poll sessions for a poll",
                "tags": [
                    "poll_sessions"
                ]
            },
            "post": {
                "deprecated": false,
                "description": "Create a new poll session for this poll",
                "operationId": "create_single_poll_session",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "poll_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "properties": {
                                    "poll_sessions[course_id]": {
                                        "description": "The id of the course this session is associated with.",
                                        "items": {
                                            "type": "integer"
                                        },
                                        "type": "array"
                                    },
                                    "poll_sessions[course_section_id]": {
                                        "description": "The id of the course section this session is associated with.",
                                        "items": {
                                            "type": "integer"
                                        },
                                        "type": "array"
                                    },
                                    "poll_sessions[has_public_results]": {
                                        "description": "Whether or not results are viewable by students.",
                                        "items": {
                                            "type": "boolean"
                                        },
                                        "type": "array"
                                    }
                                },
                                "required": [
                                    "poll_sessions[course_id]"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Create a single poll session",
                "tags": [
                    "poll_sessions"
                ]
            }
        },
        "/v1/polls/{poll_id}/poll_sessions/{id}": {
            "delete": {
                "deprecated": false,
                "description": "<b>204 No Content</b> response code is returned if the deletion was successful.",
                "operationId": "delete_poll_session",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "poll_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Delete a poll session",
                "tags": [
                    "poll_sessions"
                ]
            },
            "get": {
                "deprecated": false,
                "description": "Returns the poll session with the given id",
                "operationId": "get_results_for_single_poll_session",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "poll_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Get the results for a single poll session",
                "tags": [
                    "poll_sessions"
                ]
            },
            "put": {
                "deprecated": false,
                "description": "Update an existing poll session for this poll",
                "operationId": "update_single_poll_session",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "poll_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "poll_sessions[course_id]": {
                                        "description": "The id of the course this session is associated with.",
                                        "items": {
                                            "type": "integer"
                                        },
                                        "type": "array"
                                    },
                                    "poll_sessions[course_section_id]": {
                                        "description": "The id of the course section this session is associated with.",
                                        "items": {
                                            "type": "integer"
                                        },
                                        "type": "array"
                                    },
                                    "poll_sessions[has_public_results]": {
                                        "description": "Whether or not results are viewable by students.",
                                        "items": {
                                            "type": "boolean"
                                        },
                                        "type": "array"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Update a single poll session",
                "tags": [
                    "poll_sessions"
                ]
            }
        },
        "/v1/polls/{poll_id}/poll_sessions/{id}/close": {
            "get": {
                "deprecated": false,
                "operationId": "close_opened_poll_session",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "poll_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Close an opened poll session",
                "tags": [
                    "poll_sessions"
                ]
            }
        },
        "/v1/polls/{poll_id}/poll_sessions/{id}/open": {
            "get": {
                "deprecated": false,
                "operationId": "open_poll_session",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "poll_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Open a poll session",
                "tags": [
                    "poll_sessions"
                ]
            }
        },
        "/v1/polls/{poll_id}/poll_sessions/{poll_session_id}/poll_submissions": {
            "post": {
                "deprecated": false,
                "description": "Create a new poll submission for this poll session",
                "operationId": "create_single_poll_submission",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "poll_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "poll_session_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "properties": {
                                    "poll_submissions[poll_choice_id]": {
                                        "description": "The chosen poll choice for this submission.",
                                        "items": {
                                            "type": "integer"
                                        },
                                        "type": "array"
                                    }
                                },
                                "required": [
                                    "poll_submissions[poll_choice_id]"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Create a single poll submission",
                "tags": [
                    "poll_submissions"
                ]
            }
        },
        "/v1/polls/{poll_id}/poll_sessions/{poll_session_id}/poll_submissions/{id}": {
            "get": {
                "deprecated": false,
                "description": "Returns the poll submission with the given id",
                "operationId": "get_single_poll_submission",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "poll_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "poll_session_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Get a single poll submission",
                "tags": [
                    "poll_submissions"
                ]
            }
        },
        "/v1/progress/{id}": {
            "get": {
                "deprecated": false,
                "description": "Return completion and status information about an asynchronous job",
                "operationId": "query_progress",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Progress"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Query progress",
                "tags": [
                    "progress"
                ]
            }
        },
        "/v1/quiz_submissions/{quiz_submission_id}/questions": {
            "get": {
                "deprecated": false,
                "description": "Get a list of all the question records for this quiz submission.\n\n<b>200 OK</b> response code is returned if the request was successful.",
                "operationId": "get_all_quiz_submission_questions",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "quiz_submission_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Associations to include with the quiz submission question.",
                        "explode": false,
                        "in": "query",
                        "name": "include",
                        "schema": {
                            "items": {
                                "type": "string",
                                "enum": [
                                    "quiz_question"
                                ]
                            },
                            "type": "array"
                        },
                        "style": "form"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Get all quiz submission questions.",
                "tags": [
                    "quiz_submission_questions"
                ]
            },
            "post": {
                "deprecated": false,
                "description": "Provide or update an answer to one or more QuizQuestions.",
                "operationId": "answering_questions",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "quiz_submission_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "properties": {
                                    "access_code": {
                                        "description": "Access code for the Quiz, if any.",
                                        "type": "string"
                                    },
                                    "attempt": {
                                        "description": "The attempt number of the quiz submission being taken. Note that this\nmust be the latest attempt index, as questions for earlier attempts can\nnot be modified.",
                                        "format": "int64",
                                        "type": "integer"
                                    },
                                    "quiz_questions": {
                                        "items": {
                                            "$ref": "#/components/schemas/QuizQuestion"
                                        },
                                        "type": "array"
                                    },
                                    "validation_token": {
                                        "description": "The unique validation token you received when the Quiz Submission was\ncreated.",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "attempt",
                                    "validation_token"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/QuizSubmissionQuestion"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Answering questions",
                "tags": [
                    "quiz_submission_questions"
                ]
            }
        },
        "/v1/quiz_submissions/{quiz_submission_id}/questions/{id}/flag": {
            "put": {
                "deprecated": false,
                "description": "Set a flag on a quiz question to indicate that you want to return to it\nlater.",
                "operationId": "flagging_question",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "quiz_submission_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "access_code": {
                                        "description": "Access code for the Quiz, if any.",
                                        "type": "string"
                                    },
                                    "attempt": {
                                        "description": "The attempt number of the quiz submission being taken. Note that this\nmust be the latest attempt index, as questions for earlier attempts can\nnot be modified.",
                                        "format": "int64",
                                        "type": "integer"
                                    },
                                    "validation_token": {
                                        "description": "The unique validation token you received when the Quiz Submission was\ncreated.",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "attempt",
                                    "validation_token"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Flagging a question.",
                "tags": [
                    "quiz_submission_questions"
                ]
            }
        },
        "/v1/quiz_submissions/{quiz_submission_id}/questions/{id}/unflag": {
            "put": {
                "deprecated": false,
                "description": "Remove the flag that you previously set on a quiz question after you've\nreturned to it.",
                "operationId": "unflagging_question",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "quiz_submission_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "access_code": {
                                        "description": "Access code for the Quiz, if any.",
                                        "type": "string"
                                    },
                                    "attempt": {
                                        "description": "The attempt number of the quiz submission being taken. Note that this\nmust be the latest attempt index, as questions for earlier attempts can\nnot be modified.",
                                        "format": "int64",
                                        "type": "integer"
                                    },
                                    "validation_token": {
                                        "description": "The unique validation token you received when the Quiz Submission was\ncreated.",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "attempt",
                                    "validation_token"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Unflagging a question.",
                "tags": [
                    "quiz_submission_questions"
                ]
            }
        },
        "/v1/search/all_courses": {
            "get": {
                "deprecated": false,
                "description": "A paginated list of all courses visible in the public index",
                "operationId": "list_all_courses",
                "parameters": [
                    {
                        "description": "Search terms used for matching users/courses/groups (e.g. \"bob smith\"). If\nmultiple terms are given (separated via whitespace), only results matching\nall terms will be returned.",
                        "in": "query",
                        "name": "search",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Only return courses with public content. Defaults to false.",
                        "in": "query",
                        "name": "public_only",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "description": "Only return courses that allow self enrollment. Defaults to false.",
                        "in": "query",
                        "name": "open_enrollment_only",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/pageParam"
                    },
                    {
                        "$ref": "#/components/parameters/perPageParam"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Course"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "Returns a list of courses."
                    }
                },
                "summary": "List all courses",
                "tags": [
                    "search"
                ]
            }
        },
        "/v1/search/recipients": {
            "get": {
                "deprecated": false,
                "description": "Find valid recipients (users, courses and groups) that the current user\ncan send messages to. The /api/v1/search/recipients path is the preferred\nendpoint, /api/v1/conversations/find_recipients is deprecated.\n\nPagination is supported.",
                "operationId": "find_recipients_search",
                "parameters": [
                    {
                        "description": "Search terms used for matching users/courses/groups (e.g. \"bob smith\"). If\nmultiple terms are given (separated via whitespace), only results matching\nall terms will be returned.",
                        "in": "query",
                        "name": "search",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Limit the search to a particular course/group (e.g. \"course_3\" or \"group_4\").",
                        "in": "query",
                        "name": "context",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Array of ids to exclude from the search. These may be user ids or\ncourse/group ids prefixed with \"course_\" or \"group_\" respectively,\ne.g. exclude[]=1&exclude[]=2&exclude[]=course_3",
                        "explode": false,
                        "in": "query",
                        "name": "exclude",
                        "schema": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "description": "Limit the search just to users or contexts (groups/courses).",
                        "in": "query",
                        "name": "type",
                        "schema": {
                            "enum": [
                                "user",
                                "context"
                            ],
                            "type": "string"
                        }
                    },
                    {
                        "description": "Search for a specific user id. This ignores the other above parameters,\nand will never return more than one result.",
                        "in": "query",
                        "name": "user_id",
                        "schema": {
                            "format": "int64",
                            "type": "integer"
                        }
                    },
                    {
                        "description": "When searching by user_id, only users that could be normally messaged by\nthis user will be returned. This parameter allows you to specify a\nconversation that will be referenced for a shared context -- if both the\ncurrent user and the searched user are in the conversation, the user will\nbe returned. This is used to start new side conversations.",
                        "in": "query",
                        "name": "from_conversation_id",
                        "schema": {
                            "format": "int64",
                            "type": "integer"
                        }
                    },
                    {
                        "description": "Array of permission strings to be checked for each matched context (e.g.\n\"send_messages\"). This argument determines which permissions may be\nreturned in the response; it won't prevent contexts from being returned if\nthey don't grant the permission(s).",
                        "explode": false,
                        "in": "query",
                        "name": "permissions",
                        "schema": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Find recipients",
                "tags": [
                    "search"
                ]
            }
        },
        "/v1/sections/{course_section_id}/assignments/{assignment_id}/override": {
            "get": {
                "deprecated": false,
                "description": "Responds with a redirect to the override for the given section, if any\n(404 otherwise).",
                "operationId": "redirect_to_assignment_override_for_section",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_section_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "assignment_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Redirect to the assignment override for a section",
                "tags": [
                    "assignments"
                ]
            }
        },
        "/v1/sections/{id}": {
            "delete": {
                "deprecated": false,
                "description": "Delete an existing section.  Returns the former Section.",
                "operationId": "delete_section",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Section"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Delete a section",
                "tags": [
                    "sections"
                ]
            },
            "get": {
                "deprecated": false,
                "description": "Gets details about a specific section",
                "operationId": "get_section_information_sections",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "- \"students\": Associations to include with the group. Note: this is only\n  available if you have permission to view users or grades in the course\n- \"avatar_url\": Include the avatar URLs for students returned.\n- \"enrollments\": If 'students' is also included, return the section\n  enrollment for each student\n- \"total_students\": Returns the total amount of active and invited students\n  for the course section\n- \"passback_status\": Include the grade passback status.",
                        "explode": false,
                        "in": "query",
                        "name": "include",
                        "schema": {
                            "items": {
                                "type": "string",
                                "enum": [
                                    "students",
                                    "avatar_url",
                                    "enrollments",
                                    "total_students",
                                    "passback_status"
                                ]
                            },
                            "type": "array"
                        },
                        "style": "form"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Section"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Get section information",
                "tags": [
                    "sections"
                ]
            },
            "put": {
                "deprecated": false,
                "description": "Modify an existing section.",
                "operationId": "edit_section",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "course_section[end_at]": {
                                        "description": "Section end date in ISO8601 format. e.g. 2011-01-01T01:00Z",
                                        "format": "date-time",
                                        "type": "string"
                                    },
                                    "course_section[integration_id]": {
                                        "description": "The integration_id of the section. Must have manage_sis permission to set.",
                                        "type": "string"
                                    },
                                    "course_section[name]": {
                                        "description": "The name of the section",
                                        "type": "string"
                                    },
                                    "course_section[restrict_enrollments_to_section_dates]": {
                                        "description": "Set to true to restrict user enrollments to the start and end dates of the section.",
                                        "type": "boolean"
                                    },
                                    "course_section[sis_section_id]": {
                                        "description": "The sis ID of the section. Must have manage_sis permission to set.",
                                        "type": "string"
                                    },
                                    "course_section[start_at]": {
                                        "description": "Section start date in ISO8601 format, e.g. 2011-01-01T01:00Z",
                                        "format": "date-time",
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Section"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Edit a section",
                "tags": [
                    "sections"
                ]
            }
        },
        "/v1/sections/{id}/crosslist": {
            "delete": {
                "deprecated": false,
                "description": "Undo cross-listing of a Section, returning it to its original course.",
                "operationId": "de_cross_list_section",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Section"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "De-cross-list a Section",
                "tags": [
                    "sections"
                ]
            }
        },
        "/v1/sections/{id}/crosslist/{new_course_id}": {
            "post": {
                "deprecated": false,
                "description": "Move the Section to another course.  The new course may be in a different account (department),\nbut must belong to the same root account (institution).",
                "operationId": "cross_list_section",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "new_course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Section"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Cross-list a Section",
                "tags": [
                    "sections"
                ]
            }
        },
        "/v1/sections/{section_id}/assignments/{assignment_id}/peer_reviews": {
            "get": {
                "deprecated": false,
                "description": "Get a list of all Peer Reviews for this assignment",
                "operationId": "get_all_peer_reviews_sections_peer_reviews",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "section_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "assignment_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Associations to include with the peer review.",
                        "explode": false,
                        "in": "query",
                        "name": "include",
                        "schema": {
                            "items": {
                                "type": "string",
                                "enum": [
                                    "submission_comments",
                                    "user"
                                ]
                            },
                            "type": "array"
                        },
                        "style": "form"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/PeerReview"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Get all Peer Reviews",
                "tags": [
                    "peer_reviews"
                ]
            }
        },
        "/v1/sections/{section_id}/assignments/{assignment_id}/submission_summary": {
            "get": {
                "deprecated": false,
                "description": "Returns the number of submissions for the given assignment based on gradeable students\nthat fall into three categories: graded, ungraded, not submitted.",
                "operationId": "submission_summary_sections",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "section_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "assignment_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "If this argument is true, the response will take into account student groups.",
                        "in": "query",
                        "name": "grouped",
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Submission Summary",
                "tags": [
                    "submissions"
                ]
            }
        },
        "/v1/sections/{section_id}/assignments/{assignment_id}/submissions": {
            "get": {
                "deprecated": false,
                "description": "A paginated list of all existing submissions for an assignment.",
                "operationId": "list_assignment_submissions_sections",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "section_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "assignment_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Associations to include with the group.  \"group\" will add group_id and group_name.",
                        "explode": false,
                        "in": "query",
                        "name": "include",
                        "schema": {
                            "items": {
                                "type": "string",
                                "enum": [
                                    "submission_history",
                                    "submission_comments",
                                    "rubric_assessment",
                                    "assignment",
                                    "visibility",
                                    "course",
                                    "user",
                                    "group"
                                ]
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "description": "If this argument is true, the response will be grouped by student groups.",
                        "in": "query",
                        "name": "grouped",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "in": "query",
                        "name": "page",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        },
                        "description": "The numeric value leading to the next paginated page. This needs to be parsed from the response header (Link field)."
                    },
                    {
                        "in": "query",
                        "name": "per_page",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        },
                        "description": "The number of items to return."
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Submission"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "List assignment submissions",
                "tags": [
                    "submissions"
                ]
            },
            "post": {
                "deprecated": false,
                "description": "Make a submission for an assignment. You must be enrolled as a student in\nthe course/section to do this.\n\nAll online turn-in submission types are supported in this API. However,\nthere are a few things that are not yet supported:\n\n* Files can be submitted based on a file ID of a user or group file. However, there is no API yet for listing the user and group files, or uploading new files via the API. A file upload API is coming soon.\n* Media comments can be submitted, however, there is no API yet for creating a media comment to submit.\n* Integration with Google Docs is not yet supported.",
                "operationId": "submit_assignment_sections",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "section_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "assignment_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "properties": {
                                    "comment[text_comment]": {
                                        "description": "Include a textual comment with the submission.",
                                        "type": "string"
                                    },
                                    "submission[body]": {
                                        "description": "Submit the assignment as an HTML document snippet. Note this HTML snippet\nwill be sanitized using the same ruleset as a submission made from the\nCanvas web UI. The sanitized HTML will be returned in the response as the\nsubmission body. Requires a submission_type of \"online_text_entry\".",
                                        "type": "string"
                                    },
                                    "submission[file_ids]": {
                                        "description": "Submit the assignment as a set of one or more previously uploaded files\nresiding in the submitting user's files section (or the group's files\nsection, for group assignments).\n\nTo upload a new file to submit, see the submissions {api:SubmissionsApiController#create_file Upload a file API}.\n\nRequires a submission_type of \"online_upload\".",
                                        "items": {
                                            "type": "integer"
                                        },
                                        "type": "array"
                                    },
                                    "submission[media_comment_id]": {
                                        "description": "The media comment id to submit. Media comment ids can be submitted via\nthis API, however, note that there is not yet an API to generate or list\nexisting media comments, so this functionality is currently of limited use.\n\nRequires a submission_type of \"media_recording\".",
                                        "type": "string"
                                    },
                                    "submission[media_comment_type]": {
                                        "description": "The type of media comment being submitted.",
                                        "enum": [
                                            "audio",
                                            "video"
                                        ],
                                        "type": "string"
                                    },
                                    "submission[submission_type]": {
                                        "description": "The type of submission being made. The assignment submission_types must\ninclude this submission type as an allowed option, or the submission will be rejected with a 400 error.\n\nThe submission_type given determines which of the following parameters is\nused. For instance, to submit a URL, submission [submission_type] must be\nset to \"online_url\", otherwise the submission [url] parameter will be\nignored.",
                                        "enum": [
                                            "online_text_entry",
                                            "online_url",
                                            "online_upload",
                                            "media_recording",
                                            "basic_lti_launch"
                                        ],
                                        "type": "string"
                                    },
                                    "submission[url]": {
                                        "description": "Submit the assignment as a URL. The URL scheme must be \"http\" or \"https\",\nno \"ftp\" or other URL schemes are allowed. If no scheme is given (e.g.\n\"www.example.com\") then \"http\" will be assumed. Requires a submission_type\nof \"online_url\" or \"basic_lti_launch\".",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "submission[submission_type]"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Submit an assignment",
                "tags": [
                    "submissions"
                ]
            }
        },
        "/v1/sections/{section_id}/assignments/{assignment_id}/submissions/update_grades": {
            "post": {
                "deprecated": false,
                "description": "Update the grading and comments on multiple student's assignment\nsubmissions in an asynchronous job.\n\nThe user must have permission to manage grades in the appropriate context\n(course or section).",
                "operationId": "grade_or_comment_on_multiple_submissions_sections_assignments",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "section_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "assignment_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "properties": {
                                    "grade_data[student_id][assignment_id]": {
                                        "description": "Specifies which assignment to grade.  This argument is not necessary when\nusing the assignment-specific endpoints.",
                                        "format": "int64",
                                        "type": "integer"
                                    },
                                    "grade_data[student_id][excuse]": {
                                        "description": "See documentation for the excuse argument in the\n{api:SubmissionsApiController#update Submissions Update} documentation",
                                        "type": "boolean"
                                    },
                                    "grade_data[student_id][file_ids]": {
                                        "description": "See documentation for the comment[] arguments in the\n{api:SubmissionsApiController#update Submissions Update} documentation",
                                        "items": {
                                            "type": "integer"
                                        },
                                        "type": "array"
                                    },
                                    "grade_data[student_id][group_comment]": {
                                        "description": "no description",
                                        "type": "boolean"
                                    },
                                    "grade_data[student_id][media_comment_id]": {
                                        "description": "no description",
                                        "type": "string"
                                    },
                                    "grade_data[student_id][media_comment_type]": {
                                        "description": "no description",
                                        "enum": [
                                            "audio",
                                            "video"
                                        ],
                                        "type": "string"
                                    },
                                    "grade_data[student_id][posted_grade]": {
                                        "description": "See documentation for the posted_grade argument in the\n{api:SubmissionsApiController#update Submissions Update} documentation",
                                        "type": "string"
                                    },
                                    "grade_data[student_id][rubric_assessment]": {
                                        "description": "See documentation for the rubric_assessment argument in the\n{api:SubmissionsApiController#update Submissions Update} documentation"
                                    },
                                    "grade_data[student_id][text_comment]": {
                                        "description": "no description",
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Progress"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Grade or comment on multiple submissions",
                "tags": [
                    "submissions"
                ]
            }
        },
        "/v1/sections/{section_id}/assignments/{assignment_id}/submissions/{submission_id}/peer_reviews": {
            "delete": {
                "deprecated": false,
                "description": "Delete a peer review for the assignment",
                "operationId": "delete_peer_review_sections",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "section_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "assignment_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "submission_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "user_id to delete as reviewer on this assignment",
                        "in": "query",
                        "name": "user_id",
                        "required": true,
                        "schema": {
                            "format": "int64",
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PeerReview"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Delete Peer Review",
                "tags": [
                    "peer_reviews"
                ]
            },
            "get": {
                "deprecated": false,
                "description": "Get a list of all Peer Reviews for this assignment",
                "operationId": "get_all_peer_reviews_sections_submissions",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "section_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "assignment_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "submission_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Associations to include with the peer review.",
                        "explode": false,
                        "in": "query",
                        "name": "include",
                        "schema": {
                            "items": {
                                "type": "string",
                                "enum": [
                                    "submission_comments",
                                    "user"
                                ]
                            },
                            "type": "array"
                        },
                        "style": "form"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/PeerReview"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Get all Peer Reviews",
                "tags": [
                    "peer_reviews"
                ]
            },
            "post": {
                "deprecated": false,
                "description": "Create a peer review for the assignment",
                "operationId": "create_peer_review_sections",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "section_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "assignment_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "submission_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "properties": {
                                    "user_id": {
                                        "description": "user_id to assign as reviewer on this assignment",
                                        "format": "int64",
                                        "type": "integer"
                                    }
                                },
                                "required": [
                                    "user_id"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PeerReview"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Create Peer Review",
                "tags": [
                    "peer_reviews"
                ]
            }
        },
        "/v1/sections/{section_id}/assignments/{assignment_id}/submissions/{user_id}": {
            "get": {
                "deprecated": false,
                "description": "Get a single submission, based on user id.",
                "operationId": "get_single_submission_sections",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "section_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "assignment_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "user_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Associations to include with the group.",
                        "explode": false,
                        "in": "query",
                        "name": "include",
                        "schema": {
                            "items": {
                                "type": "string",
                                "enum": [
                                    "submission_history",
                                    "submission_comments",
                                    "rubric_assessment",
                                    "visibility",
                                    "course",
                                    "user"
                                ]
                            },
                            "type": "array"
                        },
                        "style": "form"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Get a single submission",
                "tags": [
                    "submissions"
                ]
            },
            "put": {
                "deprecated": false,
                "description": "Comment on and/or update the grading for a student's assignment submission.\nIf any submission or rubric_assessment arguments are provided, the user\nmust have permission to manage grades in the appropriate context (course or\nsection).",
                "operationId": "grade_or_comment_on_submission_sections",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "section_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "assignment_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "user_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "comment[file_ids]": {
                                        "description": "Attach files to this comment that were previously uploaded using the\nSubmission Comment API's files action",
                                        "items": {
                                            "type": "integer"
                                        },
                                        "type": "array"
                                    },
                                    "comment[group_comment]": {
                                        "description": "Whether or not this comment should be sent to the entire group (defaults\nto false). Ignored if this is not a group assignment or if no text_comment\nis provided.",
                                        "type": "boolean"
                                    },
                                    "comment[media_comment_id]": {
                                        "description": "Add an audio/video comment to the submission. Media comments can be added\nvia this API, however, note that there is not yet an API to generate or\nlist existing media comments, so this functionality is currently of\nlimited use.",
                                        "type": "string"
                                    },
                                    "comment[media_comment_type]": {
                                        "description": "The type of media comment being added.",
                                        "enum": [
                                            "audio",
                                            "video"
                                        ],
                                        "type": "string"
                                    },
                                    "comment[text_comment]": {
                                        "description": "Add a textual comment to the submission.",
                                        "type": "string"
                                    },
                                    "include[visibility]": {
                                        "description": "Whether this assignment is visible to the owner of the submission",
                                        "type": "string"
                                    },
                                    "rubric_assessment": {
                                        "description": "Assign a rubric assessment to this assignment submission. The\nsub-parameters here depend on the rubric for the assignment. The general\nformat is, for each row in the rubric:\n\nThe points awarded for this row.\n  rubric_assessment[criterion_id][points]\n\nComments to add for this row.\n  rubric_assessment[criterion_id][comments]\n\nFor example, if the assignment rubric is (in JSON format):\n  !!!javascript\n  [\n    {\n      'id': 'crit1',\n      'points': 10,\n      'description': 'Criterion 1',\n      'ratings':\n      [\n        { 'description': 'Good', 'points': 10 },\n        { 'description': 'Poor', 'points': 3 }\n      ]\n    },\n    {\n      'id': 'crit2',\n      'points': 5,\n      'description': 'Criterion 2',\n      'ratings':\n      [\n        { 'description': 'Complete', 'points': 5 },\n        { 'description': 'Incomplete', 'points': 0 }\n      ]\n    }\n  ]\n\nThen a possible set of values for rubric_assessment would be:\n    rubric_assessment[crit1][points]=3&rubric_assessment[crit2][points]=5&rubric_assessment[crit2][comments]=Well%20Done."
                                    },
                                    "submission[excuse]": {
                                        "description": "Sets the \"excused\" status of an assignment.",
                                        "type": "boolean"
                                    },
                                    "submission[late_policy_status]": {
                                        "description": "Sets the late policy status to either \"late\", \"missing\", \"none\", or null.",
                                        "type": "string"
                                    },
                                    "submission[posted_grade]": {
                                        "description": "Assign a score to the submission, updating both the \"score\" and \"grade\"\nfields on the submission record. This parameter can be passed in a few\ndifferent formats:\n\npoints:: A floating point or integral value, such as \"13.5\". The grade\n  will be interpreted directly as the score of the assignment.\n  Values above assignment.points_possible are allowed, for awarding\n  extra credit.\npercentage:: A floating point value appended with a percent sign, such as\n   \"40%\". The grade will be interpreted as a percentage score on the\n   assignment, where 100% == assignment.points_possible. Values above 100%\n   are allowed, for awarding extra credit.\nletter grade:: A letter grade, following the assignment's defined letter\n   grading scheme. For example, \"A-\". The resulting score will be the high\n   end of the defined range for the letter grade. For instance, if \"B\" is\n   defined as 86% to 84%, a letter grade of \"B\" will be worth 86%. The\n   letter grade will be rejected if the assignment does not have a defined\n   letter grading scheme. For more fine-grained control of scores, pass in\n   points or percentage rather than the letter grade.\n\"pass/complete/fail/incomplete\":: A string value of \"pass\" or \"complete\"\n   will give a score of 100%. \"fail\" or \"incomplete\" will give a score of\n   0.\n\nNote that assignments with grading_type of \"pass_fail\" can only be\nassigned a score of 0 or assignment.points_possible, nothing inbetween. If\na posted_grade in the \"points\" or \"percentage\" format is sent, the grade\nwill only be accepted if the grade equals one of those two values.",
                                        "type": "string"
                                    },
                                    "submission[seconds_late_override]": {
                                        "description": "Sets the seconds late if late policy status is \"late\"",
                                        "format": "int64",
                                        "type": "integer"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Submission"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Grade or comment on a submission",
                "tags": [
                    "submissions"
                ]
            }
        },
        "/v1/sections/{section_id}/assignments/{assignment_id}/submissions/{user_id}/files": {
            "post": {
                "deprecated": false,
                "description": "Upload a file to a submission.\n\nThis API endpoint is the first step in uploading a file to a submission as a student.\nSee the {file:file_uploads.html File Upload Documentation} for details on the file upload workflow.\n\nThe final step of the file upload workflow will return the attachment data,\nincluding the new file id. The caller can then POST to submit the\n+online_upload+ assignment with these file ids.",
                "operationId": "upload_file_sections",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "section_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "assignment_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "user_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Upload a file",
                "tags": [
                    "submissions"
                ]
            }
        },
        "/v1/sections/{section_id}/assignments/{assignment_id}/submissions/{user_id}/read": {
            "delete": {
                "deprecated": false,
                "description": "No request fields are necessary.\n\nOn success, the response will be 204 No Content with an empty body.",
                "operationId": "mark_submission_as_unread_sections",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "section_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "assignment_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "user_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Mark submission as unread",
                "tags": [
                    "submissions"
                ]
            },
            "put": {
                "deprecated": false,
                "description": "No request fields are necessary.\n\nOn success, the response will be 204 No Content with an empty body.",
                "operationId": "mark_submission_as_read_sections",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "section_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "assignment_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "user_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Mark submission as read",
                "tags": [
                    "submissions"
                ]
            }
        },
        "/v1/sections/{section_id}/enrollments": {
            "get": {
                "deprecated": false,
                "description": "Depending on the URL given, return a paginated list of either (1) all of\nthe enrollments in a course, (2) all of the enrollments in a section or (3)\nall of a user's enrollments. This includes student, teacher, TA, and\nobserver enrollments.\n\nIf a user has multiple enrollments in a context (e.g. as a teacher\nand a student or in multiple course sections), each enrollment will be\nlisted separately.\n\nnote: Currently, only a root level admin user can return other users' enrollments. A\nuser can, however, return his/her own enrollments.",
                "operationId": "list_enrollments_sections",
                "parameters": [
                    {
                        "in": "query",
                        "name": "page",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "minimum": 0
                        },
                        "description": "The bookmark leading to the next paginated page. This needs to be parsed from the response header ('Link' field)."
                    },
                    {
                        "in": "query",
                        "name": "per_page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 100,
                            "default": 10
                        },
                        "description": "The numbers of items to return."
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "section_id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "description": "A list of enrollment types to return. Accepted values are 'StudentEnrollment', 'TeacherEnrollment', 'TaEnrollment', 'DesignerEnrollment', and 'ObserverEnrollment.' If omitted, all enrollment types are returned. This argument is ignored if `role` is given.",
                        "explode": false,
                        "in": "query",
                        "name": "type",
                        "schema": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "description": "A list of enrollment roles to return. Accepted values include course-level roles created by the {api:RoleOverridesController#add_role Add Role API} as well as the base enrollment types accepted by the `type` argument above.",
                        "explode": false,
                        "in": "query",
                        "name": "role",
                        "schema": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "description": "Filter by enrollment state. If omitted, 'active' and 'invited' enrollments are returned. When querying a user's enrollments (either via user_id argument or via user enrollments endpoint), the following additional synthetic states are supported: \"current_and_invited\"|\"current_and_future\"|\"current_and_concluded\"",
                        "explode": false,
                        "in": "query",
                        "name": "state",
                        "schema": {
                            "items": {
                                "type": "string",
                                "enum": [
                                    "active",
                                    "invited",
                                    "creation_pending",
                                    "deleted",
                                    "rejected",
                                    "completed",
                                    "inactive"
                                ]
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "description": "Array of additional information to include on the enrollment or user records. \"avatar_url\" and \"group_ids\" will be returned on the user record.",
                        "explode": false,
                        "in": "query",
                        "name": "include",
                        "schema": {
                            "items": {
                                "type": "string",
                                "enum": [
                                    "avatar_url",
                                    "group_ids",
                                    "locked",
                                    "observed_users",
                                    "can_be_removed"
                                ]
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "description": "Filter by user_id (only valid for course or section enrollment queries). If set to the current user's id, this is a way to determine if the user has any enrollments in the course or section, independent of whether the user has permission to view other people on the roster.",
                        "in": "query",
                        "name": "user_id",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "description": "Return grades for the given grading_period.  If this parameter is not specified, the returned grades will be for the whole course.",
                        "in": "query",
                        "name": "grading_period_id",
                        "schema": {
                            "format": "int64",
                            "type": "integer"
                        }
                    },
                    {
                        "description": "Returns only enrollments for the specified enrollment term. This parameter only applies to the user enrollments path. May pass the ID from the enrollment terms api or the SIS id prepended with 'sis_term_id:'.",
                        "in": "query",
                        "name": "enrollment_term_id",
                        "schema": {
                            "format": "int64",
                            "type": "integer"
                        }
                    },
                    {
                        "description": "Returns only enrollments for the specified SIS account ID(s). Does not look into sub_accounts. May pass in array or string.",
                        "explode": false,
                        "in": "query",
                        "name": "sis_account_id",
                        "schema": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "description": "Returns only enrollments matching the specified SIS course ID(s). May pass in array or string.",
                        "explode": false,
                        "in": "query",
                        "name": "sis_course_id",
                        "schema": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "description": "Returns only section enrollments matching the specified SIS section ID(s). May pass in array or string.",
                        "explode": false,
                        "in": "query",
                        "name": "sis_section_id",
                        "schema": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "description": "Returns only enrollments for the specified SIS user ID(s). May pass in array or string.",
                        "explode": false,
                        "in": "query",
                        "name": "sis_user_id",
                        "schema": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Enrollment"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "List enrollments",
                "tags": [
                    "enrollments"
                ]
            },
            "post": {
                "deprecated": false,
                "description": "Create a new user enrollment for a course or section.",
                "operationId": "enroll_user_sections",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "section_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "properties": {
                                    "enrollment[associated_user_id]": {
                                        "description": "For an observer enrollment, the ID of a student to observe. The\ncaller must have +manage_students+ permission in the course.\nThis is a one-off operation; to automatically observe all a\nstudent's enrollments (for example, as a parent), please use\nthe {api:UserObserveesController#create User Observees API}.",
                                        "format": "int64",
                                        "type": "integer"
                                    },
                                    "enrollment[course_section_id]": {
                                        "description": "The ID of the course section to enroll the student in. If the\nsection-specific URL is used, this argument is redundant and will be\nignored.",
                                        "format": "int64",
                                        "type": "integer"
                                    },
                                    "enrollment[enrollment_state]": {
                                        "description": "If set to 'active,' student will be immediately enrolled in the course.\nOtherwise they will be required to accept a course invitation. Default is\n'invited.'.\n\nIf set to 'inactive', student will be listed in the course roster for\nteachers, but will not be able to participate in the course until\ntheir enrollment is activated.",
                                        "enum": [
                                            "active",
                                            "invited",
                                            "inactive"
                                        ],
                                        "type": "string"
                                    },
                                    "enrollment[limit_privileges_to_course_section]": {
                                        "description": "If set, the enrollment will only allow the user to see and interact with\nusers enrolled in the section given by course_section_id.\n* For teachers and TAs, this includes grading privileges.\n* Section-limited students will not see any users (including teachers\n  and TAs) not enrolled in their sections.\n* Users may have other enrollments that grant privileges to\n  multiple sections in the same course.",
                                        "type": "boolean"
                                    },
                                    "enrollment[notify]": {
                                        "description": "If true, a notification will be sent to the enrolled user.\nNotifications are not sent by default.",
                                        "type": "boolean"
                                    },
                                    "enrollment[role]": {
                                        "description": "Assigns a custom course-level role to the user."
                                    },
                                    "enrollment[role_id]": {
                                        "description": "Assigns a custom course-level role to the user.",
                                        "format": "int64",
                                        "type": "integer"
                                    },
                                    "enrollment[self_enrolled]": {
                                        "description": "If true, marks the enrollment as a self-enrollment, which gives\nstudents the ability to drop the course if desired. Defaults to false.",
                                        "type": "boolean"
                                    },
                                    "enrollment[self_enrollment_code]": {
                                        "description": "If the current user is not allowed to manage enrollments in this\ncourse, but the course allows self-enrollment, the user can self-\nenroll as a student in the default section by passing in a valid\ncode. When self-enrolling, the user_id must be 'self'. The\nenrollment_state will be set to 'active' and all other arguments\nwill be ignored.",
                                        "type": "string"
                                    },
                                    "enrollment[type]": {
                                        "description": "Enroll the user as a student, teacher, TA, observer, or designer. If no\nvalue is given, the type will be inferred by enrollment[role] if supplied,\notherwise 'StudentEnrollment' will be used.",
                                        "enum": [
                                            "StudentEnrollment",
                                            "TeacherEnrollment",
                                            "TaEnrollment",
                                            "ObserverEnrollment",
                                            "DesignerEnrollment"
                                        ],
                                        "type": "string"
                                    },
                                    "enrollment[user_id]": {
                                        "description": "The ID of the user to be enrolled in the course.",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "enrollment[type]",
                                    "enrollment[user_id]"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Enrollment"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Enroll a user",
                "tags": [
                    "enrollments"
                ]
            }
        },
        "/v1/sections/{section_id}/students/submissions": {
            "get": {
                "deprecated": false,
                "description": "A paginated list of all existing submissions for a given set of students and assignments.",
                "operationId": "list_submissions_for_multiple_assignments_sections",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "section_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "List of student ids to return submissions for. If this argument is\nomitted, return submissions for the calling user. Students may only list\ntheir own submissions. Observers may only list those of associated\nstudents. The special id \"all\" will return submissions for all students\nin the course/section as appropriate.",
                        "explode": false,
                        "in": "query",
                        "name": "student_ids",
                        "schema": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "description": "List of assignments to return submissions for. If none are given,\nsubmissions for all assignments are returned.",
                        "explode": false,
                        "in": "query",
                        "name": "assignment_ids",
                        "schema": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "description": "If this argument is present, the response will be grouped by student,\nrather than a flat array of submissions.",
                        "in": "query",
                        "name": "grouped",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "description": "If this argument is set to true, the response will only include\nsubmissions for assignments that have the post_to_sis flag set to true and\nuser enrollments that were added through sis.",
                        "in": "query",
                        "name": "post_to_sis",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "description": "If this argument is set, the response will only include submissions that\nwere submitted after the specified date_time. This will exclude\nsubmissions that do not have a submitted_at which will exclude unsubmitted\nsubmissions.\nThe value must be formatted as ISO 8601 YYYY-MM-DDTHH:MM:SSZ.",
                        "in": "query",
                        "name": "submitted_since",
                        "schema": {
                            "format": "date-time",
                            "type": "string"
                        }
                    },
                    {
                        "description": "If this argument is set, the response will only include submissions that\nwere graded after the specified date_time. This will exclude\nsubmissions that have not been graded.\nThe value must be formatted as ISO 8601 YYYY-MM-DDTHH:MM:SSZ.",
                        "in": "query",
                        "name": "graded_since",
                        "schema": {
                            "format": "date-time",
                            "type": "string"
                        }
                    },
                    {
                        "description": "The id of the grading period in which submissions are being requested\n(Requires grading periods to exist on the account)",
                        "in": "query",
                        "name": "grading_period_id",
                        "schema": {
                            "format": "int64",
                            "type": "integer"
                        }
                    },
                    {
                        "description": "The current status of the submission",
                        "in": "query",
                        "name": "workflow_state",
                        "schema": {
                            "enum": [
                                "submitted",
                                "unsubmitted",
                                "graded",
                                "pending_review"
                            ],
                            "type": "string"
                        }
                    },
                    {
                        "description": "The current state of the enrollments. If omitted will include all\nenrollments that are not deleted.",
                        "in": "query",
                        "name": "enrollment_state",
                        "schema": {
                            "enum": [
                                "active",
                                "concluded"
                            ],
                            "type": "string"
                        }
                    },
                    {
                        "description": "If omitted it is set to true. When set to false it will ignore the effective\nstate of the student enrollments and use the workflow_state for the\nenrollments. The argument is ignored unless enrollment_state argument is\nalso passed.",
                        "in": "query",
                        "name": "state_based_on_date",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "description": "The order submissions will be returned in.  Defaults to \"id\".  Doesn't\naffect results for \"grouped\" mode.",
                        "in": "query",
                        "name": "order",
                        "schema": {
                            "enum": [
                                "id",
                                "graded_at"
                            ],
                            "type": "string"
                        }
                    },
                    {
                        "description": "Determines whether ordered results are returned in ascending or descending\norder.  Defaults to \"ascending\".  Doesn't affect results for \"grouped\" mode.",
                        "in": "query",
                        "name": "order_direction",
                        "schema": {
                            "enum": [
                                "ascending",
                                "descending"
                            ],
                            "type": "string"
                        }
                    },
                    {
                        "description": "Associations to include with the group. `total_scores` requires the\n`grouped` argument.",
                        "explode": false,
                        "in": "query",
                        "name": "include",
                        "schema": {
                            "items": {
                                "type": "string",
                                "enum": [
                                    "submission_history",
                                    "submission_comments",
                                    "rubric_assessment",
                                    "assignment",
                                    "total_scores",
                                    "visibility",
                                    "course",
                                    "user"
                                ]
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "$ref": "#/components/parameters/pageParam"
                    },
                    {
                        "$ref": "#/components/parameters/perPageParam"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "List submissions for multiple assignments",
                "tags": [
                    "submissions"
                ]
            }
        },
        "/v1/sections/{section_id}/submissions/update_grades": {
            "post": {
                "deprecated": false,
                "description": "Update the grading and comments on multiple student's assignment\nsubmissions in an asynchronous job.\n\nThe user must have permission to manage grades in the appropriate context\n(course or section).",
                "operationId": "grade_or_comment_on_multiple_submissions_sections_submissions",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "section_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "properties": {
                                    "grade_data[student_id][assignment_id]": {
                                        "description": "Specifies which assignment to grade.  This argument is not necessary when\nusing the assignment-specific endpoints.",
                                        "format": "int64",
                                        "type": "integer"
                                    },
                                    "grade_data[student_id][excuse]": {
                                        "description": "See documentation for the excuse argument in the\n{api:SubmissionsApiController#update Submissions Update} documentation",
                                        "type": "boolean"
                                    },
                                    "grade_data[student_id][file_ids]": {
                                        "description": "See documentation for the comment[] arguments in the\n{api:SubmissionsApiController#update Submissions Update} documentation",
                                        "items": {
                                            "type": "integer"
                                        },
                                        "type": "array"
                                    },
                                    "grade_data[student_id][group_comment]": {
                                        "description": "no description",
                                        "type": "boolean"
                                    },
                                    "grade_data[student_id][media_comment_id]": {
                                        "description": "no description",
                                        "type": "string"
                                    },
                                    "grade_data[student_id][media_comment_type]": {
                                        "description": "no description",
                                        "enum": [
                                            "audio",
                                            "video"
                                        ],
                                        "type": "string"
                                    },
                                    "grade_data[student_id][posted_grade]": {
                                        "description": "See documentation for the posted_grade argument in the\n{api:SubmissionsApiController#update Submissions Update} documentation",
                                        "type": "string"
                                    },
                                    "grade_data[student_id][rubric_assessment]": {
                                        "description": "See documentation for the rubric_assessment argument in the\n{api:SubmissionsApiController#update Submissions Update} documentation"
                                    },
                                    "grade_data[student_id][text_comment]": {
                                        "description": "no description",
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Progress"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Grade or comment on multiple submissions",
                "tags": [
                    "submissions"
                ]
            }
        },
        "/v1/services/kaltura": {
            "get": {
                "deprecated": false,
                "description": "Return the config information for the Kaltura plugin in json format.",
                "operationId": "get_kaltura_config",
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Get Kaltura config",
                "tags": [
                    "services"
                ]
            }
        },
        "/v1/services/kaltura_session": {
            "post": {
                "deprecated": false,
                "description": "Start a new Kaltura session, so that new media can be recorded and uploaded\nto this Canvas instance's Kaltura instance.",
                "operationId": "start_kaltura_session",
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Start Kaltura session",
                "tags": [
                    "services"
                ]
            }
        },
        "/v1/shared_brand_configs/{id}": {
            "delete": {
                "deprecated": false,
                "description": "Delete a SharedBrandConfig, which will unshare it so you nor anyone else in\nyour account will see it as an option to pick from.",
                "operationId": "un_share_brandconfig_theme",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SharedBrandConfig"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Un-share a BrandConfig (Theme)",
                "tags": [
                    "shared_brand_configs"
                ]
            }
        },
        "/v1/users/activity_stream": {
            "get": {
                "deprecated": false,
                "description": "Returns the current user's global activity stream, paginated.\n\nThere are many types of objects that can be returned in the activity\nstream. All object types have the same basic set of shared attributes:\n  !!!javascript\n  {\n    'created_at': '2011-07-13T09:12:00Z',\n    'updated_at': '2011-07-25T08:52:41Z',\n    'id': 1234,\n    'title': 'Stream Item Subject',\n    'message': 'This is the body text of the activity stream item. It is plain-text, and can be multiple paragraphs.',\n    'type': 'DiscussionTopic|Conversation|Message|Submission|Conference|Collaboration|AssessmentRequest...',\n    'read_state': false,\n    'context_type': 'course', // course|group\n    'course_id': 1,\n    'group_id': null,\n    'html_url': \"http://...\" // URL to the Canvas web UI for this stream item\n  }\nIn addition, each item type has its own set of attributes available.\nDiscussionTopic:\n    'type': 'DiscussionTopic',\n    'discussion_topic_id': 1234,\n    'total_root_discussion_entries': 5,\n    'require_initial_post': true,\n    'user_has_posted': true,\n    'root_discussion_entries': {\n      ...\n    }\nFor DiscussionTopic, the message is truncated at 4kb.\nAnnouncement:\n    'type': 'Announcement',\n    'announcement_id': 1234,\n    'total_root_discussion_entries': 5,\n    'require_initial_post': true,\n    'user_has_posted': null,\n    'root_discussion_entries': {\n      ...\nFor Announcement, the message is truncated at 4kb.\nConversation:\n    'type': 'Conversation',\n    'conversation_id': 1234,\n    'private': false,\n    'participant_count': 3,\nMessage:\n    'type': 'Message',\n    'message_id': 1234,\n    'notification_category': 'Assignment Graded'\nSubmission:\nReturns an {api:Submissions:Submission Submission} with its Course and Assignment data.\nConference:\n    'type': 'Conference',\n    'web_conference_id': 1234\nCollaboration:\n    'type': 'Collaboration',\n    'collaboration_id': 1234\nAssessmentRequest:\n  'type': 'AssessmentRequest',\n  'assessment_request_id': 1234",
                "operationId": "list_activity_stream_activity_stream",
                "parameters": [
                    {
                        "description": "If true, will only return objects for courses the user is actively participating in",
                        "in": "query",
                        "name": "only_active_courses",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/pageParam"
                    },
                    {
                        "$ref": "#/components/parameters/perPageParam"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/ActivityStream"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "Returns the current user's global activity stream, paginated."
                    }
                },
                "summary": "List the activity stream",
                "tags": [
                    "users"
                ]
            }
        },
        "/v1/users/self/activity_stream": {
            "delete": {
                "deprecated": false,
                "description": "Hide all stream items for the user",
                "operationId": "hide_all_stream_items",
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Hide all stream items",
                "tags": [
                    "users"
                ]
            },
            "get": {
                "deprecated": false,
                "description": "Returns the current user's global activity stream, paginated.\n\nThere are many types of objects that can be returned in the activity\nstream. All object types have the same basic set of shared attributes:\n  !!!javascript\n  {\n    'created_at': '2011-07-13T09:12:00Z',\n    'updated_at': '2011-07-25T08:52:41Z',\n    'id': 1234,\n    'title': 'Stream Item Subject',\n    'message': 'This is the body text of the activity stream item. It is plain-text, and can be multiple paragraphs.',\n    'type': 'DiscussionTopic|Conversation|Message|Submission|Conference|Collaboration|AssessmentRequest...',\n    'read_state': false,\n    'context_type': 'course', // course|group\n    'course_id': 1,\n    'group_id': null,\n    'html_url': \"http://...\" // URL to the Canvas web UI for this stream item\n  }\n\nIn addition, each item type has its own set of attributes available.\n\nDiscussionTopic:\n\n  !!!javascript\n  {\n    'type': 'DiscussionTopic',\n    'discussion_topic_id': 1234,\n    'total_root_discussion_entries': 5,\n    'require_initial_post': true,\n    'user_has_posted': true,\n    'root_discussion_entries': {\n      ...\n    }\n  }\n\nFor DiscussionTopic, the message is truncated at 4kb.\n\nAnnouncement:\n\n  !!!javascript\n  {\n    'type': 'Announcement',\n    'announcement_id': 1234,\n    'total_root_discussion_entries': 5,\n    'require_initial_post': true,\n    'user_has_posted': null,\n    'root_discussion_entries': {\n      ...\n    }\n  }\n\nFor Announcement, the message is truncated at 4kb.\n\nConversation:\n\n  !!!javascript\n  {\n    'type': 'Conversation',\n    'conversation_id': 1234,\n    'private': false,\n    'participant_count': 3,\n  }\n\nMessage:\n\n  !!!javascript\n  {\n    'type': 'Message',\n    'message_id': 1234,\n    'notification_category': 'Assignment Graded'\n  }\n\nSubmission:\n\nReturns an {api:Submissions:Submission Submission} with its Course and Assignment data.\n\nConference:\n\n  !!!javascript\n  {\n    'type': 'Conference',\n    'web_conference_id': 1234\n  }\n\nCollaboration:\n\n  !!!javascript\n  {\n    'type': 'Collaboration',\n    'collaboration_id': 1234\n  }\n\nAssessmentRequest:\n\n  !!!javascript\n  {\n    'type': 'AssessmentRequest',\n    'assessment_request_id': 1234\n  }",
                "operationId": "list_activity_stream_self",
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "List the activity stream",
                "tags": [
                    "users"
                ]
            }
        },
        "/v1/users/self/activity_stream/summary": {
            "get": {
                "deprecated": false,
                "description": "Returns a summary of the current user's global activity stream.",
                "operationId": "activity_stream_summary",
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Activity stream summary",
                "tags": [
                    "users"
                ]
            }
        },
        "/v1/users/self/activity_stream/{id}": {
            "delete": {
                "deprecated": false,
                "description": "Hide the given stream item.",
                "operationId": "hide_stream_item",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Hide a stream item",
                "tags": [
                    "users"
                ]
            }
        },
        "/v1/users/self/bookmarks": {
            "get": {
                "deprecated": false,
                "description": "Returns the paginated list of bookmarks.",
                "operationId": "list_bookmarks",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Bookmark"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "List bookmarks",
                "tags": [
                    "bookmarks"
                ]
            },
            "post": {
                "deprecated": false,
                "description": "Creates a bookmark.",
                "operationId": "create_bookmark",
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "properties": {
                                    "data": {
                                        "description": "The data associated with the bookmark",
                                        "type": "string"
                                    },
                                    "name": {
                                        "description": "The name of the bookmark",
                                        "type": "string"
                                    },
                                    "position": {
                                        "description": "The position of the bookmark. Defaults to the bottom.",
                                        "format": "int64",
                                        "type": "integer"
                                    },
                                    "url": {
                                        "description": "The url of the bookmark",
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Bookmark"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Create bookmark",
                "tags": [
                    "bookmarks"
                ]
            }
        },
        "/v1/users/self/bookmarks/{id}": {
            "delete": {
                "deprecated": false,
                "description": "Deletes a bookmark",
                "operationId": "delete_bookmark",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Delete bookmark",
                "tags": [
                    "bookmarks"
                ]
            },
            "get": {
                "deprecated": false,
                "description": "Returns the details for a bookmark.",
                "operationId": "get_bookmark",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Bookmark"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Get bookmark",
                "tags": [
                    "bookmarks"
                ]
            },
            "put": {
                "deprecated": false,
                "description": "Updates a bookmark",
                "operationId": "update_bookmark",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "description": "The data associated with the bookmark",
                                        "type": "string"
                                    },
                                    "name": {
                                        "description": "The name of the bookmark",
                                        "type": "string"
                                    },
                                    "position": {
                                        "description": "The position of the bookmark. Defaults to the bottom.",
                                        "format": "int64",
                                        "type": "integer"
                                    },
                                    "url": {
                                        "description": "The url of the bookmark",
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Folder"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Update bookmark",
                "tags": [
                    "bookmarks"
                ]
            }
        },
        "/v1/users/self/communication_channels/push": {
            "delete": {
                "deprecated": false,
                "operationId": "delete_push_notification_endpoint",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/SuccessTrue"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Delete a push notification endpoint",
                "tags": [
                    "communication_channels"
                ]
            }
        },
        "/v1/users/self/communication_channels/{communication_channel_id}/notification_preference_categories/{category}": {
            "put": {
                "deprecated": false,
                "description": "Change the preferences for multiple notifications based on the category for a single communication channel",
                "operationId": "update_preferences_by_category",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "communication_channel_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The name of the category. Must be parameterized (e.g. The category \"Course Content\" should be \"course_content\")",
                        "in": "path",
                        "name": "category",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "notification_preferences[frequency]": {
                                        "description": "The desired frequency for each notification in the category",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "notification_preferences[frequency]"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Update preferences by category",
                "tags": [
                    "notification_preferences"
                ]
            }
        },
        "/v1/users/self/communication_channels/{communication_channel_id}/notification_preferences": {
            "put": {
                "deprecated": false,
                "description": "Change the preferences for multiple notifications for a single communication channel at once",
                "operationId": "update_multiple_preferences_communication_channel_id",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "communication_channel_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "notification_preferences[X][frequency]": {
                                        "description": "The desired frequency for <X> notification",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "notification_preferences[X][frequency]"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Update multiple preferences",
                "tags": [
                    "notification_preferences"
                ]
            }
        },
        "/v1/users/self/communication_channels/{communication_channel_id}/notification_preferences/{notification}": {
            "put": {
                "deprecated": false,
                "description": "Change the preference for a single notification for a single communication channel",
                "operationId": "update_preference_communication_channel_id",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "communication_channel_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "notification",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "notification_preferences[frequency]": {
                                        "description": "The desired frequency for this notification",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "notification_preferences[frequency]"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Update a preference",
                "tags": [
                    "notification_preferences"
                ]
            }
        },
        "/v1/users/self/communication_channels/{type}/{address}/notification_preferences": {
            "put": {
                "deprecated": false,
                "description": "Change the preferences for multiple notifications for a single communication channel at once",
                "operationId": "update_multiple_preferences_type",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "type",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "address",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "notification_preferences[X][frequency]": {
                                        "description": "The desired frequency for <X> notification",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "notification_preferences[X][frequency]"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Update multiple preferences",
                "tags": [
                    "notification_preferences"
                ]
            }
        },
        "/v1/users/self/communication_channels/{type}/{address}/notification_preferences/{notification}": {
            "put": {
                "deprecated": false,
                "description": "Change the preference for a single notification for a single communication channel",
                "operationId": "update_preference_type",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "type",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "address",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "notification",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "notification_preferences[frequency]": {
                                        "description": "The desired frequency for this notification",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "notification_preferences[frequency]"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Update a preference",
                "tags": [
                    "notification_preferences"
                ]
            }
        },
        "/v1/users/self/course_nicknames": {
            "delete": {
                "deprecated": false,
                "description": "Remove all stored course nicknames.",
                "operationId": "clear_course_nicknames",
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Clear course nicknames",
                "tags": [
                    "users"
                ]
            },
            "get": {
                "deprecated": false,
                "description": "Returns all course nicknames you have set.",
                "operationId": "list_course_nicknames",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/CourseNickname"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "List course nicknames",
                "tags": [
                    "users"
                ]
            }
        },
        "/v1/users/self/course_nicknames/{course_id}": {
            "delete": {
                "deprecated": false,
                "description": "Remove the nickname for the given course.\nSubsequent course API calls will return the actual name for the course.",
                "operationId": "remove_course_nickname",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CourseNickname"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Remove course nickname",
                "tags": [
                    "users"
                ]
            },
            "get": {
                "deprecated": false,
                "description": "Returns the nickname for a specific course.",
                "operationId": "get_course_nickname",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CourseNickname"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Get course nickname",
                "tags": [
                    "users"
                ]
            },
            "put": {
                "deprecated": false,
                "description": "Set a nickname for the given course. This will replace the course's name\nin output of API calls you make subsequently, as well as in selected\nplaces in the Canvas web user interface.",
                "operationId": "set_course_nickname",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "nickname": {
                                        "description": "The nickname to set.  It must be non-empty and shorter than 60 characters.",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "nickname"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CourseNickname"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Set course nickname",
                "tags": [
                    "users"
                ]
            }
        },
        "/v1/users/self/favorites/courses": {
            "delete": {
                "deprecated": false,
                "description": "Reset the current user's course favorites to the default\nautomatically generated list of enrolled courses",
                "operationId": "reset_course_favorites",
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Reset course favorites",
                "tags": [
                    "favorites"
                ]
            },
            "get": {
                "deprecated": false,
                "description": "Retrieve the paginated list of favorite courses for the current user. If the user has not chosen\nany favorites, then a selection of currently enrolled courses will be returned.\n\nSee the {api:CoursesController#index List courses API} for details on accepted include[] parameters.",
                "operationId": "list_favorite_courses",
                "parameters": [
                    {
                        "description": "When set, only return courses that are not configured as blueprint courses.",
                        "in": "query",
                        "name": "exclude_blueprint_courses",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/pageParam"
                    },
                    {
                        "$ref": "#/components/parameters/perPageParam"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Course"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "List favorite courses",
                "tags": [
                    "favorites"
                ]
            }
        },
        "/v1/users/self/favorites/courses/{id}": {
            "delete": {
                "deprecated": false,
                "description": "Remove a course from the current user's favorites.",
                "operationId": "remove_course_from_favorites",
                "parameters": [
                    {
                        "description": "the ID or SIS ID of the course to remove",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Favorite"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Remove course from favorites",
                "tags": [
                    "favorites"
                ]
            },
            "post": {
                "deprecated": false,
                "description": "Add a course to the current user's favorites.  If the course is already\nin the user's favorites, nothing happens.",
                "operationId": "add_course_to_favorites",
                "parameters": [
                    {
                        "description": "The ID or SIS ID of the course to add.  The current user must be\nregistered in the course.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Favorite"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Add course to favorites",
                "tags": [
                    "favorites"
                ]
            }
        },
        "/v1/users/self/favorites/groups": {
            "delete": {
                "deprecated": false,
                "description": "Reset the current user's group favorites to the default\nautomatically generated list of enrolled group",
                "operationId": "reset_group_favorites",
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Reset group favorites",
                "tags": [
                    "favorites"
                ]
            },
            "get": {
                "deprecated": false,
                "description": "Retrieve the paginated list of favorite groups for the current user. If the user has not chosen\nany favorites, then a selection of groups that the user is a member of will be returned.",
                "operationId": "list_favorite_groups",
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Group"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "List favorite groups",
                "tags": [
                    "favorites"
                ]
            }
        },
        "/v1/users/self/favorites/groups/{id}": {
            "delete": {
                "deprecated": false,
                "description": "Remove a group from the current user's favorites.",
                "operationId": "remove_group_from_favorites",
                "parameters": [
                    {
                        "description": "the ID or SIS ID of the group to remove",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Favorite"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Remove group from favorites",
                "tags": [
                    "favorites"
                ]
            },
            "post": {
                "deprecated": false,
                "description": "Add a group to the current user's favorites.  If the group is already\nin the user's favorites, nothing happens.",
                "operationId": "add_group_to_favorites",
                "parameters": [
                    {
                        "description": "The ID or SIS ID of the group to add.  The current user must be\na member of the group.",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Favorite"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Add group to favorites",
                "tags": [
                    "favorites"
                ]
            }
        },
        "/v1/users/self/groups": {
            "get": {
                "deprecated": false,
                "description": "Returns a paginated list of active groups for the current user.",
                "operationId": "list_your_groups",
                "parameters": [
                    {
                        "description": "Only include groups that are in this type of context.",
                        "in": "query",
                        "name": "context_type",
                        "schema": {
                            "enum": [
                                "Account",
                                "Course"
                            ],
                            "type": "string"
                        }
                    },
                    {
                        "description": "- \"tabs\": Include the list of tabs configured for each group.  See the\n  {api:TabsController#index List available tabs API} for more information.",
                        "explode": false,
                        "in": "query",
                        "name": "include",
                        "schema": {
                            "items": {
                                "type": "string",
                                "enum": [
                                    "tabs"
                                ]
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "$ref": "#/components/parameters/pageParam"
                    },
                    {
                        "$ref": "#/components/parameters/perPageParam"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Group"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "List your groups",
                "tags": [
                    "groups"
                ]
            }
        },
        "/v1/users/self/pandata_events_token": {
            "post": {
                "deprecated": false,
                "description": "Returns a jwt auth and props token that can be used to send events to\nPandata.\n\nNOTE: This is currently only available to the mobile developer keys.",
                "operationId": "get_pandata_events_jwt_token_and_its_expiration_date",
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "properties": {
                                    "app_key": {
                                        "description": "The pandata events appKey for this mobile app",
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Get a Pandata Events jwt token and its expiration date",
                "tags": [
                    "users"
                ]
            }
        },
        "/v1/users/self/todo": {
            "get": {
                "deprecated": false,
                "description": "A paginated list of the current user's list of todo items, as seen on the user dashboard.\n\nThere is a limit to the number of items returned.\n\nThe `ignore` and `ignore_permanently` URLs can be used to update the user's\npreferences on what items will be displayed.\nPerforming a DELETE request against the `ignore` URL will hide that item\nfrom future todo item requests, until the item changes.\nPerforming a DELETE request against the `ignore_permanently` URL will hide\nthat item forever.",
                "operationId": "list_todo_items",
                "parameters": [
                    {
                        "description": "\"ungraded_quizzes\":: Optionally include ungraded quizzes (such as practice quizzes and surveys) in the list.\n                     These will be returned under a +quiz+ key instead of an +assignment+ key in response elements.",
                        "explode": false,
                        "in": "query",
                        "name": "include",
                        "schema": {
                            "items": {
                                "type": "string",
                                "enum": [
                                    "ungraded_quizzes"
                                ]
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "$ref": "#/components/parameters/pageParam"
                    },
                    {
                        "$ref": "#/components/parameters/perPageParam"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "List the TODO items",
                "tags": [
                    "users"
                ]
            }
        },
        "/v1/users/self/todo_item_count": {
            "get": {
                "deprecated": false,
                "description": "Counts of different todo items such as the number of assignments needing grading as well as the number of assignments needing submitting.\n\nThere is a limit to the number of todo items this endpoint will count.\nIt will only look at the first 100 todo items for the user. If the user has more than 100 todo items this count may not be reliable.\nThe largest reliable number for both counts is 100.",
                "operationId": "list_counts_for_todo_items",
                "parameters": [
                    {
                        "description": "\"ungraded_quizzes\":: Optionally include ungraded quizzes (such as practice quizzes and surveys) in the list.\n                     These will be returned under a +quiz+ key instead of an +assignment+ key in response elements.",
                        "explode": false,
                        "in": "query",
                        "name": "include",
                        "schema": {
                            "items": {
                                "type": "string",
                                "enum": [
                                    "ungraded_quizzes"
                                ]
                            },
                            "type": "array"
                        },
                        "style": "form"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "List counts for todo items",
                "tags": [
                    "users"
                ]
            }
        },
        "/v1/users/self/upcoming_events": {
            "get": {
                "deprecated": false,
                "description": "A paginated list of the current user's upcoming events.",
                "operationId": "list_upcoming_assignments_calendar_events",
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "List upcoming assignments, calendar events",
                "tags": [
                    "users"
                ]
            }
        },
        "/v1/users/{id}": {
            "get": {
                "deprecated": false,
                "description": "Shows details for user.\n\nAlso includes an attribute \"permissions\", a non-comprehensive list of permissions for the user.\nExample:\n  !!!javascript\n  \"permissions\": {\n   \"can_update_name\": true, // Whether the user can update their name.\n   \"can_update_avatar\": false // Whether the user can update their avatar.\n  }",
                "operationId": "show_user_details",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Show user details",
                "tags": [
                    "users"
                ]
            },
            "put": {
                "deprecated": false,
                "description": "Modify an existing user. To modify a user's login, see the documentation for logins.",
                "operationId": "edit_user",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "user[avatar][token]": {
                                        "description": "A unique representation of the avatar record to assign as the user's\ncurrent avatar. This token can be obtained from the user avatars endpoint.\nThis supersedes the user [avatar] [url] argument, and if both are included\nthe url will be ignored. Note: this is an internal representation and is\nsubject to change without notice. It should be consumed with this api\nendpoint and used in the user update endpoint, and should not be\nconstructed by the client.",
                                        "type": "string"
                                    },
                                    "user[avatar][url]": {
                                        "description": "To set the user's avatar to point to an external url, do not include a\ntoken and instead pass the url here. Warning: For maximum compatibility,\nplease use 128 px square images.",
                                        "type": "string"
                                    },
                                    "user[email]": {
                                        "description": "The default email address of the user.",
                                        "type": "string"
                                    },
                                    "user[locale]": {
                                        "description": "The user's preferred language, from the list of languages Canvas supports.\nThis is in RFC-5646 format.",
                                        "type": "string"
                                    },
                                    "user[name]": {
                                        "description": "The full name of the user. This name will be used by teacher for grading.",
                                        "type": "string"
                                    },
                                    "user[short_name]": {
                                        "description": "User's name as it will be displayed in discussions, messages, and comments.",
                                        "type": "string"
                                    },
                                    "user[sortable_name]": {
                                        "description": "User's name as used to sort alphabetically in lists.",
                                        "type": "string"
                                    },
                                    "user[time_zone]": {
                                        "description": "The time zone for the user. Allowed time zones are\n{http://www.iana.org/time-zones IANA time zones} or friendlier\n{http://api.rubyonrails.org/classes/ActiveSupport/TimeZone.html Ruby on Rails time zones}.",
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Edit a user",
                "tags": [
                    "users"
                ]
            }
        },
        "/v1/users/{id}/colors": {
            "get": {
                "deprecated": false,
                "description": "Returns all custom colors that have been saved for a user.",
                "operationId": "get_custom_colors",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CustomColors"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Get custom colors",
                "tags": [
                    "users"
                ]
            }
        },
        "/v1/users/{id}/colors/{asset_string}": {
            "get": {
                "deprecated": false,
                "description": "Returns the custom colors that have been saved for a user for a given context.\n\nThe asset_string parameter should be in the format 'context_id', for example\n'course_42'.",
                "operationId": "get_custom_color",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "asset_string",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Get custom color",
                "tags": [
                    "users"
                ]
            },
            "put": {
                "deprecated": false,
                "description": "Updates a custom color for a user for a given context.  This allows\ncolors for the calendar and elsewhere to be customized on a user basis.\n\nThe asset string parameter should be in the format 'context_id', for example\n'course_42'",
                "operationId": "update_custom_color",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "asset_string",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "hexcode": {
                                        "description": "The hexcode of the color to set for the context, if you choose to pass the\nhexcode as a query parameter rather than in the request body you should\nNOT include the '#' unless you escape it first.",
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Update custom color",
                "tags": [
                    "users"
                ]
            }
        },
        "/v1/users/{id}/dashboard_positions": {
            "get": {
                "deprecated": false,
                "description": "Returns all dashboard positions that have been saved for a user.",
                "operationId": "get_dashboard_positions",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Get dashboard positions",
                "tags": [
                    "users"
                ]
            },
            "put": {
                "deprecated": false,
                "description": "Updates the dashboard positions for a user for a given context.  This allows\npositions for the dashboard cards and elsewhere to be customized on a per\nuser basis.\n\nThe asset string parameter should be in the format 'context_id', for example\n'course_42'",
                "operationId": "update_dashboard_positions",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Update dashboard positions",
                "tags": [
                    "users"
                ]
            }
        },
        "/v1/users/{id}/merge_into/accounts/{destination_account_id}/users/{destination_user_id}": {
            "put": {
                "deprecated": false,
                "description": "Merge a user into another user.\nTo merge users, the caller must have permissions to manage both users. This\nshould be considered irreversible. This will delete the user and move all\nthe data into the destination user.\n\nWhen finding users by SIS ids in different accounts the\ndestination_account_id is required.\n\nThe account can also be identified by passing the domain in destination_account_id.",
                "operationId": "merge_user_into_another_user_accounts",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "destination_account_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "destination_user_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Merge user into another user",
                "tags": [
                    "users"
                ]
            }
        },
        "/v1/users/{id}/merge_into/{destination_user_id}": {
            "put": {
                "deprecated": false,
                "description": "Merge a user into another user.\nTo merge users, the caller must have permissions to manage both users. This\nshould be considered irreversible. This will delete the user and move all\nthe data into the destination user.\n\nWhen finding users by SIS ids in different accounts the\ndestination_account_id is required.\n\nThe account can also be identified by passing the domain in destination_account_id.",
                "operationId": "merge_user_into_another_user_destination_user_id",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "destination_user_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Merge user into another user",
                "tags": [
                    "users"
                ]
            }
        },
        "/v1/users/{id}/settings": {
            "get": {
                "deprecated": false,
                "description": "Update an existing user's settings.",
                "operationId": "update_user_settings",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "If true, require user to manually mark discussion posts as read (don't\nauto-mark as read).",
                        "in": "query",
                        "name": "manual_mark_as_read",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "description": "If true, the user's page loads with the global navigation collapsed",
                        "in": "query",
                        "name": "collapse_global_nav",
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Update user settings.",
                "tags": [
                    "users"
                ]
            }
        },
        "/v1/users/{id}/split": {
            "post": {
                "deprecated": false,
                "description": "Merged users cannot be fully restored to their previous state, but this will\nattempt to split as much as possible to the previous state.\nTo split a merged user, the caller must have permissions to manage all of\nthe users logins. If there are multiple users that have been merged into one\nuser it will split each merge into a separate user.\nA split can only happen within 180 days of a user merge. A user merge deletes\nthe previous user and may be permanently deleted. In this scenario we create\na new user object and proceed to move as much as possible to the new user.\nThe user object will not have preserved the name or settings from the\nprevious user. Some items may have been deleted during a user_merge that\ncannot be restored, and/or the data has become stale because of other\nchanges to the objects since the time of the user_merge.",
                "operationId": "split_merged_users_into_separate_users",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/User"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Split merged users into separate users",
                "tags": [
                    "users"
                ]
            }
        },
        "/v1/users/{user_id}/avatars": {
            "get": {
                "deprecated": false,
                "description": "A paginated list of the possible user avatar options that can be set with the user update endpoint. The response will be an array of avatar records. If the 'type' field is 'attachment', the record will include all the normal attachment json fields; otherwise it will include only the 'url' and 'display_name' fields. Additionally, all records will include a 'type' field and a 'token' field. The following explains each field in more detail\ntype:: [\"gravatar\"|\"attachment\"|\"no_pic\"] The type of avatar record, for categorization purposes.\nurl:: The url of the avatar\ntoken:: A unique representation of the avatar record which can be used to set the avatar with the user update endpoint. Note: this is an internal representation and is subject to change without notice. It should be consumed with this api endpoint and used in the user update endpoint, and should not be constructed by the client.\ndisplay_name:: A textual description of the avatar record\nid:: ['attachment' type only] the internal id of the attachment\ncontent-type:: ['attachment' type only] the content-type of the attachment\nfilename:: ['attachment' type only] the filename of the attachment\nsize:: ['attachment' type only] the size of the attachment",
                "operationId": "list_avatar_options",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "user_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/pageParam"
                    },
                    {
                        "$ref": "#/components/parameters/perPageParam"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Avatar"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "List avatar options",
                "tags": [
                    "users"
                ]
            }
        },
        "/v1/users/{user_id}/calendar_events": {
            "get": {
                "deprecated": false,
                "description": "Retrieve the paginated list of calendar events or assignments for the specified user.\nTo view calendar events for a user other than yourself,\nyou must either be an observer of that user or an administrator.",
                "operationId": "list_calendar_events_for_user",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "user_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Defaults to \"event\"",
                        "in": "query",
                        "name": "type",
                        "schema": {
                            "enum": [
                                "event",
                                "assignment"
                            ],
                            "type": "string"
                        }
                    },
                    {
                        "description": "Only return events since the start_date (inclusive).\nDefaults to today. The value should be formatted as: yyyy-mm-dd or ISO 8601 YYYY-MM-DDTHH:MM:SSZ.",
                        "in": "query",
                        "name": "start_date",
                        "schema": {
                            "format": "date",
                            "type": "string"
                        }
                    },
                    {
                        "description": "Only return events before the end_date (inclusive).\nDefaults to start_date. The value should be formatted as: yyyy-mm-dd or ISO 8601 YYYY-MM-DDTHH:MM:SSZ.\nIf end_date is the same as start_date, then only events on that day are\nreturned.",
                        "in": "query",
                        "name": "end_date",
                        "schema": {
                            "format": "date",
                            "type": "string"
                        }
                    },
                    {
                        "description": "Defaults to false (dated events only).\nIf true, only return undated events and ignore start_date and end_date.",
                        "in": "query",
                        "name": "undated",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "description": "Defaults to false (uses start_date, end_date, and undated criteria).\nIf true, all events are returned, ignoring start_date, end_date, and undated criteria.",
                        "in": "query",
                        "name": "all_events",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "description": "List of context codes of courses/groups/users whose events you want to see.\nIf not specified, defaults to the current user (i.e personal calendar,\nno course/group events). Limited to 10 context codes, additional ones are\nignored. The format of this field is the context type, followed by an\nunderscore, followed by the context id. For example: course_42",
                        "explode": false,
                        "in": "query",
                        "name": "context_codes",
                        "schema": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "description": "Array of attributes to exclude. Possible values are \"description\", \"child_events\" and \"assignment\"",
                        "explode": false,
                        "in": "query",
                        "name": "excludes",
                        "schema": {
                            "items": {
                                "items": {
                                    "type": "object"
                                },
                                "type": "array"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "$ref": "#/components/parameters/pageParam"
                    },
                    {
                        "$ref": "#/components/parameters/perPageParam"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/CalendarEvent"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "List calendar events for a user",
                "tags": [
                    "calendar_events"
                ]
            }
        },
        "/v1/users/{user_id}/communication_channels": {
            "get": {
                "deprecated": false,
                "description": "Returns a paginated list of communication channels for the specified user,\nsorted by position.",
                "operationId": "list_user_communication_channels",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "user_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/pageParam"
                    },
                    {
                        "$ref": "#/components/parameters/perPageParam"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/CommunicationChannel"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "List user communication channels",
                "tags": [
                    "communication_channels"
                ]
            },
            "post": {
                "deprecated": false,
                "description": "Creates a new communication channel for the specified user.",
                "operationId": "create_communication_channel",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "user_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "properties": {
                                    "communication_channel[address]": {
                                        "description": "An email address or SMS number. Not required for \"push\" type channels.",
                                        "type": "string"
                                    },
                                    "communication_channel[token]": {
                                        "description": "A registration id, device token, or equivalent token given to an app when\nregistering with a push notification provider. Only valid for \"push\" type channels.",
                                        "type": "string"
                                    },
                                    "communication_channel[type]": {
                                        "description": "The type of communication channel.\n\nIn order to enable push notification support, the server must be\nproperly configured (via sns.yml) to communicate with Amazon\nSimple Notification Services, and the developer key used to create\nthe access token from this request must have an SNS ARN configured on\nit.",
                                        "enum": [
                                            "email",
                                            "sms",
                                            "push"
                                        ],
                                        "type": "string"
                                    },
                                    "skip_confirmation": {
                                        "description": "Only valid for site admins and account admins making requests; If true, the channel is\nautomatically validated and no confirmation email or SMS is sent.\nOtherwise, the user must respond to a confirmation message to confirm the\nchannel.",
                                        "type": "boolean"
                                    }
                                },
                                "required": [
                                    "communication_channel[address]",
                                    "communication_channel[type]"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CommunicationChannel"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Create a communication channel",
                "tags": [
                    "communication_channels"
                ]
            }
        },
        "/v1/users/{user_id}/communication_channels/{communication_channel_id}/notification_preference_categories": {
            "get": {
                "deprecated": false,
                "description": "Fetch all notification preference categories for the given communication channel",
                "operationId": "list_of_preference_categories",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "user_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "communication_channel_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "List of preference categories",
                "tags": [
                    "notification_preferences"
                ]
            }
        },
        "/v1/users/{user_id}/communication_channels/{communication_channel_id}/notification_preferences": {
            "get": {
                "deprecated": false,
                "description": "Fetch all preferences for the given communication channel",
                "operationId": "list_preferences_communication_channel_id",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "user_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "communication_channel_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/NotificationPreference"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "List preferences",
                "tags": [
                    "notification_preferences"
                ]
            }
        },
        "/v1/users/{user_id}/communication_channels/{communication_channel_id}/notification_preferences/{notification}": {
            "get": {
                "deprecated": false,
                "description": "Fetch the preference for the given notification for the given communicaiton channel",
                "operationId": "get_preference_communication_channel_id",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "user_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "communication_channel_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "notification",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotificationPreference"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Get a preference",
                "tags": [
                    "notification_preferences"
                ]
            }
        },
        "/v1/users/{user_id}/communication_channels/{id}": {
            "delete": {
                "deprecated": false,
                "description": "Delete an existing communication channel.",
                "operationId": "delete_communication_channel_id",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "user_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CommunicationChannel"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Delete a communication channel",
                "tags": [
                    "communication_channels"
                ]
            }
        },
        "/v1/users/{user_id}/communication_channels/{type}/{address}": {
            "delete": {
                "deprecated": false,
                "description": "Delete an existing communication channel.",
                "operationId": "delete_communication_channel_type",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "user_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "type",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "address",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/CommunicationChannel"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Delete a communication channel",
                "tags": [
                    "communication_channels"
                ]
            }
        },
        "/v1/users/{user_id}/communication_channels/{type}/{address}/notification_preferences": {
            "get": {
                "deprecated": false,
                "description": "Fetch all preferences for the given communication channel",
                "operationId": "list_preferences_type",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "user_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "type",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "address",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/NotificationPreference"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "List preferences",
                "tags": [
                    "notification_preferences"
                ]
            }
        },
        "/v1/users/{user_id}/communication_channels/{type}/{address}/notification_preferences/{notification}": {
            "get": {
                "deprecated": false,
                "description": "Fetch the preference for the given notification for the given communicaiton channel",
                "operationId": "get_preference_type",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "user_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "type",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "address",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "notification",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/NotificationPreference"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Get a preference",
                "tags": [
                    "notification_preferences"
                ]
            }
        },
        "/v1/users/{user_id}/content_exports": {
            "get": {
                "deprecated": false,
                "description": "A paginated list of the past and pending content export jobs for a course,\ngroup, or user. Exports are returned newest first.",
                "operationId": "list_content_exports_users",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "user_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/pageParam"
                    },
                    {
                        "$ref": "#/components/parameters/perPageParam"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/ContentExport"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "List content exports",
                "tags": [
                    "content_exports"
                ]
            },
            "post": {
                "deprecated": false,
                "description": "Begin a content export job for a course, group, or user.\n\nYou can use the {api:ProgressController#show Progress API} to track the\nprogress of the export. The migration's progress is linked to with the\n_progress_url_ value.\n\nWhen the export completes, use the {api:ContentExportsApiController#show Show content export} endpoint\nto retrieve a download URL for the exported content.",
                "operationId": "export_content_users",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "user_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "properties": {
                                    "export_type": {
                                        "description": "\"common_cartridge\":: Export the contents of the course in the Common Cartridge (.imscc) format\n\"qti\":: Export quizzes from a course in the QTI format\n\"zip\":: Export files from a course, group, or user in a zip file",
                                        "enum": [
                                            "common_cartridge",
                                            "qti",
                                            "zip"
                                        ],
                                        "type": "string"
                                    },
                                    "select": {
                                        "description": "The select parameter allows exporting specific data. The keys are object types like 'files',\n'folders', 'pages', etc. The value for each key is a list of object ids. An id can be an\ninteger or a string.\n\nMultiple object types can be selected in the same call. However, not all object types are\nvalid for every export_type. Common Cartridge supports all object types. Zip and QTI only\nsupport the object types as described below.\n\n\"folders\":: Also supported for zip export_type.\n\"files\":: Also supported for zip export_type.\n\"quizzes\":: Also supported for qti export_type.",
                                        "enum": [
                                            "folders",
                                            "files",
                                            "attachments",
                                            "quizzes",
                                            "assignments",
                                            "announcements",
                                            "calendar_events",
                                            "discussion_topics",
                                            "modules",
                                            "module_items",
                                            "pages",
                                            "rubrics"
                                        ]
                                    },
                                    "skip_notifications": {
                                        "description": "Don't send the notifications about the export to the user. Default: false",
                                        "type": "boolean"
                                    }
                                },
                                "required": [
                                    "export_type"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ContentExport"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Export content",
                "tags": [
                    "content_exports"
                ]
            }
        },
        "/v1/users/{user_id}/content_exports/{id}": {
            "get": {
                "deprecated": false,
                "description": "Get information about a single content export.",
                "operationId": "show_content_export_users",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "user_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ContentExport"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Show content export",
                "tags": [
                    "content_exports"
                ]
            }
        },
        "/v1/users/{user_id}/content_licenses": {
            "get": {
                "deprecated": false,
                "description": "A paginated list of licenses that can be applied",
                "operationId": "list_licenses_users",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "user_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/pageParam"
                    },
                    {
                        "$ref": "#/components/parameters/perPageParam"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/License"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "List licenses",
                "tags": [
                    "files"
                ]
            }
        },
        "/v1/users/{user_id}/content_migrations": {
            "get": {
                "deprecated": false,
                "description": "Returns paginated content migrations",
                "operationId": "list_content_migrations_users",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "user_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/pageParam"
                    },
                    {
                        "$ref": "#/components/parameters/perPageParam"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/ContentMigration"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "List content migrations",
                "tags": [
                    "content_migrations"
                ]
            },
            "post": {
                "deprecated": false,
                "description": "Create a content migration. If the migration requires a file to be uploaded\nthe actual processing of the file will start once the file upload process is completed.\nFile uploading works as described in the {file:file_uploads.html File Upload Documentation}\nexcept that the values are set on a *pre_attachment* sub-hash.\n\nFor migrations that don't require a file to be uploaded, like course copy, the\nprocessing will begin as soon as the migration is created.\n\nYou can use the {api:ProgressController#show Progress API} to track the\nprogress of the migration. The migration's progress is linked to with the\n_progress_url_ value.\n\nThe two general workflows are:\n\nIf no file upload is needed:\n\n1. POST to create\n2. Use the {api:ProgressController#show Progress} specified in _progress_url_ to monitor progress\n\nFor file uploading:\n\n1. POST to create with file info in *pre_attachment*\n2. Do {file:file_uploads.html file upload processing} using the data in the *pre_attachment* data\n3. {api:ContentMigrationsController#show GET} the ContentMigration\n4. Use the {api:ProgressController#show Progress} specified in _progress_url_ to monitor progress\n\n (required if doing .zip file upload)",
                "operationId": "create_content_migration_users",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "user_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "properties": {
                                    "date_shift_options[day_substitutions][X]": {
                                        "description": "Move anything scheduled for day 'X' to the specified day. (0-Sunday,\n1-Monday, 2-Tuesday, 3-Wednesday, 4-Thursday, 5-Friday, 6-Saturday)",
                                        "format": "int64",
                                        "type": "integer"
                                    },
                                    "date_shift_options[new_end_date]": {
                                        "description": "The new end date for the source content/course",
                                        "format": "date",
                                        "type": "string"
                                    },
                                    "date_shift_options[new_start_date]": {
                                        "description": "The new start date for the content/course",
                                        "format": "date",
                                        "type": "string"
                                    },
                                    "date_shift_options[old_end_date]": {
                                        "description": "The original end date of the source content/course",
                                        "format": "date",
                                        "type": "string"
                                    },
                                    "date_shift_options[old_start_date]": {
                                        "description": "The original start date of the source content/course",
                                        "format": "date",
                                        "type": "string"
                                    },
                                    "date_shift_options[remove_dates]": {
                                        "description": "Whether to remove dates in the copied course. Cannot be used\nin conjunction with *shift_dates*.",
                                        "type": "boolean"
                                    },
                                    "date_shift_options[shift_dates]": {
                                        "description": "Whether to shift dates in the copied course",
                                        "type": "boolean"
                                    },
                                    "migration_type": {
                                        "description": "The type of the migration. Use the\n{api:ContentMigrationsController#available_migrators Migrator} endpoint to\nsee all available migrators. Default allowed values:\ncanvas_cartridge_importer, common_cartridge_importer,\ncourse_copy_importer, zip_file_importer, qti_converter, moodle_converter",
                                        "type": "string"
                                    },
                                    "pre_attachment[name]": {
                                        "description": "Required if uploading a file. This is the first step in uploading a file\nto the content migration. See the {file:file_uploads.html File Upload\nDocumentation} for details on the file upload workflow.",
                                        "type": "string"
                                    },
                                    "pre_attachment[todo]": {
                                        "description": "Other file upload properties, See {file:file_uploads.html File Upload\nDocumentation}",
                                        "type": "string"
                                    },
                                    "settings[file_url]": {
                                        "description": "A URL to download the file from. Must not require authentication.",
                                        "type": "string"
                                    },
                                    "settings[folder_id]": {
                                        "description": "The folder to unzip the .zip file into for a zip_file_import.",
                                        "type": "string"
                                    },
                                    "settings[overwrite_quizzes]": {
                                        "description": "Whether to overwrite quizzes with the same identifiers between content\npackages.",
                                        "type": "boolean"
                                    },
                                    "settings[question_bank_id]": {
                                        "description": "The existing question bank ID to import questions into if not specified in\nthe content package.",
                                        "format": "int64",
                                        "type": "integer"
                                    },
                                    "settings[question_bank_name]": {
                                        "description": "The question bank to import questions into if not specified in the content\npackage, if both bank id and name are set, id will take precedence.",
                                        "type": "string"
                                    },
                                    "settings[source_course_id]": {
                                        "description": "The course to copy from for a course copy migration. (required if doing\ncourse copy)",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "migration_type"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ContentMigration"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Create a content migration",
                "tags": [
                    "content_migrations"
                ]
            }
        },
        "/v1/users/{user_id}/content_migrations/migrators": {
            "get": {
                "deprecated": false,
                "description": "Lists the currently available migration types. These values may change.",
                "operationId": "list_migration_systems_users",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "user_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Migrator"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "List Migration Systems",
                "tags": [
                    "content_migrations"
                ]
            }
        },
        "/v1/users/{user_id}/content_migrations/{content_migration_id}/migration_issues": {
            "get": {
                "deprecated": false,
                "description": "Returns paginated migration issues",
                "operationId": "list_migration_issues_users",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "user_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "content_migration_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/pageParam"
                    },
                    {
                        "$ref": "#/components/parameters/perPageParam"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/MigrationIssue"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "List migration issues",
                "tags": [
                    "content_migrations"
                ]
            }
        },
        "/v1/users/{user_id}/content_migrations/{content_migration_id}/migration_issues/{id}": {
            "get": {
                "deprecated": false,
                "description": "Returns data on an individual migration issue",
                "operationId": "get_migration_issue_users",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "user_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "content_migration_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MigrationIssue"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Get a migration issue",
                "tags": [
                    "content_migrations"
                ]
            },
            "put": {
                "deprecated": false,
                "description": "Update the workflow_state of a migration issue",
                "operationId": "update_migration_issue_users",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "user_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "content_migration_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "workflow_state": {
                                        "description": "Set the workflow_state of the issue.",
                                        "enum": [
                                            "active",
                                            "resolved"
                                        ],
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "workflow_state"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/MigrationIssue"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Update a migration issue",
                "tags": [
                    "content_migrations"
                ]
            }
        },
        "/v1/users/{user_id}/content_migrations/{id}": {
            "get": {
                "deprecated": false,
                "description": "Returns data on an individual content migration",
                "operationId": "get_content_migration_users",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "user_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ContentMigration"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Get a content migration",
                "tags": [
                    "content_migrations"
                ]
            },
            "put": {
                "deprecated": false,
                "description": "Update a content migration. Takes same arguments as create except that you\ncan't change the migration type. However, changing most settings after the\nmigration process has started will not do anything. Generally updating the\ncontent migration will be used when there is a file upload problem. If the\nfirst upload has a problem you can supply new _pre_attachment_ values to\nstart the process again.",
                "operationId": "update_content_migration_users",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "user_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ContentMigration"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Update a content migration",
                "tags": [
                    "content_migrations"
                ]
            }
        },
        "/v1/users/{user_id}/courses": {
            "get": {
                "deprecated": false,
                "description": "Returns a paginated list of active courses for this user. To view the course list for a user other than yourself, you must be either an observer of that user or an administrator.",
                "operationId": "list_courses_for_user",
                "parameters": [
                    {
                        "in": "query",
                        "name": "page",
                        "required": false,
                        "schema": {
                            "type": "string",
                            "minimum": 0
                        },
                        "description": "The bookmark leading to the next paginated page. This needs to be parsed from the response header ('Link' field)."
                    },
                    {
                        "in": "query",
                        "name": "per_page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 100,
                            "default": 10
                        },
                        "description": "The numbers of items to return."
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "user_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "- \"needs_grading_count\": Optional information to include with each Course.\n  When needs_grading_count is given, and the current user has grading\n  rights, the total number of submissions needing grading for all\n  assignments is returned.\n- \"syllabus_body\": Optional information to include with each Course.\n  When syllabus_body is given the user-generated html for the course\n  syllabus is returned.\n- \"public_description\": Optional information to include with each Course.\n  When public_description is given the user-generated text for the course\n  public description is returned.\n- \"total_scores\": Optional information to include with each Course.\n  When total_scores is given, any student enrollments will also\n  include the fields 'computed_current_score', 'computed_final_score',\n  'computed_current_grade', and 'computed_final_grade' (see Enrollment\n  documentation for more information on these fields). This argument\n  is ignored if the course is configured to hide final grades.\n- \"current_grading_period_scores\": Optional information to include with\n  each Course. When current_grading_period_scores is given and total_scores\n  is given, any student enrollments will also include the fields\n  'has_grading_periods',\n  'totals_for_all_grading_periods_option', 'current_grading_period_title',\n  'current_grading_period_id', current_period_computed_current_score',\n  'current_period_computed_final_score',\n  'current_period_computed_current_grade', and\n  'current_period_computed_final_grade', as well as (if the user has permission)\n  'current_period_unposted_current_score',\n  'current_period_unposted_final_score',\n  'current_period_unposted_current_grade', and\n  'current_period_unposted_final_grade' (see Enrollment documentation for\n  more information on these fields). In addition, when this argument is\n  passed, the course will have a 'has_grading_periods' attribute\n  on it. This argument is ignored if the course is configured to hide final\n  grades or if the total_scores argument is not included.\n- \"term\": Optional information to include with each Course. When\n  term is given, the information for the enrollment term for each course\n  is returned.\n- \"account\": Optional information to include with each Course. When\n  account is given, the account json for each course is returned.\n- \"course_progress\": Optional information to include with each Course.\n  When course_progress is given, each course will include a\n  'course_progress' object with the fields: 'requirement_count', an integer\n  specifying the total number of requirements in the course,\n  'requirement_completed_count', an integer specifying the total number of\n  requirements in this course that have been completed, and\n  'next_requirement_url', a string url to the next requirement item, and\n  'completed_at', the date the course was completed (null if incomplete).\n  'next_requirement_url' will be null if all requirements have been\n  completed or the current module does not require sequential progress.\n  \"course_progress\" will return an error message if the course is not\n  module based or the user is not enrolled as a student in the course.\n- \"sections\": Section enrollment information to include with each Course.\n  Returns an array of hashes containing the section ID (id), section name\n  (name), start and end dates (start_at, end_at), as well as the enrollment\n  type (enrollment_role, e.g. 'StudentEnrollment').\n- \"storage_quota_used_mb\": The amount of storage space used by the files in this course\n- \"total_students\": Optional information to include with each Course.\n  Returns an integer for the total amount of active and invited students.\n- \"passback_status\": Include the grade passback_status\n- \"favorites\": Optional information to include with each Course.\n  Indicates if the user has marked the course as a favorite course.\n- \"teachers\": Teacher information to include with each Course.\n  Returns an array of hashes containing the {api:Users:UserDisplay UserDisplay} information\n  for each teacher in the course.\n- \"observed_users\": Optional information to include with each Course.\n  Will include data for observed users if the current user has an\n  observer enrollment.\n- \"tabs\": Optional information to include with each Course.\n  Will include the list of tabs configured for each course.  See the\n  {api:TabsController#index List available tabs API} for more information.\n- \"course_image\": Optional course image data for when there is a course image\n  and the course image feature flag has been enabled",
                        "explode": false,
                        "in": "query",
                        "name": "include",
                        "schema": {
                            "items": {
                                "type": "string",
                                "enum": [
                                    "needs_grading_count",
                                    "syllabus_body",
                                    "public_description",
                                    "total_scores",
                                    "current_grading_period_scores",
                                    "term",
                                    "account",
                                    "course_progress",
                                    "sections",
                                    "storage_quota_used_mb",
                                    "total_students",
                                    "passback_status",
                                    "favorites",
                                    "teachers",
                                    "observed_users",
                                    "course_image"
                                ]
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "description": "If set, only return courses that are in the given state(s).\nBy default, \"available\" is returned for students and observers, and\nanything except \"deleted\", for all other enrollment types",
                        "explode": false,
                        "in": "query",
                        "name": "state",
                        "schema": {
                            "items": {
                                "type": "string",
                                "enum": [
                                    "unpublished",
                                    "available",
                                    "completed",
                                    "deleted"
                                ]
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "description": "When set, only return courses where the user has an enrollment with the given state.\nThis will respect section/course/term date overrides.",
                        "in": "query",
                        "name": "enrollment_state",
                        "schema": {
                            "enum": [
                                "active",
                                "invited_or_pending",
                                "completed"
                            ],
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/pageParam"
                    },
                    {
                        "$ref": "#/components/parameters/perPageParam"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/CourseWithIncludes"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "List courses for a user",
                "tags": [
                    "courses"
                ]
            }
        },
        "/v1/users/{user_id}/courses/{course_id}/assignments": {
            "get": {
                "deprecated": false,
                "description": "Returns the paginated list of assignments for the specified user if the current user has rights to view. See {api:AssignmentsApiController#index List assignments} for valid arguments.",
                "operationId": "list_assignments_for_user",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "user_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "course_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Associations to include with the assignment. The \"assignment_visibility\" option\nrequires that the Differentiated Assignments course feature be turned on. If\n\"observed_users\" is passed, submissions for observed users will also be included as an array.",
                        "explode": false,
                        "in": "query",
                        "name": "include",
                        "schema": {
                            "items": {
                                "type": "string",
                                "enum": [
                                    "submission",
                                    "assignment_visibility",
                                    "all_dates",
                                    "overrides",
                                    "observed_users"
                                ]
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "description": "The partial title of the assignments to match and return.",
                        "in": "query",
                        "name": "search_term",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Apply assignment overrides for each assignment, defaults to true.",
                        "in": "query",
                        "name": "override_assignment_dates",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "description": "Split up \"needs_grading_count\" by sections into the \"needs_grading_count_by_section\" key, defaults to false",
                        "in": "query",
                        "name": "needs_grading_count_by_section",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "description": "If included, only return certain assignments depending on due date and submission status.",
                        "in": "query",
                        "name": "bucket",
                        "schema": {
                            "enum": [
                                "past",
                                "overdue",
                                "undated",
                                "ungraded",
                                "unsubmitted",
                                "upcoming",
                                "future"
                            ],
                            "type": "string"
                        }
                    },
                    {
                        "description": "if set, return only assignments specified",
                        "explode": false,
                        "in": "query",
                        "name": "assignment_ids",
                        "schema": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "description": "Determines the order of the assignments. Defaults to \"position\".",
                        "in": "query",
                        "name": "order_by",
                        "schema": {
                            "enum": [
                                "position",
                                "name"
                            ],
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/pageParam"
                    },
                    {
                        "$ref": "#/components/parameters/perPageParam"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Assignment"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "The assignments of a user."
                    }
                },
                "summary": "List assignments for user",
                "tags": [
                    "assignments"
                ]
            }
        },
        "/v1/users/{user_id}/custom_data": {
            "delete": {
                "deprecated": false,
                "description": "Delete custom user data.\n\nArbitrary JSON data can be stored for a User.  This API call\ndeletes that data for a given scope.  Without a scope, all custom_data is deleted.\nSee {api:UsersController#set_custom_data Store Custom Data} for details and\nexamples of storage and retrieval.\n\nAs an example, we'll store some data, then delete a subset of it.\n\nExample {api:UsersController#set_custom_data PUT} with valid JSON data:\n  curl 'https://<canvas>/api/v1/users/<user_id>/custom_data' \\\n    -X PUT \\\n    -F 'ns=com.my-organization.canvas-app' \\\n    -F 'data[fruit][apple]=so tasty' \\\n    -F 'data[fruit][kiwi]=a bit sour' \\\n    -F 'data[veggies][root][onion]=tear-jerking' \\\n    -H 'Authorization: Bearer <token>'\n\nResponse:\n  !!!javascript\n  {\n    \"data\": {\n      \"fruit\": {\n        \"apple\": \"so tasty\",\n        \"kiwi\": \"a bit sour\"\n      },\n      \"veggies\": {\n        \"root\": {\n          \"onion\": \"tear-jerking\"\n        }\n      }\n    }\n  }\n\nExample DELETE:\n  curl 'https://<canvas>/api/v1/users/<user_id>/custom_data/fruit/kiwi' \\\n    -X DELETE \\\n    -F 'ns=com.my-organization.canvas-app' \\\n    -H 'Authorization: Bearer <token>'\n\nResponse:\n  !!!javascript\n  {\n    \"data\": \"a bit sour\"\n  }\n\nExample {api:UsersController#get_custom_data GET} following the above DELETE:\n  curl 'https://<canvas>/api/v1/users/<user_id>/custom_data' \\\n    -X GET \\\n    -F 'ns=com.my-organization.canvas-app' \\\n    -H 'Authorization: Bearer <token>'\n\nResponse:\n  !!!javascript\n  {\n    \"data\": {\n      \"fruit\": {\n        \"apple\": \"so tasty\"\n      },\n      \"veggies\": {\n        \"root\": {\n          \"onion\": \"tear-jerking\"\n        }\n      }\n    }\n  }\n\nNote that hashes left empty after a DELETE will get removed from the custom_data store.\nFor example, following the previous commands, if we delete /custom_data/veggies/root/onion,\nthen the entire /custom_data/veggies scope will be removed.\n\nExample DELETE that empties a parent scope:\n  curl 'https://<canvas>/api/v1/users/<user_id>/custom_data/veggies/root/onion' \\\n    -X DELETE \\\n    -F 'ns=com.my-organization.canvas-app' \\\n    -H 'Authorization: Bearer <token>'\n\nResponse:\n  !!!javascript\n  {\n    \"data\": \"tear-jerking\"\n  }\n\nExample {api:UsersController#get_custom_data GET} following the above DELETE:\n  curl 'https://<canvas>/api/v1/users/<user_id>/custom_data' \\\n    -X GET \\\n    -F 'ns=com.my-organization.canvas-app' \\\n    -H 'Authorization: Bearer <token>'\n\nResponse:\n  !!!javascript\n  {\n    \"data\": {\n      \"fruit\": {\n        \"apple\": \"so tasty\"\n      }\n    }\n  }\n\nOn success, this endpoint returns an object containing the data that was deleted.\n\nResponds with status code 400 if the namespace parameter, +ns+, is missing or invalid,\nor if the specified scope does not contain any data.",
                "operationId": "delete_custom_data",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "user_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The namespace from which to delete the data.  This should be something other\nCanvas API apps aren't likely to use, such as a reverse DNS for your organization.",
                        "in": "query",
                        "name": "ns",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Delete custom data",
                "tags": [
                    "users"
                ]
            },
            "get": {
                "deprecated": false,
                "description": "Load custom user data.\n\nArbitrary JSON data can be stored for a User.  This API call\nretrieves that data for a (optional) given scope.\nSee {api:UsersController#set_custom_data Store Custom Data} for details and\nexamples.\n\nOn success, this endpoint returns an object containing the data that was requested.\n\nResponds with status code 400 if the namespace parameter, +ns+, is missing or invalid,\nor if the specified scope does not contain any data.",
                "operationId": "load_custom_data",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "user_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The namespace from which to retrieve the data.  This should be something other\nCanvas API apps aren't likely to use, such as a reverse DNS for your organization.",
                        "in": "query",
                        "name": "ns",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Load custom data",
                "tags": [
                    "users"
                ]
            },
            "put": {
                "deprecated": false,
                "description": "Store arbitrary user data as JSON.\n\nArbitrary JSON data can be stored for a User.\nA typical scenario would be an external site/service that registers users in Canvas\nand wants to capture additional info about them.  The part of the URL that follows\n+/custom_data/+ defines the scope of the request, and it reflects the structure of\nthe JSON data to be stored or retrieved.\n\nThe value +self+ may be used for +user_id+ to store data associated with the calling user.\nIn order to access another user's custom data, you must be an account administrator with\npermission to manage users.\n\nA namespace parameter, +ns+, is used to prevent custom_data collisions between\ndifferent apps.  This parameter is required for all custom_data requests.\n\nA request with Content-Type application/x-www-form-urlencoded or Content-Type\napplication/x-www-form-urlencoded can only be used to store strings.\n\nExample PUT with application/x-www-form-urlencoded data:\n  curl 'https://<canvas>/api/v1/users/<user_id>/custom_data/telephone' \\\n    -X PUT \\\n    -F 'ns=com.my-organization.canvas-app' \\\n    -F 'data=555-1234' \\\n    -H 'Authorization: Bearer <token>'\n\nResponse:\n  !!!javascript\n  {\n    \"data\": \"555-1234\"\n  }\n\nSubscopes (or, generated scopes) can also be specified by passing values to\n+data+[+subscope+].\n\nExample PUT specifying subscopes:\n  curl 'https://<canvas>/api/v1/users/<user_id>/custom_data/body/measurements' \\\n    -X PUT \\\n    -F 'ns=com.my-organization.canvas-app' \\\n    -F 'data[waist]=32in' \\\n    -F 'data[inseam]=34in' \\\n    -F 'data[chest]=40in' \\\n    -H 'Authorization: Bearer <token>'\n\nResponse:\n  !!!javascript\n  {\n    \"data\": {\n      \"chest\": \"40in\",\n      \"waist\": \"32in\",\n      \"inseam\": \"34in\"\n    }\n  }\n\nFollowing such a request, subsets of the stored data to be retrieved directly from a subscope.\n\nExample {api:UsersController#get_custom_data GET} from a generated scope\n  curl 'https://<canvas>/api/v1/users/<user_id>/custom_data/body/measurements/chest' \\\n    -X GET \\\n    -F 'ns=com.my-organization.canvas-app' \\\n    -H 'Authorization: Bearer <token>'\n\nResponse:\n  !!!javascript\n  {\n    \"data\": \"40in\"\n  }\n\nIf you want to store more than just strings (i.e. numbers, arrays, hashes, true, false,\nand/or null), you must make a request with Content-Type application/json as in the following\nexample.\n\nExample PUT with JSON data:\n  curl 'https://<canvas>/api/v1/users/<user_id>/custom_data' \\\n    -H 'Content-Type: application/json' \\\n    -X PUT \\\n    -d '{\n          \"ns\": \"com.my-organization.canvas-app\",\n          \"data\": {\n            \"a-number\": 6.02e23,\n            \"a-bool\": true,\n            \"a-string\": \"true\",\n            \"a-hash\": {\"a\": {\"b\": \"ohai\"}},\n            \"an-array\": [1, \"two\", null, false]\n          }\n        }' \\\n    -H 'Authorization: Bearer <token>'\n\nResponse:\n  !!!javascript\n  {\n    \"data\": {\n      \"a-number\": 6.02e+23,\n      \"a-bool\": true,\n      \"a-string\": \"true\",\n      \"a-hash\": {\n        \"a\": {\n          \"b\": \"ohai\"\n        }\n      },\n      \"an-array\": [1, \"two\", null, false]\n    }\n  }\n\nIf the data is an Object (as it is in the above example), then subsets of the data can\nbe accessed by including the object's (possibly nested) keys in the scope of a GET request.\n\nExample {api:UsersController#get_custom_data GET} with a generated scope:\n  curl 'https://<canvas>/api/v1/users/<user_id>/custom_data/a-hash/a/b' \\\n    -X GET \\\n    -F 'ns=com.my-organization.canvas-app' \\\n    -H 'Authorization: Bearer <token>'\n\nResponse:\n  !!!javascript\n  {\n    \"data\": \"ohai\"\n  }\n\n\nOn success, this endpoint returns an object containing the data that was stored.\n\nResponds with status code 200 if the scope already contained data, and it was overwritten\nby the data specified in the request.\n\nResponds with status code 201 if the scope was previously empty, and the data specified\nin the request was successfully stored there.\n\nResponds with status code 400 if the namespace parameter, +ns+, is missing or invalid, or if\nthe +data+ parameter is missing.\n\nResponds with status code 409 if the requested scope caused a conflict and data was not stored.\nThis happens when storing data at the requested scope would cause data at an outer scope\nto be lost.  e.g., if +/custom_data+ was +{\"fashion_app\": {\"hair\": \"blonde\"}}+, but\nyou tried to +`PUT /custom_data/fashion_app/hair/style -F data=buzz`+, then for the request\nto succeed,the value of +/custom_data/fashion_app/hair+ would have to become a hash, and its\nold string value would be lost.  In this situation, an error object is returned with the\nfollowing format:\n\n  !!!javascript\n  {\n    \"message\": \"write conflict for custom_data hash\",\n    \"conflict_scope\": \"fashion_app/hair\",\n    \"type_at_conflict\": \"String\",\n    \"value_at_conflict\": \"blonde\"\n  }",
                "operationId": "store_custom_data",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "user_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "data": {
                                        "description": "The data you want to store for the user, at the specified scope.  If the data is\ncomposed of (possibly nested) JSON objects, scopes will be generated for the (nested)\nkeys (see examples)."
                                    },
                                    "ns": {
                                        "description": "The namespace under which to store the data.  This should be something other\nCanvas API apps aren't likely to use, such as a reverse DNS for your organization.",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "data",
                                    "ns"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Store custom data",
                "tags": [
                    "users"
                ]
            }
        },
        "/v1/users/{user_id}/enrollments": {
            "get": {
                "deprecated": false,
                "description": "Depending on the URL given, return a paginated list of Either (1) all of the enrollments in a course, (2) all of the enrollments in a section or (3) all of a user's enrollments. This includes student, teacher, TA, and observer enrollments. If a user has multiple enrollments in a context (e.g. as a teacher and a student or in multiple course sections), each enrollment will be listed separately. note: Currently, only a root level admin user can return other users' enrollments. A user can, however, return his/her own enrollments.",
                "operationId": "list_enrollments_users",
                "parameters": [
                    {
                        "in": "query",
                        "name": "page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "minimum": 0
                        },
                        "description": "The number of pages to skip before starting to collect the result set."
                    },
                    {
                        "in": "query",
                        "name": "per_page",
                        "required": false,
                        "schema": {
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 100,
                            "default": 10
                        },
                        "description": "The numbers of items to return."
                    },
                    {
                        "description": "A list of enrollment types to return. Accepted values are 'StudentEnrollment', 'TeacherEnrollment', 'TaEnrollment', 'DesignerEnrollment', and 'ObserverEnrollment.' If omitted, all enrollment types are returned. This argument is ignored if `role` is given.",
                        "explode": false,
                        "in": "query",
                        "name": "type",
                        "schema": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "description": "A list of enrollment roles to return. Accepted values include course-level roles created by the {api:RoleOverridesController#add_role Add Role API} as well as the base enrollment types accepted by the `type` argument above.",
                        "explode": false,
                        "in": "query",
                        "name": "role",
                        "schema": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "description": "Filter by enrollment state. If omitted, 'active' and 'invited' enrollments are returned. When querying a user's enrollments (either via user_id argument or via user enrollments endpoint), the following additional synthetic states are supported: \"current_and_invited\"|\"current_and_future\"|\"current_and_concluded\"",
                        "explode": false,
                        "in": "query",
                        "name": "state",
                        "schema": {
                            "items": {
                                "type": "string",
                                "enum": [
                                    "active",
                                    "invited",
                                    "creation_pending",
                                    "deleted",
                                    "rejected",
                                    "completed",
                                    "inactive"
                                ]
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "description": "Array of additional information to include on the enrollment or user records. \"avatar_url\" and \"group_ids\" will be returned on the user record.",
                        "explode": false,
                        "in": "query",
                        "name": "include",
                        "schema": {
                            "items": {
                                "type": "string",
                                "enum": [
                                    "avatar_url",
                                    "group_ids",
                                    "locked",
                                    "observed_users",
                                    "can_be_removed"
                                ]
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "description": "Filter by user_id (only valid for course or section enrollment queries). If set to the current user's id, this is a way to determine if the user has any enrollments in the course or section, independent of whether the user has permission to view other people on the roster.",
                        "in": "path",
                        "name": "user_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Return grades for the given grading_period.  If this parameter is not specified, the returned grades will be for the whole course.",
                        "in": "query",
                        "name": "grading_period_id",
                        "schema": {
                            "format": "int64",
                            "type": "integer"
                        }
                    },
                    {
                        "description": "Returns only enrollments for the specified enrollment term. This parameter only applies to the user enrollments path. May pass the ID from the enrollment terms api or the SIS id prepended with 'sis_term_id:'.",
                        "in": "query",
                        "name": "enrollment_term_id",
                        "schema": {
                            "format": "int64",
                            "type": "integer"
                        }
                    },
                    {
                        "description": "Returns only enrollments for the specified SIS account ID(s). Does not look into sub_accounts. May pass in array or string.",
                        "explode": false,
                        "in": "query",
                        "name": "sis_account_id",
                        "schema": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "description": "Returns only enrollments matching the specified SIS course ID(s).\nMay pass in array or string.",
                        "explode": false,
                        "in": "query",
                        "name": "sis_course_id",
                        "schema": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "description": "Returns only section enrollments matching the specified SIS section ID(s).\nMay pass in array or string.",
                        "explode": false,
                        "in": "query",
                        "name": "sis_section_id",
                        "schema": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "description": "Returns only enrollments for the specified SIS user ID(s). May pass in\narray or string.",
                        "explode": false,
                        "in": "query",
                        "name": "sis_user_id",
                        "schema": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "$ref": "#/components/parameters/pageParam"
                    },
                    {
                        "$ref": "#/components/parameters/perPageParam"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Enrollment"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "List enrollments",
                "tags": [
                    "enrollments"
                ]
            }
        },
        "/v1/users/{user_id}/features": {
            "get": {
                "deprecated": false,
                "description": "A paginated list of all features that apply to a given Account, Course, or User.",
                "operationId": "list_features_users",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "user_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/pageParam"
                    },
                    {
                        "$ref": "#/components/parameters/perPageParam"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Feature"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "List features",
                "tags": [
                    "feature_flags"
                ]
            }
        },
        "/v1/users/{user_id}/features/enabled": {
            "get": {
                "deprecated": false,
                "description": "A paginated list of all features that are enabled on a given Account, Course, or User.\nOnly the feature names are returned.",
                "operationId": "list_enabled_features_users",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "user_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/pageParam"
                    },
                    {
                        "$ref": "#/components/parameters/perPageParam"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "List enabled features",
                "tags": [
                    "feature_flags"
                ]
            }
        },
        "/v1/users/{user_id}/features/flags/{feature}": {
            "delete": {
                "deprecated": false,
                "description": "Remove feature flag for a given Account, Course, or User.  (Note that the flag must\nbe defined on the Account, Course, or User directly.)  The object will then inherit\nthe feature flags from a higher account, if any exist.  If this flag was 'on' or 'off',\nthen lower-level account flags that were masked by this one will apply again.",
                "operationId": "remove_feature_flag_users",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "user_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "feature",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FeatureFlag"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Remove feature flag",
                "tags": [
                    "feature_flags"
                ]
            },
            "get": {
                "deprecated": false,
                "description": "Get the feature flag that applies to a given Account, Course, or User.\nThe flag may be defined on the object, or it may be inherited from a parent\naccount. You can look at the context_id and context_type of the returned object\nto determine which is the case. If these fields are missing, then the object\nis the global Canvas default.",
                "operationId": "get_feature_flag_users",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "user_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "feature",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FeatureFlag"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Get feature flag",
                "tags": [
                    "feature_flags"
                ]
            },
            "put": {
                "deprecated": false,
                "description": "Set a feature flag for a given Account, Course, or User. This call will fail if a parent account sets\na feature flag for the same feature in any state other than \"allowed\".",
                "operationId": "set_feature_flag_users",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "user_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "feature",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "state": {
                                        "description": "\"off\":: The feature is not available for the course, user, or account and sub-accounts.\n\"allowed\":: (valid only on accounts) The feature is off in the account, but may be enabled in\n            sub-accounts and courses by setting a feature flag on the sub-account or course.\n\"on\":: The feature is turned on unconditionally for the user, course, or account and sub-accounts.",
                                        "enum": [
                                            false,
                                            "allowed",
                                            true
                                        ],
                                        "type": "string"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/FeatureFlag"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Set feature flag",
                "tags": [
                    "feature_flags"
                ]
            }
        },
        "/v1/users/{user_id}/files": {
            "post": {
                "deprecated": false,
                "description": "Upload a file to the user's personal files section. This API endpoint is the first step in uploading a file to a user's files. See the {file:file_uploads.html File Upload Documentation} for details on the file upload workflow. Note that typically users will only be able to upload files to their own files section. Passing a user_id of +self+ is an easy shortcut to specify the current user.",
                "operationId": "upload_file_to_users_files",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "user_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Upload a file",
                "tags": [
                    "users"
                ]
            }
        },
        "/v1/users/{user_id}/files/quota": {
            "get": {
                "deprecated": false,
                "description": "Returns the total and used storage quota for the course, group, or user.",
                "operationId": "get_quota_information_users",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "user_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Get quota information",
                "tags": [
                    "files"
                ]
            }
        },
        "/v1/users/{user_id}/files/{id}": {
            "get": {
                "deprecated": false,
                "description": "Returns the standard attachment json object",
                "operationId": "get_file_users",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "user_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "Array of additional information to include.\n\n\"user\":: the user who uploaded the file or last edited its content\n\"usage_rights\":: copyright and license information for the file (see UsageRights)",
                        "explode": false,
                        "in": "query",
                        "name": "include",
                        "schema": {
                            "items": {
                                "type": "string",
                                "enum": [
                                    "user"
                                ]
                            },
                            "type": "array"
                        },
                        "style": "form"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/File"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Get file",
                "tags": [
                    "files"
                ]
            }
        },
        "/v1/users/{user_id}/folders": {
            "get": {
                "deprecated": false,
                "description": "Returns the paginated list of all folders for the given context. This will\nbe returned as a flat list containing all subfolders as well.",
                "operationId": "list_all_folders_users",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "user_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/pageParam"
                    },
                    {
                        "$ref": "#/components/parameters/perPageParam"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Folder"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "List all folders",
                "tags": [
                    "files"
                ]
            },
            "post": {
                "deprecated": false,
                "description": "Creates a folder in the specified context",
                "operationId": "create_folder_users",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "user_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/x-www-form-urlencoded": {
                            "schema": {
                                "properties": {
                                    "hidden": {
                                        "description": "Flag the folder as hidden",
                                        "type": "boolean"
                                    },
                                    "lock_at": {
                                        "description": "The datetime to lock the folder at",
                                        "format": "date-time",
                                        "type": "string"
                                    },
                                    "locked": {
                                        "description": "Flag the folder as locked",
                                        "type": "boolean"
                                    },
                                    "name": {
                                        "description": "The name of the folder",
                                        "type": "string"
                                    },
                                    "parent_folder_id": {
                                        "description": "The id of the folder to store the file in. If this and parent_folder_path are sent an error will be returned. If neither is given, a default folder will be used.",
                                        "type": "string"
                                    },
                                    "parent_folder_path": {
                                        "description": "The path of the folder to store the new folder in. The path separator is the forward slash `/`, never a back slash. The parent folder will be created if it does not already exist. This parameter only applies to new folders in a context that has folders, such as a user, a course, or a group. If this and parent_folder_id are sent an error will be returned. If neither is given, a default folder will be used.",
                                        "type": "string"
                                    },
                                    "position": {
                                        "description": "Set an explicit sort position for the folder",
                                        "format": "int64",
                                        "type": "integer"
                                    },
                                    "unlock_at": {
                                        "description": "The datetime to unlock the folder at",
                                        "format": "date-time",
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "name"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Folder"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Create folder",
                "tags": [
                    "files"
                ]
            }
        },
        "/v1/users/{user_id}/folders/by_path": {
            "get": {
                "deprecated": false,
                "description": "Given the full path to a folder, returns a list of all Folders in the path hierarchy,\nstarting at the root folder, and ending at the requested folder. The given path is\nrelative to the context's root folder and does not include the root folder's name\n(e.g., \"course files\"). If an empty path is given, the context's root folder alone\nis returned. Otherwise, if no folder exists with the given full path, a Not Found\nerror is returned.",
                "operationId": "resolve_path_users",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "user_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Folder"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Resolve path",
                "tags": [
                    "files"
                ]
            }
        },
        "/v1/users/{user_id}/folders/by_path/*full_path": {
            "get": {
                "deprecated": false,
                "description": "Given the full path to a folder, returns a list of all Folders in the path hierarchy,\nstarting at the root folder, and ending at the requested folder. The given path is\nrelative to the context's root folder and does not include the root folder's name\n(e.g., \"course files\"). If an empty path is given, the context's root folder alone\nis returned. Otherwise, if no folder exists with the given full path, a Not Found\nerror is returned.",
                "operationId": "resolve_path_users_full_path",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "user_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Folder"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Resolve path",
                "tags": [
                    "files"
                ]
            }
        },
        "/v1/users/{user_id}/folders/{id}": {
            "get": {
                "deprecated": false,
                "description": "Returns the details for a folder\n\nYou can get the root folder from a context by using 'root' as the :id.\nFor example, you could get the root folder for a course like:",
                "operationId": "get_folder_users",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "user_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Folder"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Get folder",
                "tags": [
                    "files"
                ]
            }
        },
        "/v1/users/{user_id}/logins": {
            "get": {
                "deprecated": false,
                "description": "Given a user ID, return a paginated list of that user's logins for the given account.",
                "operationId": "list_user_logins_users",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "user_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/pageParam"
                    },
                    {
                        "$ref": "#/components/parameters/perPageParam"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "List user logins",
                "tags": [
                    "logins"
                ]
            }
        },
        "/v1/users/{user_id}/logins/{id}": {
            "delete": {
                "deprecated": false,
                "description": "Delete an existing login.",
                "operationId": "delete_user_login",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "user_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Delete a user login",
                "tags": [
                    "logins"
                ]
            }
        },
        "/v1/users/{user_id}/missing_submissions": {
            "get": {
                "deprecated": false,
                "description": "A paginated list of past-due assignments for which the student does not have a submission.\nThe user sending the request must either be the student, an admin or a parent observer using the parent app",
                "operationId": "list_missing_submissions",
                "parameters": [
                    {
                        "description": "the student's ID",
                        "in": "path",
                        "name": "user_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "\"planner_overrides\":: Optionally include the assignment's associated planner override, if it exists, for the current user.\n                      These will be returned under a +planner_override+ key\n\"course\":: Optionally include the assignments' courses",
                        "explode": false,
                        "in": "query",
                        "name": "include",
                        "schema": {
                            "items": {
                                "type": "string",
                                "enum": [
                                    "planner_overrides",
                                    "course"
                                ]
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "description": "\"submittable\":: Only return assignments that the current user can submit (i.e. filter out locked assignments)",
                        "explode": false,
                        "in": "query",
                        "name": "filter",
                        "schema": {
                            "items": {
                                "type": "string",
                                "enum": [
                                    "submittable"
                                ]
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "$ref": "#/components/parameters/pageParam"
                    },
                    {
                        "$ref": "#/components/parameters/perPageParam"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/Assignment"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "List Missing Submissions",
                "tags": [
                    "users"
                ]
            }
        },
        "/v1/users/{user_id}/observees": {
            "get": {
                "deprecated": false,
                "description": "A paginated list of the users that the given user is observing.\n\n*Note:* all users are allowed to list their own observees. Administrators can list\nother users' observees.\n\nThe returned observees will include an attribute \"observation_link_root_account_ids\", a list\nof ids for the root accounts the observer and observee are linked on. The observer will only be able to\nobserve in courses associated with these root accounts.",
                "operationId": "list_observees",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "user_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "- \"avatar_url\": Optionally include avatar_url.",
                        "explode": false,
                        "in": "query",
                        "name": "include",
                        "schema": {
                            "items": {
                                "type": "string",
                                "enum": [
                                    "avatar_url"
                                ]
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "$ref": "#/components/parameters/pageParam"
                    },
                    {
                        "$ref": "#/components/parameters/perPageParam"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/User"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "List observees",
                "tags": [
                    "user_observees"
                ]
            },
            "post": {
                "deprecated": false,
                "description": "Register the given user to observe another user, given the observee's credentials.\n\n*Note:* all users are allowed to add their own observees, given the observee's\ncredentials or access token are provided. Administrators can add observees given credentials, access token or\nthe {api:UserObserveesController#update observee's id}.",
                "operationId": "add_observee_with_credentials",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "user_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "access_token": {
                                        "description": "The access token for the user to observe.  Required if <tt>observee[unique_id]</tt> or <tt>observee[password]</tt> are omitted.",
                                        "type": "string"
                                    },
                                    "observee[password]": {
                                        "description": "The password for the user to observe. Required if access_token is omitted.",
                                        "type": "string"
                                    },
                                    "observee[unique_id]": {
                                        "description": "The login id for the user to observe.  Required if access_token is omitted.",
                                        "type": "string"
                                    },
                                    "pairing_code": {
                                        "description": "A generated pairing code for the user to observe. Required if the Observer pairing code feature flag is enabled",
                                        "type": "string"
                                    },
                                    "root_account_id": {
                                        "description": "The ID for the root account to associate with the observation link.\nDefaults to the current domain account.\nIf 'all' is specified, a link will be created for each root account associated\nto both the observer and observee.",
                                        "format": "int64",
                                        "type": "integer"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Add an observee with credentials",
                "tags": [
                    "user_observees"
                ]
            }
        },
        "/v1/users/{user_id}/observees/{observee_id}": {
            "delete": {
                "deprecated": false,
                "description": "Unregisters a user as being observed by the given user.",
                "operationId": "remove_observee",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "user_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "observee_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "If specified, only removes the link for the given root account",
                        "in": "query",
                        "name": "root_account_id",
                        "schema": {
                            "format": "int64",
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Remove an observee",
                "tags": [
                    "user_observees"
                ]
            },
            "get": {
                "deprecated": false,
                "description": "Gets information about an observed user.\n\n*Note:* all users are allowed to view their own observees.",
                "operationId": "show_observee",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "user_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "observee_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Show an observee",
                "tags": [
                    "user_observees"
                ]
            },
            "put": {
                "deprecated": false,
                "description": "Registers a user as being observed by the given user.",
                "operationId": "add_observee",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "user_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "observee_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "root_account_id": {
                                        "description": "The ID for the root account to associate with the observation link.\nIf not specified, a link will be created for each root account associated\nto both the observer and observee.",
                                        "format": "int64",
                                        "type": "integer"
                                    }
                                }
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/User"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Add an observee",
                "tags": [
                    "user_observees"
                ]
            }
        },
        "/v1/users/{user_id}/page_views": {
            "get": {
                "deprecated": false,
                "description": "Return a paginated list of the user's page view history in json format,\nsimilar to the available CSV download. Page views are returned in\ndescending order, newest to oldest.",
                "operationId": "list_user_page_views",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "user_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "The beginning of the time range from which you want page views.",
                        "in": "query",
                        "name": "start_time",
                        "schema": {
                            "format": "date-time",
                            "type": "string"
                        }
                    },
                    {
                        "description": "The end of the time range from which you want page views.",
                        "in": "query",
                        "name": "end_time",
                        "schema": {
                            "format": "date-time",
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/pageParam"
                    },
                    {
                        "$ref": "#/components/parameters/perPageParam"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {
                                        "$ref": "#/components/schemas/PageView"
                                    },
                                    "type": "array"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "List user page views",
                "tags": [
                    "users"
                ]
            }
        },
        "/v1/users/{user_id}/profile": {
            "get": {
                "deprecated": false,
                "description": "Returns user profile data, including user id, name, and profile pic.\n\nWhen requesting the profile for the user accessing the API, the user's\ncalendar feed URL and LTI user id will be returned as well.",
                "operationId": "get_user_profile",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "user_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Profile"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Get user profile",
                "tags": [
                    "users"
                ]
            }
        },
        "/v1/users/{user_id}/usage_rights": {
            "delete": {
                "deprecated": false,
                "description": "Removes copyright and license information associated with one or more files",
                "operationId": "remove_usage_rights_users",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "user_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "description": "List of ids of files to remove associated usage rights from.",
                        "explode": false,
                        "in": "query",
                        "name": "file_ids",
                        "required": true,
                        "schema": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    },
                    {
                        "description": "List of ids of folders. Usage rights will be removed from all files in these folders.",
                        "explode": false,
                        "in": "query",
                        "name": "folder_ids",
                        "schema": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "style": "form"
                    }
                ],
                "responses": {
                    "200": {
                        "content": {},
                        "description": "No response was specified"
                    }
                },
                "summary": "Remove usage rights",
                "tags": [
                    "files"
                ]
            },
            "put": {
                "deprecated": false,
                "description": "Sets copyright and license information for one or more files",
                "operationId": "set_usage_rights_users",
                "parameters": [
                    {
                        "description": "ID",
                        "in": "path",
                        "name": "user_id",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "type": "object",
                                "properties": {
                                    "file_ids": {
                                        "description": "List of ids of files to set usage rights for.",
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "folder_ids": {
                                        "description": "List of ids of folders to search for files to set usage rights for.\nNote that new files uploaded to these folders do not automatically inherit these rights.",
                                        "items": {
                                            "type": "string"
                                        },
                                        "type": "array"
                                    },
                                    "publish": {
                                        "description": "Whether the file(s) or folder(s) should be published on save, provided that usage rights have been specified (set to `true` to publish on save).",
                                        "type": "boolean"
                                    },
                                    "usage_rights[legal_copyright]": {
                                        "description": "The legal copyright line for the files",
                                        "type": "string"
                                    },
                                    "usage_rights[license]": {
                                        "description": "The license that applies to the files. See the {api:UsageRightsController#licenses List licenses endpoint} for the supported license types.",
                                        "type": "string"
                                    },
                                    "usage_rights[use_justification]": {
                                        "description": "The intellectual property justification for using the files in Canvas",
                                        "enum": [
                                            "own_copyright",
                                            "used_by_permission",
                                            "fair_use",
                                            "public_domain",
                                            "creative_commons"
                                        ],
                                        "type": "string"
                                    }
                                },
                                "required": [
                                    "file_ids",
                                    "usage_rights[use_justification]"
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UsageRights"
                                }
                            }
                        },
                        "description": "No response was specified"
                    }
                },
                "summary": "Set usage rights",
                "tags": [
                    "files"
                ]
            }
        }
    },
    "components": {
        "parameters": {
            "pageParam": {
                "in": "query",
                "name": "page",
                "required": false,
                "schema": {
                    "type": "string",
                    "minimum": 0
                },
                "description": "The bookmark leading to the next paginated page. This needs to be parsed from the response header ('Link' field)."
            },
            "perPageParam": {
                "in": "query",
                "name": "per_page",
                "required": false,
                "schema": {
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 100,
                    "default": 10
                },
                "description": "The numbers of items to return."
            }
        },
        "schemas": {
            "Account": {
                "properties": {
                    "default_group_storage_quota_mb": {
                        "description": "The storage quota for a group in the account in megabytes, if not otherwise specified",
                        "example": 50,
                        "nullable": true,
                        "type": "integer"
                    },
                    "default_storage_quota_mb": {
                        "description": "The storage quota for the account in megabytes, if not otherwise specified",
                        "example": 500,
                        "nullable": true,
                        "type": "integer"
                    },
                    "default_time_zone": {
                        "description": "The default time zone of the account. Allowed time zones are {http://www.iana.org/time-zones IANA time zones} or friendlier {http://api.rubyonrails.org/classes/ActiveSupport/TimeZone.html Ruby on Rails time zones}.",
                        "example": "America/Denver",
                        "nullable": true,
                        "type": "string"
                    },
                    "default_user_storage_quota_mb": {
                        "description": "The storage quota for a user in the account in megabytes, if not otherwise specified",
                        "example": 50,
                        "nullable": true,
                        "type": "integer"
                    },
                    "id": {
                        "description": "the ID of the Account object",
                        "example": 2,
                        "nullable": true,
                        "type": "integer"
                    },
                    "integration_id": {
                        "description": "The account's identifier in the Student Information System. Only included if the user has permission to view SIS information.",
                        "example": "123xyz",
                        "nullable": true,
                        "type": "string"
                    },
                    "lti_guid": {
                        "description": "The account's identifier that is sent as context_id in LTI launches.",
                        "example": "123xyz",
                        "nullable": true,
                        "type": "string"
                    },
                    "name": {
                        "description": "The display name of the account",
                        "example": "Canvas Account",
                        "nullable": true,
                        "type": "string"
                    },
                    "parent_account_id": {
                        "description": "The account's parent ID, or null if this is the root account",
                        "example": 1,
                        "nullable": true,
                        "type": "integer"
                    },
                    "root_account_id": {
                        "description": "The ID of the root account, or null if this is the root account",
                        "example": 1,
                        "nullable": true,
                        "type": "integer"
                    },
                    "sis_account_id": {
                        "description": "The account's identifier in the Student Information System. Only included if the user has permission to view SIS information.",
                        "example": "123xyz",
                        "nullable": true,
                        "type": "string"
                    },
                    "sis_import_id": {
                        "description": "The id of the SIS import if created through SIS. Only included if the user has permission to manage SIS information.",
                        "example": 12,
                        "nullable": true,
                        "type": "integer"
                    },
                    "uuid": {
                        "description": "The UUID of the account",
                        "example": "WvAHhY5FINzq5IyRIJybGeiXyFkG3SqHUPb7jZY5",
                        "nullable": true,
                        "type": "string"
                    },
                    "workflow_state": {
                        "description": "The state of the account. Can be 'active' or 'deleted'.",
                        "example": "active",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "AccountNotification": {
                "properties": {
                    "end_at": {
                        "description": "When to expire the notification.",
                        "example": "2013-08-30T05:59:00.000Z",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "icon": {
                        "description": "The icon to display with the message.  Defaults to warning.",
                        "example": "information",
                        "nullable": true,
                        "type": "string"
                    },
                    "message": {
                        "description": "The message to be sent in the notification.",
                        "example": "This is a test of the notification system.",
                        "nullable": true,
                        "type": "string"
                    },
                    "role_ids": {
                        "description": "The roles to send the notification to.  If roles is not passed it defaults to all roles",
                        "example": [
                            1
                        ],
                        "items": {
                            "type": "integer"
                        },
                        "nullable": true,
                        "type": "array"
                    },
                    "roles": {
                        "description": "(Deprecated) The roles to send the notification to.  If roles is not passed it defaults to all roles",
                        "example": [
                            "StudentEnrollment"
                        ],
                        "items": {
                            "type": "string"
                        },
                        "nullable": true,
                        "type": "array"
                    },
                    "start_at": {
                        "description": "When to send out the notification.",
                        "example": "2013-08-29T05:59:00.000Z",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "subject": {
                        "description": "The subject of the notifications",
                        "example": "Attention Students",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "ActivityStream": {
                "properties": {
                    "created_at": {
                        "example": "2011-07-13T09:12:00Z",
                        "type": "string"
                    },
                    "updated_at": {
                        "example": "2011-07-25T08:52:41Z",
                        "type": "string"
                    },
                    "id": {
                        "example": 123,
                        "type": "integer"
                    },
                    "title": {
                        "example": "Stream Item Subject",
                        "type": "string"
                    },
                    "message": {
                        "description": "The body text of the activity stream item.",
                        "type": "string"
                    },
                    "type": {
                        "example": "DiscussionTopic",
                        "type": "string"
                    },
                    "read_state": {
                        "example": false,
                        "type": "boolean"
                    },
                    "context_type": {
                        "example": "course",
                        "type": "string"
                    },
                    "course_id": {
                        "example": 123,
                        "type": "integer"
                    },
                    "group_id": {
                        "example": 123,
                        "type": "integer"
                    },
                    "html_url": {
                        "description": "the URL to the Canvas web UI for this stream item",
                        "type": "string"
                    }
                }
            },
            "Admin": {
                "properties": {
                    "id": {
                        "description": "The unique identifier for the account role/user assignment.",
                        "example": 1023,
                        "type": "integer"
                    },
                    "role": {
                        "description": "The account role assigned. This can be 'AccountAdmin' or a user-defined role created by the Roles API.",
                        "example": "AccountAdmin",
                        "nullable": true,
                        "type": "string"
                    },
                    "user": {
                        "$ref": "#/components/schemas/User"
                    },
                    "workflow_state": {
                        "description": "The status of the account role/user assignment.",
                        "example": "deleted",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "required": [
                    "id"
                ],
                "type": "object"
            },
            "Answer": {
                "properties": {
                    "answer_comments": {
                        "description": "Specific contextual comments for a particular answer.",
                        "example": "Remember to check your spelling prior to submitting this answer.",
                        "nullable": true,
                        "type": "string"
                    },
                    "answer_match_left": {
                        "description": "Used in matching questions.  The static value of the answer that will be displayed on the left for students to match for.",
                        "example": "Salt Lake City",
                        "nullable": true,
                        "type": "string"
                    },
                    "answer_match_right": {
                        "description": "Used in matching questions. The correct match for the value given in answer_match_left.  Will be displayed in a dropdown with the other answer_match_right values..",
                        "example": "Utah",
                        "nullable": true,
                        "type": "string"
                    },
                    "answer_text": {
                        "description": "The text of the answer.",
                        "example": "Constantinople",
                        "type": "string"
                    },
                    "answer_weight": {
                        "description": "An integer to determine correctness of the answer. Incorrect answers should be 0, correct answers should be non-negative.",
                        "example": 100,
                        "format": "int64",
                        "type": "integer"
                    },
                    "approximate": {
                        "description": "Used in numerical questions of type 'precision_answer'.  The value the answer should equal.",
                        "example": 1234600000,
                        "format": "float",
                        "nullable": true,
                        "type": "number"
                    },
                    "blank_id": {
                        "description": "Used in fill in multiple blank and multiple dropdowns questions.",
                        "example": 1170,
                        "format": "int64",
                        "nullable": true,
                        "type": "integer"
                    },
                    "end": {
                        "description": "Used in numerical questions of type 'range_answer'. The end of the allowed range (inclusive).",
                        "example": 10,
                        "format": "int64",
                        "nullable": true,
                        "type": "integer"
                    },
                    "exact": {
                        "description": "Used in numerical questions of type 'exact_answer'.  The value the answer should equal.",
                        "example": 42,
                        "format": "int64",
                        "nullable": true,
                        "type": "integer"
                    },
                    "id": {
                        "description": "The unique identifier for the answer.  Do not supply if this answer is part of a new question",
                        "example": 6656,
                        "format": "int64",
                        "nullable": true,
                        "type": "integer"
                    },
                    "margin": {
                        "description": "Used in numerical questions of type 'exact_answer'. The margin of error allowed for the student's answer.",
                        "example": 4,
                        "format": "int64",
                        "nullable": true,
                        "type": "integer"
                    },
                    "matching_answer_incorrect_matches": {
                        "description": "Used in matching questions. A list of distractors, delimited by new lines (\n) that will be seeded with all the answer_match_right values.",
                        "example": "Nevada\nCalifornia\nWashington",
                        "nullable": true,
                        "type": "string"
                    },
                    "numerical_answer_type": {
                        "description": "Used in numerical questions.  Values can be 'exact_answer', 'range_answer', or 'precision_answer'.",
                        "example": "exact_answer",
                        "nullable": true,
                        "type": "string"
                    },
                    "precision": {
                        "description": "Used in numerical questions of type 'precision_answer'. The numerical precision that will be used when comparing the student's answer.",
                        "example": 4,
                        "format": "int64",
                        "nullable": true,
                        "type": "integer"
                    },
                    "start": {
                        "description": "Used in numerical questions of type 'range_answer'. The start of the allowed range (inclusive).",
                        "example": 1,
                        "format": "int64",
                        "nullable": true,
                        "type": "integer"
                    },
                    "text_after_answers": {
                        "description": "Used in missing word questions.  The text to follow the missing word",
                        "example": " is the capital of Utah.",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "required": [
                    "answer_text",
                    "answer_weight"
                ],
                "type": "object"
            },
            "Assignment": {
                "properties": {
                    "all_dates": {
                        "description": "(Optional) all dates associated with the assignment, if applicable",
                        "items": {
                            "$ref": "#/components/schemas/AssignmentDate"
                        },
                        "nullable": true,
                        "type": "array"
                    },
                    "allowed_extensions": {
                        "description": "Allowed file extensions, which take effect if submission_types includes 'online_upload'.",
                        "example": [
                            "docx",
                            "ppt"
                        ],
                        "items": {
                            "type": "string"
                        },
                        "nullable": true,
                        "type": "array"
                    },
                    "anonymous_submissions": {
                        "description": "(Optional) whether anonymous submissions are accepted (applies only to quiz assignments)",
                        "example": false,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "assignment_group_id": {
                        "description": "the ID of the assignment's group",
                        "example": 2,
                        "nullable": true,
                        "type": "integer"
                    },
                    "assignment_visibility": {
                        "description": "(Optional) If 'assignment_visibility' is included in the 'include' parameter, includes an array of student IDs who can see this assignment.",
                        "example": [
                            137,
                            381,
                            572
                        ],
                        "items": {
                            "type": "integer"
                        },
                        "nullable": true,
                        "type": "array"
                    },
                    "automatic_peer_reviews": {
                        "description": "Boolean indicating peer reviews are assigned automatically. If false, the teacher is expected to manually assign peer reviews.",
                        "example": false,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "course_id": {
                        "description": "the ID of the course the assignment belongs to",
                        "example": 123,
                        "nullable": true,
                        "type": "integer"
                    },
                    "created_at": {
                        "description": "The time at which this assignment was originally created",
                        "example": "2012-07-02T05:59:00.000Z",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "description": {
                        "description": "the assignment description, in an HTML fragment",
                        "example": "<p>Do the following:</p>...",
                        "nullable": true,
                        "type": "string"
                    },
                    "discussion_topic": {
                        "$ref": "#/components/schemas/DiscussionTopicNullable"
                    },
                    "due_at": {
                        "description": "the due date for the assignment. returns null if not present. NOTE: If this assignment has assignment overrides, this field will be the due date as it applies to the user requesting information from the API.",
                        "example": "2012-07-02T05:59:00.000Z",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "due_date_required": {
                        "description": "Boolean flag indicating whether the assignment requires a due date based on the account level setting",
                        "example": true,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "external_tool_tag_attributes": {
                        "$ref": "#/components/schemas/ExternalToolTagAttributes"
                    },
                    "freeze_on_copy": {
                        "description": "(Optional) Boolean indicating if assignment will be frozen when it is copied. NOTE: This field will only be present if the AssignmentFreezer plugin is available for your account.",
                        "example": false,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "frozen": {
                        "description": "(Optional) Boolean indicating if assignment is frozen for the calling user. NOTE: This field will only be present if the AssignmentFreezer plugin is available for your account.",
                        "example": false,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "frozen_attributes": {
                        "description": "(Optional) Array of frozen attributes for the assignment. Only account administrators currently have permission to change an attribute in this list. Will be empty if no attributes are frozen for this assignment. Possible frozen attributes are: title, description, lock_at, points_possible, grading_type, submission_types, assignment_group_id, allowed_extensions, group_category_id, notify_of_update, peer_reviews NOTE: This field will only be present if the AssignmentFreezer plugin is available for your account.",
                        "example": [
                            "title"
                        ],
                        "items": {
                            "type": "string"
                        },
                        "nullable": true,
                        "type": "array"
                    },
                    "grade_group_students_individually": {
                        "description": "If this is a group assignment, boolean flag indicating whether or not students will be graded individually.",
                        "example": false,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "grading_standard_id": {
                        "description": "The id of the grading standard being applied to this assignment. Valid if grading_type is 'letter_grade' or 'gpa_scale'.",
                        "nullable": true,
                        "type": "integer"
                    },
                    "grading_type": {
                        "description": "The type of grading the assignment receives; one of 'pass_fail', 'percent', 'letter_grade', 'gpa_scale', 'points'",
                        "example": "points",
                        "nullable": true,
                        "type": "string"
                    },
                    "group_category_id": {
                        "description": "The ID of the assignments group set, if this is a group assignment. For group discussions, set group_category_id on the discussion topic, not the linked assignment.",
                        "example": 1,
                        "nullable": true,
                        "type": "integer"
                    },
                    "has_overrides": {
                        "description": "whether this assignment has overrides",
                        "example": true,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "has_submitted_submissions": {
                        "description": "If true, the assignment has been submitted to by at least one student",
                        "example": true,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "html_url": {
                        "description": "the URL to the assignment's web page",
                        "example": "https://...",
                        "nullable": true,
                        "type": "string"
                    },
                    "id": {
                        "description": "the ID of the assignment",
                        "example": 4,
                        "nullable": true,
                        "type": "integer"
                    },
                    "integration_data": {
                        "description": "(optional, Third Party integration data for assignment)",
                        "example": {
                            "5678": "0954"
                        },
                        "nullable": true,
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "integration_id": {
                        "description": "(optional, Third Party unique identifier for Assignment)",
                        "example": "12341234",
                        "nullable": true,
                        "type": "string"
                    },
                    "intra_group_peer_reviews": {
                        "description": "Boolean representing whether or not members from within the same group on a group assignment can be assigned to peer review their own group's work",
                        "example": false,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "lock_at": {
                        "description": "the lock date (assignment is locked after this date). returns null if not present. NOTE: If this assignment has assignment overrides, this field will be the lock date as it applies to the user requesting information from the API.",
                        "example": "2012-07-02T05:59:00.000Z",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "lock_explanation": {
                        "description": "(Optional) An explanation of why this is locked for the user. Present when locked_for_user is true.",
                        "example": "This assignment is locked until September 1 at 12:00am",
                        "nullable": true,
                        "type": "string"
                    },
                    "lock_info": {
                        "$ref": "#/components/schemas/LockInfo"
                    },
                    "locked_for_user": {
                        "description": "Whether or not this is locked for the user.",
                        "example": false,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "max_name_length": {
                        "description": "An integer indicating the maximum length an assignment's name may be",
                        "example": 15,
                        "nullable": true,
                        "type": "integer"
                    },
                    "moderated_grading": {
                        "description": "Boolean indicating if the assignment is moderated.",
                        "example": true,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "muted": {
                        "description": "whether the assignment is muted",
                        "nullable": true,
                        "type": "boolean"
                    },
                    "name": {
                        "description": "the name of the assignment",
                        "example": "some assignment",
                        "nullable": true,
                        "type": "string"
                    },
                    "needs_grading_count": {
                        "description": "if the requesting user has grading rights, the number of submissions that need grading.",
                        "example": 17,
                        "nullable": true,
                        "type": "integer"
                    },
                    "needs_grading_count_by_section": {
                        "description": "if the requesting user has grading rights and the 'needs_grading_count_by_section' flag is specified, the number of submissions that need grading split out by section. NOTE: This key is NOT present unless you pass the 'needs_grading_count_by_section' argument as true.  ANOTHER NOTE: it's possible to be enrolled in multiple sections, and if a student is setup that way they will show an assignment that needs grading in multiple sections (effectively the count will be duplicated between sections)",
                        "example": [
                            {
                                "needs_grading_count": 5,
                                "section_id": "123456"
                            },
                            {
                                "needs_grading_count": 0,
                                "section_id": "654321"
                            }
                        ],
                        "items": {
                            "$ref": "#/components/schemas/NeedsGradingCount"
                        },
                        "nullable": true,
                        "type": "array"
                    },
                    "omit_from_final_grade": {
                        "description": "(Optional) If true, the assignment will be omitted from the student's final grade",
                        "example": true,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "only_visible_to_overrides": {
                        "description": "Whether the assignment is only visible to overrides.",
                        "example": false,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "overrides": {
                        "description": "(Optional) If 'overrides' is included in the 'include' parameter, includes an array of assignment override objects.",
                        "items": {
                            "$ref": "#/components/schemas/AssignmentOverride"
                        },
                        "nullable": true,
                        "type": "array"
                    },
                    "peer_review_count": {
                        "description": "Integer representing the amount of reviews each user is assigned. NOTE: This key is NOT present unless you have automatic_peer_reviews set to true.",
                        "example": 0,
                        "nullable": true,
                        "type": "integer"
                    },
                    "peer_reviews": {
                        "description": "Boolean indicating if peer reviews are required for this assignment",
                        "example": false,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "peer_reviews_assign_at": {
                        "description": "String representing a date the reviews are due by. Must be a date that occurs after the default due date. If blank, or date is not after the assignment's due date, the assignment's due date will be used. NOTE: This key is NOT present unless you have automatic_peer_reviews set to true.",
                        "example": "2012-07-02T05:59:00.000Z",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "points_possible": {
                        "description": "the maximum points possible for the assignment",
                        "example": 12,
                        "nullable": true,
                        "type": "integer"
                    },
                    "position": {
                        "description": "the sorting order of the assignment in the group",
                        "example": 1,
                        "nullable": true,
                        "type": "integer"
                    },
                    "post_to_sis": {
                        "description": "(optional, present if Sync Grades to SIS feature is enabled)",
                        "example": true,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "published": {
                        "description": "Whether the assignment is published",
                        "example": true,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "quiz_id": {
                        "description": "(Optional) id of the associated quiz (applies only when submission_types is ['online_quiz'])",
                        "example": 620,
                        "nullable": true,
                        "type": "integer"
                    },
                    "rubric": {
                        "description": "(Optional) A list of scoring criteria and ratings for each rubric criterion. Included if there is an associated rubric.",
                        "items": {
                            "$ref": "#/components/schemas/RubricCriteria"
                        },
                        "nullable": true,
                        "type": "array"
                    },
                    "rubric_settings": {
                        "$ref": "#/components/schemas/RubricSettings"
                    },
                    "submission": {
                        "$ref": "#/components/schemas/SubmissionNullable"
                    },
                    "submission_types": {
                        "description": "the types of submissions allowed for this assignment list containing one or more of the following: 'discussion_topic', 'online_quiz', 'on_paper', 'none', 'external_tool', 'online_text_entry', 'online_url', 'online_upload' 'media_recording'",
                        "example": [
                            "online_text_entry"
                        ],
                        "items": {
                            "type": "string"
                        },
                        "nullable": true,
                        "type": "array"
                    },
                    "submissions_download_url": {
                        "description": "the URL to download all submissions as a zip",
                        "example": "https://example.com/courses/:course_id/assignments/:id/submissions?zip=1",
                        "nullable": true,
                        "type": "string"
                    },
                    "turnitin_enabled": {
                        "description": "Boolean flag indicating whether or not Turnitin has been enabled for the assignment. NOTE: This flag will not appear unless your account has the Turnitin plugin available",
                        "example": true,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "turnitin_settings": {
                        "$ref": "#/components/schemas/TurnitinSettings"
                    },
                    "unlock_at": {
                        "description": "the unlock date (assignment is unlocked after this date) returns null if not present NOTE: If this assignment has assignment overrides, this field will be the unlock date as it applies to the user requesting information from the API.",
                        "example": "2012-07-02T05:59:00.000Z",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "unpublishable": {
                        "description": "Whether the assignment's 'published' state can be changed to false. Will be false if there are student submissions for the assignment.",
                        "example": false,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "updated_at": {
                        "description": "The time at which this assignment was last modified in any way",
                        "example": "2012-07-02T05:59:00.000Z",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "use_rubric_for_grading": {
                        "description": "(Optional) If true, the rubric is directly tied to grading the assignment. Otherwise, it is only advisory. Included if there is an associated rubric.",
                        "example": true,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "vericite_enabled": {
                        "description": "Boolean flag indicating whether or not VeriCite has been enabled for the assignment. NOTE: This flag will not appear unless your account has the VeriCite plugin available",
                        "example": true,
                        "nullable": true,
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "AssignmentNullable": {
                "description": "The submission's assignment (see the assignments API) (optional)",
                "example": "Assignment",
                "nullable": true,
                "properties": {
                    "all_dates": {
                        "description": "(Optional) all dates associated with the assignment, if applicable",
                        "items": {
                            "$ref": "#/components/schemas/AssignmentDate"
                        },
                        "nullable": true,
                        "type": "array"
                    },
                    "allowed_extensions": {
                        "description": "Allowed file extensions, which take effect if submission_types includes 'online_upload'.",
                        "example": [
                            "docx",
                            "ppt"
                        ],
                        "items": {
                            "type": "string"
                        },
                        "nullable": true,
                        "type": "array"
                    },
                    "anonymous_submissions": {
                        "description": "(Optional) whether anonymous submissions are accepted (applies only to quiz assignments)",
                        "example": false,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "assignment_group_id": {
                        "description": "the ID of the assignment's group",
                        "example": 2,
                        "nullable": true,
                        "type": "integer"
                    },
                    "assignment_visibility": {
                        "description": "(Optional) If 'assignment_visibility' is included in the 'include' parameter, includes an array of student IDs who can see this assignment.",
                        "example": [
                            137,
                            381,
                            572
                        ],
                        "items": {
                            "type": "integer"
                        },
                        "nullable": true,
                        "type": "array"
                    },
                    "automatic_peer_reviews": {
                        "description": "Boolean indicating peer reviews are assigned automatically. If false, the teacher is expected to manually assign peer reviews.",
                        "example": false,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "course_id": {
                        "description": "the ID of the course the assignment belongs to",
                        "example": 123,
                        "nullable": true,
                        "type": "integer"
                    },
                    "created_at": {
                        "description": "The time at which this assignment was originally created",
                        "example": "2012-07-02T05:59:00.000Z",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "description": {
                        "description": "the assignment description, in an HTML fragment",
                        "example": "<p>Do the following:</p>...",
                        "nullable": true,
                        "type": "string"
                    },
                    "discussion_topic": {
                        "$ref": "#/components/schemas/DiscussionTopicNullable"
                    },
                    "due_at": {
                        "description": "the due date for the assignment. returns null if not present. NOTE: If this assignment has assignment overrides, this field will be the due date as it applies to the user requesting information from the API.",
                        "example": "2012-07-02T05:59:00.000Z",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "due_date_required": {
                        "description": "Boolean flag indicating whether the assignment requires a due date based on the account level setting",
                        "example": true,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "external_tool_tag_attributes": {
                        "$ref": "#/components/schemas/ExternalToolTagAttributes"
                    },
                    "freeze_on_copy": {
                        "description": "(Optional) Boolean indicating if assignment will be frozen when it is copied. NOTE: This field will only be present if the AssignmentFreezer plugin is available for your account.",
                        "example": false,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "frozen": {
                        "description": "(Optional) Boolean indicating if assignment is frozen for the calling user. NOTE: This field will only be present if the AssignmentFreezer plugin is available for your account.",
                        "example": false,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "frozen_attributes": {
                        "description": "(Optional) Array of frozen attributes for the assignment. Only account administrators currently have permission to change an attribute in this list. Will be empty if no attributes are frozen for this assignment. Possible frozen attributes are: title, description, lock_at, points_possible, grading_type, submission_types, assignment_group_id, allowed_extensions, group_category_id, notify_of_update, peer_reviews NOTE: This field will only be present if the AssignmentFreezer plugin is available for your account.",
                        "example": [
                            "title"
                        ],
                        "items": {
                            "type": "string"
                        },
                        "nullable": true,
                        "type": "array"
                    },
                    "grade_group_students_individually": {
                        "description": "If this is a group assignment, boolean flag indicating whether or not students will be graded individually.",
                        "example": false,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "grading_standard_id": {
                        "description": "The id of the grading standard being applied to this assignment. Valid if grading_type is 'letter_grade' or 'gpa_scale'.",
                        "nullable": true,
                        "type": "integer"
                    },
                    "grading_type": {
                        "description": "The type of grading the assignment receives; one of 'pass_fail', 'percent', 'letter_grade', 'gpa_scale', 'points'",
                        "example": "points",
                        "nullable": true,
                        "type": "string"
                    },
                    "group_category_id": {
                        "description": "The ID of the assignments group set, if this is a group assignment. For group discussions, set group_category_id on the discussion topic, not the linked assignment.",
                        "example": 1,
                        "nullable": true,
                        "type": "integer"
                    },
                    "has_overrides": {
                        "description": "whether this assignment has overrides",
                        "example": true,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "has_submitted_submissions": {
                        "description": "If true, the assignment has been submitted to by at least one student",
                        "example": true,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "html_url": {
                        "description": "the URL to the assignment's web page",
                        "example": "https://...",
                        "nullable": true,
                        "type": "string"
                    },
                    "id": {
                        "description": "the ID of the assignment",
                        "example": 4,
                        "nullable": true,
                        "type": "integer"
                    },
                    "integration_data": {
                        "description": "(optional, Third Party integration data for assignment)",
                        "example": {
                            "5678": "0954"
                        },
                        "nullable": true,
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "integration_id": {
                        "description": "(optional, Third Party unique identifier for Assignment)",
                        "example": "12341234",
                        "nullable": true,
                        "type": "string"
                    },
                    "intra_group_peer_reviews": {
                        "description": "Boolean representing whether or not members from within the same group on a group assignment can be assigned to peer review their own group's work",
                        "example": false,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "lock_at": {
                        "description": "the lock date (assignment is locked after this date). returns null if not present. NOTE: If this assignment has assignment overrides, this field will be the lock date as it applies to the user requesting information from the API.",
                        "example": "2012-07-02T05:59:00.000Z",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "lock_explanation": {
                        "description": "(Optional) An explanation of why this is locked for the user. Present when locked_for_user is true.",
                        "example": "This assignment is locked until September 1 at 12:00am",
                        "nullable": true,
                        "type": "string"
                    },
                    "lock_info": {
                        "$ref": "#/components/schemas/LockInfo"
                    },
                    "locked_for_user": {
                        "description": "Whether or not this is locked for the user.",
                        "example": false,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "max_name_length": {
                        "description": "An integer indicating the maximum length an assignment's name may be",
                        "example": 15,
                        "nullable": true,
                        "type": "integer"
                    },
                    "moderated_grading": {
                        "description": "Boolean indicating if the assignment is moderated.",
                        "example": true,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "muted": {
                        "description": "whether the assignment is muted",
                        "nullable": true,
                        "type": "boolean"
                    },
                    "name": {
                        "description": "the name of the assignment",
                        "example": "some assignment",
                        "nullable": true,
                        "type": "string"
                    },
                    "needs_grading_count": {
                        "description": "if the requesting user has grading rights, the number of submissions that need grading.",
                        "example": 17,
                        "nullable": true,
                        "type": "integer"
                    },
                    "needs_grading_count_by_section": {
                        "description": "if the requesting user has grading rights and the 'needs_grading_count_by_section' flag is specified, the number of submissions that need grading split out by section. NOTE: This key is NOT present unless you pass the 'needs_grading_count_by_section' argument as true.  ANOTHER NOTE: it's possible to be enrolled in multiple sections, and if a student is setup that way they will show an assignment that needs grading in multiple sections (effectively the count will be duplicated between sections)",
                        "example": [
                            {
                                "needs_grading_count": 5,
                                "section_id": "123456"
                            },
                            {
                                "needs_grading_count": 0,
                                "section_id": "654321"
                            }
                        ],
                        "items": {
                            "$ref": "#/components/schemas/NeedsGradingCount"
                        },
                        "nullable": true,
                        "type": "array"
                    },
                    "omit_from_final_grade": {
                        "description": "(Optional) If true, the assignment will be omitted from the student's final grade",
                        "example": true,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "only_visible_to_overrides": {
                        "description": "Whether the assignment is only visible to overrides.",
                        "example": false,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "overrides": {
                        "description": "(Optional) If 'overrides' is included in the 'include' parameter, includes an array of assignment override objects.",
                        "items": {
                            "$ref": "#/components/schemas/AssignmentOverride"
                        },
                        "nullable": true,
                        "type": "array"
                    },
                    "peer_review_count": {
                        "description": "Integer representing the amount of reviews each user is assigned. NOTE: This key is NOT present unless you have automatic_peer_reviews set to true.",
                        "example": 0,
                        "nullable": true,
                        "type": "integer"
                    },
                    "peer_reviews": {
                        "description": "Boolean indicating if peer reviews are required for this assignment",
                        "example": false,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "peer_reviews_assign_at": {
                        "description": "String representing a date the reviews are due by. Must be a date that occurs after the default due date. If blank, or date is not after the assignment's due date, the assignment's due date will be used. NOTE: This key is NOT present unless you have automatic_peer_reviews set to true.",
                        "example": "2012-07-02T05:59:00.000Z",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "points_possible": {
                        "description": "the maximum points possible for the assignment",
                        "example": 12,
                        "nullable": true,
                        "type": "integer"
                    },
                    "position": {
                        "description": "the sorting order of the assignment in the group",
                        "example": 1,
                        "nullable": true,
                        "type": "integer"
                    },
                    "post_to_sis": {
                        "description": "(optional, present if Sync Grades to SIS feature is enabled)",
                        "example": true,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "published": {
                        "description": "Whether the assignment is published",
                        "example": true,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "quiz_id": {
                        "description": "(Optional) id of the associated quiz (applies only when submission_types is ['online_quiz'])",
                        "example": 620,
                        "nullable": true,
                        "type": "integer"
                    },
                    "rubric": {
                        "description": "(Optional) A list of scoring criteria and ratings for each rubric criterion. Included if there is an associated rubric.",
                        "items": {
                            "$ref": "#/components/schemas/RubricCriteria"
                        },
                        "nullable": true,
                        "type": "array"
                    },
                    "rubric_settings": {
                        "$ref": "#/components/schemas/RubricSettings"
                    },
                    "submission": {
                        "$ref": "#/components/schemas/SubmissionNullable"
                    },
                    "submission_types": {
                        "description": "the types of submissions allowed for this assignment list containing one or more of the following: 'discussion_topic', 'online_quiz', 'on_paper', 'none', 'external_tool', 'online_text_entry', 'online_url', 'online_upload' 'media_recording'",
                        "example": [
                            "online_text_entry"
                        ],
                        "items": {
                            "type": "string"
                        },
                        "nullable": true,
                        "type": "array"
                    },
                    "submissions_download_url": {
                        "description": "the URL to download all submissions as a zip",
                        "example": "https://example.com/courses/:course_id/assignments/:id/submissions?zip=1",
                        "nullable": true,
                        "type": "string"
                    },
                    "turnitin_enabled": {
                        "description": "Boolean flag indicating whether or not Turnitin has been enabled for the assignment. NOTE: This flag will not appear unless your account has the Turnitin plugin available",
                        "example": true,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "turnitin_settings": {
                        "$ref": "#/components/schemas/TurnitinSettings"
                    },
                    "unlock_at": {
                        "description": "the unlock date (assignment is unlocked after this date) returns null if not present NOTE: If this assignment has assignment overrides, this field will be the unlock date as it applies to the user requesting information from the API.",
                        "example": "2012-07-02T05:59:00.000Z",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "unpublishable": {
                        "description": "Whether the assignment's 'published' state can be changed to false. Will be false if there are student submissions for the assignment.",
                        "example": false,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "updated_at": {
                        "description": "The time at which this assignment was last modified in any way",
                        "example": "2012-07-02T05:59:00.000Z",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "use_rubric_for_grading": {
                        "description": "(Optional) If true, the rubric is directly tied to grading the assignment. Otherwise, it is only advisory. Included if there is an associated rubric.",
                        "example": true,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "vericite_enabled": {
                        "description": "Boolean flag indicating whether or not VeriCite has been enabled for the assignment. NOTE: This flag will not appear unless your account has the VeriCite plugin available",
                        "example": true,
                        "nullable": true,
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "AssignmentDate": {
                "description": "Object representing a due date for an assignment or quiz. If the due date came from an assignment override, it will have an 'id' field.",
                "properties": {
                    "base": {
                        "description": "(Optional, present if 'id' is missing) whether this date represents the assignment's or quiz's default due date",
                        "example": true,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "due_at": {
                        "description": "The due date for the assignment. Must be between the unlock date and the lock date if there are lock dates",
                        "example": "2013-08-29T05:59:00.000Z",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "id": {
                        "description": "(Optional, missing if 'base' is present) id of the assignment override this date represents",
                        "example": 1,
                        "nullable": true,
                        "type": "integer"
                    },
                    "lock_at": {
                        "description": "The lock date for the assignment. Must be after the due date if there is a due date.",
                        "example": "2013-09-01T05:59:00.000Z",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "title": {
                        "example": "Summer Session",
                        "nullable": true,
                        "type": "string"
                    },
                    "unlock_at": {
                        "description": "The unlock date for the assignment. Must be before the due date if there is a due date.",
                        "example": "2013-08-01T06:00:00.000Z",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "AssignmentGroup": {
                "properties": {
                    "assignments": {
                        "description": "the assignments in this Assignment Group (see the Assignment API for a detailed list of fields)",
                        "example": [],
                        "items": {
                            "type": "integer"
                        },
                        "nullable": true,
                        "type": "array"
                    },
                    "group_weight": {
                        "description": "the weight of the Assignment Group",
                        "example": 20,
                        "nullable": true,
                        "type": "integer"
                    },
                    "id": {
                        "description": "the id of the Assignment Group",
                        "example": 1,
                        "nullable": true,
                        "type": "integer"
                    },
                    "integration_data": {
                        "description": "the integration data of the Assignment Group",
                        "example": {
                            "5678": "0954"
                        },
                        "nullable": true,
                        "properties": {},
                        "type": "object"
                    },
                    "name": {
                        "description": "the name of the Assignment Group",
                        "example": "group2",
                        "nullable": true,
                        "type": "string"
                    },
                    "position": {
                        "description": "the position of the Assignment Group",
                        "example": 7,
                        "nullable": true,
                        "type": "integer"
                    },
                    "rules": {
                        "$ref": "#/components/schemas/GradingRules"
                    },
                    "sis_source_id": {
                        "description": "the sis source id of the Assignment Group",
                        "example": "1234",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "AssignmentOverride": {
                "properties": {
                    "all_day": {
                        "description": "the overridden all day flag (present if due_at is overridden)",
                        "nullable": true,
                        "type": "integer"
                    },
                    "all_day_date": {
                        "description": "the overridden all day date (present if due_at is overridden)",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "assignment_id": {
                        "description": "the ID of the assignment the override applies to",
                        "example": 123,
                        "nullable": true,
                        "type": "integer"
                    },
                    "course_section_id": {
                        "description": "the ID of the overrides's target section (present if the override targets a section)",
                        "example": 1,
                        "nullable": true,
                        "type": "integer"
                    },
                    "due_at": {
                        "description": "the overridden due at (present if due_at is overridden)",
                        "example": "2012-07-02T05:59:00.000Z",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "group_id": {
                        "description": "the ID of the override's target group (present if the override targets a group and the assignment is a group assignment)",
                        "example": 2,
                        "nullable": true,
                        "type": "integer"
                    },
                    "id": {
                        "description": "the ID of the assignment override",
                        "example": 4,
                        "nullable": true,
                        "type": "integer"
                    },
                    "lock_at": {
                        "description": "the overridden lock at, if any (present if lock_at is overridden)",
                        "example": "2012-07-02T05:59:00.000Z",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "student_ids": {
                        "description": "the IDs of the override's target students (present if the override targets an ad-hoc set of students)",
                        "example": [
                            1,
                            2,
                            3
                        ],
                        "items": {
                            "type": "integer"
                        },
                        "nullable": true,
                        "type": "array"
                    },
                    "title": {
                        "description": "the title of the override",
                        "example": "an assignment override",
                        "nullable": true,
                        "type": "string"
                    },
                    "unlock_at": {
                        "description": "the overridden unlock at (present if unlock_at is overridden)",
                        "example": "2012-07-02T05:59:00.000Z",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "AuthenticationProvider": {
                "properties": {
                    "auth_base": {
                        "description": "Valid for LDAP and CAS providers.",
                        "nullable": true,
                        "type": "string"
                    },
                    "auth_filter": {
                        "description": "Valid for LDAP providers.",
                        "example": "filter1",
                        "nullable": true,
                        "type": "string"
                    },
                    "auth_host": {
                        "description": "Valid for LDAP providers.",
                        "example": "127.0.0.1",
                        "nullable": true,
                        "type": "string"
                    },
                    "auth_over_tls": {
                        "description": "Valid for LDAP providers.",
                        "nullable": true,
                        "type": "integer"
                    },
                    "auth_port": {
                        "description": "Valid for LDAP providers.",
                        "nullable": true,
                        "type": "integer"
                    },
                    "auth_type": {
                        "description": "Valid for all providers.",
                        "example": "saml",
                        "nullable": true,
                        "type": "string"
                    },
                    "auth_username": {
                        "description": "Valid for LDAP providers.",
                        "example": "username1",
                        "nullable": true,
                        "type": "string"
                    },
                    "certificate_fingerprint": {
                        "description": "Valid for SAML providers.",
                        "example": "111222",
                        "nullable": true,
                        "type": "string"
                    },
                    "federated_attributes": {
                        "$ref": "#/components/schemas/FederatedAttributesConfig"
                    },
                    "id": {
                        "description": "Valid for all providers.",
                        "example": 1649,
                        "nullable": true,
                        "type": "integer"
                    },
                    "identifier_format": {
                        "description": "Valid for SAML providers.",
                        "example": "urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress",
                        "nullable": true,
                        "type": "string"
                    },
                    "idp_entity_id": {
                        "description": "Valid for SAML providers.",
                        "example": "http://example.com/saml1",
                        "nullable": true,
                        "type": "string"
                    },
                    "jit_provisioning": {
                        "description": "Just In Time provisioning. Valid for all providers except Canvas (which has the similar in concept self_registration setting).",
                        "nullable": true,
                        "type": "boolean"
                    },
                    "log_in_url": {
                        "description": "Valid for SAML and CAS providers.",
                        "example": "http://example.com/saml1/sli",
                        "nullable": true,
                        "type": "string"
                    },
                    "log_out_url": {
                        "description": "Valid for SAML providers.",
                        "example": "http://example.com/saml1/slo",
                        "nullable": true,
                        "type": "string"
                    },
                    "login_attribute": {
                        "description": "Valid for SAML providers.",
                        "example": "nameid",
                        "nullable": true,
                        "type": "string"
                    },
                    "position": {
                        "description": "Valid for all providers.",
                        "example": 1,
                        "nullable": true,
                        "type": "integer"
                    },
                    "requested_authn_context": {
                        "description": "Valid for SAML providers.",
                        "nullable": true,
                        "type": "string"
                    },
                    "sig_alg": {
                        "description": "Valid for SAML providers.",
                        "example": "http://www.w3.org/2001/04/xmldsig-more#rsa-sha256",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "Avatar": {
                "description": "Possible avatar for a user.",
                "properties": {
                    "content-type": {
                        "description": "['attachment' type only] the content-type of the attachment.",
                        "example": "image/jpeg",
                        "nullable": true,
                        "type": "string"
                    },
                    "display_name": {
                        "description": "A textual description of the avatar record.",
                        "example": "user, sample",
                        "type": "string"
                    },
                    "filename": {
                        "description": "['attachment' type only] the filename of the attachment",
                        "example": "profile.jpg",
                        "nullable": true,
                        "type": "string"
                    },
                    "id": {
                        "description": "['attachment' type only] the internal id of the attachment",
                        "example": 12,
                        "nullable": true,
                        "type": "integer"
                    },
                    "size": {
                        "description": "['attachment' type only] the size of the attachment",
                        "example": 32649,
                        "nullable": true,
                        "type": "integer"
                    },
                    "token": {
                        "description": "A unique representation of the avatar record which can be used to set the avatar with the user update endpoint. Note: this is an internal representation and is subject to change without notice. It should be consumed with this api endpoint and used in the user update endpoint, and should not be constructed by the client.",
                        "example": "<opaque_token>",
                        "type": "string"
                    },
                    "type": {
                        "description": "['gravatar'|'attachment'|'no_pic'] The type of avatar record, for categorization purposes.",
                        "example": "gravatar",
                        "type": "string"
                    },
                    "url": {
                        "description": "The url of the avatar",
                        "example": "https://secure.gravatar.com/avatar/2284...",
                        "type": "string"
                    }
                },
                "required": [
                    "display_name",
                    "token",
                    "type",
                    "url"
                ],
                "type": "object"
            },
            "BlueprintMigration": {
                "properties": {
                    "comment": {
                        "description": "User-specified comment describing changes made in this operation",
                        "example": "Fixed spelling in question 3 of midterm exam",
                        "nullable": true,
                        "type": "string"
                    },
                    "created_at": {
                        "description": "Time when the migration was queued",
                        "example": "2013-08-29T05:59:00.000Z",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "exports_started_at": {
                        "description": "Time when the exports begun",
                        "example": "2013-08-29T05:59:00.000Z",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "id": {
                        "description": "The ID of the migration.",
                        "example": 1,
                        "format": "int64",
                        "nullable": true,
                        "type": "integer"
                    },
                    "imports_completed_at": {
                        "description": "Time when the imports were completed",
                        "example": "2013-08-29T05:59:00.000Z",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "imports_queued_at": {
                        "description": "Time when the exports were completed and imports were queued",
                        "example": "2013-08-29T05:59:00.000Z",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "subscription_id": {
                        "description": "The ID of the associated course's blueprint subscription. Only present when querying a course associated with a blueprint.",
                        "example": 101,
                        "format": "int64",
                        "nullable": true,
                        "type": "integer"
                    },
                    "template_id": {
                        "description": "The ID of the template the migration belongs to. Only present when querying a blueprint course.",
                        "example": 2,
                        "format": "int64",
                        "nullable": true,
                        "type": "integer"
                    },
                    "user_id": {
                        "description": "The ID of the user who queued the migration.",
                        "example": 3,
                        "format": "int64",
                        "nullable": true,
                        "type": "integer"
                    },
                    "workflow_state": {
                        "description": "Current state of the content migration: queued, exporting, imports_queued, completed, exports_failed, imports_failed",
                        "example": "running",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "BlueprintMigrationNullable": {
                "nullable": true,
                "properties": {
                    "comment": {
                        "description": "User-specified comment describing changes made in this operation",
                        "example": "Fixed spelling in question 3 of midterm exam",
                        "nullable": true,
                        "type": "string"
                    },
                    "created_at": {
                        "description": "Time when the migration was queued",
                        "example": "2013-08-29T05:59:00.000Z",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "exports_started_at": {
                        "description": "Time when the exports begun",
                        "example": "2013-08-29T05:59:00.000Z",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "id": {
                        "description": "The ID of the migration.",
                        "example": 1,
                        "format": "int64",
                        "nullable": true,
                        "type": "integer"
                    },
                    "imports_completed_at": {
                        "description": "Time when the imports were completed",
                        "example": "2013-08-29T05:59:00.000Z",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "imports_queued_at": {
                        "description": "Time when the exports were completed and imports were queued",
                        "example": "2013-08-29T05:59:00.000Z",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "subscription_id": {
                        "description": "The ID of the associated course's blueprint subscription. Only present when querying a course associated with a blueprint.",
                        "example": 101,
                        "format": "int64",
                        "nullable": true,
                        "type": "integer"
                    },
                    "template_id": {
                        "description": "The ID of the template the migration belongs to. Only present when querying a blueprint course.",
                        "example": 2,
                        "format": "int64",
                        "nullable": true,
                        "type": "integer"
                    },
                    "user_id": {
                        "description": "The ID of the user who queued the migration.",
                        "example": 3,
                        "format": "int64",
                        "nullable": true,
                        "type": "integer"
                    },
                    "workflow_state": {
                        "description": "Current state of the content migration: queued, exporting, imports_queued, completed, exports_failed, imports_failed",
                        "example": "running",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "BlueprintSubscription": {
                "description": "Associates a course with a blueprint",
                "properties": {
                    "blueprint_course": {
                        "description": "The blueprint course subscribed to",
                        "example": {
                            "course_code": "BIOL 100 BP",
                            "id": 2,
                            "name": "Biology 100 Blueprint",
                            "term_name": "Default term"
                        },
                        "nullable": true,
                        "properties": {},
                        "type": "object"
                    },
                    "id": {
                        "description": "The ID of the blueprint course subscription",
                        "example": 101,
                        "format": "int64",
                        "nullable": true,
                        "type": "integer"
                    },
                    "template_id": {
                        "description": "The ID of the blueprint template the associated course is subscribed to",
                        "example": 1,
                        "format": "int64",
                        "nullable": true,
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "BlueprintTemplate": {
                "properties": {
                    "associated_course_count": {
                        "description": "Number of associated courses for the template",
                        "example": 3,
                        "nullable": true,
                        "type": "integer"
                    },
                    "course_id": {
                        "description": "The ID of the Course the template belongs to.",
                        "example": 2,
                        "format": "int64",
                        "nullable": true,
                        "type": "integer"
                    },
                    "id": {
                        "description": "The ID of the template.",
                        "example": 1,
                        "format": "int64",
                        "nullable": true,
                        "type": "integer"
                    },
                    "last_export_completed_at": {
                        "description": "Time when the last export was completed",
                        "example": "2013-08-29T05:59:00.000Z",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "latest_migration": {
                        "$ref": "#/components/schemas/BlueprintMigrationNullable"
                    }
                },
                "type": "object"
            },
            "Bookmark": {
                "properties": {
                    "data": {
                        "example": {
                            "active_tab": 1
                        },
                        "nullable": true,
                        "properties": {},
                        "type": "object"
                    },
                    "id": {
                        "example": 1,
                        "nullable": true,
                        "type": "integer"
                    },
                    "name": {
                        "example": "Biology 101",
                        "nullable": true,
                        "type": "string"
                    },
                    "position": {
                        "example": 1,
                        "nullable": true,
                        "type": "integer"
                    },
                    "url": {
                        "example": "/courses/1",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "CalendarEvent": {
                "properties": {
                    "all_context_codes": {
                        "description": "a comma-separated list of all calendar contexts this event is part of",
                        "example": "course_123,course_456",
                        "nullable": true,
                        "type": "string"
                    },
                    "all_day": {
                        "description": "Boolean indicating whether this is an all-day event (midnight to midnight)",
                        "example": false,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "all_day_date": {
                        "description": "The date of this event",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "appointment_group_id": {
                        "description": "Various Appointment-Group-related fields.These fields are only pertinent to time slots (appointments) and reservations of those time slots. See the Appointment Groups API. The id of the appointment group",
                        "nullable": true,
                        "type": "integer"
                    },
                    "appointment_group_url": {
                        "description": "The API URL of the appointment group",
                        "nullable": true,
                        "type": "string"
                    },
                    "available_slots": {
                        "description": "If the event is a time slot and it has a participant limit, an integer indicating how many slots are available",
                        "nullable": true,
                        "type": "integer"
                    },
                    "child_events": {
                        "description": "Included by default, but may be excluded (see include[] option). If this is a time slot (see the Appointment Groups API) this will be a list of any reservations. If this is a course-level event, this will be a list of section-level events (if any)",
                        "items": {
                            "type": "integer"
                        },
                        "nullable": true,
                        "type": "array"
                    },
                    "child_events_count": {
                        "description": "The number of child_events. See child_events (and parent_event_id)",
                        "example": 0,
                        "nullable": true,
                        "type": "integer"
                    },
                    "context_code": {
                        "description": "the context code of the calendar this event belongs to (course, user or group)",
                        "example": "course_123",
                        "nullable": true,
                        "type": "string"
                    },
                    "created_at": {
                        "description": "When the calendar event was created",
                        "example": "2012-07-12T16:55:20.000Z",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "description": {
                        "description": "The HTML description of the event",
                        "example": "<b>It's that time again!</b>",
                        "nullable": true,
                        "type": "string"
                    },
                    "effective_context_code": {
                        "description": "if specified, it indicates which calendar this event should be displayed on. for example, a section-level event would have the course's context code here, while the section's context code would be returned above)",
                        "nullable": true,
                        "type": "string"
                    },
                    "end_at": {
                        "description": "The end timestamp of the event",
                        "example": "2012-07-19T22:00:00.000Z",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "group": {
                        "description": "If the event is a group-level reservation, this will contain the group participant JSON (refer to the Groups API).",
                        "nullable": true,
                        "type": "string"
                    },
                    "hidden": {
                        "description": "Whether this event should be displayed on the calendar. Only true for course-level events with section-level child events.",
                        "example": false,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "html_url": {
                        "description": "URL for a user to view this event",
                        "example": "https://example.com/calendar?event_id=234&include_contexts=course_123",
                        "nullable": true,
                        "type": "string"
                    },
                    "id": {
                        "description": "The ID of the calendar event",
                        "example": 234,
                        "nullable": true,
                        "type": "integer"
                    },
                    "location_address": {
                        "description": "The address where the event is taking place",
                        "example": "Greendale, Colorado",
                        "nullable": true,
                        "type": "string"
                    },
                    "location_name": {
                        "description": "The location name of the event",
                        "example": "Greendale Community College",
                        "nullable": true,
                        "type": "string"
                    },
                    "own_reservation": {
                        "description": "If the event is a reservation, this a boolean indicating whether it is the current user's reservation, or someone else's",
                        "example": false,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "parent_event_id": {
                        "description": "Normally null. If this is a reservation (see the Appointment Groups API), the id will indicate the time slot it is for. If this is a section-level event, this will be the course-level parent event.",
                        "nullable": true,
                        "type": "integer"
                    },
                    "participant_type": {
                        "description": "The type of participant to sign up for a slot: 'User' or 'Group'",
                        "example": "User",
                        "nullable": true,
                        "type": "string"
                    },
                    "participants_per_appointment": {
                        "description": "If the event is a time slot, this is the participant limit",
                        "nullable": true,
                        "type": "integer"
                    },
                    "reserve_url": {
                        "description": "If the event is a time slot, the API URL for reserving it",
                        "nullable": true,
                        "type": "string"
                    },
                    "reserved": {
                        "description": "If the event is a time slot, a boolean indicating whether the user has already made a reservation for it",
                        "example": false,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "start_at": {
                        "description": "The start timestamp of the event",
                        "example": "2012-07-19T21:00:00.000Z",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "title": {
                        "description": "The title of the calendar event",
                        "example": "Paintball Fight!",
                        "nullable": true,
                        "type": "string"
                    },
                    "updated_at": {
                        "description": "When the calendar event was last updated",
                        "example": "2012-07-12T16:55:20.000Z",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "url": {
                        "description": "URL for this calendar event (to update, delete, etc.)",
                        "example": "https://example.com/api/v1/calendar_events/234",
                        "type": "string"
                    },
                    "user": {
                        "description": "If the event is a user-level reservation, this will contain the user participant JSON (refer to the Users API).",
                        "nullable": true,
                        "type": "string"
                    },
                    "workflow_state": {
                        "description": "Current state of the event ('active', 'locked' or 'deleted') 'locked' indicates that start_at/end_at cannot be changed (though the event could be deleted). Normally only reservations or time slots with reservations are locked (see the Appointment Groups API)",
                        "example": "active",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "CalendarLink": {
                "nullable": true,
                "properties": {
                    "ics": {
                        "description": "The URL of the calendar in ICS format",
                        "example": "https://canvas.instructure.com/feeds/calendars/course_abcdef.ics",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "ChangeRecord": {
                "description": "Describes a learning object change propagated to associated courses from a blueprint course",
                "properties": {
                    "asset_id": {
                        "description": "The ID of the learning object that was changed in the blueprint course.",
                        "example": 2,
                        "format": "int64",
                        "nullable": true,
                        "type": "integer"
                    },
                    "asset_name": {
                        "description": "The name of the learning object that was changed in the blueprint course.",
                        "example": "Some Assignment",
                        "nullable": true,
                        "type": "string"
                    },
                    "asset_type": {
                        "description": "The type of the learning object that was changed in the blueprint course.  One of 'assignment', 'attachment', 'discussion_topic', 'external_tool', 'quiz', or 'wiki_page'.",
                        "example": "assignment",
                        "nullable": true,
                        "type": "string"
                    },
                    "change_type": {
                        "description": "The type of change; one of 'created', 'updated', 'deleted'",
                        "example": "created",
                        "nullable": true,
                        "type": "string"
                    },
                    "exceptions": {
                        "description": "A list of ExceptionRecords for linked courses that did not receive this update.",
                        "example": [
                            {
                                "conflicting_changes": [
                                    "points"
                                ],
                                "course_id": 101
                            }
                        ],
                        "items": {
                            "properties": {},
                            "type": "object"
                        },
                        "nullable": true,
                        "type": "array"
                    },
                    "html_url": {
                        "description": "The URL of the changed object",
                        "example": "https://canvas.example.com/courses/101/assignments/2",
                        "nullable": true,
                        "type": "string"
                    },
                    "locked": {
                        "description": "Whether the object is locked in the blueprint",
                        "example": false,
                        "nullable": true,
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "Collaboration": {
                "properties": {
                    "collaboration_type": {
                        "description": "A name for the type of collaboration",
                        "example": "Microsoft Office",
                        "nullable": true,
                        "type": "string"
                    },
                    "context_id": {
                        "description": "The canvas id of the course or group to which the collaboration belongs",
                        "example": 77,
                        "nullable": true,
                        "type": "integer"
                    },
                    "context_type": {
                        "description": "The canvas type of the course or group to which the collaboration belongs",
                        "example": "Course",
                        "nullable": true,
                        "type": "string"
                    },
                    "created_at": {
                        "description": "The timestamp when the collaboration was created",
                        "example": "2012-06-01T06:00:00.000Z",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "description": {
                        "nullable": true,
                        "type": "string"
                    },
                    "document_id": {
                        "description": "The collaboration document identifier for the collaboration provider",
                        "example": "oinwoenfe8w8ef_onweufe89fef",
                        "nullable": true,
                        "type": "string"
                    },
                    "id": {
                        "description": "The unique identifier for the collaboration",
                        "example": 43,
                        "nullable": true,
                        "type": "integer"
                    },
                    "title": {
                        "nullable": true,
                        "type": "string"
                    },
                    "type": {
                        "description": "Another representation of the collaboration type",
                        "example": "ExternalToolCollaboration",
                        "type": "string"
                    },
                    "update_url": {
                        "description": "The LTI launch url to edit the collaboration",
                        "nullable": true,
                        "type": "string"
                    },
                    "updated_at": {
                        "description": "The timestamp when the collaboration was last modified",
                        "example": "2012-06-01T06:00:00.000Z",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "url": {
                        "description": "The LTI launch url to view collaboration.",
                        "type": "string"
                    },
                    "user_id": {
                        "description": "The canvas id of the user who created the collaboration",
                        "example": 92,
                        "nullable": true,
                        "type": "integer"
                    },
                    "user_name": {
                        "description": "The name of the user who owns the collaboration",
                        "example": "John Danger",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "Collaborator": {
                "properties": {
                    "id": {
                        "description": "The unique user or group identifier for the collaborator.",
                        "example": 12345,
                        "type": "integer"
                    },
                    "name": {
                        "description": "The name of the collaborator.",
                        "example": "Don Draper",
                        "nullable": true,
                        "type": "string"
                    },
                    "type": {
                        "description": "The type of collaborator (e.g. 'user' or 'group').",
                        "example": "user",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "required": [
                    "id"
                ],
                "type": "object"
            },
            "ColumnDatum": {
                "description": "ColumnDatum objects contain the entry for a column for each user.",
                "properties": {
                    "content": {
                        "example": "Nut allergy",
                        "nullable": true,
                        "type": "string"
                    },
                    "user_id": {
                        "example": 2,
                        "nullable": true,
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "CommMessage": {
                "properties": {
                    "body": {
                        "description": "The plain text body of the message",
                        "example": "This is the body of the message",
                        "nullable": true,
                        "type": "string"
                    },
                    "created_at": {
                        "description": "The date and time this message was created",
                        "example": "2013-03-19T21:00:00.000Z",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "from": {
                        "description": "The address that was put in the 'from' field of the message",
                        "example": "notifications@example.com",
                        "nullable": true,
                        "type": "string"
                    },
                    "from_name": {
                        "description": "The display name for the from address",
                        "example": "Instructure Canvas",
                        "nullable": true,
                        "type": "string"
                    },
                    "html_body": {
                        "description": "The HTML body of the message.",
                        "example": "<html><body>This is the body of the message</body></html>",
                        "nullable": true,
                        "type": "string"
                    },
                    "id": {
                        "description": "The ID of the CommMessage.",
                        "example": 42,
                        "type": "integer"
                    },
                    "reply_to": {
                        "description": "The reply_to header of the message",
                        "example": "notifications+specialdata@example.com",
                        "nullable": true,
                        "type": "string"
                    },
                    "sent_at": {
                        "description": "The date and time this message was sent",
                        "example": "2013-03-20T22:42:00.000Z",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "subject": {
                        "description": "The message subject",
                        "example": "example subject line",
                        "nullable": true,
                        "type": "string"
                    },
                    "to": {
                        "description": "The address the message was sent to:",
                        "example": "someone@example.com",
                        "nullable": true,
                        "type": "string"
                    },
                    "workflow_state": {
                        "description": "The workflow state of the message. One of 'created', 'staged', 'sending', 'sent', 'bounced', 'dashboard', 'cancelled', or 'closed'",
                        "example": "sent",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "CommunicationChannel": {
                "properties": {
                    "address": {
                        "description": "The address, or path, of the communication channel.",
                        "example": "sheldon@caltech.example.com",
                        "nullable": true,
                        "type": "string"
                    },
                    "id": {
                        "description": "The ID of the communication channel.",
                        "example": 16,
                        "type": "integer"
                    },
                    "position": {
                        "description": "The position of this communication channel relative to the user's other channels when they are ordered.",
                        "example": 1,
                        "nullable": true,
                        "type": "integer"
                    },
                    "type": {
                        "description": "The type of communcation channel being described. Possible values are: 'email', 'push', 'sms', or 'twitter'. This field determines the type of value seen in 'address'.",
                        "example": "email",
                        "nullable": true,
                        "type": "string"
                    },
                    "user_id": {
                        "description": "The ID of the user that owns this communication channel.",
                        "example": 1,
                        "nullable": true,
                        "type": "integer"
                    },
                    "workflow_state": {
                        "description": "The current state of the communication channel. Possible values are: 'unconfirmed' or 'active'.",
                        "example": "active",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "CompletionRequirement": {
                "nullable": true,
                "properties": {
                    "completed": {
                        "description": "whether the calling user has met this requirement (Optional; present only if the caller is a student or if the optional parameter 'student_id' is included)",
                        "example": true,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "min_score": {
                        "description": "minimum score required to complete (only present when type == 'min_score')",
                        "example": 10,
                        "nullable": true,
                        "type": "integer"
                    },
                    "type": {
                        "description": "one of 'must_view', 'must_submit', 'must_contribute', 'min_score'",
                        "example": "min_score",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "Conference": {
                "properties": {
                    "conference_key": {
                        "description": "The 3rd party's ID for the conference",
                        "example": "abcdjoelisgreatxyz",
                        "nullable": true,
                        "type": "string"
                    },
                    "conference_type": {
                        "description": "The type of conference",
                        "example": "AdobeConnect",
                        "nullable": true,
                        "type": "string"
                    },
                    "description": {
                        "description": "The description for the conference",
                        "example": "Conference Description",
                        "nullable": true,
                        "type": "string"
                    },
                    "duration": {
                        "description": "The expected duration the conference is supposed to last",
                        "example": 60,
                        "nullable": true,
                        "type": "integer"
                    },
                    "ended_at": {
                        "description": "The date that the conference ended at, null if it hasn't ended",
                        "example": "2013-12-13T17:23:26.000Z",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "has_advanced_settings": {
                        "description": "True if the conference type has advanced settings.",
                        "example": false,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "id": {
                        "description": "The id of the conference",
                        "example": 170,
                        "type": "integer"
                    },
                    "join_url": {
                        "description": "URL to join the conference, may be null if the conference type doesn't set it",
                        "nullable": true,
                        "type": "string"
                    },
                    "long_running": {
                        "description": "If true the conference is long running and has no expected end time",
                        "example": false,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "recordings": {
                        "description": "A List of recordings for the conference",
                        "items": {
                            "$ref": "#/components/schemas/ConferenceRecording"
                        },
                        "nullable": true,
                        "type": "array"
                    },
                    "started_at": {
                        "description": "The date the conference started at, null if it hasn't started",
                        "example": "2013-12-12T23:02:17.000Z",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "title": {
                        "description": "The title of the conference",
                        "example": "Test conference",
                        "nullable": true,
                        "type": "string"
                    },
                    "url": {
                        "description": "URL for the conference, may be null if the conference type doesn't set it",
                        "nullable": true,
                        "type": "string"
                    },
                    "user_settings": {
                        "description": "A collection of settings specific to the conference type",
                        "example": {
                            "record": true
                        },
                        "nullable": true,
                        "properties": {},
                        "type": "object"
                    },
                    "users": {
                        "description": "Array of user ids that are participants in the conference",
                        "example": [
                            1,
                            7,
                            8,
                            9,
                            10
                        ],
                        "items": {
                            "type": "integer"
                        },
                        "nullable": true,
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "ConferenceRecording": {
                "properties": {
                    "created_at": {
                        "example": "2013-12-12T23:09:09.960Z",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "duration_minutes": {
                        "example": 0,
                        "nullable": true,
                        "type": "integer"
                    },
                    "playback_url": {
                        "example": "http://example.com/recording_url",
                        "nullable": true,
                        "type": "string"
                    },
                    "title": {
                        "example": "course2: Test conference 3 [170]_0",
                        "nullable": true,
                        "type": "string"
                    },
                    "updated_at": {
                        "example": "2013-12-12T23:09:33.903Z",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "ContentDetails": {
                "nullable": true,
                "properties": {
                    "due_at": {
                        "example": "2012-12-31T12:00:00.000Z",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "lock_at": {
                        "example": "2012-12-31T12:00:00.000Z",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "lock_explanation": {
                        "example": "This quiz is part of an unpublished module and is not available yet.",
                        "nullable": true,
                        "type": "string"
                    },
                    "lock_info": {
                        "$ref": "#/components/schemas/LockInfo"
                    },
                    "locked_for_user": {
                        "example": true,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "points_possible": {
                        "example": 20,
                        "nullable": true,
                        "type": "integer"
                    },
                    "unlock_at": {
                        "example": "2012-12-31T12:00:00.000Z",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "ContentExport": {
                "properties": {
                    "attachment": {
                        "$ref": "#/components/schemas/FileNullable"
                    },
                    "created_at": {
                        "description": "the date and time this export was requested",
                        "example": "2014-01-01T00:00:00.000Z",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "export_type": {
                        "description": "the type of content migration: 'common_cartridge' or 'qti'",
                        "example": "common_cartridge",
                        "nullable": true,
                        "type": "string"
                    },
                    "id": {
                        "description": "the unique identifier for the export",
                        "example": 101,
                        "type": "integer"
                    },
                    "progress_url": {
                        "description": "The api endpoint for polling the current progress",
                        "example": "https://example.com/api/v1/progress/4",
                        "nullable": true,
                        "type": "string"
                    },
                    "user_id": {
                        "description": "The ID of the user who started the export",
                        "example": 4,
                        "nullable": true,
                        "type": "integer"
                    },
                    "workflow_state": {
                        "description": "Current state of the content migration: created exporting exported failed",
                        "example": "exported",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "ContentMigration": {
                "properties": {
                    "attachment": {
                        "description": "attachment api object for the uploaded file may not be present for all migrations",
                        "example": "{\"url\"=>\"https://example.com/api/v1/courses/1/content_migrations/1/download_archive\"}",
                        "nullable": true,
                        "type": "string"
                    },
                    "finished_at": {
                        "description": "timestamp",
                        "example": "2012-06-01T06:00:00.000Z",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "id": {
                        "description": "the unique identifier for the migration",
                        "example": 370663,
                        "type": "integer"
                    },
                    "migration_issues_url": {
                        "description": "API url to the content migration's issues",
                        "example": "https://example.com/api/v1/courses/1/content_migrations/1/migration_issues",
                        "nullable": true,
                        "type": "string"
                    },
                    "migration_type": {
                        "description": "the type of content migration",
                        "example": "common_cartridge_importer",
                        "nullable": true,
                        "type": "string"
                    },
                    "migration_type_title": {
                        "description": "the name of the content migration type",
                        "example": "Canvas Cartridge Importer",
                        "nullable": true,
                        "type": "string"
                    },
                    "pre_attachment": {
                        "description": "file uploading data, see {file:file_uploads.html File Upload Documentation} for file upload workflow This works a little differently in that all the file data is in the pre_attachment hash if there is no upload_url then there was an attachment pre-processing error, the error message will be in the message key This data will only be here after a create or update call",
                        "example": "{\"upload_url\"=>\"\", \"message\"=>\"file exceeded quota\", \"upload_params\"=>{}}",
                        "nullable": true,
                        "type": "string"
                    },
                    "progress_url": {
                        "description": "The api endpoint for polling the current progress",
                        "example": "https://example.com/api/v1/progress/4",
                        "nullable": true,
                        "type": "string"
                    },
                    "started_at": {
                        "description": "timestamp",
                        "example": "2012-06-01T06:00:00.000Z",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "user_id": {
                        "description": "The user who started the migration",
                        "example": 4,
                        "nullable": true,
                        "type": "integer"
                    },
                    "workflow_state": {
                        "description": "Current state of the content migration: pre_processing, pre_processed, running, waiting_for_select, completed, failed",
                        "example": "running",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "ContextExternalTool": {
                "properties": {
                    "consumer_key": {
                        "description": "The consumer key used by the tool (The associated shared secret is not returned)",
                        "nullable": true,
                        "type": "string"
                    },
                    "domain": {
                        "description": "The domain to match links against",
                        "nullable": true,
                        "type": "string"
                    },
                    "id": {
                        "description": "The unique identifier for the tool",
                        "type": "integer"
                    },
                    "name": {
                        "description": "The name of the tool",
                        "nullable": true,
                        "type": "string"
                    },
                    "url": {
                        "description": "The url to match links against",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "Conversation": {
                "properties": {
                    "audience": {
                        "description": "Array of user ids who are involved in the conversation, ordered by participation level, then alphabetical. Excludes current user, unless this is a monologue.",
                        "items": {
                            "type": "integer"
                        },
                        "nullable": true,
                        "type": "array"
                    },
                    "audience_contexts": {
                        "description": "Most relevant shared contexts (courses and groups) between current user and other participants. If there is only one participant, it will also include that user's enrollment(s)/ membership type(s) in each course/group.",
                        "items": {
                            "type": "string"
                        },
                        "nullable": true,
                        "type": "array"
                    },
                    "avatar_url": {
                        "description": "URL to appropriate icon for this conversation (custom, individual or group avatar, depending on audience).",
                        "example": "https://canvas.instructure.com/images/messages/avatar-group-50.png",
                        "nullable": true,
                        "type": "string"
                    },
                    "context_name": {
                        "description": "Name of the course or group in which the conversation is occurring.",
                        "example": "Canvas 101",
                        "nullable": true,
                        "type": "string"
                    },
                    "id": {
                        "description": "the unique identifier for the conversation.",
                        "example": 2,
                        "format": "int64",
                        "type": "integer"
                    },
                    "last_message": {
                        "description": "A <=100 character preview from the most recent message.",
                        "example": "sure thing, here's the file",
                        "nullable": true,
                        "type": "string"
                    },
                    "message_count": {
                        "description": "the number of messages in the conversation.",
                        "example": 2,
                        "nullable": true,
                        "type": "integer"
                    },
                    "participants": {
                        "description": "Array of users participating in the conversation. Includes current user.",
                        "items": {
                            "$ref": "#/components/schemas/ConversationParticipant"
                        },
                        "nullable": true,
                        "type": "array"
                    },
                    "private": {
                        "description": "whether the conversation is private.",
                        "example": true,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "properties": {
                        "description": "Additional conversation flags (last_author, attachments, media_objects). Each listed property means the flag is set to true (i.e. the current user is the most recent author, there are attachments, or there are media objects)",
                        "items": {
                            "type": "string"
                        },
                        "nullable": true,
                        "type": "array"
                    },
                    "starred": {
                        "description": "whether the conversation is starred.",
                        "example": true,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "start_at": {
                        "description": "the date and time at which the last message was sent.",
                        "example": "2011-09-02T12:00:00.000Z",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "subject": {
                        "description": "the subject of the conversation.",
                        "example": "2",
                        "nullable": true,
                        "type": "string"
                    },
                    "subscribed": {
                        "description": "whether the current user is subscribed to the conversation.",
                        "example": true,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "visible": {
                        "description": "indicates whether the conversation is visible under the current scope and filter. This attribute is always true in the index API response, and is primarily useful in create/update responses so that you can know if the record should be displayed in the UI. The default scope is assumed, unless a scope or filter is passed to the create/update API call.",
                        "example": true,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "workflow_state": {
                        "description": "The current state of the conversation (read, unread or archived).",
                        "example": "unread",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "ConversationParticipant": {
                "properties": {
                    "avatar_url": {
                        "description": "If requested, this field will be included and contain a url to retrieve the user's avatar.",
                        "example": "https://canvas.instructure.com/images/messages/avatar-50.png",
                        "nullable": true,
                        "type": "string"
                    },
                    "full_name": {
                        "description": "The full name of the user.",
                        "example": "Sheldon Cooper",
                        "nullable": true,
                        "type": "string"
                    },
                    "id": {
                        "description": "The user ID for the participant.",
                        "example": 2,
                        "format": "int64",
                        "type": "integer"
                    },
                    "name": {
                        "description": "A short name the user has selected, for use in conversations or other less formal places through the site.",
                        "example": "Shelly",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "Course": {
                "properties": {
                    "access_restricted_by_date": {
                        "description": "optional: this will be true if this user is currently prevented from viewing the course because of date restriction settings",
                        "example": false,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "account_id": {
                        "description": "the account associated with the course",
                        "example": 81259,
                        "nullable": true,
                        "type": "integer"
                    },
                    "allow_student_assignment_edits": {
                        "example": false,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "allow_student_forum_attachments": {
                        "example": false,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "allow_wiki_comments": {
                        "example": false,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "apply_assignment_group_weights": {
                        "description": "weight final grade based on assignment group percentages",
                        "example": true,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "blueprint": {
                        "description": "optional: whether the course is set as a Blueprint Course (blueprint fields require the Blueprint Courses feature)",
                        "example": true,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "blueprint_restrictions": {
                        "description": "optional: Set of restrictions applied to all locked course objects",
                        "example": {
                            "availability_dates": false,
                            "content": true,
                            "due_dates": false,
                            "points": true
                        },
                        "nullable": true,
                        "properties": {},
                        "type": "object"
                    },
                    "blueprint_restrictions_by_object_type": {
                        "description": "optional: Sets of restrictions differentiated by object type applied to locked course objects",
                        "example": {
                            "assignment": {
                                "content": true,
                                "points": true
                            },
                            "wiki_page": {
                                "content": true
                            }
                        },
                        "nullable": true,
                        "properties": {},
                        "type": "object"
                    },
                    "calendar": {
                        "$ref": "#/components/schemas/CalendarLink"
                    },
                    "course_code": {
                        "description": "the course code",
                        "example": "INSTCON12",
                        "nullable": true,
                        "type": "string"
                    },
                    "course_color": {
                        "nullable": true,
                        "type": "string",
                        "description": "Not specified in Canvas API spec, I'm just guessing the type here"
                    },
                    "course_format": {
                        "example": "online",
                        "nullable": true,
                        "type": "string"
                    },
                    "course_progress": {
                        "$ref": "#/components/schemas/CourseProgress"
                    },
                    "created_at": {
                        "description": "the date the course was created.",
                        "example": "2012-05-01T06:00:00.000Z",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "default_view": {
                        "description": "the type of page that users will see when they first visit the course - 'feed': Recent Activity Dashboard - 'wiki': Wiki Front Page - 'modules': Course Modules/Sections Page - 'assignments': Course Assignments List - 'syllabus': Course Syllabus Page other types may be added in the future",
                        "example": "feed",
                        "nullable": true,
                        "type": "string"
                    },
                    "end_at": {
                        "description": "the end date for the course, if applicable",
                        "example": "2012-09-01T06:00:00.000Z",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "enrollment_term_id": {
                        "description": "the enrollment term associated with the course",
                        "example": 34,
                        "nullable": true,
                        "type": "integer"
                    },
                    "enrollments": {
                        "description": "A list of enrollments linking the current user to the course. for student enrollments, grading information may be included if include[]=total_scores",
                        "items": {
                            "$ref": "#/components/schemas/Enrollment"
                        },
                        "nullable": true,
                        "type": "array"
                    },
                    "friendly_name": {
                        "nullable": true,
                        "type": "string",
                        "description": "Not specified in Canvas API spec, I'm just guessing the type here"
                    },
                    "grade_passback_setting": {
                        "description": "The grade_passback_setting on this course",
                        "example": "nightly_sync",
                        "nullable": true,
                        "type": "string"
                    },
                    "grading_periods": {
                        "description": "A list of grading periods associated with the course",
                        "items": {
                            "$ref": "#/components/schemas/GradingPeriod"
                        },
                        "nullable": true,
                        "type": "array"
                    },
                    "grading_standard_id": {
                        "description": "the grading standard associated with the course",
                        "example": 25,
                        "nullable": true,
                        "type": "integer"
                    },
                    "hide_final_grades": {
                        "example": false,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "homeroom_course": {
                        "example": false,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "id": {
                        "description": "the unique identifier for the course",
                        "example": 370663,
                        "type": "integer"
                    },
                    "integration_id": {
                        "description": "the integration identifier for the course, if defined. This field is only included if the user has permission to view SIS information.",
                        "nullable": true,
                        "type": "string"
                    },
                    "is_public": {
                        "example": true,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "is_public_to_auth_users": {
                        "example": true,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "license": {
                        "example": "Creative Commons",
                        "nullable": true,
                        "type": "string"
                    },
                    "locale": {
                        "description": "the course-set locale, if applicable",
                        "example": "en",
                        "nullable": true,
                        "type": "string"
                    },
                    "name": {
                        "description": "the full name of the course",
                        "example": "InstructureCon 2012",
                        "nullable": true,
                        "type": "string"
                    },
                    "needs_grading_count": {
                        "description": "optional: the number of submissions needing grading returned only if the current user has grading rights and include[]=needs_grading_count",
                        "example": 17,
                        "nullable": true,
                        "type": "integer"
                    },
                    "open_enrollment": {
                        "example": true,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "original_name": {
                        "example": "INSTCON12",
                        "nullable": true,
                        "type": "string"
                    },
                    "permissions": {
                        "description": "optional: the permissions the user has for the course. returned only for a single course and include[]=permissions",
                        "example": {
                            "create_announcement": true,
                            "create_discussion_topic": true
                        },
                        "nullable": true,
                        "properties": {},
                        "type": "object"
                    },
                    "public_description": {
                        "description": "optional: the public description of the course",
                        "example": "Come one, come all to InstructureCon 2012!",
                        "nullable": true,
                        "type": "string"
                    },
                    "public_syllabus": {
                        "example": true,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "public_syllabus_to_auth": {
                        "example": true,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "restrict_enrollments_to_course_dates": {
                        "example": false,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "root_account_id": {
                        "description": "the root account associated with the course",
                        "example": 81259,
                        "nullable": true,
                        "type": "integer"
                    },
                    "self_enrollment": {
                        "example": false,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "sis_course_id": {
                        "description": "the SIS identifier for the course, if defined. This field is only included if the user has permission to view SIS information.",
                        "nullable": true,
                        "type": "string"
                    },
                    "sis_import_id": {
                        "description": "the unique identifier for the SIS import. This field is only included if the user has permission to manage SIS information.",
                        "example": 34,
                        "nullable": true,
                        "type": "integer"
                    },
                    "start_at": {
                        "description": "the start date for the course, if applicable",
                        "example": "2012-06-01T06:00:00.000Z",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "storage_quota_mb": {
                        "example": 5,
                        "nullable": true,
                        "type": "integer"
                    },
                    "storage_quota_used_mb": {
                        "example": 5,
                        "nullable": true,
                        "type": "number"
                    },
                    "syllabus_body": {
                        "description": "optional: user-generated HTML for the course syllabus",
                        "example": "<p>syllabus html goes here</p>",
                        "nullable": true,
                        "type": "string"
                    },
                    "template": {
                        "description": "optional: whether the course is set as a template (requires the course templates feature)",
                        "nullable": true,
                        "type": "boolean"
                    },
                    "term": {
                        "$ref": "#/components/schemas/Term"
                    },
                    "time_zone": {
                        "description": "The course's IANA time zone name.",
                        "example": "America/Denver",
                        "nullable": true,
                        "type": "string"
                    },
                    "total_students": {
                        "description": "optional: the total number of active and invited students in the course",
                        "example": 32,
                        "nullable": true,
                        "type": "integer"
                    },
                    "uuid": {
                        "description": "the UUID of the course",
                        "example": "WvAHhY5FINzq5IyRIJybGeiXyFkG3SqHUPb7jZY5",
                        "nullable": true,
                        "type": "string"
                    },
                    "workflow_state": {
                        "description": "the current state of the course one of 'unpublished', 'available', 'completed', or 'deleted'",
                        "example": "available",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "CourseWithIncludes": {
                "properties": {
                    "access_restricted_by_date": {
                        "description": "optional: this will be true if this user is currently prevented from viewing the course because of date restriction settings",
                        "example": false,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "account_id": {
                        "description": "the account associated with the course",
                        "example": 81259,
                        "nullable": true,
                        "type": "integer"
                    },
                    "allow_student_assignment_edits": {
                        "example": false,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "allow_student_forum_attachments": {
                        "example": false,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "allow_wiki_comments": {
                        "example": false,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "apply_assignment_group_weights": {
                        "description": "weight final grade based on assignment group percentages",
                        "example": true,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "blueprint": {
                        "description": "optional: whether the course is set as a Blueprint Course (blueprint fields require the Blueprint Courses feature)",
                        "example": true,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "blueprint_restrictions": {
                        "description": "optional: Set of restrictions applied to all locked course objects",
                        "example": {
                            "availability_dates": false,
                            "content": true,
                            "due_dates": false,
                            "points": true
                        },
                        "nullable": true,
                        "properties": {},
                        "type": "object"
                    },
                    "blueprint_restrictions_by_object_type": {
                        "description": "optional: Sets of restrictions differentiated by object type applied to locked course objects",
                        "example": {
                            "assignment": {
                                "content": true,
                                "points": true
                            },
                            "wiki_page": {
                                "content": true
                            }
                        },
                        "nullable": true,
                        "properties": {},
                        "type": "object"
                    },
                    "calendar": {
                        "$ref": "#/components/schemas/CalendarLink"
                    },
                    "course_code": {
                        "description": "the course code",
                        "example": "INSTCON12",
                        "nullable": true,
                        "type": "string"
                    },
                    "course_color": {
                        "nullable": true,
                        "type": "string",
                        "description": "Not specified in Canvas API spec, I'm just guessing the type here"
                    },
                    "course_format": {
                        "example": "online",
                        "nullable": true,
                        "type": "string"
                    },
                    "course_progress": {
                        "$ref": "#/components/schemas/CourseProgress"
                    },
                    "created_at": {
                        "description": "the date the course was created.",
                        "example": "2012-05-01T06:00:00.000Z",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "default_view": {
                        "description": "the type of page that users will see when they first visit the course - 'feed': Recent Activity Dashboard - 'wiki': Wiki Front Page - 'modules': Course Modules/Sections Page - 'assignments': Course Assignments List - 'syllabus': Course Syllabus Page other types may be added in the future",
                        "example": "feed",
                        "nullable": true,
                        "type": "string"
                    },
                    "end_at": {
                        "description": "the end date for the course, if applicable",
                        "example": "2012-09-01T06:00:00.000Z",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "enrollment_term_id": {
                        "description": "the enrollment term associated with the course",
                        "example": 34,
                        "nullable": true,
                        "type": "integer"
                    },
                    "enrollments": {
                        "description": "A list of enrollments linking the current user to the course. for student enrollments, grading information may be included if include[]=total_scores",
                        "items": {
                            "$ref": "#/components/schemas/Enrollment"
                        },
                        "nullable": true,
                        "type": "array"
                    },
                    "friendly_name": {
                        "nullable": true,
                        "type": "string",
                        "description": "Not specified in Canvas API spec, I'm just guessing the type here"
                    },
                    "grade_passback_setting": {
                        "description": "The grade_passback_setting on this course",
                        "example": "nightly_sync",
                        "nullable": true,
                        "type": "string"
                    },
                    "grading_periods": {
                        "description": "A list of grading periods associated with the course",
                        "items": {
                            "$ref": "#/components/schemas/GradingPeriod"
                        },
                        "nullable": true,
                        "type": "array"
                    },
                    "grading_standard_id": {
                        "description": "the grading standard associated with the course",
                        "example": 25,
                        "nullable": true,
                        "type": "integer"
                    },
                    "hide_final_grades": {
                        "example": false,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "homeroom_course": {
                        "example": false,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "id": {
                        "description": "the unique identifier for the course",
                        "example": 370663,
                        "type": "integer"
                    },
                    "integration_id": {
                        "description": "the integration identifier for the course, if defined. This field is only included if the user has permission to view SIS information.",
                        "nullable": true,
                        "type": "string"
                    },
                    "is_public": {
                        "example": true,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "is_public_to_auth_users": {
                        "example": true,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "license": {
                        "example": "Creative Commons",
                        "nullable": true,
                        "type": "string"
                    },
                    "locale": {
                        "description": "the course-set locale, if applicable",
                        "example": "en",
                        "nullable": true,
                        "type": "string"
                    },
                    "name": {
                        "description": "the full name of the course",
                        "example": "InstructureCon 2012",
                        "nullable": true,
                        "type": "string"
                    },
                    "needs_grading_count": {
                        "description": "optional: the number of submissions needing grading returned only if the current user has grading rights and include[]=needs_grading_count",
                        "example": 17,
                        "nullable": true,
                        "type": "integer"
                    },
                    "open_enrollment": {
                        "example": true,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "original_name": {
                        "example": "INSTCON12",
                        "nullable": true,
                        "type": "string"
                    },
                    "permissions": {
                        "description": "optional: the permissions the user has for the course. returned only for a single course and include[]=permissions",
                        "example": {
                            "create_announcement": true,
                            "create_discussion_topic": true
                        },
                        "nullable": true,
                        "properties": {},
                        "type": "object"
                    },
                    "public_description": {
                        "description": "optional: the public description of the course",
                        "example": "Come one, come all to InstructureCon 2012!",
                        "nullable": true,
                        "type": "string"
                    },
                    "public_syllabus": {
                        "example": true,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "public_syllabus_to_auth": {
                        "example": true,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "restrict_enrollments_to_course_dates": {
                        "example": false,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "root_account_id": {
                        "description": "the root account associated with the course",
                        "example": 81259,
                        "nullable": true,
                        "type": "integer"
                    },
                    "sections": {
                        "description": "A list of sections for this course.",
                        "items": {
                            "$ref": "#/components/schemas/Section"
                        },
                        "nullable": true,
                        "type": "array"
                    },
                    "self_enrollment": {
                        "example": false,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "sis_course_id": {
                        "description": "the SIS identifier for the course, if defined. This field is only included if the user has permission to view SIS information.",
                        "nullable": true,
                        "type": "string"
                    },
                    "sis_import_id": {
                        "description": "the unique identifier for the SIS import. This field is only included if the user has permission to manage SIS information.",
                        "example": 34,
                        "nullable": true,
                        "type": "integer"
                    },
                    "start_at": {
                        "description": "the start date for the course, if applicable",
                        "example": "2012-06-01T06:00:00.000Z",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "storage_quota_mb": {
                        "example": 5,
                        "nullable": true,
                        "type": "integer"
                    },
                    "storage_quota_used_mb": {
                        "example": 5,
                        "nullable": true,
                        "type": "number"
                    },
                    "syllabus_body": {
                        "description": "optional: user-generated HTML for the course syllabus",
                        "example": "<p>syllabus html goes here</p>",
                        "nullable": true,
                        "type": "string"
                    },
                    "template": {
                        "description": "optional: whether the course is set as a template (requires the course templates feature)",
                        "nullable": true,
                        "type": "boolean"
                    },
                    "term": {
                        "$ref": "#/components/schemas/Term"
                    },
                    "time_zone": {
                        "description": "The course's IANA time zone name.",
                        "example": "America/Denver",
                        "nullable": true,
                        "type": "string"
                    },
                    "total_students": {
                        "description": "optional: the total number of active and invited students in the course",
                        "example": 32,
                        "nullable": true,
                        "type": "integer"
                    },
                    "uuid": {
                        "description": "the UUID of the course",
                        "example": "WvAHhY5FINzq5IyRIJybGeiXyFkG3SqHUPb7jZY5",
                        "nullable": true,
                        "type": "string"
                    },
                    "workflow_state": {
                        "description": "the current state of the course one of 'unpublished', 'available', 'completed', or 'deleted'",
                        "example": "available",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "CourseEpubExport": {
                "description": "Combination of a Course & EpubExport.",
                "properties": {
                    "epub_export": {
                        "$ref": "#/components/schemas/EpubExportNullable"
                    },
                    "id": {
                        "description": "the unique identifier for the course",
                        "example": 101,
                        "type": "integer"
                    },
                    "name": {
                        "description": "the name for the course",
                        "example": "Maths 101",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "CourseEvent": {
                "properties": {
                    "created_at": {
                        "description": "timestamp of the event",
                        "example": "2012-07-19T21:00:00.000Z",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "event_data": {
                        "description": "Course event data depending on the event type.  This will return an object containing the relevant event data.  An updated event type will return an UpdatedEventData object.",
                        "example": "{}",
                        "nullable": true,
                        "type": "string"
                    },
                    "event_source": {
                        "description": "Course event source depending on the event type.  This will return a string containing the source of the event.",
                        "example": "manual|sis|api",
                        "nullable": true,
                        "type": "string"
                    },
                    "event_type": {
                        "description": "Course event type The event type defines the type and schema of the event_data object.",
                        "example": "updated",
                        "nullable": true,
                        "type": "string"
                    },
                    "id": {
                        "description": "ID of the event.",
                        "example": "e2b76430-27a5-0131-3ca1-48e0eb13f29b",
                        "type": "string"
                    },
                    "links": {
                        "$ref": "#/components/schemas/CourseEventLink"
                    }
                },
                "type": "object"
            },
            "CourseEventLink": {
                "nullable": true,
                "properties": {
                    "copied_from": {
                        "description": "ID of the course that this course was copied from. This is only included if the event_type is copied_from.",
                        "example": 12345,
                        "nullable": true,
                        "type": "integer"
                    },
                    "copied_to": {
                        "description": "ID of the course that this course was copied to. This is only included if the event_type is copied_to.",
                        "example": 12345,
                        "nullable": true,
                        "type": "integer"
                    },
                    "course": {
                        "description": "ID of the course for the event.",
                        "example": 12345,
                        "nullable": true,
                        "type": "integer"
                    },
                    "page_view": {
                        "description": "ID of the page view during the event if it exists.",
                        "example": "e2b76430-27a5-0131-3ca1-48e0eb13f29b",
                        "nullable": true,
                        "type": "string"
                    },
                    "sis_batch": {
                        "description": "ID of the SIS batch that triggered the event.",
                        "example": 12345,
                        "nullable": true,
                        "type": "integer"
                    },
                    "user": {
                        "description": "ID of the user for the event (who made the change).",
                        "example": 12345,
                        "nullable": true,
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "CourseNickname": {
                "properties": {
                    "course_id": {
                        "description": "the ID of the course",
                        "example": 88,
                        "nullable": true,
                        "type": "integer"
                    },
                    "name": {
                        "description": "the actual name of the course",
                        "example": "S1048576 DPMS1200 Intro to Newtonian Mechanics",
                        "nullable": true,
                        "type": "string"
                    },
                    "nickname": {
                        "description": "the calling user's nickname for the course",
                        "example": "Physics",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "CourseProgress": {
                "nullable": true,
                "properties": {
                    "completed_at": {
                        "description": "date the course was completed. null if the course has not been completed by this user",
                        "example": "2013-06-01T06:00:00.000Z",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "next_requirement_url": {
                        "description": "url to next module item that has an unmet requirement. null if the user has completed the course or the current module does not require sequential progress",
                        "example": "http://localhost/courses/1/modules/items/2",
                        "nullable": true,
                        "type": "string"
                    },
                    "requirement_completed_count": {
                        "description": "total number of requirements the user has completed from all modules",
                        "example": 1,
                        "nullable": true,
                        "type": "integer"
                    },
                    "requirement_count": {
                        "description": "total number of requirements from all modules",
                        "example": 10,
                        "nullable": true,
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "CustomColors": {
                "properties": {
                    "custom_colors": {
                        "additionalProperties": {
                            "type": "string"
                        },
                        "nullable": true,
                        "type": "object"
                    }
                },
                "type": "object"
            },
            "CustomColumn": {
                "properties": {
                    "hidden": {
                        "description": "won't be displayed if hidden is true",
                        "example": false,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "id": {
                        "description": "The ID of the custom gradebook column",
                        "example": 2,
                        "type": "integer"
                    },
                    "position": {
                        "description": "column order",
                        "example": 1,
                        "nullable": true,
                        "type": "integer"
                    },
                    "read_only": {
                        "description": "won't be editable in the gradebook UI",
                        "example": true,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "teacher_notes": {
                        "description": "When true, this column's visibility will be toggled in the Gradebook when a user selects to show or hide notes",
                        "example": false,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "title": {
                        "description": "header text",
                        "example": "Stuff",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "Day": {
                "properties": {
                    "date": {
                        "description": "the date represented by this entry",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "graders": {
                        "description": "an array of the graders who were responsible for the submissions in this response. the submissions are grouped according to the person who graded them and the assignment they were submitted for.",
                        "nullable": true,
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "DiscussionTopic": {
                "description": "A discussion topic",
                "properties": {
                    "allow_rating": {
                        "description": "Whether or not users can rate entries in this topic.",
                        "example": true,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "assignment_id": {
                        "description": "The unique identifier of the assignment if the topic is for grading, otherwise null.",
                        "nullable": true,
                        "type": "integer"
                    },
                    "attachments": {
                        "description": "Array of file attachments.",
                        "items": {
                            "$ref": "#/components/schemas/FileAttachment"
                        },
                        "nullable": true,
                        "type": "array"
                    },
                    "delayed_post_at": {
                        "description": "The datetime to publish the topic (if not right away).",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "discussion_subentry_count": {
                        "description": "The count of entries in the topic.",
                        "example": 0,
                        "nullable": true,
                        "type": "integer"
                    },
                    "discussion_type": {
                        "description": "The type of discussion. Values are 'side_comment', for discussions that only allow one level of nested comments, and 'threaded' for fully threaded discussions.",
                        "example": "side_comment",
                        "nullable": true,
                        "type": "string"
                    },
                    "group_category_id": {
                        "description": "The unique identifier of the group category if the topic is a group discussion, otherwise null.",
                        "nullable": true,
                        "type": "integer"
                    },
                    "group_topic_children": {
                        "description": "An array of group discussions the user is a part of. Fields include: id, group_id",
                        "example": [
                            {
                                "group_id": 1,
                                "id": 5
                            },
                            {
                                "group_id": 5,
                                "id": 7
                            },
                            {
                                "group_id": 4,
                                "id": 10
                            }
                        ],
                        "items": {
                            "properties": {},
                            "type": "object"
                        },
                        "nullable": true,
                        "type": "array"
                    },
                    "html_url": {
                        "description": "The URL to the discussion topic in canvas.",
                        "example": "https://<canvas>/courses/1/discussion_topics/2",
                        "nullable": true,
                        "type": "string"
                    },
                    "id": {
                        "description": "The ID of this topic.",
                        "example": 1,
                        "type": "integer"
                    },
                    "last_reply_at": {
                        "description": "The datetime for when the last reply was in the topic.",
                        "example": "2037-07-28T19:38:31.000Z",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "lock_at": {
                        "description": "The datetime to lock the topic (if ever).",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "lock_explanation": {
                        "description": "(Optional) An explanation of why this is locked for the user. Present when locked_for_user is true.",
                        "example": "This discussion is locked until September 1 at 12:00am",
                        "nullable": true,
                        "type": "string"
                    },
                    "lock_info": {
                        "$ref": "#/components/schemas/LockInfo"
                    },
                    "locked": {
                        "description": "Whether or not the discussion is 'closed for comments'.",
                        "example": false,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "locked_for_user": {
                        "description": "Whether or not this is locked for the user.",
                        "example": true,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "message": {
                        "description": "The HTML content of the message body.",
                        "example": "<p>content here</p>",
                        "nullable": true,
                        "type": "string"
                    },
                    "only_graders_can_rate": {
                        "description": "Whether or not grade permissions are required to rate entries.",
                        "example": true,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "permissions": {
                        "description": "The current user's permissions on this topic.",
                        "example": {
                            "attach": true
                        },
                        "nullable": true,
                        "properties": {},
                        "type": "object"
                    },
                    "pinned": {
                        "description": "Whether or not the discussion has been 'pinned' by an instructor",
                        "example": false,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "podcast_url": {
                        "description": "If the topic is a podcast topic this is the feed url for the current user.",
                        "example": "/feeds/topics/1/enrollment_1XAcepje4u228rt4mi7Z1oFbRpn3RAkTzuXIGOPe.rss",
                        "nullable": true,
                        "type": "string"
                    },
                    "posted_at": {
                        "description": "The datetime the topic was posted. If it is null it hasn't been posted yet. (see delayed_post_at)",
                        "example": "2037-07-21T13:29:31.000Z",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "published": {
                        "description": "Whether this discussion topic is published (true) or draft state (false)",
                        "example": true,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "read_state": {
                        "description": "The read_state of the topic for the current user, 'read' or 'unread'.",
                        "example": "read",
                        "nullable": true,
                        "type": "string"
                    },
                    "require_initial_post": {
                        "description": "If true then a user may not respond to other replies until that user has made an initial reply. Defaults to false.",
                        "example": false,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "root_topic_id": {
                        "description": "If the topic is for grading and a group assignment this will point to the original topic in the course.",
                        "nullable": true,
                        "type": "integer"
                    },
                    "sort_by_rating": {
                        "description": "Whether or not entries should be sorted by rating.",
                        "example": true,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "subscribed": {
                        "description": "Whether or not the current user is subscribed to this topic.",
                        "example": true,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "subscription_hold": {
                        "description": "(Optional) Why the user cannot subscribe to this topic. Only one reason will be returned even if multiple apply. Can be one of: 'initial_post_required': The user must post a reply first; 'not_in_group_set': The user is not in the group set for this graded group discussion; 'not_in_group': The user is not in this topic's group; 'topic_is_announcement': This topic is an announcement",
                        "example": "not_in_group_set",
                        "nullable": true,
                        "type": "string"
                    },
                    "title": {
                        "description": "The topic title.",
                        "example": "Topic 1",
                        "nullable": true,
                        "type": "string"
                    },
                    "topic_children": {
                        "description": "DEPRECATED An array of topic_ids for the group discussions the user is a part of.",
                        "example": [
                            5,
                            7,
                            10
                        ],
                        "items": {
                            "type": "integer"
                        },
                        "nullable": true,
                        "type": "array"
                    },
                    "unread_count": {
                        "description": "The count of unread entries of this topic for the current user.",
                        "example": 0,
                        "nullable": true,
                        "type": "integer"
                    },
                    "user_can_see_posts": {
                        "description": "Whether or not posts in this topic are visible to the user.",
                        "example": true,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "user_name": {
                        "description": "The username of the topic creator.",
                        "example": "User Name",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "DiscussionTopicNullable": {
                "nullable": true,
                "description": "A discussion topic",
                "properties": {
                    "allow_rating": {
                        "description": "Whether or not users can rate entries in this topic.",
                        "example": true,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "assignment_id": {
                        "description": "The unique identifier of the assignment if the topic is for grading, otherwise null.",
                        "nullable": true,
                        "type": "integer"
                    },
                    "attachments": {
                        "description": "Array of file attachments.",
                        "items": {
                            "$ref": "#/components/schemas/FileAttachment"
                        },
                        "nullable": true,
                        "type": "array"
                    },
                    "delayed_post_at": {
                        "description": "The datetime to publish the topic (if not right away).",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "discussion_subentry_count": {
                        "description": "The count of entries in the topic.",
                        "example": 0,
                        "nullable": true,
                        "type": "integer"
                    },
                    "discussion_type": {
                        "description": "The type of discussion. Values are 'side_comment', for discussions that only allow one level of nested comments, and 'threaded' for fully threaded discussions.",
                        "example": "side_comment",
                        "nullable": true,
                        "type": "string"
                    },
                    "group_category_id": {
                        "description": "The unique identifier of the group category if the topic is a group discussion, otherwise null.",
                        "nullable": true,
                        "type": "integer"
                    },
                    "group_topic_children": {
                        "description": "An array of group discussions the user is a part of. Fields include: id, group_id",
                        "example": [
                            {
                                "group_id": 1,
                                "id": 5
                            },
                            {
                                "group_id": 5,
                                "id": 7
                            },
                            {
                                "group_id": 4,
                                "id": 10
                            }
                        ],
                        "items": {
                            "properties": {},
                            "type": "object"
                        },
                        "nullable": true,
                        "type": "array"
                    },
                    "html_url": {
                        "description": "The URL to the discussion topic in canvas.",
                        "example": "https://<canvas>/courses/1/discussion_topics/2",
                        "nullable": true,
                        "type": "string"
                    },
                    "id": {
                        "description": "The ID of this topic.",
                        "example": 1,
                        "type": "integer"
                    },
                    "last_reply_at": {
                        "description": "The datetime for when the last reply was in the topic.",
                        "example": "2037-07-28T19:38:31.000Z",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "lock_at": {
                        "description": "The datetime to lock the topic (if ever).",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "lock_explanation": {
                        "description": "(Optional) An explanation of why this is locked for the user. Present when locked_for_user is true.",
                        "example": "This discussion is locked until September 1 at 12:00am",
                        "nullable": true,
                        "type": "string"
                    },
                    "lock_info": {
                        "$ref": "#/components/schemas/LockInfo"
                    },
                    "locked": {
                        "description": "Whether or not the discussion is 'closed for comments'.",
                        "example": false,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "locked_for_user": {
                        "description": "Whether or not this is locked for the user.",
                        "example": true,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "message": {
                        "description": "The HTML content of the message body.",
                        "example": "<p>content here</p>",
                        "nullable": true,
                        "type": "string"
                    },
                    "only_graders_can_rate": {
                        "description": "Whether or not grade permissions are required to rate entries.",
                        "example": true,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "permissions": {
                        "description": "The current user's permissions on this topic.",
                        "example": {
                            "attach": true
                        },
                        "nullable": true,
                        "properties": {},
                        "type": "object"
                    },
                    "pinned": {
                        "description": "Whether or not the discussion has been 'pinned' by an instructor",
                        "example": false,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "podcast_url": {
                        "description": "If the topic is a podcast topic this is the feed url for the current user.",
                        "example": "/feeds/topics/1/enrollment_1XAcepje4u228rt4mi7Z1oFbRpn3RAkTzuXIGOPe.rss",
                        "nullable": true,
                        "type": "string"
                    },
                    "posted_at": {
                        "description": "The datetime the topic was posted. If it is null it hasn't been posted yet. (see delayed_post_at)",
                        "example": "2037-07-21T13:29:31.000Z",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "published": {
                        "description": "Whether this discussion topic is published (true) or draft state (false)",
                        "example": true,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "read_state": {
                        "description": "The read_state of the topic for the current user, 'read' or 'unread'.",
                        "example": "read",
                        "nullable": true,
                        "type": "string"
                    },
                    "require_initial_post": {
                        "description": "If true then a user may not respond to other replies until that user has made an initial reply. Defaults to false.",
                        "example": false,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "root_topic_id": {
                        "description": "If the topic is for grading and a group assignment this will point to the original topic in the course.",
                        "nullable": true,
                        "type": "integer"
                    },
                    "sort_by_rating": {
                        "description": "Whether or not entries should be sorted by rating.",
                        "example": true,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "subscribed": {
                        "description": "Whether or not the current user is subscribed to this topic.",
                        "example": true,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "subscription_hold": {
                        "description": "(Optional) Why the user cannot subscribe to this topic. Only one reason will be returned even if multiple apply. Can be one of: 'initial_post_required': The user must post a reply first; 'not_in_group_set': The user is not in the group set for this graded group discussion; 'not_in_group': The user is not in this topic's group; 'topic_is_announcement': This topic is an announcement",
                        "example": "not_in_group_set",
                        "nullable": true,
                        "type": "string"
                    },
                    "title": {
                        "description": "The topic title.",
                        "example": "Topic 1",
                        "nullable": true,
                        "type": "string"
                    },
                    "topic_children": {
                        "description": "DEPRECATED An array of topic_ids for the group discussions the user is a part of.",
                        "example": [
                            5,
                            7,
                            10
                        ],
                        "items": {
                            "type": "integer"
                        },
                        "nullable": true,
                        "type": "array"
                    },
                    "unread_count": {
                        "description": "The count of unread entries of this topic for the current user.",
                        "example": 0,
                        "nullable": true,
                        "type": "integer"
                    },
                    "user_can_see_posts": {
                        "description": "Whether or not posts in this topic are visible to the user.",
                        "example": true,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "user_name": {
                        "description": "The username of the topic creator.",
                        "example": "User Name",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "Enrollment": {
                "properties": {
                    "associated_user_id": {
                        "description": "The unique id of the associated user. Will be null unless type is ObserverEnrollment.",
                        "nullable": true,
                        "type": "integer"
                    },
                    "computed_current_grade": {
                        "description": "optional: The letter grade equivalent of computed_current_score, if available. (applies only to student enrollments, and only available in course endpoints)",
                        "example": "A-",
                        "nullable": true,
                        "type": "string"
                    },
                    "computed_current_score": {
                        "description": "optional: The student's score in the course, ignoring ungraded assignments. (applies only to student enrollments, and only available in course endpoints)",
                        "example": 90.25,
                        "nullable": true,
                        "type": "number"
                    },
                    "computed_final_grade": {
                        "description": "optional: The letter grade equivalent of computed_final_score, if available. (applies only to student enrollments, and only available in course endpoints)",
                        "example": "B-",
                        "nullable": true,
                        "type": "string"
                    },
                    "computed_final_score": {
                        "description": "optional: The student's score in the course including ungraded assignments with a score of 0. (applies only to student enrollments, and only available in course endpoints)",
                        "example": 80.67,
                        "nullable": true,
                        "type": "number"
                    },
                    "course_id": {
                        "description": "The unique id of the course.",
                        "example": 1,
                        "nullable": true,
                        "type": "integer"
                    },
                    "course_integration_id": {
                        "description": "The Course Integration ID in which the enrollment is associated. This field is only included if the user has permission to view SIS information.",
                        "example": "SHEL93921",
                        "nullable": true,
                        "type": "string"
                    },
                    "course_section_id": {
                        "description": "The unique id of the user's section.",
                        "example": 1,
                        "nullable": true,
                        "type": "integer"
                    },
                    "created_at": {
                        "description": "The created time of the enrollment, in ISO8601 format.",
                        "example": "2012-04-18T23:08:51.000Z",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "current_grading_period_id": {
                        "description": "optional: The id of the currently active grading period, if one exists. If the course the enrollment belongs to does not have grading periods, or if no currently active grading period exists, the value will be null. (applies only to student enrollments, and only available in course endpoints)",
                        "example": 5,
                        "nullable": true,
                        "type": "integer"
                    },
                    "current_grading_period_title": {
                        "description": "optional: The name of the currently active grading period, if one exists. If the course the enrollment belongs to does not have grading periods, or if no currently active grading period exists, the value will be null. (applies only to student enrollments, and only available in course endpoints)",
                        "example": "Fall Grading Period",
                        "nullable": true,
                        "type": "string"
                    },
                    "current_period_computed_current_grade": {
                        "description": "optional: The letter grade equivalent of current_period_computed_current_score, if available. If the course the enrollment belongs to does not have grading periods, or if no currently active grading period exists, the value will be null. (applies only to student enrollments, and only available in course endpoints)",
                        "example": "A",
                        "nullable": true,
                        "type": "string"
                    },
                    "current_period_computed_current_score": {
                        "description": "optional: The student's score in the course for the current grading period, ignoring ungraded assignments. If the course the enrollment belongs to does not have grading periods, or if no currently active grading period exists, the value will be null. (applies only to student enrollments, and only available in course endpoints)",
                        "example": 95.8,
                        "nullable": true,
                        "type": "number"
                    },
                    "current_period_computed_final_grade": {
                        "description": "optional: The letter grade equivalent of current_period_computed_final_score, if available. If the course the enrollment belongs to does not have grading periods, or if no currently active grading period exists, the value will be null. (applies only to student enrollments, and only available in course endpoints)",
                        "example": "B",
                        "nullable": true,
                        "type": "string"
                    },
                    "current_period_computed_final_score": {
                        "description": "optional: The student's score in the course for the current grading period, including ungraded assignments with a score of 0. If the course the enrollment belongs to does not have grading periods, or if no currently active grading period exists, the value will be null. (applies only to student enrollments, and only available in course endpoints)",
                        "example": 85.25,
                        "nullable": true,
                        "type": "number"
                    },
                    "current_period_override_grade": {
                        "description": "The user's override grade for the current grading period.",
                        "nullable": true,
                        "type": "string"
                    },
                    "current_period_override_score": {
                        "description": "The user's override score for the current grading period.",
                        "nullable": true,
                        "type": "number"
                    },
                    "current_period_unposted_current_grade": {
                        "description": "optional: The letter grade equivalent of current_period_unposted_current_score, if available. Only included if user has permission to view this grade, typically teachers, TAs, and admins. If the course the enrollment belongs to does not have grading periods, or if no currently active grading period exists, the value will be null. (applies only to student enrollments, and only available in course endpoints)",
                        "example": "A",
                        "nullable": true,
                        "type": "string"
                    },
                    "current_period_unposted_current_score": {
                        "description": "optional: The student's score in the course for the current grading period, including muted/unposted assignments. Only included if user has permission to view this score, typically teachers, TAs, and admins. If the course the enrollment belongs to does not have grading periods, or if no currently active grading period exists, the value will be null. (applies only to student enrollments, and only available in course endpoints)",
                        "example": 95.8,
                        "nullable": true,
                        "type": "number"
                    },
                    "current_period_unposted_final_grade": {
                        "description": "optional: The letter grade equivalent of current_period_unposted_final_score, if available. Only included if user has permission to view this grade, typically teachers, TAs, and admins. If the course the enrollment belongs to does not have grading periods, or if no currently active grading period exists, the value will be null. (applies only to student enrollments, and only available in course endpoints)",
                        "example": "B",
                        "nullable": true,
                        "type": "string"
                    },
                    "current_period_unposted_final_score": {
                        "description": "optional: The student's score in the course for the current grading period, including muted/unposted assignments and including ungraded assignments with a score of 0. Only included if user has permission to view this score, typically teachers, TAs, and admins. If the course the enrollment belongs to does not have grading periods, or if no currently active grading period exists, the value will be null. (applies only to student enrollments, and only available in course endpoints)",
                        "example": 85.25,
                        "nullable": true,
                        "type": "number"
                    },
                    "end_at": {
                        "description": "The end time of the enrollment, in ISO8601 format.",
                        "example": "2012-04-18T23:08:51.000Z",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "enrollment_state": {
                        "description": "The state of the user's enrollment in the course.",
                        "example": "active",
                        "nullable": true,
                        "type": "string"
                    },
                    "grades": {
                        "$ref": "#/components/schemas/Grade"
                    },
                    "has_grading_periods": {
                        "description": "optional: Indicates whether the course the enrollment belongs to has grading periods set up. (applies only to student enrollments, and only available in course endpoints)",
                        "example": true,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "html_url": {
                        "description": "The URL to the Canvas web UI page for this course enrollment.",
                        "example": "https://...",
                        "nullable": true,
                        "type": "string"
                    },
                    "id": {
                        "description": "The ID of the enrollment.",
                        "example": 1,
                        "type": "integer"
                    },
                    "last_activity_at": {
                        "description": "The last activity time of the user for the enrollment, in ISO8601 format.",
                        "example": "2012-04-18T23:08:51.000Z",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "last_attended_at": {
                        "description": "The last attended date of the user for the enrollment in a course, in ISO8601 format.",
                        "example": "2012-04-18T23:08:51.000Z",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "limit_privileges_to_course_section": {
                        "description": "User can only access his or her own course section.",
                        "example": true,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "override_grade": {
                        "description": "The user's override grade for the course.",
                        "nullable": true,
                        "type": "string"
                    },
                    "override_score": {
                        "description": "The user's override score for the course.",
                        "nullable": true,
                        "type": "number"
                    },
                    "role": {
                        "description": "The enrollment role, for course-level permissions. This field will match `type` if the enrollment role has not been customized.",
                        "example": "StudentEnrollment",
                        "nullable": true,
                        "type": "string"
                    },
                    "role_id": {
                        "description": "The id of the enrollment role.",
                        "example": 1,
                        "nullable": true,
                        "type": "integer"
                    },
                    "root_account_id": {
                        "description": "The unique id of the user's account.",
                        "example": 1,
                        "nullable": true,
                        "type": "integer"
                    },
                    "section_integration_id": {
                        "description": "The Section Integration ID in which the enrollment is associated. This field is only included if the user has permission to view SIS information.",
                        "example": "SHEL93921",
                        "nullable": true,
                        "type": "string"
                    },
                    "sis_account_id": {
                        "description": "The SIS Account ID in which the enrollment is associated. Only displayed if present. This field is only included if the user has permission to view SIS information.",
                        "example": "SHEL93921",
                        "nullable": true,
                        "type": "string"
                    },
                    "sis_course_id": {
                        "description": "The SIS Course ID in which the enrollment is associated. Only displayed if present. This field is only included if the user has permission to view SIS information.",
                        "example": "SHEL93921",
                        "nullable": true,
                        "type": "string"
                    },
                    "sis_import_id": {
                        "description": "The unique identifier for the SIS import. This field is only included if the user has permission to manage SIS information.",
                        "example": 83,
                        "nullable": true,
                        "type": "integer"
                    },
                    "sis_section_id": {
                        "description": "The SIS Section ID in which the enrollment is associated. Only displayed if present. This field is only included if the user has permission to view SIS information.",
                        "example": "SHEL93921",
                        "nullable": true,
                        "type": "string"
                    },
                    "sis_user_id": {
                        "description": "The SIS User ID in which the enrollment is associated. Only displayed if present. This field is only included if the user has permission to view SIS information.",
                        "example": "SHEL93921",
                        "nullable": true,
                        "type": "string"
                    },
                    "start_at": {
                        "description": "The start time of the enrollment, in ISO8601 format.",
                        "example": "2012-04-18T23:08:51.000Z",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "total_activity_time": {
                        "description": "The total activity time of the user for the enrollment, in seconds.",
                        "example": 260,
                        "nullable": true,
                        "type": "integer"
                    },
                    "totals_for_all_grading_periods_option": {
                        "description": "optional: Indicates whether the course the enrollment belongs to has the Display Totals for 'All Grading Periods' feature enabled. (applies only to student enrollments, and only available in course endpoints)",
                        "example": true,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "type": {
                        "description": "The enrollment type. One of 'StudentEnrollment', 'TeacherEnrollment', 'TaEnrollment', 'DesignerEnrollment', 'ObserverEnrollment'.",
                        "example": "StudentEnrollment",
                        "nullable": true,
                        "type": "string"
                    },
                    "unposted_current_grade": {
                        "description": "The user's current grade in the class including muted/unposted assignments. Only included if user has permissions to view this grade, typically teachers, TAs, and admins.",
                        "nullable": true,
                        "type": "string"
                    },
                    "unposted_current_score": {
                        "description": "The user's current score in the class including muted/unposted assignments. Only included if user has permissions to view this score, typically teachers, TAs, and admins..",
                        "nullable": true,
                        "type": "string"
                    },
                    "unposted_final_grade": {
                        "description": "The user's final grade for the class including muted/unposted assignments. Only included if user has permissions to view this grade, typically teachers, TAs, and admins..",
                        "nullable": true,
                        "type": "string"
                    },
                    "unposted_final_score": {
                        "description": "The user's final score for the class including muted/unposted assignments. Only included if user has permissions to view this score, typically teachers, TAs, and admins..",
                        "nullable": true,
                        "type": "number"
                    },
                    "updated_at": {
                        "description": "The updated time of the enrollment, in ISO8601 format.",
                        "example": "2012-04-18T23:08:51.000Z",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "user": {
                        "$ref": "#/components/schemas/UserNullable"
                    },
                    "user_id": {
                        "description": "The unique id of the user.",
                        "example": 1,
                        "nullable": true,
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "EnrollmentTerm": {
                "properties": {
                    "end_at": {
                        "description": "The datetime of the end of the term.",
                        "example": "2014-05-16T09:00:00.000Z",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "id": {
                        "description": "The unique identifier for the enrollment term.",
                        "example": 1,
                        "type": "integer"
                    },
                    "name": {
                        "description": "The name of the term.",
                        "example": "Spring 2014",
                        "nullable": true,
                        "type": "string"
                    },
                    "overrides": {
                        "description": "Term date overrides for specific enrollment types",
                        "example": {
                            "StudentEnrollment": {
                                "end_at": "2014-05-14T05:00:00-04:0",
                                "start_at": "2014-01-07T13:00:00.000Z"
                            }
                        },
                        "nullable": true,
                        "properties": {},
                        "type": "object"
                    },
                    "sis_import_id": {
                        "description": "the unique identifier for the SIS import. This field is only included if the user has permission to manage SIS information.",
                        "example": 34,
                        "nullable": true,
                        "type": "integer"
                    },
                    "sis_term_id": {
                        "description": "The SIS id of the term. Only included if the user has permission to view SIS information.",
                        "example": "Sp2014",
                        "nullable": true,
                        "type": "string"
                    },
                    "start_at": {
                        "description": "The datetime of the start of the term.",
                        "example": "2014-01-06T13:00:00.000Z",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "workflow_state": {
                        "description": "The state of the term. Can be 'active' or 'deleted'.",
                        "example": "active",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "EpubExport": {
                "properties": {
                    "attachment": {
                        "$ref": "#/components/schemas/FileNullable"
                    },
                    "created_at": {
                        "description": "the date and time this export was requested",
                        "example": "2014-01-01T00:00:00.000Z",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "id": {
                        "description": "the unique identifier for the export",
                        "example": 101,
                        "type": "integer"
                    },
                    "progress_url": {
                        "description": "The api endpoint for polling the current progress",
                        "example": "https://example.com/api/v1/progress/4",
                        "nullable": true,
                        "type": "string"
                    },
                    "user_id": {
                        "description": "The ID of the user who started the export",
                        "example": 4,
                        "nullable": true,
                        "type": "integer"
                    },
                    "workflow_state": {
                        "description": "Current state of the ePub export: created exporting exported generating generated failed",
                        "example": "exported",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "EpubExportNullable": {
                "nullable": true,
                "properties": {
                    "attachment": {
                        "$ref": "#/components/schemas/FileNullable"
                    },
                    "created_at": {
                        "description": "the date and time this export was requested",
                        "example": "2014-01-01T00:00:00.000Z",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "id": {
                        "description": "the unique identifier for the export",
                        "example": 101,
                        "type": "integer"
                    },
                    "progress_url": {
                        "description": "The api endpoint for polling the current progress",
                        "example": "https://example.com/api/v1/progress/4",
                        "nullable": true,
                        "type": "string"
                    },
                    "user_id": {
                        "description": "The ID of the user who started the export",
                        "example": 4,
                        "nullable": true,
                        "type": "integer"
                    },
                    "workflow_state": {
                        "description": "Current state of the ePub export: created exporting exported generating generated failed",
                        "example": "exported",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "ExternalFeed": {
                "properties": {
                    "created_at": {
                        "description": "When this external feed was added to Canvas",
                        "example": "2012-06-01T06:00:00.000Z",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "display_name": {
                        "description": "The title of the feed, pulled from the feed itself. If the feed hasn't yet been pulled, a temporary name will be synthesized based on the URL",
                        "example": "My Blog",
                        "nullable": true,
                        "type": "string"
                    },
                    "header_match": {
                        "description": "If not null, only feed entries whose title contains this string will trigger new posts in Canvas",
                        "example": "pattern",
                        "nullable": true,
                        "type": "string"
                    },
                    "id": {
                        "description": "The ID of the feed",
                        "example": 5,
                        "type": "integer"
                    },
                    "url": {
                        "description": "The HTTP/HTTPS URL to the feed",
                        "example": "http://example.com/myblog.rss",
                        "nullable": true,
                        "type": "string"
                    },
                    "verbosity": {
                        "description": "The verbosity setting determines how much of the feed's content is imported into Canvas as part of the posting. 'link_only' means that only the title and a link to the item. 'truncate' means that a summary of the first portion of the item body will be used. 'full' means that the full item body will be used.",
                        "example": "truncate",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "ExternalToolTagAttributes": {
                "nullable": true,
                "properties": {
                    "new_tab": {
                        "description": "Whether or not there is a new tab for the external tool",
                        "example": false,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "resource_link_id": {
                        "description": "the identifier for this tool_tag",
                        "example": "ab81173af98b8c33e66a",
                        "nullable": true,
                        "type": "string"
                    },
                    "url": {
                        "description": "URL to the external tool",
                        "example": "http://instructure.com",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "Favorite": {
                "properties": {
                    "context_id": {
                        "description": "The ID of the object the Favorite refers to",
                        "example": 1170,
                        "nullable": true,
                        "type": "integer"
                    },
                    "context_type": {
                        "description": "The type of the object the Favorite refers to (currently, only 'Course' is supported)",
                        "example": "Course",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "Feature": {
                "properties": {
                    "applies_to": {
                        "description": "The type of object the feature applies to (RootAccount, Account, Course, or User):\n * RootAccount features may only be controlled by flags on root accounts.\n * Account features may be controlled by flags on accounts and their parent accounts.\n * Course features may be controlled by flags on courses and their parent accounts.\n * User features may be controlled by flags on users and site admin only.",
                        "example": "Course",
                        "nullable": true,
                        "type": "string"
                    },
                    "autoexpand": {
                        "description": "Whether the details of the feature are autoexpanded on page load vs. the user clicking to expand.",
                        "example": true,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "beta": {
                        "description": "Whether the feature is a beta feature. If true, the feature may not be fully polished and may be subject to change in the future.",
                        "example": true,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "development": {
                        "description": "Whether the feature is in active development. Features in this state are only visible in test and beta instances and are not yet available for production use.",
                        "example": false,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "display_name": {
                        "description": "The user-visible name of the feature",
                        "example": "Fancy Wickets",
                        "nullable": true,
                        "type": "string"
                    },
                    "enable_at": {
                        "description": "The date this feature will be globally enabled, or null if this is not planned. (This information is subject to change.)",
                        "example": "2014-01-01T00:00:00.000Z",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "feature_flag": {
                        "$ref": "#/components/schemas/FeatureFlagNullable"
                    },
                    "name": {
                        "description": "The symbolic name of the feature, used in FeatureFlags",
                        "example": "fancy_wickets",
                        "nullable": true,
                        "type": "string"
                    },
                    "release_notes_url": {
                        "description": "A URL to the release notes describing the feature",
                        "example": "http://canvas.example.com/release_notes#fancy_wickets",
                        "nullable": true,
                        "type": "string"
                    },
                    "root_opt_in": {
                        "description": "If true, a feature that is 'allowed' globally will be 'off' by default in root accounts. Otherwise, root accounts inherit the global 'allowed' setting, which allows sub-accounts and courses to turn features on with no root account action.",
                        "example": true,
                        "nullable": true,
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "FeatureFlag": {
                "properties": {
                    "context_id": {
                        "description": "The id of the object to which this flag applies (This field is not present if this FeatureFlag represents the global Canvas default)",
                        "example": 1038,
                        "nullable": true,
                        "type": "integer"
                    },
                    "context_type": {
                        "description": "The type of object to which this flag applies (Account, Course, or User). (This field is not present if this FeatureFlag represents the global Canvas default)",
                        "example": "Account",
                        "nullable": true,
                        "type": "string"
                    },
                    "feature": {
                        "description": "The feature this flag controls",
                        "example": "fancy_wickets",
                        "nullable": true,
                        "type": "string"
                    },
                    "locked": {
                        "description": "If set, this feature flag cannot be changed in the caller's context because the flag is set 'off' or 'on' in a higher context",
                        "example": false,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "state": {
                        "description": "The policy for the feature at this context.  can be 'off', 'allowed', or 'on'.",
                        "example": "allowed",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "FeatureFlagNullable": {
                "nullable": true,
                "properties": {
                    "context_id": {
                        "description": "The id of the object to which this flag applies (This field is not present if this FeatureFlag represents the global Canvas default)",
                        "example": 1038,
                        "nullable": true,
                        "type": "integer"
                    },
                    "context_type": {
                        "description": "The type of object to which this flag applies (Account, Course, or User). (This field is not present if this FeatureFlag represents the global Canvas default)",
                        "example": "Account",
                        "nullable": true,
                        "type": "string"
                    },
                    "feature": {
                        "description": "The feature this flag controls",
                        "example": "fancy_wickets",
                        "nullable": true,
                        "type": "string"
                    },
                    "locked": {
                        "description": "If set, this feature flag cannot be changed in the caller's context because the flag is set 'off' or 'on' in a higher context",
                        "example": false,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "state": {
                        "description": "The policy for the feature at this context.  can be 'off', 'allowed', or 'on'.",
                        "example": "allowed",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "FederatedAttributesConfig": {
                "description": "A mapping of Canvas attribute names to attribute names that a provider may send, in order to update the value of these attributes when a user logs in. The values can be a FederatedAttributeConfig, or a raw string corresponding to the \"attribute\" property of a FederatedAttributeConfig. In responses, full FederatedAttributeConfig objects are returned if JIT provisioning is enabled, otherwise just the attribute names are returned.",
                "nullable": true,
                "properties": {
                    "admin_roles": {
                        "description": "A comma separated list of role names to grant to the user. Note that these only apply at the root account level, and not sub-accounts. If the attribute is not marked for provisioning only, the user will also be removed from any other roles they currently hold that are not still specified by the IdP.",
                        "nullable": true,
                        "type": "string"
                    },
                    "display_name": {
                        "description": "The full display name of the user",
                        "nullable": true,
                        "type": "string"
                    },
                    "email": {
                        "description": "The user's e-mail address",
                        "nullable": true,
                        "type": "string"
                    },
                    "given_name": {
                        "description": "The first, or given, name of the user",
                        "nullable": true,
                        "type": "string"
                    },
                    "integration_id": {
                        "description": "The secondary unique identifier for SIS purposes",
                        "nullable": true,
                        "type": "string"
                    },
                    "locale": {
                        "description": "The user's preferred locale/language",
                        "nullable": true,
                        "type": "string"
                    },
                    "name": {
                        "description": "The full name of the user",
                        "nullable": true,
                        "type": "string"
                    },
                    "sis_user_id": {
                        "description": "The unique SIS identifier",
                        "nullable": true,
                        "type": "string"
                    },
                    "sortable_name": {
                        "description": "The full name of the user for sorting purposes",
                        "nullable": true,
                        "type": "string"
                    },
                    "surname": {
                        "description": "The surname, or last name, of the user",
                        "nullable": true,
                        "type": "string"
                    },
                    "timezone": {
                        "description": "The user's preferred time zone",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "File": {
                "properties": {
                    "content-type": {
                        "example": "text/plain",
                        "nullable": true,
                        "type": "string"
                    },
                    "created_at": {
                        "example": "2012-07-06T14:58:50.000Z",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "display_name": {
                        "example": "file.txt",
                        "nullable": true,
                        "type": "string"
                    },
                    "id": {
                        "example": 569,
                        "type": "integer"
                    },
                    "size": {
                        "example": 4,
                        "nullable": true,
                        "type": "integer"
                    },
                    "updated_at": {
                        "example": "2012-07-06T14:58:50.000Z",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "url": {
                        "example": "http://www.example.com/files/569/download?download_frd=1&verifier=c6HdZmxOZa0Fiin2cbvZeI8I5ry7yqD7RChQzb6P",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "FileNullable": {
                "nullable": true,
                "properties": {
                    "content-type": {
                        "example": "text/plain",
                        "nullable": true,
                        "type": "string"
                    },
                    "created_at": {
                        "example": "2012-07-06T14:58:50.000Z",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "display_name": {
                        "example": "file.txt",
                        "nullable": true,
                        "type": "string"
                    },
                    "id": {
                        "example": 569,
                        "type": "integer"
                    },
                    "size": {
                        "example": 4,
                        "nullable": true,
                        "type": "integer"
                    },
                    "updated_at": {
                        "example": "2012-07-06T14:58:50.000Z",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "url": {
                        "example": "http://www.example.com/files/569/download?download_frd=1&verifier=c6HdZmxOZa0Fiin2cbvZeI8I5ry7yqD7RChQzb6P",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "FileAttachment": {
                "description": "A file attachment",
                "properties": {
                    "content-type": {
                        "example": "unknown/unknown",
                        "nullable": true,
                        "type": "string"
                    },
                    "display_name": {
                        "example": "content.txt",
                        "nullable": true,
                        "type": "string"
                    },
                    "filename": {
                        "example": "content.txt",
                        "nullable": true,
                        "type": "string"
                    },
                    "url": {
                        "example": "http://www.example.com/courses/1/files/1/download",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "Folder": {
                "properties": {
                    "context_id": {
                        "example": 1401,
                        "nullable": true,
                        "type": "integer"
                    },
                    "context_type": {
                        "example": "Course",
                        "nullable": true,
                        "type": "string"
                    },
                    "created_at": {
                        "example": "2012-07-06T14:58:50.000Z",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "files_count": {
                        "example": 0,
                        "nullable": true,
                        "type": "integer"
                    },
                    "files_url": {
                        "example": "https://www.example.com/api/v1/folders/2937/files",
                        "nullable": true,
                        "type": "string"
                    },
                    "folders_count": {
                        "example": 0,
                        "nullable": true,
                        "type": "integer"
                    },
                    "folders_url": {
                        "example": "https://www.example.com/api/v1/folders/2937/folders",
                        "nullable": true,
                        "type": "string"
                    },
                    "for_submissions": {
                        "description": "If true, indicates this is a read-only folder containing files submitted to assignments",
                        "example": false,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "full_name": {
                        "example": "course files/11folder",
                        "nullable": true,
                        "type": "string"
                    },
                    "hidden": {
                        "example": false,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "hidden_for_user": {
                        "example": false,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "id": {
                        "example": 2937,
                        "type": "integer"
                    },
                    "lock_at": {
                        "example": "2012-07-06T14:58:50.000Z",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "locked": {
                        "example": true,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "locked_for_user": {
                        "example": false,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "name": {
                        "example": "11folder",
                        "nullable": true,
                        "type": "string"
                    },
                    "parent_folder_id": {
                        "example": 2934,
                        "nullable": true,
                        "type": "integer"
                    },
                    "position": {
                        "example": 3,
                        "nullable": true,
                        "type": "integer"
                    },
                    "unlock_at": {
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "updated_at": {
                        "example": "2012-07-06T14:58:50.000Z",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "Grade": {
                "nullable": true,
                "properties": {
                    "current_grade": {
                        "description": "The user's current grade in the class. Only included if user has permissions to view this grade.",
                        "nullable": true,
                        "type": "string"
                    },
                    "current_score": {
                        "description": "The user's current score in the class. Only included if user has permissions to view this score.",
                        "nullable": true,
                        "type": "number"
                    },
                    "final_grade": {
                        "description": "The user's final grade for the class. Only included if user has permissions to view this grade.",
                        "nullable": true,
                        "type": "string"
                    },
                    "final_score": {
                        "description": "The user's final score for the class. Only included if user has permissions to view this score.",
                        "nullable": true,
                        "type": "number"
                    },
                    "html_url": {
                        "description": "The URL to the Canvas web UI page for the user's grades, if this is a student enrollment.",
                        "nullable": true,
                        "type": "string"
                    },
                    "unposted_current_grade": {
                        "description": "The user's current grade in the class including muted/unposted assignments. Only included if user has permissions to view this grade, typically teachers, TAs, and admins.",
                        "nullable": true,
                        "type": "string"
                    },
                    "unposted_current_score": {
                        "description": "The user's current score in the class including muted/unposted assignments. Only included if user has permissions to view this score, typically teachers, TAs, and admins..",
                        "nullable": true,
                        "type": "number"
                    },
                    "unposted_final_grade": {
                        "description": "The user's final grade for the class including muted/unposted assignments. Only included if user has permissions to view this grade, typically teachers, TAs, and admins..",
                        "nullable": true,
                        "type": "string"
                    },
                    "unposted_final_score": {
                        "description": "The user's final score for the class including muted/unposted assignments. Only included if user has permissions to view this score, typically teachers, TAs, and admins..",
                        "nullable": true,
                        "type": "number"
                    }
                },
                "type": "object"
            },
            "GradeChangeEvent": {
                "properties": {
                    "created_at": {
                        "description": "timestamp of the event",
                        "example": "2012-07-19T21:00:00.000Z",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "event_type": {
                        "description": "GradeChange event type",
                        "example": "grade_change",
                        "nullable": true,
                        "type": "string"
                    },
                    "excused_after": {
                        "description": "Boolean indicating whether the submission was excused after the change.",
                        "example": true,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "excused_before": {
                        "description": "Boolean indicating whether the submission was excused before the change.",
                        "example": false,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "grade_after": {
                        "description": "The grade after the change.",
                        "example": "8",
                        "nullable": true,
                        "type": "string"
                    },
                    "grade_before": {
                        "description": "The grade before the change.",
                        "example": "8",
                        "nullable": true,
                        "type": "string"
                    },
                    "graded_anonymously": {
                        "description": "Boolean indicating whether the student name was visible when the grade was given. Could be null if the grade change record was created before this feature existed.",
                        "example": true,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "id": {
                        "description": "ID of the event.",
                        "example": "e2b76430-27a5-0131-3ca1-48e0eb13f29b",
                        "type": "string"
                    },
                    "links": {
                        "$ref": "#/components/schemas/GradeChangeEventLinks"
                    },
                    "request_id": {
                        "description": "The unique request id of the request during the grade change.",
                        "example": "e2b76430-27a5-0131-3ca1-48e0eb13f29b",
                        "nullable": true,
                        "type": "string"
                    },
                    "version_number": {
                        "description": "Version Number of the grade change submission.",
                        "example": "1",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "GradeChangeEventLinks": {
                "nullable": true,
                "properties": {
                    "assignment": {
                        "description": "ID of the assignment associated with the event",
                        "example": 2319,
                        "nullable": true,
                        "type": "integer"
                    },
                    "course": {
                        "description": "ID of the course associated with the event. will match the context_id in the associated assignment if the context type for the assignment is a course",
                        "example": 2319,
                        "nullable": true,
                        "type": "integer"
                    },
                    "grader": {
                        "description": "ID of the grader associated with the event. will match the grader_id in the associated submission.",
                        "example": 2319,
                        "nullable": true,
                        "type": "integer"
                    },
                    "page_view": {
                        "description": "ID of the page view during the event if it exists.",
                        "example": "e2b76430-27a5-0131-3ca1-48e0eb13f29b",
                        "nullable": true,
                        "type": "string"
                    },
                    "student": {
                        "description": "ID of the student associated with the event. will match the user_id in the associated submission.",
                        "example": 2319,
                        "nullable": true,
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "Grader": {
                "properties": {
                    "assignments": {
                        "description": "the assignment groups for all submissions in this response that were graded by this user.  The details are not nested inside here, but the fact that an assignment is present here means that the grader did grade submissions for this assignment on the contextual date. You can use the id of a grader and of an assignment to make another API call to find all submissions for a grader/assignment combination on a given date.",
                        "example": [
                            1,
                            2,
                            3
                        ],
                        "items": {
                            "type": "integer"
                        },
                        "nullable": true,
                        "type": "array"
                    },
                    "id": {
                        "description": "the user_id of the user who graded the contained submissions",
                        "example": 27,
                        "type": "integer"
                    },
                    "name": {
                        "description": "the name of the user who graded the contained submissions",
                        "example": "Some User",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "GradingPeriod": {
                "properties": {
                    "close_date": {
                        "description": "Grades can only be changed before the close date of the grading period.",
                        "example": "2013-02-01T06:00:00.000Z",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "end_date": {
                        "description": "The end date of the grading period.",
                        "example": "2013-02-01T06:00:00.000Z",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "id": {
                        "description": "The unique identifier for the grading period.",
                        "type": "integer"
                    },
                    "is_closed": {
                        "description": "If true, the grading period's close_date has passed.",
                        "nullable": true,
                        "type": "boolean"
                    },
                    "start_date": {
                        "description": "The start date of the grading period.",
                        "example": "2013-02-01T06:00:00.000Z",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "title": {
                        "description": "The title for the grading period.",
                        "nullable": true,
                        "type": "string"
                    },
                    "weight": {
                        "description": "A weight value that contributes to the overall weight of a grading period set which is used to calculate how much assignments in this period contribute to the total grade.",
                        "nullable": true,
                        "type": "number"
                    }
                },
                "type": "object"
            },
            "GradingRules": {
                "nullable": true,
                "properties": {
                    "drop_highest": {
                        "description": "Number of highest scores to be dropped for each user.",
                        "example": 1,
                        "nullable": true,
                        "type": "integer"
                    },
                    "drop_lowest": {
                        "description": "Number of lowest scores to be dropped for each user.",
                        "example": 1,
                        "nullable": true,
                        "type": "integer"
                    },
                    "never_drop": {
                        "description": "Assignment IDs that should never be dropped.",
                        "example": [
                            33,
                            17,
                            24
                        ],
                        "items": {
                            "type": "integer"
                        },
                        "nullable": true,
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "GradingSchemeEntry": {
                "properties": {
                    "name": {
                        "description": "The name for an entry value within a GradingStandard that describes the range of the value",
                        "example": "A",
                        "nullable": true,
                        "type": "string"
                    },
                    "value": {
                        "description": "The value for the name of the entry within a GradingStandard.  The entry represents the lower bound of the range for the entry. This range includes the value up to the next entry in the GradingStandard, or 100 if there is no upper bound. The lowest value will have a lower bound range of 0.",
                        "nullable": true,
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "GradingStandard": {
                "properties": {
                    "context_id": {
                        "description": "the id for the context either the Account or Course id",
                        "example": 1,
                        "nullable": true,
                        "type": "integer"
                    },
                    "context_type": {
                        "description": "the context this standard is associated with, either 'Account' or 'Course'",
                        "example": "Account",
                        "nullable": true,
                        "type": "string"
                    },
                    "grading_scheme": {
                        "description": "A list of GradingSchemeEntry that make up the Grading Standard as an array of values with the scheme name and value",
                        "example": [
                            {
                                "name": "A",
                                "value": 0.9
                            },
                            {
                                "name": "B",
                                "value": 0.8
                            },
                            {
                                "name": "C",
                                "value": 0.7
                            },
                            {
                                "name": "D",
                                "value": 0.6
                            }
                        ],
                        "items": {
                            "$ref": "#/components/schemas/GradingSchemeEntry"
                        },
                        "nullable": true,
                        "type": "array"
                    },
                    "id": {
                        "description": "the id of the grading standard",
                        "example": 1,
                        "type": "integer"
                    },
                    "title": {
                        "description": "the title of the grading standard",
                        "example": "Account Standard",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "Group": {
                "properties": {
                    "avatar_url": {
                        "description": "The url of the group's avatar",
                        "example": "https://<canvas>/files/avatar_image.png",
                        "nullable": true,
                        "type": "string"
                    },
                    "context_type": {
                        "description": "The course or account that the group belongs to. The pattern here is that whatever the context_type is, there will be an _id field named after that type. So if instead context_type was 'account', the course_id field would be replaced by an account_id field.",
                        "example": "Course",
                        "nullable": true,
                        "type": "string"
                    },
                    "course_id": {
                        "example": 3,
                        "nullable": true,
                        "type": "integer"
                    },
                    "description": {
                        "description": "A description of the group. This is plain text.",
                        "nullable": true,
                        "type": "string"
                    },
                    "followed_by_user": {
                        "description": "Whether or not the current user is following this group.",
                        "example": false,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "group_category_id": {
                        "description": "The ID of the group's category.",
                        "example": 4,
                        "nullable": true,
                        "type": "integer"
                    },
                    "id": {
                        "description": "The ID of the group.",
                        "example": 17,
                        "type": "integer"
                    },
                    "is_public": {
                        "description": "Whether or not the group is public.  Currently only community groups can be made public.  Also, once a group has been set to public, it cannot be changed back to private.",
                        "example": false,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "join_level": {
                        "description": "How people are allowed to join the group.  For all groups except for community groups, the user must share the group's parent course or account.  For student organized or community groups, where a user can be a member of as many or few as they want, the applicable levels are 'parent_context_auto_join', 'parent_context_request', and 'invitation_only'.  For class groups, where students are divided up and should only be part of one group of the category, this value will always be 'invitation_only', and is not relevant. * If 'parent_context_auto_join', anyone can join and will be automatically accepted. * If 'parent_context_request', anyone  can request to join, which must be approved by a group moderator. * If 'invitation_only', only those how have received an invitation my join the group, by accepting that invitation.",
                        "example": "invitation_only",
                        "nullable": true,
                        "type": "string"
                    },
                    "members_count": {
                        "description": "The number of members currently in the group",
                        "example": 0,
                        "nullable": true,
                        "type": "integer"
                    },
                    "name": {
                        "description": "The display name of the group.",
                        "example": "Math Group 1",
                        "nullable": true,
                        "type": "string"
                    },
                    "permissions": {
                        "description": "optional: the permissions the user has for the group. returned only for a single group and include[]=permissions",
                        "example": {
                            "create_announcement": true,
                            "create_discussion_topic": true
                        },
                        "nullable": true,
                        "properties": {},
                        "type": "object"
                    },
                    "role": {
                        "description": "Certain types of groups have special role designations. Currently, these include: 'communities', 'student_organized', and 'imported'. Regular course/account groups have a role of null.",
                        "nullable": true,
                        "type": "string"
                    },
                    "sis_group_id": {
                        "description": "The SIS ID of the group. Only included if the user has permission to view SIS information.",
                        "example": "group4a",
                        "nullable": true,
                        "type": "string"
                    },
                    "sis_import_id": {
                        "description": "The id of the SIS import if created through SIS. Only included if the user has permission to manage SIS information.",
                        "example": 14,
                        "nullable": true,
                        "type": "integer"
                    },
                    "storage_quota_mb": {
                        "description": "the storage quota for the group, in megabytes",
                        "example": 50,
                        "nullable": true,
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "GroupCategory": {
                "properties": {
                    "account_id": {
                        "example": 3,
                        "nullable": true,
                        "type": "integer"
                    },
                    "auto_leader": {
                        "description": "Gives instructors the ability to automatically have group leaders assigned.  Values include 'random', 'first', and null; 'random' picks a student from the group at random as the leader, 'first' sets the first student to be assigned to the group as the leader",
                        "nullable": true,
                        "type": "string"
                    },
                    "context_type": {
                        "description": "The course or account that the category group belongs to. The pattern here is that whatever the context_type is, there will be an _id field named after that type. So if instead context_type was 'Course', the course_id field would be replaced by an course_id field.",
                        "example": "Account",
                        "nullable": true,
                        "type": "string"
                    },
                    "group_limit": {
                        "description": "If self-signup is enabled, group_limit can be set to cap the number of users in each group. If null, there is no limit.",
                        "nullable": true,
                        "type": "integer"
                    },
                    "id": {
                        "description": "The ID of the group category.",
                        "example": 17,
                        "type": "integer"
                    },
                    "name": {
                        "description": "The display name of the group category.",
                        "example": "Math Groups",
                        "nullable": true,
                        "type": "string"
                    },
                    "progress": {
                        "$ref": "#/components/schemas/ProgressNullable"
                    },
                    "role": {
                        "description": "Certain types of group categories have special role designations. Currently, these include: 'communities', 'student_organized', and 'imported'. Regular course/account group categories have a role of null.",
                        "example": "communities",
                        "nullable": true,
                        "type": "string"
                    },
                    "self_signup": {
                        "description": "If the group category allows users to join a group themselves, thought they may only be a member of one group per group category at a time. Values include 'restricted', 'enabled', and null 'enabled' allows students to assign themselves to a group 'restricted' restricts them to only joining a group in their section null disallows students from joining groups",
                        "nullable": true,
                        "type": "string"
                    },
                    "sis_group_category_id": {
                        "description": "The SIS identifier for the group category. This field is only included if the user has permission to manage or view SIS information.",
                        "nullable": true,
                        "type": "string"
                    },
                    "sis_import_id": {
                        "description": "The unique identifier for the SIS import. This field is only included if the user has permission to manage SIS information.",
                        "nullable": true,
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "GroupMembership": {
                "properties": {
                    "group_id": {
                        "description": "The id of the group object to which the membership belongs",
                        "example": 17,
                        "nullable": true,
                        "type": "integer"
                    },
                    "id": {
                        "description": "The id of the membership object",
                        "example": 92,
                        "type": "integer"
                    },
                    "just_created": {
                        "description": "optional: whether or not the record was just created on a create call (POST), i.e. was the user just added to the group, or was the user already a member",
                        "example": true,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "moderator": {
                        "description": "Whether or not the user is a moderator of the group (the must also be an active member of the group to moderate)",
                        "example": true,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "sis_import_id": {
                        "description": "The id of the SIS import if created through SIS. Only included if the user has permission to manage SIS information.",
                        "example": 4,
                        "nullable": true,
                        "type": "integer"
                    },
                    "user_id": {
                        "description": "The id of the user object to which the membership belongs",
                        "example": 3,
                        "nullable": true,
                        "type": "integer"
                    },
                    "workflow_state": {
                        "description": "The current state of the membership. Current possible values are 'accepted', 'invited', and 'requested'",
                        "example": "accepted",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "HelpLink": {
                "properties": {
                    "available_to": {
                        "description": "The roles that have access to this help link",
                        "example": [
                            "user",
                            "student",
                            "teacher",
                            "admin",
                            "observer",
                            "unenrolled"
                        ],
                        "items": {
                            "type": "string"
                        },
                        "nullable": true,
                        "type": "array"
                    },
                    "id": {
                        "description": "The ID of the help link",
                        "example": "instructor_question",
                        "type": "string"
                    },
                    "subtext": {
                        "description": "The description of the help link",
                        "example": "Questions are submitted to your instructor",
                        "nullable": true,
                        "type": "string"
                    },
                    "text": {
                        "description": "The name of the help link",
                        "example": "Ask Your Instructor a Question",
                        "nullable": true,
                        "type": "string"
                    },
                    "type": {
                        "description": "The type of the help link",
                        "enum": [
                            "default",
                            "custom"
                        ],
                        "example": "default",
                        "nullable": true,
                        "type": "string"
                    },
                    "url": {
                        "description": "The URL of the help link",
                        "example": "#teacher_feedback",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "HelpLinks": {
                "properties": {
                    "custom_help_links": {
                        "description": "Help links defined by the account. Could include default help links.",
                        "example": [
                            {
                                "available_to": [
                                    "user",
                                    "student",
                                    "teacher",
                                    "admin",
                                    "observer",
                                    "unenrolled"
                                ],
                                "id": "link1",
                                "subtext": "Something something.",
                                "text": "Custom Link!",
                                "type": "custom",
                                "url": "https://google.com"
                            }
                        ],
                        "items": {
                            "$ref": "#/components/schemas/HelpLink"
                        },
                        "nullable": true,
                        "type": "array"
                    },
                    "default_help_links": {
                        "description": "Default help links provided when account has not set help links of their own.",
                        "example": [
                            {
                                "available_to": [
                                    "student"
                                ],
                                "id": "instructor_question",
                                "subtext": "Questions are submitted to your instructor",
                                "text": "Ask Your Instructor a Question",
                                "type": "default",
                                "url": "#teacher_feedback"
                            },
                            {
                                "available_to": [
                                    "user",
                                    "student",
                                    "teacher",
                                    "admin",
                                    "observer",
                                    "unenrolled"
                                ],
                                "id": "search_the_canvas_guides",
                                "subtext": "Find answers to common questions",
                                "text": "Search the Canvas Guides",
                                "type": "default",
                                "url": "http://community.canvaslms.com/community/answers/guides"
                            },
                            {
                                "available_to": [
                                    "user",
                                    "student",
                                    "teacher",
                                    "admin",
                                    "observer",
                                    "unenrolled"
                                ],
                                "id": "report_a_problem",
                                "subtext": "If Canvas misbehaves, tell us about it",
                                "text": "Report a Problem",
                                "type": "default",
                                "url": "#create_ticket"
                            }
                        ],
                        "items": {
                            "$ref": "#/components/schemas/HelpLink"
                        },
                        "nullable": true,
                        "type": "array"
                    },
                    "help_link_icon": {
                        "description": "Help link button icon",
                        "example": "help",
                        "nullable": true,
                        "type": "string"
                    },
                    "help_link_name": {
                        "description": "Help link button title",
                        "example": "Help And Policies",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "JWT": {
                "properties": {
                    "token": {
                        "description": "The signed, encrypted, base64 encoded JWT",
                        "example": "ZXlKaGJHY2lPaUprYVhJaUxDSmxibU1pT2lKQk1qVTJSME5OSW4wLi5QbnAzS1QzLUJkZ3lQZHgtLm5JT0pOV01iZmdtQ0g3WWtybjhLeHlMbW13cl9yZExXTXF3Y0IwbXkzZDd3V1NDd0JYQkV0UTRtTVNJSVRrX0FJcG0zSU1DeThMcW5NdzA0ckdHVTkweDB3MmNJbjdHeWxOUXdveU5ZZ3UwOEN4TkZteUpCeW5FVktrdU05QlRyZXZ3Y1ZTN2hvaC1WZHRqM19PR3duRm5yUVgwSFhFVFc4R28tUGxoQVUtUnhKT0pNakx1OUxYd2NDUzZsaW9ZMno5NVU3T0hLSGNpaDBmSGVjN2FzekVJT3g4NExUeHlReGxYU3BtbFZ5LVNuYWdfbVJUeU5yNHNsMmlDWFcwSzZCNDhpWHJ1clJVVm1LUkVlVTl4ZVVJcTJPaWNpSHpfemJ0X3FrMjhkdzRyajZXRnBHSlZPNWcwTlUzVHlSWk5qdHg1S2NrTjVSQjZ1X2FzWTBScjhTY2VhNFk3Y2JFX01wcm54cFZTNDFIekVVSVRNdzVMTk1GLVpQZy52LVVDTkVJYk8zQ09EVEhPRnFXLUFR",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "License": {
                "properties": {
                    "id": {
                        "description": "a short string identifying the license",
                        "example": "cc_by_sa",
                        "type": "string"
                    },
                    "name": {
                        "description": "the name of the license",
                        "example": "CC Attribution ShareAlike",
                        "nullable": true,
                        "type": "string"
                    },
                    "url": {
                        "description": "a link to the license text",
                        "example": "http://creativecommons.org/licenses/by-sa/4.0",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "LockInfo": {
                "nullable": true,
                "properties": {
                    "asset_string": {
                        "description": "Asset string for the object causing the lock",
                        "example": "assignment_4",
                        "nullable": true,
                        "type": "string"
                    },
                    "context_module": {
                        "description": "(Optional) Context module causing the lock.",
                        "example": "{}",
                        "nullable": true,
                        "type": "string"
                    },
                    "lock_at": {
                        "description": "(Optional) Time at which this was/will be locked. Must be after the due date.",
                        "example": "2013-02-01T06:00:00.000Z",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "manually_locked": {
                        "example": true,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "unlock_at": {
                        "description": "(Optional) Time at which this was/will be unlocked. Must be before the due date.",
                        "example": "2013-01-01T06:00:00.000Z",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "LtiAssignment": {
                "description": "A Canvas assignment",
                "properties": {
                    "course_id": {
                        "example": 10000000000060,
                        "nullable": true,
                        "type": "integer"
                    },
                    "description": {
                        "example": "<p>Do the following:</p>...",
                        "nullable": true,
                        "type": "string"
                    },
                    "due_at": {
                        "description": "The due date for the assignment. If a user id is supplied and an assignment override is in place this field will reflect the due date as it applies to the user.",
                        "example": "2012-07-02T05:59:00.000Z",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "id": {
                        "example": 4,
                        "type": "integer"
                    },
                    "lti_course_id": {
                        "example": "66157096483e6b3a50bfedc6bac902c0b20a8241",
                        "nullable": true,
                        "type": "string"
                    },
                    "lti_id": {
                        "example": "86157096483e6b3a50bfedc6bac902c0b20a824f",
                        "nullable": true,
                        "type": "string"
                    },
                    "name": {
                        "example": "Midterm Review",
                        "nullable": true,
                        "type": "string"
                    },
                    "points_possible": {
                        "example": 10,
                        "nullable": true,
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "MediaComment": {
                "nullable": true,
                "properties": {
                    "content-type": {
                        "example": "audio/mp4",
                        "nullable": true,
                        "type": "string"
                    },
                    "display_name": {
                        "example": "something",
                        "nullable": true,
                        "type": "string"
                    },
                    "media_id": {
                        "example": "3232",
                        "nullable": true,
                        "type": "string"
                    },
                    "media_type": {
                        "example": "audio",
                        "nullable": true,
                        "type": "string"
                    },
                    "url": {
                        "example": "http://example.com/media_url",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "MigrationIssue": {
                "properties": {
                    "content_migration_url": {
                        "description": "API url to the content migration",
                        "example": "https://example.com/api/v1/courses/1/content_migrations/1",
                        "nullable": true,
                        "type": "string"
                    },
                    "created_at": {
                        "description": "timestamp",
                        "example": "2012-06-01T06:00:00.000Z",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "description": {
                        "description": "Description of the issue for the end-user",
                        "example": "Questions in this quiz couldn't be converted",
                        "nullable": true,
                        "type": "string"
                    },
                    "error_message": {
                        "description": "Site administrator error message (If the requesting user has permissions)",
                        "example": "admin only message",
                        "nullable": true,
                        "type": "string"
                    },
                    "error_report_html_url": {
                        "description": "Link to a Canvas error report if present (If the requesting user has permissions)",
                        "example": "https://example.com/error_reports/3",
                        "nullable": true,
                        "type": "string"
                    },
                    "fix_issue_html_url": {
                        "description": "HTML Url to the Canvas page to investigate the issue",
                        "example": "https://example.com/courses/1/quizzes/2",
                        "nullable": true,
                        "type": "string"
                    },
                    "id": {
                        "description": "the unique identifier for the issue",
                        "example": 370663,
                        "type": "integer"
                    },
                    "issue_type": {
                        "description": "Severity of the issue: todo, warning, error",
                        "example": "warning",
                        "nullable": true,
                        "type": "string"
                    },
                    "updated_at": {
                        "description": "timestamp",
                        "example": "2012-06-01T06:00:00.000Z",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "workflow_state": {
                        "description": "Current state of the issue: active, resolved",
                        "example": "active",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "Migrator": {
                "properties": {
                    "name": {
                        "description": "Description of the package type expected",
                        "example": "Common Cartridge 1.0/1.1/1.2 Package",
                        "nullable": true,
                        "type": "string"
                    },
                    "required_settings": {
                        "description": "A list of fields this system requires",
                        "example": [
                            "source_course_id"
                        ],
                        "items": {
                            "type": "string"
                        },
                        "nullable": true,
                        "type": "array"
                    },
                    "requires_file_upload": {
                        "description": "Whether this endpoint requires a file upload",
                        "example": true,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "type": {
                        "description": "The value to pass to the create endpoint",
                        "example": "common_cartridge_importer",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "Module": {
                "properties": {
                    "completed_at": {
                        "description": "the date the calling user completed the module (Optional; present only if the caller is a student or if the optional parameter 'student_id' is included)",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "id": {
                        "description": "the unique identifier for the module",
                        "example": 123,
                        "type": "integer"
                    },
                    "items": {
                        "description": "The contents of this module, as an array of Module Items. (Present only if requested via include[]=items AND the module is not deemed too large by Canvas.)",
                        "items": {
                            "$ref": "#/components/schemas/ModuleItem"
                        },
                        "nullable": true,
                        "type": "array"
                    },
                    "items_count": {
                        "description": "The number of items in the module",
                        "example": 10,
                        "nullable": true,
                        "type": "integer"
                    },
                    "items_url": {
                        "description": "The API URL to retrive this module's items",
                        "example": "https://canvas.example.com/api/v1/modules/123/items",
                        "nullable": true,
                        "type": "string"
                    },
                    "name": {
                        "description": "the name of this module",
                        "example": "Imaginary Numbers and You",
                        "nullable": true,
                        "type": "string"
                    },
                    "position": {
                        "description": "the position of this module in the course (1-based)",
                        "example": 2,
                        "nullable": true,
                        "type": "integer"
                    },
                    "prerequisite_module_ids": {
                        "description": "IDs of Modules that must be completed before this one is unlocked",
                        "example": [
                            121,
                            122
                        ],
                        "items": {
                            "type": "integer"
                        },
                        "nullable": true,
                        "type": "array"
                    },
                    "publish_final_grade": {
                        "description": "if the student's final grade for the course should be published to the SIS upon completion of this module",
                        "nullable": true,
                        "type": "boolean"
                    },
                    "published": {
                        "description": "(Optional) Whether this module is published. This field is present only if the caller has permission to view unpublished modules.",
                        "example": true,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "require_sequential_progress": {
                        "description": "Whether module items must be unlocked in order",
                        "example": true,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "state": {
                        "description": "The state of this Module for the calling user one of 'locked', 'unlocked', 'started', 'completed' (Optional; present only if the caller is a student or if the optional parameter 'student_id' is included)",
                        "example": "started",
                        "nullable": true,
                        "type": "string"
                    },
                    "unlock_at": {
                        "description": "(Optional) the date this module will unlock",
                        "example": "2012-12-31T12:00:00.000Z",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "workflow_state": {
                        "description": "the state of the module: 'active', 'deleted'",
                        "example": "active",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "ModuleItem": {
                "properties": {
                    "completion_requirement": {
                        "$ref": "#/components/schemas/CompletionRequirement"
                    },
                    "content_details": {
                        "$ref": "#/components/schemas/ContentDetails"
                    },
                    "content_id": {
                        "description": "the id of the object referred to applies to 'File', 'Discussion', 'Assignment', 'Quiz', 'ExternalTool' types",
                        "example": 1337,
                        "nullable": true,
                        "type": "integer"
                    },
                    "external_url": {
                        "description": "(only for 'ExternalUrl' and 'ExternalTool' types) external url that the item points to",
                        "example": "https://www.example.com/externalurl",
                        "nullable": true,
                        "type": "string"
                    },
                    "html_url": {
                        "description": "link to the item in Canvas",
                        "example": "https://canvas.example.edu/courses/222/modules/items/768",
                        "nullable": true,
                        "type": "string"
                    },
                    "id": {
                        "description": "the unique identifier for the module item",
                        "example": 768,
                        "type": "integer"
                    },
                    "indent": {
                        "description": "0-based indent level; module items may be indented to show a hierarchy",
                        "example": 0,
                        "nullable": true,
                        "type": "integer"
                    },
                    "module_id": {
                        "description": "the id of the Module this item appears in",
                        "example": 123,
                        "nullable": true,
                        "type": "integer"
                    },
                    "new_tab": {
                        "description": "(only for 'ExternalTool' type) whether the external tool opens in a new tab",
                        "example": false,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "page_url": {
                        "description": "(only for 'Page' type) unique locator for the linked wiki page",
                        "example": "my-page-title",
                        "nullable": true,
                        "type": "string"
                    },
                    "position": {
                        "description": "the position of this item in the module (1-based)",
                        "example": 1,
                        "nullable": true,
                        "type": "integer"
                    },
                    "published": {
                        "description": "(Optional) Whether this module item is published. This field is present only if the caller has permission to view unpublished items.",
                        "example": true,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "title": {
                        "description": "the title of this item",
                        "example": "Square Roots: Irrational numbers or boxy vegetables?",
                        "nullable": true,
                        "type": "string"
                    },
                    "type": {
                        "description": "the type of object referred to one of 'File', 'Page', 'Discussion', 'Assignment', 'Quiz', 'SubHeader', 'ExternalUrl', 'ExternalTool'",
                        "example": "Assignment",
                        "nullable": true,
                        "type": "string"
                    },
                    "url": {
                        "description": "(Optional) link to the Canvas API object, if applicable",
                        "example": "https://canvas.example.edu/api/v1/courses/222/assignments/987",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "ModuleItemNullable": {
                "nullable": true,
                "properties": {
                    "completion_requirement": {
                        "$ref": "#/components/schemas/CompletionRequirement"
                    },
                    "content_details": {
                        "$ref": "#/components/schemas/ContentDetails"
                    },
                    "content_id": {
                        "description": "the id of the object referred to applies to 'File', 'Discussion', 'Assignment', 'Quiz', 'ExternalTool' types",
                        "example": 1337,
                        "nullable": true,
                        "type": "integer"
                    },
                    "external_url": {
                        "description": "(only for 'ExternalUrl' and 'ExternalTool' types) external url that the item points to",
                        "example": "https://www.example.com/externalurl",
                        "nullable": true,
                        "type": "string"
                    },
                    "html_url": {
                        "description": "link to the item in Canvas",
                        "example": "https://canvas.example.edu/courses/222/modules/items/768",
                        "nullable": true,
                        "type": "string"
                    },
                    "id": {
                        "description": "the unique identifier for the module item",
                        "example": 768,
                        "type": "integer"
                    },
                    "indent": {
                        "description": "0-based indent level; module items may be indented to show a hierarchy",
                        "example": 0,
                        "nullable": true,
                        "type": "integer"
                    },
                    "module_id": {
                        "description": "the id of the Module this item appears in",
                        "example": 123,
                        "nullable": true,
                        "type": "integer"
                    },
                    "new_tab": {
                        "description": "(only for 'ExternalTool' type) whether the external tool opens in a new tab",
                        "example": false,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "page_url": {
                        "description": "(only for 'Page' type) unique locator for the linked wiki page",
                        "example": "my-page-title",
                        "nullable": true,
                        "type": "string"
                    },
                    "position": {
                        "description": "the position of this item in the module (1-based)",
                        "example": 1,
                        "nullable": true,
                        "type": "integer"
                    },
                    "published": {
                        "description": "(Optional) Whether this module item is published. This field is present only if the caller has permission to view unpublished items.",
                        "example": true,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "title": {
                        "description": "the title of this item",
                        "example": "Square Roots: Irrational numbers or boxy vegetables?",
                        "nullable": true,
                        "type": "string"
                    },
                    "type": {
                        "description": "the type of object referred to one of 'File', 'Page', 'Discussion', 'Assignment', 'Quiz', 'SubHeader', 'ExternalUrl', 'ExternalTool'",
                        "example": "Assignment",
                        "nullable": true,
                        "type": "string"
                    },
                    "url": {
                        "description": "(Optional) link to the Canvas API object, if applicable",
                        "example": "https://canvas.example.edu/api/v1/courses/222/assignments/987",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "ModuleItemSequence": {
                "properties": {
                    "items": {
                        "description": "an array containing one ModuleItemSequenceNode for each appearence of the asset in the module sequence (up to 10 total)",
                        "example": [
                            {
                                "current": {
                                    "id": 768,
                                    "module_id": 123,
                                    "title": "A lonely page",
                                    "type": "Page"
                                },
                                "mastery_path": {
                                    "assignment_sets": [],
                                    "awaiting_choice": false,
                                    "choose_url": "/courses/11/modules/items/9/choose",
                                    "locked": true,
                                    "modules_tab_disabled": false,
                                    "modules_url": "/courses/11/modules",
                                    "still_processing": false
                                },
                                "next": {
                                    "id": 769,
                                    "module_id": 127,
                                    "title": "Project 1",
                                    "type": "Assignment"
                                }
                            }
                        ],
                        "items": {
                            "$ref": "#/components/schemas/ModuleItemSequenceNode"
                        },
                        "nullable": true,
                        "type": "array"
                    },
                    "modules": {
                        "description": "an array containing each Module referenced above",
                        "example": [
                            {
                                "id": 123,
                                "name": "Overview"
                            },
                            {
                                "id": 127,
                                "name": "Imaginary Numbers"
                            }
                        ],
                        "items": {
                            "$ref": "#/components/schemas/Module"
                        },
                        "nullable": true,
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "ModuleItemSequenceNode": {
                "properties": {
                    "current": {
                        "$ref": "#/components/schemas/ModuleItemNullable"
                    },
                    "mastery_path": {
                        "description": "The conditional release rule for the module item, if applicable",
                        "example": {
                            "assignment_sets": [],
                            "awaiting_choice": false,
                            "choose_url": "/courses/11/modules/items/9/choose",
                            "locked": true,
                            "modules_tab_disabled": false,
                            "modules_url": "/courses/11/modules",
                            "still_processing": false
                        },
                        "nullable": true,
                        "properties": {},
                        "type": "object"
                    },
                    "next": {
                        "$ref": "#/components/schemas/ModuleItemNullable"
                    },
                    "prev": {
                        "$ref": "#/components/schemas/ModuleItemNullable"
                    }
                },
                "type": "object"
            },
            "NeedsGradingCount": {
                "description": "Used by Assignment model",
                "properties": {
                    "needs_grading_count": {
                        "description": "Number of submissions that need grading",
                        "example": 5,
                        "nullable": true,
                        "type": "integer"
                    },
                    "section_id": {
                        "description": "The section ID",
                        "example": "123456",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "NotificationPreference": {
                "properties": {
                    "category": {
                        "description": "The category of that notification",
                        "example": "announcement",
                        "nullable": true,
                        "type": "string"
                    },
                    "frequency": {
                        "description": "How often to send notifications to this communication channel for the given notification. Possible values are 'immediately', 'daily', 'weekly', and 'never'",
                        "example": "daily",
                        "nullable": true,
                        "type": "string"
                    },
                    "href": {
                        "example": "https://canvas.instructure.com/users/1/communication_channels/email/student@example.edu/notification_preferences/new_announcement",
                        "nullable": true,
                        "type": "string"
                    },
                    "notification": {
                        "description": "The notification this preference belongs to",
                        "example": "new_announcement",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "OriginalityReport": {
                "properties": {
                    "file_id": {
                        "description": "The id of the file receiving the originality score",
                        "example": 8,
                        "nullable": true,
                        "type": "integer"
                    },
                    "id": {
                        "description": "The id of the OriginalityReport",
                        "example": 4,
                        "type": "integer"
                    },
                    "originality_report_file_id": {
                        "description": "The ID of the file within Canvas containing the originality report document (if provided)",
                        "example": 23,
                        "nullable": true,
                        "type": "integer"
                    },
                    "originality_report_url": {
                        "description": "A non-LTI launch URL where the originality score of the file may be found.",
                        "example": "http://www.example.com/report",
                        "nullable": true,
                        "type": "string"
                    },
                    "originality_score": {
                        "description": "A number between 0 and 100 representing the originality score",
                        "example": 0.16,
                        "nullable": true,
                        "type": "number"
                    },
                    "tool_setting": {
                        "$ref": "#/components/schemas/ToolSetting"
                    }
                },
                "type": "object"
            },
            "Outcome": {
                "properties": {
                    "assessed": {
                        "description": "whether this outcome has been used to assess a student",
                        "example": true,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "calculation_int": {
                        "description": "this defines the variable value used by the calculation_method. included only if calculation_method uses it",
                        "example": 75,
                        "nullable": true,
                        "type": "integer"
                    },
                    "calculation_method": {
                        "description": "the method used to calculate a students score",
                        "example": "decaying_average",
                        "nullable": true,
                        "type": "string"
                    },
                    "can_edit": {
                        "description": "whether the current user can update the outcome",
                        "example": true,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "can_unlink": {
                        "description": "whether the outcome can be unlinked",
                        "example": true,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "context_id": {
                        "description": "the context owning the outcome. may be null for global outcomes",
                        "example": 1,
                        "nullable": true,
                        "type": "integer"
                    },
                    "context_type": {
                        "example": "Account",
                        "nullable": true,
                        "type": "string"
                    },
                    "description": {
                        "description": "description of the outcome. omitted in the abbreviated form.",
                        "example": "Outcome description",
                        "nullable": true,
                        "type": "string"
                    },
                    "display_name": {
                        "description": "Optional friendly name for reporting",
                        "example": "My Favorite Outcome",
                        "nullable": true,
                        "type": "string"
                    },
                    "has_updateable_rubrics": {
                        "description": "whether updates to this outcome will propagate to unassessed rubrics that have imported it",
                        "example": true,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "id": {
                        "description": "the ID of the outcome",
                        "example": 1,
                        "type": "integer"
                    },
                    "mastery_points": {
                        "description": "points necessary to demonstrate mastery outcomes. included only if the outcome embeds a rubric criterion. omitted in the abbreviated form.",
                        "example": 3,
                        "nullable": true,
                        "type": "integer"
                    },
                    "points_possible": {
                        "description": "maximum points possible. included only if the outcome embeds a rubric criterion. omitted in the abbreviated form.",
                        "example": 5,
                        "nullable": true,
                        "type": "integer"
                    },
                    "ratings": {
                        "description": "possible ratings for this outcome. included only if the outcome embeds a rubric criterion. omitted in the abbreviated form.",
                        "items": {
                            "$ref": "#/components/schemas/RubricRating"
                        },
                        "nullable": true,
                        "type": "array"
                    },
                    "title": {
                        "description": "title of the outcome",
                        "example": "Outcome title",
                        "nullable": true,
                        "type": "string"
                    },
                    "url": {
                        "description": "the URL for fetching/updating the outcome. should be treated as opaque",
                        "example": "/api/v1/outcomes/1",
                        "nullable": true,
                        "type": "string"
                    },
                    "vendor_guid": {
                        "description": "A custom GUID for the learning standard.",
                        "example": "customid9000",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "OutcomeNullable": {
                "nullable": true,
                "properties": {
                    "assessed": {
                        "description": "whether this outcome has been used to assess a student",
                        "example": true,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "calculation_int": {
                        "description": "this defines the variable value used by the calculation_method. included only if calculation_method uses it",
                        "example": 75,
                        "nullable": true,
                        "type": "integer"
                    },
                    "calculation_method": {
                        "description": "the method used to calculate a students score",
                        "example": "decaying_average",
                        "nullable": true,
                        "type": "string"
                    },
                    "can_edit": {
                        "description": "whether the current user can update the outcome",
                        "example": true,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "can_unlink": {
                        "description": "whether the outcome can be unlinked",
                        "example": true,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "context_id": {
                        "description": "the context owning the outcome. may be null for global outcomes",
                        "example": 1,
                        "nullable": true,
                        "type": "integer"
                    },
                    "context_type": {
                        "example": "Account",
                        "nullable": true,
                        "type": "string"
                    },
                    "description": {
                        "description": "description of the outcome. omitted in the abbreviated form.",
                        "example": "Outcome description",
                        "nullable": true,
                        "type": "string"
                    },
                    "display_name": {
                        "description": "Optional friendly name for reporting",
                        "example": "My Favorite Outcome",
                        "nullable": true,
                        "type": "string"
                    },
                    "has_updateable_rubrics": {
                        "description": "whether updates to this outcome will propagate to unassessed rubrics that have imported it",
                        "example": true,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "id": {
                        "description": "the ID of the outcome",
                        "example": 1,
                        "type": "integer"
                    },
                    "mastery_points": {
                        "description": "points necessary to demonstrate mastery outcomes. included only if the outcome embeds a rubric criterion. omitted in the abbreviated form.",
                        "example": 3,
                        "nullable": true,
                        "type": "integer"
                    },
                    "points_possible": {
                        "description": "maximum points possible. included only if the outcome embeds a rubric criterion. omitted in the abbreviated form.",
                        "example": 5,
                        "nullable": true,
                        "type": "integer"
                    },
                    "ratings": {
                        "description": "possible ratings for this outcome. included only if the outcome embeds a rubric criterion. omitted in the abbreviated form.",
                        "items": {
                            "$ref": "#/components/schemas/RubricRating"
                        },
                        "nullable": true,
                        "type": "array"
                    },
                    "title": {
                        "description": "title of the outcome",
                        "example": "Outcome title",
                        "nullable": true,
                        "type": "string"
                    },
                    "url": {
                        "description": "the URL for fetching/updating the outcome. should be treated as opaque",
                        "example": "/api/v1/outcomes/1",
                        "nullable": true,
                        "type": "string"
                    },
                    "vendor_guid": {
                        "description": "A custom GUID for the learning standard.",
                        "example": "customid9000",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "OutcomeAlignment": {
                "properties": {
                    "assignment_id": {
                        "description": "the id of the aligned assignment.",
                        "example": 2,
                        "nullable": true,
                        "type": "integer"
                    },
                    "id": {
                        "description": "the id of the aligned learning outcome.",
                        "example": 1,
                        "type": "integer"
                    },
                    "submission_types": {
                        "description": "a string representing the different submission types of an aligned assignment.",
                        "example": "online_text_entry,online_url",
                        "nullable": true,
                        "type": "string"
                    },
                    "title": {
                        "description": "the title of the aligned assignment.",
                        "example": "Unit 1 test",
                        "nullable": true,
                        "type": "string"
                    },
                    "url": {
                        "description": "the URL for the aligned assignment.",
                        "example": "/courses/1/assignments/5",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "OutcomeGroup": {
                "properties": {
                    "can_edit": {
                        "description": "whether the current user can update the outcome group",
                        "example": true,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "context_id": {
                        "description": "the context owning the outcome group. may be null for global outcome groups. omitted in the abbreviated form.",
                        "example": 1,
                        "nullable": true,
                        "type": "integer"
                    },
                    "context_type": {
                        "example": "Account",
                        "nullable": true,
                        "type": "string"
                    },
                    "description": {
                        "description": "description of the outcome group. omitted in the abbreviated form.",
                        "example": "Outcome group description",
                        "nullable": true,
                        "type": "string"
                    },
                    "id": {
                        "description": "the ID of the outcome group",
                        "example": 1,
                        "type": "integer"
                    },
                    "import_url": {
                        "description": "the URL for importing another group into this outcome group. should be treated as opaque. omitted in the abbreviated form.",
                        "example": "/api/v1/accounts/1/outcome_groups/1/import",
                        "nullable": true,
                        "type": "string"
                    },
                    "outcomes_url": {
                        "description": "the URL for listing/creating outcome links under the outcome group. should be treated as opaque",
                        "example": "/api/v1/accounts/1/outcome_groups/1/outcomes",
                        "nullable": true,
                        "type": "string"
                    },
                    "parent_outcome_group": {
                        "$ref": "#/components/schemas/OutcomeGroupNullable"
                    },
                    "subgroups_url": {
                        "description": "the URL for listing/creating subgroups under the outcome group. should be treated as opaque",
                        "example": "/api/v1/accounts/1/outcome_groups/1/subgroups",
                        "nullable": true,
                        "type": "string"
                    },
                    "title": {
                        "description": "title of the outcome group",
                        "example": "Outcome group title",
                        "nullable": true,
                        "type": "string"
                    },
                    "url": {
                        "description": "the URL for fetching/updating the outcome group. should be treated as opaque",
                        "example": "/api/v1/accounts/1/outcome_groups/1",
                        "nullable": true,
                        "type": "string"
                    },
                    "vendor_guid": {
                        "description": "A custom GUID for the learning standard.",
                        "example": "customid9000",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "OutcomeGroupNullable": {
                "nullable": true,
                "properties": {
                    "can_edit": {
                        "description": "whether the current user can update the outcome group",
                        "example": true,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "context_id": {
                        "description": "the context owning the outcome group. may be null for global outcome groups. omitted in the abbreviated form.",
                        "example": 1,
                        "nullable": true,
                        "type": "integer"
                    },
                    "context_type": {
                        "example": "Account",
                        "nullable": true,
                        "type": "string"
                    },
                    "description": {
                        "description": "description of the outcome group. omitted in the abbreviated form.",
                        "example": "Outcome group description",
                        "nullable": true,
                        "type": "string"
                    },
                    "id": {
                        "description": "the ID of the outcome group",
                        "example": 1,
                        "type": "integer"
                    },
                    "import_url": {
                        "description": "the URL for importing another group into this outcome group. should be treated as opaque. omitted in the abbreviated form.",
                        "example": "/api/v1/accounts/1/outcome_groups/1/import",
                        "nullable": true,
                        "type": "string"
                    },
                    "outcomes_url": {
                        "description": "the URL for listing/creating outcome links under the outcome group. should be treated as opaque",
                        "example": "/api/v1/accounts/1/outcome_groups/1/outcomes",
                        "nullable": true,
                        "type": "string"
                    },
                    "parent_outcome_group": {
                        "$ref": "#/components/schemas/OutcomeGroupNullable"
                    },
                    "subgroups_url": {
                        "description": "the URL for listing/creating subgroups under the outcome group. should be treated as opaque",
                        "example": "/api/v1/accounts/1/outcome_groups/1/subgroups",
                        "nullable": true,
                        "type": "string"
                    },
                    "title": {
                        "description": "title of the outcome group",
                        "example": "Outcome group title",
                        "nullable": true,
                        "type": "string"
                    },
                    "url": {
                        "description": "the URL for fetching/updating the outcome group. should be treated as opaque",
                        "example": "/api/v1/accounts/1/outcome_groups/1",
                        "nullable": true,
                        "type": "string"
                    },
                    "vendor_guid": {
                        "description": "A custom GUID for the learning standard.",
                        "example": "customid9000",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "OutcomeImport": {
                "properties": {
                    "created_at": {
                        "description": "The date the outcome import was created.",
                        "example": "2013-12-02T05:59:00.000Z",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "data": {
                        "$ref": "#/components/schemas/OutcomeImportData"
                    },
                    "ended_at": {
                        "description": "The date the outcome import finished. Returns null if not finished.",
                        "example": "2013-12-02T06:03:21.000Z",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "id": {
                        "description": "The unique identifier for the outcome import.",
                        "example": 1,
                        "type": "integer"
                    },
                    "processing_errors": {
                        "description": "An array of row number / error message pairs. Returns the first 25 errors.",
                        "example": [
                            [
                                1,
                                "Missing required fields: title"
                            ]
                        ],
                        "items": {
                            "items": {
                                "properties": {},
                                "type": "object"
                            },
                            "type": "array"
                        },
                        "nullable": true,
                        "type": "array"
                    },
                    "progress": {
                        "description": "The progress of the outcome import.",
                        "example": "100",
                        "nullable": true,
                        "type": "string"
                    },
                    "updated_at": {
                        "description": "The date the outcome import was last updated.",
                        "example": "2013-12-02T06:03:21.000Z",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "user": {
                        "$ref": "#/components/schemas/UserNullable"
                    },
                    "workflow_state": {
                        "description": "The current state of the outcome import.\n - 'created': The outcome import has been created.\n - 'importing': The outcome import is currently processing.\n - 'succeeded': The outcome import has completed successfully.\n - 'failed': The outcome import failed.",
                        "example": "imported",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "OutcomeImportData": {
                "nullable": true,
                "properties": {
                    "import_type": {
                        "description": "The type of outcome import",
                        "example": "instructure_csv",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "OutcomeLink": {
                "properties": {
                    "assessed": {
                        "description": "whether this outcome has been used to assess a student in the context of this outcome link.  In other words, this will be set to true if the context is a course, and a student has been assessed with this outcome in that course.",
                        "example": true,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "can_unlink": {
                        "description": "whether this outcome link is manageable and is not the last link to an aligned outcome",
                        "nullable": true,
                        "type": "boolean"
                    },
                    "context_id": {
                        "description": "the context owning the outcome link. will match the context owning the outcome group containing the outcome link; included for convenience. may be null for links in global outcome groups.",
                        "example": 1,
                        "nullable": true,
                        "type": "integer"
                    },
                    "context_type": {
                        "example": "Account",
                        "nullable": true,
                        "type": "string"
                    },
                    "outcome": {
                        "$ref": "#/components/schemas/OutcomeNullable"
                    },
                    "outcome_group": {
                        "$ref": "#/components/schemas/OutcomeGroupNullable"
                    },
                    "url": {
                        "description": "the URL for fetching/updating the outcome link. should be treated as opaque",
                        "example": "/api/v1/accounts/1/outcome_groups/1/outcomes/1",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "OutcomeResult": {
                "description": "A student's result for an outcome",
                "deprecated": false,
                "properties": {
                    "id": {
                        "example": "42",
                        "type": "integer",
                        "description": "A unique identifier for this result"
                    },
                    "mastery": {
                        "example": "true",
                        "type": "boolean",
                        "description": "True if the outcome been mastered"
                    },
                    "score": {
                        "example": 6,
                        "type": "integer",
                        "description": "The student's score"
                    },
                    "possible": {
                        "example": 10,
                        "type": "integer",
                        "description": "total possible points for the score"
                    },
                    "submitted_or_assessed_at": {
                        "example": "2013-02-01T00:00:00-06:00",
                        "type": "string",
                        "format": "date-time",
                        "description": "The datetime the resulting OutcomeResult was submitted at, or absent that, when it was assessed."
                    },
                    "links": {
                        "example": {
                            "user": "3",
                            "learning_outcome": "97",
                            "alignment": "53"
                        },
                        "type": "object",
                        "description": "Unique identifiers of objects associated with this result"
                    },
                    "percent": {
                        "example": "0.65",
                        "type": "number",
                        "description": "score's percent of maximum points possible for outcome, scaled to reflect any custom mastery levels that differ from the learning outcome"
                    },
                    "hidden": {
                        "example": false,
                        "type": "boolean"
                    },
                    "hide_points": {
                        "example": false,
                        "type": "boolean"
                    }
                }
            },
            "OutcomeResultResponse": {
                "description": "Assessment Outcome Results and optional info (enabled via the \"include\" parameter on the request)",
                "deprecated": false,
                "properties": {
                    "outcome_results": {
                        "type": "array",
                        "nullable": false,
                        "items": {
                            "$ref": "#/components/schemas/OutcomeResult"
                        },
                        "description": "Specific outcome results for each assessment"
                    },
                    "linked": {
                        "type": "object",
                        "nullable": true,
                        "properties": {
                            "alignments": {
                                "type": "array",
                                "nullable": true,
                                "items": {
                                    "$ref": "#/components/schemas/OutcomeAlignment"
                                },
                                "description": "Alignments related to the outcome results (optionally included)"
                            },
                            "outcomes": {
                                "type": "array",
                                "nullable": true,
                                "items": {
                                    "$ref": "#/components/schemas/Outcome"
                                },
                                "description": "Outcomes related to the outcome results (optionally included)"
                            },
                            "outcome_groups": {
                                "type": "array",
                                "nullable": true,
                                "items": {
                                    "$ref": "#/components/schemas/OutcomeGroup"
                                },
                                "description": "Outcome Groups related to the outcome results (optionally included)"
                            },
                            "outcome_links": {
                                "type": "array",
                                "nullable": true,
                                "items": {
                                    "$ref": "#/components/schemas/OutcomeLink"
                                },
                                "description": "Outcome Links related to the outcome results (optionally included)"
                            },
                            "outcome_paths": {
                                "type": "array",
                                "nullable": false,
                                "items": {
                                    "$ref": "#/components/schemas/OutcomePath"
                                },
                                "description": "Outcome Paths related to the outcome results (optionally included)"
                            },
                            "users": {
                                "type": "array",
                                "nullable": false,
                                "items": {
                                    "$ref": "#/components/schemas/User"
                                },
                                "description": "Users related to the outcome results (optionally included)"
                            }
                        }
                    }
                }
            },
            "OutcomeRollupScoreLinks": {
                "description": "",
                "deprecated": false,
                "properties": {
                    "outcome": {
                        "description": "The id of the related outcome",
                        "example": 42,
                        "type": "integer"
                    }
                }
            },
            "OutcomeRollupScore": {
                "description": "",
                "deprecated": false,
                "properties": {
                    "score": {
                        "description": "The rollup score for the outcome, based on the student alignment scores related to the outcome. This could be null if the student has no related scores.",
                        "example": 3,
                        "type": "integer"
                    },
                    "count": {
                        "example": 6,
                        "type": "integer",
                        "description": "The number of alignment scores included in this rollup."
                    },
                    "links": {
                        "$ref": "#/components/schemas/OutcomeRollupScoreLinks"
                    }
                }
            },
            "OutcomeRollupLinks": {
                "description": "",
                "deprecated": false,
                "properties": {
                    "course": {
                        "description": "If an aggregate result was requested, the course field will be present. Otherwise, the user and section field will be present (Optional) The id of the course that this rollup applies to",
                        "example": 42,
                        "type": "integer"
                    },
                    "user": {
                        "description": "(Optional) The id of the user that this rollup applies to",
                        "example": 42,
                        "type": "integer"
                    },
                    "section": {
                        "description": "(Optional) The id of the section the user is in",
                        "example": 57,
                        "type": "integer"
                    }
                }
            },
            "OutcomeRollup": {
                "description": "",
                "deprecated": false,
                "properties": {
                    "scores": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/OutcomeRollupScore"
                        }
                    },
                    "links": {
                        "$ref": "#/components/schemas/OutcomeRollupLinks"
                    }
                }
            },
            "OutcomeRollupResponse": {
                "description": "Assessment Outcome Rollup Results and optional info (enabled via the \"include\" parameter on the request)",
                "deprecated": false,
                "properties": {
                    "rollups": {
                        "type": "array",
                        "nullable": false,
                        "items": {
                            "$ref": "#/components/schemas/OutcomeRollup"
                        },
                        "description": "Outcome rollups"
                    },
                    "linked": {
                        "type": "object",
                        "nullable": true,
                        "properties": {
                            "courses": {
                                "type": "array",
                                "nullable": true,
                                "items": {
                                    "$ref": "#/components/schemas/Course"
                                },
                                "description": "Courses related to the rollup (optionally included)"
                            },
                            "outcomes": {
                                "type": "array",
                                "nullable": true,
                                "items": {
                                    "$ref": "#/components/schemas/Outcome"
                                },
                                "description": "Outcomes related to the rollup (optionally included)"
                            },
                            "outcome_groups": {
                                "type": "array",
                                "nullable": true,
                                "items": {
                                    "$ref": "#/components/schemas/OutcomeGroup"
                                },
                                "description": "Outcome Groups related to the rollup (optionally included)"
                            },
                            "outcome_links": {
                                "type": "array",
                                "nullable": true,
                                "items": {
                                    "$ref": "#/components/schemas/OutcomeLink"
                                },
                                "description": "Outcome Links related to the rollup (optionally included)"
                            },
                            "outcome_paths": {
                                "type": "array",
                                "nullable": false,
                                "items": {
                                    "$ref": "#/components/schemas/OutcomePath"
                                },
                                "description": "Outcome Paths related to the rollup (optionally included)"
                            },
                            "users": {
                                "type": "array",
                                "nullable": false,
                                "items": {
                                    "$ref": "#/components/schemas/User"
                                },
                                "description": "Users related to the rollup (optionally included)"
                            }
                        }
                    }
                }
            },
            "OutcomePath": {
                "description": "The full path to an outcome",
                "deprecated": false,
                "properties": {
                    "id": {
                        "example": "42",
                        "type": "integer",
                        "description": "A unique identifier for this outcome"
                    },
                    "parts": {
                        "$ref": "#/components/schemas/OutcomePathPart"
                    }
                }
            },
            "OutcomePathPart": {
                "description": "An outcome or outcome group",
                "deprecated": false,
                "properties": {
                    "name": {
                        "example": "Spelling out numbers",
                        "type": "string",
                        "description": "The title of the outcome or outcome group"
                    }
                }
            },
            "Page": {
                "properties": {
                    "body": {
                        "description": "the page content, in HTML (present when requesting a single page; omitted when listing pages)",
                        "example": "<p>Page Content</p>",
                        "nullable": true,
                        "type": "string"
                    },
                    "created_at": {
                        "description": "the creation date for the page",
                        "example": "2012-08-06T22:46:33.000Z",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "editing_roles": {
                        "description": "roles allowed to edit the page; comma-separated list comprising a combination of 'teachers', 'students', 'members', and/or 'public' if not supplied, course defaults are used",
                        "example": "teachers,students",
                        "nullable": true,
                        "type": "string"
                    },
                    "front_page": {
                        "description": "whether this page is the front page for the wiki",
                        "example": false,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "hide_from_students": {
                        "description": "(DEPRECATED) whether this page is hidden from students (note: this is always reflected as the inverse of the published value)",
                        "example": false,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "last_edited_by": {
                        "$ref": "#/components/schemas/UserNullable"
                    },
                    "lock_explanation": {
                        "description": "(Optional) An explanation of why this is locked for the user. Present when locked_for_user is true.",
                        "example": "This page is locked until September 1 at 12:00am",
                        "nullable": true,
                        "type": "string"
                    },
                    "lock_info": {
                        "$ref": "#/components/schemas/LockInfo"
                    },
                    "locked_for_user": {
                        "description": "Whether or not this is locked for the user.",
                        "example": false,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "published": {
                        "description": "whether the page is published (true) or draft state (false).",
                        "example": true,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "title": {
                        "description": "the title of the page",
                        "example": "My Page Title",
                        "nullable": true,
                        "type": "string"
                    },
                    "updated_at": {
                        "description": "the date the page was last updated",
                        "example": "2012-08-08T20:25:20.000Z",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "url": {
                        "description": "the unique locator for the page",
                        "example": "my-page-title",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "PageRevision": {
                "properties": {
                    "body": {
                        "description": "the historic page contents",
                        "example": "<p>Old Page Content</p>",
                        "nullable": true,
                        "type": "string"
                    },
                    "edited_by": {
                        "$ref": "#/components/schemas/UserNullable"
                    },
                    "latest": {
                        "description": "whether this is the latest revision or not",
                        "example": true,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "revision_id": {
                        "description": "an identifier for this revision of the page",
                        "example": 7,
                        "nullable": true,
                        "type": "integer"
                    },
                    "title": {
                        "description": "the historic page title",
                        "example": "Old Page Title",
                        "nullable": true,
                        "type": "string"
                    },
                    "updated_at": {
                        "description": "the time when this revision was saved",
                        "example": "2012-08-07T17:23:58.000Z",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "url": {
                        "description": "the following fields are not included in the index action and may be omitted from the show action via summary=1 the historic url of the page",
                        "example": "old-page-title",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "PageView": {
                "description": "The record of a user page view access in Canvas",
                "properties": {
                    "action": {
                        "description": "The rails action that handled the request",
                        "example": "index",
                        "nullable": true,
                        "type": "string"
                    },
                    "app_name": {
                        "description": "If the request is from an API request, the app that generated the access token",
                        "example": "Canvas for iOS",
                        "nullable": true,
                        "type": "string"
                    },
                    "asset_type": {
                        "description": "The type of asset in the context for the request, if any",
                        "example": "Discussion",
                        "nullable": true,
                        "type": "string"
                    },
                    "context_type": {
                        "description": "The type of context for the request",
                        "example": "Course",
                        "nullable": true,
                        "type": "string"
                    },
                    "contributed": {
                        "description": "This field is deprecated, and will always be false",
                        "example": false,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "controller": {
                        "description": "The rails controller that handled the request",
                        "example": "discussions",
                        "nullable": true,
                        "type": "string"
                    },
                    "created_at": {
                        "description": "When the request was made",
                        "example": "2013-10-01T19:49:47.000Z",
                        "format": "iso8601",
                        "nullable": true,
                        "type": "string"
                    },
                    "http_method": {
                        "description": "The HTTP method such as GET or POST",
                        "example": "GET",
                        "nullable": true,
                        "type": "string"
                    },
                    "id": {
                        "description": "A UUID representing the page view.  This is also the unique request id",
                        "example": "3e246700-e305-0130-51de-02e33aa501ef",
                        "format": "uuid",
                        "type": "string"
                    },
                    "interaction_seconds": {
                        "description": "An approximation of how long the user spent on the page, in seconds",
                        "example": 7.21,
                        "nullable": true,
                        "type": "number"
                    },
                    "links": {
                        "$ref": "#/components/schemas/PageViewLinks"
                    },
                    "participated": {
                        "description": "True if the request counted as participating, such as submitting homework",
                        "example": false,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "remote_ip": {
                        "description": "The origin IP address of the request",
                        "example": "173.194.46.71",
                        "nullable": true,
                        "type": "string"
                    },
                    "render_time": {
                        "description": "How long the response took to render, in seconds",
                        "example": 0.369,
                        "nullable": true,
                        "type": "number"
                    },
                    "url": {
                        "description": "The URL requested",
                        "example": "https://canvas.instructure.com/conversations",
                        "nullable": true,
                        "type": "string"
                    },
                    "user_agent": {
                        "description": "The user-agent of the browser or program that made the request",
                        "example": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_5) AppleWebKit/536.30.1 (KHTML, like Gecko) Version/6.0.5 Safari/536.30.1",
                        "nullable": true,
                        "type": "string"
                    },
                    "user_request": {
                        "description": "A flag indicating whether the request was user-initiated, or automatic (such as an AJAX call)",
                        "example": true,
                        "nullable": true,
                        "type": "boolean"
                    }
                },
                "required": [
                    "id"
                ],
                "type": "object"
            },
            "PageViewLinks": {
                "description": "The links of a page view access in Canvas",
                "nullable": true,
                "properties": {
                    "account": {
                        "description": "The ID of the account context for this page view",
                        "example": 1234,
                        "format": "int64",
                        "nullable": true,
                        "type": "integer"
                    },
                    "asset": {
                        "description": "The ID of the asset for the request, if any",
                        "example": 1234,
                        "format": "int64",
                        "nullable": true,
                        "type": "integer"
                    },
                    "context": {
                        "description": "The ID of the context for the request (course id if context_type is Course, etc)",
                        "example": 1234,
                        "format": "int64",
                        "nullable": true,
                        "type": "integer"
                    },
                    "real_user": {
                        "description": "The ID of the actual user who made this request, if the request was made by a user who was masquerading",
                        "example": 1234,
                        "format": "int64",
                        "nullable": true,
                        "type": "integer"
                    },
                    "user": {
                        "description": "The ID of the user for this page view",
                        "example": 1234,
                        "format": "int64",
                        "nullable": true,
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "PeerReview": {
                "properties": {
                    "assessor": {
                        "description": "The User object for the assessor if the user include parameter is provided (see user API) (optional)",
                        "example": "User",
                        "nullable": true,
                        "type": "string"
                    },
                    "assessor_id": {
                        "description": "The assessors user id",
                        "example": 23,
                        "nullable": true,
                        "type": "integer"
                    },
                    "asset_id": {
                        "description": "The id for the asset associated with this Peer Review",
                        "example": 13,
                        "nullable": true,
                        "type": "integer"
                    },
                    "asset_type": {
                        "description": "The type of the asset",
                        "example": "Submission",
                        "nullable": true,
                        "type": "string"
                    },
                    "id": {
                        "description": "The id of the Peer Review",
                        "example": 1,
                        "type": "integer"
                    },
                    "submission_comments": {
                        "description": "The submission comments associated with this Peer Review if the submission_comment include parameter is provided (see submissions API) (optional)",
                        "example": "SubmissionComment",
                        "nullable": true,
                        "type": "string"
                    },
                    "user": {
                        "description": "the User object for the owner of the asset if the user include parameter is provided (see user API) (optional)",
                        "example": "User",
                        "nullable": true,
                        "type": "string"
                    },
                    "user_id": {
                        "description": "The user id for the owner of the asset",
                        "example": 7,
                        "nullable": true,
                        "type": "integer"
                    },
                    "workflow_state": {
                        "description": "The state of the Peer Review, either 'assigned' or 'completed'",
                        "example": "assigned",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "Permission": {
                "properties": {
                    "add_course_template": {
                        "nullable": true,
                        "type": "boolean"
                    },
                    "add_designer_to_course": {
                        "nullable": true,
                        "type": "boolean"
                    },
                    "add_observer_to_course": {
                        "nullable": true,
                        "type": "boolean"
                    },
                    "add_student_to_course": {
                        "nullable": true,
                        "type": "boolean"
                    },
                    "add_ta_to_course": {
                        "nullable": true,
                        "type": "boolean"
                    },
                    "add_teacher_to_course": {
                        "nullable": true,
                        "type": "boolean"
                    },
                    "allow_course_admin_actions": {
                        "nullable": true,
                        "type": "boolean"
                    },
                    "become_user": {
                        "nullable": true,
                        "type": "boolean"
                    },
                    "change_course_state": {
                        "nullable": true,
                        "type": "boolean"
                    },
                    "create_accounts": {
                        "nullable": true,
                        "type": "boolean"
                    },
                    "create_collaborations": {
                        "nullable": true,
                        "type": "boolean"
                    },
                    "create_conferences": {
                        "nullable": true,
                        "type": "boolean"
                    },
                    "create_forum": {
                        "nullable": true,
                        "type": "boolean"
                    },
                    "create_tool_manually": {
                        "nullable": true,
                        "type": "boolean"
                    },
                    "delete": {
                        "nullable": true,
                        "type": "boolean"
                    },
                    "delete_course_template": {
                        "nullable": true,
                        "type": "boolean"
                    },
                    "direct_share": {
                        "nullable": true,
                        "type": "boolean"
                    },
                    "edit_course_template": {
                        "nullable": true,
                        "type": "boolean"
                    },
                    "generate_observer_pairing_code": {
                        "nullable": true,
                        "type": "boolean"
                    },
                    "import_outcomes": {
                        "nullable": true,
                        "type": "boolean"
                    },
                    "import_sis": {
                        "nullable": true,
                        "type": "boolean"
                    },
                    "lti_add_edit": {
                        "nullable": true,
                        "type": "boolean"
                    },
                    "manage": {
                        "nullable": true,
                        "type": "boolean"
                    },
                    "manage_account_banks": {
                        "nullable": true,
                        "type": "boolean"
                    },
                    "manage_account_calendar_events": {
                        "nullable": true,
                        "type": "boolean"
                    },
                    "manage_account_calendar_visibility": {
                        "nullable": true,
                        "type": "boolean"
                    },
                    "manage_account_memberships": {
                        "nullable": true,
                        "type": "boolean"
                    },
                    "manage_account_settings": {
                        "nullable": true,
                        "type": "boolean"
                    },
                    "manage_admin_users": {
                        "nullable": true,
                        "type": "boolean"
                    },
                    "manage_alerts": {
                        "nullable": true,
                        "type": "boolean"
                    },
                    "manage_assignments": {
                        "nullable": true,
                        "type": "boolean"
                    },
                    "manage_assignments_add": {
                        "nullable": true,
                        "type": "boolean"
                    },
                    "manage_assignments_delete": {
                        "nullable": true,
                        "type": "boolean"
                    },
                    "manage_assignments_edit": {
                        "nullable": true,
                        "type": "boolean"
                    },
                    "manage_calendar": {
                        "nullable": true,
                        "type": "boolean"
                    },
                    "manage_canvasnet_courses": {
                        "nullable": true,
                        "type": "boolean"
                    },
                    "manage_catalog": {
                        "nullable": true,
                        "type": "boolean"
                    },
                    "manage_content": {
                        "nullable": true,
                        "type": "boolean"
                    },
                    "manage_course_content_add": {
                        "nullable": true,
                        "type": "boolean"
                    },
                    "manage_course_content_delete": {
                        "nullable": true,
                        "type": "boolean"
                    },
                    "manage_course_content_edit": {
                        "nullable": true,
                        "type": "boolean"
                    },
                    "manage_course_visibility": {
                        "nullable": true,
                        "type": "boolean"
                    },
                    "manage_courses": {
                        "nullable": true,
                        "type": "boolean"
                    },
                    "manage_courses_add": {
                        "nullable": true,
                        "type": "boolean"
                    },
                    "manage_courses_admin": {
                        "nullable": true,
                        "type": "boolean"
                    },
                    "manage_courses_conclude": {
                        "nullable": true,
                        "type": "boolean"
                    },
                    "manage_courses_delete": {
                        "nullable": true,
                        "type": "boolean"
                    },
                    "manage_courses_publish": {
                        "nullable": true,
                        "type": "boolean"
                    },
                    "manage_courses_reset": {
                        "nullable": true,
                        "type": "boolean"
                    },
                    "manage_data_services": {
                        "nullable": true,
                        "type": "boolean"
                    },
                    "manage_demos": {
                        "nullable": true,
                        "type": "boolean"
                    },
                    "manage_developer_keys": {
                        "nullable": true,
                        "type": "boolean"
                    },
                    "manage_feature_flags": {
                        "nullable": true,
                        "type": "boolean"
                    },
                    "manage_files_add": {
                        "nullable": true,
                        "type": "boolean"
                    },
                    "manage_files_delete": {
                        "nullable": true,
                        "type": "boolean"
                    },
                    "manage_files_edit": {
                        "nullable": true,
                        "type": "boolean"
                    },
                    "manage_frozen_assignments": {
                        "nullable": true,
                        "type": "boolean"
                    },
                    "manage_global_outcomes": {
                        "nullable": true,
                        "type": "boolean"
                    },
                    "manage_grades": {
                        "nullable": true,
                        "type": "boolean"
                    },
                    "manage_groups": {
                        "nullable": true,
                        "type": "boolean"
                    },
                    "manage_groups_add": {
                        "nullable": true,
                        "type": "boolean"
                    },
                    "manage_groups_delete": {
                        "nullable": true,
                        "type": "boolean"
                    },
                    "manage_groups_manage": {
                        "nullable": true,
                        "type": "boolean"
                    },
                    "manage_interaction_alerts": {
                        "nullable": true,
                        "type": "boolean"
                    },
                    "manage_internal_analytics": {
                        "nullable": true,
                        "type": "boolean"
                    },
                    "manage_internal_settings": {
                        "nullable": true,
                        "type": "boolean"
                    },
                    "manage_jobs": {
                        "nullable": true,
                        "type": "boolean"
                    },
                    "manage_links": {
                        "nullable": true,
                        "type": "boolean"
                    },
                    "manage_lti_add": {
                        "nullable": true,
                        "type": "boolean"
                    },
                    "manage_lti_delete": {
                        "nullable": true,
                        "type": "boolean"
                    },
                    "manage_lti_edit": {
                        "nullable": true,
                        "type": "boolean"
                    },
                    "manage_master_courses": {
                        "nullable": true,
                        "type": "boolean"
                    },
                    "manage_outcomes": {
                        "nullable": true,
                        "type": "boolean"
                    },
                    "manage_proficiency_calculations": {
                        "nullable": true,
                        "type": "boolean"
                    },
                    "manage_proficiency_scales": {
                        "nullable": true,
                        "type": "boolean"
                    },
                    "manage_release_notes": {
                        "nullable": true,
                        "type": "boolean"
                    },
                    "manage_role_overrides": {
                        "nullable": true,
                        "type": "boolean"
                    },
                    "manage_rubrics": {
                        "nullable": true,
                        "type": "boolean"
                    },
                    "manage_sections_add": {
                        "nullable": true,
                        "type": "boolean"
                    },
                    "manage_sections_delete": {
                        "nullable": true,
                        "type": "boolean"
                    },
                    "manage_sections_edit": {
                        "nullable": true,
                        "type": "boolean"
                    },
                    "manage_sftp_user_settings": {
                        "nullable": true,
                        "type": "boolean"
                    },
                    "manage_sis": {
                        "nullable": true,
                        "type": "boolean"
                    },
                    "manage_site_settings": {
                        "nullable": true,
                        "type": "boolean"
                    },
                    "manage_storage_quotas": {
                        "nullable": true,
                        "type": "boolean"
                    },
                    "manage_students": {
                        "nullable": true,
                        "type": "boolean"
                    },
                    "manage_user_logins": {
                        "nullable": true,
                        "type": "boolean"
                    },
                    "manage_user_notes": {
                        "nullable": true,
                        "type": "boolean"
                    },
                    "manage_user_observers": {
                        "nullable": true,
                        "type": "boolean"
                    },
                    "manage_wiki_create": {
                        "nullable": true,
                        "type": "boolean"
                    },
                    "manage_wiki_delete": {
                        "nullable": true,
                        "type": "boolean"
                    },
                    "manage_wiki_update": {
                        "nullable": true,
                        "type": "boolean"
                    },
                    "moderate_forum": {
                        "nullable": true,
                        "type": "boolean"
                    },
                    "moderate_user_content": {
                        "nullable": true,
                        "type": "boolean"
                    },
                    "participate_as_student": {
                        "nullable": true,
                        "type": "boolean"
                    },
                    "post_to_forum": {
                        "nullable": true,
                        "type": "boolean"
                    },
                    "provision_catalog": {
                        "nullable": true,
                        "type": "boolean"
                    },
                    "proxy_assignment_submission": {
                        "nullable": true,
                        "type": "boolean"
                    },
                    "read": {
                        "nullable": true,
                        "type": "boolean"
                    },
                    "read_announcements": {
                        "nullable": true,
                        "type": "boolean"
                    },
                    "read_as_admin": {
                        "nullable": true,
                        "type": "boolean"
                    },
                    "read_as_member": {
                        "nullable": true,
                        "type": "boolean"
                    },
                    "read_course_content": {
                        "nullable": true,
                        "type": "boolean"
                    },
                    "read_course_list": {
                        "nullable": true,
                        "type": "boolean"
                    },
                    "read_email_addresses": {
                        "nullable": true,
                        "type": "boolean"
                    },
                    "read_files": {
                        "nullable": true,
                        "type": "boolean"
                    },
                    "read_forum": {
                        "nullable": true,
                        "type": "boolean"
                    },
                    "read_grades": {
                        "nullable": true,
                        "type": "boolean"
                    },
                    "read_messages": {
                        "nullable": true,
                        "type": "boolean"
                    },
                    "read_outcomes": {
                        "nullable": true,
                        "type": "boolean"
                    },
                    "read_prior_roster": {
                        "nullable": true,
                        "type": "boolean"
                    },
                    "read_question_banks": {
                        "nullable": true,
                        "type": "boolean"
                    },
                    "read_reports": {
                        "nullable": true,
                        "type": "boolean"
                    },
                    "read_roster": {
                        "nullable": true,
                        "type": "boolean"
                    },
                    "read_rubrics": {
                        "nullable": true,
                        "type": "boolean"
                    },
                    "read_sis": {
                        "nullable": true,
                        "type": "boolean"
                    },
                    "read_syllabus": {
                        "nullable": true,
                        "type": "boolean"
                    },
                    "remove_designer_from_course": {
                        "nullable": true,
                        "type": "boolean"
                    },
                    "remove_observer_from_course": {
                        "nullable": true,
                        "type": "boolean"
                    },
                    "remove_student_from_course": {
                        "nullable": true,
                        "type": "boolean"
                    },
                    "remove_ta_from_course": {
                        "nullable": true,
                        "type": "boolean"
                    },
                    "remove_teacher_from_course": {
                        "nullable": true,
                        "type": "boolean"
                    },
                    "reset_any_mfa": {
                        "nullable": true,
                        "type": "boolean"
                    },
                    "reset_content": {
                        "nullable": true,
                        "type": "boolean"
                    },
                    "ruby_profile": {
                        "nullable": true,
                        "type": "boolean"
                    },
                    "select_final_grade": {
                        "nullable": true,
                        "type": "boolean"
                    },
                    "send_messages": {
                        "nullable": true,
                        "type": "boolean"
                    },
                    "send_messages_all": {
                        "nullable": true,
                        "type": "boolean"
                    },
                    "suspend_accounts": {
                        "nullable": true,
                        "type": "boolean"
                    },
                    "undelete_courses": {
                        "nullable": true,
                        "type": "boolean"
                    },
                    "update": {
                        "nullable": true,
                        "type": "boolean"
                    },
                    "use_student_view": {
                        "nullable": true,
                        "type": "boolean"
                    },
                    "view_all_grades": {
                        "nullable": true,
                        "type": "boolean"
                    },
                    "view_analytics": {
                        "nullable": true,
                        "type": "boolean"
                    },
                    "view_audit_trail": {
                        "nullable": true,
                        "type": "boolean"
                    },
                    "view_course_changes": {
                        "nullable": true,
                        "type": "boolean"
                    },
                    "view_error_reports": {
                        "nullable": true,
                        "type": "boolean"
                    },
                    "view_feature_flags": {
                        "nullable": true,
                        "type": "boolean"
                    },
                    "view_grade_changes": {
                        "nullable": true,
                        "type": "boolean"
                    },
                    "view_group_pages": {
                        "nullable": true,
                        "type": "boolean"
                    },
                    "view_jobs": {
                        "nullable": true,
                        "type": "boolean"
                    },
                    "view_notifications": {
                        "nullable": true,
                        "type": "boolean"
                    },
                    "view_quiz_answer_audits": {
                        "nullable": true,
                        "type": "boolean"
                    },
                    "view_statistics": {
                        "nullable": true,
                        "type": "boolean"
                    },
                    "view_unpublished_items": {
                        "nullable": true,
                        "type": "boolean"
                    },
                    "view_user_logins": {
                        "nullable": true,
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "PlannerNote": {
                "description": "A planner note",
                "properties": {
                    "course_id": {
                        "description": "The course that the note is in relation too, if applicable",
                        "example": 1578941,
                        "nullable": true,
                        "type": "integer"
                    },
                    "description": {
                        "description": "The description of the planner note",
                        "example": "I need to bring books tomorrow for my course on biology",
                        "nullable": true,
                        "type": "string"
                    },
                    "id": {
                        "description": "The ID of the planner note",
                        "example": 234,
                        "type": "integer"
                    },
                    "linked_object_html_url": {
                        "description": "the Canvas web URL of the linked learning object",
                        "example": "https://canvas.example.com/courses/1578941/assignments/131072",
                        "nullable": true,
                        "type": "string"
                    },
                    "linked_object_id": {
                        "description": "the id of the linked learning object",
                        "example": 131072,
                        "nullable": true,
                        "type": "integer"
                    },
                    "linked_object_type": {
                        "description": "the type of the linked learning object",
                        "example": "assignment",
                        "nullable": true,
                        "type": "string"
                    },
                    "linked_object_url": {
                        "description": "the API URL of the linked learning object",
                        "example": "https://canvas.example.com/api/v1/courses/1578941/assignments/131072",
                        "nullable": true,
                        "type": "string"
                    },
                    "title": {
                        "description": "The title for a planner note",
                        "example": "Bring books tomorrow",
                        "nullable": true,
                        "type": "string"
                    },
                    "todo_date": {
                        "description": "The datetime of when the planner note should show up on their planner",
                        "example": "2017-05-09T10:12:00.000Z",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "user_id": {
                        "description": "The id of the associated user creating the planner note",
                        "example": 1578941,
                        "nullable": true,
                        "type": "integer"
                    },
                    "workflow_state": {
                        "description": "The current published state of the planner note",
                        "example": "active",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "PlannerOverride": {
                "description": "User-controlled setting for whether an item should be displayed on the planner or not",
                "properties": {
                    "assignment_id": {
                        "description": "The id of the plannable's associated assignment, if it has one",
                        "example": 1578941,
                        "nullable": true,
                        "type": "integer"
                    },
                    "created_at": {
                        "description": "The datetime of when the planner override was created",
                        "example": "2017-05-09T10:12:00.000Z",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "deleted_at": {
                        "description": "The datetime of when the planner override was deleted, if applicable",
                        "example": "2017-05-15T12:12:00.000Z",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "dismissed": {
                        "description": "Controls whether or not the associated plannable item shows up in the opportunities list",
                        "example": false,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "id": {
                        "description": "The ID of the planner override",
                        "example": 234,
                        "type": "integer"
                    },
                    "marked_complete": {
                        "description": "Controls whether or not the associated plannable item is marked complete on the planner",
                        "example": false,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "plannable_id": {
                        "description": "The id of the associated object for the planner override",
                        "example": 1578941,
                        "nullable": true,
                        "type": "integer"
                    },
                    "plannable_type": {
                        "description": "The type of the associated object for the planner override",
                        "example": "Assignment",
                        "nullable": true,
                        "type": "string"
                    },
                    "updated_at": {
                        "description": "The datetime of when the planner override was updated",
                        "example": "2017-05-09T10:12:00.000Z",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "user_id": {
                        "description": "The id of the associated user for the planner override",
                        "example": 1578941,
                        "nullable": true,
                        "type": "integer"
                    },
                    "workflow_state": {
                        "description": "The current published state of the item, synced with the associated object",
                        "example": "published",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "Poll": {
                "properties": {
                    "id": {
                        "description": "The unique identifier for the poll",
                        "example": 1023,
                        "type": "integer"
                    },
                    "question": {
                        "description": "The question/title of the poll",
                        "type": "string"
                    },
                    "description": {
                        "description": "The description of the poll",
                        "type": "string"
                    },
                    "created_at": {
                        "description": "The time at which the poll was created",
                        "type": "string"
                    },
                    "user_id": {
                        "description": "The unique identifier for the user that created the poll",
                        "type": "integer"
                    },
                    "total_results": {
                        "description": "An aggregate of the results of all associated poll sessions, with the poll choice id as the key, and the aggregated submission count as the value.",
                        "type": "object",
                        "additionalProperties": true
                    }
                }
            },
            "Proficiency": {
                "properties": {
                    "ratings": {
                        "description": "An array of proficiency ratings. See the ProficiencyRating specification above.",
                        "example": [],
                        "items": {
                            "type": "object"
                        },
                        "nullable": true,
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "Profile": {
                "description": "Profile details for a Canvas user.",
                "properties": {
                    "avatar_url": {
                        "description": "The avatar_url can change over time, so we recommend not caching it for more than a few hours",
                        "example": "..url..",
                        "nullable": true,
                        "type": "string"
                    },
                    "bio": {
                        "nullable": true,
                        "type": "string"
                    },
                    "calendar": {
                        "$ref": "#/components/schemas/CalendarLink"
                    },
                    "effective_locale": {
                        "nullable": true,
                        "type": "string",
                        "description": "This field is not in the Canvas API specification",
                        "example": "en-GB"
                    },
                    "id": {
                        "description": "The ID of the user.",
                        "example": 1234,
                        "type": "integer"
                    },
                    "integration_id": {
                        "description": "The integration_id associated with the user.",
                        "example": "ABC59802",
                        "type": "string",
                        "nullable": true
                    },
                    "locale": {
                        "description": "The users locale.",
                        "nullable": true,
                        "type": "string"
                    },
                    "login_id": {
                        "description": "sample_user@example.com",
                        "example": "sample_user@example.com",
                        "nullable": true,
                        "type": "string"
                    },
                    "lti_user_id": {
                        "nullable": true,
                        "type": "string"
                    },
                    "name": {
                        "description": "Sample User",
                        "example": "Sample User",
                        "nullable": true,
                        "type": "string"
                    },
                    "primary_email": {
                        "description": "sample_user@example.com",
                        "example": "sample_user@example.com",
                        "nullable": true,
                        "type": "string"
                    },
                    "pronouns": {
                        "description": "The pronouns set on the profile (as of 12/02/2023 this is not in the API specification, but is returned with a profile call)",
                        "nullable": true,
                        "type": "string"
                    },
                    "short_name": {
                        "description": "Sample User",
                        "example": "Sample User",
                        "nullable": true,
                        "type": "string"
                    },
                    "sis_user_id": {
                        "description": "sis1",
                        "example": "sis1",
                        "nullable": true,
                        "type": "string"
                    },
                    "sortable_name": {
                        "description": "user, sample",
                        "example": "user, sample",
                        "nullable": true,
                        "type": "string"
                    },
                    "time_zone": {
                        "description": "Optional: This field is only returned in certain API calls, and will return the IANA time zone name of the user's preferred timezone.",
                        "example": "America/Denver",
                        "nullable": true,
                        "type": "string"
                    },
                    "title": {
                        "nullable": true,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "Progress": {
                "properties": {
                    "completion": {
                        "description": "percent completed",
                        "example": 100,
                        "nullable": true,
                        "type": "integer"
                    },
                    "context_id": {
                        "description": "the context owning the job.",
                        "example": 1,
                        "nullable": true,
                        "type": "integer"
                    },
                    "context_type": {
                        "example": "Account",
                        "nullable": true,
                        "type": "string"
                    },
                    "created_at": {
                        "description": "the time the job was created",
                        "example": "2013-01-15T15:00:00.000Z",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "id": {
                        "description": "the ID of the Progress object",
                        "example": 1,
                        "type": "integer"
                    },
                    "message": {
                        "description": "optional details about the job",
                        "example": "17 courses processed",
                        "nullable": true,
                        "type": "string"
                    },
                    "results": {
                        "description": "optional results of the job. omitted when job is still pending",
                        "example": {
                            "id": "123"
                        },
                        "nullable": true,
                        "properties": {},
                        "type": "object"
                    },
                    "tag": {
                        "description": "the type of operation",
                        "example": "course_batch_update",
                        "nullable": true,
                        "type": "string"
                    },
                    "updated_at": {
                        "description": "the time the job was last updated",
                        "example": "2013-01-15T15:04:00.000Z",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "url": {
                        "description": "url where a progress update can be retrieved",
                        "example": "https://canvas.example.edu/api/v1/progress/1",
                        "nullable": true,
                        "type": "string"
                    },
                    "user_id": {
                        "description": "the id of the user who started the job",
                        "example": 123,
                        "nullable": true,
                        "type": "integer"
                    },
                    "workflow_state": {
                        "description": "the state of the job one of 'queued', 'running', 'completed', 'failed'",
                        "example": "completed",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "ProgressNullable": {
                "nullable": true,
                "properties": {
                    "completion": {
                        "description": "percent completed",
                        "example": 100,
                        "nullable": true,
                        "type": "integer"
                    },
                    "context_id": {
                        "description": "the context owning the job.",
                        "example": 1,
                        "nullable": true,
                        "type": "integer"
                    },
                    "context_type": {
                        "example": "Account",
                        "nullable": true,
                        "type": "string"
                    },
                    "created_at": {
                        "description": "the time the job was created",
                        "example": "2013-01-15T15:00:00.000Z",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "id": {
                        "description": "the ID of the Progress object",
                        "example": 1,
                        "type": "integer"
                    },
                    "message": {
                        "description": "optional details about the job",
                        "example": "17 courses processed",
                        "nullable": true,
                        "type": "string"
                    },
                    "results": {
                        "description": "optional results of the job. omitted when job is still pending",
                        "example": {
                            "id": "123"
                        },
                        "nullable": true,
                        "properties": {},
                        "type": "object"
                    },
                    "tag": {
                        "description": "the type of operation",
                        "example": "course_batch_update",
                        "nullable": true,
                        "type": "string"
                    },
                    "updated_at": {
                        "description": "the time the job was last updated",
                        "example": "2013-01-15T15:04:00.000Z",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "url": {
                        "description": "url where a progress update can be retrieved",
                        "example": "https://canvas.example.edu/api/v1/progress/1",
                        "nullable": true,
                        "type": "string"
                    },
                    "user_id": {
                        "description": "the id of the user who started the job",
                        "example": 123,
                        "nullable": true,
                        "type": "integer"
                    },
                    "workflow_state": {
                        "description": "the state of the job one of 'queued', 'running', 'completed', 'failed'",
                        "example": "completed",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "ProvisionalGrade": {
                "properties": {
                    "final": {
                        "description": "Whether this is the 'final' provisional grade created by the moderator",
                        "example": false,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "grade": {
                        "description": "The grade",
                        "example": "A-",
                        "nullable": true,
                        "type": "string"
                    },
                    "grade_matches_current_submission": {
                        "description": "Whether the grade was applied to the most current submission (false if the student resubmitted after grading)",
                        "example": true,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "graded_at": {
                        "description": "When the grade was given",
                        "example": "2015-11-01T06:03:21.000Z",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "provisional_grade_id": {
                        "description": "The identifier for the provisional grade",
                        "example": 23,
                        "nullable": true,
                        "type": "integer"
                    },
                    "score": {
                        "description": "The numeric score",
                        "example": 90,
                        "nullable": true,
                        "type": "integer"
                    },
                    "speedgrader_url": {
                        "description": "A link to view this provisional grade in SpeedGrader",
                        "example": "http://www.example.com/courses/123/gradebook/speed_grader?...",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "Quiz": {
                "properties": {
                    "access_code": {
                        "description": "access code to restrict quiz access",
                        "example": "2beornot2be",
                        "nullable": true,
                        "type": "string"
                    },
                    "all_dates": {
                        "description": "list of due dates for the quiz",
                        "items": {
                            "$ref": "#/components/schemas/AssignmentDate"
                        },
                        "nullable": true,
                        "type": "array"
                    },
                    "allowed_attempts": {
                        "description": "how many times a student can take the quiz -1 = unlimited attempts",
                        "example": 3,
                        "nullable": true,
                        "type": "integer"
                    },
                    "anonymous_submissions": {
                        "description": "Whether survey submissions will be kept anonymous (only applicable to 'graded_survey', 'survey' quiz types)",
                        "example": false,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "assignment_group_id": {
                        "description": "the ID of the quiz's assignment group:",
                        "example": 3,
                        "nullable": true,
                        "type": "integer"
                    },
                    "cant_go_back": {
                        "description": "lock questions after answering? only valid if one_question_at_a_time=true",
                        "example": false,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "description": {
                        "description": "the description of the quiz",
                        "example": "This is a quiz on Act 3 of Hamlet",
                        "nullable": true,
                        "type": "string"
                    },
                    "due_at": {
                        "description": "when the quiz is due",
                        "example": "2013-01-24T06:59:00.000Z",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "hide_correct_answers_at": {
                        "description": "prevent the students from seeing correct answers after the specified date has passed. only valid if show_correct_answers=true",
                        "example": "2013-01-24T06:59:00.000Z",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "hide_results": {
                        "description": "let students see their quiz responses? possible values: null, 'always', 'until_after_last_attempt'",
                        "example": "always",
                        "nullable": true,
                        "type": "string"
                    },
                    "html_url": {
                        "description": "the HTTP/HTTPS URL to the quiz",
                        "example": "http://canvas.example.edu/courses/1/quizzes/2",
                        "nullable": true,
                        "type": "string"
                    },
                    "id": {
                        "description": "the ID of the quiz",
                        "example": 5,
                        "type": "integer"
                    },
                    "ip_filter": {
                        "description": "IP address or range that quiz access is limited to",
                        "example": "123.123.123.123",
                        "nullable": true,
                        "type": "string"
                    },
                    "lock_at": {
                        "description": "when to lock the quiz",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "lock_explanation": {
                        "description": "(Optional) An explanation of why this is locked for the user. Present when locked_for_user is true.",
                        "example": "This quiz is locked until September 1 at 12:00am",
                        "nullable": true,
                        "type": "string"
                    },
                    "lock_info": {
                        "$ref": "#/components/schemas/LockInfo"
                    },
                    "locked_for_user": {
                        "description": "Whether or not this is locked for the user.",
                        "example": false,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "mobile_url": {
                        "description": "a url suitable for loading the quiz in a mobile webview.  it will persiste the headless session and, for quizzes in public courses, will force the user to login",
                        "example": "http://canvas.example.edu/courses/1/quizzes/2?persist_healdess=1&force_user=1",
                        "nullable": true,
                        "type": "string"
                    },
                    "one_question_at_a_time": {
                        "description": "show one question at a time?",
                        "example": false,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "one_time_results": {
                        "description": "prevent the students from seeing their results more than once (right after they submit the quiz)",
                        "example": true,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "permissions": {
                        "$ref": "#/components/schemas/QuizPermissions"
                    },
                    "points_possible": {
                        "description": "The total point value given to the quiz",
                        "example": 20,
                        "nullable": true,
                        "type": "integer"
                    },
                    "preview_url": {
                        "description": "A url that can be visited in the browser with a POST request to preview a quiz as the teacher. Only present when the user may grade",
                        "example": "http://canvas.example.edu/courses/1/quizzes/2/take?preview=1",
                        "nullable": true,
                        "type": "string"
                    },
                    "published": {
                        "description": "whether the quiz has a published or unpublished draft state.",
                        "example": true,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "question_count": {
                        "description": "the number of questions in the quiz",
                        "example": 12,
                        "nullable": true,
                        "type": "integer"
                    },
                    "question_types": {
                        "description": "List of question types in the quiz",
                        "example": [
                            "multiple_choice",
                            "essay"
                        ],
                        "items": {
                            "type": "string"
                        },
                        "nullable": true,
                        "type": "array"
                    },
                    "quiz_extensions_url": {
                        "description": "Link to endpoint to send extensions for this quiz.",
                        "example": "http://canvas.instructure.com/courses/1/quizzes/2/quiz_extensions",
                        "nullable": true,
                        "type": "string"
                    },
                    "quiz_type": {
                        "description": "type of quiz possible values: 'practice_quiz', 'assignment', 'graded_survey', 'survey'",
                        "example": "assignment",
                        "nullable": true,
                        "type": "string"
                    },
                    "scoring_policy": {
                        "description": "which quiz score to keep (only if allowed_attempts != 1) possible values: 'keep_highest', 'keep_latest'",
                        "example": "keep_highest",
                        "nullable": true,
                        "type": "string"
                    },
                    "show_correct_answers": {
                        "description": "show which answers were correct when results are shown? only valid if hide_results=null",
                        "example": true,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "show_correct_answers_at": {
                        "description": "when should the correct answers be visible by students? only valid if show_correct_answers=true",
                        "example": "2013-01-24T06:59:00.000Z",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "show_correct_answers_last_attempt": {
                        "description": "restrict the show_correct_answers option above to apply only to the last submitted attempt of a quiz that allows multiple attempts. only valid if show_correct_answers=true and allowed_attempts > 1",
                        "example": true,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "shuffle_answers": {
                        "description": "shuffle answers for students?",
                        "example": false,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "speedgrader_url": {
                        "description": "Link to Speed Grader for this quiz. Will not be present if quiz is unpublished",
                        "example": "http://canvas.instructure.com/courses/1/speed_grader?assignment_id=1",
                        "nullable": true,
                        "type": "string"
                    },
                    "time_limit": {
                        "description": "quiz time limit in minutes",
                        "example": 5,
                        "nullable": true,
                        "type": "integer"
                    },
                    "title": {
                        "description": "the title of the quiz",
                        "example": "Hamlet Act 3 Quiz",
                        "nullable": true,
                        "type": "string"
                    },
                    "unlock_at": {
                        "description": "when to unlock the quiz",
                        "example": "2013-01-22T06:59:00.000Z",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "unpublishable": {
                        "description": "Whether the assignment's 'published' state can be changed to false. Will be false if there are student submissions for the quiz.",
                        "example": true,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "version_number": {
                        "description": "Current version number of the quiz",
                        "example": 3,
                        "nullable": true,
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "QuizAssignmentOverride": {
                "nullable": true,
                "description": "Set of assignment-overridden dates for a quiz.",
                "properties": {
                    "base": {
                        "description": "If this property is present, it means that dates in this structure are not based on an assignment override, but are instead for all students.",
                        "example": true,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "due_at": {
                        "description": "The date after which any quiz submission is considered late.",
                        "example": "2014-02-21T06:59:59.000Z",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "id": {
                        "description": "ID of the assignment override, unless this is the base construct, in which case the 'id' field is omitted.",
                        "example": 1,
                        "type": "integer"
                    },
                    "lock_at": {
                        "description": "When the quiz will stop being available for taking. A value of null means it can always be taken.",
                        "example": "2014-02-21T06:59:59.000Z",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "title": {
                        "description": "Title of the section this assignment override is for, if any.",
                        "example": "Project X",
                        "nullable": true,
                        "type": "string"
                    },
                    "unlock_at": {
                        "description": "Date when the quiz becomes available for taking.",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "QuizAssignmentOverrideSet": {
                "description": "Set of assignment-overridden dates for a quiz.",
                "properties": {
                    "all_dates": {
                        "$ref": "#/components/schemas/QuizAssignmentOverride"
                    },
                    "due_dates": {
                        "$ref": "#/components/schemas/QuizAssignmentOverride"
                    },
                    "quiz_id": {
                        "description": "ID of the quiz those dates are for.",
                        "example": "1",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "QuizAssignmentOverrideSetContainer": {
                "description": "Container for set of assignment-overridden dates for a quiz.",
                "properties": {
                    "quiz_assignment_overrides": {
                        "description": "The QuizAssignmentOverrideSet",
                        "items": {
                            "$ref": "#/components/schemas/QuizAssignmentOverrideSet"
                        },
                        "nullable": true,
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "QuizGroup": {
                "properties": {
                    "assessment_question_bank_id": {
                        "description": "The ID of the Assessment question bank to pull questions from.",
                        "example": 2,
                        "format": "int64",
                        "nullable": true,
                        "type": "integer"
                    },
                    "id": {
                        "description": "The ID of the question group.",
                        "example": 1,
                        "format": "int64",
                        "type": "integer"
                    },
                    "name": {
                        "description": "The name of the question group.",
                        "example": "Fraction questions",
                        "nullable": true,
                        "type": "string"
                    },
                    "pick_count": {
                        "description": "The number of questions to pick from the group to display to the student.",
                        "example": 3,
                        "format": "int64",
                        "nullable": true,
                        "type": "integer"
                    },
                    "position": {
                        "description": "The order in which the question group will be retrieved and displayed.",
                        "example": 1,
                        "format": "int64",
                        "nullable": true,
                        "type": "integer"
                    },
                    "question_points": {
                        "description": "The amount of points allotted to each question in the group.",
                        "example": 10,
                        "format": "int64",
                        "nullable": true,
                        "type": "integer"
                    },
                    "quiz_id": {
                        "description": "The ID of the Quiz the question group belongs to.",
                        "example": 2,
                        "format": "int64",
                        "type": "integer"
                    }
                },
                "required": [
                    "id",
                    "quiz_id"
                ],
                "type": "object"
            },
            "QuizPermissions": {
                "nullable": true,
                "description": "Permissions the user has for the quiz",
                "properties": {
                    "create": {
                        "description": "whether the user may create a new quiz",
                        "example": true,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "manage": {
                        "description": "whether the user may edit, update, or delete the quiz",
                        "example": true,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "read": {
                        "description": "whether the user can view the quiz",
                        "example": true,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "read_statistics": {
                        "description": "whether the user may view quiz statistics for this quiz",
                        "example": true,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "review_grades": {
                        "description": "whether the user may review grades for all quiz submissions for this quiz",
                        "example": true,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "submit": {
                        "description": "whether the user may submit a submission for the quiz",
                        "example": true,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "update": {
                        "description": "whether the user may update the quiz",
                        "example": true,
                        "nullable": true,
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "QuizQuestion": {
                "properties": {
                    "answers": {
                        "description": "An array of available answers to display to the student.",
                        "items": {
                            "$ref": "#/components/schemas/Answer"
                        },
                        "nullable": true,
                        "type": "array"
                    },
                    "correct_comments": {
                        "description": "The comments to display if the student answers the question correctly.",
                        "example": "That's correct!",
                        "nullable": true,
                        "type": "string"
                    },
                    "id": {
                        "description": "The ID of the quiz question.",
                        "example": 1,
                        "format": "int64",
                        "type": "integer"
                    },
                    "incorrect_comments": {
                        "description": "The comments to display if the student answers incorrectly.",
                        "example": "Unfortunately, that IS a prime number.",
                        "nullable": true,
                        "type": "string"
                    },
                    "neutral_comments": {
                        "description": "The comments to display regardless of how the student answered.",
                        "example": "Goldbach's conjecture proposes that every even integer greater than 2 can be expressed as the sum of two prime numbers.",
                        "nullable": true,
                        "type": "string"
                    },
                    "points_possible": {
                        "description": "The maximum amount of points possible received for getting this question correct.",
                        "example": 5,
                        "format": "int64",
                        "nullable": true,
                        "type": "integer"
                    },
                    "position": {
                        "description": "The order in which the question will be retrieved and displayed.",
                        "example": 1,
                        "format": "int64",
                        "nullable": true,
                        "type": "integer"
                    },
                    "question_name": {
                        "description": "The name of the question.",
                        "example": "Prime Number Identification",
                        "nullable": true,
                        "type": "string"
                    },
                    "question_text": {
                        "description": "The text of the question.",
                        "example": "Which of the following is NOT a prime number?",
                        "nullable": true,
                        "type": "string"
                    },
                    "question_type": {
                        "description": "The type of the question.",
                        "example": "multiple_choice_question",
                        "nullable": true,
                        "type": "string"
                    },
                    "quiz_id": {
                        "description": "The ID of the Quiz the question belongs to.",
                        "example": 2,
                        "format": "int64",
                        "type": "integer"
                    }
                },
                "required": [
                    "id",
                    "quiz_id"
                ],
                "type": "object"
            },
            "QuizReport": {
                "properties": {
                    "anonymous": {
                        "description": "boolean indicating whether the report is for an anonymous survey. if true, no student names will be included in the csv",
                        "example": false,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "created_at": {
                        "description": "when the report was created",
                        "example": "2013-05-01T19:34:56.000Z",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "file": {
                        "$ref": "#/components/schemas/FileNullable"
                    },
                    "generatable": {
                        "description": "boolean indicating whether the report can be generated, which is true unless the quiz is a survey one",
                        "example": true,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "id": {
                        "description": "the ID of the quiz report",
                        "example": 5,
                        "type": "integer"
                    },
                    "includes_all_versions": {
                        "description": "boolean indicating whether the report represents all submissions or only the most recent ones for each student",
                        "example": true,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "progress": {
                        "$ref": "#/components/schemas/ProgressNullable"
                    },
                    "progress_url": {
                        "description": "if the report has not yet finished generating, a URL where information about its progress can be retrieved. refer to the Progress API for more information (Note: not available in JSON-API format)",
                        "nullable": true,
                        "type": "string"
                    },
                    "quiz_id": {
                        "description": "the ID of the quiz",
                        "example": 4,
                        "type": "integer"
                    },
                    "readable_type": {
                        "description": "a human-readable (and localized) version of the report_type",
                        "example": "Student Analysis",
                        "nullable": true,
                        "type": "string"
                    },
                    "report_type": {
                        "description": "which type of report this is possible values: 'student_analysis', 'item_analysis'",
                        "example": "student_analysis",
                        "nullable": true,
                        "type": "string"
                    },
                    "updated_at": {
                        "description": "when the report was last updated",
                        "example": "2013-05-01T19:34:56.000Z",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "url": {
                        "description": "the API endpoint for this report",
                        "example": "http://canvas.example.com/api/v1/courses/1/quizzes/1/reports/1",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "QuizSubmission": {
                "properties": {
                    "attempt": {
                        "description": "For quizzes that allow multiple attempts, this field specifies the quiz submission attempt number.",
                        "example": 3,
                        "format": "int64",
                        "nullable": true,
                        "type": "integer"
                    },
                    "end_at": {
                        "description": "The time at which the quiz submission will be overdue, and be flagged as a late submission.",
                        "example": "2013-11-07T13:16:18.000Z",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "extra_attempts": {
                        "description": "Number of times the student was allowed to re-take the quiz over the multiple-attempt limit.",
                        "example": 1,
                        "format": "int64",
                        "nullable": true,
                        "type": "integer"
                    },
                    "extra_time": {
                        "description": "Amount of extra time allowed for the quiz submission, in minutes.",
                        "example": 60,
                        "format": "int64",
                        "nullable": true,
                        "type": "integer"
                    },
                    "finished_at": {
                        "description": "The time at which the student submitted the quiz submission.",
                        "example": "2013-11-07T13:16:18.000Z",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "fudge_points": {
                        "description": "Number of points the quiz submission's score was fudged by.",
                        "example": 1,
                        "format": "int64",
                        "nullable": true,
                        "type": "integer"
                    },
                    "has_seen_results": {
                        "description": "Whether the student has viewed their results to the quiz.",
                        "example": true,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "id": {
                        "description": "The ID of the quiz submission.",
                        "example": 1,
                        "format": "int64",
                        "type": "integer"
                    },
                    "kept_score": {
                        "description": "For quizzes that allow multiple attempts, this is the score that will be used, which might be the score of the latest, or the highest, quiz submission.",
                        "example": 5,
                        "format": "int64",
                        "nullable": true,
                        "type": "integer"
                    },
                    "manually_unlocked": {
                        "description": "The student can take the quiz even if it's locked for everyone else",
                        "example": true,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "overdue_and_needs_submission": {
                        "description": "Indicates whether the quiz submission is overdue and needs submission",
                        "example": false,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "quiz_id": {
                        "description": "The ID of the Quiz the quiz submission belongs to.",
                        "example": 2,
                        "format": "int64",
                        "type": "integer"
                    },
                    "score": {
                        "description": "The score of the quiz submission, if graded.",
                        "example": 3,
                        "format": "int64",
                        "nullable": true,
                        "type": "integer"
                    },
                    "score_before_regrade": {
                        "description": "The original score of the quiz submission prior to any re-grading.",
                        "example": 2,
                        "format": "int64",
                        "nullable": true,
                        "type": "integer"
                    },
                    "started_at": {
                        "description": "The time at which the student started the quiz submission.",
                        "example": "2013-11-07T13:16:18.000Z",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "submission_id": {
                        "description": "The ID of the Submission the quiz submission represents.",
                        "example": 1,
                        "format": "int64",
                        "nullable": true,
                        "type": "integer"
                    },
                    "time_spent": {
                        "description": "Amount of time spent, in seconds.",
                        "example": 300,
                        "format": "int64",
                        "nullable": true,
                        "type": "integer"
                    },
                    "user_id": {
                        "description": "The ID of the Student that made the quiz submission.",
                        "example": 3,
                        "format": "int64",
                        "nullable": true,
                        "type": "integer"
                    },
                    "workflow_state": {
                        "description": "The current state of the quiz submission. Possible values: ['untaken'|'pending_review'|'complete'|'settings_only'|'preview'].",
                        "example": "untaken",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "required": [
                    "id",
                    "quiz_id"
                ],
                "type": "object"
            },
            "QuizSubmissionQuestion": {
                "properties": {
                    "answer": {
                        "description": "The provided answer (if any) for this question. The format of this parameter depends on the type of the question, see the Appendix for more information.",
                        "nullable": true,
                        "type": "string"
                    },
                    "answers": {
                        "description": "The possible answers for this question when those possible answers are necessary.  The presence of this parameter is dependent on permissions.",
                        "items": {
                            "type": "string"
                        },
                        "nullable": true,
                        "type": "array"
                    },
                    "flagged": {
                        "description": "Whether this question is flagged.",
                        "example": true,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "id": {
                        "description": "The ID of the QuizQuestion this answer is for.",
                        "example": 1,
                        "format": "int64",
                        "type": "integer"
                    }
                },
                "required": [
                    "id"
                ],
                "type": "object"
            },
            "Report": {
                "properties": {
                    "attachment": {
                        "$ref": "#/components/schemas/FileNullable"
                    },
                    "created_at": {
                        "description": "The date and time the report was created.",
                        "example": "2013-12-02T05:59:00.000Z",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "current_line": {
                        "description": "This is the current line count being written to the report. It updates every 1000 records.",
                        "example": 12000,
                        "nullable": true,
                        "type": "integer"
                    },
                    "ended_at": {
                        "description": "The date and time the report finished processing.",
                        "example": "2013-12-02T06:03:21.000Z",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "file_url": {
                        "description": "The url to the report download.",
                        "example": "https://example.com/some/path",
                        "nullable": true,
                        "type": "string"
                    },
                    "id": {
                        "description": "The unique identifier for the report.",
                        "example": 1,
                        "type": "integer"
                    },
                    "parameters": {
                        "$ref": "#/components/schemas/ReportParameters"
                    },
                    "progress": {
                        "description": "The progress of the report",
                        "example": 100,
                        "nullable": true,
                        "type": "integer"
                    },
                    "report": {
                        "description": "The type of report.",
                        "example": "sis_export_csv",
                        "nullable": true,
                        "type": "string"
                    },
                    "started_at": {
                        "description": "The date and time the report started processing.",
                        "example": "2013-12-02T06:03:21.000Z",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "status": {
                        "description": "The status of the report",
                        "example": "complete",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "ReportParameters": {
                "nullable": true,
                "description": "The parameters returned will vary for each report.",
                "properties": {
                    "accounts": {
                        "description": "If true, account data will be included. If false, account data will be omitted.",
                        "example": false,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "course_id": {
                        "description": "The id of the course to report on",
                        "example": 2,
                        "nullable": true,
                        "type": "integer"
                    },
                    "courses": {
                        "description": "If true, course data will be included. If false, course data will be omitted.",
                        "example": false,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "end_at": {
                        "description": "The end date for submissions. Max time range is 2 weeks.",
                        "example": "2012-07-13T16:55:20.000Z",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "enrollment_state": {
                        "description": "Include enrollment state. Defaults to 'all' Options: ['active'| 'invited'| 'creation_pending'| 'deleted'| 'rejected'| 'completed'| 'inactive'| 'all']",
                        "example": [
                            "all"
                        ],
                        "items": {
                            "type": "string"
                        },
                        "nullable": true,
                        "type": "array"
                    },
                    "enrollment_term_id": {
                        "description": "The canvas id of the term to get grades from",
                        "example": 2,
                        "nullable": true,
                        "type": "integer"
                    },
                    "enrollments": {
                        "description": "If true, enrollment data will be included. If false, enrollment data will be omitted.",
                        "example": false,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "groups": {
                        "description": "If true, group data will be included. If false, group data will be omitted.",
                        "example": false,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "include_deleted": {
                        "description": "If true, deleted objects will be included. If false, deleted objects will be omitted.",
                        "example": false,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "include_enrollment_state": {
                        "description": "If true, enrollment state will be included. If false, enrollment state will be omitted. Defaults to false.",
                        "example": false,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "order": {
                        "description": "The sort order for the csv, Options: 'users', 'courses', 'outcomes'.",
                        "example": "users",
                        "nullable": true,
                        "type": "string"
                    },
                    "sections": {
                        "description": "If true, section data will be included. If false, section data will be omitted.",
                        "example": false,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "sis_accounts_csv": {
                        "example": 1,
                        "nullable": true,
                        "type": "integer"
                    },
                    "sis_terms_csv": {
                        "example": 1,
                        "nullable": true,
                        "type": "integer"
                    },
                    "start_at": {
                        "description": "The beginning date for submissions. Max time range is 2 weeks.",
                        "example": "2012-07-13T16:55:20.000Z",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "terms": {
                        "description": "If true, term data will be included. If false, term data will be omitted.",
                        "example": false,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "users": {
                        "description": "If true, user data will be included. If false, user data will be omitted.",
                        "example": false,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "xlist": {
                        "description": "If true, data for crosslisted courses will be included. If false, data for crosslisted courses will be omitted.",
                        "example": false,
                        "nullable": true,
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "Role": {
                "properties": {
                    "account": {
                        "description": "JSON representation of the account the role is in.",
                        "example": {
                            "id": 1019,
                            "name": "CGNU",
                            "parent_account_id": 73,
                            "root_account_id": 1,
                            "sis_account_id": "cgnu"
                        },
                        "nullable": true,
                        "properties": {},
                        "type": "object"
                    },
                    "base_role_type": {
                        "description": "The role type that is being used as a base for this role. For account-level roles, this is 'AccountMembership'. For course-level roles, it is an enrollment type.",
                        "example": "AccountMembership",
                        "nullable": true,
                        "type": "string"
                    },
                    "label": {
                        "description": "The label of the role.",
                        "example": "New Role",
                        "nullable": true,
                        "type": "string"
                    },
                    "permissions": {
                        "description": "A dictionary of permissions keyed by name (see permissions input parameter in the 'Create a role' API).",
                        "example": {
                            "read_course_content": {
                                "enabled": true,
                                "explicit": true,
                                "locked": false,
                                "prior_default": false,
                                "readonly": false
                            },
                            "read_course_list": {
                                "enabled": true,
                                "explicit": false,
                                "locked": true,
                                "readonly": true
                            },
                            "read_question_banks": {
                                "enabled": false,
                                "explicit": true,
                                "locked": true,
                                "prior_default": false,
                                "readonly": false
                            },
                            "read_reports": {
                                "enabled": true,
                                "explicit": false,
                                "locked": false,
                                "readonly": false
                            }
                        },
                        "nullable": true,
                        "properties": {},
                        "type": "object"
                    },
                    "role": {
                        "description": "The label of the role. (Deprecated alias for 'label')",
                        "example": "New Role",
                        "nullable": true,
                        "type": "string"
                    },
                    "workflow_state": {
                        "description": "The state of the role: 'active', 'inactive', or 'built_in'",
                        "example": "active",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "Rubric": {
                "properties": {
                    "assessments": {
                        "description": "If an assessment type is included in the 'include' parameter, includes an array of rubric assessment objects for a given rubric, based on the assessment type requested. If the user does not request an assessment type this key will be absent.",
                        "items": {
                            "$ref": "#/components/schemas/RubricAssessment"
                        },
                        "nullable": true,
                        "type": "array"
                    },
                    "context_id": {
                        "description": "the context owning the rubric",
                        "example": 1,
                        "nullable": true,
                        "type": "integer"
                    },
                    "context_type": {
                        "example": "Course",
                        "nullable": true,
                        "type": "string"
                    },
                    "free_form_criterion_comments": {
                        "description": "whether or not free-form comments are used",
                        "example": true,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "hide_score_total": {
                        "example": true,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "id": {
                        "description": "the ID of the rubric",
                        "example": 1,
                        "type": "integer"
                    },
                    "points_possible": {
                        "nullable": true,
                        "type": "integer"
                    },
                    "read_only": {
                        "example": true,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "reusable": {
                        "example": false,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "title": {
                        "description": "title of the rubric",
                        "example": "some title",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "RubricAssessment": {
                "properties": {
                    "artifact_attempt": {
                        "description": "the current number of attempts made on the object of the assessment",
                        "example": 2,
                        "nullable": true,
                        "type": "integer"
                    },
                    "artifact_id": {
                        "description": "the id of the object of the assessment",
                        "example": 3,
                        "nullable": true,
                        "type": "integer"
                    },
                    "artifact_type": {
                        "description": "the object of the assessment",
                        "example": "Submission",
                        "nullable": true,
                        "type": "string"
                    },
                    "assessment_type": {
                        "description": "the type of assessment. values will be either 'grading', 'peer_review', or 'provisional_grade'",
                        "example": "grading",
                        "nullable": true,
                        "type": "string"
                    },
                    "assessor_id": {
                        "description": "user id of the person who made the assessment",
                        "example": 6,
                        "nullable": true,
                        "type": "integer"
                    },
                    "comments": {
                        "description": "(Optional) If 'comments_only' is included in the 'style' parameter, returned assessments will include only the comments portion of their data hash. If the user does not request a style, this key will be absent.",
                        "items": {
                            "type": "string"
                        },
                        "nullable": true,
                        "type": "array"
                    },
                    "data": {
                        "description": "(Optional) If 'full' is included in the 'style' parameter, returned assessments will have their full details contained in their data hash. If the user does not request a style, this key will be absent.",
                        "items": {
                            "properties": {},
                            "type": "object"
                        },
                        "nullable": true,
                        "type": "array"
                    },
                    "id": {
                        "description": "the ID of the rubric",
                        "example": 1,
                        "type": "integer"
                    },
                    "rubric_association_id": {
                        "example": 2,
                        "nullable": true,
                        "type": "integer"
                    },
                    "rubric_id": {
                        "description": "the rubric the assessment belongs to",
                        "example": 1,
                        "nullable": true,
                        "type": "integer"
                    },
                    "score": {
                        "nullable": true,
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "RubricCriteria": {
                "properties": {
                    "criterion_use_range": {
                        "example": true,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "description": {
                        "example": "Criterion 1",
                        "nullable": true,
                        "type": "string"
                    },
                    "id": {
                        "description": "The id of rubric criteria.",
                        "example": "crit1",
                        "type": "string"
                    },
                    "learning_outcome_id": {
                        "description": "(Optional) The id of the learning outcome this criteria uses, if any.",
                        "example": "1234",
                        "nullable": true,
                        "type": "string"
                    },
                    "long_description": {
                        "example": "Criterion 1 more details",
                        "nullable": true,
                        "type": "string"
                    },
                    "points": {
                        "example": 10,
                        "nullable": true,
                        "type": "integer"
                    },
                    "ratings": {
                        "items": {
                            "$ref": "#/components/schemas/RubricRating"
                        },
                        "nullable": true,
                        "type": "array"
                    },
                    "vendor_guid": {
                        "description": "(Optional) The 3rd party vendor's GUID for the outcome this criteria references, if any.",
                        "example": "abdsfjasdfne3jsdfn2",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "RubricRating": {
                "properties": {
                    "description": {
                        "example": "Full marks",
                        "nullable": true,
                        "type": "string"
                    },
                    "id": {
                        "example": "rat1",
                        "type": "string"
                    },
                    "long_description": {
                        "example": "Student completed the assignment flawlessly.",
                        "nullable": true,
                        "type": "string"
                    },
                    "points": {
                        "example": 10,
                        "nullable": true,
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "RubricSettings": {
                "nullable": true,
                "properties": {
                    "id": {
                        "example": 123,
                        "nullable": true,
                        "type": "integer"
                    },
                    "title": {
                        "example": "Coursework",
                        "nullable": true,
                        "type": "string"
                    },
                    "points_possible": {
                        "example": 123.12,
                        "nullable": true,
                        "type": "number"
                    },
                    "free_form_criterion_comments": {
                        "example": false,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "hide_score_total": {
                        "example": false,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "hide_points": {
                        "example": false,
                        "nullable": true,
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "SSOSettings": {
                "description": "Settings that are applicable across an account's authentication configuration, even if there are multiple individual providers",
                "properties": {
                    "auth_discovery_url": {
                        "description": "If a discovery url is set, canvas will forward all users to that URL when they need to be authenticated. That page will need to then help the user figure out where they need to go to log in. If no discovery url is configured, the first configuration will be used to attempt to authenticate the user.",
                        "example": "https://example.com/which_account",
                        "nullable": true,
                        "type": "string"
                    },
                    "change_password_url": {
                        "description": "The url to redirect users to for password resets. Leave blank for default Canvas behavior",
                        "example": "https://example.com/reset_password",
                        "nullable": true,
                        "type": "string"
                    },
                    "login_handle_name": {
                        "description": "The label used for unique login identifiers.",
                        "example": "Username",
                        "nullable": true,
                        "type": "string"
                    },
                    "unknown_user_url": {
                        "description": "If an unknown user url is set, Canvas will forward to that url when a service authenticates a user, but that user does not exist in Canvas. The default behavior is to present an error.",
                        "example": "https://example.com/register_for_canvas",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "Scope": {
                "properties": {
                    "action": {
                        "description": "The controller action the scope is associated to",
                        "example": "index",
                        "nullable": true,
                        "type": "string"
                    },
                    "controller": {
                        "description": "The controller the scope is associated to",
                        "example": "courses",
                        "nullable": true,
                        "type": "string"
                    },
                    "resource": {
                        "description": "The resource the scope is associated with",
                        "example": "courses",
                        "nullable": true,
                        "type": "string"
                    },
                    "resource_name": {
                        "description": "The localized resource name",
                        "example": "Courses",
                        "nullable": true,
                        "type": "string"
                    },
                    "scope": {
                        "description": "The identifier for the scope",
                        "example": "url:GET|/api/v1/courses",
                        "nullable": true,
                        "type": "string"
                    },
                    "verb": {
                        "description": "The HTTP verb for the scope",
                        "example": "GET",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "Section": {
                "properties": {
                    "course_id": {
                        "description": "The unique Canvas identifier for the course in which the section belongs",
                        "example": 7,
                        "nullable": true,
                        "type": "integer"
                    },
                    "end_at": {
                        "description": "the end date for the section, if applicable",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "id": {
                        "description": "The unique identifier for the section.",
                        "example": 1,
                        "type": "integer"
                    },
                    "integration_id": {
                        "description": "Optional: The integration ID of the section. This field is only included if the user has permission to view SIS information.",
                        "example": "3452342345",
                        "nullable": true,
                        "type": "string"
                    },
                    "name": {
                        "description": "The name of the section.",
                        "example": "Section A",
                        "nullable": true,
                        "type": "string"
                    },
                    "nonxlist_course_id": {
                        "description": "The unique identifier of the original course of a cross-listed section",
                        "nullable": true,
                        "type": "integer"
                    },
                    "restrict_enrollments_to_section_dates": {
                        "description": "Restrict user enrollments to the start and end dates of the section",
                        "nullable": true,
                        "type": "boolean"
                    },
                    "sis_course_id": {
                        "description": "The unique SIS identifier for the course in which the section belongs. This field is only included if the user has permission to view SIS information.",
                        "example": "7",
                        "nullable": true,
                        "type": "string"
                    },
                    "sis_import_id": {
                        "description": "The unique identifier for the SIS import if created through SIS. This field is only included if the user has permission to manage SIS information.",
                        "example": 47,
                        "nullable": true,
                        "type": "integer"
                    },
                    "sis_section_id": {
                        "description": "The sis id of the section. This field is only included if the user has permission to view SIS information.",
                        "example": "s34643",
                        "nullable": true,
                        "type": "string"
                    },
                    "start_at": {
                        "description": "the start date for the section, if applicable",
                        "example": "2012-06-01T06:00:00.000Z",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "students": {
                        "description": "optional array of students for the section, if include=['students'] is set and applicable",
                        "items": {
                            "$ref": "#/components/schemas/UserSectionInclude"
                        },
                        "nullable": true,
                        "type": "array"
                    },
                    "total_students": {
                        "description": "optional: the total number of active and invited students in the section",
                        "example": 13,
                        "nullable": true,
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "SharedBrandConfig": {
                "properties": {
                    "account_id": {
                        "description": "The id of the account it should be shared within.",
                        "nullable": true,
                        "type": "string"
                    },
                    "brand_config_md5": {
                        "description": "The md5 (since BrandConfigs are identified by MD5 and not numeric id) of the BrandConfig to share.",
                        "example": "1d31002c95842f8fe16da7dfcc0d1f39",
                        "nullable": true,
                        "type": "string"
                    },
                    "created_at": {
                        "description": "When this was created",
                        "example": "2012-07-13T16:55:20.000Z",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "id": {
                        "description": "The shared_brand_config identifier.",
                        "example": 987,
                        "type": "integer"
                    },
                    "name": {
                        "description": "The name to share this theme as",
                        "example": "Crimson and Gold Verson 1",
                        "nullable": true,
                        "type": "string"
                    },
                    "updated_at": {
                        "description": "When this was last updated",
                        "example": "2012-07-13T16:55:20.000Z",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "SisImport": {
                "properties": {
                    "add_sis_stickiness": {
                        "description": "Whether stickiness was added to the batch changes.",
                        "example": false,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "batch_mode": {
                        "description": "Whether the import was run in batch mode.",
                        "example": true,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "batch_mode_term_id": {
                        "description": "The term the batch was limited to.",
                        "example": "1234",
                        "nullable": true,
                        "type": "string"
                    },
                    "clear_sis_stickiness": {
                        "description": "Whether stickiness was cleared.",
                        "example": false,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "created_at": {
                        "description": "The date the SIS import was created.",
                        "example": "2013-12-02T05:59:00.000Z",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "csv_attachments": {
                        "description": "An array of CSV files for processing",
                        "example": [],
                        "items": {
                            "items": {
                                "$ref": "#/components/schemas/File"
                            },
                            "type": "array"
                        },
                        "nullable": true,
                        "type": "array"
                    },
                    "data": {
                        "$ref": "#/components/schemas/SisImportData"
                    },
                    "diffed_against_import_id": {
                        "description": "The ID of the SIS Import that this import was diffed against",
                        "example": 1,
                        "nullable": true,
                        "type": "integer"
                    },
                    "diffing_data_set_identifier": {
                        "description": "The identifier of the data set that this SIS batch diffs against",
                        "example": "account-5-enrollments",
                        "nullable": true,
                        "type": "string"
                    },
                    "ended_at": {
                        "description": "The date the SIS import finished. Returns null if not finished.",
                        "example": "2013-12-02T06:03:21.000Z",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "errors_attachment": {
                        "$ref": "#/components/schemas/FileNullable"
                    },
                    "id": {
                        "description": "The unique identifier for the SIS import.",
                        "example": 1,
                        "type": "integer"
                    },
                    "multi_term_batch_mode": {
                        "description": "Enables batch mode against all terms in term file. Requires change_threshold to be set.",
                        "example": false,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "override_sis_stickiness": {
                        "description": "Whether UI changes were overridden.",
                        "example": false,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "processing_errors": {
                        "description": "An array of CSV_file/error_message pairs.",
                        "example": [
                            [
                                "students.csv",
                                "Error while importing CSV. Please contact support."
                            ]
                        ],
                        "items": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "nullable": true,
                        "type": "array"
                    },
                    "processing_warnings": {
                        "description": "Only imports that are complete will get this data. An array of CSV_file/warning_message pairs.",
                        "example": [
                            [
                                "students.csv",
                                "user John Doe has already claimed john_doe's requested login information, skipping"
                            ]
                        ],
                        "items": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array"
                        },
                        "nullable": true,
                        "type": "array"
                    },
                    "progress": {
                        "description": "The progress of the SIS import. The progress will reset when using batch_mode and have a different progress for the cleanup stage",
                        "example": "100",
                        "nullable": true,
                        "type": "string"
                    },
                    "skip_deletes": {
                        "description": "When set the import will skip any deletes.",
                        "example": false,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "updated_at": {
                        "description": "The date the SIS import was last updated.",
                        "example": "2013-12-02T06:03:21.000Z",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "user": {
                        "$ref": "#/components/schemas/UserNullable"
                    },
                    "workflow_state": {
                        "description": "The current state of the SIS import.\n - 'created': The SIS import has been created.\n - 'importing': The SIS import is currently processing.\n - 'cleanup_batch': The SIS import is currently cleaning up courses, sections, and enrollments not included in the batch for batch_mode imports.\n - 'imported': The SIS import has completed successfully.\n - 'imported_with_messages': The SIS import completed with errors or warnings.\n - 'aborted': The SIS import was aborted.\n - 'failed_with_messages': The SIS import failed with errors.\n - 'failed': The SIS import failed.",
                        "example": "imported",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "SisImportCounts": {
                "nullable": true,
                "properties": {
                    "abstract_courses": {
                        "example": 0,
                        "nullable": true,
                        "type": "integer"
                    },
                    "accounts": {
                        "example": 0,
                        "nullable": true,
                        "type": "integer"
                    },
                    "batch_courses_deleted": {
                        "description": "the number of courses that were removed because they were not included in the batch for batch_mode imports. Only included if courses were deleted",
                        "example": 11,
                        "nullable": true,
                        "type": "integer"
                    },
                    "batch_enrollments_deleted": {
                        "description": "the number of enrollments that were removed because they were not included in the batch for batch_mode imports. Only included if enrollments were deleted",
                        "example": 150,
                        "nullable": true,
                        "type": "integer"
                    },
                    "batch_sections_deleted": {
                        "description": "the number of sections that were removed because they were not included in the batch for batch_mode imports. Only included if sections were deleted",
                        "example": 0,
                        "nullable": true,
                        "type": "integer"
                    },
                    "courses": {
                        "example": 121,
                        "nullable": true,
                        "type": "integer"
                    },
                    "enrollments": {
                        "example": 1542,
                        "nullable": true,
                        "type": "integer"
                    },
                    "error_count": {
                        "example": 0,
                        "nullable": true,
                        "type": "integer"
                    },
                    "grade_publishing_results": {
                        "example": 0,
                        "nullable": true,
                        "type": "integer"
                    },
                    "group_memberships": {
                        "example": 0,
                        "nullable": true,
                        "type": "integer"
                    },
                    "groups": {
                        "example": 0,
                        "nullable": true,
                        "type": "integer"
                    },
                    "sections": {
                        "example": 278,
                        "nullable": true,
                        "type": "integer"
                    },
                    "terms": {
                        "example": 3,
                        "nullable": true,
                        "type": "integer"
                    },
                    "users": {
                        "example": 346,
                        "nullable": true,
                        "type": "integer"
                    },
                    "warning_count": {
                        "example": 0,
                        "nullable": true,
                        "type": "integer"
                    },
                    "xlists": {
                        "example": 0,
                        "nullable": true,
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "SisImportData": {
                "nullable": true,
                "properties": {
                    "counts": {
                        "$ref": "#/components/schemas/SisImportCounts"
                    },
                    "import_type": {
                        "description": "The type of SIS import",
                        "example": "instructure_csv",
                        "nullable": true,
                        "type": "string"
                    },
                    "supplied_batches": {
                        "description": "Which files were included in the SIS import",
                        "example": [
                            "term",
                            "course",
                            "section",
                            "user",
                            "enrollment"
                        ],
                        "items": {
                            "type": "string"
                        },
                        "nullable": true,
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "SisImportError": {
                "properties": {
                    "file": {
                        "description": "The file where the error message occurred.",
                        "example": "courses.csv",
                        "nullable": true,
                        "type": "string"
                    },
                    "message": {
                        "description": "The error message that from the record.",
                        "example": "No short_name given for course C001",
                        "nullable": true,
                        "type": "string"
                    },
                    "row": {
                        "description": "The line number where the error occurred. Some Importers do not yet support this. This is a 1 based index starting with the header row.",
                        "example": 34,
                        "nullable": true,
                        "type": "integer"
                    },
                    "sis_import_id": {
                        "description": "The unique identifier for the SIS import.",
                        "example": 1,
                        "nullable": true,
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "Submission": {
                "properties": {
                    "anonymous_id": {
                        "description": "A unique short ID identifying this submission without reference to the owning user. Only included if the caller has administrator access for the current account.",
                        "nullable": true,
                        "type": "string"
                    },
                    "assignment": {
                        "$ref": "#/components/schemas/AssignmentNullable"
                    },
                    "assignment_id": {
                        "description": "The submission's assignment id",
                        "example": 23,
                        "nullable": true,
                        "type": "integer"
                    },
                    "assignment_visible": {
                        "description": "Whether the assignment is visible to the user who submitted the assignment. Submissions where `assignment_visible` is false no longer count towards the student's grade and the assignment can no longer be accessed by the student. `assignment_visible` becomes false for submissions that do not have a grade and whose assignment is no longer assigned to the student's section.",
                        "example": true,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "attempt": {
                        "description": "This is the submission attempt number.",
                        "example": 1,
                        "nullable": true,
                        "type": "integer"
                    },
                    "body": {
                        "description": "The content of the submission, if it was submitted directly in a text field.",
                        "example": "There are three factors too...",
                        "nullable": true,
                        "type": "string"
                    },
                    "course": {
                        "description": "The submission's course (see the course API) (optional)",
                        "example": "Course",
                        "nullable": true,
                        "type": "string"
                    },
                    "excused": {
                        "description": "Whether the assignment is excused.  Excused assignments have no impact on a user's grade.",
                        "example": true,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "extra_attempts": {
                        "description": "Extra submission attempts allowed fro the given user and assignment.",
                        "nullable": true,
                        "type": "integer"
                    },
                    "grade": {
                        "description": "The grade for the submission, translated into the assignment grading scheme (so a letter grade, for example).",
                        "example": "A-",
                        "nullable": true,
                        "type": "string"
                    },
                    "grade_matches_current_submission": {
                        "description": "A boolean flag which is false if the student has re-submitted since the submission was last graded.",
                        "example": true,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "graded_at": {
                        "example": "2012-01-02T03:05:34.000Z",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "grader_id": {
                        "description": "The id of the user who graded the submission. This will be null for submissions that haven't been graded yet. It will be a positive number if a real user has graded the submission and a negative number if the submission was graded by a process (e.g. Quiz autograder and autograding LTI tools).  Specifically autograded quizzes set grader_id to the negative of the quiz id.  Submissions autograded by LTI tools set grader_id to the negative of the tool id.",
                        "example": 86,
                        "nullable": true,
                        "type": "integer"
                    },
                    "html_url": {
                        "description": "URL to the submission. This will require the user to log in.",
                        "example": "http://example.com/courses/255/assignments/543/submissions/134",
                        "nullable": true,
                        "type": "string"
                    },
                    "late": {
                        "description": "Whether the submission was made after the applicable due date",
                        "example": false,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "late_policy_status": {
                        "description": "The status of the submission in relation to the late policy. Can be late, missing, none, or null.",
                        "example": "missing",
                        "nullable": true,
                        "type": "string"
                    },
                    "missing": {
                        "description": "Whether the assignment is missing.",
                        "example": true,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "points_deducted": {
                        "description": "The amount of points automatically deducted from the score by the missing/late policy for a late or missing assignment.",
                        "example": 12.3,
                        "nullable": true,
                        "type": "number"
                    },
                    "posted_at": {
                        "description": "The date this submission was posted to the student, or nil if it has not been posted",
                        "nullable": true,
                        "type": "string"
                    },
                    "preview_url": {
                        "description": "URL to the submission preview. This will require the user to log in.",
                        "example": "http://example.com/courses/255/assignments/543/submissions/134?preview=1",
                        "nullable": true,
                        "type": "string"
                    },
                    "read_status": {
                        "description": "The read status of this submission for the given user (optional). Including read_status will mark submission(s) as read.",
                        "nullable": true,
                        "type": "string"
                    },
                    "redo_request": {
                        "description": "This indicates whether the submission has been reassigned by the instructor.",
                        "nullable": true,
                        "type": "boolean"
                    },
                    "score": {
                        "description": "The raw score",
                        "example": 13.5,
                        "nullable": true,
                        "type": "number"
                    },
                    "seconds_late": {
                        "description": "The amount of time, in seconds, that an submission is late by.",
                        "example": 300,
                        "nullable": true,
                        "type": "number"
                    },
                    "submission_comments": {
                        "description": "Associated comments for a submission (optional)",
                        "items": {
                            "$ref": "#/components/schemas/SubmissionComment"
                        },
                        "nullable": true,
                        "type": "array"
                    },
                    "submission_type": {
                        "description": "The types of submission ex: ('online_text_entry'|'online_url'|'online_upload'|'media_recording')",
                        "example": "online_text_entry",
                        "nullable": true,
                        "type": "string"
                    },
                    "submitted_at": {
                        "description": "The timestamp when the assignment was submitted",
                        "example": "2012-01-01T01:00:00.000Z",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "url": {
                        "description": "The URL of the submission (for 'online_url' submissions).",
                        "nullable": true,
                        "type": "string"
                    },
                    "user": {
                        "description": "The submissions user (see user API) (optional)",
                        "example": "User",
                        "nullable": true,
                        "type": "string"
                    },
                    "user_id": {
                        "description": "The id of the user who created the submission",
                        "example": 134,
                        "nullable": true,
                        "type": "integer"
                    },
                    "workflow_state": {
                        "description": "The current state of the submission",
                        "example": "submitted",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "SubmissionNullable": {
                "nullable": true,
                "properties": {
                    "anonymous_id": {
                        "description": "A unique short ID identifying this submission without reference to the owning user. Only included if the caller has administrator access for the current account.",
                        "nullable": true,
                        "type": "string"
                    },
                    "assignment": {
                        "$ref": "#/components/schemas/AssignmentNullable"
                    },
                    "assignment_id": {
                        "description": "The submission's assignment id",
                        "example": 23,
                        "nullable": true,
                        "type": "integer"
                    },
                    "assignment_visible": {
                        "description": "Whether the assignment is visible to the user who submitted the assignment. Submissions where `assignment_visible` is false no longer count towards the student's grade and the assignment can no longer be accessed by the student. `assignment_visible` becomes false for submissions that do not have a grade and whose assignment is no longer assigned to the student's section.",
                        "example": true,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "attempt": {
                        "description": "This is the submission attempt number.",
                        "example": 1,
                        "nullable": true,
                        "type": "integer"
                    },
                    "body": {
                        "description": "The content of the submission, if it was submitted directly in a text field.",
                        "example": "There are three factors too...",
                        "nullable": true,
                        "type": "string"
                    },
                    "course": {
                        "description": "The submission's course (see the course API) (optional)",
                        "example": "Course",
                        "nullable": true,
                        "type": "string"
                    },
                    "excused": {
                        "description": "Whether the assignment is excused.  Excused assignments have no impact on a user's grade.",
                        "example": true,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "extra_attempts": {
                        "description": "Extra submission attempts allowed fro the given user and assingment.",
                        "nullable": true,
                        "type": "integer"
                    },
                    "grade": {
                        "description": "The grade for the submission, translated into the assignment grading scheme (so a letter grade, for example).",
                        "example": "A-",
                        "nullable": true,
                        "type": "string"
                    },
                    "grade_matches_current_submission": {
                        "description": "A boolean flag which is false if the student has re-submitted since the submission was last graded.",
                        "example": true,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "graded_at": {
                        "example": "2012-01-02T03:05:34.000Z",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "grader_id": {
                        "description": "The id of the user who graded the submission. This will be null for submissions that haven't been graded yet. It will be a positive number if a real user has graded the submission and a negative number if the submission was graded by a process (e.g. Quiz autograder and autograding LTI tools).  Specifically autograded quizzes set grader_id to the negative of the quiz id.  Submissions autograded by LTI tools set grader_id to the negative of the tool id.",
                        "example": 86,
                        "nullable": true,
                        "type": "integer"
                    },
                    "html_url": {
                        "description": "URL to the submission. This will require the user to log in.",
                        "example": "http://example.com/courses/255/assignments/543/submissions/134",
                        "nullable": true,
                        "type": "string"
                    },
                    "late": {
                        "description": "Whether the submission was made after the applicable due date",
                        "example": false,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "late_policy_status": {
                        "description": "The status of the submission in relation to the late policy. Can be late, missing, none, or null.",
                        "example": "missing",
                        "nullable": true,
                        "type": "string"
                    },
                    "missing": {
                        "description": "Whether the assignment is missing.",
                        "example": true,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "points_deducted": {
                        "description": "The amount of points automatically deducted from the score by the missing/late policy for a late or missing assignment.",
                        "example": 12.3,
                        "nullable": true,
                        "type": "number"
                    },
                    "posted_at": {
                        "description": "The date this submission was posted to the student, or nil if it has not been posted",
                        "nullable": true,
                        "type": "string"
                    },
                    "preview_url": {
                        "description": "URL to the submission preview. This will require the user to log in.",
                        "example": "http://example.com/courses/255/assignments/543/submissions/134?preview=1",
                        "nullable": true,
                        "type": "string"
                    },
                    "read_status": {
                        "description": "The read status of this submission for the given user (optional). Including read_status will mark submission(s) as read.",
                        "nullable": true,
                        "type": "string"
                    },
                    "redo_request": {
                        "description": "This indicates whether the submission has been reassigned by the instructor.",
                        "nullable": true,
                        "type": "boolean"
                    },
                    "score": {
                        "description": "The raw score",
                        "example": 13.5,
                        "nullable": true,
                        "type": "number"
                    },
                    "seconds_late": {
                        "description": "The amount of time, in seconds, that an submission is late by.",
                        "example": 300,
                        "nullable": true,
                        "type": "number"
                    },
                    "submission_comments": {
                        "description": "Associated comments for a submission (optional)",
                        "items": {
                            "$ref": "#/components/schemas/SubmissionComment"
                        },
                        "nullable": true,
                        "type": "array"
                    },
                    "submission_type": {
                        "description": "The types of submission ex: ('online_text_entry'|'online_url'|'online_upload'|'media_recording')",
                        "example": "online_text_entry",
                        "nullable": true,
                        "type": "string"
                    },
                    "submitted_at": {
                        "description": "The timestamp when the assignment was submitted",
                        "example": "2012-01-01T01:00:00.000Z",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "url": {
                        "description": "The URL of the submission (for 'online_url' submissions).",
                        "nullable": true,
                        "type": "string"
                    },
                    "user": {
                        "description": "The submissions user (see user API) (optional)",
                        "example": "User",
                        "nullable": true,
                        "type": "string"
                    },
                    "user_id": {
                        "description": "The id of the user who created the submission",
                        "example": 134,
                        "nullable": true,
                        "type": "integer"
                    },
                    "workflow_state": {
                        "description": "The current state of the submission",
                        "example": "submitted",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "SubmissionComment": {
                "properties": {
                    "author": {
                        "$ref": "#/components/schemas/UserDisplay"
                    },
                    "author_id": {
                        "example": 134,
                        "nullable": true,
                        "type": "integer"
                    },
                    "author_name": {
                        "example": "Toph Beifong",
                        "nullable": true,
                        "type": "string"
                    },
                    "comment": {
                        "example": "Well here's the thing...",
                        "nullable": true,
                        "type": "string"
                    },
                    "created_at": {
                        "example": "2012-01-01T01:00:00.000Z",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "edited_at": {
                        "example": "2012-01-02T01:00:00.000Z",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "id": {
                        "example": 37,
                        "type": "integer"
                    },
                    "media_comment": {
                        "$ref": "#/components/schemas/MediaComment"
                    }
                },
                "type": "object"
            },
            "SubmissionHistory": {
                "properties": {
                    "submission_id": {
                        "description": "the id of the submission",
                        "example": 4,
                        "nullable": true,
                        "type": "integer"
                    },
                    "versions": {
                        "description": "an array of all the versions of this submission",
                        "items": {
                            "$ref": "#/components/schemas/SubmissionVersion"
                        },
                        "nullable": true,
                        "type": "array"
                    }
                },
                "type": "object"
            },
            "SubmissionVersion": {
                "description": "A SubmissionVersion object contains all the fields that a Submission object does, plus additional fields prefixed with current_* new_* and previous_* described below.",
                "properties": {
                    "assignment_id": {
                        "description": "the id of the assignment this submissions is for",
                        "example": 22604,
                        "nullable": true,
                        "type": "integer"
                    },
                    "assignment_name": {
                        "description": "the name of the assignment this submission is for",
                        "example": "some assignment",
                        "nullable": true,
                        "type": "string"
                    },
                    "body": {
                        "description": "the body text of the submission",
                        "example": "text from the submission",
                        "nullable": true,
                        "type": "string"
                    },
                    "current_grade": {
                        "description": "the most up to date grade for the current version of this submission",
                        "example": "100",
                        "nullable": true,
                        "type": "string"
                    },
                    "current_graded_at": {
                        "description": "the latest time stamp for the grading of this submission",
                        "example": "2013-01-31T18:16:31.000Z",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "current_grader": {
                        "description": "the name of the most recent grader for this submission",
                        "example": "Grader Name",
                        "nullable": true,
                        "type": "string"
                    },
                    "grade_matches_current_submission": {
                        "description": "boolean indicating whether the grade is equal to the current submission grade",
                        "example": true,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "graded_at": {
                        "description": "time stamp for the grading of this version of the submission",
                        "example": "2013-01-31T18:16:31.000Z",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "grader": {
                        "description": "the name of the user who graded this version of the submission",
                        "example": "Grader Name",
                        "nullable": true,
                        "type": "string"
                    },
                    "grader_id": {
                        "description": "the user id of the user who graded this version of the submission",
                        "example": 67379,
                        "nullable": true,
                        "type": "integer"
                    },
                    "id": {
                        "description": "the id of the submission of which this is a version",
                        "example": 11607,
                        "type": "integer"
                    },
                    "new_grade": {
                        "description": "the updated grade provided in this version of the submission",
                        "example": "100",
                        "nullable": true,
                        "type": "string"
                    },
                    "new_graded_at": {
                        "description": "the timestamp for the grading of this version of the submission (alias for graded_at)",
                        "example": "2013-01-31T18:16:31.000Z",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "new_grader": {
                        "description": "alias for 'grader'",
                        "example": "Grader Name",
                        "nullable": true,
                        "type": "string"
                    },
                    "previous_grade": {
                        "description": "the grade for the submission version immediately preceding this one",
                        "example": "90",
                        "nullable": true,
                        "type": "string"
                    },
                    "previous_graded_at": {
                        "description": "the timestamp for the grading of the submission version immediately preceding this one",
                        "example": "2013-01-29T12:12:12.000Z",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "previous_grader": {
                        "description": "the name of the grader who graded the version of this submission immediately preceding this one",
                        "example": "Graded on submission",
                        "nullable": true,
                        "type": "string"
                    },
                    "score": {
                        "description": "the score for this version of the submission",
                        "example": 100,
                        "nullable": true,
                        "type": "integer"
                    },
                    "submission_type": {
                        "description": "the type of submission",
                        "example": "online",
                        "nullable": true,
                        "type": "string"
                    },
                    "url": {
                        "description": "the url of the submission, if there is one",
                        "nullable": true,
                        "type": "string"
                    },
                    "user_id": {
                        "description": "the user ID of the student who created this submission",
                        "example": 67376,
                        "nullable": true,
                        "type": "integer"
                    },
                    "user_name": {
                        "description": "the name of the student who created this submission",
                        "example": "student@example.com",
                        "nullable": true,
                        "type": "string"
                    },
                    "workflow_state": {
                        "description": "the state of the submission at this version",
                        "example": "unsubmitted",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "SuccessTrue": {
                "properties": {
                    "success": {
                        "nullable": true,
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "Tab": {
                "properties": {
                    "hidden": {
                        "description": "only included if true",
                        "example": true,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "html_url": {
                        "example": "/courses/1/external_tools/4",
                        "nullable": true,
                        "type": "string"
                    },
                    "id": {
                        "example": "context_external_tool_4",
                        "type": "string"
                    },
                    "label": {
                        "example": "WordPress",
                        "nullable": true,
                        "type": "string"
                    },
                    "position": {
                        "description": "1 based",
                        "example": 2,
                        "nullable": true,
                        "type": "integer"
                    },
                    "type": {
                        "example": "external",
                        "nullable": true,
                        "type": "string"
                    },
                    "visibility": {
                        "description": "possible values are: public, members, admins, and none",
                        "example": "public",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "Term": {
                "nullable": true,
                "properties": {
                    "end_at": {
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "id": {
                        "example": 1,
                        "type": "integer"
                    },
                    "name": {
                        "example": "Default Term",
                        "nullable": true,
                        "type": "string"
                    },
                    "start_at": {
                        "example": "2012-06-01T06:00:00.000Z",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "TermsOfService": {
                "properties": {
                    "account_id": {
                        "description": "The id of the root account that owns the Terms of Service",
                        "example": 1,
                        "nullable": true,
                        "type": "integer"
                    },
                    "content": {
                        "description": "Content of the Terms of Service",
                        "example": "To be or not to be that is the question",
                        "nullable": true,
                        "type": "string"
                    },
                    "id": {
                        "description": "Terms Of Service id",
                        "example": 1,
                        "type": "integer"
                    },
                    "passive": {
                        "description": "Boolean dictating if the user must accept Terms of Service",
                        "example": false,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "terms_type": {
                        "description": "The given type for the Terms of Service",
                        "enum": [
                            "default",
                            "custom",
                            "no_terms"
                        ],
                        "example": "default",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "ToolSetting": {
                "nullable": true,
                "properties": {
                    "resource_type_code": {
                        "description": "the resource type code of the resource handler to use to display originality reports",
                        "example": "originality_reports",
                        "nullable": true,
                        "type": "string"
                    },
                    "resource_url": {
                        "description": "a URL that may be used to override the launch URL inferred by the specified resource_type_code. If used a 'resource_type_code' must also be specified.",
                        "example": "http://www.test.com/originality_report",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "TurnitinSettings": {
                "nullable": true,
                "properties": {
                    "exclude_biblio": {
                        "example": false,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "exclude_quoted": {
                        "example": false,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "exclude_small_matches_type": {
                        "example": "percent",
                        "nullable": true,
                        "type": "string"
                    },
                    "exclude_small_matches_value": {
                        "example": 50,
                        "nullable": true,
                        "type": "integer"
                    },
                    "internet_check": {
                        "example": false,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "journal_check": {
                        "example": false,
                        "nullable": true,
                        "type": "boolean"
                    },
                    "originality_report_visibility": {
                        "example": "after_grading",
                        "nullable": true,
                        "type": "string"
                    },
                    "s_paper_check": {
                        "example": false,
                        "nullable": true,
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "UsageRights": {
                "description": "Describes the copyright and license information for a File",
                "properties": {
                    "file_ids": {
                        "description": "List of ids of files that were updated",
                        "example": [
                            1,
                            2,
                            3
                        ],
                        "items": {
                            "type": "integer"
                        },
                        "nullable": true,
                        "type": "array"
                    },
                    "legal_copyright": {
                        "description": "Copyright line for the file",
                        "example": "(C) 2014 Incom Corporation Ltd",
                        "nullable": true,
                        "type": "string"
                    },
                    "license": {
                        "description": "License identifier for the file.",
                        "example": "cc_by_sa",
                        "nullable": true,
                        "type": "string"
                    },
                    "license_name": {
                        "description": "Readable license name",
                        "example": "CC Attribution Share-Alike",
                        "nullable": true,
                        "type": "string"
                    },
                    "message": {
                        "description": "Explanation of the action performed",
                        "example": "4 files updated",
                        "nullable": true,
                        "type": "string"
                    },
                    "use_justification": {
                        "description": "Justification for using the file in a Canvas course. Valid values are 'own_copyright', 'public_domain', 'used_by_permission', 'fair_use', 'creative_commons'",
                        "example": "creative_commons",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "User": {
                "description": "A Canvas user, e.g. a student, teacher, administrator, observer, etc.",
                "properties": {
                    "avatar_state": {
                        "description": "Optional If avatars are enabled and caller is admin, this field can be requested and will contain the current state of the user's avatar.",
                        "example": "approved",
                        "nullable": true,
                        "type": "string"
                    },
                    "avatar_url": {
                        "description": "If avatars are enabled, this field will be included and contain a url to retrieve the user's avatar.",
                        "example": "https://en.gravatar.com/avatar/d8cb8c8cd40ddf0cd05241443a591868?s=80&r=g",
                        "nullable": true,
                        "type": "string"
                    },
                    "bio": {
                        "description": "Optional: The user's bio.",
                        "example": "I like the Muppets.",
                        "nullable": true,
                        "type": "string"
                    },
                    "email": {
                        "description": "Optional: This field can be requested with certain API calls, and will return the users primary email address.",
                        "example": "sheldon@caltech.example.com",
                        "nullable": true,
                        "type": "string"
                    },
                    "enrollments": {
                        "description": "Optional: This field can be requested with certain API calls, and will return a list of the users active enrollments. See the List enrollments API for more details about the format of these records.",
                        "items": {
                            "$ref": "#/components/schemas/Enrollment"
                        },
                        "nullable": true,
                        "type": "array"
                    },
                    "first_name": {
                        "description": "The first name of the user.",
                        "nullable": true,
                        "type": "string"
                    },
                    "id": {
                        "description": "The ID of the user.",
                        "example": 2,
                        "format": "int64",
                        "type": "integer"
                    },
                    "integration_id": {
                        "description": "The integration_id associated with the user.  This field is only included if the user came from a SIS import and has permissions to view SIS information.",
                        "example": "ABC59802",
                        "nullable": true,
                        "type": "string"
                    },
                    "last_login": {
                        "description": "Optional: This field is only returned in certain API calls, and will return a timestamp representing the last time the user logged in to canvas.",
                        "example": "2012-05-30T17:45:25.000Z",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "last_name": {
                        "description": "The last name of the user.",
                        "nullable": true,
                        "type": "string"
                    },
                    "locale": {
                        "description": "Optional: This field can be requested with certain API calls, and will return the users locale in RFC 5646 format.",
                        "example": "tlh",
                        "nullable": true,
                        "type": "string"
                    },
                    "login_id": {
                        "description": "The unique login id for the user.  This is what the user uses to log in to Canvas.",
                        "example": "sheldon@caltech.example.com",
                        "nullable": true,
                        "type": "string"
                    },
                    "name": {
                        "description": "The name of the user.",
                        "example": "Sheldon Cooper",
                        "nullable": true,
                        "type": "string"
                    },
                    "short_name": {
                        "description": "A short name the user has selected, for use in conversations or other less formal places through the site.",
                        "example": "Shelly",
                        "nullable": true,
                        "type": "string"
                    },
                    "sections": {
                        "description": "A list of the sections this user is part of in the courses they are part of.",
                        "example": "Section 1, Section 2, Section 2a",
                        "nullable": true,
                        "type": "string"
                    },
                    "sis_import_id": {
                        "description": "The id of the SIS import.  This field is only included if the user came from a SIS import and has permissions to manage SIS information.",
                        "example": 18,
                        "format": "int64",
                        "nullable": true,
                        "type": "integer"
                    },
                    "sis_user_id": {
                        "description": "The SIS ID associated with the user.  This field is only included if the user came from a SIS import and has permissions to view SIS information.",
                        "example": "SHEL93921",
                        "nullable": true,
                        "type": "string"
                    },
                    "sortable_name": {
                        "description": "The name of the user that is should be used for sorting groups of users, such as in the gradebook.",
                        "example": "Cooper, Sheldon",
                        "nullable": true,
                        "type": "string"
                    },
                    "time_zone": {
                        "description": "Optional: This field is only returned in certain API calls, and will return the IANA time zone name of the user's preferred timezone.",
                        "example": "America/Denver",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "required": [
                    "id"
                ],
                "type": "object"
            },
            "UserNullable": {
                "nullable": true,
                "description": "A Canvas user, e.g. a student, teacher, administrator, observer, etc.",
                "properties": {
                    "avatar_state": {
                        "description": "Optional If avatars are enabled and caller is admin, this field can be requested and will contain the current state of the user's avatar.",
                        "example": "approved",
                        "nullable": true,
                        "type": "string"
                    },
                    "avatar_url": {
                        "description": "If avatars are enabled, this field will be included and contain a url to retrieve the user's avatar.",
                        "example": "https://en.gravatar.com/avatar/d8cb8c8cd40ddf0cd05241443a591868?s=80&r=g",
                        "nullable": true,
                        "type": "string"
                    },
                    "bio": {
                        "description": "Optional: The user's bio.",
                        "example": "I like the Muppets.",
                        "nullable": true,
                        "type": "string"
                    },
                    "email": {
                        "description": "Optional: This field can be requested with certain API calls, and will return the users primary email address.",
                        "example": "sheldon@caltech.example.com",
                        "nullable": true,
                        "type": "string"
                    },
                    "enrollments": {
                        "description": "Optional: This field can be requested with certain API calls, and will return a list of the users active enrollments. See the List enrollments API for more details about the format of these records.",
                        "items": {
                            "$ref": "#/components/schemas/Enrollment"
                        },
                        "nullable": true,
                        "type": "array"
                    },
                    "first_name": {
                        "description": "The first name of the user.",
                        "nullable": true,
                        "type": "string"
                    },
                    "id": {
                        "description": "The ID of the user.",
                        "example": 2,
                        "format": "int64",
                        "type": "integer"
                    },
                    "integration_id": {
                        "description": "The integration_id associated with the user.  This field is only included if the user came from a SIS import and has permissions to view SIS information.",
                        "example": "ABC59802",
                        "nullable": true,
                        "type": "string"
                    },
                    "last_login": {
                        "description": "Optional: This field is only returned in certain API calls, and will return a timestamp representing the last time the user logged in to canvas.",
                        "example": "2012-05-30T17:45:25.000Z",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "last_name": {
                        "description": "The last name of the user.",
                        "nullable": true,
                        "type": "string"
                    },
                    "locale": {
                        "description": "Optional: This field can be requested with certain API calls, and will return the users locale in RFC 5646 format.",
                        "example": "tlh",
                        "nullable": true,
                        "type": "string"
                    },
                    "login_id": {
                        "description": "The unique login id for the user.  This is what the user uses to log in to Canvas.",
                        "example": "sheldon@caltech.example.com",
                        "nullable": true,
                        "type": "string"
                    },
                    "name": {
                        "description": "The name of the user.",
                        "example": "Sheldon Cooper",
                        "nullable": true,
                        "type": "string"
                    },
                    "short_name": {
                        "description": "A short name the user has selected, for use in conversations or other less formal places through the site.",
                        "example": "Shelly",
                        "nullable": true,
                        "type": "string"
                    },
                    "sections": {
                        "description": "A list of the sections this user is part of in the courses they are part of.",
                        "example": "Section 1, Section 2, Section 2a",
                        "nullable": true,
                        "type": "string"
                    },
                    "sis_import_id": {
                        "description": "The id of the SIS import.  This field is only included if the user came from a SIS import and has permissions to manage SIS information.",
                        "example": 18,
                        "format": "int64",
                        "nullable": true,
                        "type": "integer"
                    },
                    "sis_user_id": {
                        "description": "The SIS ID associated with the user.  This field is only included if the user came from a SIS import and has permissions to view SIS information.",
                        "example": "SHEL93921",
                        "nullable": true,
                        "type": "string"
                    },
                    "sortable_name": {
                        "description": "The name of the user that is should be used for sorting groups of users, such as in the gradebook.",
                        "example": "Cooper, Sheldon",
                        "nullable": true,
                        "type": "string"
                    },
                    "time_zone": {
                        "description": "Optional: This field is only returned in certain API calls, and will return the IANA time zone name of the user's preferred timezone.",
                        "example": "America/Denver",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "required": [
                    "id"
                ],
                "type": "object"
            },
            "UserDisplay": {
                "nullable": true,
                "type": "object",
                "description": "Abbreviated user object UserDisplay (see users API).",
                "properties": {
                    "id": {
                        "nullable": true,
                        "type": "number"
                    },
                    "anonymous_id": {
                        "nullable": true,
                        "type": "string"
                    },
                    "display_name": {
                        "nullable": true,
                        "type": "string"
                    },
                    "avatar_image_url": {
                        "nullable": true,
                        "type": "string"
                    },
                    "pronouns": {
                        "description": "The pronouns set on the profile (as of 12/02/2023 this is not in the API specification, but is returned with a profile call)",
                        "nullable": true,
                        "type": "string"
                    }
                }
            },
            "UserSectionInclude": {
                "description": "Canvas user data provided in a section via include=['students']",
                "properties": {
                    "created_at": {
                        "description": "The time at which this user was originally created",
                        "example": "2012-07-02T05:59:00.000Z",
                        "format": "date-time",
                        "nullable": true,
                        "type": "string"
                    },
                    "id": {
                        "description": "The ID of the user.",
                        "example": 2,
                        "format": "int64",
                        "type": "integer"
                    },
                    "integration_id": {
                        "description": "The integration_id associated with the user.  This field is only included if the user came from a SIS import and has permissions to view SIS information.",
                        "example": "ABC59802",
                        "nullable": true,
                        "type": "string"
                    },
                    "login_id": {
                        "description": "The unique login id for the user.  This is what the user uses to log in to Canvas.",
                        "example": "sheldon@caltech.example.com",
                        "nullable": true,
                        "type": "string"
                    },
                    "name": {
                        "description": "The name of the user.",
                        "example": "Sheldon Cooper",
                        "nullable": true,
                        "type": "string"
                    },
                    "short_name": {
                        "description": "A short name the user has selected, for use in conversations or other less formal places through the site.",
                        "example": "Shelly",
                        "nullable": true,
                        "type": "string"
                    },
                    "sis_import_id": {
                        "description": "The id of the SIS import.  This field is only included if the user came from a SIS import and has permissions to manage SIS information.",
                        "example": 18,
                        "format": "int64",
                        "nullable": true,
                        "type": "integer"
                    },
                    "sis_user_id": {
                        "description": "The SIS ID associated with the user.  This field is only included if the user came from a SIS import and has permissions to view SIS information.",
                        "example": "SHEL93921",
                        "nullable": true,
                        "type": "string"
                    },
                    "sortable_name": {
                        "description": "The name of the user that is should be used for sorting groups of users, such as in the gradebook.",
                        "example": "Cooper, Sheldon",
                        "nullable": true,
                        "type": "string"
                    }
                },
                "required": [
                    "id"
                ],
                "type": "object"
            }
        },
        "securitySchemes": {
            "bearerAuth": {
                "scheme": "bearer",
                "type": "http"
            }
        }
    }
}